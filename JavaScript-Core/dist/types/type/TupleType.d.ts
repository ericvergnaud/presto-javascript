import ContainerType from './ContainerType';
import { BooleanType } from '../type';
import { Identifier } from '../grammar';
import { Context, Transpiler } from "../runtime";
import IType from "./IType";
import { Section } from "../parser";
import { IExpression } from "../expression";
import { IMethodDeclaration } from "../declaration";
export default class TupleType extends ContainerType {
    static instance: TupleType;
    constructor();
    withItemType(itemType: IType): IType;
    isAssignableFrom(context: Context, other: IType): boolean;
    checkItem(context: Context, section: Section, other: IType): IType;
    declareItem(transpiler: Transpiler, itemType: IType, item: IExpression): void;
    transpileItem(transpiler: Transpiler, itemType: IType, item: IExpression): void;
    transpileAssignItemValue(transpiler: Transpiler, item: IExpression, expression: IExpression): void;
    checkMember(context: Context, section: Section, id: Identifier): IType;
    declareMember(transpiler: Transpiler, member: Identifier): void;
    transpileMember(transpiler: Transpiler, member: Identifier): void;
    checkAdd(context: Context, section: Section, other: IType, tryReverse: boolean): IType;
    declareAdd(transpiler: Transpiler, other: IType, tryReverse: boolean, left: IExpression, right: IExpression): void;
    transpileAdd(transpiler: Transpiler, other: IType, tryReverse: boolean, left: IExpression, right: IExpression): void;
    checkContains(context: Context, section: Section, other: IType): BooleanType;
    declareContains(transpiler: Transpiler, other: IType, container: IExpression, item: IExpression): void;
    transpileContains(transpiler: Transpiler, other: IType, container: IExpression, item: IExpression): void;
    declareHasAllOrAny(transpiler: Transpiler, other: IType, container: IExpression, items: IExpression): void;
    transpileHasAllValue(transpiler: Transpiler, other: IType, container: IExpression, items: IExpression): void;
    transpileHasAnyValue(transpiler: Transpiler, other: IType, container: IExpression, items: IExpression): void;
    checkHasAllOrAny(context: Context, section: Section, other: IType): IType;
    getMemberMethods(context: Context, id: Identifier): Set<IMethodDeclaration>;
}
