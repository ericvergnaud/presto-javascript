import NativeType from './NativeType';
import { IValue } from '../value';
import { CmpOp, Identifier } from '../grammar';
import { Context, Transpiler } from "../runtime";
import IType from "./IType";
import { Section } from "../parser";
import { IExpression } from "../expression";
import { IMethodDeclaration } from "../declaration";
export default class TextType extends NativeType {
    static instance: TextType;
    constructor();
    isAssignableFrom(context: Context, other: IType): boolean;
    declare(transpiler: Transpiler): void;
    transpile(transpiler: Transpiler): void;
    checkAdd(context: Context, section: Section, other: IType, tryReverse: boolean): IType;
    declareAdd(transpiler: Transpiler, other: IType, tryReverse: boolean, left: IExpression, right: IExpression): void;
    transpileAdd(transpiler: Transpiler, other: IType, tryReverse: boolean, left: IExpression, right: IExpression): void;
    checkMultiply(context: Context, section: Section, other: IType, tryReverse: boolean): IType;
    declareMultiply(transpiler: Transpiler, other: IType, tryReverse: boolean, left: IExpression, right: IExpression): void;
    transpileMultiply(transpiler: Transpiler, other: IType, tryReverse: boolean, left: IExpression, right: IExpression): void;
    checkCompare(context: Context, section: Section, other: IType): IType;
    declareCompare(transpiler: Transpiler, other: IType): void;
    transpileCompare(transpiler: Transpiler, other: IType, operator: CmpOp, left: IExpression, right: IExpression): void;
    checkItem(context: Context, section: Section, itemType: IType): IType;
    declareItem(transpiler: Transpiler, itemType: IType): void;
    transpileItem(transpiler: Transpiler, itemType: IType, item: IExpression): void;
    checkMember(context: Context, section: Section, member: Identifier): IType;
    declareMember(transpiler: Transpiler, member: Identifier): void;
    transpileMember(transpiler: Transpiler, id: Identifier): void;
    checkContains(context: Context, section: Section, other: IType): IType;
    declareContains(transpiler: Transpiler, other: IType, container: IExpression, item: IExpression): void;
    transpileContains(transpiler: Transpiler, other: IType, container: IExpression, item: IExpression): void;
    checkHasAllOrAny(context: Context, section: Section, other: IType): IType;
    declareHasAllOrAny(transpiler: Transpiler, other: IType, container: IExpression, items: IExpression): void;
    transpileHasAllValue(transpiler: Transpiler, other: IType, container: IExpression, items: IExpression): void;
    transpileHasAnyValue(transpiler: Transpiler, other: IType, container: IExpression, items: IExpression): void;
    checkSlice(context: Context, section: Section): IType;
    declareSlice(transpiler: Transpiler, first: IExpression, last: IExpression): void;
    transpileSlice(transpiler: Transpiler, first: IExpression, last: IExpression): void;
    checkIterator(context: Context, section: Section, source: IExpression): IType;
    convertJavaScriptValueToPromptoValue(context: Context, value: any, returnType: IType | null): IValue;
    getMemberMethods(context: Context, id: Identifier): Set<IMethodDeclaration>;
}
