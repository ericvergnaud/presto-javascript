import BaseExpression from './BaseExpression';
import { ContOp, Identifier } from '../grammar';
import { MatchOp, IQueryBuilder } from '../store';
import { IValue, Container } from '../value';
import { IType } from '../type';
import { CodeWriter } from '../utils';
import IExpression from "./IExpression";
import { Context, Transpiler } from "../runtime";
import { TestMethodDeclaration } from "../declaration";
import { Dialect } from "../parser";
import IAssertion from "./IAssertion";
import IPredicate from "./IPredicate";
export default class ContainsExpression extends BaseExpression implements IPredicate, IAssertion {
    left: IExpression;
    operator: ContOp;
    right: IExpression;
    constructor(left: IExpression, operator: ContOp, right: IExpression);
    toString(): string;
    toDialect(writer: CodeWriter): void;
    check(context: Context): IType;
    checkPredicate(context: Context): IType;
    checkValue(context: Context): IType;
    checkOperator(context: Context, lt: IType, rt: IType): IType;
    interpretExpression(context: Context): IValue;
    interpretPredicate(context: Context): IValue;
    interpretContainerPredicate(context: Context, container: Container<never>, predicate: (o: IValue) => boolean): IValue;
    allMatch(context: Context, container: Container<never>, predicate: (o: IValue) => boolean): boolean;
    anyMatch(context: Context, container: Container<never>, predicate: (o: IValue) => boolean): boolean;
    interpretValues(context: Context, lval: IValue, rval: IValue): IValue;
    containsAll(context: Context, container: Container<never>, items: Container<never>): boolean;
    containsAny(context: Context, container: Container<never>, items: Container<never>): boolean;
    interpretAssert(context: Context, test: TestMethodDeclaration): boolean;
    transpileFound(transpiler: Transpiler, dialect: Dialect): void;
    getExpected(context: Context, dialect: Dialect, escapeMode: number): string;
    checkQuery(context: Context): IType;
    interpretQuery(context: Context, query: IQueryBuilder): void;
    declareQuery(transpiler: Transpiler): void;
    transpileQuery(transpiler: Transpiler, builderName: string): void;
    getAttributeType(context: Context, id: Identifier): IType | null;
    getMatchOp(context: Context, fieldType: IType, valueType: IType, operator: ContOp, reverse: boolean): MatchOp;
    readFieldName(exp: IExpression): string | null;
    declare(transpiler: Transpiler): void;
    declarePredicate(transpiler: Transpiler): void;
    declareValue(transpiler: Transpiler): void;
    transpile(transpiler: Transpiler): void;
    transpilePredicate(transpiler: Transpiler): void;
    transpileValue(transpiler: Transpiler): void;
    checkAssert(context: Context): Context;
}
