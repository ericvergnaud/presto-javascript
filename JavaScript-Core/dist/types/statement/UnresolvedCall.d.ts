import BaseStatement from './BaseStatement';
import { Dialect, Section } from '../parser';
import { MethodType, IType } from '../type';
import { CodeWriter } from '../utils';
import { UnresolvedSelector, MemberSelector, ConstructorExpression, IExpression, IAssertion } from '../expression';
import { MethodCall } from '../statement';
import { AttributeDeclaration, TestMethodDeclaration } from '../declaration';
import { ArgumentList, Identifier } from "../grammar";
import { Context, Transpiler } from "../runtime";
import { IValue } from "../value";
export default class UnresolvedCall extends BaseStatement implements IAssertion {
    caller: IExpression;
    args: ArgumentList | null;
    resolved?: IExpression;
    constructor(caller: IExpression, args: ArgumentList | null);
    isSimple(): boolean;
    isPredicate(): boolean;
    isAssertion(): boolean;
    checkAttribute(context: Context): AttributeDeclaration | null;
    equals(other: any): boolean;
    toDialect(writer: CodeWriter): void;
    toString(): string;
    check(context: Context): IType;
    resolveAndCheck(context: Context): IType;
    interpretExpression(context: Context): IValue;
    interpretStatement(context: Context): IValue | null;
    interpretReference(context: Context): IValue;
    interpretAssert(context: Context, testMethodDeclaration: TestMethodDeclaration): boolean;
    getExpected(context: Context, dialect: Dialect, escapeMode: number): string;
    transpileFound(transpiler: Transpiler, dialect: Dialect): void;
    resolve(context: Context): IExpression;
    resolveUnresolvedSelector(context: Context, caller: UnresolvedSelector): IExpression | null;
    resolveUnresolvedIdentifier(context: Context, id: Identifier): IExpression | null;
    resolveUnresolvedMemberMethod(context: Context | null, id: Identifier): IExpression | null;
    resolveUnresolvedMethodReference(context: Context, id: Identifier): MethodCall;
    resolveUnresolvedDeclaration(context: Context, id: Identifier): MethodCall | ConstructorExpression;
    resolveUnresolvedMember(context: Context, id: Identifier): import("../runtime").MethodDeclarationMap;
    resolveMember(context: Context, caller: MemberSelector): IExpression | null;
    declare(transpiler: Transpiler): void;
    transpile(transpiler: Transpiler): void;
    transpileReference(transpiler: Transpiler, method: MethodType): void;
    setParent(parent: IExpression): void;
    checkAssert(context: Context): Context;
    locateSectionAtLine(line: number): Section | null;
}
