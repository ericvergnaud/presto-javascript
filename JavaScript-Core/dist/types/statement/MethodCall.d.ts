import SimpleStatement from './SimpleStatement';
import { Dialect } from '../parser';
import { ArgumentList } from '../grammar';
import { Context, Transpiler } from '../runtime';
import { DispatchMethodDeclaration, ClosureDeclaration, IMethodDeclaration, AttributeDeclaration, TestMethodDeclaration } from '../declaration';
import { MethodType, IType } from '../type';
import { MethodSelector, IAssertion } from '../expression';
import { ClosureValue, IValue } from '../value';
import { CodeWriter } from '../utils';
export default class MethodCall extends SimpleStatement implements IAssertion {
    static fullDeclareCounter: number;
    selector: MethodSelector;
    args: ArgumentList | null;
    variableName?: string;
    dispatcher?: DispatchMethodDeclaration;
    fullSelector?: MethodSelector;
    constructor(selector: MethodSelector, args: ArgumentList | null);
    toDialect(writer: CodeWriter): void;
    requiresInvoke(writer: CodeWriter): boolean | import("../declaration").IDeclaration;
    toString(): string;
    check(context: Context, updateSelectorParent?: boolean): IType;
    checkAbstractOnly(context: Context, declaration: IMethodDeclaration): void;
    checkReference(context: Context): IType | null;
    isLocalClosure(context: Context): boolean;
    checkDeclaration(declaration: IMethodDeclaration, parent: Context, local: Context): IType;
    lightCheck(declaration: IMethodDeclaration, local: Context): IType;
    fullCheck(declaration: IMethodDeclaration, parent: Context, local: Context): IType;
    declare(transpiler: Transpiler): void;
    doDeclare(transpiler: Transpiler): void;
    declareDeclaration(transpiler: Transpiler, declaration: IMethodDeclaration, local: Context): void;
    lightDeclareDeclaration(transpiler: Transpiler, declaration: IMethodDeclaration, local: Context): void;
    fullDeclareDeclaration(transpiler: Transpiler, declaration: IMethodDeclaration, local: Context): void;
    transpile(transpiler: Transpiler): void;
    transpileReference(transpiler: Transpiler, method: MethodType): void;
    doTranspile(transpiler: Transpiler, refOnly: boolean): void;
    transpileSingle(transpiler: Transpiler, declaration: IMethodDeclaration, allowDerived?: boolean, refOnly?: boolean): void;
    transpileMultiple(transpiler: Transpiler, declarations: Set<IMethodDeclaration>, refOnly?: boolean): void;
    transpileBuiltin(transpiler: Transpiler, declaration: IMethodDeclaration, refOnly?: boolean): void;
    transpileSelector(transpiler: Transpiler, declaration: IMethodDeclaration): void;
    transpileAssignments(transpiler: Transpiler, declaration: IMethodDeclaration, allowDerived?: boolean): void;
    makeArguments(context: Context, declaration: IMethodDeclaration): ArgumentList;
    interpretExpression(context: Context): IValue;
    interpretStatement(context: Context): IValue | null;
    assignArguments(calling: Context, local: Context, declaration: IMethodDeclaration): void;
    interpretReference(context: Context): IValue;
    interpretAssert(context: Context, testMethodDeclaration: TestMethodDeclaration): boolean;
    getExpected(context: Context, dialect: Dialect, escapeMode: number): string;
    transpileFound(transpiler: Transpiler, dialect: Dialect): void;
    findDeclaration(context: Context): IMethodDeclaration | null;
    findRegistered(context: Context): IMethodDeclaration | null;
    getClosureDeclaration(context: Context, closure: ClosureValue): IMethodDeclaration | ClosureDeclaration;
    checkAssert(context: Context): Context;
    checkAttribute(context: Context): AttributeDeclaration | null;
    equals(other: any): boolean;
    isAssertion(): boolean;
    isPredicate(): boolean;
}
