import ContainerType from './ContainerType';
import { Identifier } from '../grammar';
import IType from "./IType";
import { Context, Transpiler } from "../runtime";
import { Section } from "../parser";
import { IExpression } from "../expression";
import { IMethodDeclaration } from "../declaration";
import { IValue, ListValue } from "../value";
export default class SetType extends ContainerType {
    constructor(itemType: IType);
    withItemType(itemType: IType): SetType;
    declare(transpiler: Transpiler): void;
    getTranspiledName(context: Context): string;
    equals(other: any): boolean;
    checkAdd(context: Context, section: Section, other: IType, tryReverse: boolean): IType;
    declareAdd(transpiler: Transpiler, other: IType, tryReverse: boolean, left: IExpression, right: IExpression): void;
    transpileAdd(transpiler: Transpiler, other: IType, tryReverse: boolean, left: IExpression, right: IExpression): void;
    checkSubtract(context: Context, section: Section, other: IType): IType;
    declareSubtract(transpiler: Transpiler, other: IType, left: IExpression, right: IExpression): void;
    transpileSubtract(transpiler: Transpiler, other: IType, left: IExpression, right: IExpression): void;
    checkItem(context: Context, section: Section, other: IType): IType;
    declareItem(transpiler: Transpiler, itemType: IType): void;
    transpileItem(transpiler: Transpiler, itemType: IType, item: IExpression): void;
    declareContains(transpiler: Transpiler, other: IType, container: IExpression, item: IExpression): void;
    transpileContains(transpiler: Transpiler, other: IType, container: IExpression, item: IExpression): void;
    checkHasAllOrAny(context: Context, section: Section, other: IType): IType;
    declareHasAllOrAny(transpiler: Transpiler, other: IType, container: IExpression, items: IExpression): void;
    transpileHasAllValue(transpiler: Transpiler, other: IType, container: IExpression, items: IExpression): void;
    transpileHasAnyValue(transpiler: Transpiler, other: IType, container: IExpression, items: IExpression): void;
    transpileHasAllPredicate(transpiler: Transpiler, other: IType, container: IExpression, predicate: IExpression): void;
    transpileHasAnyPredicate(transpiler: Transpiler, other: IType, container: IExpression, predicate: IExpression): void;
    checkIterator(context: Context, section: Section, source: IExpression): IType;
    getMemberMethods(context: Context, id: Identifier): Set<IMethodDeclaration>;
    isAssignableFrom(context: Context, other: IType): boolean;
    containerToList(value: IValue): ListValue;
}
