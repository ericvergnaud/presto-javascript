import NativeType from './NativeType';
import { IType } from './index';
import { CmpOp, Identifier } from '../grammar';
import { IValue } from '../value';
import { Context, Transpiler } from "../runtime";
import { Section } from "../parser";
import { IExpression } from "../expression";
import { IMethodDeclaration } from "../declaration";
export default class IntegerType extends NativeType {
    static instance: IntegerType;
    constructor();
    isAssignableFrom(context: Context, other: IType): boolean;
    declare(transpiler: Transpiler): void;
    transpile(transpiler: Transpiler): void;
    checkAdd(context: Context, section: Section, other: IType, tryReverse: boolean): IType;
    declareAdd(transpiler: Transpiler, other: IType, tryReverse: boolean, left: IExpression, right: IExpression): void;
    transpileAdd(transpiler: Transpiler, other: IType, tryReverse: boolean, left: IExpression, right: IExpression): void;
    checkSubtract(context: Context, section: Section, other: IType): IType;
    declareSubtract(transpiler: Transpiler, other: IType, left: IExpression, right: IExpression): void;
    transpileSubtract(transpiler: Transpiler, other: IType, left: IExpression, right: IExpression): void;
    checkMultiply(context: Context, section: Section, other: IType, tryReverse: boolean): IType;
    declareMultiply(transpiler: Transpiler, other: IType, tryReverse: boolean, left: IExpression, right: IExpression): void;
    transpileMultiply(transpiler: Transpiler, other: IType, tryReverse: boolean, left: IExpression, right: IExpression): void;
    checkDivide(context: Context, section: Section, other: IType): IType;
    declareDivide(transpiler: Transpiler, other: IType, left: IExpression, right: IExpression): void;
    transpileDivide(transpiler: Transpiler, other: IType, left: IExpression, right: IExpression): void;
    checkIntDivide(context: Context, section: Section, other: IType): IType;
    declareIntDivide(transpiler: Transpiler, other: IType, left: IExpression, right: IExpression): void;
    transpileIntDivide(transpiler: Transpiler, other: IType, left: IExpression, right: IExpression): void;
    checkModulo(context: Context, section: Section, other: IType): IType;
    declareModulo(transpiler: Transpiler, other: IType, left: IExpression, right: IExpression): void;
    transpileModulo(transpiler: Transpiler, other: IType, left: IExpression, right: IExpression): void;
    checkMinus(context: Context, section: Section): IType;
    declareMinus(transpiler: Transpiler): void;
    transpileMinus(transpiler: Transpiler, value: IExpression): void;
    checkCompare(context: Context, section: Section, other: IType): IType;
    declareCompare(transpiler: Transpiler, other: IType): void;
    transpileCompare(transpiler: Transpiler, other: IType, operator: CmpOp, left: IExpression, right: IExpression): void;
    checkRange(context: Context, section: Section, other: IType): IType;
    declareRange(transpiler: Transpiler, other: IType): void;
    transpileRange(transpiler: Transpiler, itemType: IType, first: IExpression, last: IExpression): void;
    newRange(left: IValue, right: IValue): IValue;
    convertJavaScriptValueToPromptoValue(context: Context, value: any, returnType: IType | null): IValue;
    getMemberMethods(context: Context, id: Identifier): Set<IMethodDeclaration>;
}
