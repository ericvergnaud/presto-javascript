import Section from "../parser/Section";
import { MethodType } from './index';
import { CodeWriter } from '../utils';
import IType from "./IType";
import { CmpOp, Identifier } from "../grammar";
import { Context, Transpiler } from "../runtime";
import { IMethodDeclaration } from "../declaration";
import { ArrowExpression, IExpression } from "../expression";
import { IValue } from "../value";
import { TypeFamily } from "../store";
import { JsonNode } from "../json";
export default abstract class BaseType extends Section implements IType {
    id: Identifier;
    family: TypeFamily;
    constructor(id: Identifier, family: TypeFamily);
    abstract checkExists(context: Context): void;
    abstract isMoreSpecificThan(context: Context, other: IType): boolean;
    get name(): string;
    get mutable(): boolean;
    anyfy(): IType;
    resolve(context: Context, onError: (type: IType) => void): IType;
    isMutable(context: Context): boolean;
    asMutable(context: Context, mutable: boolean): IType;
    isStorable(context: Context): boolean;
    getTranspiledName(context: Context): string;
    toString(): string;
    equals(other: any): boolean;
    isAssignableFrom(context: Context, other: IType): boolean;
    getMemberMethods(context: Context, id: Identifier): Set<IMethodDeclaration>;
    getStaticMemberMethods(context: Context, id: Identifier): Set<IMethodDeclaration>;
    getStaticMemberValue(context: Context, id: Identifier): IValue;
    declare(transpiler: Transpiler): void;
    transpile(transpiler: Transpiler): void;
    transpileAssignMember(transpiler: Transpiler, member: Identifier): void;
    transpileAssignMemberValue(transpiler: Transpiler, member: Identifier, expression: IExpression): void;
    transpileAssignItemValue(transpiler: Transpiler, item: IExpression, expression: IExpression): void;
    checkAdd(context: Context, section: Section, other: IType, tryReverse: boolean): IType;
    declareAdd(transpiler: Transpiler, other: IType, tryReverse: boolean, left: IExpression, right: IExpression): void;
    transpileAdd(transpiler: Transpiler, other: IType, tryReverse: boolean, left: IExpression, right: IExpression): void;
    checkSubtract(context: Context, section: Section, other: IType): IType;
    declareSubtract(transpiler: Transpiler, other: IType, left: IExpression, right: IExpression): void;
    transpileSubtract(transpiler: Transpiler, other: IType, left: IExpression, right: IExpression): void;
    checkDivide(context: Context, section: Section, other: IType): IType;
    declareDivide(transpiler: Transpiler, other: IType, left: IExpression, right: IExpression): void;
    transpileDivide(transpiler: Transpiler, other: IType, left: IExpression, right: IExpression): void;
    checkIntDivide(context: Context, section: Section, other: IType): IType;
    declareIntDivide(transpiler: Transpiler, other: IType, left: IExpression, right: IExpression): void;
    transpileIntDivide(transpiler: Transpiler, other: IType, left: IExpression, right: IExpression): void;
    checkModulo(context: Context, section: Section, other: IType): IType;
    declareModulo(transpiler: Transpiler, other: IType, left: IExpression, right: IExpression): void;
    transpileModulo(transpiler: Transpiler, other: IType, left: IExpression, right: IExpression): void;
    checkMultiply(context: Context, section: Section, other: IType, tryReverse: boolean): IType;
    declareMultiply(transpiler: Transpiler, other: IType, tryReverse: boolean, left: IExpression, right: IExpression): void;
    transpileMultiply(transpiler: Transpiler, other: IType, tryReverse: boolean, left: IExpression, right: IExpression): void;
    checkMinus(context: Context, section: Section): IType;
    declareMinus(transpiler: Transpiler, expression: IExpression): void;
    transpileMinus(transpiler: Transpiler, expression: IExpression): void;
    checkCompare(context: Context, section: Section, other: IType): IType;
    declareCompare(transpiler: Transpiler, other: IType): void;
    transpileCompare(transpiler: Transpiler, other: IType, operator: CmpOp, left: IExpression, right: IExpression): void;
    checkContains(context: Context, section: Section, other: IType): IType;
    declareContains(transpiler: Transpiler, other: IType, container: IExpression, item: IExpression): void;
    transpileContains(transpiler: Transpiler, other: IType, container: IExpression, item: IExpression): void;
    checkHasAllOrAny(context: Context, section: Section, other: IType): IType;
    declareHasAllOrAny(transpiler: Transpiler, other: IType, container: IExpression, item: IExpression): void;
    transpileHasAllValue(transpiler: Transpiler, other: IType, container: IExpression, item: IExpression): void;
    transpileHasAnyValue(transpiler: Transpiler, other: IType, container: IExpression, item: IExpression): void;
    transpileHasAllPredicate(transpiler: Transpiler, other: IType, container: IExpression, predicate: IExpression): void;
    transpileHasAnyPredicate(transpiler: Transpiler, other: IType, container: IExpression, predicate: IExpression): void;
    checkItem(context: Context, section: Section, itemType: IType): IType;
    declareItem(transpiler: Transpiler, itemType: IType, item: IExpression): void;
    transpileItem(transpiler: Transpiler, itemType: IType, item: IExpression): void;
    checkMember(context: Context, section: Section, id: Identifier): IType;
    checkStaticMember(context: Context, section: Section, member: Identifier): IType;
    declareStaticMember(transpiler: Transpiler, member: Identifier): void;
    transpileStaticMember(transpiler: Transpiler, member: Identifier): void;
    declareMember(transpiler: Transpiler, member: Identifier): void;
    transpileMember(transpiler: Transpiler, id: Identifier): void;
    checkSlice(context: Context, section: Section): IType;
    declareSlice(transpiler: Transpiler, first: IExpression, last: IExpression): void;
    transpileSlice(transpiler: Transpiler, first: IExpression, last: IExpression): void;
    checkIterator(context: Context, section: Section, source: IExpression): IType;
    declareIterator(transpiler: Transpiler, id: Identifier, expression: IExpression): void;
    transpileIterator(transpiler: Transpiler, id: Identifier, expression: IExpression): void;
    checkAssignableFrom(context: Context, section: Section, other: IType): void;
    checkRange(context: Context, section: Section, other: IType): IType;
    newRange(first: IValue, last: IValue): IValue;
    declareRange(transpiler: Transpiler, other: IType): void;
    transpileRange(transpiler: Transpiler, other: IType, first: IExpression, last: IExpression): void;
    checkAnd(context: Context, section: Section, other: IType): IType;
    declareAnd(transpiler: Transpiler): void;
    transpileAnd(transpiler: Transpiler): void;
    checkOr(context: Context, section: Section, other: IType): IType;
    checkNot(context: Context, section: Section): IType;
    readJSONValue(context: Context, node: JsonNode, parts: Map<string, Uint8Array>): IValue;
    declareSorted(transpiler: Transpiler, key: any): void;
    getSortedComparator(context: Context, desc: boolean, key: any): (a: any, b: any) => number;
    transpileSortedComparator(transpiler: Transpiler, key: IExpression | null, descending: boolean): void;
    convertJavaScriptValueToPromptoValue(context: Context, value: any, returnType: IType | null): IValue;
    toDialect(writer: CodeWriter): void;
    transpileJsxCode(transpiler: Transpiler, expression: IExpression): void;
    checkArrowExpression(ctx: Context, arrow: ArrowExpression): MethodType;
}
