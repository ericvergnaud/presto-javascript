import IValue from "./IValue";
import { IResource } from './index';
import { IType } from "../type";
import { Context, Transpiler } from "../runtime";
import { IStorable } from "../store";
import { Identifier } from "../grammar";
import { JsonNode, JsonParent } from "../json";
import IValueIterable from "./IValueIterable";
export default abstract class BaseValue<T> implements IValue {
    static id: number;
    id: number;
    type: IType;
    value: T;
    mutable: boolean;
    constructor(type: IType, value: T, mutable?: boolean);
    isIterable(): boolean;
    asIterable(context: Context): IValueIterable;
    isSliceable(): boolean;
    isResource(): boolean;
    asResource(): IResource;
    getValue(): T;
    equals(value: any): boolean;
    GetMemberValue(context: Context, member: Identifier, autoCreate?: boolean): IValue;
    SetMemberValue(context: Context, member: Identifier, value: IValue): void;
    GetItemValue(context: Context, item: IValue, autoCreate?: boolean): IValue;
    SetItemValue(context: Context, item: IValue, value: IValue): void;
    toJsonNode(): JsonNode;
    toJsonStream(context: Context, values: JsonParent, instanceId: never, fieldName: string, withType: boolean, binaries: Map<string, never> | null): void;
    toDocumentValue(context: Context): IValue;
    getStorableData(): any;
    collectStorables(storables: Set<IStorable>): void;
    declare(transpiler: Transpiler): void;
    transpile(transpiler: Transpiler): void;
    convertToJavaScript(): any;
    And(context: Context, value: IValue): IValue;
    Or(context: Context, value: IValue): IValue;
    Not(context: Context): IValue;
    Add(context: Context, value: IValue): IValue;
    Subtract(context: Context, value: IValue): IValue;
    Multiply(context: Context, value: IValue): IValue;
    Divide(context: Context, value: IValue): IValue;
    IntDivide(context: Context, value: IValue): IValue;
    Modulo(context: Context, value: IValue): IValue;
    Minus(context: Context): IValue;
    Contains(context: Context, value: IValue): boolean;
    CompareTo(context: Context, value: IValue): number;
    ConvertTo(type: IType): IValue;
    Roughly(context: Context, value: IValue): boolean;
}
