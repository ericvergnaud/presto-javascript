import CategoryDeclaration from './CategoryDeclaration';
import { SetterMethodDeclaration, GetterMethodDeclaration, IMethodDeclaration, OperatorMethodDeclaration } from '../declaration';
import { Context, MethodDeclarationMap, Transpiler } from '../runtime';
import { ConcreteInstance, Instance } from '../value';
import { IType } from '../type';
import { CodeWriter } from "../utils";
import { Identifier, IdentifierList, Operator } from "../grammar";
import { Section } from "../parser";
export default class ConcreteCategoryDeclaration extends CategoryDeclaration<ConcreteInstance> {
    methods: IMethodDeclaration[];
    methodsMap?: Map<string, MethodDeclarationMap>;
    constructor(id: Identifier, attributes: IdentifierList | null, derivedFrom: IdentifierList | null, methods: IMethodDeclaration[] | null);
    isWidget(context: Context): boolean;
    toEDialect(writer: CodeWriter): void;
    categoryTypeToEDialect(writer: CodeWriter): void;
    toODialect(writer: CodeWriter): void;
    categoryTypeToODialect(writer: CodeWriter): void;
    categoryExtensionToODialect(writer: CodeWriter): void;
    bodyToODialect(writer: CodeWriter): void;
    toMDialect(writer: CodeWriter): void;
    categoryTypeToMDialect(writer: CodeWriter): void;
    methodsToMDialect(writer: CodeWriter): void;
    hasAttribute(context: Context, id: Identifier): boolean;
    hasDerivedAttribute(context: Context, id: Identifier): boolean;
    static ancestorHasAttribute(context: Context, ancestor: Identifier, id: Identifier): boolean;
    hasMethod(context: Context, id: Identifier): boolean;
    hasDerivedMethod(context: Context, id: Identifier): boolean;
    static ancestorHasMethod(context: Context, ancestor: Identifier, id: Identifier): boolean;
    check(context: Context): IType;
    checkMethods(context: Context): void;
    registerMethods(context: Context): void;
    registerMethod(context: Context, method: IMethodDeclaration): void;
    static getMethodKey(name: string): string;
    getLocalMethods(): IMethodDeclaration[];
    getMemberMethods(context: Context, id: Identifier, includeAbstract: boolean): MethodDeclarationMap;
    collectMemberMethods(context: Context, result: MethodDeclarationMap, includeAbstract: boolean): void;
    collectInheritedMemberMethods(context: Context, result: MethodDeclarationMap, includeAbstract: boolean): void;
    collectInheritedMemberMethod(context: Context, ancestor: Identifier, result: MethodDeclarationMap, includeAbstract: boolean): void;
    collectThisMemberMethods(context: Context, result: MethodDeclarationMap, includeAbstract: boolean): void;
    checkDerived(context: Context): void;
    isDerivedFrom(context: Context, categoryType: IType): boolean;
    static isAncestorDerivedFrom(context: Context, ancestor: Identifier, categoryType: IType): boolean;
    newInstance(context: Context): Instance<any>;
    findGetter(context: Context, name: Identifier): GetterMethodDeclaration | null;
    findDerivedGetter(context: Context, name: Identifier): GetterMethodDeclaration | null;
    static findAncestorGetter(context: Context, ancestor: Identifier, name: Identifier): GetterMethodDeclaration | null;
    findSetter(context: Context, name: Identifier): SetterMethodDeclaration | null;
    findDerivedSetter(context: Context, name: Identifier): SetterMethodDeclaration | null;
    static findAncestorSetter(context: Context, ancestor: Identifier, name: Identifier): SetterMethodDeclaration | null;
    getMemberMethodsMap(context: Context, id: Identifier): MethodDeclarationMap;
    registerMemberMethods(context: Context, result: MethodDeclarationMap): void;
    registerThisMemberMethods(context: Context, result: MethodDeclarationMap): void;
    registerDerivedMemberMethods(context: Context, result: MethodDeclarationMap): void;
    static registerAncestorMemberMethods(context: Context, ancestor: Identifier, result: MethodDeclarationMap): void;
    getOperatorMethod(context: Context, operator: Operator, type: IType): OperatorMethodDeclaration | null;
    declare(transpiler: Transpiler): void;
    declareMethods(transpiler: Transpiler): void;
    declareRoot(transpiler: Transpiler): void;
    transpile(transpiler: Transpiler): void;
    transpileConstructor(transpiler: Transpiler): void;
    transpileLoaders(transpiler: Transpiler): void;
    isEnumeratedAttribute(context: Context, id: Identifier): boolean;
    transpileLocalAttributes(transpiler: Transpiler): void;
    transpileSuperConstructor(transpiler: Transpiler): Transpiler;
    transpileRootConstructor(transpiler: Transpiler): Transpiler;
    transpileGetterSetterAttributes(transpiler: Transpiler): Transpiler;
    transpileMethods(transpiler: Transpiler): Transpiler;
    transpileGetterSetters(transpiler: Transpiler): Transpiler;
    transpileGetterSetter(transpiler: Transpiler, id: Identifier): Transpiler;
    locateSectionAtLine(line: number): Section | null;
}
