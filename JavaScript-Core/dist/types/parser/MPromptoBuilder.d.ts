import { ParserRuleContext, ParseTree, Token, TokenStream } from 'antlr4';
import MParserListener from './MParserListener';
import MCleverParser from './MCleverParser';
import { Section } from "./index";
import { Annotation } from "../grammar";
import { CommentStatement } from "../statement";
import { Abstract_global_method_declarationContext, Abstract_member_method_declarationContext, AddExpressionContext, AndExpressionContext, Annotation_argument_nameContext, Annotation_argumentContext, Annotation_constructorContext, Annotation_identifierContext, AnnotationLiteralValueContext, AnnotationTypeValueContext, Argument_assignmentContext, Argument_listContext, ArgumentAssignmentListContext, ArgumentAssignmentListItemContext, Arrow_prefixContext, ArrowExpressionBodyContext, ArrowExpressionContext, ArrowFilterExpressionContext, ArrowListArgContext, ArrowSingleArgContext, ArrowStatementsBodyContext, Assertion_listContext, AssertionContext, Assign_instance_statementContext, Assign_tuple_statementContext, Assign_variable_statementContext, AssignInstanceStatementContext, AssignTupleStatementContext, AtomicSwitchCaseContext, Attribute_declarationContext, Attribute_identifier_listContext, Attribute_identifierContext, Blob_expressionContext, BlobTypeContext, BooleanLiteralContext, BooleanTypeContext, BreakStatementContext, Category_typeContext, CategoryTypeContext, CharacterLiteralContext, CharacterTypeContext, ChildInstanceContext, ClosureStatementContext, CodeArgumentContext, CodeTypeContext, Collection_literalContext, CollectionSwitchCaseContext, Comment_statementContext, CommentStatementContext, CompareExpressionContext, Concrete_category_declarationContext, Concrete_method_declarationContext, Concrete_widget_declarationContext, ConcreteCategoryDeclarationContext, ConcreteWidgetDeclarationContext, ConstructorFromContext, ConstructorNoFromContext, ContainsExpressionContext, CssTypeContext, DateLiteralContext, DateTimeLiteralContext, DateTimeTypeContext, DateTypeContext, DbIdTypeContext, DecimalLiteralContext, DecimalTypeContext, DeclarationContext, DeclarationsContext, Dict_entry_listContext, Dict_entryContext, Dict_literalContext, DictKeyIdentifierContext, DictKeyTextContext, DictTypeContext, DivideExpressionContext, Do_while_statementContext, Doc_entry_listContext, Doc_entryContext, DocKeyIdentifierContext, DocKeyTextContext, Document_expressionContext, Document_literalContext, DocumentTypeContext, DoWhileStatementContext, ElseIfStatementListContext, ElseIfStatementListItemContext, Enum_native_declarationContext, EqualsExpressionContext, ExplicitFilterExpressionContext, FetchManyAsyncContext, FetchManyContext, FetchOneAsyncContext, FetchOneContext, FetchStatementContext, Filtered_list_suffixContext, FilteredListExpressionContext, Flush_statementContext, FlushStatementContext, For_each_statementContext, ForEachStatementContext, FullDeclarationListContext, Getter_method_declarationContext, HasAllExpressionContext, HasAnyExpressionContext, HasExpressionContext, HexadecimalLiteralContext, HtmlTypeContext, IdentifierExpressionContext, If_statementContext, IfStatementContext, ImageTypeContext, InExpressionContext, InstanceExpressionContext, IntDivideExpressionContext, IntegerLiteralContext, IntegerTypeContext, IsATypeExpressionContext, IsExpressionContext, IsOtherExpressionContext, ItemInstanceContext, ItemSelectorContext, IteratorExpressionContext, IteratorTypeContext, Java_identifierContext, Java_item_expressionContext, Java_method_expressionContext, Java_primary_expressionContext, Java_this_expressionContext, JavaArgumentListContext, JavaArgumentListItemContext, JavaBooleanLiteralContext, JavaCategoryBindingContext, JavaCharacterLiteralContext, JavaChildClassIdentifierContext, JavaChildIdentifierContext, JavaClassIdentifierContext, JavaDecimalLiteralContext, JavaIdentifierContext, JavaIntegerLiteralContext, JavaItemExpressionContext, JavaMethodExpressionContext, JavaNativeStatementContext, JavaPrimaryExpressionContext, JavaReturnStatementContext, Javascript_category_bindingContext, Javascript_identifier_expressionContext, Javascript_identifierContext, Javascript_item_expressionContext, Javascript_method_expressionContext, Javascript_moduleContext, Javascript_native_statementContext, Javascript_new_expressionContext, Javascript_primary_expressionContext, Javascript_this_expressionContext, JavascriptArgumentListContext, JavascriptArgumentListItemContext, JavascriptBooleanLiteralContext, JavascriptCategoryBindingContext, JavascriptCharacterLiteralContext, JavascriptDecimalLiteralContext, JavascriptIntegerLiteralContext, JavascriptItemExpressionContext, JavascriptMemberExpressionContext, JavascriptMethodExpressionContext, JavascriptNativeStatementContext, JavascriptPrimaryExpressionContext, JavascriptReturnStatementContext, JavascriptSelectorExpressionContext, JavascriptStatementContext, JavascriptTextLiteralContext, JavaSelectorExpressionContext, JavaStatementContext, JavaTextLiteralContext, Key_tokenContext, List_literalContext, ListTypeContext, Literal_expressionContext, Literal_list_literalContext, LiteralExpressionContext, LiteralListLiteralContext, LiteralRangeLiteralContext, MaxIntegerLiteralContext, Member_identifierContext, Member_method_declaration_listContext, Member_method_declarationContext, MemberInstanceContext, MemberSelectorContext, Method_declarationContext, Method_identifierContext, MethodCallStatementContext, MinIntegerLiteralContext, MinusExpressionContext, ModuloExpressionContext, MultiplyExpressionContext, Mutable_category_typeContext, MutableInstanceExpressionContext, MutableSelectableExpressionContext, MutableSelectorExpressionContext, Named_argumentContext, Native_category_bindingsContext, Native_category_declarationContext, Native_getter_declarationContext, Native_member_method_declaration_listContext, Native_member_method_declarationContext, Native_method_declarationContext, Native_resource_declarationContext, Native_setter_declarationContext, Native_statement_listContext, Native_symbol_listContext, Native_symbolContext, Native_widget_declarationContext, NativeCategoryBindingListContext, NativeCategoryBindingListItemContext, NativeCategoryDeclarationContext, NativeTypeContext, NativeWidgetDeclarationContext, NotExpressionContext, NullLiteralContext, Operator_argumentContext, Operator_method_declarationContext, OperatorArgumentContext, OperatorDivideContext, OperatorIDivideContext, OperatorMinusContext, OperatorModuloContext, OperatorMultiplyContext, OperatorPlusContext, Order_by_listContext, Order_byContext, OrExpressionContext, Parenthesis_expressionContext, ParenthesisExpressionContext, PeriodLiteralContext, PeriodTypeContext, PrimaryTypeContext, RaiseStatementContext, Range_literalContext, Resource_declarationContext, Return_statementContext, ReturnStatementContext, RootInstanceContext, SelectableExpressionContext, SelectorExpressionContext, Set_literalContext, Setter_method_declarationContext, SetTypeContext, Singleton_category_declarationContext, SingletonCategoryDeclarationContext, SliceFirstAndLastContext, SliceFirstOnlyContext, SliceLastOnlyContext, SliceSelectorContext, Sorted_expressionContext, Sorted_keyContext, Statement_listContext, Store_statementContext, StoreStatementContext, SuperExpressionContext, Switch_case_statement_listContext, Switch_statementContext, SwitchStatementContext, Symbol_identifierContext, SymbolIdentifierContext, SymbolLiteralContext, Symbols_tokenContext, TernaryExpressionContext, Test_method_declarationContext, TextLiteralContext, TextTypeContext, ThenContext, ThisExpressionContext, TimeLiteralContext, TimeTypeContext, TryStatementContext, Tuple_literalContext, Type_identifier_listContext, Type_identifierContext, Type_literalContext, Typed_argumentContext, TypeIdentifierContext, TypeLiteralContext, TypeTypeContext, UUIDLiteralContext, UUIDTypeContext, Value_tokenContext, Variable_identifier_listContext, Variable_identifierContext, VariableIdentifierContext, VersionLiteralContext, VersionTypeContext, While_statementContext, WhileStatementContext, WithResourceStatementContext, WriteStatementContext, OtherFilterExpressionContext, Code_typeContext, ExecuteExpressionContext, Expression_listContext, Expression_tupleContext, CodeExpressionContext, Code_argumentContext, Category_or_any_typeContext, Category_symbolContext, Category_symbol_listContext, Enum_category_declarationContext, Enum_declarationContext, Read_all_expressionContext, Read_blob_expressionContext, Read_one_expressionContext, Read_statementContext, ReadStatementContext, ReplContext, With_singleton_statementContext, WithSingletonStatementContext, Write_statementContext, With_resource_statementContext, AnyTypeContext, AnyListTypeContext, AnyDictTypeContext, CastExpressionContext, CatchAtomicStatementContext, Catch_statement_listContext, CatchCollectionStatementContext, Try_statementContext, Raise_statementContext, MatchingListContext, MatchingRangeContext, MatchingExpressionContext, MatchingPatternContext, LiteralSetLiteralContext, Include_listContext, Csharp_identifierContext, CSharpIdentifierContext, CSharpChildIdentifierContext, CSharpBooleanLiteralContext, CSharpIntegerLiteralContext, CSharpDecimalLiteralContext, CSharpCharacterLiteralContext, CSharpTextLiteralContext, CSharpCategoryBindingContext, Csharp_this_expressionContext, Csharp_primary_expressionContext, Csharp_method_expressionContext, CSharpMethodExpressionContext, CSharpArgumentListContext, CSharpArgumentListItemContext, CSharpNativeStatementContext, CSharpPromptoIdentifierContext, CSharpPrimaryExpressionContext, CSharpSelectorExpressionContext, CSharpStatementContext, CSharpReturnStatementContext, PythonStatementContext, PythonReturnStatementContext, Python2CategoryBindingContext, Python3CategoryBindingContext, Python_category_bindingContext, Python_method_expressionContext, PythonGlobalMethodExpressionContext, PythonMethodExpressionContext, Python_moduleContext, Python2NativeStatementContext, Python3NativeStatementContext, Python_native_statementContext, Python_identifierContext, PythonIdentifierContext, PythonIdentifierExpressionContext, PythonChildIdentifierContext, PythonBooleanLiteralContext, PythonIntegerLiteralContext, PythonDecimalLiteralContext, PythonCharacterLiteralContext, PythonTextLiteralContext, PythonLiteralExpressionContext, PythonPromptoIdentifierContext, PythonPrimaryExpressionContext, PythonArgumentListContext, PythonNamedOnlyArgumentListContext, PythonNamedArgumentListContext, PythonNamedArgumentListItemContext, PythonOrdinalOnlyArgumentListContext, PythonOrdinalArgumentListContext, PythonOrdinalArgumentListItemContext, PythonSelectorExpressionContext, PythonSelfExpressionContext, JsxChildContext, JsxCodeContext, JsxExpressionContext, JsxElementContext, JsxSelfClosingContext, JsxTextContext, JsxValueContext, Jsx_attributeContext, Jsx_childrenContext, Jsx_element_nameContext, Jsx_expressionContext, Jsx_identifierContext, Jsx_fragmentContext, JsxLiteralContext, Jsx_openingContext, Jsx_closingContext, Jsx_self_closingContext, CssExpressionContext, Css_expressionContext, Css_fieldContext, CssTextContext, CssValueContext, Index_clauseContext, Derived_listContext, ExpressionAssignmentListContext, Method_call_expressionContext, Method_call_statementContext, MethodSelectorContext, Method_expressionContext, Copy_fromContext, MethodExpressionContext, Type_expressionContext, TypeExpressionContext } from "./MParser";
export default class MPromptoBuilder extends MParserListener {
    input: TokenStream;
    path: string;
    nodeValues: Map<number, object>;
    nextNodeId: number;
    constructor(parser: MCleverParser);
    setNodeValue(node: ParserRuleContext, value: object | null): void;
    getNodeValue<T>(node: ParserRuleContext): T | null;
    getHiddenTokensBefore(token: Token): string | null;
    getHiddenTokensAfter(token: Token): string | null;
    getHiddenTokensText(hidden: Token[]): string | null;
    getWhiteSpacePlus(ctx: ParserRuleContext): string | null;
    isNotIndent(tree: ParseTree): boolean;
    readAnnotations(ctxs: ParserRuleContext[]): Annotation[] | null;
    readComments(ctxs: ParserRuleContext[]): CommentStatement[] | null;
    buildSection(node: ParserRuleContext, section: Section): void;
    findFirstValidToken(idx: number, allowWS: boolean): Token | null;
    findLastValidToken(idx: number, allowWS: boolean): Token | null;
    readValidToken(idx: number, allowWS: boolean): Token | null;
    exitIndex_clause: (ctx: Index_clauseContext) => void;
    exitDerived_list: (ctx: Derived_listContext) => void;
    exitExpressionAssignmentList: (ctx: ExpressionAssignmentListContext) => void;
    exitMethod_call_expression: (ctx: Method_call_expressionContext) => void;
    exitMethod_call_statement: (ctx: Method_call_statementContext) => void;
    exitMethodSelector: (ctx: MethodSelectorContext) => void;
    exitCopy_from: (ctx: Copy_fromContext) => void;
    exitMethod_expression: (ctx: Method_expressionContext) => void;
    exitMethodExpression: (ctx: MethodExpressionContext) => void;
    exitType_expression: (ctx: Type_expressionContext) => void;
    exitTypeExpression: (ctx: TypeExpressionContext) => void;
    exitIdentifierExpression: (ctx: IdentifierExpressionContext) => void;
    exitTypeIdentifier: (ctx: TypeIdentifierContext) => void;
    exitUUIDLiteral: (ctx: UUIDLiteralContext) => void;
    exitUUIDType: (ctx: UUIDTypeContext) => void;
    exitCommentStatement: (ctx: CommentStatementContext) => void;
    exitComment_statement: (ctx: Comment_statementContext) => void;
    exitBlob_expression: (ctx: Blob_expressionContext) => void;
    exitBooleanLiteral: (ctx: BooleanLiteralContext) => void;
    exitBreakStatement: (ctx: BreakStatementContext) => void;
    exitMinIntegerLiteral: (ctx: MinIntegerLiteralContext) => void;
    exitMaxIntegerLiteral: (ctx: MaxIntegerLiteralContext) => void;
    exitIntegerLiteral: (ctx: IntegerLiteralContext) => void;
    exitDecimalLiteral: (ctx: DecimalLiteralContext) => void;
    exitHexadecimalLiteral: (ctx: HexadecimalLiteralContext) => void;
    exitCharacterLiteral: (ctx: CharacterLiteralContext) => void;
    exitDateLiteral: (ctx: DateLiteralContext) => void;
    exitDateTimeLiteral: (ctx: DateTimeLiteralContext) => void;
    exitDbIdType: (ctx: DbIdTypeContext) => void;
    exitTernaryExpression: (ctx: TernaryExpressionContext) => void;
    exitTest_method_declaration: (ctx: Test_method_declarationContext) => void;
    exitTextLiteral: (ctx: TextLiteralContext) => void;
    exitTimeLiteral: (ctx: TimeLiteralContext) => void;
    exitPeriodLiteral: (ctx: PeriodLiteralContext) => void;
    exitPeriodType: (ctx: PeriodTypeContext) => void;
    exitVersionLiteral: (ctx: VersionLiteralContext) => void;
    exitVersionType: (ctx: VersionTypeContext) => void;
    exitAttribute_identifier: (ctx: Attribute_identifierContext) => void;
    exitVariable_identifier: (ctx: Variable_identifierContext) => void;
    exitList_literal: (ctx: List_literalContext) => void;
    exitDict_literal: (ctx: Dict_literalContext) => void;
    exitTuple_literal: (ctx: Tuple_literalContext) => void;
    exitRange_literal: (ctx: Range_literalContext) => void;
    exitDict_entry_list: (ctx: Dict_entry_listContext) => void;
    exitDict_entry: (ctx: Dict_entryContext) => void;
    exitDoc_entry_list: (ctx: Doc_entry_listContext) => void;
    exitDoc_entry: (ctx: Doc_entryContext) => void;
    exitDocKeyIdentifier: (ctx: DocKeyIdentifierContext) => void;
    exitDocKeyText: (ctx: DocKeyTextContext) => void;
    exitLiteral_expression: (ctx: Literal_expressionContext) => void;
    exitLiteralExpression: (ctx: LiteralExpressionContext) => void;
    exitVariableIdentifier: (ctx: VariableIdentifierContext) => void;
    exitSymbol_identifier: (ctx: Symbol_identifierContext) => void;
    exitNative_symbol: (ctx: Native_symbolContext) => void;
    exitSymbolIdentifier: (ctx: SymbolIdentifierContext) => void;
    exitSymbolLiteral: (ctx: SymbolLiteralContext) => void;
    exitBlobType: (ctx: BlobTypeContext) => void;
    exitBooleanType: (ctx: BooleanTypeContext) => void;
    exitCharacterType: (ctx: CharacterTypeContext) => void;
    exitImageType: (ctx: ImageTypeContext) => void;
    exitTextType: (ctx: TextTypeContext) => void;
    exitHtmlType: (ctx: HtmlTypeContext) => void;
    exitThisExpression: (ctx: ThisExpressionContext) => void;
    exitIntegerType: (ctx: IntegerTypeContext) => void;
    exitDecimalType: (ctx: DecimalTypeContext) => void;
    exitDateType: (ctx: DateTypeContext) => void;
    exitDateTimeType: (ctx: DateTimeTypeContext) => void;
    exitTimeType: (ctx: TimeTypeContext) => void;
    exitCodeType: (ctx: CodeTypeContext) => void;
    exitPrimaryType: (ctx: PrimaryTypeContext) => void;
    exitAttribute_declaration: (ctx: Attribute_declarationContext) => void;
    exitNativeType: (ctx: NativeTypeContext) => void;
    exitCategoryType: (ctx: CategoryTypeContext) => void;
    exitCategory_type: (ctx: Category_typeContext) => void;
    exitListType: (ctx: ListTypeContext) => void;
    exitDictKeyIdentifier: (ctx: DictKeyIdentifierContext) => void;
    exitDictKeyText: (ctx: DictKeyTextContext) => void;
    exitDictType: (ctx: DictTypeContext) => void;
    exitAttribute_identifier_list: (ctx: Attribute_identifier_listContext) => void;
    exitVariable_identifier_list: (ctx: Variable_identifier_listContext) => void;
    exitConcrete_category_declaration: (ctx: Concrete_category_declarationContext) => void;
    exitConcrete_widget_declaration: (ctx: Concrete_widget_declarationContext) => void;
    exitConcreteCategoryDeclaration: (ctx: ConcreteCategoryDeclarationContext) => void;
    exitConcreteWidgetDeclaration: (ctx: ConcreteWidgetDeclarationContext) => void;
    exitNativeWidgetDeclaration: (ctx: NativeWidgetDeclarationContext) => void;
    exitType_identifier: (ctx: Type_identifierContext) => void;
    exitType_identifier_list: (ctx: Type_identifier_listContext) => void;
    exitType_literal: (ctx: Type_literalContext) => void;
    exitTypeLiteral: (ctx: TypeLiteralContext) => void;
    exitTypeType: (ctx: TypeTypeContext) => void;
    exitInstanceExpression: (ctx: InstanceExpressionContext) => void;
    exitSelectableExpression: (ctx: SelectableExpressionContext) => void;
    exitSelectorExpression: (ctx: SelectorExpressionContext) => void;
    exitSet_literal: (ctx: Set_literalContext) => void;
    exitStoreStatement: (ctx: StoreStatementContext) => void;
    exitStore_statement: (ctx: Store_statementContext) => void;
    exitMember_identifier: (ctx: Member_identifierContext) => void;
    exitMemberSelector: (ctx: MemberSelectorContext) => void;
    exitItemSelector: (ctx: ItemSelectorContext) => void;
    exitSliceSelector: (ctx: SliceSelectorContext) => void;
    exitTyped_argument: (ctx: Typed_argumentContext) => void;
    exitCodeArgument: (ctx: CodeArgumentContext) => void;
    exitArgument_list: (ctx: Argument_listContext) => void;
    exitFlush_statement: (ctx: Flush_statementContext) => void;
    exitFlushStatement: (ctx: FlushStatementContext) => void;
    exitArgument_assignment: (ctx: Argument_assignmentContext) => void;
    exitArgumentAssignmentList: (ctx: ArgumentAssignmentListContext) => void;
    exitArgumentAssignmentListItem: (ctx: ArgumentAssignmentListItemContext) => void;
    exitArrow_prefix: (ctx: Arrow_prefixContext) => void;
    exitArrowExpression: (ctx: ArrowExpressionContext) => void;
    exitArrowExpressionBody: (ctx: ArrowExpressionBodyContext) => void;
    exitArrowListArg: (ctx: ArrowListArgContext) => void;
    exitArrowSingleArg: (ctx: ArrowSingleArgContext) => void;
    exitArrowStatementsBody: (ctx: ArrowStatementsBodyContext) => void;
    exitAddExpression: (ctx: AddExpressionContext) => void;
    exitMember_method_declaration_list: (ctx: Member_method_declaration_listContext) => void;
    exitNative_member_method_declaration_list: (ctx: Native_member_method_declaration_listContext) => void;
    exitGetter_method_declaration: (ctx: Getter_method_declarationContext) => void;
    exitNative_setter_declaration: (ctx: Native_setter_declarationContext) => void;
    exitNative_getter_declaration: (ctx: Native_getter_declarationContext) => void;
    exitSetter_method_declaration: (ctx: Setter_method_declarationContext) => void;
    exitSetType: (ctx: SetTypeContext) => void;
    exitMember_method_declaration: (ctx: Member_method_declarationContext) => void;
    exitStatement_list: (ctx: Statement_listContext) => void;
    exitAbstract_global_method_declaration: (ctx: Abstract_global_method_declarationContext) => void;
    exitAbstract_member_method_declaration: (ctx: Abstract_member_method_declarationContext) => void;
    exitConcrete_method_declaration: (ctx: Concrete_method_declarationContext) => void;
    exitMethod_declaration: (ctx: Method_declarationContext) => void;
    exitMethodCallStatement: (ctx: MethodCallStatementContext) => void;
    exitMethod_identifier: (ctx: Method_identifierContext) => void;
    exitConstructorFrom: (ctx: ConstructorFromContext) => void;
    exitConstructorNoFrom: (ctx: ConstructorNoFromContext) => void;
    exitAssertion: (ctx: AssertionContext) => void;
    exitAssertion_list: (ctx: Assertion_listContext) => void;
    exitAssignInstanceStatement: (ctx: AssignInstanceStatementContext) => void;
    exitAssign_instance_statement: (ctx: Assign_instance_statementContext) => void;
    exitAssign_variable_statement: (ctx: Assign_variable_statementContext) => void;
    exitAssign_tuple_statement: (ctx: Assign_tuple_statementContext) => void;
    exitRootInstance: (ctx: RootInstanceContext) => void;
    exitChildInstance: (ctx: ChildInstanceContext) => void;
    exitMemberInstance: (ctx: MemberInstanceContext) => void;
    exitIsATypeExpression: (ctx: IsATypeExpressionContext) => void;
    exitIsOtherExpression: (ctx: IsOtherExpressionContext) => void;
    exitIsExpression: (ctx: IsExpressionContext) => void;
    exitItemInstance: (ctx: ItemInstanceContext) => void;
    exitNative_statement_list: (ctx: Native_statement_listContext) => void;
    exitJava_identifier: (ctx: Java_identifierContext) => void;
    exitJavascript_identifier: (ctx: Javascript_identifierContext) => void;
    exitJavascript_new_expression: (ctx: Javascript_new_expressionContext) => void;
    exitJavascript_primary_expression: (ctx: Javascript_primary_expressionContext) => void;
    exitJavascript_this_expression: (ctx: Javascript_this_expressionContext) => void;
    exitJavaIdentifier: (ctx: JavaIdentifierContext) => void;
    exitJavaChildIdentifier: (ctx: JavaChildIdentifierContext) => void;
    exitJavaClassIdentifier: (ctx: JavaClassIdentifierContext) => void;
    exitJavaChildClassIdentifier: (ctx: JavaChildClassIdentifierContext) => void;
    exitJavaPrimaryExpression: (ctx: JavaPrimaryExpressionContext) => void;
    exitJavascriptBooleanLiteral: (ctx: JavascriptBooleanLiteralContext) => void;
    exitJavascriptCharacterLiteral: (ctx: JavascriptCharacterLiteralContext) => void;
    exitJavascriptTextLiteral: (ctx: JavascriptTextLiteralContext) => void;
    exitJavascriptIntegerLiteral: (ctx: JavascriptIntegerLiteralContext) => void;
    exitJavascriptDecimalLiteral: (ctx: JavascriptDecimalLiteralContext) => void;
    exitJavascriptPrimaryExpression: (ctx: JavascriptPrimaryExpressionContext) => void;
    exitJavascript_identifier_expression: (ctx: Javascript_identifier_expressionContext) => void;
    exitJavaSelectorExpression: (ctx: JavaSelectorExpressionContext) => void;
    exitJavascriptSelectorExpression: (ctx: JavascriptSelectorExpressionContext) => void;
    exitJavascriptMemberExpression: (ctx: JavascriptMemberExpressionContext) => void;
    exitJava_primary_expression: (ctx: Java_primary_expressionContext) => void;
    exitJava_item_expression: (ctx: Java_item_expressionContext) => void;
    exitJavascript_item_expression: (ctx: Javascript_item_expressionContext) => void;
    exitJavascriptItemExpression: (ctx: JavascriptItemExpressionContext) => void;
    exitJavaItemExpression: (ctx: JavaItemExpressionContext) => void;
    exitJavaStatement: (ctx: JavaStatementContext) => void;
    exitJavascriptStatement: (ctx: JavascriptStatementContext) => void;
    exitJavaReturnStatement: (ctx: JavaReturnStatementContext) => void;
    exitJavascriptReturnStatement: (ctx: JavascriptReturnStatementContext) => void;
    exitJavaNativeStatement: (ctx: JavaNativeStatementContext) => void;
    exitJavascriptNativeStatement: (ctx: JavascriptNativeStatementContext) => void;
    exitJavascript_native_statement: (ctx: Javascript_native_statementContext) => void;
    exitNative_method_declaration: (ctx: Native_method_declarationContext) => void;
    exitJavaArgumentList: (ctx: JavaArgumentListContext) => void;
    exitJavascriptArgumentList: (ctx: JavascriptArgumentListContext) => void;
    exitJavaArgumentListItem: (ctx: JavaArgumentListItemContext) => void;
    exitJavascriptArgumentListItem: (ctx: JavascriptArgumentListItemContext) => void;
    exitJava_method_expression: (ctx: Java_method_expressionContext) => void;
    exitJava_this_expression: (ctx: Java_this_expressionContext) => void;
    exitJavascriptMethodExpression: (ctx: JavascriptMethodExpressionContext) => void;
    exitJavascript_method_expression: (ctx: Javascript_method_expressionContext) => void;
    exitJavaMethodExpression: (ctx: JavaMethodExpressionContext) => void;
    exitFullDeclarationList: (ctx: FullDeclarationListContext) => void;
    exitDeclaration: (ctx: DeclarationContext) => void;
    exitDeclarations: (ctx: DeclarationsContext) => void;
    exitIteratorExpression: (ctx: IteratorExpressionContext) => void;
    exitIteratorType: (ctx: IteratorTypeContext) => void;
    exitJavaBooleanLiteral: (ctx: JavaBooleanLiteralContext) => void;
    exitJavaIntegerLiteral: (ctx: JavaIntegerLiteralContext) => void;
    exitJavaDecimalLiteral: (ctx: JavaDecimalLiteralContext) => void;
    exitJavaCharacterLiteral: (ctx: JavaCharacterLiteralContext) => void;
    exitJavaTextLiteral: (ctx: JavaTextLiteralContext) => void;
    exitJavaCategoryBinding: (ctx: JavaCategoryBindingContext) => void;
    exitJavascriptCategoryBinding: (ctx: JavascriptCategoryBindingContext) => void;
    exitJavascript_category_binding: (ctx: Javascript_category_bindingContext) => void;
    exitJavascript_module: (ctx: Javascript_moduleContext) => void;
    exitNativeCategoryBindingList: (ctx: NativeCategoryBindingListContext) => void;
    exitNativeCategoryBindingListItem: (ctx: NativeCategoryBindingListItemContext) => void;
    exitNative_category_bindings: (ctx: Native_category_bindingsContext) => void;
    exitNative_category_declaration: (ctx: Native_category_declarationContext) => void;
    exitNative_widget_declaration: (ctx: Native_widget_declarationContext) => void;
    exitNativeCategoryDeclaration: (ctx: NativeCategoryDeclarationContext) => void;
    exitNative_resource_declaration: (ctx: Native_resource_declarationContext) => void;
    exitResource_declaration: (ctx: Resource_declarationContext) => void;
    exitParenthesis_expression: (ctx: Parenthesis_expressionContext) => void;
    exitParenthesisExpression: (ctx: ParenthesisExpressionContext) => void;
    exitNative_symbol_list: (ctx: Native_symbol_listContext) => void;
    exitEnum_native_declaration: (ctx: Enum_native_declarationContext) => void;
    exitFor_each_statement: (ctx: For_each_statementContext) => void;
    exitForEachStatement: (ctx: ForEachStatementContext) => void;
    exitSymbols_token: (ctx: Symbols_tokenContext) => void;
    exitKey_token: (ctx: Key_tokenContext) => void;
    exitValue_token: (ctx: Value_tokenContext) => void;
    exitNamed_argument: (ctx: Named_argumentContext) => void;
    exitClosureStatement: (ctx: ClosureStatementContext) => void;
    exitReturn_statement: (ctx: Return_statementContext) => void;
    exitReturnStatement: (ctx: ReturnStatementContext) => void;
    exitIf_statement: (ctx: If_statementContext) => void;
    exitElseIfStatementList: (ctx: ElseIfStatementListContext) => void;
    exitElseIfStatementListItem: (ctx: ElseIfStatementListItemContext) => void;
    exitIfStatement: (ctx: IfStatementContext) => void;
    exitSuperExpression: (ctx: SuperExpressionContext) => void;
    exitSwitchStatement: (ctx: SwitchStatementContext) => void;
    exitAssignTupleStatement: (ctx: AssignTupleStatementContext) => void;
    exitRaiseStatement: (ctx: RaiseStatementContext) => void;
    exitWriteStatement: (ctx: WriteStatementContext) => void;
    exitWithResourceStatement: (ctx: WithResourceStatementContext) => void;
    exitWhileStatement: (ctx: WhileStatementContext) => void;
    exitDoWhileStatement: (ctx: DoWhileStatementContext) => void;
    exitTryStatement: (ctx: TryStatementContext) => void;
    exitEqualsExpression: (ctx: EqualsExpressionContext) => void;
    exitCompareExpression: (ctx: CompareExpressionContext) => void;
    exitAtomicSwitchCase: (ctx: AtomicSwitchCaseContext) => void;
    exitCollection_literal: (ctx: Collection_literalContext) => void;
    exitCollectionSwitchCase: (ctx: CollectionSwitchCaseContext) => void;
    exitSwitch_case_statement_list: (ctx: Switch_case_statement_listContext) => void;
    exitSwitch_statement: (ctx: Switch_statementContext) => void;
    exitLiteralRangeLiteral: (ctx: LiteralRangeLiteralContext) => void;
    exitLiteralListLiteral: (ctx: LiteralListLiteralContext) => void;
    exitLiteral_list_literal: (ctx: Literal_list_literalContext) => void;
    exitInExpression: (ctx: InExpressionContext) => void;
    exitCssType: (ctx: CssTypeContext) => void;
    exitHasExpression: (ctx: HasExpressionContext) => void;
    exitHasAllExpression: (ctx: HasAllExpressionContext) => void;
    exitHasAnyExpression: (ctx: HasAnyExpressionContext) => void;
    exitContainsExpression: (ctx: ContainsExpressionContext) => void;
    exitDivideExpression: (ctx: DivideExpressionContext) => void;
    exitIntDivideExpression: (ctx: IntDivideExpressionContext) => void;
    exitModuloExpression: (ctx: ModuloExpressionContext) => void;
    exitAnnotation_constructor: (ctx: Annotation_constructorContext) => void;
    exitAnnotation_argument: (ctx: Annotation_argumentContext) => void;
    exitAnnotation_identifier: (ctx: Annotation_identifierContext) => void;
    exitAnnotation_argument_name: (ctx: Annotation_argument_nameContext) => void;
    exitAnnotationLiteralValue: (ctx: AnnotationLiteralValueContext) => void;
    exitAnnotationTypeValue: (ctx: AnnotationTypeValueContext) => void;
    exitAndExpression: (ctx: AndExpressionContext) => void;
    exitNullLiteral: (ctx: NullLiteralContext) => void;
    exitOperator_argument: (ctx: Operator_argumentContext) => void;
    exitOperatorArgument: (ctx: OperatorArgumentContext) => void;
    exitOperatorPlus: (ctx: OperatorPlusContext) => void;
    exitOperatorMinus: (ctx: OperatorMinusContext) => void;
    exitOperatorMultiply: (ctx: OperatorMultiplyContext) => void;
    exitOperatorDivide: (ctx: OperatorDivideContext) => void;
    exitOperatorIDivide: (ctx: OperatorIDivideContext) => void;
    exitOperatorModulo: (ctx: OperatorModuloContext) => void;
    exitNative_member_method_declaration: (ctx: Native_member_method_declarationContext) => void;
    exitOperator_method_declaration: (ctx: Operator_method_declarationContext) => void;
    exitOrder_by: (ctx: Order_byContext) => void;
    exitOrder_by_list: (ctx: Order_by_listContext) => void;
    exitOrExpression: (ctx: OrExpressionContext) => void;
    exitMultiplyExpression: (ctx: MultiplyExpressionContext) => void;
    exitMutable_category_type: (ctx: Mutable_category_typeContext) => void;
    exitMutableInstanceExpression: (ctx: MutableInstanceExpressionContext) => void;
    exitMutableSelectableExpression: (ctx: MutableSelectableExpressionContext) => void;
    exitMutableSelectorExpression: (ctx: MutableSelectorExpressionContext) => void;
    exitMinusExpression: (ctx: MinusExpressionContext) => void;
    exitNotExpression: (ctx: NotExpressionContext) => void;
    exitWhile_statement: (ctx: While_statementContext) => void;
    exitDo_while_statement: (ctx: Do_while_statementContext) => void;
    exitSingleton_category_declaration: (ctx: Singleton_category_declarationContext) => void;
    exitSingletonCategoryDeclaration: (ctx: SingletonCategoryDeclarationContext) => void;
    exitSliceFirstAndLast: (ctx: SliceFirstAndLastContext) => void;
    exitSliceFirstOnly: (ctx: SliceFirstOnlyContext) => void;
    exitSliceLastOnly: (ctx: SliceLastOnlyContext) => void;
    exitSorted_expression: (ctx: Sorted_expressionContext) => void;
    exitSorted_key: (ctx: Sorted_keyContext) => void;
    exitDocument_expression: (ctx: Document_expressionContext) => void;
    exitDocumentType: (ctx: DocumentTypeContext) => void;
    exitDocument_literal: (ctx: Document_literalContext) => void;
    exitFetchStatement: (ctx: FetchStatementContext) => void;
    exitFetchMany: (ctx: FetchManyContext) => void;
    exitFetchManyAsync: (ctx: FetchManyAsyncContext) => void;
    exitFetchOne: (ctx: FetchOneContext) => void;
    exitFetchOneAsync: (ctx: FetchOneAsyncContext) => void;
    exitThen: (ctx: ThenContext) => void;
    exitFilteredListExpression: (ctx: FilteredListExpressionContext) => void;
    exitFiltered_list_suffix: (ctx: Filtered_list_suffixContext) => void;
    exitArrowFilterExpression: (ctx: ArrowFilterExpressionContext) => void;
    exitExplicitFilterExpression: (ctx: ExplicitFilterExpressionContext) => void;
    exitOtherFilterExpression: (ctx: OtherFilterExpressionContext) => void;
    exitCode_type: (ctx: Code_typeContext) => void;
    exitExecuteExpression: (ctx: ExecuteExpressionContext) => void;
    exitExpression_list: (ctx: Expression_listContext) => void;
    exitExpression_tuple: (ctx: Expression_tupleContext) => void;
    exitCodeExpression: (ctx: CodeExpressionContext) => void;
    exitCode_argument: (ctx: Code_argumentContext) => void;
    exitCategory_or_any_type: (ctx: Category_or_any_typeContext) => void;
    exitCategory_symbol: (ctx: Category_symbolContext) => void;
    exitCategory_symbol_list: (ctx: Category_symbol_listContext) => void;
    exitEnum_category_declaration: (ctx: Enum_category_declarationContext) => void;
    exitEnum_declaration: (ctx: Enum_declarationContext) => void;
    exitRead_all_expression: (ctx: Read_all_expressionContext) => void;
    exitRead_blob_expression: (ctx: Read_blob_expressionContext) => void;
    exitRead_one_expression: (ctx: Read_one_expressionContext) => void;
    exitRead_statement: (ctx: Read_statementContext) => void;
    exitReadStatement: (ctx: ReadStatementContext) => void;
    exitRepl: (ctx: ReplContext) => void;
    exitWith_singleton_statement: (ctx: With_singleton_statementContext) => void;
    exitWithSingletonStatement: (ctx: WithSingletonStatementContext) => void;
    exitWrite_statement: (ctx: Write_statementContext) => void;
    exitWith_resource_statement: (ctx: With_resource_statementContext) => void;
    exitAnyType: (ctx: AnyTypeContext) => void;
    exitAnyListType: (ctx: AnyListTypeContext) => void;
    exitAnyDictType: (ctx: AnyDictTypeContext) => void;
    exitCastExpression: (ctx: CastExpressionContext) => void;
    exitCatchAtomicStatement: (ctx: CatchAtomicStatementContext) => void;
    exitCatchCollectionStatement: (ctx: CatchCollectionStatementContext) => void;
    exitCatch_statement_list: (ctx: Catch_statement_listContext) => void;
    exitTry_statement: (ctx: Try_statementContext) => void;
    exitRaise_statement: (ctx: Raise_statementContext) => void;
    exitMatchingList: (ctx: MatchingListContext) => void;
    exitMatchingRange: (ctx: MatchingRangeContext) => void;
    exitMatchingExpression: (ctx: MatchingExpressionContext) => void;
    exitMatchingPattern: (ctx: MatchingPatternContext) => void;
    exitLiteralSetLiteral: (ctx: LiteralSetLiteralContext) => void;
    exitInclude_list: (ctx: Include_listContext) => void;
    exitCsharp_identifier: (ctx: Csharp_identifierContext) => void;
    exitCSharpIdentifier: (ctx: CSharpIdentifierContext) => void;
    exitCSharpChildIdentifier: (ctx: CSharpChildIdentifierContext) => void;
    exitCSharpBooleanLiteral: (ctx: CSharpBooleanLiteralContext) => void;
    exitCSharpIntegerLiteral: (ctx: CSharpIntegerLiteralContext) => void;
    exitCSharpDecimalLiteral: (ctx: CSharpDecimalLiteralContext) => void;
    exitCSharpCharacterLiteral: (ctx: CSharpCharacterLiteralContext) => void;
    exitCSharpTextLiteral: (ctx: CSharpTextLiteralContext) => void;
    exitCSharpCategoryBinding: (ctx: CSharpCategoryBindingContext) => void;
    exitCsharp_primary_expression: (ctx: Csharp_primary_expressionContext) => void;
    exitCsharp_this_expression: (ctx: Csharp_this_expressionContext) => void;
    exitCsharp_method_expression: (ctx: Csharp_method_expressionContext) => void;
    exitCSharpMethodExpression: (ctx: CSharpMethodExpressionContext) => void;
    exitCSharpArgumentList: (ctx: CSharpArgumentListContext) => void;
    exitCSharpArgumentListItem: (ctx: CSharpArgumentListItemContext) => void;
    exitCSharpNativeStatement: (ctx: CSharpNativeStatementContext) => void;
    exitCSharpPromptoIdentifier: (ctx: CSharpPromptoIdentifierContext) => void;
    exitCSharpPrimaryExpression: (ctx: CSharpPrimaryExpressionContext) => void;
    exitCSharpSelectorExpression: (ctx: CSharpSelectorExpressionContext) => void;
    exitCSharpStatement: (ctx: CSharpStatementContext) => void;
    exitCSharpReturnStatement: (ctx: CSharpReturnStatementContext) => void;
    exitPythonStatement: (ctx: PythonStatementContext) => void;
    exitPythonReturnStatement: (ctx: PythonReturnStatementContext) => void;
    exitPython2CategoryBinding: (ctx: Python2CategoryBindingContext) => void;
    exitPython3CategoryBinding: (ctx: Python3CategoryBindingContext) => void;
    exitPython_category_binding: (ctx: Python_category_bindingContext) => void;
    exitPython_method_expression: (ctx: Python_method_expressionContext) => void;
    exitPythonGlobalMethodExpression: (ctx: PythonGlobalMethodExpressionContext) => void;
    exitPythonMethodExpression: (ctx: PythonMethodExpressionContext) => void;
    exitPython_module: (ctx: Python_moduleContext) => void;
    exitPython2NativeStatement: (ctx: Python2NativeStatementContext) => void;
    exitPython3NativeStatement: (ctx: Python3NativeStatementContext) => void;
    exitPython_native_statement: (ctx: Python_native_statementContext) => void;
    exitPython_identifier: (ctx: Python_identifierContext) => void;
    exitPythonIdentifier: (ctx: PythonIdentifierContext) => void;
    exitPythonIdentifierExpression: (ctx: PythonIdentifierExpressionContext) => void;
    exitPythonChildIdentifier: (ctx: PythonChildIdentifierContext) => void;
    exitPythonBooleanLiteral: (ctx: PythonBooleanLiteralContext) => void;
    exitPythonIntegerLiteral: (ctx: PythonIntegerLiteralContext) => void;
    exitPythonDecimalLiteral: (ctx: PythonDecimalLiteralContext) => void;
    exitPythonCharacterLiteral: (ctx: PythonCharacterLiteralContext) => void;
    exitPythonTextLiteral: (ctx: PythonTextLiteralContext) => void;
    exitPythonLiteralExpression: (ctx: PythonLiteralExpressionContext) => void;
    exitPythonPromptoIdentifier: (ctx: PythonPromptoIdentifierContext) => void;
    exitPythonPrimaryExpression: (ctx: PythonPrimaryExpressionContext) => void;
    exitPythonArgumentList: (ctx: PythonArgumentListContext) => void;
    exitPythonNamedOnlyArgumentList: (ctx: PythonNamedOnlyArgumentListContext) => void;
    exitPythonNamedArgumentList: (ctx: PythonNamedArgumentListContext) => void;
    exitPythonNamedArgumentListItem: (ctx: PythonNamedArgumentListItemContext) => void;
    exitPythonOrdinalOnlyArgumentList: (ctx: PythonOrdinalOnlyArgumentListContext) => void;
    exitPythonOrdinalArgumentList: (ctx: PythonOrdinalArgumentListContext) => void;
    exitPythonOrdinalArgumentListItem: (ctx: PythonOrdinalArgumentListItemContext) => void;
    exitPythonSelectorExpression: (ctx: PythonSelectorExpressionContext) => void;
    exitPythonSelfExpression: (ctx: PythonSelfExpressionContext) => void;
    exitJsxChild: (ctx: JsxChildContext) => void;
    exitJsxCode: (ctx: JsxCodeContext) => void;
    exitJsxExpression: (ctx: JsxExpressionContext) => void;
    exitJsxElement: (ctx: JsxElementContext) => void;
    exitJsxSelfClosing: (ctx: JsxSelfClosingContext) => void;
    exitJsxText: (ctx: JsxTextContext) => void;
    exitJsxValue: (ctx: JsxValueContext) => void;
    exitJsx_attribute: (ctx: Jsx_attributeContext) => void;
    exitJsx_children: (ctx: Jsx_childrenContext) => void;
    exitJsx_element_name: (ctx: Jsx_element_nameContext) => void;
    exitJsx_expression: (ctx: Jsx_expressionContext) => void;
    exitJsx_identifier: (ctx: Jsx_identifierContext) => void;
    exitJsx_fragment: (ctx: Jsx_fragmentContext) => void;
    exitJsxLiteral: (ctx: JsxLiteralContext) => void;
    exitJsx_opening: (ctx: Jsx_openingContext) => void;
    exitJsx_closing: (ctx: Jsx_closingContext) => void;
    exitJsx_self_closing: (ctx: Jsx_self_closingContext) => void;
    exitCssExpression: (ctx: CssExpressionContext) => void;
    exitCss_expression: (ctx: Css_expressionContext) => void;
    exitCss_field: (ctx: Css_fieldContext) => void;
    exitCssText: (ctx: CssTextContext) => void;
    exitCssValue: (ctx: CssValueContext) => void;
}
