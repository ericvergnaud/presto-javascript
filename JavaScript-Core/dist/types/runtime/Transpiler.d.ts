import { Context } from "./Context";
import { CategoryType } from "../type";
import ITranspilable from '../runtime/ITranspilable';
export default class Transpiler {
    parent: Transpiler | null;
    context: Context;
    declared: Set<ITranspilable>;
    required: Set<Function>;
    registered: Set<Function>;
    escapeMode: number;
    lines: string[];
    initializers: string[];
    line: string;
    indents: string;
    getterName?: string;
    setterName?: string;
    constructor(context: Context);
    toString(): string;
    copyTranspiler(context: Context): Transpiler;
    newLocalTranspiler(): Transpiler;
    newChildTranspiler(context?: Context): Transpiler;
    newResourceTranspiler(): Transpiler;
    newGetterTranspiler(name: string): Transpiler;
    newSetterTranspiler(name: string): Transpiler;
    newInstanceTranspiler(type: CategoryType): Transpiler;
    newDocumentTranspiler(): Transpiler;
    flush(): void;
    declare(decl: ITranspilable): void;
    appendAllDeclared(): void;
    appendOneDeclared(decl: ITranspilable): void;
    require(fn: Function): void;
    appendAllRequired(): void;
    register(f: Function): void;
    appendAllRegistered(): void;
    addInitializer(line: string): void;
    appendAllInitializers(): void;
    getTranspiled(obj: object): string;
    appendOneRequired(fn: Function): void;
    appendOneRequired_main(fn: Function): void;
    appendOneRequired_static(fn: Function): void;
    appendOneRequired_ctor(fn: Function): void;
    appendOneRequired_methods(fn: Function): void;
    appendOneRequired_accessors(fn: Function): void;
    resolveImports(body: string): string;
    resolveChildImports(body: string): string;
    resolveChildImport(body: string, parent: string): string;
    resolveDefaultImports(body: string): string;
    appendBoolean(value: boolean): Transpiler;
    append(text: string): Transpiler;
    trimLast(count: number): Transpiler;
    newLine(): Transpiler;
    escape(): Transpiler;
    unescape(): Transpiler;
    indent(indentOnly?: boolean): Transpiler;
    dedent(): Transpiler;
    static transpile(context: Context, thing: ITranspilable): string;
    printTestName(testName: string): Transpiler;
}
