// Generated from MParser.g4 by ANTLR 4.9.3
// jshint ignore: start
import antlr4 from 'antlr4';
import MParserListener from './MParserListener.js';
import AbstractParser from './AbstractParser.js';


const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u00be\u0b5d\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
    "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
    "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
    "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004",
    "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004",
    "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004",
    "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t",
    "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004",
    "\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t",
    "\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004",
    "\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t",
    "\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004",
    "\u0097\t\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t",
    "\u009a\u0004\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004",
    "\u009e\t\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t",
    "\u00a1\u0004\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004",
    "\u00a5\t\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t",
    "\u00a8\u0004\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004",
    "\u00ac\t\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t",
    "\u00af\u0004\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004",
    "\u00b3\t\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t",
    "\u00b6\u0004\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004",
    "\u00ba\t\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t",
    "\u00bd\u0004\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004",
    "\u00c1\t\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t",
    "\u00c4\u0004\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004",
    "\u00c8\t\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t",
    "\u00cb\u0004\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004",
    "\u00cf\t\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t",
    "\u00d2\u0004\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004",
    "\u00d6\t\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t",
    "\u00d9\u0004\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004",
    "\u00dd\t\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t",
    "\u00e0\u0004\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004",
    "\u00e4\t\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t",
    "\u00e7\u0004\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004",
    "\u00eb\t\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t",
    "\u00ee\u0004\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004",
    "\u00f2\t\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t",
    "\u00f5\u0004\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004",
    "\u00f9\t\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t",
    "\u00fc\u0004\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004",
    "\u0100\t\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t",
    "\u0103\u0004\u0104\t\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0005",
    "\u0002\u0213\n\u0002\u0003\u0002\u0005\u0002\u0216\n\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u022f\n",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0005\u0006\u0234\n\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0005\u0006\u0242\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0005\u0006\u0248\n\u0006\u0005\u0006\u024a\n\u0006\u0005\u0006",
    "\u024c\n\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0250\n\u0006\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u0255\n\u0007\u0003\u0007",
    "\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u025d\n\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u0264\n\b\u0003\b\u0003\b",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\n\u0005\n\u0275\n\n\u0003\n\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u0280",
    "\n\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u0287\n\n\u0003",
    "\n\u0003\n\u0005\n\u028b\n\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005",
    "\u000b\u0296\n\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u02a4",
    "\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f",
    "\u02b8\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u02cf",
    "\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0005\u0012\u02da\n",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005",
    "\u0012\u02e1\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u02ea\n\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0013\u0005\u0013\u02ef\n\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u02f6\n",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0005\u0013\u02ff\n\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0007\u0015\u0312\n\u0015\f\u0015",
    "\u000e\u0015\u0315\u000b\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0005\u0016\u031c\n\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0005\u0016\u0321\n\u0016\u0003\u0016\u0005\u0016\u0324",
    "\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017",
    "\u032a\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u032f",
    "\n\u0017\u0003\u0017\u0005\u0017\u0332\n\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0005\u0017\u0338\n\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0018\u0003\u0018\u0005\u0018\u033e\n\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0005\u0018\u0343\n\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0005\u0018\u0348\n\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0005\u0019\u0360\n\u0019\u0003\u001a\u0003",
    "\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0005\u001b\u036b\n\u001b\u0003\u001b\u0003\u001b",
    "\u0005\u001b\u036f\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005",
    "\u001c\u0386\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0396\n",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005",
    "\u001e\u039d\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0005\u001e\u03a5\n\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u03ad",
    "\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u03b2\n\u001f",
    "\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0005 \u03b9\n \u0003",
    " \u0003 \u0003 \u0003 \u0005 \u03bf\n \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0005 \u03c6\n \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0005#\u03e3\n#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0005",
    "$\u03f6\n$\u0003%\u0003%\u0003%\u0003%\u0005%\u03fc\n%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(",
    "\u0003(\u0003(\u0005(\u041e\n(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003",
    "(\u0003(\u0005(\u0427\n(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0007)\u043c\n)\f)\u000e)\u043f\u000b)\u0003*\u0003",
    "*\u0003*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005",
    "+\u044c\n+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u0455",
    "\n+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u045e\n",
    "+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0005,\u0475\n,\u0003-\u0003-\u0003.\u0003.\u0005.\u047b\n",
    ".\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0005/\u0492\n/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0005/\u04af\n/\u0003/\u0003/\u0003/\u0003/\u0005/\u04b5\n/\u0003",
    "/\u0003/\u0003/\u0003/\u0005/\u04bb\n/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0005/\u04d7\n/\u0003/\u0003/\u0003/\u0003/\u0005/\u04dd\n",
    "/\u0003/\u0003/\u0003/\u0005/\u04e2\n/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0005/\u04e9\n/\u0003/\u0003/\u0003/\u0007/\u04ee\n/\f/\u000e/\u04f1",
    "\u000b/\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00050\u04fa",
    "\n0\u00031\u00031\u00032\u00032\u00032\u00032\u00032\u00032\u00052\u0504",
    "\n2\u00033\u00033\u00033\u00033\u00033\u00073\u050b\n3\f3\u000e3\u050e",
    "\u000b3\u00034\u00034\u00034\u00034\u00034\u00034\u00074\u0516\n4\f",
    "4\u000e4\u0519\u000b4\u00035\u00035\u00035\u00035\u00035\u00035\u0003",
    "5\u00035\u00035\u00055\u0524\n5\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00056\u0532\n6\u00037\u0003",
    "7\u00037\u00057\u0537\n7\u00037\u00037\u00038\u00038\u00038\u00038\u0003",
    "8\u00058\u0540\n8\u00038\u00038\u00039\u00039\u00039\u00039\u00039\u0005",
    "9\u0549\n9\u00039\u00039\u00039\u00039\u00039\u00059\u0550\n9\u0003",
    "9\u00039\u00059\u0554\n9\u0003:\u0003:\u0003:\u0003:\u0003:\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0005;\u0560\n;\u0003;\u0003;\u0003;\u0007;\u0565",
    "\n;\f;\u000e;\u0568\u000b;\u0003<\u0003<\u0003<\u0003<\u0005<\u056e",
    "\n<\u0003=\u0003=\u0003=\u0003=\u0003=\u0005=\u0575\n=\u0003>\u0003",
    ">\u0003>\u0005>\u057a\n>\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0005",
    "?\u0582\n?\u0003?\u0003?\u0003?\u0003?\u0005?\u0588\n?\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0003?\u0003?\u0005?\u0591\n?\u0003?\u0003?\u0005",
    "?\u0595\n?\u0003?\u0003?\u0003?\u0005?\u059a\n?\u0003?\u0003?\u0005",
    "?\u059e\n?\u0003?\u0003?\u0003?\u0005?\u05a3\n?\u0005?\u05a5\n?\u0003",
    "@\u0003@\u0003@\u0005@\u05aa\n@\u0003@\u0003@\u0003@\u0003@\u0005@\u05b0",
    "\n@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005",
    "@\u05bb\n@\u0003@\u0003@\u0005@\u05bf\n@\u0003@\u0003@\u0003@\u0005",
    "@\u05c4\n@\u0003@\u0003@\u0005@\u05c8\n@\u0003@\u0003@\u0003@\u0005",
    "@\u05cd\n@\u0003@\u0005@\u05d0\n@\u0003A\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003",
    "C\u0003C\u0005C\u05e2\nC\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0005C\u05eb\nC\u0003C\u0003C\u0003D\u0003D\u0003D\u0003D\u0003E\u0003",
    "E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0005E\u05fb\nE\u0003F\u0003",
    "F\u0003F\u0003F\u0003G\u0007G\u0602\nG\fG\u000eG\u0605\u000bG\u0003",
    "H\u0006H\u0608\nH\rH\u000eH\u0609\u0003I\u0007I\u060d\nI\fI\u000eI\u0610",
    "\u000bI\u0003J\u0006J\u0613\nJ\rJ\u000eJ\u0614\u0003J\u0003J\u0003K",
    "\u0007K\u061a\nK\fK\u000eK\u061d\u000bK\u0003K\u0003K\u0003L\u0003L",
    "\u0003M\u0003M\u0003N\u0003N\u0006N\u0627\nN\rN\u000eN\u0628\u0003O",
    "\u0003O\u0003O\u0005O\u062e\nO\u0003P\u0003P\u0005P\u0632\nP\u0003P",
    "\u0003P\u0003P\u0003Q\u0003Q\u0003Q\u0003Q\u0007Q\u063b\nQ\fQ\u000e",
    "Q\u063e\u000bQ\u0003R\u0003R\u0003R\u0007R\u0643\nR\fR\u000eR\u0646",
    "\u000bR\u0003R\u0003R\u0003R\u0007R\u064b\nR\fR\u000eR\u064e\u000bR",
    "\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0005R\u0656\nR\u0003S\u0003",
    "S\u0003S\u0003S\u0003S\u0003S\u0007S\u065e\nS\fS\u000eS\u0661\u000b",
    "S\u0005S\u0663\nS\u0003S\u0003S\u0005S\u0667\nS\u0003T\u0003T\u0003",
    "U\u0003U\u0003U\u0003U\u0003V\u0003V\u0003W\u0003W\u0005W\u0673\nW\u0003",
    "X\u0003X\u0003Y\u0003Y\u0005Y\u0679\nY\u0003Z\u0003Z\u0003Z\u0003Z\u0007",
    "Z\u067f\nZ\fZ\u000eZ\u0682\u000bZ\u0003[\u0003[\u0003[\u0003[\u0007",
    "[\u0688\n[\f[\u000e[\u068b\u000b[\u0003\\\u0003\\\u0003\\\u0007\\\u0690",
    "\n\\\f\\\u000e\\\u0693\u000b\\\u0003]\u0003]\u0003]\u0003]\u0003]\u0003",
    "]\u0003]\u0003]\u0003]\u0003]\u0005]\u069f\n]\u0003^\u0005^\u06a2\n",
    "^\u0003^\u0003^\u0005^\u06a6\n^\u0003^\u0003^\u0003_\u0005_\u06ab\n",
    "_\u0003_\u0003_\u0005_\u06af\n_\u0003_\u0003_\u0003`\u0003`\u0003`\u0007",
    "`\u06b6\n`\f`\u000e`\u06b9\u000b`\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0005b\u06d2",
    "\nb\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0007b\u06db\n",
    "b\fb\u000eb\u06de\u000bb\u0003c\u0003c\u0005c\u06e2\nc\u0003d\u0003",
    "d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003",
    "d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0005d\u06f6\nd\u0003e\u0003",
    "e\u0003f\u0005f\u06fb\nf\u0003f\u0003f\u0003g\u0003g\u0003h\u0003h\u0003",
    "h\u0005h\u0704\nh\u0003i\u0003i\u0005i\u0708\ni\u0003j\u0003j\u0003",
    "j\u0007j\u070d\nj\fj\u000ej\u0710\u000bj\u0003k\u0003k\u0005k\u0714",
    "\nk\u0003l\u0003l\u0005l\u0718\nl\u0003m\u0003m\u0003m\u0003m\u0003",
    "n\u0003n\u0003n\u0003o\u0003o\u0003o\u0005o\u0724\no\u0003p\u0003p\u0003",
    "q\u0003q\u0003r\u0003r\u0003s\u0003s\u0003t\u0003t\u0003u\u0003u\u0003",
    "u\u0007u\u0733\nu\fu\u000eu\u0736\u000bu\u0003v\u0003v\u0005v\u073a",
    "\nv\u0003v\u0005v\u073d\nv\u0003w\u0003w\u0005w\u0741\nw\u0003x\u0003",
    "x\u0003x\u0005x\u0746\nx\u0003y\u0003y\u0003y\u0003z\u0003z\u0005z\u074d",
    "\nz\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0007",
    "{\u0758\n{\f{\u000e{\u075b\u000b{\u0003|\u0003|\u0003|\u0003|\u0007",
    "|\u0761\n|\f|\u000e|\u0764\u000b|\u0003}\u0003}\u0003}\u0007}\u0769",
    "\n}\f}\u000e}\u076c\u000b}\u0003}\u0003}\u0003}\u0007}\u0771\n}\f}\u000e",
    "}\u0774\u000b}\u0003}\u0003}\u0003}\u0003}\u0003}\u0005}\u077b\n}\u0003",
    "~\u0003~\u0003~\u0003~\u0007~\u0781\n~\f~\u000e~\u0784\u000b~\u0003",
    "\u007f\u0003\u007f\u0003\u007f\u0007\u007f\u0789\n\u007f\f\u007f\u000e",
    "\u007f\u078c\u000b\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0007\u007f",
    "\u0791\n\u007f\f\u007f\u000e\u007f\u0794\u000b\u007f\u0003\u007f\u0003",
    "\u007f\u0003\u007f\u0005\u007f\u0799\n\u007f\u0003\u0080\u0003\u0080",
    "\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080",
    "\u0003\u0080\u0003\u0080\u0005\u0080\u07a5\n\u0080\u0003\u0081\u0003",
    "\u0081\u0005\u0081\u07a9\n\u0081\u0003\u0082\u0003\u0082\u0003\u0082",
    "\u0003\u0082\u0003\u0082\u0003\u0082\u0007\u0082\u07b1\n\u0082\f\u0082",
    "\u000e\u0082\u07b4\u000b\u0082\u0003\u0083\u0003\u0083\u0003\u0083\u0007",
    "\u0083\u07b9\n\u0083\f\u0083\u000e\u0083\u07bc\u000b\u0083\u0003\u0083",
    "\u0005\u0083\u07bf\n\u0083\u0003\u0084\u0003\u0084\u0003\u0084\u0003",
    "\u0084\u0005\u0084\u07c5\n\u0084\u0003\u0084\u0003\u0084\u0003\u0084",
    "\u0007\u0084\u07ca\n\u0084\f\u0084\u000e\u0084\u07cd\u000b\u0084\u0003",
    "\u0084\u0003\u0084\u0005\u0084\u07d1\n\u0084\u0003\u0085\u0003\u0085",
    "\u0003\u0085\u0007\u0085\u07d6\n\u0085\f\u0085\u000e\u0085\u07d9\u000b",
    "\u0085\u0003\u0086\u0003\u0086\u0003\u0086\u0007\u0086\u07de\n\u0086",
    "\f\u0086\u000e\u0086\u07e1\u000b\u0086\u0003\u0087\u0003\u0087\u0003",
    "\u0087\u0003\u0087\u0005\u0087\u07e7\n\u0087\u0003\u0088\u0003\u0088",
    "\u0003\u0088\u0003\u0088\u0007\u0088\u07ed\n\u0088\f\u0088\u000e\u0088",
    "\u07f0\u000b\u0088\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003",
    "\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0005",
    "\u0089\u07fc\n\u0089\u0003\u008a\u0003\u008a\u0005\u008a\u0800\n\u008a",
    "\u0003\u008a\u0005\u008a\u0803\n\u008a\u0003\u008b\u0003\u008b\u0005",
    "\u008b\u0807\n\u008b\u0003\u008b\u0005\u008b\u080a\n\u008b\u0003\u008c",
    "\u0003\u008c\u0003\u008c\u0003\u008c\u0007\u008c\u0810\n\u008c\f\u008c",
    "\u000e\u008c\u0813\u000b\u008c\u0003\u008d\u0003\u008d\u0003\u008d\u0003",
    "\u008d\u0007\u008d\u0819\n\u008d\f\u008d\u000e\u008d\u081c\u000b\u008d",
    "\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0007\u008e\u0822\n",
    "\u008e\f\u008e\u000e\u008e\u0825\u000b\u008e\u0003\u008f\u0003\u008f",
    "\u0003\u008f\u0003\u008f\u0007\u008f\u082b\n\u008f\f\u008f\u000e\u008f",
    "\u082e\u000b\u008f\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003",
    "\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003",
    "\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0005\u0090\u083e\n\u0090",
    "\u0003\u0091\u0003\u0091\u0003\u0091\u0005\u0091\u0843\n\u0091\u0003",
    "\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003",
    "\u0091\u0005\u0091\u084c\n\u0091\u0003\u0091\u0003\u0091\u0003\u0091",
    "\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091",
    "\u0005\u0091\u0857\n\u0091\u0003\u0092\u0003\u0092\u0003\u0092\u0007",
    "\u0092\u085c\n\u0092\f\u0092\u000e\u0092\u085f\u000b\u0092\u0003\u0093",
    "\u0003\u0093\u0003\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u0866\n",
    "\u0094\u0003\u0094\u0003\u0094\u0003\u0095\u0003\u0095\u0003\u0095\u0003",
    "\u0095\u0003\u0096\u0003\u0096\u0005\u0096\u0870\n\u0096\u0003\u0097",
    "\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0005\u0097",
    "\u0878\n\u0097\u0003\u0098\u0005\u0098\u087b\n\u0098\u0003\u0098\u0003",
    "\u0098\u0005\u0098\u087f\n\u0098\u0003\u0098\u0003\u0098\u0003\u0099",
    "\u0005\u0099\u0884\n\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003",
    "\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0005\u0099\u088e",
    "\n\u0099\u0003\u009a\u0003\u009a\u0005\u009a\u0892\n\u009a\u0003\u009a",
    "\u0003\u009a\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b",
    "\u0007\u009b\u089b\n\u009b\f\u009b\u000e\u009b\u089e\u000b\u009b\u0005",
    "\u009b\u08a0\n\u009b\u0003\u009c\u0003\u009c\u0003\u009c\u0007\u009c",
    "\u08a5\n\u009c\f\u009c\u000e\u009c\u08a8\u000b\u009c\u0003\u009d\u0003",
    "\u009d\u0003\u009d\u0003\u009d\u0003\u009e\u0003\u009e\u0005\u009e\u08b0",
    "\n\u009e\u0003\u009f\u0003\u009f\u0003\u009f\u0007\u009f\u08b5\n\u009f",
    "\f\u009f\u000e\u009f\u08b8\u000b\u009f\u0003\u00a0\u0003\u00a0\u0003",
    "\u00a0\u0003\u00a0\u0003\u00a1\u0003\u00a1\u0005\u00a1\u08c0\n\u00a1",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0005\u00a2\u08cb\n\u00a2\u0003",
    "\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a4\u0003\u00a4\u0003",
    "\u00a4\u0003\u00a4\u0003\u00a4\u0007\u00a4\u08d6\n\u00a4\f\u00a4\u000e",
    "\u00a4\u08d9\u000b\u00a4\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5",
    "\u0005\u00a5\u08df\n\u00a5\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003",
    "\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003",
    "\u00a7\u0003\u00a7\u0005\u00a7\u08ec\n\u00a7\u0003\u00a8\u0003\u00a8",
    "\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a9\u0003\u00a9\u0003\u00a9",
    "\u0005\u00a9\u08f6\n\u00a9\u0003\u00a9\u0005\u00a9\u08f9\n\u00a9\u0003",
    "\u00aa\u0003\u00aa\u0005\u00aa\u08fd\n\u00aa\u0003\u00ab\u0003\u00ab",
    "\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ac",
    "\u0003\u00ac\u0003\u00ac\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad",
    "\u0003\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0007\u00ae\u0911\n",
    "\u00ae\f\u00ae\u000e\u00ae\u0914\u000b\u00ae\u0003\u00af\u0003\u00af",
    "\u0003\u00af\u0007\u00af\u0919\n\u00af\f\u00af\u000e\u00af\u091c\u000b",
    "\u00af\u0003\u00af\u0005\u00af\u091f\n\u00af\u0003\u00b0\u0003\u00b0",
    "\u0003\u00b0\u0007\u00b0\u0924\n\u00b0\f\u00b0\u000e\u00b0\u0927\u000b",
    "\u00b0\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003",
    "\u00b1\u0005\u00b1\u092f\n\u00b1\u0003\u00b2\u0003\u00b2\u0003\u00b3",
    "\u0003\u00b3\u0003\u00b3\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b5",
    "\u0003\u00b5\u0003\u00b5\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b7",
    "\u0003\u00b7\u0003\u00b7\u0003\u00b8\u0003\u00b8\u0003\u00b9\u0003\u00b9",
    "\u0003\u00ba\u0003\u00ba\u0003\u00bb\u0003\u00bb\u0003\u00bc\u0003\u00bc",
    "\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd",
    "\u0003\u00bd\u0005\u00bd\u0953\n\u00bd\u0003\u00be\u0003\u00be\u0003",
    "\u00be\u0003\u00be\u0003\u00be\u0007\u00be\u095a\n\u00be\f\u00be\u000e",
    "\u00be\u095d\u000b\u00be\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf",
    "\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0005\u00bf\u0966\n\u00bf\u0003",
    "\u00c0\u0003\u00c0\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0005\u00c2\u0972\n\u00c2",
    "\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0005\u00c3\u0977\n\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003",
    "\u00c4\u0003\u00c4\u0007\u00c4\u0981\n\u00c4\f\u00c4\u000e\u00c4\u0984",
    "\u000b\u00c4\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c6",
    "\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c7\u0003\u00c7\u0003\u00c8",
    "\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0005\u00c8\u0995\n",
    "\u00c8\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0005",
    "\u00c9\u099c\n\u00c9\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0005\u00ca",
    "\u09a1\n\u00ca\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003",
    "\u00cb\u0007\u00cb\u09a8\n\u00cb\f\u00cb\u000e\u00cb\u09ab\u000b\u00cb",
    "\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc",
    "\u09b2\n\u00cc\u0003\u00cd\u0003\u00cd\u0003\u00ce\u0003\u00ce\u0003",
    "\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0005\u00ce\u09bc\n\u00ce",
    "\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf\u09c1\n\u00cf\u0003",
    "\u00cf\u0003\u00cf\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003",
    "\u00d0\u0003\u00d0\u0005\u00d0\u09cb\n\u00d0\u0003\u00d1\u0003\u00d1",
    "\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0007\u00d1\u09d3\n",
    "\u00d1\f\u00d1\u000e\u00d1\u09d6\u000b\u00d1\u0003\u00d2\u0003\u00d2",
    "\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2",
    "\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0007\u00d2\u09e3\n\u00d2\f\u00d2",
    "\u000e\u00d2\u09e6\u000b\u00d2\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003",
    "\u00d3\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0005\u00d4\u09ef\n\u00d4",
    "\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0007\u00d4\u09f4\n\u00d4\f\u00d4",
    "\u000e\u00d4\u09f7\u000b\u00d4\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003",
    "\u00d5\u0003\u00d5\u0005\u00d5\u09fe\n\u00d5\u0003\u00d6\u0003\u00d6",
    "\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0005\u00d6\u0a05\n\u00d6\u0003",
    "\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003",
    "\u00d7\u0005\u00d7\u0a0e\n\u00d7\u0003\u00d8\u0003\u00d8\u0003\u00d8",
    "\u0003\u00d8\u0003\u00d8\u0007\u00d8\u0a15\n\u00d8\f\u00d8\u000e\u00d8",
    "\u0a18\u000b\u00d8\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003",
    "\u00d9\u0005\u00d9\u0a1f\n\u00d9\u0003\u00da\u0003\u00da\u0003\u00db",
    "\u0003\u00db\u0003\u00db\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0005\u00dc",
    "\u0a29\n\u00dc\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0005\u00dd\u0a2e",
    "\n\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0003\u00de\u0007\u00de\u0a38\n\u00de\f\u00de",
    "\u000e\u00de\u0a3b\u000b\u00de\u0003\u00df\u0003\u00df\u0003\u00df\u0003",
    "\u00df\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e1\u0003",
    "\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0007\u00e1\u0a4b",
    "\n\u00e1\f\u00e1\u000e\u00e1\u0a4e\u000b\u00e1\u0003\u00e2\u0003\u00e2",
    "\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0007\u00e2\u0a55\n\u00e2\f\u00e2",
    "\u000e\u00e2\u0a58\u000b\u00e2\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003",
    "\u00e3\u0003\u00e3\u0005\u00e3\u0a5f\n\u00e3\u0003\u00e4\u0003\u00e4",
    "\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0005\u00e4\u0a66\n\u00e4\u0003",
    "\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0003",
    "\u00e5\u0005\u00e5\u0a6f\n\u00e5\u0003\u00e6\u0003\u00e6\u0003\u00e6",
    "\u0003\u00e6\u0003\u00e6\u0007\u00e6\u0a76\n\u00e6\f\u00e6\u000e\u00e6",
    "\u0a79\u000b\u00e6\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0003",
    "\u00e7\u0005\u00e7\u0a80\n\u00e7\u0003\u00e8\u0003\u00e8\u0003\u00e9",
    "\u0003\u00e9\u0003\u00e9\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0005\u00ea",
    "\u0a8a\n\u00ea\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0005\u00eb\u0a8f",
    "\n\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00ec\u0003\u00ec\u0003\u00ec",
    "\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0007\u00ec\u0a99\n\u00ec\f\u00ec",
    "\u000e\u00ec\u0a9c\u000b\u00ec\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003",
    "\u00ed\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ef\u0003",
    "\u00ef\u0003\u00ef\u0005\u00ef\u0aa9\n\u00ef\u0003\u00ef\u0003\u00ef",
    "\u0003\u00ef\u0007\u00ef\u0aae\n\u00ef\f\u00ef\u000e\u00ef\u0ab1\u000b",
    "\u00ef\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0005",
    "\u00f0\u0ab8\n\u00f0\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1",
    "\u0003\u00f1\u0005\u00f1\u0abf\n\u00f1\u0003\u00f2\u0003\u00f2\u0005",
    "\u00f2\u0ac3\n\u00f2\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0005\u00f3",
    "\u0ac8\n\u00f3\u0003\u00f3\u0003\u00f3\u0005\u00f3\u0acc\n\u00f3\u0003",
    "\u00f4\u0003\u00f4\u0003\u00f4\u0005\u00f4\u0ad1\n\u00f4\u0003\u00f4",
    "\u0003\u00f4\u0003\u00f4\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0005\u00f5",
    "\u0ad9\n\u00f5\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003",
    "\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0007\u00f7\u0ae3\n\u00f7",
    "\f\u00f7\u000e\u00f7\u0ae6\u000b\u00f7\u0003\u00f7\u0003\u00f7\u0003",
    "\u00f7\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0007\u00f8\u0aef",
    "\n\u00f8\f\u00f8\u000e\u00f8\u0af2\u000b\u00f8\u0003\u00f8\u0003\u00f8",
    "\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00fa",
    "\u0003\u00fa\u0003\u00fa\u0007\u00fa\u0afe\n\u00fa\f\u00fa\u000e\u00fa",
    "\u0b01\u000b\u00fa\u0003\u00fb\u0003\u00fb\u0007\u00fb\u0b05\n\u00fb",
    "\f\u00fb\u000e\u00fb\u0b08\u000b\u00fb\u0003\u00fc\u0003\u00fc\u0003",
    "\u00fc\u0005\u00fc\u0b0d\n\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fd",
    "\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0005\u00fd\u0b16\n",
    "\u00fd\u0003\u00fe\u0006\u00fe\u0b19\n\u00fe\r\u00fe\u000e\u00fe\u0b1a",
    "\u0003\u00ff\u0003\u00ff\u0003\u00ff\u0003\u00ff\u0005\u00ff\u0b21\n",
    "\u00ff\u0003\u00ff\u0005\u00ff\u0b24\n\u00ff\u0003\u0100\u0006\u0100",
    "\u0b27\n\u0100\r\u0100\u000e\u0100\u0b28\u0003\u0101\u0003\u0101\u0005",
    "\u0101\u0b2d\n\u0101\u0003\u0102\u0003\u0102\u0006\u0102\u0b31\n\u0102",
    "\r\u0102\u000e\u0102\u0b32\u0003\u0102\u0003\u0102\u0003\u0103\u0003",
    "\u0103\u0003\u0103\u0006\u0103\u0b3a\n\u0103\r\u0103\u000e\u0103\u0b3b",
    "\u0003\u0103\u0003\u0103\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104",
    "\u0005\u0104\u0b44\n\u0104\u0003\u0104\u0003\u0104\u0006\u0104\u0b48",
    "\n\u0104\r\u0104\u000e\u0104\u0b49\u0007\u0104\u0b4c\n\u0104\f\u0104",
    "\u000e\u0104\u0b4f\u000b\u0104\u0003\u0105\u0003\u0105\u0003\u0105\u0003",
    "\u0105\u0003\u0105\u0005\u0105\u0b56\n\u0105\u0003\u0106\u0006\u0106",
    "\u0b59\n\u0106\r\u0106\u000e\u0106\u0b5a\u0003\u0106\u0003\u0628\u0019",
    "(P\\dft\u00c2\u00f4\u0146\u017a\u0186\u0194\u01a0\u01a2\u01a6\u01ae",
    "\u01ba\u01c0\u01c2\u01ca\u01d6\u01dc\u0206\u0107\u0002\u0004\u0006\b",
    "\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.",
    "02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0",
    "\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8",
    "\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0",
    "\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8",
    "\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100",
    "\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118",
    "\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130",
    "\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148",
    "\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160",
    "\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178",
    "\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190",
    "\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8",
    "\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0",
    "\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8",
    "\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0",
    "\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208",
    "\u020a\u0002\u0012\u0003\u0002]^\u0003\u0002#$\u0003\u0002*-\u0003\u0002",
    "13\u0004\u0002\u0003\u0003\u0007\t\u0003\u0002\n\u000b\u0005\u0002u",
    "u\u0096\u0096\u00b0\u00b0\u0007\u0002]]\u0081\u0081\u0091\u0091\u0099",
    "\u0099\u00b0\u00b0\u0005\u0002]]\u0091\u0091\u00b0\u00b0\u0005\u0002",
    "\u0091\u0091\u0099\u0099\u00b0\u00b0\u0004\u0002\u0095\u0095\u009f\u009f",
    "\u0004\u0002TTdd\n\u0002\f\u001188:BDLNxzz|\u009d\u009f\u00a9\u0004",
    "\u0002((\u0080\u0080\u0005\u0002\u001b\u001c**,,\u0004\u0002\u0013\u0013",
    "\u001b\u001c\u0002\u0c11\u0002\u020c\u0003\u0002\u0002\u0002\u0004\u021d",
    "\u0003\u0002\u0002\u0002\u0006\u0227\u0003\u0002\u0002\u0002\b\u022b",
    "\u0003\u0002\u0002\u0002\n\u0233\u0003\u0002\u0002\u0002\f\u0251\u0003",
    "\u0002\u0002\u0002\u000e\u0258\u0003\u0002\u0002\u0002\u0010\u0267\u0003",
    "\u0002\u0002\u0002\u0012\u0274\u0003\u0002\u0002\u0002\u0014\u028c\u0003",
    "\u0002\u0002\u0002\u0016\u0299\u0003\u0002\u0002\u0002\u0018\u029b\u0003",
    "\u0002\u0002\u0002\u001a\u02aa\u0003\u0002\u0002\u0002\u001c\u02b4\u0003",
    "\u0002\u0002\u0002\u001e\u02c1\u0003\u0002\u0002\u0002 \u02cb\u0003",
    "\u0002\u0002\u0002\"\u02d9\u0003\u0002\u0002\u0002$\u02ee\u0003\u0002",
    "\u0002\u0002&\u0302\u0003\u0002\u0002\u0002(\u030a\u0003\u0002\u0002",
    "\u0002*\u0316\u0003\u0002\u0002\u0002,\u0325\u0003\u0002\u0002\u0002",
    ".\u033b\u0003\u0002\u0002\u00020\u034e\u0003\u0002\u0002\u00022\u0361",
    "\u0003\u0002\u0002\u00024\u0363\u0003\u0002\u0002\u00026\u0385\u0003",
    "\u0002\u0002\u00028\u0387\u0003\u0002\u0002\u0002:\u039c\u0003\u0002",
    "\u0002\u0002<\u03ae\u0003\u0002\u0002\u0002>\u03b8\u0003\u0002\u0002",
    "\u0002@\u03c7\u0003\u0002\u0002\u0002B\u03ce\u0003\u0002\u0002\u0002",
    "D\u03d5\u0003\u0002\u0002\u0002F\u03f5\u0003\u0002\u0002\u0002H\u03f7",
    "\u0003\u0002\u0002\u0002J\u0404\u0003\u0002\u0002\u0002L\u040d\u0003",
    "\u0002\u0002\u0002N\u0414\u0003\u0002\u0002\u0002P\u0428\u0003\u0002",
    "\u0002\u0002R\u0440\u0003\u0002\u0002\u0002T\u0443\u0003\u0002\u0002",
    "\u0002V\u0474\u0003\u0002\u0002\u0002X\u0476\u0003\u0002\u0002\u0002",
    "Z\u0478\u0003\u0002\u0002\u0002\\\u0491\u0003\u0002\u0002\u0002^\u04f9",
    "\u0003\u0002\u0002\u0002`\u04fb\u0003\u0002\u0002\u0002b\u0503\u0003",
    "\u0002\u0002\u0002d\u0505\u0003\u0002\u0002\u0002f\u050f\u0003\u0002",
    "\u0002\u0002h\u0523\u0003\u0002\u0002\u0002j\u0531\u0003\u0002\u0002",
    "\u0002l\u0533\u0003\u0002\u0002\u0002n\u053a\u0003\u0002\u0002\u0002",
    "p\u0553\u0003\u0002\u0002\u0002r\u0555\u0003\u0002\u0002\u0002t\u055f",
    "\u0003\u0002\u0002\u0002v\u0569\u0003\u0002\u0002\u0002x\u056f\u0003",
    "\u0002\u0002\u0002z\u0576\u0003\u0002\u0002\u0002|\u05a4\u0003\u0002",
    "\u0002\u0002~\u05cf\u0003\u0002\u0002\u0002\u0080\u05d1\u0003\u0002",
    "\u0002\u0002\u0082\u05d9\u0003\u0002\u0002\u0002\u0084\u05df\u0003\u0002",
    "\u0002\u0002\u0086\u05ee\u0003\u0002\u0002\u0002\u0088\u05fa\u0003\u0002",
    "\u0002\u0002\u008a\u05fc\u0003\u0002\u0002\u0002\u008c\u0603\u0003\u0002",
    "\u0002\u0002\u008e\u0607\u0003\u0002\u0002\u0002\u0090\u060e\u0003\u0002",
    "\u0002\u0002\u0092\u0612\u0003\u0002\u0002\u0002\u0094\u061b\u0003\u0002",
    "\u0002\u0002\u0096\u0620\u0003\u0002\u0002\u0002\u0098\u0622\u0003\u0002",
    "\u0002\u0002\u009a\u0624\u0003\u0002\u0002\u0002\u009c\u062d\u0003\u0002",
    "\u0002\u0002\u009e\u062f\u0003\u0002\u0002\u0002\u00a0\u0636\u0003\u0002",
    "\u0002\u0002\u00a2\u0644\u0003\u0002\u0002\u0002\u00a4\u0657\u0003\u0002",
    "\u0002\u0002\u00a6\u0668\u0003\u0002\u0002\u0002\u00a8\u066a\u0003\u0002",
    "\u0002\u0002\u00aa\u066e\u0003\u0002\u0002\u0002\u00ac\u0672\u0003\u0002",
    "\u0002\u0002\u00ae\u0674\u0003\u0002\u0002\u0002\u00b0\u0678\u0003\u0002",
    "\u0002\u0002\u00b2\u067a\u0003\u0002\u0002\u0002\u00b4\u0683\u0003\u0002",
    "\u0002\u0002\u00b6\u068c\u0003\u0002\u0002\u0002\u00b8\u069e\u0003\u0002",
    "\u0002\u0002\u00ba\u06a1\u0003\u0002\u0002\u0002\u00bc\u06aa\u0003\u0002",
    "\u0002\u0002\u00be\u06b2\u0003\u0002\u0002\u0002\u00c0\u06ba\u0003\u0002",
    "\u0002\u0002\u00c2\u06d1\u0003\u0002\u0002\u0002\u00c4\u06e1\u0003\u0002",
    "\u0002\u0002\u00c6\u06f5\u0003\u0002\u0002\u0002\u00c8\u06f7\u0003\u0002",
    "\u0002\u0002\u00ca\u06fa\u0003\u0002\u0002\u0002\u00cc\u06fe\u0003\u0002",
    "\u0002\u0002\u00ce\u0703\u0003\u0002\u0002\u0002\u00d0\u0707\u0003\u0002",
    "\u0002\u0002\u00d2\u0709\u0003\u0002\u0002\u0002\u00d4\u0713\u0003\u0002",
    "\u0002\u0002\u00d6\u0717\u0003\u0002\u0002\u0002\u00d8\u0719\u0003\u0002",
    "\u0002\u0002\u00da\u071d\u0003\u0002\u0002\u0002\u00dc\u0723\u0003\u0002",
    "\u0002\u0002\u00de\u0725\u0003\u0002\u0002\u0002\u00e0\u0727\u0003\u0002",
    "\u0002\u0002\u00e2\u0729\u0003\u0002\u0002\u0002\u00e4\u072b\u0003\u0002",
    "\u0002\u0002\u00e6\u072d\u0003\u0002\u0002\u0002\u00e8\u072f\u0003\u0002",
    "\u0002\u0002\u00ea\u073c\u0003\u0002\u0002\u0002\u00ec\u0740\u0003\u0002",
    "\u0002\u0002\u00ee\u0742\u0003\u0002\u0002\u0002\u00f0\u0747\u0003\u0002",
    "\u0002\u0002\u00f2\u074c\u0003\u0002\u0002\u0002\u00f4\u074e\u0003\u0002",
    "\u0002\u0002\u00f6\u075c\u0003\u0002\u0002\u0002\u00f8\u076a\u0003\u0002",
    "\u0002\u0002\u00fa\u077c\u0003\u0002\u0002\u0002\u00fc\u078a\u0003\u0002",
    "\u0002\u0002\u00fe\u07a4\u0003\u0002\u0002\u0002\u0100\u07a6\u0003\u0002",
    "\u0002\u0002\u0102\u07aa\u0003\u0002\u0002\u0002\u0104\u07b5\u0003\u0002",
    "\u0002\u0002\u0106\u07c0\u0003\u0002\u0002\u0002\u0108\u07d2\u0003\u0002",
    "\u0002\u0002\u010a\u07da\u0003\u0002\u0002\u0002\u010c\u07e6\u0003\u0002",
    "\u0002\u0002\u010e\u07e8\u0003\u0002\u0002\u0002\u0110\u07fb\u0003\u0002",
    "\u0002\u0002\u0112\u07fd\u0003\u0002\u0002\u0002\u0114\u0804\u0003\u0002",
    "\u0002\u0002\u0116\u080b\u0003\u0002\u0002\u0002\u0118\u0814\u0003\u0002",
    "\u0002\u0002\u011a\u081d\u0003\u0002\u0002\u0002\u011c\u0826\u0003\u0002",
    "\u0002\u0002\u011e\u083d\u0003\u0002\u0002\u0002\u0120\u0856\u0003\u0002",
    "\u0002\u0002\u0122\u0858\u0003\u0002\u0002\u0002\u0124\u0860\u0003\u0002",
    "\u0002\u0002\u0126\u0865\u0003\u0002\u0002\u0002\u0128\u0869\u0003\u0002",
    "\u0002\u0002\u012a\u086f\u0003\u0002\u0002\u0002\u012c\u0877\u0003\u0002",
    "\u0002\u0002\u012e\u087a\u0003\u0002\u0002\u0002\u0130\u0883\u0003\u0002",
    "\u0002\u0002\u0132\u088f\u0003\u0002\u0002\u0002\u0134\u0895\u0003\u0002",
    "\u0002\u0002\u0136\u08a1\u0003\u0002\u0002\u0002\u0138\u08a9\u0003\u0002",
    "\u0002\u0002\u013a\u08af\u0003\u0002\u0002\u0002\u013c\u08b1\u0003\u0002",
    "\u0002\u0002\u013e\u08b9\u0003\u0002\u0002\u0002\u0140\u08bf\u0003\u0002",
    "\u0002\u0002\u0142\u08ca\u0003\u0002\u0002\u0002\u0144\u08cc\u0003\u0002",
    "\u0002\u0002\u0146\u08d0\u0003\u0002\u0002\u0002\u0148\u08de\u0003\u0002",
    "\u0002\u0002\u014a\u08e0\u0003\u0002\u0002\u0002\u014c\u08eb\u0003\u0002",
    "\u0002\u0002\u014e\u08ed\u0003\u0002\u0002\u0002\u0150\u08f8\u0003\u0002",
    "\u0002\u0002\u0152\u08fc\u0003\u0002\u0002\u0002\u0154\u08fe\u0003\u0002",
    "\u0002\u0002\u0156\u0903\u0003\u0002\u0002\u0002\u0158\u0908\u0003\u0002",
    "\u0002\u0002\u015a\u090d\u0003\u0002\u0002\u0002\u015c\u0915\u0003\u0002",
    "\u0002\u0002\u015e\u0920\u0003\u0002\u0002\u0002\u0160\u092e\u0003\u0002",
    "\u0002\u0002\u0162\u0930\u0003\u0002\u0002\u0002\u0164\u0932\u0003\u0002",
    "\u0002\u0002\u0166\u0935\u0003\u0002\u0002\u0002\u0168\u0938\u0003\u0002",
    "\u0002\u0002\u016a\u093b\u0003\u0002\u0002\u0002\u016c\u093e\u0003\u0002",
    "\u0002\u0002\u016e\u0941\u0003\u0002\u0002\u0002\u0170\u0943\u0003\u0002",
    "\u0002\u0002\u0172\u0945\u0003\u0002\u0002\u0002\u0174\u0947\u0003\u0002",
    "\u0002\u0002\u0176\u0949\u0003\u0002\u0002\u0002\u0178\u0952\u0003\u0002",
    "\u0002\u0002\u017a\u0954\u0003\u0002\u0002\u0002\u017c\u0965\u0003\u0002",
    "\u0002\u0002\u017e\u0967\u0003\u0002\u0002\u0002\u0180\u0969\u0003\u0002",
    "\u0002\u0002\u0182\u0971\u0003\u0002\u0002\u0002\u0184\u0973\u0003\u0002",
    "\u0002\u0002\u0186\u097a\u0003\u0002\u0002\u0002\u0188\u0985\u0003\u0002",
    "\u0002\u0002\u018a\u0989\u0003\u0002\u0002\u0002\u018c\u098d\u0003\u0002",
    "\u0002\u0002\u018e\u0994\u0003\u0002\u0002\u0002\u0190\u099b\u0003\u0002",
    "\u0002\u0002\u0192\u09a0\u0003\u0002\u0002\u0002\u0194\u09a2\u0003\u0002",
    "\u0002\u0002\u0196\u09b1\u0003\u0002\u0002\u0002\u0198\u09b3\u0003\u0002",
    "\u0002\u0002\u019a\u09bb\u0003\u0002\u0002\u0002\u019c\u09bd\u0003\u0002",
    "\u0002\u0002\u019e\u09ca\u0003\u0002\u0002\u0002\u01a0\u09cc\u0003\u0002",
    "\u0002\u0002\u01a2\u09d7\u0003\u0002\u0002\u0002\u01a4\u09e7\u0003\u0002",
    "\u0002\u0002\u01a6\u09ee\u0003\u0002\u0002\u0002\u01a8\u09fd\u0003\u0002",
    "\u0002\u0002\u01aa\u0a04\u0003\u0002\u0002\u0002\u01ac\u0a0d\u0003\u0002",
    "\u0002\u0002\u01ae\u0a0f\u0003\u0002\u0002\u0002\u01b0\u0a1e\u0003\u0002",
    "\u0002\u0002\u01b2\u0a20\u0003\u0002\u0002\u0002\u01b4\u0a22\u0003\u0002",
    "\u0002\u0002\u01b6\u0a28\u0003\u0002\u0002\u0002\u01b8\u0a2a\u0003\u0002",
    "\u0002\u0002\u01ba\u0a31\u0003\u0002\u0002\u0002\u01bc\u0a3c\u0003\u0002",
    "\u0002\u0002\u01be\u0a40\u0003\u0002\u0002\u0002\u01c0\u0a44\u0003\u0002",
    "\u0002\u0002\u01c2\u0a4f\u0003\u0002\u0002\u0002\u01c4\u0a5e\u0003\u0002",
    "\u0002\u0002\u01c6\u0a65\u0003\u0002\u0002\u0002\u01c8\u0a6e\u0003\u0002",
    "\u0002\u0002\u01ca\u0a70\u0003\u0002\u0002\u0002\u01cc\u0a7f\u0003\u0002",
    "\u0002\u0002\u01ce\u0a81\u0003\u0002\u0002\u0002\u01d0\u0a83\u0003\u0002",
    "\u0002\u0002\u01d2\u0a89\u0003\u0002\u0002\u0002\u01d4\u0a8b\u0003\u0002",
    "\u0002\u0002\u01d6\u0a92\u0003\u0002\u0002\u0002\u01d8\u0a9d\u0003\u0002",
    "\u0002\u0002\u01da\u0aa1\u0003\u0002\u0002\u0002\u01dc\u0aa8\u0003\u0002",
    "\u0002\u0002\u01de\u0ab7\u0003\u0002\u0002\u0002\u01e0\u0abe\u0003\u0002",
    "\u0002\u0002\u01e2\u0ac2\u0003\u0002\u0002\u0002\u01e4\u0acb\u0003\u0002",
    "\u0002\u0002\u01e6\u0acd\u0003\u0002\u0002\u0002\u01e8\u0ad8\u0003\u0002",
    "\u0002\u0002\u01ea\u0ada\u0003\u0002\u0002\u0002\u01ec\u0ade\u0003\u0002",
    "\u0002\u0002\u01ee\u0aea\u0003\u0002\u0002\u0002\u01f0\u0af5\u0003\u0002",
    "\u0002\u0002\u01f2\u0afa\u0003\u0002\u0002\u0002\u01f4\u0b02\u0003\u0002",
    "\u0002\u0002\u01f6\u0b09\u0003\u0002\u0002\u0002\u01f8\u0b15\u0003\u0002",
    "\u0002\u0002\u01fa\u0b18\u0003\u0002\u0002\u0002\u01fc\u0b23\u0003\u0002",
    "\u0002\u0002\u01fe\u0b26\u0003\u0002\u0002\u0002\u0200\u0b2c\u0003\u0002",
    "\u0002\u0002\u0202\u0b2e\u0003\u0002\u0002\u0002\u0204\u0b36\u0003\u0002",
    "\u0002\u0002\u0206\u0b43\u0003\u0002\u0002\u0002\u0208\u0b55\u0003\u0002",
    "\u0002\u0002\u020a\u0b58\u0003\u0002\u0002\u0002\u020c\u020d\u0007i",
    "\u0002\u0002\u020d\u020e\u0005\u00e4s\u0002\u020e\u0215\u0007\u0017",
    "\u0002\u0002\u020f\u0212\u0005\u00e4s\u0002\u0210\u0211\u0007\u0014",
    "\u0002\u0002\u0211\u0213\u0005\u010a\u0086\u0002\u0212\u0210\u0003\u0002",
    "\u0002\u0002\u0212\u0213\u0003\u0002\u0002\u0002\u0213\u0216\u0003\u0002",
    "\u0002\u0002\u0214\u0216\u0005\u010a\u0086\u0002\u0215\u020f\u0003\u0002",
    "\u0002\u0002\u0215\u0214\u0003\u0002\u0002\u0002\u0216\u0217\u0003\u0002",
    "\u0002\u0002\u0217\u0218\u0007\u0018\u0002\u0002\u0218\u0219\u0007\u0012",
    "\u0002\u0002\u0219\u021a\u0005\u0092J\u0002\u021a\u021b\u0005\u00b4",
    "[\u0002\u021b\u021c\u0005\u0094K\u0002\u021c\u0003\u0003\u0002\u0002",
    "\u0002\u021d\u021e\u0007i\u0002\u0002\u021e\u021f\u0005\u00e4s\u0002",
    "\u021f\u0220\u0007\u0017\u0002\u0002\u0220\u0221\u0005\u00c6d\u0002",
    "\u0221\u0222\u0007\u0018\u0002\u0002\u0222\u0223\u0007\u0012\u0002\u0002",
    "\u0223\u0224\u0005\u0092J\u0002\u0224\u0225\u0005\u00b2Z\u0002\u0225",
    "\u0226\u0005\u0094K\u0002\u0226\u0005\u0003\u0002\u0002\u0002\u0227",
    "\u0228\u0005\u00e6t\u0002\u0228\u0229\u00070\u0002\u0002\u0229\u022a",
    "\u0005\\/\u0002\u022a\u0007\u0003\u0002\u0002\u0002\u022b\u022c\u0005",
    "\u00e6t\u0002\u022c\u022e\u0007\u0017\u0002\u0002\u022d\u022f\u0005",
    "t;\u0002\u022e\u022d\u0003\u0002\u0002\u0002\u022e\u022f\u0003\u0002",
    "\u0002\u0002\u022f\u0230\u0003\u0002\u0002\u0002\u0230\u0231\u0007\u0018",
    "\u0002\u0002\u0231\t\u0003\u0002\u0002\u0002\u0232\u0234\u0007\u0099",
    "\u0002\u0002\u0233\u0232\u0003\u0002\u0002\u0002\u0233\u0234\u0003\u0002",
    "\u0002\u0002\u0234\u0235\u0003\u0002\u0002\u0002\u0235\u0236\u0007U",
    "\u0002\u0002\u0236\u0237\u0005\u00e2r\u0002\u0237\u0238\u0007\u0017",
    "\u0002\u0002\u0238\u0239\u0005\u00c2b\u0002\u0239\u024f\u0007\u0018",
    "\u0002\u0002\u023a\u023b\u0007\u0012\u0002\u0002\u023b\u024b\u0005\u0092",
    "J\u0002\u023c\u024c\u0007\u008d\u0002\u0002\u023d\u0241\u0005\u00b8",
    "]\u0002\u023e\u023f\u0005\u008eH\u0002\u023f\u0240\u0005\f\u0007\u0002",
    "\u0240\u0242\u0003\u0002\u0002\u0002\u0241\u023e\u0003\u0002\u0002\u0002",
    "\u0241\u0242\u0003\u0002\u0002\u0002\u0242\u024a\u0003\u0002\u0002\u0002",
    "\u0243\u0247\u0005\f\u0007\u0002\u0244\u0245\u0005\u008eH\u0002\u0245",
    "\u0246\u0005\u00b8]\u0002\u0246\u0248\u0003\u0002\u0002\u0002\u0247",
    "\u0244\u0003\u0002\u0002\u0002\u0247\u0248\u0003\u0002\u0002\u0002\u0248",
    "\u024a\u0003\u0002\u0002\u0002\u0249\u023d\u0003\u0002\u0002\u0002\u0249",
    "\u0243\u0003\u0002\u0002\u0002\u024a\u024c\u0003\u0002\u0002\u0002\u024b",
    "\u023c\u0003\u0002\u0002\u0002\u024b\u0249\u0003\u0002\u0002\u0002\u024c",
    "\u024d\u0003\u0002\u0002\u0002\u024d\u024e\u0005\u0094K\u0002\u024e",
    "\u0250\u0003\u0002\u0002\u0002\u024f\u023a\u0003\u0002\u0002\u0002\u024f",
    "\u0250\u0003\u0002\u0002\u0002\u0250\u000b\u0003\u0002\u0002\u0002\u0251",
    "\u0252\u0007z\u0002\u0002\u0252\u0254\u0007\u0017\u0002\u0002\u0253",
    "\u0255\u0005\u0108\u0085\u0002\u0254\u0253\u0003\u0002\u0002\u0002\u0254",
    "\u0255\u0003\u0002\u0002\u0002\u0255\u0256\u0003\u0002\u0002\u0002\u0256",
    "\u0257\u0007\u0018\u0002\u0002\u0257\r\u0003\u0002\u0002\u0002\u0258",
    "\u0259\u0007\u00a4\u0002\u0002\u0259\u025a\u0005\u00e4s\u0002\u025a",
    "\u025c\u0007\u0017\u0002\u0002\u025b\u025d\u0005\u00e4s\u0002\u025c",
    "\u025b\u0003\u0002\u0002\u0002\u025c\u025d\u0003\u0002\u0002\u0002\u025d",
    "\u025e\u0003\u0002\u0002\u0002\u025e\u025f\u0007\u0018\u0002\u0002\u025f",
    "\u0260\u0007\u0012\u0002\u0002\u0260\u0263\u0005\u0092J\u0002\u0261",
    "\u0264\u0005\u00f6|\u0002\u0262\u0264\u0007\u008d\u0002\u0002\u0263",
    "\u0261\u0003\u0002\u0002\u0002\u0263\u0262\u0003\u0002\u0002\u0002\u0264",
    "\u0265\u0003\u0002\u0002\u0002\u0265\u0266\u0005\u0094K\u0002\u0266",
    "\u000f\u0003\u0002\u0002\u0002\u0267\u0268\u0007\u0082\u0002\u0002\u0268",
    "\u0269\u0007\u00a4\u0002\u0002\u0269\u026a\u0005\u00e4s\u0002\u026a",
    "\u026b\u0007\u0017\u0002\u0002\u026b\u026c\u0007\u0018\u0002\u0002\u026c",
    "\u026d\u0007\u0012\u0002\u0002\u026d\u026e\u0005\u0092J\u0002\u026e",
    "\u026f\u0005&\u0014\u0002\u026f\u0270\u0005\u008eH\u0002\u0270\u0271",
    "\u0005\u00fa~\u0002\u0271\u0272\u0005\u0094K\u0002\u0272\u0011\u0003",
    "\u0002\u0002\u0002\u0273\u0275\u0007\u0099\u0002\u0002\u0274\u0273\u0003",
    "\u0002\u0002\u0002\u0274\u0275\u0003\u0002\u0002\u0002\u0275\u0276\u0003",
    "\u0002\u0002\u0002\u0276\u0277\t\u0002\u0002\u0002\u0277\u0278\u0005",
    "\u00e4s\u0002\u0278\u027f\u0007\u0017\u0002\u0002\u0279\u0280\u0005",
    "\u0016\f\u0002\u027a\u0280\u0005\u010a\u0086\u0002\u027b\u027c\u0005",
    "\u0016\f\u0002\u027c\u027d\u0007\u0014\u0002\u0002\u027d\u027e\u0005",
    "\u010a\u0086\u0002\u027e\u0280\u0003\u0002\u0002\u0002\u027f\u0279\u0003",
    "\u0002\u0002\u0002\u027f\u027a\u0003\u0002\u0002\u0002\u027f\u027b\u0003",
    "\u0002\u0002\u0002\u027f\u0280\u0003\u0002\u0002\u0002\u0280\u0281\u0003",
    "\u0002\u0002\u0002\u0281\u028a\u0007\u0018\u0002\u0002\u0282\u0283\u0007",
    "\u0012\u0002\u0002\u0283\u0286\u0005\u0092J\u0002\u0284\u0287\u0005",
    "\u00f6|\u0002\u0285\u0287\u0007\u008d\u0002\u0002\u0286\u0284\u0003",
    "\u0002\u0002\u0002\u0286\u0285\u0003\u0002\u0002\u0002\u0287\u0288\u0003",
    "\u0002\u0002\u0002\u0288\u0289\u0005\u0094K\u0002\u0289\u028b\u0003",
    "\u0002\u0002\u0002\u028a\u0282\u0003\u0002\u0002\u0002\u028a\u028b\u0003",
    "\u0002\u0002\u0002\u028b\u0013\u0003\u0002\u0002\u0002\u028c\u028d\u0007",
    "\u0097\u0002\u0002\u028d\u028e\u0005\u00e4s\u0002\u028e\u028f\u0007",
    "\u0017\u0002\u0002\u028f\u0290\u0005\u010a\u0086\u0002\u0290\u0291\u0007",
    "\u0018\u0002\u0002\u0291\u0292\u0007\u0012\u0002\u0002\u0292\u0295\u0005",
    "\u0092J\u0002\u0293\u0296\u0005\u00f6|\u0002\u0294\u0296\u0007\u008d",
    "\u0002\u0002\u0295\u0293\u0003\u0002\u0002\u0002\u0295\u0294\u0003\u0002",
    "\u0002\u0002\u0296\u0297\u0003\u0002\u0002\u0002\u0297\u0298\u0005\u0094",
    "K\u0002\u0298\u0015\u0003\u0002\u0002\u0002\u0299\u029a\u0005\u00d2",
    "j\u0002\u029a\u0017\u0003\u0002\u0002\u0002\u029b\u029c\u0007`\u0002",
    "\u0002\u029c\u029d\u0007\u0089\u0002\u0002\u029d\u029e\u0005\u0160\u00b1",
    "\u0002\u029e\u029f\u0007\u0017\u0002\u0002\u029f\u02a0\u0005\u00ecw",
    "\u0002\u02a0\u02a3\u0007\u0018\u0002\u0002\u02a1\u02a2\u00076\u0002",
    "\u0002\u02a2\u02a4\u0005\u00c2b\u0002\u02a3\u02a1\u0003\u0002\u0002",
    "\u0002\u02a3\u02a4\u0003\u0002\u0002\u0002\u02a4\u02a5\u0003\u0002\u0002",
    "\u0002\u02a5\u02a6\u0007\u0012\u0002\u0002\u02a6\u02a7\u0005\u0092J",
    "\u0002\u02a7\u02a8\u0005\u0116\u008c\u0002\u02a8\u02a9\u0005\u0094K",
    "\u0002\u02a9\u0019\u0003\u0002\u0002\u0002\u02aa\u02ab\u0007`\u0002",
    "\u0002\u02ab\u02ac\u0005\u00e0q\u0002\u02ac\u02ad\u0007\u0096\u0002",
    "\u0002\u02ad\u02ae\u0007\u0017\u0002\u0002\u02ae\u02af\u0007\u0018\u0002",
    "\u0002\u02af\u02b0\u0007\u0012\u0002\u0002\u02b0\u02b1\u0005\u0092J",
    "\u0002\u02b1\u02b2\u0005\u0116\u008c\u0002\u02b2\u02b3\u0005\u0094K",
    "\u0002\u02b3\u001b\u0003\u0002\u0002\u0002\u02b4\u02b5\u0007`\u0002",
    "\u0002\u02b5\u02b7\u0005\u00e0q\u0002\u02b6\u02b8\u0007\u0082\u0002",
    "\u0002\u02b7\u02b6\u0003\u0002\u0002\u0002\u02b7\u02b8\u0003\u0002\u0002",
    "\u0002\u02b8\u02b9\u0003\u0002\u0002\u0002\u02b9\u02ba\u0007\u0096\u0002",
    "\u0002\u02ba\u02bb\u0007\u0017\u0002\u0002\u02bb\u02bc\u0007\u0018\u0002",
    "\u0002\u02bc\u02bd\u0007\u0012\u0002\u0002\u02bd\u02be\u0005\u0092J",
    "\u0002\u02be\u02bf\u0005\u010e\u0088\u0002\u02bf\u02c0\u0005\u0094K",
    "\u0002\u02c0\u001d\u0003\u0002\u0002\u0002\u02c1\u02c2\u0007`\u0002",
    "\u0002\u02c2\u02c3\u0005\u00e0q\u0002\u02c3\u02c4\u0007u\u0002\u0002",
    "\u02c4\u02c5\u0007\u0017\u0002\u0002\u02c5\u02c6\u0007\u0018\u0002\u0002",
    "\u02c6\u02c7\u0007\u0012\u0002\u0002\u02c7\u02c8\u0005\u0092J\u0002",
    "\u02c8\u02c9\u0005\u0116\u008c\u0002\u02c9\u02ca\u0005\u0094K\u0002",
    "\u02ca\u001f\u0003\u0002\u0002\u0002\u02cb\u02cc\u0007`\u0002\u0002",
    "\u02cc\u02ce\u0005\u00e0q\u0002\u02cd\u02cf\u0007\u0082\u0002\u0002",
    "\u02ce\u02cd\u0003\u0002\u0002\u0002\u02ce\u02cf\u0003\u0002\u0002\u0002",
    "\u02cf\u02d0\u0003\u0002\u0002\u0002\u02d0\u02d1\u0007u\u0002\u0002",
    "\u02d1\u02d2\u0007\u0017\u0002\u0002\u02d2\u02d3\u0007\u0018\u0002\u0002",
    "\u02d3\u02d4\u0007\u0012\u0002\u0002\u02d4\u02d5\u0005\u0092J\u0002",
    "\u02d5\u02d6\u0005\u010e\u0088\u0002\u02d6\u02d7\u0005\u0094K\u0002",
    "\u02d7!\u0003\u0002\u0002\u0002\u02d8\u02da\u0007\u0099\u0002\u0002",
    "\u02d9\u02d8\u0003\u0002\u0002\u0002\u02d9\u02da\u0003\u0002\u0002\u0002",
    "\u02da\u02db\u0003\u0002\u0002\u0002\u02db\u02dc\u0007\u0082\u0002\u0002",
    "\u02dc\u02dd\t\u0002\u0002\u0002\u02dd\u02de\u0005\u00e4s\u0002\u02de",
    "\u02e0\u0007\u0017\u0002\u0002\u02df\u02e1\u0005\u010a\u0086\u0002\u02e0",
    "\u02df\u0003\u0002\u0002\u0002\u02e0\u02e1\u0003\u0002\u0002\u0002\u02e1",
    "\u02e2\u0003\u0002\u0002\u0002\u02e2\u02e3\u0007\u0018\u0002\u0002\u02e3",
    "\u02e4\u0007\u0012\u0002\u0002\u02e4\u02e5\u0005\u0092J\u0002\u02e5",
    "\u02e9\u0005&\u0014\u0002\u02e6\u02e7\u0005\u008eH\u0002\u02e7\u02e8",
    "\u0005\u00fa~\u0002\u02e8\u02ea\u0003\u0002\u0002\u0002\u02e9\u02e6",
    "\u0003\u0002\u0002\u0002\u02e9\u02ea\u0003\u0002\u0002\u0002\u02ea\u02eb",
    "\u0003\u0002\u0002\u0002\u02eb\u02ec\u0005\u0094K\u0002\u02ec#\u0003",
    "\u0002\u0002\u0002\u02ed\u02ef\u0007\u0099\u0002\u0002\u02ee\u02ed\u0003",
    "\u0002\u0002\u0002\u02ee\u02ef\u0003\u0002\u0002\u0002\u02ef\u02f0\u0003",
    "\u0002\u0002\u0002\u02f0\u02f1\u0007\u0082\u0002\u0002\u02f1\u02f2\u0007",
    "\u0091\u0002\u0002\u02f2\u02f3\u0005\u00e4s\u0002\u02f3\u02f5\u0007",
    "\u0017\u0002\u0002\u02f4\u02f6\u0005\u010a\u0086\u0002\u02f5\u02f4\u0003",
    "\u0002\u0002\u0002\u02f5\u02f6\u0003\u0002\u0002\u0002\u02f6\u02f7\u0003",
    "\u0002\u0002\u0002\u02f7\u02f8\u0007\u0018\u0002\u0002\u02f8\u02f9\u0007",
    "\u0012\u0002\u0002\u02f9\u02fa\u0005\u0092J\u0002\u02fa\u02fe\u0005",
    "&\u0014\u0002\u02fb\u02fc\u0005\u008eH\u0002\u02fc\u02fd\u0005\u00fa",
    "~\u0002\u02fd\u02ff\u0003\u0002\u0002\u0002\u02fe\u02fb\u0003\u0002",
    "\u0002\u0002\u02fe\u02ff\u0003\u0002\u0002\u0002\u02ff\u0300\u0003\u0002",
    "\u0002\u0002\u0300\u0301\u0005\u0094K\u0002\u0301%\u0003\u0002\u0002",
    "\u0002\u0302\u0303\u0007`\u0002\u0002\u0303\u0304\t\u0002\u0002\u0002",
    "\u0304\u0305\u0007X\u0002\u0002\u0305\u0306\u0007\u0012\u0002\u0002",
    "\u0306\u0307\u0005\u0092J\u0002\u0307\u0308\u0005(\u0015\u0002\u0308",
    "\u0309\u0005\u0094K\u0002\u0309\'\u0003\u0002\u0002\u0002\u030a\u030b",
    "\b\u0015\u0001\u0002\u030b\u030c\u0005\u00fe\u0080\u0002\u030c\u0313",
    "\u0003\u0002\u0002\u0002\u030d\u030e\f\u0003\u0002\u0002\u030e\u030f",
    "\u0005\u008eH\u0002\u030f\u0310\u0005\u00fe\u0080\u0002\u0310\u0312",
    "\u0003\u0002\u0002\u0002\u0311\u030d\u0003\u0002\u0002\u0002\u0312\u0315",
    "\u0003\u0002\u0002\u0002\u0313\u0311\u0003\u0002\u0002\u0002\u0313\u0314",
    "\u0003\u0002\u0002\u0002\u0314)\u0003\u0002\u0002\u0002\u0315\u0313",
    "\u0003\u0002\u0002\u0002\u0316\u0317\u0007N\u0002\u0002\u0317\u0318",
    "\u0007`\u0002\u0002\u0318\u0319\u0005\u00d4k\u0002\u0319\u031b\u0007",
    "\u0017\u0002\u0002\u031a\u031c\u0005\u00e8u\u0002\u031b\u031a\u0003",
    "\u0002\u0002\u0002\u031b\u031c\u0003\u0002\u0002\u0002\u031c\u031d\u0003",
    "\u0002\u0002\u0002\u031d\u0323\u0007\u0018\u0002\u0002\u031e\u0320\u0007",
    "6\u0002\u0002\u031f\u0321\u0007\u0081\u0002\u0002\u0320\u031f\u0003",
    "\u0002\u0002\u0002\u0320\u0321\u0003\u0002\u0002\u0002\u0321\u0322\u0003",
    "\u0002\u0002\u0002\u0322\u0324\u0005\u00c2b\u0002\u0323\u031e\u0003",
    "\u0002\u0002\u0002\u0323\u0324\u0003\u0002\u0002\u0002\u0324+\u0003",
    "\u0002\u0002\u0002\u0325\u0326\u0007`\u0002\u0002\u0326\u0327\u0005",
    "\u00d4k\u0002\u0327\u0329\u0007\u0017\u0002\u0002\u0328\u032a\u0005",
    "\u00e8u\u0002\u0329\u0328\u0003\u0002\u0002\u0002\u0329\u032a\u0003",
    "\u0002\u0002\u0002\u032a\u032b\u0003\u0002\u0002\u0002\u032b\u0331\u0007",
    "\u0018\u0002\u0002\u032c\u032e\u00076\u0002\u0002\u032d\u032f\u0007",
    "\u0081\u0002\u0002\u032e\u032d\u0003\u0002\u0002\u0002\u032e\u032f\u0003",
    "\u0002\u0002\u0002\u032f\u0330\u0003\u0002\u0002\u0002\u0330\u0332\u0005",
    "\u00c2b\u0002\u0331\u032c\u0003\u0002\u0002\u0002\u0331\u0332\u0003",
    "\u0002\u0002\u0002\u0332\u0333\u0003\u0002\u0002\u0002\u0333\u0334\u0007",
    "\u0012\u0002\u0002\u0334\u0337\u0005\u0092J\u0002\u0335\u0338\u0005",
    "\u0116\u008c\u0002\u0336\u0338\u0007\u008d\u0002\u0002\u0337\u0335\u0003",
    "\u0002\u0002\u0002\u0337\u0336\u0003\u0002\u0002\u0002\u0338\u0339\u0003",
    "\u0002\u0002\u0002\u0339\u033a\u0005\u0094K\u0002\u033a-\u0003\u0002",
    "\u0002\u0002\u033b\u033d\u0007`\u0002\u0002\u033c\u033e\u0007\u0082",
    "\u0002\u0002\u033d\u033c\u0003\u0002\u0002\u0002\u033d\u033e\u0003\u0002",
    "\u0002\u0002\u033e\u033f\u0003\u0002\u0002\u0002\u033f\u0340\u0005\u00d4",
    "k\u0002\u0340\u0342\u0007\u0017\u0002\u0002\u0341\u0343\u0005\u00e8",
    "u\u0002\u0342\u0341\u0003\u0002\u0002\u0002\u0342\u0343\u0003\u0002",
    "\u0002\u0002\u0343\u0344\u0003\u0002\u0002\u0002\u0344\u0347\u0007\u0018",
    "\u0002\u0002\u0345\u0346\u00076\u0002\u0002\u0346\u0348\u0005\u00f2",
    "z\u0002\u0347\u0345\u0003\u0002\u0002\u0002\u0347\u0348\u0003\u0002",
    "\u0002\u0002\u0348\u0349\u0003\u0002\u0002\u0002\u0349\u034a\u0007\u0012",
    "\u0002\u0002\u034a\u034b\u0005\u0092J\u0002\u034b\u034c\u0005\u010e",
    "\u0088\u0002\u034c\u034d\u0005\u0094K\u0002\u034d/\u0003\u0002\u0002",
    "\u0002\u034e\u034f\u0007`\u0002\u0002\u034f\u0350\u0007\u009d\u0002",
    "\u0002\u0350\u0351\u0007\u00b4\u0002\u0002\u0351\u0352\u0007\u0017\u0002",
    "\u0002\u0352\u0353\u0007\u0018\u0002\u0002\u0353\u0354\u0007\u0012\u0002",
    "\u0002\u0354\u0355\u0005\u0092J\u0002\u0355\u0356\u0005\u0116\u008c",
    "\u0002\u0356\u0357\u0005\u0094K\u0002\u0357\u0358\u0005\u008eH\u0002",
    "\u0358\u0359\u0007\u00a3\u0002\u0002\u0359\u035f\u0007\u0012\u0002\u0002",
    "\u035a\u035b\u0005\u0092J\u0002\u035b\u035c\u0005\u0118\u008d\u0002",
    "\u035c\u035d\u0005\u0094K\u0002\u035d\u0360\u0003\u0002\u0002\u0002",
    "\u035e\u0360\u0005\u00e6t\u0002\u035f\u035a\u0003\u0002\u0002\u0002",
    "\u035f\u035e\u0003\u0002\u0002\u0002\u03601\u0003\u0002\u0002\u0002",
    "\u0361\u0362\u0005\\/\u0002\u03623\u0003\u0002\u0002\u0002\u0363\u0364",
    "\u0005\u00e0q\u0002\u0364\u0365\u0007\u0012\u0002\u0002\u0365\u036a",
    "\u0005\u00f2z\u0002\u0366\u0367\u0007\u0017\u0002\u0002\u0367\u0368",
    "\u0005\u010a\u0086\u0002\u0368\u0369\u0007\u0018\u0002\u0002\u0369\u036b",
    "\u0003\u0002\u0002\u0002\u036a\u0366\u0003\u0002\u0002\u0002\u036a\u036b",
    "\u0003\u0002\u0002\u0002\u036b\u036e\u0003\u0002\u0002\u0002\u036c\u036d",
    "\u00070\u0002\u0002\u036d\u036f\u0005\u012a\u0096\u0002\u036e\u036c",
    "\u0003\u0002\u0002\u0002\u036e\u036f\u0003\u0002\u0002\u0002\u036f5",
    "\u0003\u0002\u0002\u0002\u0370\u0386\u0005> \u0002\u0371\u0386\u0005",
    "\u0086D\u0002\u0372\u0386\u0005\u008aF\u0002\u0373\u0386\u0005:\u001e",
    "\u0002\u0374\u0386\u0005~@\u0002\u0375\u0386\u0005\u0082B\u0002\u0376",
    "\u0386\u00058\u001d\u0002\u0377\u0386\u0005X-\u0002\u0378\u0386\u0005",
    "Z.\u0002\u0379\u0386\u0005N(\u0002\u037a\u0386\u0005D#\u0002\u037b\u0386",
    "\u0005H%\u0002\u037c\u0386\u0005L\'\u0002\u037d\u0386\u0005J&\u0002",
    "\u037e\u0386\u0005R*\u0002\u037f\u0386\u0005T+\u0002\u0380\u0386\u0005",
    "x=\u0002\u0381\u0386\u0005@!\u0002\u0382\u0386\u0005B\"\u0002\u0383",
    "\u0386\u0005,\u0017\u0002\u0384\u0386\u0005\u009aN\u0002\u0385\u0370",
    "\u0003\u0002\u0002\u0002\u0385\u0371\u0003\u0002\u0002\u0002\u0385\u0372",
    "\u0003\u0002\u0002\u0002\u0385\u0373\u0003\u0002\u0002\u0002\u0385\u0374",
    "\u0003\u0002\u0002\u0002\u0385\u0375\u0003\u0002\u0002\u0002\u0385\u0376",
    "\u0003\u0002\u0002\u0002\u0385\u0377\u0003\u0002\u0002\u0002\u0385\u0378",
    "\u0003\u0002\u0002\u0002\u0385\u0379\u0003\u0002\u0002\u0002\u0385\u037a",
    "\u0003\u0002\u0002\u0002\u0385\u037b\u0003\u0002\u0002\u0002\u0385\u037c",
    "\u0003\u0002\u0002\u0002\u0385\u037d\u0003\u0002\u0002\u0002\u0385\u037e",
    "\u0003\u0002\u0002\u0002\u0385\u037f\u0003\u0002\u0002\u0002\u0385\u0380",
    "\u0003\u0002\u0002\u0002\u0385\u0381\u0003\u0002\u0002\u0002\u0385\u0382",
    "\u0003\u0002\u0002\u0002\u0385\u0383\u0003\u0002\u0002\u0002\u0385\u0384",
    "\u0003\u0002\u0002\u0002\u03867\u0003\u0002\u0002\u0002\u0387\u0388",
    "\u0007r\u0002\u0002\u0388\u0389\u0007\u0017\u0002\u0002\u0389\u038a",
    "\u0007\u0018\u0002\u0002\u038a9\u0003\u0002\u0002\u0002\u038b\u038c",
    "\u0007c\u0002\u0002\u038c\u038d\u0007\u0017\u0002\u0002\u038d\u038e",
    "\u0005\u00be`\u0002\u038e\u0395\u0007\u0018\u0002\u0002\u038f\u0390",
    "\u0007Q\u0002\u0002\u0390\u0391\u0007\u009a\u0002\u0002\u0391\u0392",
    "\u0007\u0017\u0002\u0002\u0392\u0393\u0005\u00be`\u0002\u0393\u0394",
    "\u0007\u0018\u0002\u0002\u0394\u0396\u0003\u0002\u0002\u0002\u0395\u038f",
    "\u0003\u0002\u0002\u0002\u0395\u0396\u0003\u0002\u0002\u0002\u0396\u039d",
    "\u0003\u0002\u0002\u0002\u0397\u0398\u0007\u009a\u0002\u0002\u0398\u0399",
    "\u0007\u0017\u0002\u0002\u0399\u039a\u0005\u00be`\u0002\u039a\u039b",
    "\u0007\u0018\u0002\u0002\u039b\u039d\u0003\u0002\u0002\u0002\u039c\u038b",
    "\u0003\u0002\u0002\u0002\u039c\u0397\u0003\u0002\u0002\u0002\u039d\u03a4",
    "\u0003\u0002\u0002\u0002\u039e\u039f\u0007\u00a5\u0002\u0002\u039f\u03a0",
    "\u0005\u014a\u00a6\u0002\u03a0\u03a1\u0007\u0017\u0002\u0002\u03a1\u03a2",
    "\u0005\\/\u0002\u03a2\u03a3\u0007\u0018\u0002\u0002\u03a3\u03a5\u0003",
    "\u0002\u0002\u0002\u03a4\u039e\u0003\u0002\u0002\u0002\u03a4\u03a5\u0003",
    "\u0002\u0002\u0002\u03a5\u03ac\u0003\u0002\u0002\u0002\u03a6\u03a7\u0007",
    "\u009e\u0002\u0002\u03a7\u03a8\u0007\u0012\u0002\u0002\u03a8\u03a9\u0005",
    "\u0092J\u0002\u03a9\u03aa\u0005\u0116\u008c\u0002\u03aa\u03ab\u0005",
    "\u0094K\u0002\u03ab\u03ad\u0003\u0002\u0002\u0002\u03ac\u03a6\u0003",
    "\u0002\u0002\u0002\u03ac\u03ad\u0003\u0002\u0002\u0002\u03ad;\u0003",
    "\u0002\u0002\u0002\u03ae\u03af\u0005\u00d4k\u0002\u03af\u03b1\u0007",
    "\u0017\u0002\u0002\u03b0\u03b2\u0005t;\u0002\u03b1\u03b0\u0003\u0002",
    "\u0002\u0002\u03b1\u03b2\u0003\u0002\u0002\u0002\u03b2\u03b3\u0003\u0002",
    "\u0002\u0002\u03b3\u03b4\u0007\u0018\u0002\u0002\u03b4=\u0003\u0002",
    "\u0002\u0002\u03b5\u03b6\u0005d3\u0002\u03b6\u03b7\u0007\u0016\u0002",
    "\u0002\u03b7\u03b9\u0003\u0002\u0002\u0002\u03b8\u03b5\u0003\u0002\u0002",
    "\u0002\u03b8\u03b9\u0003\u0002\u0002\u0002\u03b9\u03ba\u0003\u0002\u0002",
    "\u0002\u03ba\u03c5\u0005<\u001f\u0002\u03bb\u03be\u0007\u009e\u0002",
    "\u0002\u03bc\u03bd\u0007\u00a5\u0002\u0002\u03bd\u03bf\u0005\u00e0q",
    "\u0002\u03be\u03bc\u0003\u0002\u0002\u0002\u03be\u03bf\u0003\u0002\u0002",
    "\u0002\u03bf\u03c0\u0003\u0002\u0002\u0002\u03c0\u03c1\u0007\u0012\u0002",
    "\u0002\u03c1\u03c2\u0005\u0092J\u0002\u03c2\u03c3\u0005\u0116\u008c",
    "\u0002\u03c3\u03c4\u0005\u0094K\u0002\u03c4\u03c6\u0003\u0002\u0002",
    "\u0002\u03c5\u03bb\u0003\u0002\u0002\u0002\u03c5\u03c6\u0003\u0002\u0002",
    "\u0002\u03c6?\u0003\u0002\u0002\u0002\u03c7\u03c8\u0007\u00a5\u0002",
    "\u0002\u03c8\u03c9\u0005\u0144\u00a3\u0002\u03c9\u03ca\u0007\u0012\u0002",
    "\u0002\u03ca\u03cb\u0005\u0092J\u0002\u03cb\u03cc\u0005\u0116\u008c",
    "\u0002\u03cc\u03cd\u0005\u0094K\u0002\u03cdA\u0003\u0002\u0002\u0002",
    "\u03ce\u03cf\u0007\u00a5\u0002\u0002\u03cf\u03d0\u0005\u00e4s\u0002",
    "\u03d0\u03d1\u0007\u0012\u0002\u0002\u03d1\u03d2\u0005\u0092J\u0002",
    "\u03d2\u03d3\u0005\u0116\u008c\u0002\u03d3\u03d4\u0005\u0094K\u0002",
    "\u03d4C\u0003\u0002\u0002\u0002\u03d5\u03d6\u0007\u009c\u0002\u0002",
    "\u03d6\u03d7\u0007\u0087\u0002\u0002\u03d7\u03d8\u0005\\/\u0002\u03d8",
    "\u03d9\u0007\u0012\u0002\u0002\u03d9\u03da\u0005\u0092J\u0002\u03da",
    "\u03e2\u0005\u011a\u008e\u0002\u03db\u03dc\u0005\u008eH\u0002\u03dc",
    "\u03dd\u0007\u008c\u0002\u0002\u03dd\u03de\u0007\u0012\u0002\u0002\u03de",
    "\u03df\u0005\u0092J\u0002\u03df\u03e0\u0005\u0116\u008c\u0002\u03e0",
    "\u03e1\u0005\u0094K\u0002\u03e1\u03e3\u0003\u0002\u0002\u0002\u03e2",
    "\u03db\u0003\u0002\u0002\u0002\u03e2\u03e3\u0003\u0002\u0002\u0002\u03e3",
    "\u03e4\u0003\u0002\u0002\u0002\u03e4\u03e5\u0005\u0094K\u0002\u03e5",
    "E\u0003\u0002\u0002\u0002\u03e6\u03e7\u0007\u00a6\u0002\u0002\u03e7",
    "\u03e8\u0005\u0120\u0091\u0002\u03e8\u03e9\u0007\u0012\u0002\u0002\u03e9",
    "\u03ea\u0005\u0092J\u0002\u03ea\u03eb\u0005\u0116\u008c\u0002\u03eb",
    "\u03ec\u0005\u0094K\u0002\u03ec\u03f6\u0003\u0002\u0002\u0002\u03ed",
    "\u03ee\u0007\u00a6\u0002\u0002\u03ee\u03ef\u0007x\u0002\u0002\u03ef",
    "\u03f0\u0005\u011e\u0090\u0002\u03f0\u03f1\u0007\u0012\u0002\u0002\u03f1",
    "\u03f2\u0005\u0092J\u0002\u03f2\u03f3\u0005\u0116\u008c\u0002\u03f3",
    "\u03f4\u0005\u0094K\u0002\u03f4\u03f6\u0003\u0002\u0002\u0002\u03f5",
    "\u03e6\u0003\u0002\u0002\u0002\u03f5\u03ed\u0003\u0002\u0002\u0002\u03f6",
    "G\u0003\u0002\u0002\u0002\u03f7\u03f8\u0007s\u0002\u0002\u03f8\u03fb",
    "\u0005\u00e0q\u0002\u03f9\u03fa\u0007\u0014\u0002\u0002\u03fa\u03fc",
    "\u0005\u00e0q\u0002\u03fb\u03f9\u0003\u0002\u0002\u0002\u03fb\u03fc",
    "\u0003\u0002\u0002\u0002\u03fc\u03fd\u0003\u0002\u0002\u0002\u03fd\u03fe",
    "\u0007x\u0002\u0002\u03fe\u03ff\u0005\\/\u0002\u03ff\u0400\u0007\u0012",
    "\u0002\u0002\u0400\u0401\u0005\u0092J\u0002\u0401\u0402\u0005\u0116",
    "\u008c\u0002\u0402\u0403\u0005\u0094K\u0002\u0403I\u0003\u0002\u0002",
    "\u0002\u0404\u0405\u0007e\u0002\u0002\u0405\u0406\u0007\u0012\u0002",
    "\u0002\u0406\u0407\u0005\u0092J\u0002\u0407\u0408\u0005\u0116\u008c",
    "\u0002\u0408\u0409\u0005\u0094K\u0002\u0409\u040a\u0005\u008eH\u0002",
    "\u040a\u040b\u0007\u00a8\u0002\u0002\u040b\u040c\u0005\\/\u0002\u040c",
    "K\u0003\u0002\u0002\u0002\u040d\u040e\u0007\u00a8\u0002\u0002\u040e",
    "\u040f\u0005\\/\u0002\u040f\u0410\u0007\u0012\u0002\u0002\u0410\u0411",
    "\u0005\u0092J\u0002\u0411\u0412\u0005\u0116\u008c\u0002\u0412\u0413",
    "\u0005\u0094K\u0002\u0413M\u0003\u0002\u0002\u0002\u0414\u0415\u0007",
    "w\u0002\u0002\u0415\u0416\u0005\\/\u0002\u0416\u0417\u0007\u0012\u0002",
    "\u0002\u0417\u0418\u0005\u0092J\u0002\u0418\u0419\u0005\u0116\u008c",
    "\u0002\u0419\u041d\u0005\u0094K\u0002\u041a\u041b\u0005\u008eH\u0002",
    "\u041b\u041c\u0005P)\u0002\u041c\u041e\u0003\u0002\u0002\u0002\u041d",
    "\u041a\u0003\u0002\u0002\u0002\u041d\u041e\u0003\u0002\u0002\u0002\u041e",
    "\u0426\u0003\u0002\u0002\u0002\u041f\u0420\u0005\u008eH\u0002\u0420",
    "\u0421\u0007h\u0002\u0002\u0421\u0422\u0007\u0012\u0002\u0002\u0422",
    "\u0423\u0005\u0092J\u0002\u0423\u0424\u0005\u0116\u008c\u0002\u0424",
    "\u0425\u0005\u0094K\u0002\u0425\u0427\u0003\u0002\u0002\u0002\u0426",
    "\u041f\u0003\u0002\u0002\u0002\u0426\u0427\u0003\u0002\u0002\u0002\u0427",
    "O\u0003\u0002\u0002\u0002\u0428\u0429\b)\u0001\u0002\u0429\u042a\u0007",
    "h\u0002\u0002\u042a\u042b\u0007w\u0002\u0002\u042b\u042c\u0005\\/\u0002",
    "\u042c\u042d\u0007\u0012\u0002\u0002\u042d\u042e\u0005\u0092J\u0002",
    "\u042e\u042f\u0005\u0116\u008c\u0002\u042f\u0430\u0005\u0094K\u0002",
    "\u0430\u043d\u0003\u0002\u0002\u0002\u0431\u0432\f\u0003\u0002\u0002",
    "\u0432\u0433\u0005\u008eH\u0002\u0433\u0434\u0007h\u0002\u0002\u0434",
    "\u0435\u0007w\u0002\u0002\u0435\u0436\u0005\\/\u0002\u0436\u0437\u0007",
    "\u0012\u0002\u0002\u0437\u0438\u0005\u0092J\u0002\u0438\u0439\u0005",
    "\u0116\u008c\u0002\u0439\u043a\u0005\u0094K\u0002\u043a\u043c\u0003",
    "\u0002\u0002\u0002\u043b\u0431\u0003\u0002\u0002\u0002\u043c\u043f\u0003",
    "\u0002\u0002\u0002\u043d\u043b\u0003\u0002\u0002\u0002\u043d\u043e\u0003",
    "\u0002\u0002\u0002\u043eQ\u0003\u0002\u0002\u0002\u043f\u043d\u0003",
    "\u0002\u0002\u0002\u0440\u0441\u0007\u008e\u0002\u0002\u0441\u0442\u0005",
    "\\/\u0002\u0442S\u0003\u0002\u0002\u0002\u0443\u0444\u0007\u00a2\u0002",
    "\u0002\u0444\u0445\u0005\u00e0q\u0002\u0445\u0446\u0007\u0012\u0002",
    "\u0002\u0446\u0447\u0005\u0092J\u0002\u0447\u0448\u0005\u0116\u008c",
    "\u0002\u0448\u0449\u0005\u0094K\u0002\u0449\u044b\u0005\u008cG\u0002",
    "\u044a\u044c\u0005\u011c\u008f\u0002\u044b\u044a\u0003\u0002\u0002\u0002",
    "\u044b\u044c\u0003\u0002\u0002\u0002\u044c\u0454\u0003\u0002\u0002\u0002",
    "\u044d\u044e\u0007k\u0002\u0002\u044e\u044f\u0007\u0012\u0002\u0002",
    "\u044f\u0450\u0005\u0092J\u0002\u0450\u0451\u0005\u0116\u008c\u0002",
    "\u0451\u0452\u0005\u0094K\u0002\u0452\u0453\u0005\u008cG\u0002\u0453",
    "\u0455\u0003\u0002\u0002\u0002\u0454\u044d\u0003\u0002\u0002\u0002\u0454",
    "\u0455\u0003\u0002\u0002\u0002\u0455\u045d\u0003\u0002\u0002\u0002\u0456",
    "\u0457\u0007q\u0002\u0002\u0457\u0458\u0007\u0012\u0002\u0002\u0458",
    "\u0459\u0005\u0092J\u0002\u0459\u045a\u0005\u0116\u008c\u0002\u045a",
    "\u045b\u0005\u0094K\u0002\u045b\u045c\u0005\u008cG\u0002\u045c\u045e",
    "\u0003\u0002\u0002\u0002\u045d\u0456\u0003\u0002\u0002\u0002\u045d\u045e",
    "\u0003\u0002\u0002\u0002\u045e\u045f\u0003\u0002\u0002\u0002\u045f\u0460",
    "\u0005\u008cG\u0002\u0460U\u0003\u0002\u0002\u0002\u0461\u0462\u0007",
    "k\u0002\u0002\u0462\u0463\u0005\u00e6t\u0002\u0463\u0464\u0007\u0012",
    "\u0002\u0002\u0464\u0465\u0005\u0092J\u0002\u0465\u0466\u0005\u0116",
    "\u008c\u0002\u0466\u0467\u0005\u0094K\u0002\u0467\u0468\u0005\u008c",
    "G\u0002\u0468\u0475\u0003\u0002\u0002\u0002\u0469\u046a\u0007k\u0002",
    "\u0002\u046a\u046b\u0007x\u0002\u0002\u046b\u046c\u0007\u0019\u0002",
    "\u0002\u046c\u046d\u0005\u00b6\\\u0002\u046d\u046e\u0007\u001a\u0002",
    "\u0002\u046e\u046f\u0007\u0012\u0002\u0002\u046f\u0470\u0005\u0092J",
    "\u0002\u0470\u0471\u0005\u0116\u008c\u0002\u0471\u0472\u0005\u0094K",
    "\u0002\u0472\u0473\u0005\u008cG\u0002\u0473\u0475\u0003\u0002\u0002",
    "\u0002\u0474\u0461\u0003\u0002\u0002\u0002\u0474\u0469\u0003\u0002\u0002",
    "\u0002\u0475W\u0003\u0002\u0002\u0002\u0476\u0477\u0007Y\u0002\u0002",
    "\u0477Y\u0003\u0002\u0002\u0002\u0478\u047a\u0007\u0092\u0002\u0002",
    "\u0479\u047b\u0005\\/\u0002\u047a\u0479\u0003\u0002\u0002\u0002\u047a",
    "\u047b\u0003\u0002\u0002\u0002\u047b[\u0003\u0002\u0002\u0002\u047c",
    "\u047d\b/\u0001\u0002\u047d\u0492\u0005\u0202\u0102\u0002\u047e\u0492",
    "\u0005\u01e2\u00f2\u0002\u047f\u0492\u0005d3\u0002\u0480\u0492\u0005",
    "f4\u0002\u0481\u0492\u0005\u014c\u00a7\u0002\u0482\u0483\u0007$\u0002",
    "\u0002\u0483\u0492\u0005\\/\u0019\u0484\u0485\u0007\u0084\u0002\u0002",
    "\u0485\u0492\u0005\\/\u0018\u0486\u0487\u0007D\u0002\u0002\u0487\u0488",
    "\u0007\u0017\u0002\u0002\u0488\u0489\u0005\\/\u0002\u0489\u048a\u0007",
    "\u0018\u0002\u0002\u048a\u0492\u0003\u0002\u0002\u0002\u048b\u048c\u0007",
    "l\u0002\u0002\u048c\u048d\u0007\u0017\u0002\u0002\u048d\u048e\u0005",
    "\u00e0q\u0002\u048e\u048f\u0007\u0018\u0002\u0002\u048f\u0492\u0003",
    "\u0002\u0002\u0002\u0490\u0492\u0005`1\u0002\u0491\u047c\u0003\u0002",
    "\u0002\u0002\u0491\u047e\u0003\u0002\u0002\u0002\u0491\u047f\u0003\u0002",
    "\u0002\u0002\u0491\u0480\u0003\u0002\u0002\u0002\u0491\u0481\u0003\u0002",
    "\u0002\u0002\u0491\u0482\u0003\u0002\u0002\u0002\u0491\u0484\u0003\u0002",
    "\u0002\u0002\u0491\u0486\u0003\u0002\u0002\u0002\u0491\u048b\u0003\u0002",
    "\u0002\u0002\u0491\u0490\u0003\u0002\u0002\u0002\u0492\u04ef\u0003\u0002",
    "\u0002\u0002\u0493\u0494\f\u0016\u0002\u0002\u0494\u0495\u0005\u0170",
    "\u00b9\u0002\u0495\u0496\u0005\\/\u0017\u0496\u04ee\u0003\u0002\u0002",
    "\u0002\u0497\u0498\f\u0015\u0002\u0002\u0498\u0499\u0005\u0172\u00ba",
    "\u0002\u0499\u049a\u0005\\/\u0016\u049a\u04ee\u0003\u0002\u0002\u0002",
    "\u049b\u049c\f\u0014\u0002\u0002\u049c\u049d\u0005\u0176\u00bc\u0002",
    "\u049d\u049e\u0005\\/\u0015\u049e\u04ee\u0003\u0002\u0002\u0002\u049f",
    "\u04a0\f\u0013\u0002\u0002\u04a0\u04a1\u0005\u0174\u00bb\u0002\u04a1",
    "\u04a2\u0005\\/\u0014\u04a2\u04ee\u0003\u0002\u0002\u0002\u04a3\u04a4",
    "\f\u0012\u0002\u0002\u04a4\u04a5\t\u0003\u0002\u0002\u04a5\u04ee\u0005",
    "\\/\u0013\u04a6\u04a7\f\u0011\u0002\u0002\u04a7\u04a8\t\u0004\u0002",
    "\u0002\u04a8\u04ee\u0005\\/\u0012\u04a9\u04aa\f\u000f\u0002\u0002\u04aa",
    "\u04ab\t\u0005\u0002\u0002\u04ab\u04ee\u0005\\/\u0010\u04ac\u04ae\f",
    "\u000e\u0002\u0002\u04ad\u04af\u0007\u0084\u0002\u0002\u04ae\u04ad\u0003",
    "\u0002\u0002\u0002\u04ae\u04af\u0003\u0002\u0002\u0002\u04af\u04b0\u0003",
    "\u0002\u0002\u0002\u04b0\u04b1\u0007_\u0002\u0002\u04b1\u04ee\u0005",
    "\\/\u000f\u04b2\u04b4\f\r\u0002\u0002\u04b3\u04b5\u0007\u0084\u0002",
    "\u0002\u04b4\u04b3\u0003\u0002\u0002\u0002\u04b4\u04b5\u0003\u0002\u0002",
    "\u0002\u04b5\u04b6\u0003\u0002\u0002\u0002\u04b6\u04b7\u0007x\u0002",
    "\u0002\u04b7\u04ee\u0005\\/\u000e\u04b8\u04ba\f\f\u0002\u0002\u04b9",
    "\u04bb\u0007\u0084\u0002\u0002\u04ba\u04b9\u0003\u0002\u0002\u0002\u04ba",
    "\u04bb\u0003\u0002\u0002\u0002\u04bb\u04bc\u0003\u0002\u0002\u0002\u04bc",
    "\u04bd\u0007v\u0002\u0002\u04bd\u04ee\u0005\\/\r\u04be\u04bf\f\t\u0002",
    "\u0002\u04bf\u04c0\u0007\u008a\u0002\u0002\u04c0\u04ee\u0005\\/\n\u04c1",
    "\u04c2\f\b\u0002\u0002\u04c2\u04c3\u0007Q\u0002\u0002\u04c3\u04ee\u0005",
    "\\/\t\u04c4\u04c5\f\u0007\u0002\u0002\u04c5\u04c6\u0007w\u0002\u0002",
    "\u04c6\u04c7\u0005\\/\u0002\u04c7\u04c8\u0007h\u0002\u0002\u04c8\u04c9",
    "\u0005\\/\b\u04c9\u04ee\u0003\u0002\u0002\u0002\u04ca\u04cb\f\u0003",
    "\u0002\u0002\u04cb\u04cc\u0007s\u0002\u0002\u04cc\u04cd\u0007g\u0002",
    "\u0002\u04cd\u04ce\u0005\u00e0q\u0002\u04ce\u04cf\u0007x\u0002\u0002",
    "\u04cf\u04d0\u0005\\/\u0004\u04d0\u04ee\u0003\u0002\u0002\u0002\u04d1",
    "\u04d2\f\u001a\u0002\u0002\u04d2\u04ee\u0005z>\u0002\u04d3\u04d4\f\u0017",
    "\u0002\u0002\u04d4\u04d6\u0007S\u0002\u0002\u04d5\u04d7\u0007\u0081",
    "\u0002\u0002\u04d6\u04d5\u0003\u0002\u0002\u0002\u04d6\u04d7\u0003\u0002",
    "\u0002\u0002\u04d7\u04d8\u0003\u0002\u0002\u0002\u04d8\u04ee\u0005\u00f2",
    "z\u0002\u04d9\u04da\f\u0010\u0002\u0002\u04da\u04dc\u0007|\u0002\u0002",
    "\u04db\u04dd\u0007\u0084\u0002\u0002\u04dc\u04db\u0003\u0002\u0002\u0002",
    "\u04dc\u04dd\u0003\u0002\u0002\u0002\u04dd\u04de\u0003\u0002\u0002\u0002",
    "\u04de\u04ee\u0005\u0148\u00a5\u0002\u04df\u04e1\f\u000b\u0002\u0002",
    "\u04e0\u04e2\u0007\u0084\u0002\u0002\u04e1\u04e0\u0003\u0002\u0002\u0002",
    "\u04e1\u04e2\u0003\u0002\u0002\u0002\u04e2\u04e3\u0003\u0002\u0002\u0002",
    "\u04e3\u04e4\u0007v\u0002\u0002\u04e4\u04e5\u0007O\u0002\u0002\u04e5",
    "\u04ee\u0005^0\u0002\u04e6\u04e8\f\n\u0002\u0002\u04e7\u04e9\u0007\u0084",
    "\u0002\u0002\u04e8\u04e7\u0003\u0002\u0002\u0002\u04e8\u04e9\u0003\u0002",
    "\u0002\u0002\u04e9\u04ea\u0003\u0002\u0002\u0002\u04ea\u04eb\u0007v",
    "\u0002\u0002\u04eb\u04ec\u0007R\u0002\u0002\u04ec\u04ee\u0005^0\u0002",
    "\u04ed\u0493\u0003\u0002\u0002\u0002\u04ed\u0497\u0003\u0002\u0002\u0002",
    "\u04ed\u049b\u0003\u0002\u0002\u0002\u04ed\u049f\u0003\u0002\u0002\u0002",
    "\u04ed\u04a3\u0003\u0002\u0002\u0002\u04ed\u04a6\u0003\u0002\u0002\u0002",
    "\u04ed\u04a9\u0003\u0002\u0002\u0002\u04ed\u04ac\u0003\u0002\u0002\u0002",
    "\u04ed\u04b2\u0003\u0002\u0002\u0002\u04ed\u04b8\u0003\u0002\u0002\u0002",
    "\u04ed\u04be\u0003\u0002\u0002\u0002\u04ed\u04c1\u0003\u0002\u0002\u0002",
    "\u04ed\u04c4\u0003\u0002\u0002\u0002\u04ed\u04ca\u0003\u0002\u0002\u0002",
    "\u04ed\u04d1\u0003\u0002\u0002\u0002\u04ed\u04d3\u0003\u0002\u0002\u0002",
    "\u04ed\u04d9\u0003\u0002\u0002\u0002\u04ed\u04df\u0003\u0002\u0002\u0002",
    "\u04ed\u04e6\u0003\u0002\u0002\u0002\u04ee\u04f1\u0003\u0002\u0002\u0002",
    "\u04ef\u04ed\u0003\u0002\u0002\u0002\u04ef\u04f0\u0003\u0002\u0002\u0002",
    "\u04f0]\u0003\u0002\u0002\u0002\u04f1\u04ef\u0003\u0002\u0002\u0002",
    "\u04f2\u04f3\u0007\u00a7\u0002\u0002\u04f3\u04fa\u0005\u014c\u00a7\u0002",
    "\u04f4\u04f5\u0005\u00e0q\u0002\u04f5\u04f6\u0007\u00a7\u0002\u0002",
    "\u04f6\u04f7\u0005\\/\u0002\u04f7\u04fa\u0003\u0002\u0002\u0002\u04f8",
    "\u04fa\u0005\\/\u0002\u04f9\u04f2\u0003\u0002\u0002\u0002\u04f9\u04f4",
    "\u0003\u0002\u0002\u0002\u04f9\u04f8\u0003\u0002\u0002\u0002\u04fa_",
    "\u0003\u0002\u0002\u0002\u04fb\u04fc\u0005\u00e4s\u0002\u04fca\u0003",
    "\u0002\u0002\u0002\u04fd\u0504\u0005h5\u0002\u04fe\u0504\u0005\u0128",
    "\u0095\u0002\u04ff\u0504\u0005\u012a\u0096\u0002\u0500\u0504\u0005\u00dc",
    "o\u0002\u0501\u0504\u0005\u0124\u0093\u0002\u0502\u0504\u0005\u0126",
    "\u0094\u0002\u0503\u04fd\u0003\u0002\u0002\u0002\u0503\u04fe\u0003\u0002",
    "\u0002\u0002\u0503\u04ff\u0003\u0002\u0002\u0002\u0503\u0500\u0003\u0002",
    "\u0002\u0002\u0503\u0501\u0003\u0002\u0002\u0002\u0503\u0502\u0003\u0002",
    "\u0002\u0002\u0504c\u0003\u0002\u0002\u0002\u0505\u0506\b3\u0001\u0002",
    "\u0506\u0507\u0005b2\u0002\u0507\u050c\u0003\u0002\u0002\u0002\u0508",
    "\u0509\f\u0003\u0002\u0002\u0509\u050b\u0005j6\u0002\u050a\u0508\u0003",
    "\u0002\u0002\u0002\u050b\u050e\u0003\u0002\u0002\u0002\u050c\u050a\u0003",
    "\u0002\u0002\u0002\u050c\u050d\u0003\u0002\u0002\u0002\u050de\u0003",
    "\u0002\u0002\u0002\u050e\u050c\u0003\u0002\u0002\u0002\u050f\u0510\b",
    "4\u0001\u0002\u0510\u0511\u0007\u0081\u0002\u0002\u0511\u0512\u0005",
    "\u00dco\u0002\u0512\u0517\u0003\u0002\u0002\u0002\u0513\u0514\f\u0003",
    "\u0002\u0002\u0514\u0516\u0005j6\u0002\u0515\u0513\u0003\u0002\u0002",
    "\u0002\u0516\u0519\u0003\u0002\u0002\u0002\u0517\u0515\u0003\u0002\u0002",
    "\u0002\u0517\u0518\u0003\u0002\u0002\u0002\u0518g\u0003\u0002\u0002",
    "\u0002\u0519\u0517\u0003\u0002\u0002\u0002\u051a\u0524\u0005l7\u0002",
    "\u051b\u0524\u0005n8\u0002\u051c\u0524\u0005|?\u0002\u051d\u0524\u0005",
    "\u0154\u00ab\u0002\u051e\u0524\u0005\u0156\u00ac\u0002\u051f\u0524\u0005",
    "\u0158\u00ad\u0002\u0520\u0524\u0005\u0084C\u0002\u0521\u0524\u0005",
    "<\u001f\u0002\u0522\u0524\u0005p9\u0002\u0523\u051a\u0003\u0002\u0002",
    "\u0002\u0523\u051b\u0003\u0002\u0002\u0002\u0523\u051c\u0003\u0002\u0002",
    "\u0002\u0523\u051d\u0003\u0002\u0002\u0002\u0523\u051e\u0003\u0002\u0002",
    "\u0002\u0523\u051f\u0003\u0002\u0002\u0002\u0523\u0520\u0003\u0002\u0002",
    "\u0002\u0523\u0521\u0003\u0002\u0002\u0002\u0523\u0522\u0003\u0002\u0002",
    "\u0002\u0524i\u0003\u0002\u0002\u0002\u0525\u0526\u0007\u0016\u0002",
    "\u0002\u0526\u0532\u0005\u00dep\u0002\u0527\u0528\u0007\u0016\u0002",
    "\u0002\u0528\u0532\u0005<\u001f\u0002\u0529\u052a\u0007\u0019\u0002",
    "\u0002\u052a\u052b\u0005\u0142\u00a2\u0002\u052b\u052c\u0007\u001a\u0002",
    "\u0002\u052c\u0532\u0003\u0002\u0002\u0002\u052d\u052e\u0007\u0019\u0002",
    "\u0002\u052e\u052f\u0005\\/\u0002\u052f\u0530\u0007\u001a\u0002\u0002",
    "\u0530\u0532\u0003\u0002\u0002\u0002\u0531\u0525\u0003\u0002\u0002\u0002",
    "\u0531\u0527\u0003\u0002\u0002\u0002\u0531\u0529\u0003\u0002\u0002\u0002",
    "\u0531\u052d\u0003\u0002\u0002\u0002\u0532k\u0003\u0002\u0002\u0002",
    "\u0533\u0534\u0007F\u0002\u0002\u0534\u0536\u0007\u0017\u0002\u0002",
    "\u0535\u0537\u0005\\/\u0002\u0536\u0535\u0003\u0002\u0002\u0002\u0536",
    "\u0537\u0003\u0002\u0002\u0002\u0537\u0538\u0003\u0002\u0002\u0002\u0538",
    "\u0539\u0007\u0018\u0002\u0002\u0539m\u0003\u0002\u0002\u0002\u053a",
    "\u053b\u0007E\u0002\u0002\u053b\u053f\u0007\u0017\u0002\u0002\u053c",
    "\u053d\u0007t\u0002\u0002\u053d\u053e\u00070\u0002\u0002\u053e\u0540",
    "\u0005\\/\u0002\u053f\u053c\u0003\u0002\u0002\u0002\u053f\u0540\u0003",
    "\u0002\u0002\u0002\u0540\u0541\u0003\u0002\u0002\u0002\u0541\u0542\u0007",
    "\u0018\u0002\u0002\u0542o\u0003\u0002\u0002\u0002\u0543\u0544\u0005",
    "\u00caf\u0002\u0544\u0545\u0007\u0017\u0002\u0002\u0545\u0548\u0005",
    "r:\u0002\u0546\u0547\u0007\u0014\u0002\u0002\u0547\u0549\u0005t;\u0002",
    "\u0548\u0546\u0003\u0002\u0002\u0002\u0548\u0549\u0003\u0002\u0002\u0002",
    "\u0549\u054a\u0003\u0002\u0002\u0002\u054a\u054b\u0007\u0018\u0002\u0002",
    "\u054b\u0554\u0003\u0002\u0002\u0002\u054c\u054d\u0005\u00caf\u0002",
    "\u054d\u054f\u0007\u0017\u0002\u0002\u054e\u0550\u0005t;\u0002\u054f",
    "\u054e\u0003\u0002\u0002\u0002\u054f\u0550\u0003\u0002\u0002\u0002\u0550",
    "\u0551\u0003\u0002\u0002\u0002\u0551\u0552\u0007\u0018\u0002\u0002\u0552",
    "\u0554\u0003\u0002\u0002\u0002\u0553\u0543\u0003\u0002\u0002\u0002\u0553",
    "\u054c\u0003\u0002\u0002\u0002\u0554q\u0003\u0002\u0002\u0002\u0555",
    "\u0556\u0007t\u0002\u0002\u0556\u0557\u0005\u016e\u00b8\u0002\u0557",
    "\u0558\u0005\\/\u0002\u0558\u0559\u0006:\u0019\u0003\u0559s\u0003\u0002",
    "\u0002\u0002\u055a\u055b\b;\u0001\u0002\u055b\u055c\u0005\\/\u0002\u055c",
    "\u055d\u0006;\u001a\u0003\u055d\u0560\u0003\u0002\u0002\u0002\u055e",
    "\u0560\u0005v<\u0002\u055f\u055a\u0003\u0002\u0002\u0002\u055f\u055e",
    "\u0003\u0002\u0002\u0002\u0560\u0566\u0003\u0002\u0002\u0002\u0561\u0562",
    "\f\u0003\u0002\u0002\u0562\u0563\u0007\u0014\u0002\u0002\u0563\u0565",
    "\u0005v<\u0002\u0564\u0561\u0003\u0002\u0002\u0002\u0565\u0568\u0003",
    "\u0002\u0002\u0002\u0566\u0564\u0003\u0002\u0002\u0002\u0566\u0567\u0003",
    "\u0002\u0002\u0002\u0567u\u0003\u0002\u0002\u0002\u0568\u0566\u0003",
    "\u0002\u0002\u0002\u0569\u056d\u0005\u00e0q\u0002\u056a\u056b\u0005",
    "\u016e\u00b8\u0002\u056b\u056c\u0005\\/\u0002\u056c\u056e\u0003\u0002",
    "\u0002\u0002\u056d\u056a\u0003\u0002\u0002\u0002\u056d\u056e\u0003\u0002",
    "\u0002\u0002\u056ew\u0003\u0002\u0002\u0002\u056f\u0570\u0007\u00a9",
    "\u0002\u0002\u0570\u0571\u0005\\/\u0002\u0571\u0572\u0007\u00a1\u0002",
    "\u0002\u0572\u0574\u0005\\/\u0002\u0573\u0575\u0005\u0080A\u0002\u0574",
    "\u0573\u0003\u0002\u0002\u0002\u0574\u0575\u0003\u0002\u0002\u0002\u0575",
    "y\u0003\u0002\u0002\u0002\u0576\u0579\u0007p\u0002\u0002\u0577\u0578",
    "\u0007\u00a5\u0002\u0002\u0578\u057a\u0005\u00e0q\u0002\u0579\u0577",
    "\u0003\u0002\u0002\u0002\u0579\u057a\u0003\u0002\u0002\u0002\u057a\u057b",
    "\u0003\u0002\u0002\u0002\u057b\u057c\u0007\u00a7\u0002\u0002\u057c\u057d",
    "\u0005\\/\u0002\u057d{\u0003\u0002\u0002\u0002\u057e\u057f\u0007o\u0002",
    "\u0002\u057f\u0581\u0007\u0088\u0002\u0002\u0580\u0582\u0005\u00caf",
    "\u0002\u0581\u0580\u0003\u0002\u0002\u0002\u0581\u0582\u0003\u0002\u0002",
    "\u0002\u0582\u0583\u0003\u0002\u0002\u0002\u0583\u0584\u0007\u00a7\u0002",
    "\u0002\u0584\u0587\u0005\\/\u0002\u0585\u0586\u0007y\u0002\u0002\u0586",
    "\u0588\u0005\u015e\u00b0\u0002\u0587\u0585\u0003\u0002\u0002\u0002\u0587",
    "\u0588\u0003\u0002\u0002\u0002\u0588\u05a5\u0003\u0002\u0002\u0002\u0589",
    "\u0590\u0007o\u0002\u0002\u058a\u0591\u0007O\u0002\u0002\u058b\u058c",
    "\u0007\u0094\u0002\u0002\u058c\u058d\u0005\\/\u0002\u058d\u058e\u0007",
    "\u00a1\u0002\u0002\u058e\u058f\u0005\\/\u0002\u058f\u0591\u0003\u0002",
    "\u0002\u0002\u0590\u058a\u0003\u0002\u0002\u0002\u0590\u058b\u0003\u0002",
    "\u0002\u0002\u0591\u0592\u0003\u0002\u0002\u0002\u0592\u0594\u0007\u0017",
    "\u0002\u0002\u0593\u0595\u0005\u00caf\u0002\u0594\u0593\u0003\u0002",
    "\u0002\u0002\u0594\u0595\u0003\u0002\u0002\u0002\u0595\u0596\u0003\u0002",
    "\u0002\u0002\u0596\u0599\u0007\u0018\u0002\u0002\u0597\u0598\u0007\u00a7",
    "\u0002\u0002\u0598\u059a\u0005\\/\u0002\u0599\u0597\u0003\u0002\u0002",
    "\u0002\u0599\u059a\u0003\u0002\u0002\u0002\u059a\u059d\u0003\u0002\u0002",
    "\u0002\u059b\u059c\u0007y\u0002\u0002\u059c\u059e\u0005\u015e\u00b0",
    "\u0002\u059d\u059b\u0003\u0002\u0002\u0002\u059d\u059e\u0003\u0002\u0002",
    "\u0002\u059e\u05a2\u0003\u0002\u0002\u0002\u059f\u05a0\u0007\u008b\u0002",
    "\u0002\u05a0\u05a1\u0007Z\u0002\u0002\u05a1\u05a3\u0005\u015a\u00ae",
    "\u0002\u05a2\u059f\u0003\u0002\u0002\u0002\u05a2\u05a3\u0003\u0002\u0002",
    "\u0002\u05a3\u05a5\u0003\u0002\u0002\u0002\u05a4\u057e\u0003\u0002\u0002",
    "\u0002\u05a4\u0589\u0003\u0002\u0002\u0002\u05a5}\u0003\u0002\u0002",
    "\u0002\u05a6\u05a7\u0007o\u0002\u0002\u05a7\u05a9\u0007\u0088\u0002",
    "\u0002\u05a8\u05aa\u0005\u00caf\u0002\u05a9\u05a8\u0003\u0002\u0002",
    "\u0002\u05a9\u05aa\u0003\u0002\u0002\u0002\u05aa\u05ab\u0003\u0002\u0002",
    "\u0002\u05ab\u05ac\u0007\u00a7\u0002\u0002\u05ac\u05af\u0005\\/\u0002",
    "\u05ad\u05ae\u0007y\u0002\u0002\u05ae\u05b0\u0005\u015e\u00b0\u0002",
    "\u05af\u05ad\u0003\u0002\u0002\u0002\u05af\u05b0\u0003\u0002\u0002\u0002",
    "\u05b0\u05b1\u0003\u0002\u0002\u0002\u05b1\u05b2\u0005\u0080A\u0002",
    "\u05b2\u05d0\u0003\u0002\u0002\u0002\u05b3\u05ba\u0007o\u0002\u0002",
    "\u05b4\u05bb\u0007O\u0002\u0002\u05b5\u05b6\u0007\u0094\u0002\u0002",
    "\u05b6\u05b7\u0005\\/\u0002\u05b7\u05b8\u0007\u00a1\u0002\u0002\u05b8",
    "\u05b9\u0005\\/\u0002\u05b9\u05bb\u0003\u0002\u0002\u0002\u05ba\u05b4",
    "\u0003\u0002\u0002\u0002\u05ba\u05b5\u0003\u0002\u0002\u0002\u05bb\u05bc",
    "\u0003\u0002\u0002\u0002\u05bc\u05be\u0007\u0017\u0002\u0002\u05bd\u05bf",
    "\u0005\u00caf\u0002\u05be\u05bd\u0003\u0002\u0002\u0002\u05be\u05bf",
    "\u0003\u0002\u0002\u0002\u05bf\u05c0\u0003\u0002\u0002\u0002\u05c0\u05c3",
    "\u0007\u0018\u0002\u0002\u05c1\u05c2\u0007\u00a7\u0002\u0002\u05c2\u05c4",
    "\u0005\\/\u0002\u05c3\u05c1\u0003\u0002\u0002\u0002\u05c3\u05c4\u0003",
    "\u0002\u0002\u0002\u05c4\u05c7\u0003\u0002\u0002\u0002\u05c5\u05c6\u0007",
    "y\u0002\u0002\u05c6\u05c8\u0005\u015e\u00b0\u0002\u05c7\u05c5\u0003",
    "\u0002\u0002\u0002\u05c7\u05c8\u0003\u0002\u0002\u0002\u05c8\u05cc\u0003",
    "\u0002\u0002\u0002\u05c9\u05ca\u0007\u008b\u0002\u0002\u05ca\u05cb\u0007",
    "Z\u0002\u0002\u05cb\u05cd\u0005\u015a\u00ae\u0002\u05cc\u05c9\u0003",
    "\u0002\u0002\u0002\u05cc\u05cd\u0003\u0002\u0002\u0002\u05cd\u05ce\u0003",
    "\u0002\u0002\u0002\u05ce\u05d0\u0005\u0080A\u0002\u05cf\u05a6\u0003",
    "\u0002\u0002\u0002\u05cf\u05b3\u0003\u0002\u0002\u0002\u05d0\u007f\u0003",
    "\u0002\u0002\u0002\u05d1\u05d2\u0007\u009e\u0002\u0002\u05d2\u05d3\u0007",
    "\u00a5\u0002\u0002\u05d3\u05d4\u0005\u00e0q\u0002\u05d4\u05d5\u0007",
    "\u0012\u0002\u0002\u05d5\u05d6\u0005\u0092J\u0002\u05d6\u05d7\u0005",
    "\u0116\u008c\u0002\u05d7\u05d8\u0005\u0094K\u0002\u05d8\u0081\u0003",
    "\u0002\u0002\u0002\u05d9\u05da\u0007\u008f\u0002\u0002\u05da\u05db\u0007",
    "O\u0002\u0002\u05db\u05dc\u0007t\u0002\u0002\u05dc\u05dd\u0005\\/\u0002",
    "\u05dd\u05de\u0005\u0080A\u0002\u05de\u0083\u0003\u0002\u0002\u0002",
    "\u05df\u05e1\u0007\u0098\u0002\u0002\u05e0\u05e2\u0007d\u0002\u0002",
    "\u05e1\u05e0\u0003\u0002\u0002\u0002\u05e1\u05e2\u0003\u0002\u0002\u0002",
    "\u05e2\u05e3\u0003\u0002\u0002\u0002\u05e3\u05e4\u0007\u0017\u0002\u0002",
    "\u05e4\u05ea\u0005d3\u0002\u05e5\u05e6\u0007\u0014\u0002\u0002\u05e6",
    "\u05e7\u0005\u0166\u00b4\u0002\u05e7\u05e8\u00070\u0002\u0002\u05e8",
    "\u05e9\u0005\u0152\u00aa\u0002\u05e9\u05eb\u0003\u0002\u0002\u0002\u05ea",
    "\u05e5\u0003\u0002\u0002\u0002\u05ea\u05eb\u0003\u0002\u0002\u0002\u05eb",
    "\u05ec\u0003\u0002\u0002\u0002\u05ec\u05ed\u0007\u0018\u0002\u0002\u05ed",
    "\u0085\u0003\u0002\u0002\u0002\u05ee\u05ef\u0005\u0146\u00a4\u0002\u05ef",
    "\u05f0\u0005\u016e\u00b8\u0002\u05f0\u05f1\u0005\\/\u0002\u05f1\u0087",
    "\u0003\u0002\u0002\u0002\u05f2\u05f3\u0006E\u001c\u0003\u05f3\u05f4",
    "\u0007\u0016\u0002\u0002\u05f4\u05fb\u0005\u00e0q\u0002\u05f5\u05f6",
    "\u0006E\u001d\u0003\u05f6\u05f7\u0007\u0019\u0002\u0002\u05f7\u05f8",
    "\u0005\\/\u0002\u05f8\u05f9\u0007\u001a\u0002\u0002\u05f9\u05fb\u0003",
    "\u0002\u0002\u0002\u05fa\u05f2\u0003\u0002\u0002\u0002\u05fa\u05f5\u0003",
    "\u0002\u0002\u0002\u05fb\u0089\u0003\u0002\u0002\u0002\u05fc\u05fd\u0005",
    "\u0108\u0085\u0002\u05fd\u05fe\u0005\u016e\u00b8\u0002\u05fe\u05ff\u0005",
    "\\/\u0002\u05ff\u008b\u0003\u0002\u0002\u0002\u0600\u0602\u0007\u0007",
    "\u0002\u0002\u0601\u0600\u0003\u0002\u0002\u0002\u0602\u0605\u0003\u0002",
    "\u0002\u0002\u0603\u0601\u0003\u0002\u0002\u0002\u0603\u0604\u0003\u0002",
    "\u0002\u0002\u0604\u008d\u0003\u0002\u0002\u0002\u0605\u0603\u0003\u0002",
    "\u0002\u0002\u0606\u0608\u0007\u0007\u0002\u0002\u0607\u0606\u0003\u0002",
    "\u0002\u0002\u0608\u0609\u0003\u0002\u0002\u0002\u0609\u0607\u0003\u0002",
    "\u0002\u0002\u0609\u060a\u0003\u0002\u0002\u0002\u060a\u008f\u0003\u0002",
    "\u0002\u0002\u060b\u060d\t\u0006\u0002\u0002\u060c\u060b\u0003\u0002",
    "\u0002\u0002\u060d\u0610\u0003\u0002\u0002\u0002\u060e\u060c\u0003\u0002",
    "\u0002\u0002\u060e\u060f\u0003\u0002\u0002\u0002\u060f\u0091\u0003\u0002",
    "\u0002\u0002\u0610\u060e\u0003\u0002\u0002\u0002\u0611\u0613\u0007\u0007",
    "\u0002\u0002\u0612\u0611\u0003\u0002\u0002\u0002\u0613\u0614\u0003\u0002",
    "\u0002\u0002\u0614\u0612\u0003\u0002\u0002\u0002\u0614\u0615\u0003\u0002",
    "\u0002\u0002\u0615\u0616\u0003\u0002\u0002\u0002\u0616\u0617\u0007\u0003",
    "\u0002\u0002\u0617\u0093\u0003\u0002\u0002\u0002\u0618\u061a\u0007\u0007",
    "\u0002\u0002\u0619\u0618\u0003\u0002\u0002\u0002\u061a\u061d\u0003\u0002",
    "\u0002\u0002\u061b\u0619\u0003\u0002\u0002\u0002\u061b\u061c\u0003\u0002",
    "\u0002\u0002\u061c\u061e\u0003\u0002\u0002\u0002\u061d\u061b\u0003\u0002",
    "\u0002\u0002\u061e\u061f\u0007\u0004\u0002\u0002\u061f\u0095\u0003\u0002",
    "\u0002\u0002\u0620\u0621\u0005\u00f2z\u0002\u0621\u0097\u0003\u0002",
    "\u0002\u0002\u0622\u0623\u0007\u0083\u0002\u0002\u0623\u0099\u0003\u0002",
    "\u0002\u0002\u0624\u0626\t\u0007\u0002\u0002\u0625\u0627\u000b\u0002",
    "\u0002\u0002\u0626\u0625\u0003\u0002\u0002\u0002\u0627\u0628\u0003\u0002",
    "\u0002\u0002\u0628\u0629\u0003\u0002\u0002\u0002\u0628\u0626\u0003\u0002",
    "\u0002\u0002\u0629\u009b\u0003\u0002\u0002\u0002\u062a\u062e\u0005\u00a2",
    "R\u0002\u062b\u062e\u00056\u001c\u0002\u062c\u062e\u0005\\/\u0002\u062d",
    "\u062a\u0003\u0002\u0002\u0002\u062d\u062b\u0003\u0002\u0002\u0002\u062d",
    "\u062c\u0003\u0002\u0002\u0002\u062e\u009d\u0003\u0002\u0002\u0002\u062f",
    "\u0631\u0005\u008cG\u0002\u0630\u0632\u0005\u00a0Q\u0002\u0631\u0630",
    "\u0003\u0002\u0002\u0002\u0631\u0632\u0003\u0002\u0002\u0002\u0632\u0633",
    "\u0003\u0002\u0002\u0002\u0633\u0634\u0005\u008cG\u0002\u0634\u0635",
    "\u0007\u0002\u0002\u0003\u0635\u009f\u0003\u0002\u0002\u0002\u0636\u063c",
    "\u0005\u00a2R\u0002\u0637\u0638\u0005\u008eH\u0002\u0638\u0639\u0005",
    "\u00a2R\u0002\u0639\u063b\u0003\u0002\u0002\u0002\u063a\u0637\u0003",
    "\u0002\u0002\u0002\u063b\u063e\u0003\u0002\u0002\u0002\u063c\u063a\u0003",
    "\u0002\u0002\u0002\u063c\u063d\u0003\u0002\u0002\u0002\u063d\u00a1\u0003",
    "\u0002\u0002\u0002\u063e\u063c\u0003\u0002\u0002\u0002\u063f\u0640\u0005",
    "\u009aN\u0002\u0640\u0641\u0005\u008eH\u0002\u0641\u0643\u0003\u0002",
    "\u0002\u0002\u0642\u063f\u0003\u0002\u0002\u0002\u0643\u0646\u0003\u0002",
    "\u0002\u0002\u0644\u0642\u0003\u0002\u0002\u0002\u0644\u0645\u0003\u0002",
    "\u0002\u0002\u0645\u064c\u0003\u0002\u0002\u0002\u0646\u0644\u0003\u0002",
    "\u0002\u0002\u0647\u0648\u0005\u00a4S\u0002\u0648\u0649\u0005\u008e",
    "H\u0002\u0649\u064b\u0003\u0002\u0002\u0002\u064a\u0647\u0003\u0002",
    "\u0002\u0002\u064b\u064e\u0003\u0002\u0002\u0002\u064c\u064a\u0003\u0002",
    "\u0002\u0002\u064c\u064d\u0003\u0002\u0002\u0002\u064d\u0655\u0003\u0002",
    "\u0002\u0002\u064e\u064c\u0003\u0002\u0002\u0002\u064f\u0656\u0005\n",
    "\u0006\u0002\u0650\u0656\u0005\u00ceh\u0002\u0651\u0656\u0005\u00ae",
    "X\u0002\u0652\u0656\u0005\u00b0Y\u0002\u0653\u0656\u0005\u00d0i\u0002",
    "\u0654\u0656\u0005\u010c\u0087\u0002\u0655\u064f\u0003\u0002\u0002\u0002",
    "\u0655\u0650\u0003\u0002\u0002\u0002\u0655\u0651\u0003\u0002\u0002\u0002",
    "\u0655\u0652\u0003\u0002\u0002\u0002\u0655\u0653\u0003\u0002\u0002\u0002",
    "\u0655\u0654\u0003\u0002\u0002\u0002\u0656\u00a3\u0003\u0002\u0002\u0002",
    "\u0657\u0666\u0005\u00a6T\u0002\u0658\u0662\u0007\u0017\u0002\u0002",
    "\u0659\u0663\u0005\u00acW\u0002\u065a\u065f\u0005\u00a8U\u0002\u065b",
    "\u065c\u0007\u0014\u0002\u0002\u065c\u065e\u0005\u00a8U\u0002\u065d",
    "\u065b\u0003\u0002\u0002\u0002\u065e\u0661\u0003\u0002\u0002\u0002\u065f",
    "\u065d\u0003\u0002\u0002\u0002\u065f\u0660\u0003\u0002\u0002\u0002\u0660",
    "\u0663\u0003\u0002\u0002\u0002\u0661\u065f\u0003\u0002\u0002\u0002\u0662",
    "\u0659\u0003\u0002\u0002\u0002\u0662\u065a\u0003\u0002\u0002\u0002\u0663",
    "\u0664\u0003\u0002\u0002\u0002\u0664\u0665\u0007\u0018\u0002\u0002\u0665",
    "\u0667\u0003\u0002\u0002\u0002\u0666\u0658\u0003\u0002\u0002\u0002\u0666",
    "\u0667\u0003\u0002\u0002\u0002\u0667\u00a5\u0003\u0002\u0002\u0002\u0668",
    "\u0669\u0007\u00b3\u0002\u0002\u0669\u00a7\u0003\u0002\u0002\u0002\u066a",
    "\u066b\u0005\u00aaV\u0002\u066b\u066c\u00070\u0002\u0002\u066c\u066d",
    "\u0005\u00acW\u0002\u066d\u00a9\u0003\u0002\u0002\u0002\u066e\u066f",
    "\t\b\u0002\u0002\u066f\u00ab\u0003\u0002\u0002\u0002\u0670\u0673\u0005",
    "\u012a\u0096\u0002\u0671\u0673\u0005\u00c4c\u0002\u0672\u0670\u0003",
    "\u0002\u0002\u0002\u0672\u0671\u0003\u0002\u0002\u0002\u0673\u00ad\u0003",
    "\u0002\u0002\u0002\u0674\u0675\u0005$\u0013\u0002\u0675\u00af\u0003",
    "\u0002\u0002\u0002\u0676\u0679\u0005\u0002\u0002\u0002\u0677\u0679\u0005",
    "\u0004\u0003\u0002\u0678\u0676\u0003\u0002\u0002\u0002\u0678\u0677\u0003",
    "\u0002\u0002\u0002\u0679\u00b1\u0003\u0002\u0002\u0002\u067a\u0680\u0005",
    "\u0006\u0004\u0002\u067b\u067c\u0005\u008eH\u0002\u067c\u067d\u0005",
    "\u0006\u0004\u0002\u067d\u067f\u0003\u0002\u0002\u0002\u067e\u067b\u0003",
    "\u0002\u0002\u0002\u067f\u0682\u0003\u0002\u0002\u0002\u0680\u067e\u0003",
    "\u0002\u0002\u0002\u0680\u0681\u0003\u0002\u0002\u0002\u0681\u00b3\u0003",
    "\u0002\u0002\u0002\u0682\u0680\u0003\u0002\u0002\u0002\u0683\u0689\u0005",
    "\b\u0005\u0002\u0684\u0685\u0005\u008eH\u0002\u0685\u0686\u0005\b\u0005",
    "\u0002\u0686\u0688\u0003\u0002\u0002\u0002\u0687\u0684\u0003\u0002\u0002",
    "\u0002\u0688\u068b\u0003\u0002\u0002\u0002\u0689\u0687\u0003\u0002\u0002",
    "\u0002\u0689\u068a\u0003\u0002\u0002\u0002\u068a\u00b5\u0003\u0002\u0002",
    "\u0002\u068b\u0689\u0003\u0002\u0002\u0002\u068c\u0691\u0005\u00e6t",
    "\u0002\u068d\u068e\u0007\u0014\u0002\u0002\u068e\u0690\u0005\u00e6t",
    "\u0002\u068f\u068d\u0003\u0002\u0002\u0002\u0690\u0693\u0003\u0002\u0002",
    "\u0002\u0691\u068f\u0003\u0002\u0002\u0002\u0691\u0692\u0003\u0002\u0002",
    "\u0002\u0692\u00b7\u0003\u0002\u0002\u0002\u0693\u0691\u0003\u0002\u0002",
    "\u0002\u0694\u0695\u0007x\u0002\u0002\u0695\u069f\u0005\u00ba^\u0002",
    "\u0696\u0697\u0007x\u0002\u0002\u0697\u069f\u0005\u00bc_\u0002\u0698",
    "\u0699\u0007x\u0002\u0002\u0699\u069f\u0005\u00c0a\u0002\u069a\u069b",
    "\u0007}\u0002\u0002\u069b\u069f\u0007\u00b4\u0002\u0002\u069c\u069d",
    "\u0007}\u0002\u0002\u069d\u069f\u0005\\/\u0002\u069e\u0694\u0003\u0002",
    "\u0002\u0002\u069e\u0696\u0003\u0002\u0002\u0002\u069e\u0698\u0003\u0002",
    "\u0002\u0002\u069e\u069a\u0003\u0002\u0002\u0002\u069e\u069c\u0003\u0002",
    "\u0002\u0002\u069f\u00b9\u0003\u0002\u0002\u0002\u06a0\u06a2\u0007\u0081",
    "\u0002\u0002\u06a1\u06a0\u0003\u0002\u0002\u0002\u06a1\u06a2\u0003\u0002",
    "\u0002\u0002\u06a2\u06a3\u0003\u0002\u0002\u0002\u06a3\u06a5\u0007\u0019",
    "\u0002\u0002\u06a4\u06a6\u0005\u00be`\u0002\u06a5\u06a4\u0003\u0002",
    "\u0002\u0002\u06a5\u06a6\u0003\u0002\u0002\u0002\u06a6\u06a7\u0003\u0002",
    "\u0002\u0002\u06a7\u06a8\u0007\u001a\u0002\u0002\u06a8\u00bb\u0003\u0002",
    "\u0002\u0002\u06a9\u06ab\u0007\u0081\u0002\u0002\u06aa\u06a9\u0003\u0002",
    "\u0002\u0002\u06aa\u06ab\u0003\u0002\u0002\u0002\u06ab\u06ac\u0003\u0002",
    "\u0002\u0002\u06ac\u06ae\u0007,\u0002\u0002\u06ad\u06af\u0005\u00be",
    "`\u0002\u06ae\u06ad\u0003\u0002\u0002\u0002\u06ae\u06af\u0003\u0002",
    "\u0002\u0002\u06af\u06b0\u0003\u0002\u0002\u0002\u06b0\u06b1\u0007*",
    "\u0002\u0002\u06b1\u00bd\u0003\u0002\u0002\u0002\u06b2\u06b7\u0005\\",
    "/\u0002\u06b3\u06b4\u0007\u0014\u0002\u0002\u06b4\u06b6\u0005\\/\u0002",
    "\u06b5\u06b3\u0003\u0002\u0002\u0002\u06b6\u06b9\u0003\u0002\u0002\u0002",
    "\u06b7\u06b5\u0003\u0002\u0002\u0002\u06b7\u06b8\u0003\u0002\u0002\u0002",
    "\u06b8\u00bf\u0003\u0002\u0002\u0002\u06b9\u06b7\u0003\u0002\u0002\u0002",
    "\u06ba\u06bb\u0007\u0019\u0002\u0002\u06bb\u06bc\u0005\\/\u0002\u06bc",
    "\u06bd\u0007\u0015\u0002\u0002\u06bd\u06be\u0005\\/\u0002\u06be\u06bf",
    "\u0007\u001a\u0002\u0002\u06bf\u00c1\u0003\u0002\u0002\u0002\u06c0\u06c1",
    "\bb\u0001\u0002\u06c1\u06d2\u0005\u00c4c\u0002\u06c2\u06c3\u0007K\u0002",
    "\u0002\u06c3\u06c4\u0007,\u0002\u0002\u06c4\u06c5\u0005\u00c2b\u0002",
    "\u06c5\u06c6\u0007*\u0002\u0002\u06c6\u06d2\u0003\u0002\u0002\u0002",
    "\u06c7\u06c8\u0007J\u0002\u0002\u06c8\u06c9\u0007,\u0002\u0002\u06c9",
    "\u06ca\u0005\u00c2b\u0002\u06ca\u06cb\u0007*\u0002\u0002\u06cb\u06d2",
    "\u0003\u0002\u0002\u0002\u06cc\u06cd\u0007M\u0002\u0002\u06cd\u06ce",
    "\u0007,\u0002\u0002\u06ce\u06cf\u0005\u00c2b\u0002\u06cf\u06d0\u0007",
    "*\u0002\u0002\u06d0\u06d2\u0003\u0002\u0002\u0002\u06d1\u06c0\u0003",
    "\u0002\u0002\u0002\u06d1\u06c2\u0003\u0002\u0002\u0002\u06d1\u06c7\u0003",
    "\u0002\u0002\u0002\u06d1\u06cc\u0003\u0002\u0002\u0002\u06d2\u06dc\u0003",
    "\u0002\u0002\u0002\u06d3\u06d4\f\b\u0002\u0002\u06d4\u06db\u0007.\u0002",
    "\u0002\u06d5\u06d6\f\u0007\u0002\u0002\u06d6\u06d7\u0007\u0019\u0002",
    "\u0002\u06d7\u06db\u0007\u001a\u0002\u0002\u06d8\u06d9\f\u0006\u0002",
    "\u0002\u06d9\u06db\u0007/\u0002\u0002\u06da\u06d3\u0003\u0002\u0002",
    "\u0002\u06da\u06d5\u0003\u0002\u0002\u0002\u06da\u06d8\u0003\u0002\u0002",
    "\u0002\u06db\u06de\u0003\u0002\u0002\u0002\u06dc\u06da\u0003\u0002\u0002",
    "\u0002\u06dc\u06dd\u0003\u0002\u0002\u0002\u06dd\u00c3\u0003\u0002\u0002",
    "\u0002\u06de\u06dc\u0003\u0002\u0002\u0002\u06df\u06e2\u0005\u00c6d",
    "\u0002\u06e0\u06e2\u0005\u00c8e\u0002\u06e1\u06df\u0003\u0002\u0002",
    "\u0002\u06e1\u06e0\u0003\u0002\u0002\u0002\u06e2\u00c5\u0003\u0002\u0002",
    "\u0002\u06e3\u06f6\u00078\u0002\u0002\u06e4\u06f6\u00079\u0002\u0002",
    "\u06e5\u06f6\u0007:\u0002\u0002\u06e6\u06f6\u0007;\u0002\u0002\u06e7",
    "\u06f6\u0007G\u0002\u0002\u06e8\u06f6\u0007<\u0002\u0002\u06e9\u06f6",
    "\u0007=\u0002\u0002\u06ea\u06f6\u0007E\u0002\u0002\u06eb\u06f6\u0007",
    ">\u0002\u0002\u06ec\u06f6\u0007@\u0002\u0002\u06ed\u06f6\u0007?\u0002",
    "\u0002\u06ee\u06f6\u0007A\u0002\u0002\u06ef\u06f6\u0007B\u0002\u0002",
    "\u06f0\u06f6\u0007D\u0002\u0002\u06f1\u06f6\u0007F\u0002\u0002\u06f2",
    "\u06f6\u0007H\u0002\u0002\u06f3\u06f6\u0007I\u0002\u0002\u06f4\u06f6",
    "\u0007L\u0002\u0002\u06f5\u06e3\u0003\u0002\u0002\u0002\u06f5\u06e4",
    "\u0003\u0002\u0002\u0002\u06f5\u06e5\u0003\u0002\u0002\u0002\u06f5\u06e6",
    "\u0003\u0002\u0002\u0002\u06f5\u06e7\u0003\u0002\u0002\u0002\u06f5\u06e8",
    "\u0003\u0002\u0002\u0002\u06f5\u06e9\u0003\u0002\u0002\u0002\u06f5\u06ea",
    "\u0003\u0002\u0002\u0002\u06f5\u06eb\u0003\u0002\u0002\u0002\u06f5\u06ec",
    "\u0003\u0002\u0002\u0002\u06f5\u06ed\u0003\u0002\u0002\u0002\u06f5\u06ee",
    "\u0003\u0002\u0002\u0002\u06f5\u06ef\u0003\u0002\u0002\u0002\u06f5\u06f0",
    "\u0003\u0002\u0002\u0002\u06f5\u06f1\u0003\u0002\u0002\u0002\u06f5\u06f2",
    "\u0003\u0002\u0002\u0002\u06f5\u06f3\u0003\u0002\u0002\u0002\u06f5\u06f4",
    "\u0003\u0002\u0002\u0002\u06f6\u00c7\u0003\u0002\u0002\u0002\u06f7\u06f8",
    "\u0007\u00af\u0002\u0002\u06f8\u00c9\u0003\u0002\u0002\u0002\u06f9\u06fb",
    "\u0007\u0081\u0002\u0002\u06fa\u06f9\u0003\u0002\u0002\u0002\u06fa\u06fb",
    "\u0003\u0002\u0002\u0002\u06fb\u06fc\u0003\u0002\u0002\u0002\u06fc\u06fd",
    "\u0005\u00c8e\u0002\u06fd\u00cb\u0003\u0002\u0002\u0002\u06fe\u06ff",
    "\u0007D\u0002\u0002\u06ff\u00cd\u0003\u0002\u0002\u0002\u0700\u0704",
    "\u0005\u0012\n\u0002\u0701\u0704\u0005\"\u0012\u0002\u0702\u0704\u0005",
    "\u0014\u000b\u0002\u0703\u0700\u0003\u0002\u0002\u0002\u0703\u0701\u0003",
    "\u0002\u0002\u0002\u0703\u0702\u0003\u0002\u0002\u0002\u0704\u00cf\u0003",
    "\u0002\u0002\u0002\u0705\u0708\u0005\u000e\b\u0002\u0706\u0708\u0005",
    "\u0010\t\u0002\u0707\u0705\u0003\u0002\u0002\u0002\u0707\u0706\u0003",
    "\u0002\u0002\u0002\u0708\u00d1\u0003\u0002\u0002\u0002\u0709\u070e\u0005",
    "\u00e4s\u0002\u070a\u070b\u0007\u0014\u0002\u0002\u070b\u070d\u0005",
    "\u00e4s\u0002\u070c\u070a\u0003\u0002\u0002\u0002\u070d\u0710\u0003",
    "\u0002\u0002\u0002\u070e\u070c\u0003\u0002\u0002\u0002\u070e\u070f\u0003",
    "\u0002\u0002\u0002\u070f\u00d3\u0003\u0002\u0002\u0002\u0710\u070e\u0003",
    "\u0002\u0002\u0002\u0711\u0714\u0005\u00e0q\u0002\u0712\u0714\u0005",
    "\u00e4s\u0002\u0713\u0711\u0003\u0002\u0002\u0002\u0713\u0712\u0003",
    "\u0002\u0002\u0002\u0714\u00d5\u0003\u0002\u0002\u0002\u0715\u0718\u0005",
    "\u00dco\u0002\u0716\u0718\u0005\u0162\u00b2\u0002\u0717\u0715\u0003",
    "\u0002\u0002\u0002\u0717\u0716\u0003\u0002\u0002\u0002\u0718\u00d7\u0003",
    "\u0002\u0002\u0002\u0719\u071a\u0006m!\u0003\u071a\u071b\u0007$\u0002",
    "\u0002\u071b\u071c\u0005\u00dan\u0002\u071c\u00d9\u0003\u0002\u0002",
    "\u0002\u071d\u071e\u0006n\"\u0003\u071e\u071f\u0005\u00d6l\u0002\u071f",
    "\u00db\u0003\u0002\u0002\u0002\u0720\u0724\u0005\u00e0q\u0002\u0721",
    "\u0724\u0005\u00e4s\u0002\u0722\u0724\u0005\u00e6t\u0002\u0723\u0720",
    "\u0003\u0002\u0002\u0002\u0723\u0721\u0003\u0002\u0002\u0002\u0723\u0722",
    "\u0003\u0002\u0002\u0002\u0724\u00dd\u0003\u0002\u0002\u0002\u0725\u0726",
    "\t\t\u0002\u0002\u0726\u00df\u0003\u0002\u0002\u0002\u0727\u0728\t\n",
    "\u0002\u0002\u0728\u00e1\u0003\u0002\u0002\u0002\u0729\u072a\t\u000b",
    "\u0002\u0002\u072a\u00e3\u0003\u0002\u0002\u0002\u072b\u072c\u0007\u00af",
    "\u0002\u0002\u072c\u00e5\u0003\u0002\u0002\u0002\u072d\u072e\u0007\u00ae",
    "\u0002\u0002\u072e\u00e7\u0003\u0002\u0002\u0002\u072f\u0734\u0005\u00ea",
    "v\u0002\u0730\u0731\u0007\u0014\u0002\u0002\u0731\u0733\u0005\u00ea",
    "v\u0002\u0732\u0730\u0003\u0002\u0002\u0002\u0733\u0736\u0003\u0002",
    "\u0002\u0002\u0734\u0732\u0003\u0002\u0002\u0002\u0734\u0735\u0003\u0002",
    "\u0002\u0002\u0735\u00e9\u0003\u0002\u0002\u0002\u0736\u0734\u0003\u0002",
    "\u0002\u0002\u0737\u073d\u0005\u00f0y\u0002\u0738\u073a\u0007\u0081",
    "\u0002\u0002\u0739\u0738\u0003\u0002\u0002\u0002\u0739\u073a\u0003\u0002",
    "\u0002\u0002\u073a\u073b\u0003\u0002\u0002\u0002\u073b\u073d\u0005\u00ec",
    "w\u0002\u073c\u0737\u0003\u0002\u0002\u0002\u073c\u0739\u0003\u0002",
    "\u0002\u0002\u073d\u00eb\u0003\u0002\u0002\u0002\u073e\u0741\u0005\u00ee",
    "x\u0002\u073f\u0741\u00054\u001b\u0002\u0740\u073e\u0003\u0002\u0002",
    "\u0002\u0740\u073f\u0003\u0002\u0002\u0002\u0741\u00ed\u0003\u0002\u0002",
    "\u0002\u0742\u0745\u0005\u00e0q\u0002\u0743\u0744\u00070\u0002\u0002",
    "\u0744\u0746\u0005\u012a\u0096\u0002\u0745\u0743\u0003\u0002\u0002\u0002",
    "\u0745\u0746\u0003\u0002\u0002\u0002\u0746\u00ef\u0003\u0002\u0002\u0002",
    "\u0747\u0748\u0005\u00ccg\u0002\u0748\u0749\u0005\u00e0q\u0002\u0749",
    "\u00f1\u0003\u0002\u0002\u0002\u074a\u074d\u0005\u00c2b\u0002\u074b",
    "\u074d\u0005\u00f4{\u0002\u074c\u074a\u0003\u0002\u0002\u0002\u074c",
    "\u074b\u0003\u0002\u0002\u0002\u074d\u00f3\u0003\u0002\u0002\u0002\u074e",
    "\u074f\b{\u0001\u0002\u074f\u0750\u0007R\u0002\u0002\u0750\u0759\u0003",
    "\u0002\u0002\u0002\u0751\u0752\f\u0004\u0002\u0002\u0752\u0753\u0007",
    "\u0019\u0002\u0002\u0753\u0758\u0007\u001a\u0002\u0002\u0754\u0755\f",
    "\u0003\u0002\u0002\u0755\u0756\u0007\u001b\u0002\u0002\u0756\u0758\u0007",
    "\u001c\u0002\u0002\u0757\u0751\u0003\u0002\u0002\u0002\u0757\u0754\u0003",
    "\u0002\u0002\u0002\u0758\u075b\u0003\u0002\u0002\u0002\u0759\u0757\u0003",
    "\u0002\u0002\u0002\u0759\u075a\u0003\u0002\u0002\u0002\u075a\u00f5\u0003",
    "\u0002\u0002\u0002\u075b\u0759\u0003\u0002\u0002\u0002\u075c\u0762\u0005",
    "\u00f8}\u0002\u075d\u075e\u0005\u008eH\u0002\u075e\u075f\u0005\u00f8",
    "}\u0002\u075f\u0761\u0003\u0002\u0002\u0002\u0760\u075d\u0003\u0002",
    "\u0002\u0002\u0761\u0764\u0003\u0002\u0002\u0002\u0762\u0760\u0003\u0002",
    "\u0002\u0002\u0762\u0763\u0003\u0002\u0002\u0002\u0763\u00f7\u0003\u0002",
    "\u0002\u0002\u0764\u0762\u0003\u0002\u0002\u0002\u0765\u0766\u0005\u009a",
    "N\u0002\u0766\u0767\u0005\u008eH\u0002\u0767\u0769\u0003\u0002\u0002",
    "\u0002\u0768\u0765\u0003\u0002\u0002\u0002\u0769\u076c\u0003\u0002\u0002",
    "\u0002\u076a\u0768\u0003\u0002\u0002\u0002\u076a\u076b\u0003\u0002\u0002",
    "\u0002\u076b\u0772\u0003\u0002\u0002\u0002\u076c\u076a\u0003\u0002\u0002",
    "\u0002\u076d\u076e\u0005\u00a4S\u0002\u076e\u076f\u0005\u008eH\u0002",
    "\u076f\u0771\u0003\u0002\u0002\u0002\u0770\u076d\u0003\u0002\u0002\u0002",
    "\u0771\u0774\u0003\u0002\u0002\u0002\u0772\u0770\u0003\u0002\u0002\u0002",
    "\u0772\u0773\u0003\u0002\u0002\u0002\u0773\u077a\u0003\u0002\u0002\u0002",
    "\u0774\u0772\u0003\u0002\u0002\u0002\u0775\u077b\u0005\u001a\u000e\u0002",
    "\u0776\u077b\u0005\u001e\u0010\u0002\u0777\u077b\u0005,\u0017\u0002",
    "\u0778\u077b\u0005*\u0016\u0002\u0779\u077b\u0005\u0018\r\u0002\u077a",
    "\u0775\u0003\u0002\u0002\u0002\u077a\u0776\u0003\u0002\u0002\u0002\u077a",
    "\u0777\u0003\u0002\u0002\u0002\u077a\u0778\u0003\u0002\u0002\u0002\u077a",
    "\u0779\u0003\u0002\u0002\u0002\u077b\u00f9\u0003\u0002\u0002\u0002\u077c",
    "\u0782\u0005\u00fc\u007f\u0002\u077d\u077e\u0005\u008eH\u0002\u077e",
    "\u077f\u0005\u00fc\u007f\u0002\u077f\u0781\u0003\u0002\u0002\u0002\u0780",
    "\u077d\u0003\u0002\u0002\u0002\u0781\u0784\u0003\u0002\u0002\u0002\u0782",
    "\u0780\u0003\u0002\u0002\u0002\u0782\u0783\u0003\u0002\u0002\u0002\u0783",
    "\u00fb\u0003\u0002\u0002\u0002\u0784\u0782\u0003\u0002\u0002\u0002\u0785",
    "\u0786\u0005\u009aN\u0002\u0786\u0787\u0005\u008eH\u0002\u0787\u0789",
    "\u0003\u0002\u0002\u0002\u0788\u0785\u0003\u0002\u0002\u0002\u0789\u078c",
    "\u0003\u0002\u0002\u0002\u078a\u0788\u0003\u0002\u0002\u0002\u078a\u078b",
    "\u0003\u0002\u0002\u0002\u078b\u0792\u0003\u0002\u0002\u0002\u078c\u078a",
    "\u0003\u0002\u0002\u0002\u078d\u078e\u0005\u00a4S\u0002\u078e\u078f",
    "\u0005\u008eH\u0002\u078f\u0791\u0003\u0002\u0002\u0002\u0790\u078d",
    "\u0003\u0002\u0002\u0002\u0791\u0794\u0003\u0002\u0002\u0002\u0792\u0790",
    "\u0003\u0002\u0002\u0002\u0792\u0793\u0003\u0002\u0002\u0002\u0793\u0798",
    "\u0003\u0002\u0002\u0002\u0794\u0792\u0003\u0002\u0002\u0002\u0795\u0799",
    "\u0005 \u0011\u0002\u0796\u0799\u0005\u001c\u000f\u0002\u0797\u0799",
    "\u0005.\u0018\u0002\u0798\u0795\u0003\u0002\u0002\u0002\u0798\u0796",
    "\u0003\u0002\u0002\u0002\u0798\u0797\u0003\u0002\u0002\u0002\u0799\u00fd",
    "\u0003\u0002\u0002\u0002\u079a\u079b\u0007\f\u0002\u0002\u079b\u07a5",
    "\u0005\u01c2\u00e2\u0002\u079c\u079d\u0007\r\u0002\u0002\u079d\u07a5",
    "\u0005\u01dc\u00ef\u0002\u079e\u079f\u0007\u000e\u0002\u0002\u079f\u07a5",
    "\u0005\u0100\u0081\u0002\u07a0\u07a1\u0007\u000f\u0002\u0002\u07a1\u07a5",
    "\u0005\u0100\u0081\u0002\u07a2\u07a3\u0007\u0010\u0002\u0002\u07a3\u07a5",
    "\u0005\u0104\u0083\u0002\u07a4\u079a\u0003\u0002\u0002\u0002\u07a4\u079c",
    "\u0003\u0002\u0002\u0002\u07a4\u079e\u0003\u0002\u0002\u0002\u07a4\u07a0",
    "\u0003\u0002\u0002\u0002\u07a4\u07a2\u0003\u0002\u0002\u0002\u07a5\u00ff",
    "\u0003\u0002\u0002\u0002\u07a6\u07a8\u0005\u00dco\u0002\u07a7\u07a9",
    "\u0005\u0102\u0082\u0002\u07a8\u07a7\u0003\u0002\u0002\u0002\u07a8\u07a9",
    "\u0003\u0002\u0002\u0002\u07a9\u0101\u0003\u0002\u0002\u0002\u07aa\u07ab",
    "\u0007t\u0002\u0002\u07ab\u07ac\u0005\u0168\u00b5\u0002\u07ac\u07ad",
    "\u0007\u0012\u0002\u0002\u07ad\u07b2\u0005\u01aa\u00d6\u0002\u07ae\u07af",
    "\u0007\u0016\u0002\u0002\u07af\u07b1\u0005\u01aa\u00d6\u0002\u07b0\u07ae",
    "\u0003\u0002\u0002\u0002\u07b1\u07b4\u0003\u0002\u0002\u0002\u07b2\u07b0",
    "\u0003\u0002\u0002\u0002\u07b2\u07b3\u0003\u0002\u0002\u0002\u07b3\u0103",
    "\u0003\u0002\u0002\u0002\u07b4\u07b2\u0003\u0002\u0002\u0002\u07b5\u07ba",
    "\u0005\u0190\u00c9\u0002\u07b6\u07b7\u0007\u0016\u0002\u0002\u07b7\u07b9",
    "\u0005\u0190\u00c9\u0002\u07b8\u07b6\u0003\u0002\u0002\u0002\u07b9\u07bc",
    "\u0003\u0002\u0002\u0002\u07ba\u07b8\u0003\u0002\u0002\u0002\u07ba\u07bb",
    "\u0003\u0002\u0002\u0002\u07bb\u07be\u0003\u0002\u0002\u0002\u07bc\u07ba",
    "\u0003\u0002\u0002\u0002\u07bd\u07bf\u0005\u0106\u0084\u0002\u07be\u07bd",
    "\u0003\u0002\u0002\u0002\u07be\u07bf\u0003\u0002\u0002\u0002\u07bf\u0105",
    "\u0003\u0002\u0002\u0002\u07c0\u07c1\u0007t\u0002\u0002\u07c1\u07c2",
    "\u0005\u0168\u00b5\u0002\u07c2\u07c4\u0007\u0012\u0002\u0002\u07c3\u07c5",
    "\u0007&\u0002\u0002\u07c4\u07c3\u0003\u0002\u0002\u0002\u07c4\u07c5",
    "\u0003\u0002\u0002\u0002\u07c5\u07c6\u0003\u0002\u0002\u0002\u07c6\u07cb",
    "\u0005\u0190\u00c9\u0002\u07c7\u07c8\u0007&\u0002\u0002\u07c8\u07ca",
    "\u0005\u0190\u00c9\u0002\u07c9\u07c7\u0003\u0002\u0002\u0002\u07ca\u07cd",
    "\u0003\u0002\u0002\u0002\u07cb\u07c9\u0003\u0002\u0002\u0002\u07cb\u07cc",
    "\u0003\u0002\u0002\u0002\u07cc\u07d0\u0003\u0002\u0002\u0002\u07cd\u07cb",
    "\u0003\u0002\u0002\u0002\u07ce\u07cf\u0007\u0016\u0002\u0002\u07cf\u07d1",
    "\u0005\u0190\u00c9\u0002\u07d0\u07ce\u0003\u0002\u0002\u0002\u07d0\u07d1",
    "\u0003\u0002\u0002\u0002\u07d1\u0107\u0003\u0002\u0002\u0002\u07d2\u07d7",
    "\u0005\u00e0q\u0002\u07d3\u07d4\u0007\u0014\u0002\u0002\u07d4\u07d6",
    "\u0005\u00e0q\u0002\u07d5\u07d3\u0003\u0002\u0002\u0002\u07d6\u07d9",
    "\u0003\u0002\u0002\u0002\u07d7\u07d5\u0003\u0002\u0002\u0002\u07d7\u07d8",
    "\u0003\u0002\u0002\u0002\u07d8\u0109\u0003\u0002\u0002\u0002\u07d9\u07d7",
    "\u0003\u0002\u0002\u0002\u07da\u07df\u0005\u00e2r\u0002\u07db\u07dc",
    "\u0007\u0014\u0002\u0002\u07dc\u07de\u0005\u00e2r\u0002\u07dd\u07db",
    "\u0003\u0002\u0002\u0002\u07de\u07e1\u0003\u0002\u0002\u0002\u07df\u07dd",
    "\u0003\u0002\u0002\u0002\u07df\u07e0\u0003\u0002\u0002\u0002\u07e0\u010b",
    "\u0003\u0002\u0002\u0002\u07e1\u07df\u0003\u0002\u0002\u0002\u07e2\u07e7",
    "\u0005*\u0016\u0002\u07e3\u07e7\u0005,\u0017\u0002\u07e4\u07e7\u0005",
    ".\u0018\u0002\u07e5\u07e7\u00050\u0019\u0002\u07e6\u07e2\u0003\u0002",
    "\u0002\u0002\u07e6\u07e3\u0003\u0002\u0002\u0002\u07e6\u07e4\u0003\u0002",
    "\u0002\u0002\u07e6\u07e5\u0003\u0002\u0002\u0002\u07e7\u010d\u0003\u0002",
    "\u0002\u0002\u07e8\u07ee\u0005\u0110\u0089\u0002\u07e9\u07ea\u0005\u008e",
    "H\u0002\u07ea\u07eb\u0005\u0110\u0089\u0002\u07eb\u07ed\u0003\u0002",
    "\u0002\u0002\u07ec\u07e9\u0003\u0002\u0002\u0002\u07ed\u07f0\u0003\u0002",
    "\u0002\u0002\u07ee\u07ec\u0003\u0002\u0002\u0002\u07ee\u07ef\u0003\u0002",
    "\u0002\u0002\u07ef\u010f\u0003\u0002\u0002\u0002\u07f0\u07ee\u0003\u0002",
    "\u0002\u0002\u07f1\u07f2\u0007\f\u0002\u0002\u07f2\u07fc\u0005\u01ac",
    "\u00d7\u0002\u07f3\u07f4\u0007\r\u0002\u0002\u07f4\u07fc\u0005\u01c8",
    "\u00e5\u0002\u07f5\u07f6\u0007\u000e\u0002\u0002\u07f6\u07fc\u0005\u0112",
    "\u008a\u0002\u07f7\u07f8\u0007\u000f\u0002\u0002\u07f8\u07fc\u0005\u0112",
    "\u008a\u0002\u07f9\u07fa\u0007\u0010\u0002\u0002\u07fa\u07fc\u0005\u0114",
    "\u008b\u0002\u07fb\u07f1\u0003\u0002\u0002\u0002\u07fb\u07f3\u0003\u0002",
    "\u0002\u0002\u07fb\u07f5\u0003\u0002\u0002\u0002\u07fb\u07f7\u0003\u0002",
    "\u0002\u0002\u07fb\u07f9\u0003\u0002\u0002\u0002\u07fc\u0111\u0003\u0002",
    "\u0002\u0002\u07fd\u07ff\u0005\u0192\u00ca\u0002\u07fe\u0800\u0007\u0013",
    "\u0002\u0002\u07ff\u07fe\u0003\u0002\u0002\u0002\u07ff\u0800\u0003\u0002",
    "\u0002\u0002\u0800\u0802\u0003\u0002\u0002\u0002\u0801\u0803\u0005\u0102",
    "\u0082\u0002\u0802\u0801\u0003\u0002\u0002\u0002\u0802\u0803\u0003\u0002",
    "\u0002\u0002\u0803\u0113\u0003\u0002\u0002\u0002\u0804\u0806\u0005\u0178",
    "\u00bd\u0002\u0805\u0807\u0007\u0013\u0002\u0002\u0806\u0805\u0003\u0002",
    "\u0002\u0002\u0806\u0807\u0003\u0002\u0002\u0002\u0807\u0809\u0003\u0002",
    "\u0002\u0002\u0808\u080a\u0005\u0106\u0084\u0002\u0809\u0808\u0003\u0002",
    "\u0002\u0002\u0809\u080a\u0003\u0002\u0002\u0002\u080a\u0115\u0003\u0002",
    "\u0002\u0002\u080b\u0811\u00056\u001c\u0002\u080c\u080d\u0005\u008e",
    "H\u0002\u080d\u080e\u00056\u001c\u0002\u080e\u0810\u0003\u0002\u0002",
    "\u0002\u080f\u080c\u0003\u0002\u0002\u0002\u0810\u0813\u0003\u0002\u0002",
    "\u0002\u0811\u080f\u0003\u0002\u0002\u0002\u0811\u0812\u0003\u0002\u0002",
    "\u0002\u0812\u0117\u0003\u0002\u0002\u0002\u0813\u0811\u0003\u0002\u0002",
    "\u0002\u0814\u081a\u00052\u001a\u0002\u0815\u0816\u0005\u008eH\u0002",
    "\u0816\u0817\u00052\u001a\u0002\u0817\u0819\u0003\u0002\u0002\u0002",
    "\u0818\u0815\u0003\u0002\u0002\u0002\u0819\u081c\u0003\u0002\u0002\u0002",
    "\u081a\u0818\u0003\u0002\u0002\u0002\u081a\u081b\u0003\u0002\u0002\u0002",
    "\u081b\u0119\u0003\u0002\u0002\u0002\u081c\u081a\u0003\u0002\u0002\u0002",
    "\u081d\u0823\u0005F$\u0002\u081e\u081f\u0005\u008eH\u0002\u081f\u0820",
    "\u0005F$\u0002\u0820\u0822\u0003\u0002\u0002\u0002\u0821\u081e\u0003",
    "\u0002\u0002\u0002\u0822\u0825\u0003\u0002\u0002\u0002\u0823\u0821\u0003",
    "\u0002\u0002\u0002\u0823\u0824\u0003\u0002\u0002\u0002\u0824\u011b\u0003",
    "\u0002\u0002\u0002\u0825\u0823\u0003\u0002\u0002\u0002\u0826\u082c\u0005",
    "V,\u0002\u0827\u0828\u0005\u008eH\u0002\u0828\u0829\u0005V,\u0002\u0829",
    "\u082b\u0003\u0002\u0002\u0002\u082a\u0827\u0003\u0002\u0002\u0002\u082b",
    "\u082e\u0003\u0002\u0002\u0002\u082c\u082a\u0003\u0002\u0002\u0002\u082c",
    "\u082d\u0003\u0002\u0002\u0002\u082d\u011d\u0003\u0002\u0002\u0002\u082e",
    "\u082c\u0003\u0002\u0002\u0002\u082f\u0830\u0007\u0019\u0002\u0002\u0830",
    "\u0831\u0005\u0120\u0091\u0002\u0831\u0832\u0007\u0015\u0002\u0002\u0832",
    "\u0833\u0005\u0120\u0091\u0002\u0833\u0834\u0007\u001a\u0002\u0002\u0834",
    "\u083e\u0003\u0002\u0002\u0002\u0835\u0836\u0007\u0019\u0002\u0002\u0836",
    "\u0837\u0005\u0122\u0092\u0002\u0837\u0838\u0007\u001a\u0002\u0002\u0838",
    "\u083e\u0003\u0002\u0002\u0002\u0839\u083a\u0007,\u0002\u0002\u083a",
    "\u083b\u0005\u0122\u0092\u0002\u083b\u083c\u0007*\u0002\u0002\u083c",
    "\u083e\u0003\u0002\u0002\u0002\u083d\u082f\u0003\u0002\u0002\u0002\u083d",
    "\u0835\u0003\u0002\u0002\u0002\u083d\u0839\u0003\u0002\u0002\u0002\u083e",
    "\u011f\u0003\u0002\u0002\u0002\u083f\u0857\u0007\u00ac\u0002\u0002\u0840",
    "\u0857\u0007\u00ad\u0002\u0002\u0841\u0843\u0007$\u0002\u0002\u0842",
    "\u0841\u0003\u0002\u0002\u0002\u0842\u0843\u0003\u0002\u0002\u0002\u0843",
    "\u0844\u0003\u0002\u0002\u0002\u0844\u0857\u0007\u00b7\u0002\u0002\u0845",
    "\u0857\u0007\u00b8\u0002\u0002\u0846\u0857\u0007\u00ab\u0002\u0002\u0847",
    "\u0857\u0007\u00bc\u0002\u0002\u0848\u0857\u0007\u00bb\u0002\u0002\u0849",
    "\u0857\u0007\u00b4\u0002\u0002\u084a\u084c\u0007$\u0002\u0002\u084b",
    "\u084a\u0003\u0002\u0002\u0002\u084b\u084c\u0003\u0002\u0002\u0002\u084c",
    "\u084d\u0003\u0002\u0002\u0002\u084d\u0857\u0007\u00b9\u0002\u0002\u084e",
    "\u0857\u0007\u00ba\u0002\u0002\u084f\u0857\u0007\u00aa\u0002\u0002\u0850",
    "\u0857\u0007\u00bd\u0002\u0002\u0851\u0857\u0007\u00b6\u0002\u0002\u0852",
    "\u0857\u0007\u00b5\u0002\u0002\u0853\u0857\u0005\u00e6t\u0002\u0854",
    "\u0857\u0005\u0096L\u0002\u0855\u0857\u0005\u0098M\u0002\u0856\u083f",
    "\u0003\u0002\u0002\u0002\u0856\u0840\u0003\u0002\u0002\u0002\u0856\u0842",
    "\u0003\u0002\u0002\u0002\u0856\u0845\u0003\u0002\u0002\u0002\u0856\u0846",
    "\u0003\u0002\u0002\u0002\u0856\u0847\u0003\u0002\u0002\u0002\u0856\u0848",
    "\u0003\u0002\u0002\u0002\u0856\u0849\u0003\u0002\u0002\u0002\u0856\u084b",
    "\u0003\u0002\u0002\u0002\u0856\u084e\u0003\u0002\u0002\u0002\u0856\u084f",
    "\u0003\u0002\u0002\u0002\u0856\u0850\u0003\u0002\u0002\u0002\u0856\u0851",
    "\u0003\u0002\u0002\u0002\u0856\u0852\u0003\u0002\u0002\u0002\u0856\u0853",
    "\u0003\u0002\u0002\u0002\u0856\u0854\u0003\u0002\u0002\u0002\u0856\u0855",
    "\u0003\u0002\u0002\u0002\u0857\u0121\u0003\u0002\u0002\u0002\u0858\u085d",
    "\u0005\u0120\u0091\u0002\u0859\u085a\u0007\u0014\u0002\u0002\u085a\u085c",
    "\u0005\u0120\u0091\u0002\u085b\u0859\u0003\u0002\u0002\u0002\u085c\u085f",
    "\u0003\u0002\u0002\u0002\u085d\u085b\u0003\u0002\u0002\u0002\u085d\u085e",
    "\u0003\u0002\u0002\u0002\u085e\u0123\u0003\u0002\u0002\u0002\u085f\u085d",
    "\u0003\u0002\u0002\u0002\u0860\u0861\t\f\u0002\u0002\u0861\u0125\u0003",
    "\u0002\u0002\u0002\u0862\u0863\u0005\u00c8e\u0002\u0863\u0864\u0007",
    "\u0016\u0002\u0002\u0864\u0866\u0003\u0002\u0002\u0002\u0865\u0862\u0003",
    "\u0002\u0002\u0002\u0865\u0866\u0003\u0002\u0002\u0002\u0866\u0867\u0003",
    "\u0002\u0002\u0002\u0867\u0868\u0007\u009b\u0002\u0002\u0868\u0127\u0003",
    "\u0002\u0002\u0002\u0869\u086a\u0007\u0017\u0002\u0002\u086a\u086b\u0005",
    "\\/\u0002\u086b\u086c\u0007\u0018\u0002\u0002\u086c\u0129\u0003\u0002",
    "\u0002\u0002\u086d\u0870\u0005\u0120\u0091\u0002\u086e\u0870\u0005\u012c",
    "\u0097\u0002\u086f\u086d\u0003\u0002\u0002\u0002\u086f\u086e\u0003\u0002",
    "\u0002\u0002\u0870\u012b\u0003\u0002\u0002\u0002\u0871\u0878\u0005\u00c0",
    "a\u0002\u0872\u0878\u0005\u00ba^\u0002\u0873\u0878\u0005\u00bc_\u0002",
    "\u0874\u0878\u0005\u0130\u0099\u0002\u0875\u0878\u0005\u0132\u009a\u0002",
    "\u0876\u0878\u0005\u012e\u0098\u0002\u0877\u0871\u0003\u0002\u0002\u0002",
    "\u0877\u0872\u0003\u0002\u0002\u0002\u0877\u0873\u0003\u0002\u0002\u0002",
    "\u0877\u0874\u0003\u0002\u0002\u0002\u0877\u0875\u0003\u0002\u0002\u0002",
    "\u0877\u0876\u0003\u0002\u0002\u0002\u0878\u012d\u0003\u0002\u0002\u0002",
    "\u0879\u087b\u0007\u0081\u0002\u0002\u087a\u0879\u0003\u0002\u0002\u0002",
    "\u087a\u087b\u0003\u0002\u0002\u0002\u087b\u087c\u0003\u0002\u0002\u0002",
    "\u087c\u087e\u0007\u0017\u0002\u0002\u087d\u087f\u0005\u0134\u009b\u0002",
    "\u087e\u087d\u0003\u0002\u0002\u0002\u087e\u087f\u0003\u0002\u0002\u0002",
    "\u087f\u0880\u0003\u0002\u0002\u0002\u0880\u0881\u0007\u0018\u0002\u0002",
    "\u0881\u012f\u0003\u0002\u0002\u0002\u0882\u0884\u0007\u0081\u0002\u0002",
    "\u0883\u0882\u0003\u0002\u0002\u0002\u0883\u0884\u0003\u0002\u0002\u0002",
    "\u0884\u088d\u0003\u0002\u0002\u0002\u0885\u0886\u0007,\u0002\u0002",
    "\u0886\u0887\u0005\u013c\u009f\u0002\u0887\u0888\u0007*\u0002\u0002",
    "\u0888\u088e\u0003\u0002\u0002\u0002\u0889\u088e\u0007/\u0002\u0002",
    "\u088a\u088b\u0007,\u0002\u0002\u088b\u088c\u0007\u0012\u0002\u0002",
    "\u088c\u088e\u0007*\u0002\u0002\u088d\u0885\u0003\u0002\u0002\u0002",
    "\u088d\u0889\u0003\u0002\u0002\u0002\u088d\u088a\u0003\u0002\u0002\u0002",
    "\u088e\u0131\u0003\u0002\u0002\u0002\u088f\u0891\u0007\u001b\u0002\u0002",
    "\u0890\u0892\u0005\u0136\u009c\u0002\u0891\u0890\u0003\u0002\u0002\u0002",
    "\u0891\u0892\u0003\u0002\u0002\u0002\u0892\u0893\u0003\u0002\u0002\u0002",
    "\u0893\u0894\u0007\u001c\u0002\u0002\u0894\u0133\u0003\u0002\u0002\u0002",
    "\u0895\u0896\u0005\\/\u0002\u0896\u089f\u0007\u0014\u0002\u0002\u0897",
    "\u089c\u0005\\/\u0002\u0898\u0899\u0007\u0014\u0002\u0002\u0899\u089b",
    "\u0005\\/\u0002\u089a\u0898\u0003\u0002\u0002\u0002\u089b\u089e\u0003",
    "\u0002\u0002\u0002\u089c\u089a\u0003\u0002\u0002\u0002\u089c\u089d\u0003",
    "\u0002\u0002\u0002\u089d\u08a0\u0003\u0002\u0002\u0002\u089e\u089c\u0003",
    "\u0002\u0002\u0002\u089f\u0897\u0003\u0002\u0002\u0002\u089f\u08a0\u0003",
    "\u0002\u0002\u0002\u08a0\u0135\u0003\u0002\u0002\u0002\u08a1\u08a6\u0005",
    "\u0138\u009d\u0002\u08a2\u08a3\u0007\u0014\u0002\u0002\u08a3\u08a5\u0005",
    "\u0138\u009d\u0002\u08a4\u08a2\u0003\u0002\u0002\u0002\u08a5\u08a8\u0003",
    "\u0002\u0002\u0002\u08a6\u08a4\u0003\u0002\u0002\u0002\u08a6\u08a7\u0003",
    "\u0002\u0002\u0002\u08a7\u0137\u0003\u0002\u0002\u0002\u08a8\u08a6\u0003",
    "\u0002\u0002\u0002\u08a9\u08aa\u0005\u013a\u009e\u0002\u08aa\u08ab\u0007",
    "\u0012\u0002\u0002\u08ab\u08ac\u0005\\/\u0002\u08ac\u0139\u0003\u0002",
    "\u0002\u0002\u08ad\u08b0\u0005\u00d6l\u0002\u08ae\u08b0\u0007\u00b4",
    "\u0002\u0002\u08af\u08ad\u0003\u0002\u0002\u0002\u08af\u08ae\u0003\u0002",
    "\u0002\u0002\u08b0\u013b\u0003\u0002\u0002\u0002\u08b1\u08b6\u0005\u013e",
    "\u00a0\u0002\u08b2\u08b3\u0007\u0014\u0002\u0002\u08b3\u08b5\u0005\u013e",
    "\u00a0\u0002\u08b4\u08b2\u0003\u0002\u0002\u0002\u08b5\u08b8\u0003\u0002",
    "\u0002\u0002\u08b6\u08b4\u0003\u0002\u0002\u0002\u08b6\u08b7\u0003\u0002",
    "\u0002\u0002\u08b7\u013d\u0003\u0002\u0002\u0002\u08b8\u08b6\u0003\u0002",
    "\u0002\u0002\u08b9\u08ba\u0005\u0140\u00a1\u0002\u08ba\u08bb\u0007\u0012",
    "\u0002\u0002\u08bb\u08bc\u0005\\/\u0002\u08bc\u013f\u0003\u0002\u0002",
    "\u0002\u08bd\u08c0\u0005\u00d6l\u0002\u08be\u08c0\u0007\u00b4\u0002",
    "\u0002\u08bf\u08bd\u0003\u0002\u0002\u0002\u08bf\u08be\u0003\u0002\u0002",
    "\u0002\u08c0\u0141\u0003\u0002\u0002\u0002\u08c1\u08c2\u0005\\/\u0002",
    "\u08c2\u08c3\u0007\u0012\u0002\u0002\u08c3\u08c4\u0005\\/\u0002\u08c4",
    "\u08cb\u0003\u0002\u0002\u0002\u08c5\u08c6\u0005\\/\u0002\u08c6\u08c7",
    "\u0007\u0012\u0002\u0002\u08c7\u08cb\u0003\u0002\u0002\u0002\u08c8\u08c9",
    "\u0007\u0012\u0002\u0002\u08c9\u08cb\u0005\\/\u0002\u08ca\u08c1\u0003",
    "\u0002\u0002\u0002\u08ca\u08c5\u0003\u0002\u0002\u0002\u08ca\u08c8\u0003",
    "\u0002\u0002\u0002\u08cb\u0143\u0003\u0002\u0002\u0002\u08cc\u08cd\u0005",
    "\u00e0q\u0002\u08cd\u08ce\u0005\u016e\u00b8\u0002\u08ce\u08cf\u0005",
    "\\/\u0002\u08cf\u0145\u0003\u0002\u0002\u0002\u08d0\u08d1\b\u00a4\u0001",
    "\u0002\u08d1\u08d2\u0005\u00e0q\u0002\u08d2\u08d7\u0003\u0002\u0002",
    "\u0002\u08d3\u08d4\f\u0003\u0002\u0002\u08d4\u08d6\u0005\u0088E\u0002",
    "\u08d5\u08d3\u0003\u0002\u0002\u0002\u08d6\u08d9\u0003\u0002\u0002\u0002",
    "\u08d7\u08d5\u0003\u0002\u0002\u0002\u08d7\u08d8\u0003\u0002\u0002\u0002",
    "\u08d8\u0147\u0003\u0002\u0002\u0002\u08d9\u08d7\u0003\u0002\u0002\u0002",
    "\u08da\u08db\u0006\u00a5&\u0003\u08db\u08dc\u0007\u00b0\u0002\u0002",
    "\u08dc\u08df\u0005\u00f2z\u0002\u08dd\u08df\u0005\\/\u0002\u08de\u08da",
    "\u0003\u0002\u0002\u0002\u08de\u08dd\u0003\u0002\u0002\u0002\u08df\u0149",
    "\u0003\u0002\u0002\u0002\u08e0\u08e1\u0006\u00a6\'\u0003\u08e1\u08e2",
    "\u0007\u00b0\u0002\u0002\u08e2\u014b\u0003\u0002\u0002\u0002\u08e3\u08e4",
    "\u0005\u014e\u00a8\u0002\u08e4\u08e5\u0005\\/\u0002\u08e5\u08ec\u0003",
    "\u0002\u0002\u0002\u08e6\u08e7\u0005\u014e\u00a8\u0002\u08e7\u08e8\u0007",
    "\u001b\u0002\u0002\u08e8\u08e9\u0005\u0116\u008c\u0002\u08e9\u08ea\u0007",
    "\u001c\u0002\u0002\u08ea\u08ec\u0003\u0002\u0002\u0002\u08eb\u08e3\u0003",
    "\u0002\u0002\u0002\u08eb\u08e6\u0003\u0002\u0002\u0002\u08ec\u014d\u0003",
    "\u0002\u0002\u0002\u08ed\u08ee\u0005\u0150\u00a9\u0002\u08ee\u08ef\u0005",
    "\u0090I\u0002\u08ef\u08f0\u00077\u0002\u0002\u08f0\u08f1\u0005\u0090",
    "I\u0002\u08f1\u014f\u0003\u0002\u0002\u0002\u08f2\u08f9\u0005\u00e0",
    "q\u0002\u08f3\u08f5\u0007\u0017\u0002\u0002\u08f4\u08f6\u0005\u0108",
    "\u0085\u0002\u08f5\u08f4\u0003\u0002\u0002\u0002\u08f5\u08f6\u0003\u0002",
    "\u0002\u0002\u08f6\u08f7\u0003\u0002\u0002\u0002\u08f7\u08f9\u0007\u0018",
    "\u0002\u0002\u08f8\u08f2\u0003\u0002\u0002\u0002\u08f8\u08f3\u0003\u0002",
    "\u0002\u0002\u08f9\u0151\u0003\u0002\u0002\u0002\u08fa\u08fd\u0005d",
    "3\u0002\u08fb\u08fd\u0005\u014c\u00a7\u0002\u08fc\u08fa\u0003\u0002",
    "\u0002\u0002\u08fc\u08fb\u0003\u0002\u0002\u0002\u08fd\u0153\u0003\u0002",
    "\u0002\u0002\u08fe\u08ff\u0007\u008f\u0002\u0002\u08ff\u0900\u0007F",
    "\u0002\u0002\u0900\u0901\u0007t\u0002\u0002\u0901\u0902\u0005\\/\u0002",
    "\u0902\u0155\u0003\u0002\u0002\u0002\u0903\u0904\u0007\u008f\u0002\u0002",
    "\u0904\u0905\u0007O\u0002\u0002\u0905\u0906\u0007t\u0002\u0002\u0906",
    "\u0907\u0005\\/\u0002\u0907\u0157\u0003\u0002\u0002\u0002\u0908\u0909",
    "\u0007\u008f\u0002\u0002\u0909\u090a\u0007\u0088\u0002\u0002\u090a\u090b",
    "\u0007t\u0002\u0002\u090b\u090c\u0005\\/\u0002\u090c\u0159\u0003\u0002",
    "\u0002\u0002\u090d\u0912\u0005\u015c\u00af\u0002\u090e\u090f\u0007\u0014",
    "\u0002\u0002\u090f\u0911\u0005\u015c\u00af\u0002\u0910\u090e\u0003\u0002",
    "\u0002\u0002\u0911\u0914\u0003\u0002\u0002\u0002\u0912\u0910\u0003\u0002",
    "\u0002\u0002\u0912\u0913\u0003\u0002\u0002\u0002\u0913\u015b\u0003\u0002",
    "\u0002\u0002\u0914\u0912\u0003\u0002\u0002\u0002\u0915\u091a\u0005\u00e0",
    "q\u0002\u0916\u0917\u0007\u0016\u0002\u0002\u0917\u0919\u0005\u00e0",
    "q\u0002\u0918\u0916\u0003\u0002\u0002\u0002\u0919\u091c\u0003\u0002",
    "\u0002\u0002\u091a\u0918\u0003\u0002\u0002\u0002\u091a\u091b\u0003\u0002",
    "\u0002\u0002\u091b\u091e\u0003\u0002\u0002\u0002\u091c\u091a\u0003\u0002",
    "\u0002\u0002\u091d\u091f\t\r\u0002\u0002\u091e\u091d\u0003\u0002\u0002",
    "\u0002\u091e\u091f\u0003\u0002\u0002\u0002\u091f\u015d\u0003\u0002\u0002",
    "\u0002\u0920\u0925\u0005\u00e0q\u0002\u0921\u0922\u0007\u0014\u0002",
    "\u0002\u0922\u0924\u0005\u00e0q\u0002\u0923\u0921\u0003\u0002\u0002",
    "\u0002\u0924\u0927\u0003\u0002\u0002\u0002\u0925\u0923\u0003\u0002\u0002",
    "\u0002\u0925\u0926\u0003\u0002\u0002\u0002\u0926\u015f\u0003\u0002\u0002",
    "\u0002\u0927\u0925\u0003\u0002\u0002\u0002\u0928\u092f\u0007#\u0002",
    "\u0002\u0929\u092f\u0007$\u0002\u0002\u092a\u092f\u0005\u0170\u00b9",
    "\u0002\u092b\u092f\u0005\u0172\u00ba\u0002\u092c\u092f\u0005\u0174\u00bb",
    "\u0002\u092d\u092f\u0005\u0176\u00bc\u0002\u092e\u0928\u0003\u0002\u0002",
    "\u0002\u092e\u0929\u0003\u0002\u0002\u0002\u092e\u092a\u0003\u0002\u0002",
    "\u0002\u092e\u092b\u0003\u0002\u0002\u0002\u092e\u092c\u0003\u0002\u0002",
    "\u0002\u092e\u092d\u0003\u0002\u0002\u0002\u092f\u0161\u0003\u0002\u0002",
    "\u0002\u0930\u0931\t\u000e\u0002\u0002\u0931\u0163\u0003\u0002\u0002",
    "\u0002\u0932\u0933\u0007\u00b0\u0002\u0002\u0933\u0934\u0006\u00b3(",
    "\u0003\u0934\u0165\u0003\u0002\u0002\u0002\u0935\u0936\u0007\u00b0\u0002",
    "\u0002\u0936\u0937\u0006\u00b4)\u0003\u0937\u0167\u0003\u0002\u0002",
    "\u0002\u0938\u0939\u0007\u00b0\u0002\u0002\u0939\u093a\u0006\u00b5*",
    "\u0003\u093a\u0169\u0003\u0002\u0002\u0002\u093b\u093c\u0007\u00b0\u0002",
    "\u0002\u093c\u093d\u0006\u00b6+\u0003\u093d\u016b\u0003\u0002\u0002",
    "\u0002\u093e\u093f\u0007\u00b0\u0002\u0002\u093f\u0940\u0006\u00b7,",
    "\u0003\u0940\u016d\u0003\u0002\u0002\u0002\u0941\u0942\u00070\u0002",
    "\u0002\u0942\u016f\u0003\u0002\u0002\u0002\u0943\u0944\u0007%\u0002",
    "\u0002\u0944\u0171\u0003\u0002\u0002\u0002\u0945\u0946\u0007&\u0002",
    "\u0002\u0946\u0173\u0003\u0002\u0002\u0002\u0947\u0948\u0007\'\u0002",
    "\u0002\u0948\u0175\u0003\u0002\u0002\u0002\u0949\u094a\t\u000f\u0002",
    "\u0002\u094a\u0177\u0003\u0002\u0002\u0002\u094b\u094c\u0007\u0092\u0002",
    "\u0002\u094c\u094d\u0005\u017a\u00be\u0002\u094d\u094e\u0007\u0013\u0002",
    "\u0002\u094e\u0953\u0003\u0002\u0002\u0002\u094f\u0950\u0005\u017a\u00be",
    "\u0002\u0950\u0951\u0007\u0013\u0002\u0002\u0951\u0953\u0003\u0002\u0002",
    "\u0002\u0952\u094b\u0003\u0002\u0002\u0002\u0952\u094f\u0003\u0002\u0002",
    "\u0002\u0953\u0179\u0003\u0002\u0002\u0002\u0954\u0955\b\u00be\u0001",
    "\u0002\u0955\u0956\u0005\u017c\u00bf\u0002\u0956\u095b\u0003\u0002\u0002",
    "\u0002\u0957\u0958\f\u0003\u0002\u0002\u0958\u095a\u0005\u0182\u00c2",
    "\u0002\u0959\u0957\u0003\u0002\u0002\u0002\u095a\u095d\u0003\u0002\u0002",
    "\u0002\u095b\u0959\u0003\u0002\u0002\u0002\u095b\u095c\u0003\u0002\u0002",
    "\u0002\u095c\u017b\u0003\u0002\u0002\u0002\u095d\u095b\u0003\u0002\u0002",
    "\u0002\u095e\u0966\u0005\u017e\u00c0\u0002\u095f\u0966\u0005\u0180\u00c1",
    "\u0002\u0960\u0966\u0005\u018a\u00c6\u0002\u0961\u0966\u0005\u018c\u00c7",
    "\u0002\u0962\u0966\u0005\u018e\u00c8\u0002\u0963\u0966\u0005\u0184\u00c3",
    "\u0002\u0964\u0966\u0005\u0188\u00c5\u0002\u0965\u095e\u0003\u0002\u0002",
    "\u0002\u0965\u095f\u0003\u0002\u0002\u0002\u0965\u0960\u0003\u0002\u0002",
    "\u0002\u0965\u0961\u0003\u0002\u0002\u0002\u0965\u0962\u0003\u0002\u0002",
    "\u0002\u0965\u0963\u0003\u0002\u0002\u0002\u0965\u0964\u0003\u0002\u0002",
    "\u0002\u0966\u017d\u0003\u0002\u0002\u0002\u0967\u0968\u0005\u0124\u0093",
    "\u0002\u0968\u017f\u0003\u0002\u0002\u0002\u0969\u096a\u0005\u0164\u00b3",
    "\u0002\u096a\u096b\u0005\u0184\u00c3\u0002\u096b\u0181\u0003\u0002\u0002",
    "\u0002\u096c\u096d\u0007\u0016\u0002\u0002\u096d\u0972\u0005\u0184\u00c3",
    "\u0002\u096e\u096f\u0007\u0016\u0002\u0002\u096f\u0972\u0005\u0190\u00c9",
    "\u0002\u0970\u0972\u0005\u0188\u00c5\u0002\u0971\u096c\u0003\u0002\u0002",
    "\u0002\u0971\u096e\u0003\u0002\u0002\u0002\u0971\u0970\u0003\u0002\u0002",
    "\u0002\u0972\u0183\u0003\u0002\u0002\u0002\u0973\u0974\u0005\u0190\u00c9",
    "\u0002\u0974\u0976\u0007\u0017\u0002\u0002\u0975\u0977\u0005\u0186\u00c4",
    "\u0002\u0976\u0975\u0003\u0002\u0002\u0002\u0976\u0977\u0003\u0002\u0002",
    "\u0002\u0977\u0978\u0003\u0002\u0002\u0002\u0978\u0979\u0007\u0018\u0002",
    "\u0002\u0979\u0185\u0003\u0002\u0002\u0002\u097a\u097b\b\u00c4\u0001",
    "\u0002\u097b\u097c\u0005\u017a\u00be\u0002\u097c\u0982\u0003\u0002\u0002",
    "\u0002\u097d\u097e\f\u0003\u0002\u0002\u097e\u097f\u0007\u0014\u0002",
    "\u0002\u097f\u0981\u0005\u017a\u00be\u0002\u0980\u097d\u0003\u0002\u0002",
    "\u0002\u0981\u0984\u0003\u0002\u0002\u0002\u0982\u0980\u0003\u0002\u0002",
    "\u0002\u0982\u0983\u0003\u0002\u0002\u0002\u0983\u0187\u0003\u0002\u0002",
    "\u0002\u0984\u0982\u0003\u0002\u0002\u0002\u0985\u0986\u0007\u0019\u0002",
    "\u0002\u0986\u0987\u0005\u017a\u00be\u0002\u0987\u0988\u0007\u001a\u0002",
    "\u0002\u0988\u0189\u0003\u0002\u0002\u0002\u0989\u098a\u0007\u0017\u0002",
    "\u0002\u098a\u098b\u0005\u017a\u00be\u0002\u098b\u098c\u0007\u0018\u0002",
    "\u0002\u098c\u018b\u0003\u0002\u0002\u0002\u098d\u098e\u0005\u0190\u00c9",
    "\u0002\u098e\u018d\u0003\u0002\u0002\u0002\u098f\u0995\u0007\u00b7\u0002",
    "\u0002\u0990\u0995\u0007\u00b9\u0002\u0002\u0991\u0995\u0007\u00b4\u0002",
    "\u0002\u0992\u0995\u0007\u00aa\u0002\u0002\u0993\u0995\u0007\u00ab\u0002",
    "\u0002\u0994\u098f\u0003\u0002\u0002\u0002\u0994\u0990\u0003\u0002\u0002",
    "\u0002\u0994\u0991\u0003\u0002\u0002\u0002\u0994\u0992\u0003\u0002\u0002",
    "\u0002\u0994\u0993\u0003\u0002\u0002\u0002\u0995\u018f\u0003\u0002\u0002",
    "\u0002\u0996\u099c\u0007\u00b0\u0002\u0002\u0997\u099c\u0007\u00ae\u0002",
    "\u0002\u0998\u099c\u0007\u00b2\u0002\u0002\u0999\u099c\u0007\u00af\u0002",
    "\u0002\u099a\u099c\u0005\u0162\u00b2\u0002\u099b\u0996\u0003\u0002\u0002",
    "\u0002\u099b\u0997\u0003\u0002\u0002\u0002\u099b\u0998\u0003\u0002\u0002",
    "\u0002\u099b\u0999\u0003\u0002\u0002\u0002\u099b\u099a\u0003\u0002\u0002",
    "\u0002\u099c\u0191\u0003\u0002\u0002\u0002\u099d\u099e\u0007\u0092\u0002",
    "\u0002\u099e\u09a1\u0005\u0194\u00cb\u0002\u099f\u09a1\u0005\u0194\u00cb",
    "\u0002\u09a0\u099d\u0003\u0002\u0002\u0002\u09a0\u099f\u0003\u0002\u0002",
    "\u0002\u09a1\u0193\u0003\u0002\u0002\u0002\u09a2\u09a3\b\u00cb\u0001",
    "\u0002\u09a3\u09a4\u0005\u0196\u00cc\u0002\u09a4\u09a9\u0003\u0002\u0002",
    "\u0002\u09a5\u09a6\f\u0003\u0002\u0002\u09a6\u09a8\u0005\u019a\u00ce",
    "\u0002\u09a7\u09a5\u0003\u0002\u0002\u0002\u09a8\u09ab\u0003\u0002\u0002",
    "\u0002\u09a9\u09a7\u0003\u0002\u0002\u0002\u09a9\u09aa\u0003\u0002\u0002",
    "\u0002\u09aa\u0195\u0003\u0002\u0002\u0002\u09ab\u09a9\u0003\u0002\u0002",
    "\u0002\u09ac\u09b2\u0005\u0198\u00cd\u0002\u09ad\u09b2\u0005\u01a4\u00d3",
    "\u0002\u09ae\u09b2\u0005\u01a6\u00d4\u0002\u09af\u09b2\u0005\u01a8\u00d5",
    "\u0002\u09b0\u09b2\u0005\u019c\u00cf\u0002\u09b1\u09ac\u0003\u0002\u0002",
    "\u0002\u09b1\u09ad\u0003\u0002\u0002\u0002\u09b1\u09ae\u0003\u0002\u0002",
    "\u0002\u09b1\u09af\u0003\u0002\u0002\u0002\u09b1\u09b0\u0003\u0002\u0002",
    "\u0002\u09b2\u0197\u0003\u0002\u0002\u0002\u09b3\u09b4\u0005\u0124\u0093",
    "\u0002\u09b4\u0199\u0003\u0002\u0002\u0002\u09b5\u09b6\u0007\u0016\u0002",
    "\u0002\u09b6\u09bc\u0005\u019c\u00cf\u0002\u09b7\u09b8\u0007\u0019\u0002",
    "\u0002\u09b8\u09b9\u0005\u0194\u00cb\u0002\u09b9\u09ba\u0007\u001a\u0002",
    "\u0002\u09ba\u09bc\u0003\u0002\u0002\u0002\u09bb\u09b5\u0003\u0002\u0002",
    "\u0002\u09bb\u09b7\u0003\u0002\u0002\u0002\u09bc\u019b\u0003\u0002\u0002",
    "\u0002\u09bd\u09be\u0005\u01aa\u00d6\u0002\u09be\u09c0\u0007\u0017\u0002",
    "\u0002\u09bf\u09c1\u0005\u019e\u00d0\u0002\u09c0\u09bf\u0003\u0002\u0002",
    "\u0002\u09c0\u09c1\u0003\u0002\u0002\u0002\u09c1\u09c2\u0003\u0002\u0002",
    "\u0002\u09c2\u09c3\u0007\u0018\u0002\u0002\u09c3\u019d\u0003\u0002\u0002",
    "\u0002\u09c4\u09cb\u0005\u01a0\u00d1\u0002\u09c5\u09cb\u0005\u01a2\u00d2",
    "\u0002\u09c6\u09c7\u0005\u01a0\u00d1\u0002\u09c7\u09c8\u0007\u0014\u0002",
    "\u0002\u09c8\u09c9\u0005\u01a2\u00d2\u0002\u09c9\u09cb\u0003\u0002\u0002",
    "\u0002\u09ca\u09c4\u0003\u0002\u0002\u0002\u09ca\u09c5\u0003\u0002\u0002",
    "\u0002\u09ca\u09c6\u0003\u0002\u0002\u0002\u09cb\u019f\u0003\u0002\u0002",
    "\u0002\u09cc\u09cd\b\u00d1\u0001\u0002\u09cd\u09ce\u0005\u0194\u00cb",
    "\u0002\u09ce\u09d4\u0003\u0002\u0002\u0002\u09cf\u09d0\f\u0003\u0002",
    "\u0002\u09d0\u09d1\u0007\u0014\u0002\u0002\u09d1\u09d3\u0005\u0194\u00cb",
    "\u0002\u09d2\u09cf\u0003\u0002\u0002\u0002\u09d3\u09d6\u0003\u0002\u0002",
    "\u0002\u09d4\u09d2\u0003\u0002\u0002\u0002\u09d4\u09d5\u0003\u0002\u0002",
    "\u0002\u09d5\u01a1\u0003\u0002\u0002\u0002\u09d6\u09d4\u0003\u0002\u0002",
    "\u0002\u09d7\u09d8\b\u00d2\u0001\u0002\u09d8\u09d9\u0005\u01aa\u00d6",
    "\u0002\u09d9\u09da\u00070\u0002\u0002\u09da\u09db\u0005\u0194\u00cb",
    "\u0002\u09db\u09e4\u0003\u0002\u0002\u0002\u09dc\u09dd\f\u0003\u0002",
    "\u0002\u09dd\u09de\u0007\u0014\u0002\u0002\u09de\u09df\u0005\u01aa\u00d6",
    "\u0002\u09df\u09e0\u00070\u0002\u0002\u09e0\u09e1\u0005\u0194\u00cb",
    "\u0002\u09e1\u09e3\u0003\u0002\u0002\u0002\u09e2\u09dc\u0003\u0002\u0002",
    "\u0002\u09e3\u09e6\u0003\u0002\u0002\u0002\u09e4\u09e2\u0003\u0002\u0002",
    "\u0002\u09e4\u09e5\u0003\u0002\u0002\u0002\u09e5\u01a3\u0003\u0002\u0002",
    "\u0002\u09e6\u09e4\u0003\u0002\u0002\u0002\u09e7\u09e8\u0007\u0017\u0002",
    "\u0002\u09e8\u09e9\u0005\u0194\u00cb\u0002\u09e9\u09ea\u0007\u0018\u0002",
    "\u0002\u09ea\u01a5\u0003\u0002\u0002\u0002\u09eb\u09ec\b\u00d4\u0001",
    "\u0002\u09ec\u09ef\u0007\u00b2\u0002\u0002\u09ed\u09ef\u0005\u01aa\u00d6",
    "\u0002\u09ee\u09eb\u0003\u0002\u0002\u0002\u09ee\u09ed\u0003\u0002\u0002",
    "\u0002\u09ef\u09f5\u0003\u0002\u0002\u0002\u09f0\u09f1\f\u0003\u0002",
    "\u0002\u09f1\u09f2\u0007\u0016\u0002\u0002\u09f2\u09f4\u0005\u01aa\u00d6",
    "\u0002\u09f3\u09f0\u0003\u0002\u0002\u0002\u09f4\u09f7\u0003\u0002\u0002",
    "\u0002\u09f5\u09f3\u0003\u0002\u0002\u0002\u09f5\u09f6\u0003\u0002\u0002",
    "\u0002\u09f6\u01a7\u0003\u0002\u0002\u0002\u09f7\u09f5\u0003\u0002\u0002",
    "\u0002\u09f8\u09fe\u0007\u00b7\u0002\u0002\u09f9\u09fe\u0007\u00b9\u0002",
    "\u0002\u09fa\u09fe\u0007\u00b4\u0002\u0002\u09fb\u09fe\u0007\u00aa\u0002",
    "\u0002\u09fc\u09fe\u0007\u00ab\u0002\u0002\u09fd\u09f8\u0003\u0002\u0002",
    "\u0002\u09fd\u09f9\u0003\u0002\u0002\u0002\u09fd\u09fa\u0003\u0002\u0002",
    "\u0002\u09fd\u09fb\u0003\u0002\u0002\u0002\u09fd\u09fc\u0003\u0002\u0002",
    "\u0002\u09fe\u01a9\u0003\u0002\u0002\u0002\u09ff\u0a05\u0007\u00b0\u0002",
    "\u0002\u0a00\u0a05\u0007\u00ae\u0002\u0002\u0a01\u0a05\u0007\u00b2\u0002",
    "\u0002\u0a02\u0a05\u0007\u00af\u0002\u0002\u0a03\u0a05\u0005\u0162\u00b2",
    "\u0002\u0a04\u09ff\u0003\u0002\u0002\u0002\u0a04\u0a00\u0003\u0002\u0002",
    "\u0002\u0a04\u0a01\u0003\u0002\u0002\u0002\u0a04\u0a02\u0003\u0002\u0002",
    "\u0002\u0a04\u0a03\u0003\u0002\u0002\u0002\u0a05\u01ab\u0003\u0002\u0002",
    "\u0002\u0a06\u0a07\u0007\u0092\u0002\u0002\u0a07\u0a08\u0005\u01ae\u00d8",
    "\u0002\u0a08\u0a09\u0007\u0013\u0002\u0002\u0a09\u0a0e\u0003\u0002\u0002",
    "\u0002\u0a0a\u0a0b\u0005\u01ae\u00d8\u0002\u0a0b\u0a0c\u0007\u0013\u0002",
    "\u0002\u0a0c\u0a0e\u0003\u0002\u0002\u0002\u0a0d\u0a06\u0003\u0002\u0002",
    "\u0002\u0a0d\u0a0a\u0003\u0002\u0002\u0002\u0a0e\u01ad\u0003\u0002\u0002",
    "\u0002\u0a0f\u0a10\b\u00d8\u0001\u0002\u0a10\u0a11\u0005\u01b0\u00d9",
    "\u0002\u0a11\u0a16\u0003\u0002\u0002\u0002\u0a12\u0a13\f\u0003\u0002",
    "\u0002\u0a13\u0a15\u0005\u01b6\u00dc\u0002\u0a14\u0a12\u0003\u0002\u0002",
    "\u0002\u0a15\u0a18\u0003\u0002\u0002\u0002\u0a16\u0a14\u0003\u0002\u0002",
    "\u0002\u0a16\u0a17\u0003\u0002\u0002\u0002\u0a17\u01af\u0003\u0002\u0002",
    "\u0002\u0a18\u0a16\u0003\u0002\u0002\u0002\u0a19\u0a1f\u0005\u01b2\u00da",
    "\u0002\u0a1a\u0a1f\u0005\u01b4\u00db\u0002\u0a1b\u0a1f\u0005\u01be\u00e0",
    "\u0002\u0a1c\u0a1f\u0005\u01c0\u00e1\u0002\u0a1d\u0a1f\u0005\u01c4\u00e3",
    "\u0002\u0a1e\u0a19\u0003\u0002\u0002\u0002\u0a1e\u0a1a\u0003\u0002\u0002",
    "\u0002\u0a1e\u0a1b\u0003\u0002\u0002\u0002\u0a1e\u0a1c\u0003\u0002\u0002",
    "\u0002\u0a1e\u0a1d\u0003\u0002\u0002\u0002\u0a1f\u01b1\u0003\u0002\u0002",
    "\u0002\u0a20\u0a21\u0005\u0124\u0093\u0002\u0a21\u01b3\u0003\u0002\u0002",
    "\u0002\u0a22\u0a23\u0005\u0164\u00b3\u0002\u0a23\u0a24\u0005\u01b8\u00dd",
    "\u0002\u0a24\u01b5\u0003\u0002\u0002\u0002\u0a25\u0a26\u0007\u0016\u0002",
    "\u0002\u0a26\u0a29\u0005\u01b8\u00dd\u0002\u0a27\u0a29\u0005\u01bc\u00df",
    "\u0002\u0a28\u0a25\u0003\u0002\u0002\u0002\u0a28\u0a27\u0003\u0002\u0002",
    "\u0002\u0a29\u01b7\u0003\u0002\u0002\u0002\u0a2a\u0a2b\u0005\u01c6\u00e4",
    "\u0002\u0a2b\u0a2d\u0007\u0017\u0002\u0002\u0a2c\u0a2e\u0005\u01ba\u00de",
    "\u0002\u0a2d\u0a2c\u0003\u0002\u0002\u0002\u0a2d\u0a2e\u0003\u0002\u0002",
    "\u0002\u0a2e\u0a2f\u0003\u0002\u0002\u0002\u0a2f\u0a30\u0007\u0018\u0002",
    "\u0002\u0a30\u01b9\u0003\u0002\u0002\u0002\u0a31\u0a32\b\u00de\u0001",
    "\u0002\u0a32\u0a33\u0005\u01ae\u00d8\u0002\u0a33\u0a39\u0003\u0002\u0002",
    "\u0002\u0a34\u0a35\f\u0003\u0002\u0002\u0a35\u0a36\u0007\u0014\u0002",
    "\u0002\u0a36\u0a38\u0005\u01ae\u00d8\u0002\u0a37\u0a34\u0003\u0002\u0002",
    "\u0002\u0a38\u0a3b\u0003\u0002\u0002\u0002\u0a39\u0a37\u0003\u0002\u0002",
    "\u0002\u0a39\u0a3a\u0003\u0002\u0002\u0002\u0a3a\u01bb\u0003\u0002\u0002",
    "\u0002\u0a3b\u0a39\u0003\u0002\u0002\u0002\u0a3c\u0a3d\u0007\u0019\u0002",
    "\u0002\u0a3d\u0a3e\u0005\u01ae\u00d8\u0002\u0a3e\u0a3f\u0007\u001a\u0002",
    "\u0002\u0a3f\u01bd\u0003\u0002\u0002\u0002\u0a40\u0a41\u0007\u0017\u0002",
    "\u0002\u0a41\u0a42\u0005\u01ae\u00d8\u0002\u0a42\u0a43\u0007\u0018\u0002",
    "\u0002\u0a43\u01bf\u0003\u0002\u0002\u0002\u0a44\u0a45\b\u00e1\u0001",
    "\u0002\u0a45\u0a46\u0005\u01c6\u00e4\u0002\u0a46\u0a4c\u0003\u0002\u0002",
    "\u0002\u0a47\u0a48\f\u0003\u0002\u0002\u0a48\u0a49\u0007\u0016\u0002",
    "\u0002\u0a49\u0a4b\u0005\u01c6\u00e4\u0002\u0a4a\u0a47\u0003\u0002\u0002",
    "\u0002\u0a4b\u0a4e\u0003\u0002\u0002\u0002\u0a4c\u0a4a\u0003\u0002\u0002",
    "\u0002\u0a4c\u0a4d\u0003\u0002\u0002\u0002\u0a4d\u01c1\u0003\u0002\u0002",
    "\u0002\u0a4e\u0a4c\u0003\u0002\u0002\u0002\u0a4f\u0a50\b\u00e2\u0001",
    "\u0002\u0a50\u0a51\u0005\u01c0\u00e1\u0002\u0a51\u0a56\u0003\u0002\u0002",
    "\u0002\u0a52\u0a53\f\u0003\u0002\u0002\u0a53\u0a55\u0007\u00b2\u0002",
    "\u0002\u0a54\u0a52\u0003\u0002\u0002\u0002\u0a55\u0a58\u0003\u0002\u0002",
    "\u0002\u0a56\u0a54\u0003\u0002\u0002\u0002\u0a56\u0a57\u0003\u0002\u0002",
    "\u0002\u0a57\u01c3\u0003\u0002\u0002\u0002\u0a58\u0a56\u0003\u0002\u0002",
    "\u0002\u0a59\u0a5f\u0007\u00b7\u0002\u0002\u0a5a\u0a5f\u0007\u00b9\u0002",
    "\u0002\u0a5b\u0a5f\u0007\u00b4\u0002\u0002\u0a5c\u0a5f\u0007\u00aa\u0002",
    "\u0002\u0a5d\u0a5f\u0007\u00ab\u0002\u0002\u0a5e\u0a59\u0003\u0002\u0002",
    "\u0002\u0a5e\u0a5a\u0003\u0002\u0002\u0002\u0a5e\u0a5b\u0003\u0002\u0002",
    "\u0002\u0a5e\u0a5c\u0003\u0002\u0002\u0002\u0a5e\u0a5d\u0003\u0002\u0002",
    "\u0002\u0a5f\u01c5\u0003\u0002\u0002\u0002\u0a60\u0a66\u0007\u00b0\u0002",
    "\u0002\u0a61\u0a66\u0007\u00ae\u0002\u0002\u0a62\u0a66\u0007\u00b2\u0002",
    "\u0002\u0a63\u0a66\u0007\u00af\u0002\u0002\u0a64\u0a66\u0005\u0162\u00b2",
    "\u0002\u0a65\u0a60\u0003\u0002\u0002\u0002\u0a65\u0a61\u0003\u0002\u0002",
    "\u0002\u0a65\u0a62\u0003\u0002\u0002\u0002\u0a65\u0a63\u0003\u0002\u0002",
    "\u0002\u0a65\u0a64\u0003\u0002\u0002\u0002\u0a66\u01c7\u0003\u0002\u0002",
    "\u0002\u0a67\u0a68\u0007\u0092\u0002\u0002\u0a68\u0a69\u0005\u01ca\u00e6",
    "\u0002\u0a69\u0a6a\u0007\u0013\u0002\u0002\u0a6a\u0a6f\u0003\u0002\u0002",
    "\u0002\u0a6b\u0a6c\u0005\u01ca\u00e6\u0002\u0a6c\u0a6d\u0007\u0013\u0002",
    "\u0002\u0a6d\u0a6f\u0003\u0002\u0002\u0002\u0a6e\u0a67\u0003\u0002\u0002",
    "\u0002\u0a6e\u0a6b\u0003\u0002\u0002\u0002\u0a6f\u01c9\u0003\u0002\u0002",
    "\u0002\u0a70\u0a71\b\u00e6\u0001\u0002\u0a71\u0a72\u0005\u01cc\u00e7",
    "\u0002\u0a72\u0a77\u0003\u0002\u0002\u0002\u0a73\u0a74\f\u0003\u0002",
    "\u0002\u0a74\u0a76\u0005\u01d2\u00ea\u0002\u0a75\u0a73\u0003\u0002\u0002",
    "\u0002\u0a76\u0a79\u0003\u0002\u0002\u0002\u0a77\u0a75\u0003\u0002\u0002",
    "\u0002\u0a77\u0a78\u0003\u0002\u0002\u0002\u0a78\u01cb\u0003\u0002\u0002",
    "\u0002\u0a79\u0a77\u0003\u0002\u0002\u0002\u0a7a\u0a80\u0005\u01ce\u00e8",
    "\u0002\u0a7b\u0a80\u0005\u01d0\u00e9\u0002\u0a7c\u0a80\u0005\u01da\u00ee",
    "\u0002\u0a7d\u0a80\u0005\u01dc\u00ef\u0002\u0a7e\u0a80\u0005\u01de\u00f0",
    "\u0002\u0a7f\u0a7a\u0003\u0002\u0002\u0002\u0a7f\u0a7b\u0003\u0002\u0002",
    "\u0002\u0a7f\u0a7c\u0003\u0002\u0002\u0002\u0a7f\u0a7d\u0003\u0002\u0002",
    "\u0002\u0a7f\u0a7e\u0003\u0002\u0002\u0002\u0a80\u01cd\u0003\u0002\u0002",
    "\u0002\u0a81\u0a82\u0005\u0124\u0093\u0002\u0a82\u01cf\u0003\u0002\u0002",
    "\u0002\u0a83\u0a84\u0005\u0164\u00b3\u0002\u0a84\u0a85\u0005\u01d4\u00eb",
    "\u0002\u0a85\u01d1\u0003\u0002\u0002\u0002\u0a86\u0a87\u0007\u0016\u0002",
    "\u0002\u0a87\u0a8a\u0005\u01d4\u00eb\u0002\u0a88\u0a8a\u0005\u01d8\u00ed",
    "\u0002\u0a89\u0a86\u0003\u0002\u0002\u0002\u0a89\u0a88\u0003\u0002\u0002",
    "\u0002\u0a8a\u01d3\u0003\u0002\u0002\u0002\u0a8b\u0a8c\u0005\u01e0\u00f1",
    "\u0002\u0a8c\u0a8e\u0007\u0017\u0002\u0002\u0a8d\u0a8f\u0005\u01d6\u00ec",
    "\u0002\u0a8e\u0a8d\u0003\u0002\u0002\u0002\u0a8e\u0a8f\u0003\u0002\u0002",
    "\u0002\u0a8f\u0a90\u0003\u0002\u0002\u0002\u0a90\u0a91\u0007\u0018\u0002",
    "\u0002\u0a91\u01d5\u0003\u0002\u0002\u0002\u0a92\u0a93\b\u00ec\u0001",
    "\u0002\u0a93\u0a94\u0005\u01ca\u00e6\u0002\u0a94\u0a9a\u0003\u0002\u0002",
    "\u0002\u0a95\u0a96\f\u0003\u0002\u0002\u0a96\u0a97\u0007\u0014\u0002",
    "\u0002\u0a97\u0a99\u0005\u01ca\u00e6\u0002\u0a98\u0a95\u0003\u0002\u0002",
    "\u0002\u0a99\u0a9c\u0003\u0002\u0002\u0002\u0a9a\u0a98\u0003\u0002\u0002",
    "\u0002\u0a9a\u0a9b\u0003\u0002\u0002\u0002\u0a9b\u01d7\u0003\u0002\u0002",
    "\u0002\u0a9c\u0a9a\u0003\u0002\u0002\u0002\u0a9d\u0a9e\u0007\u0019\u0002",
    "\u0002\u0a9e\u0a9f\u0005\u01ca\u00e6\u0002\u0a9f\u0aa0\u0007\u001a\u0002",
    "\u0002\u0aa0\u01d9\u0003\u0002\u0002\u0002\u0aa1\u0aa2\u0007\u0017\u0002",
    "\u0002\u0aa2\u0aa3\u0005\u01ca\u00e6\u0002\u0aa3\u0aa4\u0007\u0018\u0002",
    "\u0002\u0aa4\u01db\u0003\u0002\u0002\u0002\u0aa5\u0aa6\b\u00ef\u0001",
    "\u0002\u0aa6\u0aa9\u0007\u00b2\u0002\u0002\u0aa7\u0aa9\u0005\u01e0\u00f1",
    "\u0002\u0aa8\u0aa5\u0003\u0002\u0002\u0002\u0aa8\u0aa7\u0003\u0002\u0002",
    "\u0002\u0aa9\u0aaf\u0003\u0002\u0002\u0002\u0aaa\u0aab\f\u0003\u0002",
    "\u0002\u0aab\u0aac\u0007\u0016\u0002\u0002\u0aac\u0aae\u0005\u01e0\u00f1",
    "\u0002\u0aad\u0aaa\u0003\u0002\u0002\u0002\u0aae\u0ab1\u0003\u0002\u0002",
    "\u0002\u0aaf\u0aad\u0003\u0002\u0002\u0002\u0aaf\u0ab0\u0003\u0002\u0002",
    "\u0002\u0ab0\u01dd\u0003\u0002\u0002\u0002\u0ab1\u0aaf\u0003\u0002\u0002",
    "\u0002\u0ab2\u0ab8\u0007\u00b7\u0002\u0002\u0ab3\u0ab8\u0007\u00b9\u0002",
    "\u0002\u0ab4\u0ab8\u0007\u00b4\u0002\u0002\u0ab5\u0ab8\u0007\u00aa\u0002",
    "\u0002\u0ab6\u0ab8\u0007\u00ab\u0002\u0002\u0ab7\u0ab2\u0003\u0002\u0002",
    "\u0002\u0ab7\u0ab3\u0003\u0002\u0002\u0002\u0ab7\u0ab4\u0003\u0002\u0002",
    "\u0002\u0ab7\u0ab5\u0003\u0002\u0002\u0002\u0ab7\u0ab6\u0003\u0002\u0002",
    "\u0002\u0ab8\u01df\u0003\u0002\u0002\u0002\u0ab9\u0abf\u0007\u00b0\u0002",
    "\u0002\u0aba\u0abf\u0007\u00ae\u0002\u0002\u0abb\u0abf\u0007\u00b2\u0002",
    "\u0002\u0abc\u0abf\u0007\u00af\u0002\u0002\u0abd\u0abf\u0005\u0162\u00b2",
    "\u0002\u0abe\u0ab9\u0003\u0002\u0002\u0002\u0abe\u0aba\u0003\u0002\u0002",
    "\u0002\u0abe\u0abb\u0003\u0002\u0002\u0002\u0abe\u0abc\u0003\u0002\u0002",
    "\u0002\u0abe\u0abd\u0003\u0002\u0002\u0002\u0abf\u01e1\u0003\u0002\u0002",
    "\u0002\u0ac0\u0ac3\u0005\u01e4\u00f3\u0002\u0ac1\u0ac3\u0005\u01e6\u00f4",
    "\u0002\u0ac2\u0ac0\u0003\u0002\u0002\u0002\u0ac2\u0ac1\u0003\u0002\u0002",
    "\u0002\u0ac3\u01e3\u0003\u0002\u0002\u0002\u0ac4\u0acc\u0005\u01ec\u00f7",
    "\u0002\u0ac5\u0ac7\u0005\u01ee\u00f8\u0002\u0ac6\u0ac8\u0005\u01fa\u00fe",
    "\u0002\u0ac7\u0ac6\u0003\u0002\u0002\u0002\u0ac7\u0ac8\u0003\u0002\u0002",
    "\u0002\u0ac8\u0ac9\u0003\u0002\u0002\u0002\u0ac9\u0aca\u0005\u01f0\u00f9",
    "\u0002\u0aca\u0acc\u0003\u0002\u0002\u0002\u0acb\u0ac4\u0003\u0002\u0002",
    "\u0002\u0acb\u0ac5\u0003\u0002\u0002\u0002\u0acc\u01e5\u0003\u0002\u0002",
    "\u0002\u0acd\u0ace\u0005\u01e8\u00f5\u0002\u0ace\u0ad0\u0005\u0090I",
    "\u0002\u0acf\u0ad1\u0005\u01fa\u00fe\u0002\u0ad0\u0acf\u0003\u0002\u0002",
    "\u0002\u0ad0\u0ad1\u0003\u0002\u0002\u0002\u0ad1\u0ad2\u0003\u0002\u0002",
    "\u0002\u0ad2\u0ad3\u0005\u0090I\u0002\u0ad3\u0ad4\u0005\u01ea\u00f6",
    "\u0002\u0ad4\u01e7\u0003\u0002\u0002\u0002\u0ad5\u0ad6\u0007,\u0002",
    "\u0002\u0ad6\u0ad9\u0007*\u0002\u0002\u0ad7\u0ad9\u0007.\u0002\u0002",
    "\u0ad8\u0ad5\u0003\u0002\u0002\u0002\u0ad8\u0ad7\u0003\u0002\u0002\u0002",
    "\u0ad9\u01e9\u0003\u0002\u0002\u0002\u0ada\u0adb\u0007,\u0002\u0002",
    "\u0adb\u0adc\u0007&\u0002\u0002\u0adc\u0add\u0007*\u0002\u0002\u0add",
    "\u01eb\u0003\u0002\u0002\u0002\u0ade\u0adf\u0007,\u0002\u0002\u0adf",
    "\u0ae0\u0005\u01f2\u00fa\u0002\u0ae0\u0ae4\u0005\u0090I\u0002\u0ae1",
    "\u0ae3\u0005\u01f6\u00fc\u0002\u0ae2\u0ae1\u0003\u0002\u0002\u0002\u0ae3",
    "\u0ae6\u0003\u0002\u0002\u0002\u0ae4\u0ae2\u0003\u0002\u0002\u0002\u0ae4",
    "\u0ae5\u0003\u0002\u0002\u0002\u0ae5\u0ae7\u0003\u0002\u0002\u0002\u0ae6",
    "\u0ae4\u0003\u0002\u0002\u0002\u0ae7\u0ae8\u0007&\u0002\u0002\u0ae8",
    "\u0ae9\u0007*\u0002\u0002\u0ae9\u01ed\u0003\u0002\u0002\u0002\u0aea",
    "\u0aeb\u0007,\u0002\u0002\u0aeb\u0aec\u0005\u01f2\u00fa\u0002\u0aec",
    "\u0af0\u0005\u0090I\u0002\u0aed\u0aef\u0005\u01f6\u00fc\u0002\u0aee",
    "\u0aed\u0003\u0002\u0002\u0002\u0aef\u0af2\u0003\u0002\u0002\u0002\u0af0",
    "\u0aee\u0003\u0002\u0002\u0002\u0af0\u0af1\u0003\u0002\u0002\u0002\u0af1",
    "\u0af3\u0003\u0002\u0002\u0002\u0af2\u0af0\u0003\u0002\u0002\u0002\u0af3",
    "\u0af4\u0007*\u0002\u0002\u0af4\u01ef\u0003\u0002\u0002\u0002\u0af5",
    "\u0af6\u0007,\u0002\u0002\u0af6\u0af7\u0007&\u0002\u0002\u0af7\u0af8",
    "\u0005\u01f2\u00fa\u0002\u0af8\u0af9\u0007*\u0002\u0002\u0af9\u01f1",
    "\u0003\u0002\u0002\u0002\u0afa\u0aff\u0005\u01f4\u00fb\u0002\u0afb\u0afc",
    "\u0007\u0016\u0002\u0002\u0afc\u0afe\u0005\u01f4\u00fb\u0002\u0afd\u0afb",
    "\u0003\u0002\u0002\u0002\u0afe\u0b01\u0003\u0002\u0002\u0002\u0aff\u0afd",
    "\u0003\u0002\u0002\u0002\u0aff\u0b00\u0003\u0002\u0002\u0002\u0b00\u01f3",
    "\u0003\u0002\u0002\u0002\u0b01\u0aff\u0003\u0002\u0002\u0002\u0b02\u0b06",
    "\u0005\u00d6l\u0002\u0b03\u0b05\u0005\u00d8m\u0002\u0b04\u0b03\u0003",
    "\u0002\u0002\u0002\u0b05\u0b08\u0003\u0002\u0002\u0002\u0b06\u0b04\u0003",
    "\u0002\u0002\u0002\u0b06\u0b07\u0003\u0002\u0002\u0002\u0b07\u01f5\u0003",
    "\u0002\u0002\u0002\u0b08\u0b06\u0003\u0002\u0002\u0002\u0b09\u0b0c\u0005",
    "\u01f4\u00fb\u0002\u0b0a\u0b0b\u00070\u0002\u0002\u0b0b\u0b0d\u0005",
    "\u01f8\u00fd\u0002\u0b0c\u0b0a\u0003\u0002\u0002\u0002\u0b0c\u0b0d\u0003",
    "\u0002\u0002\u0002\u0b0d\u0b0e\u0003\u0002\u0002\u0002\u0b0e\u0b0f\u0005",
    "\u0090I\u0002\u0b0f\u01f7\u0003\u0002\u0002\u0002\u0b10\u0b16\u0007",
    "\u00b4\u0002\u0002\u0b11\u0b12\u0007\u001b\u0002\u0002\u0b12\u0b13\u0005",
    "\\/\u0002\u0b13\u0b14\u0007\u001c\u0002\u0002\u0b14\u0b16\u0003\u0002",
    "\u0002\u0002\u0b15\u0b10\u0003\u0002\u0002\u0002\u0b15\u0b11\u0003\u0002",
    "\u0002\u0002\u0b16\u01f9\u0003\u0002\u0002\u0002\u0b17\u0b19\u0005\u01fc",
    "\u00ff\u0002\u0b18\u0b17\u0003\u0002\u0002\u0002\u0b19\u0b1a\u0003\u0002",
    "\u0002\u0002\u0b1a\u0b18\u0003\u0002\u0002\u0002\u0b1a\u0b1b\u0003\u0002",
    "\u0002\u0002\u0b1b\u01fb\u0003\u0002\u0002\u0002\u0b1c\u0b24\u0005\u01fe",
    "\u0100\u0002\u0b1d\u0b24\u0005\u01e4\u00f3\u0002\u0b1e\u0b20\u0007\u001b",
    "\u0002\u0002\u0b1f\u0b21\u0005\\/\u0002\u0b20\u0b1f\u0003\u0002\u0002",
    "\u0002\u0b20\u0b21\u0003\u0002\u0002\u0002\u0b21\u0b22\u0003\u0002\u0002",
    "\u0002\u0b22\u0b24\u0007\u001c\u0002\u0002\u0b23\u0b1c\u0003\u0002\u0002",
    "\u0002\u0b23\u0b1d\u0003\u0002\u0002\u0002\u0b23\u0b1e\u0003\u0002\u0002",
    "\u0002\u0b24\u01fd\u0003\u0002\u0002\u0002\u0b25\u0b27\u0005\u0200\u0101",
    "\u0002\u0b26\u0b25\u0003\u0002\u0002\u0002\u0b27\u0b28\u0003\u0002\u0002",
    "\u0002\u0b28\u0b26\u0003\u0002\u0002\u0002\u0b28\u0b29\u0003\u0002\u0002",
    "\u0002\u0b29\u01ff\u0003\u0002\u0002\u0002\u0b2a\u0b2d\n\u0010\u0002",
    "\u0002\u0b2b\u0b2d\u0007\u00be\u0002\u0002\u0b2c\u0b2a\u0003\u0002\u0002",
    "\u0002\u0b2c\u0b2b\u0003\u0002\u0002\u0002\u0b2d\u0201\u0003\u0002\u0002",
    "\u0002\u0b2e\u0b30\u0007\u001b\u0002\u0002\u0b2f\u0b31\u0005\u0204\u0103",
    "\u0002\u0b30\u0b2f\u0003\u0002\u0002\u0002\u0b31\u0b32\u0003\u0002\u0002",
    "\u0002\u0b32\u0b30\u0003\u0002\u0002\u0002\u0b32\u0b33\u0003\u0002\u0002",
    "\u0002\u0b33\u0b34\u0003\u0002\u0002\u0002\u0b34\u0b35\u0007\u001c\u0002",
    "\u0002\u0b35\u0203\u0003\u0002\u0002\u0002\u0b36\u0b37\u0005\u0206\u0104",
    "\u0002\u0b37\u0b39\u0007\u0012\u0002\u0002\u0b38\u0b3a\u0005\u0208\u0105",
    "\u0002\u0b39\u0b38\u0003\u0002\u0002\u0002\u0b3a\u0b3b\u0003\u0002\u0002",
    "\u0002\u0b3b\u0b39\u0003\u0002\u0002\u0002\u0b3b\u0b3c\u0003\u0002\u0002",
    "\u0002\u0b3c\u0b3d\u0003\u0002\u0002\u0002\u0b3d\u0b3e\u0007\u0013\u0002",
    "\u0002\u0b3e\u0205\u0003\u0002\u0002\u0002\u0b3f\u0b40\b\u0104\u0001",
    "\u0002\u0b40\u0b44\u0005\u00d6l\u0002\u0b41\u0b42\u0007$\u0002\u0002",
    "\u0b42\u0b44\u0005\u00dan\u0002\u0b43\u0b3f\u0003\u0002\u0002\u0002",
    "\u0b43\u0b41\u0003\u0002\u0002\u0002\u0b44\u0b4d\u0003\u0002\u0002\u0002",
    "\u0b45\u0b47\f\u0003\u0002\u0002\u0b46\u0b48\u0005\u00d8m\u0002\u0b47",
    "\u0b46\u0003\u0002\u0002\u0002\u0b48\u0b49\u0003\u0002\u0002\u0002\u0b49",
    "\u0b47\u0003\u0002\u0002\u0002\u0b49\u0b4a\u0003\u0002\u0002\u0002\u0b4a",
    "\u0b4c\u0003\u0002\u0002\u0002\u0b4b\u0b45\u0003\u0002\u0002\u0002\u0b4c",
    "\u0b4f\u0003\u0002\u0002\u0002\u0b4d\u0b4b\u0003\u0002\u0002\u0002\u0b4d",
    "\u0b4e\u0003\u0002\u0002\u0002\u0b4e\u0207\u0003\u0002\u0002\u0002\u0b4f",
    "\u0b4d\u0003\u0002\u0002\u0002\u0b50\u0b51\u0007\u001b\u0002\u0002\u0b51",
    "\u0b52\u0005\\/\u0002\u0b52\u0b53\u0007\u001c\u0002\u0002\u0b53\u0b56",
    "\u0003\u0002\u0002\u0002\u0b54\u0b56\u0005\u020a\u0106\u0002\u0b55\u0b50",
    "\u0003\u0002\u0002\u0002\u0b55\u0b54\u0003\u0002\u0002\u0002\u0b56\u0209",
    "\u0003\u0002\u0002\u0002\u0b57\u0b59\n\u0011\u0002\u0002\u0b58\u0b57",
    "\u0003\u0002\u0002\u0002\u0b59\u0b5a\u0003\u0002\u0002\u0002\u0b5a\u0b58",
    "\u0003\u0002\u0002\u0002\u0b5a\u0b5b\u0003\u0002\u0002\u0002\u0b5b\u020b",
    "\u0003\u0002\u0002\u0002\u0114\u0212\u0215\u022e\u0233\u0241\u0247\u0249",
    "\u024b\u024f\u0254\u025c\u0263\u0274\u027f\u0286\u028a\u0295\u02a3\u02b7",
    "\u02ce\u02d9\u02e0\u02e9\u02ee\u02f5\u02fe\u0313\u031b\u0320\u0323\u0329",
    "\u032e\u0331\u0337\u033d\u0342\u0347\u035f\u036a\u036e\u0385\u0395\u039c",
    "\u03a4\u03ac\u03b1\u03b8\u03be\u03c5\u03e2\u03f5\u03fb\u041d\u0426\u043d",
    "\u044b\u0454\u045d\u0474\u047a\u0491\u04ae\u04b4\u04ba\u04d6\u04dc\u04e1",
    "\u04e8\u04ed\u04ef\u04f9\u0503\u050c\u0517\u0523\u0531\u0536\u053f\u0548",
    "\u054f\u0553\u055f\u0566\u056d\u0574\u0579\u0581\u0587\u0590\u0594\u0599",
    "\u059d\u05a2\u05a4\u05a9\u05af\u05ba\u05be\u05c3\u05c7\u05cc\u05cf\u05e1",
    "\u05ea\u05fa\u0603\u0609\u060e\u0614\u061b\u0628\u062d\u0631\u063c\u0644",
    "\u064c\u0655\u065f\u0662\u0666\u0672\u0678\u0680\u0689\u0691\u069e\u06a1",
    "\u06a5\u06aa\u06ae\u06b7\u06d1\u06da\u06dc\u06e1\u06f5\u06fa\u0703\u0707",
    "\u070e\u0713\u0717\u0723\u0734\u0739\u073c\u0740\u0745\u074c\u0757\u0759",
    "\u0762\u076a\u0772\u077a\u0782\u078a\u0792\u0798\u07a4\u07a8\u07b2\u07ba",
    "\u07be\u07c4\u07cb\u07d0\u07d7\u07df\u07e6\u07ee\u07fb\u07ff\u0802\u0806",
    "\u0809\u0811\u081a\u0823\u082c\u083d\u0842\u084b\u0856\u085d\u0865\u086f",
    "\u0877\u087a\u087e\u0883\u088d\u0891\u089c\u089f\u08a6\u08af\u08b6\u08bf",
    "\u08ca\u08d7\u08de\u08eb\u08f5\u08f8\u08fc\u0912\u091a\u091e\u0925\u092e",
    "\u0952\u095b\u0965\u0971\u0976\u0982\u0994\u099b\u09a0\u09a9\u09b1\u09bb",
    "\u09c0\u09ca\u09d4\u09e4\u09ee\u09f5\u09fd\u0a04\u0a0d\u0a16\u0a1e\u0a28",
    "\u0a2d\u0a39\u0a4c\u0a56\u0a5e\u0a65\u0a6e\u0a77\u0a7f\u0a89\u0a8e\u0a9a",
    "\u0aa8\u0aaf\u0ab7\u0abe\u0ac2\u0ac7\u0acb\u0ad0\u0ad8\u0ae4\u0af0\u0aff",
    "\u0b06\u0b0c\u0b15\u0b1a\u0b20\u0b23\u0b28\u0b2c\u0b32\u0b3b\u0b43\u0b49",
    "\u0b4d\u0b55\u0b5a"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class MParser extends AbstractParser {

    static grammarFileName = "MParser.g4";
    static literalNames = [ null, null, null, null, null, null, "'\t'", 
                            "' '", null, null, "'Java:'", "'C#:'", "'Python2:'", 
                            "'Python3:'", "'JavaScript:'", "'Swift:'", "':'", 
                            "';'", null, "'..'", null, null, null, null, 
                            null, null, null, null, "'!'", "'&'", "'&&'", 
                            "'|'", "'||'", null, "'-'", "'*'", "'/'", "'\\'", 
                            "'%'", "'#'", "'>'", "'>='", "'<'", "'<='", 
                            "'<>'", "'<:>'", "'='", "'!='", "'=='", "'~='", 
                            "'~'", "'<-'", "'->'", "'=>'", "'Boolean'", 
                            "'Css'", "'Character'", "'Text'", "'Integer'", 
                            "'Decimal'", "'Date'", "'Time'", "'DateTime'", 
                            "'Period'", "'Version'", "'Method:'", "'Code'", 
                            "'Document'", "'Blob'", "'Image'", "'Uuid'", 
                            "'DbId'", "'Iterator'", "'Cursor'", "'Html'", 
                            "'Type'", "'abstract'", "'all'", "'always'", 
                            "'and'", "'any'", "'as'", null, "'attr'", "'attribute'", 
                            "'attributes'", "'bindings'", "'break'", "'by'", 
                            "'case'", "'catch'", "'category'", "'class'", 
                            "'contains'", "'def'", "'default'", "'define'", 
                            "'delete'", null, "'do'", "'doing'", "'each'", 
                            "'else'", "'enum'", "'enumerated'", "'except'", 
                            "'execute'", "'expecting'", "'extends'", "'fetch'", 
                            "'filtered'", "'finally'", "'flush'", "'for'", 
                            "'from'", "'getter'", "'has'", "'if'", "'in'", 
                            "'include'", "'index'", "'invoke:'", "'is'", 
                            "'matching'", "'method'", "'methods'", "'modulo'", 
                            "'mutable'", "'native'", "'None'", "'not'", 
                            null, "'null'", "'on'", "'one'", "'operator'", 
                            "'or'", "'order'", "'otherwise'", "'pass'", 
                            "'raise'", "'read'", "'receiving'", "'resource'", 
                            "'return'", "'returning'", "'rows'", "'self'", 
                            "'setter'", "'singleton'", "'sorted'", "'storable'", 
                            "'store'", "'super'", "'switch'", "'test'", 
                            "'then'", "'this'", "'throw'", "'to'", "'try'", 
                            "'verifying'", "'widget'", "'with'", "'when'", 
                            "'where'", "'while'", "'write'", null, null, 
                            "'MIN_INTEGER'", "'MAX_INTEGER'" ];
    static symbolicNames = [ null, "INDENT", "DEDENT", "LF_TAB", "LF_MORE", 
                             "LF", "TAB", "WS", "CSS_DATA", "COMMENT", "JAVA", 
                             "CSHARP", "PYTHON2", "PYTHON3", "JAVASCRIPT", 
                             "SWIFT", "COLON", "SEMI", "COMMA", "RANGE", 
                             "DOT", "LPAR", "RPAR", "LBRAK", "RBRAK", "LCURL", 
                             "RCURL", "QMARK", "XMARK", "AMP", "AMP2", "PIPE", 
                             "PIPE2", "PLUS", "MINUS", "STAR", "SLASH", 
                             "BSLASH", "PERCENT", "SHARP", "GT", "GTE", 
                             "LT", "LTE", "LTGT", "LTCOLONGT", "EQ", "XEQ", 
                             "EQ2", "TEQ", "TILDE", "LARROW", "RARROW", 
                             "EGT", "BOOLEAN", "CSS", "CHARACTER", "TEXT", 
                             "INTEGER", "DECIMAL", "DATE", "TIME", "DATETIME", 
                             "PERIOD", "VERSION", "METHOD_COLON", "CODE", 
                             "DOCUMENT", "BLOB", "IMAGE", "UUID", "DBID", 
                             "ITERATOR", "CURSOR", "HTML", "TYPE", "ABSTRACT", 
                             "ALL", "ALWAYS", "AND", "ANY", "AS", "ASC", 
                             "ATTR", "ATTRIBUTE", "ATTRIBUTES", "BINDINGS", 
                             "BREAK", "BY", "CASE", "CATCH", "CATEGORY", 
                             "CLASS", "CONTAINS", "DEF", "DEFAULT", "DEFINE", 
                             "DELETE", "DESC", "DO", "DOING", "EACH", "ELSE", 
                             "ENUM", "ENUMERATED", "EXCEPT", "EXECUTE", 
                             "EXPECTING", "EXTENDS", "FETCH", "FILTERED", 
                             "FINALLY", "FLUSH", "FOR", "FROM", "GETTER", 
                             "HAS", "IF", "IN", "INCLUDE", "INDEX", "INVOKE_COLON", 
                             "IS", "MATCHING", "METHOD", "METHODS", "MODULO", 
                             "MUTABLE", "NATIVE", "NONE", "NOT", "NOTHING", 
                             "NULL", "ON", "ONE", "OPERATOR", "OR", "ORDER", 
                             "OTHERWISE", "PASS", "RAISE", "READ", "RECEIVING", 
                             "RESOURCE", "RETURN", "RETURNING", "ROWS", 
                             "SELF", "SETTER", "SINGLETON", "SORTED", "STORABLE", 
                             "STORE", "SUPER", "SWITCH", "TEST", "THEN", 
                             "THIS", "THROW", "TO", "TRY", "VERIFYING", 
                             "WIDGET", "WITH", "WHEN", "WHERE", "WHILE", 
                             "WRITE", "BOOLEAN_LITERAL", "CHAR_LITERAL", 
                             "MIN_INTEGER", "MAX_INTEGER", "SYMBOL_IDENTIFIER", 
                             "TYPE_IDENTIFIER", "VARIABLE_IDENTIFIER", "NATIVE_IDENTIFIER", 
                             "DOLLAR_IDENTIFIER", "ARONDBASE_IDENTIFIER", 
                             "TEXT_LITERAL", "UUID_LITERAL", "VERSION_LITERAL", 
                             "INTEGER_LITERAL", "HEXA_LITERAL", "DECIMAL_LITERAL", 
                             "DATETIME_LITERAL", "TIME_LITERAL", "DATE_LITERAL", 
                             "PERIOD_LITERAL", "JSX_TEXT" ];
    static ruleNames = [ "enum_category_declaration", "enum_native_declaration", 
                         "native_symbol", "category_symbol", "attribute_declaration", 
                         "index_clause", "concrete_widget_declaration", 
                         "native_widget_declaration", "concrete_category_declaration", 
                         "singleton_category_declaration", "derived_list", 
                         "operator_method_declaration", "setter_method_declaration", 
                         "native_setter_declaration", "getter_method_declaration", 
                         "native_getter_declaration", "native_category_declaration", 
                         "native_resource_declaration", "native_category_bindings", 
                         "native_category_binding_list", "abstract_method_declaration", 
                         "concrete_method_declaration", "native_method_declaration", 
                         "test_method_declaration", "assertion", "typed_argument", 
                         "statement", "flush_statement", "store_statement", 
                         "method_call_expression", "method_call_statement", 
                         "with_resource_statement", "with_singleton_statement", 
                         "switch_statement", "switch_case_statement", "for_each_statement", 
                         "do_while_statement", "while_statement", "if_statement", 
                         "else_if_statement_list", "raise_statement", "try_statement", 
                         "catch_statement", "break_statement", "return_statement", 
                         "expression", "filter_expression", "type_expression", 
                         "selectable_expression", "instance_expression", 
                         "mutable_instance_expression", "method_expression", 
                         "instance_selector", "blob_expression", "document_expression", 
                         "constructor_expression", "copy_from", "argument_assignment_list", 
                         "argument_assignment", "write_statement", "filtered_list_suffix", 
                         "fetch_expression", "fetch_statement", "then", 
                         "read_statement", "sorted_expression", "assign_instance_statement", 
                         "child_instance", "assign_tuple_statement", "lfs", 
                         "lfp", "ws_plus", "indent", "dedent", "type_literal", 
                         "null_literal", "comment_statement", "repl", "declaration_list", 
                         "declarations", "declaration", "annotation_constructor", 
                         "annotation_identifier", "annotation_argument", 
                         "annotation_argument_name", "annotation_argument_value", 
                         "resource_declaration", "enum_declaration", "native_symbol_list", 
                         "category_symbol_list", "symbol_list", "attribute_constraint", 
                         "list_literal", "set_literal", "expression_list", 
                         "range_literal", "typedef", "primary_type", "native_type", 
                         "category_type", "mutable_category_type", "code_type", 
                         "category_declaration", "widget_declaration", "type_identifier_list", 
                         "method_identifier", "identifier_or_keyword", "nospace_hyphen_identifier_or_keyword", 
                         "nospace_identifier_or_keyword", "identifier", 
                         "member_identifier", "variable_identifier", "attribute_identifier", 
                         "type_identifier", "symbol_identifier", "argument_list", 
                         "argument", "operator_argument", "named_argument", 
                         "code_argument", "category_or_any_type", "any_type", 
                         "member_method_declaration_list", "member_method_declaration", 
                         "native_member_method_declaration_list", "native_member_method_declaration", 
                         "native_category_binding", "python_category_binding", 
                         "python_module", "javascript_category_binding", 
                         "javascript_module", "variable_identifier_list", 
                         "attribute_identifier_list", "method_declaration", 
                         "native_statement_list", "native_statement", "python_native_statement", 
                         "javascript_native_statement", "statement_list", 
                         "assertion_list", "switch_case_statement_list", 
                         "catch_statement_list", "literal_collection", "atomic_literal", 
                         "literal_list_literal", "this_expression", "super_expression", 
                         "parenthesis_expression", "literal_expression", 
                         "collection_literal", "tuple_literal", "dict_literal", 
                         "document_literal", "expression_tuple", "doc_entry_list", 
                         "doc_entry", "doc_key", "dict_entry_list", "dict_entry", 
                         "dict_key", "slice_arguments", "assign_variable_statement", 
                         "assignable_instance", "is_expression", "metadata", 
                         "arrow_expression", "arrow_prefix", "arrow_args", 
                         "sorted_key", "read_blob_expression", "read_all_expression", 
                         "read_one_expression", "order_by_list", "order_by", 
                         "include_list", "operator", "keyword", "new_token", 
                         "key_token", "module_token", "value_token", "symbols_token", 
                         "assign", "multiply", "divide", "idivide", "modulo", 
                         "javascript_statement", "javascript_expression", 
                         "javascript_primary_expression", "javascript_this_expression", 
                         "javascript_new_expression", "javascript_selector_expression", 
                         "javascript_method_expression", "javascript_arguments", 
                         "javascript_item_expression", "javascript_parenthesis_expression", 
                         "javascript_identifier_expression", "javascript_literal_expression", 
                         "javascript_identifier", "python_statement", "python_expression", 
                         "python_primary_expression", "python_self_expression", 
                         "python_selector_expression", "python_method_expression", 
                         "python_argument_list", "python_ordinal_argument_list", 
                         "python_named_argument_list", "python_parenthesis_expression", 
                         "python_identifier_expression", "python_literal_expression", 
                         "python_identifier", "java_statement", "java_expression", 
                         "java_primary_expression", "java_this_expression", 
                         "java_new_expression", "java_selector_expression", 
                         "java_method_expression", "java_arguments", "java_item_expression", 
                         "java_parenthesis_expression", "java_identifier_expression", 
                         "java_class_identifier_expression", "java_literal_expression", 
                         "java_identifier", "csharp_statement", "csharp_expression", 
                         "csharp_primary_expression", "csharp_this_expression", 
                         "csharp_new_expression", "csharp_selector_expression", 
                         "csharp_method_expression", "csharp_arguments", 
                         "csharp_item_expression", "csharp_parenthesis_expression", 
                         "csharp_identifier_expression", "csharp_literal_expression", 
                         "csharp_identifier", "jsx_expression", "jsx_element", 
                         "jsx_fragment", "jsx_fragment_start", "jsx_fragment_end", 
                         "jsx_self_closing", "jsx_opening", "jsx_closing", 
                         "jsx_element_name", "jsx_identifier", "jsx_attribute", 
                         "jsx_attribute_value", "jsx_children", "jsx_child", 
                         "jsx_text", "jsx_char", "css_expression", "css_field", 
                         "css_identifier", "css_value", "css_text" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = MParser.ruleNames;
        this.literalNames = MParser.literalNames;
        this.symbolicNames = MParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 19:
    	    		return this.native_category_binding_list_sempred(localctx, predIndex);
    	case 39:
    	    		return this.else_if_statement_list_sempred(localctx, predIndex);
    	case 45:
    	    		return this.expression_sempred(localctx, predIndex);
    	case 49:
    	    		return this.instance_expression_sempred(localctx, predIndex);
    	case 50:
    	    		return this.mutable_instance_expression_sempred(localctx, predIndex);
    	case 56:
    	    		return this.copy_from_sempred(localctx, predIndex);
    	case 57:
    	    		return this.argument_assignment_list_sempred(localctx, predIndex);
    	case 67:
    	    		return this.child_instance_sempred(localctx, predIndex);
    	case 96:
    	    		return this.typedef_sempred(localctx, predIndex);
    	case 107:
    	    		return this.nospace_hyphen_identifier_or_keyword_sempred(localctx, predIndex);
    	case 108:
    	    		return this.nospace_identifier_or_keyword_sempred(localctx, predIndex);
    	case 121:
    	    		return this.any_type_sempred(localctx, predIndex);
    	case 162:
    	    		return this.assignable_instance_sempred(localctx, predIndex);
    	case 163:
    	    		return this.is_expression_sempred(localctx, predIndex);
    	case 164:
    	    		return this.metadata_sempred(localctx, predIndex);
    	case 177:
    	    		return this.new_token_sempred(localctx, predIndex);
    	case 178:
    	    		return this.key_token_sempred(localctx, predIndex);
    	case 179:
    	    		return this.module_token_sempred(localctx, predIndex);
    	case 180:
    	    		return this.value_token_sempred(localctx, predIndex);
    	case 181:
    	    		return this.symbols_token_sempred(localctx, predIndex);
    	case 188:
    	    		return this.javascript_expression_sempred(localctx, predIndex);
    	case 194:
    	    		return this.javascript_arguments_sempred(localctx, predIndex);
    	case 201:
    	    		return this.python_expression_sempred(localctx, predIndex);
    	case 207:
    	    		return this.python_ordinal_argument_list_sempred(localctx, predIndex);
    	case 208:
    	    		return this.python_named_argument_list_sempred(localctx, predIndex);
    	case 210:
    	    		return this.python_identifier_expression_sempred(localctx, predIndex);
    	case 214:
    	    		return this.java_expression_sempred(localctx, predIndex);
    	case 220:
    	    		return this.java_arguments_sempred(localctx, predIndex);
    	case 223:
    	    		return this.java_identifier_expression_sempred(localctx, predIndex);
    	case 224:
    	    		return this.java_class_identifier_expression_sempred(localctx, predIndex);
    	case 228:
    	    		return this.csharp_expression_sempred(localctx, predIndex);
    	case 234:
    	    		return this.csharp_arguments_sempred(localctx, predIndex);
    	case 237:
    	    		return this.csharp_identifier_expression_sempred(localctx, predIndex);
    	case 258:
    	    		return this.css_identifier_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    native_category_binding_list_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    else_if_statement_list_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 20);
    		case 3:
    			return this.precpred(this._ctx, 19);
    		case 4:
    			return this.precpred(this._ctx, 18);
    		case 5:
    			return this.precpred(this._ctx, 17);
    		case 6:
    			return this.precpred(this._ctx, 16);
    		case 7:
    			return this.precpred(this._ctx, 15);
    		case 8:
    			return this.precpred(this._ctx, 13);
    		case 9:
    			return this.precpred(this._ctx, 12);
    		case 10:
    			return this.precpred(this._ctx, 11);
    		case 11:
    			return this.precpred(this._ctx, 10);
    		case 12:
    			return this.precpred(this._ctx, 7);
    		case 13:
    			return this.precpred(this._ctx, 6);
    		case 14:
    			return this.precpred(this._ctx, 5);
    		case 15:
    			return this.precpred(this._ctx, 1);
    		case 16:
    			return this.precpred(this._ctx, 24);
    		case 17:
    			return this.precpred(this._ctx, 21);
    		case 18:
    			return this.precpred(this._ctx, 14);
    		case 19:
    			return this.precpred(this._ctx, 9);
    		case 20:
    			return this.precpred(this._ctx, 8);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    instance_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 21:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    mutable_instance_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 22:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    copy_from_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 23:
    			return this.willNotBe(this.equalToken());
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    argument_assignment_list_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 24:
    			return this.willNotBe(this.equalToken());
    		case 25:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    child_instance_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 26:
    			return this.wasNot(MParser.WS);
    		case 27:
    			return this.wasNot(MParser.WS);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    typedef_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 28:
    			return this.precpred(this._ctx, 6);
    		case 29:
    			return this.precpred(this._ctx, 5);
    		case 30:
    			return this.precpred(this._ctx, 4);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    nospace_hyphen_identifier_or_keyword_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 31:
    			return this.wasNotWhiteSpace();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    nospace_identifier_or_keyword_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 32:
    			return this.wasNotWhiteSpace();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    any_type_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 33:
    			return this.precpred(this._ctx, 2);
    		case 34:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    assignable_instance_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 35:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    is_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 36:
    			return this.willBeAOrAn();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    metadata_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 37:
    			return this.willBeText("metadata");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    new_token_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 38:
    			return this.isText(localctx.i1,"new");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    key_token_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 39:
    			return this.isText(localctx.i1,"key");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    module_token_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 40:
    			return this.isText(localctx.i1,"module");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    value_token_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 41:
    			return this.isText(localctx.i1,"value");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    symbols_token_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 42:
    			return this.isText(localctx.i1,"symbols");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    javascript_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 43:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    javascript_arguments_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 44:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    python_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 45:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    python_ordinal_argument_list_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 46:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    python_named_argument_list_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 47:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    python_identifier_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 48:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    java_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 49:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    java_arguments_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 50:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    java_identifier_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 51:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    java_class_identifier_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 52:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    csharp_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 53:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    csharp_arguments_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 54:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    csharp_identifier_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 55:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    css_identifier_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 56:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	enum_category_declaration() {
	    let localctx = new Enum_category_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, MParser.RULE_enum_category_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 522;
	        this.match(MParser.ENUM);
	        this.state = 523;
	        localctx.name = this.type_identifier();
	        this.state = 524;
	        this.match(MParser.LPAR);
	        this.state = 531;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.TYPE_IDENTIFIER:
	            this.state = 525;
	            localctx.derived = this.type_identifier();
	            this.state = 528;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MParser.COMMA) {
	                this.state = 526;
	                this.match(MParser.COMMA);
	                this.state = 527;
	                localctx.attrs = this.attribute_identifier_list();
	            }

	            break;
	        case MParser.RESOURCE:
	        case MParser.STORABLE:
	        case MParser.VARIABLE_IDENTIFIER:
	            this.state = 530;
	            localctx.attrs = this.attribute_identifier_list();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 533;
	        this.match(MParser.RPAR);
	        this.state = 534;
	        this.match(MParser.COLON);
	        this.state = 535;
	        this.indent();
	        this.state = 536;
	        localctx.symbols = this.category_symbol_list();
	        this.state = 537;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_native_declaration() {
	    let localctx = new Enum_native_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, MParser.RULE_enum_native_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 539;
	        this.match(MParser.ENUM);
	        this.state = 540;
	        localctx.name = this.type_identifier();
	        this.state = 541;
	        this.match(MParser.LPAR);
	        this.state = 542;
	        localctx.typ = this.native_type();
	        this.state = 543;
	        this.match(MParser.RPAR);
	        this.state = 544;
	        this.match(MParser.COLON);
	        this.state = 545;
	        this.indent();
	        this.state = 546;
	        localctx.symbols = this.native_symbol_list();
	        this.state = 547;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_symbol() {
	    let localctx = new Native_symbolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, MParser.RULE_native_symbol);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 549;
	        localctx.name = this.symbol_identifier();
	        this.state = 550;
	        this.match(MParser.EQ);
	        this.state = 551;
	        localctx.exp = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	category_symbol() {
	    let localctx = new Category_symbolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, MParser.RULE_category_symbol);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 553;
	        localctx.name = this.symbol_identifier();
	        this.state = 554;
	        this.match(MParser.LPAR);
	        this.state = 556;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 21)) & ~0x1f) == 0 && ((1 << (_la - 21)) & ((1 << (MParser.LPAR - 21)) | (1 << (MParser.LBRAK - 21)) | (1 << (MParser.LCURL - 21)) | (1 << (MParser.MINUS - 21)) | (1 << (MParser.LT - 21)) | (1 << (MParser.LTGT - 21)) | (1 << (MParser.LTCOLONGT - 21)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (MParser.BOOLEAN - 54)) | (1 << (MParser.CSS - 54)) | (1 << (MParser.CHARACTER - 54)) | (1 << (MParser.TEXT - 54)) | (1 << (MParser.INTEGER - 54)) | (1 << (MParser.DECIMAL - 54)) | (1 << (MParser.DATE - 54)) | (1 << (MParser.TIME - 54)) | (1 << (MParser.DATETIME - 54)) | (1 << (MParser.PERIOD - 54)) | (1 << (MParser.VERSION - 54)) | (1 << (MParser.CODE - 54)) | (1 << (MParser.DOCUMENT - 54)) | (1 << (MParser.BLOB - 54)) | (1 << (MParser.IMAGE - 54)) | (1 << (MParser.UUID - 54)) | (1 << (MParser.DBID - 54)) | (1 << (MParser.ITERATOR - 54)) | (1 << (MParser.CURSOR - 54)) | (1 << (MParser.HTML - 54)) | (1 << (MParser.TYPE - 54)) | (1 << (MParser.ANY - 54)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (MParser.CATEGORY - 91)) | (1 << (MParser.EXECUTE - 91)) | (1 << (MParser.FETCH - 91)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (MParser.MUTABLE - 127)) | (1 << (MParser.NONE - 127)) | (1 << (MParser.NOT - 127)) | (1 << (MParser.READ - 127)) | (1 << (MParser.RESOURCE - 127)) | (1 << (MParser.SELF - 127)) | (1 << (MParser.SORTED - 127)) | (1 << (MParser.SUPER - 127)) | (1 << (MParser.THIS - 127)))) !== 0) || ((((_la - 168)) & ~0x1f) == 0 && ((1 << (_la - 168)) & ((1 << (MParser.BOOLEAN_LITERAL - 168)) | (1 << (MParser.CHAR_LITERAL - 168)) | (1 << (MParser.MIN_INTEGER - 168)) | (1 << (MParser.MAX_INTEGER - 168)) | (1 << (MParser.SYMBOL_IDENTIFIER - 168)) | (1 << (MParser.TYPE_IDENTIFIER - 168)) | (1 << (MParser.VARIABLE_IDENTIFIER - 168)) | (1 << (MParser.TEXT_LITERAL - 168)) | (1 << (MParser.UUID_LITERAL - 168)) | (1 << (MParser.VERSION_LITERAL - 168)) | (1 << (MParser.INTEGER_LITERAL - 168)) | (1 << (MParser.HEXA_LITERAL - 168)) | (1 << (MParser.DECIMAL_LITERAL - 168)) | (1 << (MParser.DATETIME_LITERAL - 168)) | (1 << (MParser.TIME_LITERAL - 168)) | (1 << (MParser.DATE_LITERAL - 168)) | (1 << (MParser.PERIOD_LITERAL - 168)))) !== 0)) {
	            this.state = 555;
	            localctx.args = this.argument_assignment_list(0);
	        }

	        this.state = 558;
	        this.match(MParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_declaration() {
	    let localctx = new Attribute_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, MParser.RULE_attribute_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 561;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.STORABLE) {
	            this.state = 560;
	            this.match(MParser.STORABLE);
	        }

	        this.state = 563;
	        this.match(MParser.ATTR);
	        this.state = 564;
	        localctx.name = this.attribute_identifier();
	        this.state = 565;
	        this.match(MParser.LPAR);
	        this.state = 566;
	        localctx.typ = this.typedef(0);
	        this.state = 567;
	        this.match(MParser.RPAR);
	        this.state = 589;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.COLON) {
	            this.state = 568;
	            this.match(MParser.COLON);
	            this.state = 569;
	            this.indent();
	            this.state = 585;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MParser.PASS:
	                this.state = 570;
	                this.match(MParser.PASS);
	                break;
	            case MParser.IN:
	            case MParser.INDEX:
	            case MParser.MATCHING:
	                this.state = 583;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case MParser.IN:
	                case MParser.MATCHING:
	                    this.state = 571;
	                    localctx.match = this.attribute_constraint();
	                    this.state = 575;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	                    if(la_===1) {
	                        this.state = 572;
	                        this.lfp();
	                        this.state = 573;
	                        localctx.indices = this.index_clause();

	                    }
	                    break;
	                case MParser.INDEX:
	                    this.state = 577;
	                    localctx.indices = this.index_clause();
	                    this.state = 581;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	                    if(la_===1) {
	                        this.state = 578;
	                        this.lfp();
	                        this.state = 579;
	                        localctx.match = this.attribute_constraint();

	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 587;
	            this.dedent();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_clause() {
	    let localctx = new Index_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, MParser.RULE_index_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 591;
	        this.match(MParser.INDEX);
	        this.state = 592;
	        this.match(MParser.LPAR);
	        this.state = 594;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.CATEGORY || _la===MParser.RESOURCE || _la===MParser.VARIABLE_IDENTIFIER) {
	            this.state = 593;
	            localctx.indices = this.variable_identifier_list();
	        }

	        this.state = 596;
	        this.match(MParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	concrete_widget_declaration() {
	    let localctx = new Concrete_widget_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, MParser.RULE_concrete_widget_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 598;
	        this.match(MParser.WIDGET);
	        this.state = 599;
	        localctx.name = this.type_identifier();
	        this.state = 600;
	        this.match(MParser.LPAR);
	        this.state = 602;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.TYPE_IDENTIFIER) {
	            this.state = 601;
	            localctx.derived = this.type_identifier();
	        }

	        this.state = 604;
	        this.match(MParser.RPAR);
	        this.state = 605;
	        this.match(MParser.COLON);
	        this.state = 606;
	        this.indent();
	        this.state = 609;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.CSS_DATA:
	        case MParser.COMMENT:
	        case MParser.ABSTRACT:
	        case MParser.DEF:
	        case MParser.ARONDBASE_IDENTIFIER:
	            this.state = 607;
	            localctx.methods = this.member_method_declaration_list();
	            break;
	        case MParser.PASS:
	            this.state = 608;
	            this.match(MParser.PASS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 611;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_widget_declaration() {
	    let localctx = new Native_widget_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, MParser.RULE_native_widget_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 613;
	        this.match(MParser.NATIVE);
	        this.state = 614;
	        this.match(MParser.WIDGET);
	        this.state = 615;
	        localctx.name = this.type_identifier();
	        this.state = 616;
	        this.match(MParser.LPAR);
	        this.state = 617;
	        this.match(MParser.RPAR);
	        this.state = 618;
	        this.match(MParser.COLON);
	        this.state = 619;
	        this.indent();
	        this.state = 620;
	        localctx.bindings = this.native_category_bindings();
	        this.state = 621;
	        this.lfp();
	        this.state = 622;
	        localctx.methods = this.native_member_method_declaration_list();
	        this.state = 623;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	concrete_category_declaration() {
	    let localctx = new Concrete_category_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, MParser.RULE_concrete_category_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 626;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.STORABLE) {
	            this.state = 625;
	            this.match(MParser.STORABLE);
	        }

	        this.state = 628;
	        _la = this._input.LA(1);
	        if(!(_la===MParser.CATEGORY || _la===MParser.CLASS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 629;
	        localctx.name = this.type_identifier();
	        this.state = 630;
	        this.match(MParser.LPAR);
	        this.state = 637;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        if(la_===1) {
	            this.state = 631;
	            localctx.derived = this.derived_list();

	        } else if(la_===2) {
	            this.state = 632;
	            localctx.attrs = this.attribute_identifier_list();

	        } else if(la_===3) {
	            this.state = 633;
	            localctx.derived = this.derived_list();
	            this.state = 634;
	            this.match(MParser.COMMA);
	            this.state = 635;
	            localctx.attrs = this.attribute_identifier_list();

	        }
	        this.state = 639;
	        this.match(MParser.RPAR);
	        this.state = 648;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.COLON) {
	            this.state = 640;
	            this.match(MParser.COLON);
	            this.state = 641;
	            this.indent();
	            this.state = 644;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MParser.CSS_DATA:
	            case MParser.COMMENT:
	            case MParser.ABSTRACT:
	            case MParser.DEF:
	            case MParser.ARONDBASE_IDENTIFIER:
	                this.state = 642;
	                localctx.methods = this.member_method_declaration_list();
	                break;
	            case MParser.PASS:
	                this.state = 643;
	                this.match(MParser.PASS);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 646;
	            this.dedent();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleton_category_declaration() {
	    let localctx = new Singleton_category_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, MParser.RULE_singleton_category_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 650;
	        this.match(MParser.SINGLETON);
	        this.state = 651;
	        localctx.name = this.type_identifier();
	        this.state = 652;
	        this.match(MParser.LPAR);
	        this.state = 653;
	        localctx.attrs = this.attribute_identifier_list();
	        this.state = 654;
	        this.match(MParser.RPAR);
	        this.state = 655;
	        this.match(MParser.COLON);
	        this.state = 656;
	        this.indent();
	        this.state = 659;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.CSS_DATA:
	        case MParser.COMMENT:
	        case MParser.ABSTRACT:
	        case MParser.DEF:
	        case MParser.ARONDBASE_IDENTIFIER:
	            this.state = 657;
	            localctx.methods = this.member_method_declaration_list();
	            break;
	        case MParser.PASS:
	            this.state = 658;
	            this.match(MParser.PASS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 661;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	derived_list() {
	    let localctx = new Derived_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, MParser.RULE_derived_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 663;
	        localctx.items = this.type_identifier_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator_method_declaration() {
	    let localctx = new Operator_method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, MParser.RULE_operator_method_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 665;
	        this.match(MParser.DEF);
	        this.state = 666;
	        this.match(MParser.OPERATOR);
	        this.state = 667;
	        localctx.op = this.operator();
	        this.state = 668;
	        this.match(MParser.LPAR);
	        this.state = 669;
	        localctx.arg = this.operator_argument();
	        this.state = 670;
	        this.match(MParser.RPAR);
	        this.state = 673;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.RARROW) {
	            this.state = 671;
	            this.match(MParser.RARROW);
	            this.state = 672;
	            localctx.typ = this.typedef(0);
	        }

	        this.state = 675;
	        this.match(MParser.COLON);
	        this.state = 676;
	        this.indent();
	        this.state = 677;
	        localctx.stmts = this.statement_list();
	        this.state = 678;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setter_method_declaration() {
	    let localctx = new Setter_method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, MParser.RULE_setter_method_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 680;
	        this.match(MParser.DEF);
	        this.state = 681;
	        localctx.name = this.variable_identifier();
	        this.state = 682;
	        this.match(MParser.SETTER);
	        this.state = 683;
	        this.match(MParser.LPAR);
	        this.state = 684;
	        this.match(MParser.RPAR);
	        this.state = 685;
	        this.match(MParser.COLON);
	        this.state = 686;
	        this.indent();
	        this.state = 687;
	        localctx.stmts = this.statement_list();
	        this.state = 688;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_setter_declaration() {
	    let localctx = new Native_setter_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, MParser.RULE_native_setter_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 690;
	        this.match(MParser.DEF);
	        this.state = 691;
	        localctx.name = this.variable_identifier();
	        this.state = 693;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.NATIVE) {
	            this.state = 692;
	            this.match(MParser.NATIVE);
	        }

	        this.state = 695;
	        this.match(MParser.SETTER);
	        this.state = 696;
	        this.match(MParser.LPAR);
	        this.state = 697;
	        this.match(MParser.RPAR);
	        this.state = 698;
	        this.match(MParser.COLON);
	        this.state = 699;
	        this.indent();
	        this.state = 700;
	        localctx.stmts = this.native_statement_list();
	        this.state = 701;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getter_method_declaration() {
	    let localctx = new Getter_method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, MParser.RULE_getter_method_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 703;
	        this.match(MParser.DEF);
	        this.state = 704;
	        localctx.name = this.variable_identifier();
	        this.state = 705;
	        this.match(MParser.GETTER);
	        this.state = 706;
	        this.match(MParser.LPAR);
	        this.state = 707;
	        this.match(MParser.RPAR);
	        this.state = 708;
	        this.match(MParser.COLON);
	        this.state = 709;
	        this.indent();
	        this.state = 710;
	        localctx.stmts = this.statement_list();
	        this.state = 711;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_getter_declaration() {
	    let localctx = new Native_getter_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, MParser.RULE_native_getter_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 713;
	        this.match(MParser.DEF);
	        this.state = 714;
	        localctx.name = this.variable_identifier();
	        this.state = 716;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.NATIVE) {
	            this.state = 715;
	            this.match(MParser.NATIVE);
	        }

	        this.state = 718;
	        this.match(MParser.GETTER);
	        this.state = 719;
	        this.match(MParser.LPAR);
	        this.state = 720;
	        this.match(MParser.RPAR);
	        this.state = 721;
	        this.match(MParser.COLON);
	        this.state = 722;
	        this.indent();
	        this.state = 723;
	        localctx.stmts = this.native_statement_list();
	        this.state = 724;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_category_declaration() {
	    let localctx = new Native_category_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, MParser.RULE_native_category_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 727;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.STORABLE) {
	            this.state = 726;
	            this.match(MParser.STORABLE);
	        }

	        this.state = 729;
	        this.match(MParser.NATIVE);
	        this.state = 730;
	        _la = this._input.LA(1);
	        if(!(_la===MParser.CATEGORY || _la===MParser.CLASS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 731;
	        localctx.name = this.type_identifier();
	        this.state = 732;
	        this.match(MParser.LPAR);
	        this.state = 734;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 143)) & ~0x1f) == 0 && ((1 << (_la - 143)) & ((1 << (MParser.RESOURCE - 143)) | (1 << (MParser.STORABLE - 143)) | (1 << (MParser.VARIABLE_IDENTIFIER - 143)))) !== 0)) {
	            this.state = 733;
	            localctx.attrs = this.attribute_identifier_list();
	        }

	        this.state = 736;
	        this.match(MParser.RPAR);
	        this.state = 737;
	        this.match(MParser.COLON);
	        this.state = 738;
	        this.indent();
	        this.state = 739;
	        localctx.bindings = this.native_category_bindings();
	        this.state = 743;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        if(la_===1) {
	            this.state = 740;
	            this.lfp();
	            this.state = 741;
	            localctx.methods = this.native_member_method_declaration_list();

	        }
	        this.state = 745;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_resource_declaration() {
	    let localctx = new Native_resource_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, MParser.RULE_native_resource_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 748;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.STORABLE) {
	            this.state = 747;
	            this.match(MParser.STORABLE);
	        }

	        this.state = 750;
	        this.match(MParser.NATIVE);
	        this.state = 751;
	        this.match(MParser.RESOURCE);
	        this.state = 752;
	        localctx.name = this.type_identifier();
	        this.state = 753;
	        this.match(MParser.LPAR);
	        this.state = 755;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 143)) & ~0x1f) == 0 && ((1 << (_la - 143)) & ((1 << (MParser.RESOURCE - 143)) | (1 << (MParser.STORABLE - 143)) | (1 << (MParser.VARIABLE_IDENTIFIER - 143)))) !== 0)) {
	            this.state = 754;
	            localctx.attrs = this.attribute_identifier_list();
	        }

	        this.state = 757;
	        this.match(MParser.RPAR);
	        this.state = 758;
	        this.match(MParser.COLON);
	        this.state = 759;
	        this.indent();
	        this.state = 760;
	        localctx.bindings = this.native_category_bindings();
	        this.state = 764;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        if(la_===1) {
	            this.state = 761;
	            this.lfp();
	            this.state = 762;
	            localctx.methods = this.native_member_method_declaration_list();

	        }
	        this.state = 766;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_category_bindings() {
	    let localctx = new Native_category_bindingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, MParser.RULE_native_category_bindings);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 768;
	        this.match(MParser.DEF);
	        this.state = 769;
	        _la = this._input.LA(1);
	        if(!(_la===MParser.CATEGORY || _la===MParser.CLASS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 770;
	        this.match(MParser.BINDINGS);
	        this.state = 771;
	        this.match(MParser.COLON);
	        this.state = 772;
	        this.indent();
	        this.state = 773;
	        localctx.items = this.native_category_binding_list(0);
	        this.state = 774;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	native_category_binding_list(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Native_category_binding_listContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 38;
	    this.enterRecursionRule(localctx, 38, MParser.RULE_native_category_binding_list, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new NativeCategoryBindingListContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 777;
	        localctx.item = this.native_category_binding();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 785;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new NativeCategoryBindingListItemContext(this, new Native_category_binding_listContext(this, _parentctx, _parentState));
	                localctx.items = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_native_category_binding_list);
	                this.state = 779;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 780;
	                this.lfp();
	                this.state = 781;
	                localctx.item = this.native_category_binding(); 
	            }
	            this.state = 787;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	abstract_method_declaration() {
	    let localctx = new Abstract_method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, MParser.RULE_abstract_method_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 788;
	        this.match(MParser.ABSTRACT);
	        this.state = 789;
	        this.match(MParser.DEF);
	        this.state = 790;
	        localctx.name = this.method_identifier();
	        this.state = 791;
	        this.match(MParser.LPAR);
	        this.state = 793;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.CODE || _la===MParser.CATEGORY || _la===MParser.MUTABLE || _la===MParser.RESOURCE || _la===MParser.VARIABLE_IDENTIFIER) {
	            this.state = 792;
	            localctx.args = this.argument_list();
	        }

	        this.state = 795;
	        this.match(MParser.RPAR);
	        this.state = 801;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.RARROW) {
	            this.state = 796;
	            this.match(MParser.RARROW);
	            this.state = 798;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MParser.MUTABLE) {
	                this.state = 797;
	                this.match(MParser.MUTABLE);
	            }

	            this.state = 800;
	            localctx.typ = this.typedef(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	concrete_method_declaration() {
	    let localctx = new Concrete_method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, MParser.RULE_concrete_method_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 803;
	        this.match(MParser.DEF);
	        this.state = 804;
	        localctx.name = this.method_identifier();
	        this.state = 805;
	        this.match(MParser.LPAR);
	        this.state = 807;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.CODE || _la===MParser.CATEGORY || _la===MParser.MUTABLE || _la===MParser.RESOURCE || _la===MParser.VARIABLE_IDENTIFIER) {
	            this.state = 806;
	            localctx.args = this.argument_list();
	        }

	        this.state = 809;
	        this.match(MParser.RPAR);
	        this.state = 815;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.RARROW) {
	            this.state = 810;
	            this.match(MParser.RARROW);
	            this.state = 812;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MParser.MUTABLE) {
	                this.state = 811;
	                this.match(MParser.MUTABLE);
	            }

	            this.state = 814;
	            localctx.typ = this.typedef(0);
	        }

	        this.state = 817;
	        this.match(MParser.COLON);
	        this.state = 818;
	        this.indent();
	        this.state = 821;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.CSS_DATA:
	        case MParser.COMMENT:
	        case MParser.LPAR:
	        case MParser.LBRAK:
	        case MParser.LCURL:
	        case MParser.MINUS:
	        case MParser.LT:
	        case MParser.LTCOLONGT:
	        case MParser.BOOLEAN:
	        case MParser.CSS:
	        case MParser.CHARACTER:
	        case MParser.TEXT:
	        case MParser.INTEGER:
	        case MParser.DECIMAL:
	        case MParser.DATE:
	        case MParser.TIME:
	        case MParser.DATETIME:
	        case MParser.PERIOD:
	        case MParser.VERSION:
	        case MParser.CODE:
	        case MParser.DOCUMENT:
	        case MParser.BLOB:
	        case MParser.IMAGE:
	        case MParser.UUID:
	        case MParser.DBID:
	        case MParser.ITERATOR:
	        case MParser.CURSOR:
	        case MParser.HTML:
	        case MParser.TYPE:
	        case MParser.ANY:
	        case MParser.BREAK:
	        case MParser.CATEGORY:
	        case MParser.DEF:
	        case MParser.DELETE:
	        case MParser.DO:
	        case MParser.FETCH:
	        case MParser.FLUSH:
	        case MParser.FOR:
	        case MParser.IF:
	        case MParser.MUTABLE:
	        case MParser.NONE:
	        case MParser.RAISE:
	        case MParser.READ:
	        case MParser.RESOURCE:
	        case MParser.RETURN:
	        case MParser.SELF:
	        case MParser.SORTED:
	        case MParser.STORE:
	        case MParser.SUPER:
	        case MParser.SWITCH:
	        case MParser.THIS:
	        case MParser.TRY:
	        case MParser.WITH:
	        case MParser.WHILE:
	        case MParser.WRITE:
	        case MParser.BOOLEAN_LITERAL:
	        case MParser.CHAR_LITERAL:
	        case MParser.MIN_INTEGER:
	        case MParser.MAX_INTEGER:
	        case MParser.SYMBOL_IDENTIFIER:
	        case MParser.TYPE_IDENTIFIER:
	        case MParser.VARIABLE_IDENTIFIER:
	        case MParser.TEXT_LITERAL:
	        case MParser.UUID_LITERAL:
	        case MParser.VERSION_LITERAL:
	        case MParser.INTEGER_LITERAL:
	        case MParser.HEXA_LITERAL:
	        case MParser.DECIMAL_LITERAL:
	        case MParser.DATETIME_LITERAL:
	        case MParser.TIME_LITERAL:
	        case MParser.DATE_LITERAL:
	        case MParser.PERIOD_LITERAL:
	            this.state = 819;
	            localctx.stmts = this.statement_list();
	            break;
	        case MParser.PASS:
	            this.state = 820;
	            this.match(MParser.PASS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 823;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_method_declaration() {
	    let localctx = new Native_method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, MParser.RULE_native_method_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 825;
	        this.match(MParser.DEF);
	        this.state = 827;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.NATIVE) {
	            this.state = 826;
	            this.match(MParser.NATIVE);
	        }

	        this.state = 829;
	        localctx.name = this.method_identifier();
	        this.state = 830;
	        this.match(MParser.LPAR);
	        this.state = 832;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.CODE || _la===MParser.CATEGORY || _la===MParser.MUTABLE || _la===MParser.RESOURCE || _la===MParser.VARIABLE_IDENTIFIER) {
	            this.state = 831;
	            localctx.args = this.argument_list();
	        }

	        this.state = 834;
	        this.match(MParser.RPAR);
	        this.state = 837;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.RARROW) {
	            this.state = 835;
	            this.match(MParser.RARROW);
	            this.state = 836;
	            localctx.typ = this.category_or_any_type();
	        }

	        this.state = 839;
	        this.match(MParser.COLON);
	        this.state = 840;
	        this.indent();
	        this.state = 841;
	        localctx.stmts = this.native_statement_list();
	        this.state = 842;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	test_method_declaration() {
	    let localctx = new Test_method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, MParser.RULE_test_method_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 844;
	        this.match(MParser.DEF);
	        this.state = 845;
	        this.match(MParser.TEST);
	        this.state = 846;
	        localctx.name = this.match(MParser.TEXT_LITERAL);
	        this.state = 847;
	        this.match(MParser.LPAR);
	        this.state = 848;
	        this.match(MParser.RPAR);
	        this.state = 849;
	        this.match(MParser.COLON);
	        this.state = 850;
	        this.indent();
	        this.state = 851;
	        localctx.stmts = this.statement_list();
	        this.state = 852;
	        this.dedent();
	        this.state = 853;
	        this.lfp();
	        this.state = 854;
	        this.match(MParser.VERIFYING);
	        this.state = 855;
	        this.match(MParser.COLON);
	        this.state = 861;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.LF:
	            this.state = 856;
	            this.indent();
	            this.state = 857;
	            localctx.exps = this.assertion_list();
	            this.state = 858;
	            this.dedent();
	            break;
	        case MParser.SYMBOL_IDENTIFIER:
	            this.state = 860;
	            localctx.error = this.symbol_identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertion() {
	    let localctx = new AssertionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, MParser.RULE_assertion);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 863;
	        localctx.exp = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typed_argument() {
	    let localctx = new Typed_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, MParser.RULE_typed_argument);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 865;
	        localctx.name = this.variable_identifier();
	        this.state = 866;
	        this.match(MParser.COLON);
	        this.state = 867;
	        localctx.typ = this.category_or_any_type();
	        this.state = 872;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.LPAR) {
	            this.state = 868;
	            this.match(MParser.LPAR);
	            this.state = 869;
	            localctx.attrs = this.attribute_identifier_list();
	            this.state = 870;
	            this.match(MParser.RPAR);
	        }

	        this.state = 876;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.EQ) {
	            this.state = 874;
	            this.match(MParser.EQ);
	            this.state = 875;
	            localctx.value = this.literal_expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, MParser.RULE_statement);
	    try {
	        this.state = 899;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new MethodCallStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 878;
	            localctx.stmt = this.method_call_statement();
	            break;

	        case 2:
	            localctx = new AssignInstanceStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 879;
	            localctx.stmt = this.assign_instance_statement();
	            break;

	        case 3:
	            localctx = new AssignTupleStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 880;
	            localctx.stmt = this.assign_tuple_statement();
	            break;

	        case 4:
	            localctx = new StoreStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 881;
	            localctx.stmt = this.store_statement();
	            break;

	        case 5:
	            localctx = new FetchStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 882;
	            localctx.stmt = this.fetch_statement();
	            break;

	        case 6:
	            localctx = new ReadStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 883;
	            localctx.stmt = this.read_statement();
	            break;

	        case 7:
	            localctx = new FlushStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 884;
	            localctx.stmt = this.flush_statement();
	            break;

	        case 8:
	            localctx = new BreakStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 885;
	            localctx.stmt = this.break_statement();
	            break;

	        case 9:
	            localctx = new ReturnStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 886;
	            localctx.stmt = this.return_statement();
	            break;

	        case 10:
	            localctx = new IfStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 887;
	            localctx.stmt = this.if_statement();
	            break;

	        case 11:
	            localctx = new SwitchStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 888;
	            localctx.stmt = this.switch_statement();
	            break;

	        case 12:
	            localctx = new ForEachStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 889;
	            localctx.stmt = this.for_each_statement();
	            break;

	        case 13:
	            localctx = new WhileStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 890;
	            localctx.stmt = this.while_statement();
	            break;

	        case 14:
	            localctx = new DoWhileStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 891;
	            localctx.stmt = this.do_while_statement();
	            break;

	        case 15:
	            localctx = new RaiseStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 892;
	            localctx.stmt = this.raise_statement();
	            break;

	        case 16:
	            localctx = new TryStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 893;
	            localctx.stmt = this.try_statement();
	            break;

	        case 17:
	            localctx = new WriteStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 894;
	            localctx.stmt = this.write_statement();
	            break;

	        case 18:
	            localctx = new WithResourceStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 895;
	            localctx.stmt = this.with_resource_statement();
	            break;

	        case 19:
	            localctx = new WithSingletonStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 896;
	            localctx.stmt = this.with_singleton_statement();
	            break;

	        case 20:
	            localctx = new ClosureStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 897;
	            localctx.decl = this.concrete_method_declaration();
	            break;

	        case 21:
	            localctx = new CommentStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 898;
	            localctx.decl = this.comment_statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flush_statement() {
	    let localctx = new Flush_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, MParser.RULE_flush_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 901;
	        this.match(MParser.FLUSH);
	        this.state = 902;
	        this.match(MParser.LPAR);
	        this.state = 903;
	        this.match(MParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	store_statement() {
	    let localctx = new Store_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, MParser.RULE_store_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 922;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.DELETE:
	            this.state = 905;
	            this.match(MParser.DELETE);
	            this.state = 906;
	            this.match(MParser.LPAR);
	            this.state = 907;
	            localctx.to_del = this.expression_list();
	            this.state = 908;
	            this.match(MParser.RPAR);
	            this.state = 915;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MParser.AND) {
	                this.state = 909;
	                this.match(MParser.AND);
	                this.state = 910;
	                this.match(MParser.STORE);
	                this.state = 911;
	                this.match(MParser.LPAR);
	                this.state = 912;
	                localctx.to_add = this.expression_list();
	                this.state = 913;
	                this.match(MParser.RPAR);
	            }

	            break;
	        case MParser.STORE:
	            this.state = 917;
	            this.match(MParser.STORE);
	            this.state = 918;
	            this.match(MParser.LPAR);
	            this.state = 919;
	            localctx.to_add = this.expression_list();
	            this.state = 920;
	            this.match(MParser.RPAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 930;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.WITH) {
	            this.state = 924;
	            this.match(MParser.WITH);
	            this.state = 925;
	            this.metadata();
	            this.state = 926;
	            this.match(MParser.LPAR);
	            this.state = 927;
	            localctx.with_meta = this.expression(0);
	            this.state = 928;
	            this.match(MParser.RPAR);
	        }

	        this.state = 938;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.THEN) {
	            this.state = 932;
	            this.match(MParser.THEN);
	            this.state = 933;
	            this.match(MParser.COLON);
	            this.state = 934;
	            this.indent();
	            this.state = 935;
	            localctx.stmts = this.statement_list();
	            this.state = 936;
	            this.dedent();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	method_call_expression() {
	    let localctx = new Method_call_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, MParser.RULE_method_call_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 940;
	        localctx.name = this.method_identifier();
	        this.state = 941;
	        this.match(MParser.LPAR);
	        this.state = 943;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 21)) & ~0x1f) == 0 && ((1 << (_la - 21)) & ((1 << (MParser.LPAR - 21)) | (1 << (MParser.LBRAK - 21)) | (1 << (MParser.LCURL - 21)) | (1 << (MParser.MINUS - 21)) | (1 << (MParser.LT - 21)) | (1 << (MParser.LTGT - 21)) | (1 << (MParser.LTCOLONGT - 21)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (MParser.BOOLEAN - 54)) | (1 << (MParser.CSS - 54)) | (1 << (MParser.CHARACTER - 54)) | (1 << (MParser.TEXT - 54)) | (1 << (MParser.INTEGER - 54)) | (1 << (MParser.DECIMAL - 54)) | (1 << (MParser.DATE - 54)) | (1 << (MParser.TIME - 54)) | (1 << (MParser.DATETIME - 54)) | (1 << (MParser.PERIOD - 54)) | (1 << (MParser.VERSION - 54)) | (1 << (MParser.CODE - 54)) | (1 << (MParser.DOCUMENT - 54)) | (1 << (MParser.BLOB - 54)) | (1 << (MParser.IMAGE - 54)) | (1 << (MParser.UUID - 54)) | (1 << (MParser.DBID - 54)) | (1 << (MParser.ITERATOR - 54)) | (1 << (MParser.CURSOR - 54)) | (1 << (MParser.HTML - 54)) | (1 << (MParser.TYPE - 54)) | (1 << (MParser.ANY - 54)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (MParser.CATEGORY - 91)) | (1 << (MParser.EXECUTE - 91)) | (1 << (MParser.FETCH - 91)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (MParser.MUTABLE - 127)) | (1 << (MParser.NONE - 127)) | (1 << (MParser.NOT - 127)) | (1 << (MParser.READ - 127)) | (1 << (MParser.RESOURCE - 127)) | (1 << (MParser.SELF - 127)) | (1 << (MParser.SORTED - 127)) | (1 << (MParser.SUPER - 127)) | (1 << (MParser.THIS - 127)))) !== 0) || ((((_la - 168)) & ~0x1f) == 0 && ((1 << (_la - 168)) & ((1 << (MParser.BOOLEAN_LITERAL - 168)) | (1 << (MParser.CHAR_LITERAL - 168)) | (1 << (MParser.MIN_INTEGER - 168)) | (1 << (MParser.MAX_INTEGER - 168)) | (1 << (MParser.SYMBOL_IDENTIFIER - 168)) | (1 << (MParser.TYPE_IDENTIFIER - 168)) | (1 << (MParser.VARIABLE_IDENTIFIER - 168)) | (1 << (MParser.TEXT_LITERAL - 168)) | (1 << (MParser.UUID_LITERAL - 168)) | (1 << (MParser.VERSION_LITERAL - 168)) | (1 << (MParser.INTEGER_LITERAL - 168)) | (1 << (MParser.HEXA_LITERAL - 168)) | (1 << (MParser.DECIMAL_LITERAL - 168)) | (1 << (MParser.DATETIME_LITERAL - 168)) | (1 << (MParser.TIME_LITERAL - 168)) | (1 << (MParser.DATE_LITERAL - 168)) | (1 << (MParser.PERIOD_LITERAL - 168)))) !== 0)) {
	            this.state = 942;
	            localctx.args = this.argument_assignment_list(0);
	        }

	        this.state = 945;
	        this.match(MParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	method_call_statement() {
	    let localctx = new Method_call_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, MParser.RULE_method_call_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 950;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        if(la_===1) {
	            this.state = 947;
	            localctx.parent = this.instance_expression(0);
	            this.state = 948;
	            this.match(MParser.DOT);

	        }
	        this.state = 952;
	        localctx.method = this.method_call_expression();
	        this.state = 963;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.THEN) {
	            this.state = 953;
	            this.match(MParser.THEN);
	            this.state = 956;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MParser.WITH) {
	                this.state = 954;
	                this.match(MParser.WITH);
	                this.state = 955;
	                localctx.name = this.variable_identifier();
	            }

	            this.state = 958;
	            this.match(MParser.COLON);
	            this.state = 959;
	            this.indent();
	            this.state = 960;
	            localctx.stmts = this.statement_list();
	            this.state = 961;
	            this.dedent();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_resource_statement() {
	    let localctx = new With_resource_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, MParser.RULE_with_resource_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 965;
	        this.match(MParser.WITH);
	        this.state = 966;
	        localctx.stmt = this.assign_variable_statement();
	        this.state = 967;
	        this.match(MParser.COLON);
	        this.state = 968;
	        this.indent();
	        this.state = 969;
	        localctx.stmts = this.statement_list();
	        this.state = 970;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_singleton_statement() {
	    let localctx = new With_singleton_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, MParser.RULE_with_singleton_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 972;
	        this.match(MParser.WITH);
	        this.state = 973;
	        localctx.typ = this.type_identifier();
	        this.state = 974;
	        this.match(MParser.COLON);
	        this.state = 975;
	        this.indent();
	        this.state = 976;
	        localctx.stmts = this.statement_list();
	        this.state = 977;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_statement() {
	    let localctx = new Switch_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, MParser.RULE_switch_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 979;
	        this.match(MParser.SWITCH);
	        this.state = 980;
	        this.match(MParser.ON);
	        this.state = 981;
	        localctx.exp = this.expression(0);
	        this.state = 982;
	        this.match(MParser.COLON);
	        this.state = 983;
	        this.indent();
	        this.state = 984;
	        localctx.cases = this.switch_case_statement_list();
	        this.state = 992;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        if(la_===1) {
	            this.state = 985;
	            this.lfp();
	            this.state = 986;
	            this.match(MParser.OTHERWISE);
	            this.state = 987;
	            this.match(MParser.COLON);
	            this.state = 988;
	            this.indent();
	            this.state = 989;
	            localctx.stmts = this.statement_list();
	            this.state = 990;
	            this.dedent();

	        }
	        this.state = 994;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_case_statement() {
	    let localctx = new Switch_case_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, MParser.RULE_switch_case_statement);
	    try {
	        this.state = 1011;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AtomicSwitchCaseContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 996;
	            this.match(MParser.WHEN);
	            this.state = 997;
	            localctx.exp = this.atomic_literal();
	            this.state = 998;
	            this.match(MParser.COLON);
	            this.state = 999;
	            this.indent();
	            this.state = 1000;
	            localctx.stmts = this.statement_list();
	            this.state = 1001;
	            this.dedent();
	            break;

	        case 2:
	            localctx = new CollectionSwitchCaseContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1003;
	            this.match(MParser.WHEN);
	            this.state = 1004;
	            this.match(MParser.IN);
	            this.state = 1005;
	            localctx.exp = this.literal_collection();
	            this.state = 1006;
	            this.match(MParser.COLON);
	            this.state = 1007;
	            this.indent();
	            this.state = 1008;
	            localctx.stmts = this.statement_list();
	            this.state = 1009;
	            this.dedent();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_each_statement() {
	    let localctx = new For_each_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, MParser.RULE_for_each_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1013;
	        this.match(MParser.FOR);
	        this.state = 1014;
	        localctx.name1 = this.variable_identifier();
	        this.state = 1017;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.COMMA) {
	            this.state = 1015;
	            this.match(MParser.COMMA);
	            this.state = 1016;
	            localctx.name2 = this.variable_identifier();
	        }

	        this.state = 1019;
	        this.match(MParser.IN);
	        this.state = 1020;
	        localctx.source = this.expression(0);
	        this.state = 1021;
	        this.match(MParser.COLON);
	        this.state = 1022;
	        this.indent();
	        this.state = 1023;
	        localctx.stmts = this.statement_list();
	        this.state = 1024;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	do_while_statement() {
	    let localctx = new Do_while_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, MParser.RULE_do_while_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1026;
	        this.match(MParser.DO);
	        this.state = 1027;
	        this.match(MParser.COLON);
	        this.state = 1028;
	        this.indent();
	        this.state = 1029;
	        localctx.stmts = this.statement_list();
	        this.state = 1030;
	        this.dedent();
	        this.state = 1031;
	        this.lfp();
	        this.state = 1032;
	        this.match(MParser.WHILE);
	        this.state = 1033;
	        localctx.exp = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	while_statement() {
	    let localctx = new While_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, MParser.RULE_while_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1035;
	        this.match(MParser.WHILE);
	        this.state = 1036;
	        localctx.exp = this.expression(0);
	        this.state = 1037;
	        this.match(MParser.COLON);
	        this.state = 1038;
	        this.indent();
	        this.state = 1039;
	        localctx.stmts = this.statement_list();
	        this.state = 1040;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_statement() {
	    let localctx = new If_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, MParser.RULE_if_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1042;
	        this.match(MParser.IF);
	        this.state = 1043;
	        localctx.exp = this.expression(0);
	        this.state = 1044;
	        this.match(MParser.COLON);
	        this.state = 1045;
	        this.indent();
	        this.state = 1046;
	        localctx.stmts = this.statement_list();
	        this.state = 1047;
	        this.dedent();
	        this.state = 1051;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	        if(la_===1) {
	            this.state = 1048;
	            this.lfp();
	            this.state = 1049;
	            localctx.elseIfs = this.else_if_statement_list(0);

	        }
	        this.state = 1060;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        if(la_===1) {
	            this.state = 1053;
	            this.lfp();
	            this.state = 1054;
	            this.match(MParser.ELSE);
	            this.state = 1055;
	            this.match(MParser.COLON);
	            this.state = 1056;
	            this.indent();
	            this.state = 1057;
	            localctx.elseStmts = this.statement_list();
	            this.state = 1058;
	            this.dedent();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	else_if_statement_list(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Else_if_statement_listContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 78;
	    this.enterRecursionRule(localctx, 78, MParser.RULE_else_if_statement_list, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new ElseIfStatementListContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 1063;
	        this.match(MParser.ELSE);
	        this.state = 1064;
	        this.match(MParser.IF);
	        this.state = 1065;
	        localctx.exp = this.expression(0);
	        this.state = 1066;
	        this.match(MParser.COLON);
	        this.state = 1067;
	        this.indent();
	        this.state = 1068;
	        localctx.stmts = this.statement_list();
	        this.state = 1069;
	        this.dedent();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1083;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ElseIfStatementListItemContext(this, new Else_if_statement_listContext(this, _parentctx, _parentState));
	                localctx.items = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_else_if_statement_list);
	                this.state = 1071;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1072;
	                this.lfp();
	                this.state = 1073;
	                this.match(MParser.ELSE);
	                this.state = 1074;
	                this.match(MParser.IF);
	                this.state = 1075;
	                localctx.exp = this.expression(0);
	                this.state = 1076;
	                this.match(MParser.COLON);
	                this.state = 1077;
	                this.indent();
	                this.state = 1078;
	                localctx.stmts = this.statement_list();
	                this.state = 1079;
	                this.dedent(); 
	            }
	            this.state = 1085;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	raise_statement() {
	    let localctx = new Raise_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, MParser.RULE_raise_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1086;
	        this.match(MParser.RAISE);
	        this.state = 1087;
	        localctx.exp = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	try_statement() {
	    let localctx = new Try_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, MParser.RULE_try_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1089;
	        this.match(MParser.TRY);
	        this.state = 1090;
	        localctx.name = this.variable_identifier();
	        this.state = 1091;
	        this.match(MParser.COLON);
	        this.state = 1092;
	        this.indent();
	        this.state = 1093;
	        localctx.stmts = this.statement_list();
	        this.state = 1094;
	        this.dedent();
	        this.state = 1095;
	        this.lfs();
	        this.state = 1097;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	        if(la_===1) {
	            this.state = 1096;
	            localctx.handlers = this.catch_statement_list();

	        }
	        this.state = 1106;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.EXCEPT) {
	            this.state = 1099;
	            this.match(MParser.EXCEPT);
	            this.state = 1100;
	            this.match(MParser.COLON);
	            this.state = 1101;
	            this.indent();
	            this.state = 1102;
	            localctx.anyStmts = this.statement_list();
	            this.state = 1103;
	            this.dedent();
	            this.state = 1104;
	            this.lfs();
	        }

	        this.state = 1115;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.FINALLY) {
	            this.state = 1108;
	            this.match(MParser.FINALLY);
	            this.state = 1109;
	            this.match(MParser.COLON);
	            this.state = 1110;
	            this.indent();
	            this.state = 1111;
	            localctx.finalStmts = this.statement_list();
	            this.state = 1112;
	            this.dedent();
	            this.state = 1113;
	            this.lfs();
	        }

	        this.state = 1117;
	        this.lfs();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catch_statement() {
	    let localctx = new Catch_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, MParser.RULE_catch_statement);
	    try {
	        this.state = 1138;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CatchAtomicStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1119;
	            this.match(MParser.EXCEPT);
	            this.state = 1120;
	            localctx.name = this.symbol_identifier();
	            this.state = 1121;
	            this.match(MParser.COLON);
	            this.state = 1122;
	            this.indent();
	            this.state = 1123;
	            localctx.stmts = this.statement_list();
	            this.state = 1124;
	            this.dedent();
	            this.state = 1125;
	            this.lfs();
	            break;

	        case 2:
	            localctx = new CatchCollectionStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1127;
	            this.match(MParser.EXCEPT);
	            this.state = 1128;
	            this.match(MParser.IN);
	            this.state = 1129;
	            this.match(MParser.LBRAK);
	            this.state = 1130;
	            localctx.exp = this.symbol_list();
	            this.state = 1131;
	            this.match(MParser.RBRAK);
	            this.state = 1132;
	            this.match(MParser.COLON);
	            this.state = 1133;
	            this.indent();
	            this.state = 1134;
	            localctx.stmts = this.statement_list();
	            this.state = 1135;
	            this.dedent();
	            this.state = 1136;
	            this.lfs();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	break_statement() {
	    let localctx = new Break_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, MParser.RULE_break_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1140;
	        this.match(MParser.BREAK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	return_statement() {
	    let localctx = new Return_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, MParser.RULE_return_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1142;
	        this.match(MParser.RETURN);
	        this.state = 1144;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 21)) & ~0x1f) == 0 && ((1 << (_la - 21)) & ((1 << (MParser.LPAR - 21)) | (1 << (MParser.LBRAK - 21)) | (1 << (MParser.LCURL - 21)) | (1 << (MParser.MINUS - 21)) | (1 << (MParser.LT - 21)) | (1 << (MParser.LTGT - 21)) | (1 << (MParser.LTCOLONGT - 21)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (MParser.BOOLEAN - 54)) | (1 << (MParser.CSS - 54)) | (1 << (MParser.CHARACTER - 54)) | (1 << (MParser.TEXT - 54)) | (1 << (MParser.INTEGER - 54)) | (1 << (MParser.DECIMAL - 54)) | (1 << (MParser.DATE - 54)) | (1 << (MParser.TIME - 54)) | (1 << (MParser.DATETIME - 54)) | (1 << (MParser.PERIOD - 54)) | (1 << (MParser.VERSION - 54)) | (1 << (MParser.CODE - 54)) | (1 << (MParser.DOCUMENT - 54)) | (1 << (MParser.BLOB - 54)) | (1 << (MParser.IMAGE - 54)) | (1 << (MParser.UUID - 54)) | (1 << (MParser.DBID - 54)) | (1 << (MParser.ITERATOR - 54)) | (1 << (MParser.CURSOR - 54)) | (1 << (MParser.HTML - 54)) | (1 << (MParser.TYPE - 54)) | (1 << (MParser.ANY - 54)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (MParser.CATEGORY - 91)) | (1 << (MParser.EXECUTE - 91)) | (1 << (MParser.FETCH - 91)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (MParser.MUTABLE - 127)) | (1 << (MParser.NONE - 127)) | (1 << (MParser.NOT - 127)) | (1 << (MParser.READ - 127)) | (1 << (MParser.RESOURCE - 127)) | (1 << (MParser.SELF - 127)) | (1 << (MParser.SORTED - 127)) | (1 << (MParser.SUPER - 127)) | (1 << (MParser.THIS - 127)))) !== 0) || ((((_la - 168)) & ~0x1f) == 0 && ((1 << (_la - 168)) & ((1 << (MParser.BOOLEAN_LITERAL - 168)) | (1 << (MParser.CHAR_LITERAL - 168)) | (1 << (MParser.MIN_INTEGER - 168)) | (1 << (MParser.MAX_INTEGER - 168)) | (1 << (MParser.SYMBOL_IDENTIFIER - 168)) | (1 << (MParser.TYPE_IDENTIFIER - 168)) | (1 << (MParser.VARIABLE_IDENTIFIER - 168)) | (1 << (MParser.TEXT_LITERAL - 168)) | (1 << (MParser.UUID_LITERAL - 168)) | (1 << (MParser.VERSION_LITERAL - 168)) | (1 << (MParser.INTEGER_LITERAL - 168)) | (1 << (MParser.HEXA_LITERAL - 168)) | (1 << (MParser.DECIMAL_LITERAL - 168)) | (1 << (MParser.DATETIME_LITERAL - 168)) | (1 << (MParser.TIME_LITERAL - 168)) | (1 << (MParser.DATE_LITERAL - 168)) | (1 << (MParser.PERIOD_LITERAL - 168)))) !== 0)) {
	            this.state = 1143;
	            localctx.exp = this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 90;
	    this.enterRecursionRule(localctx, 90, MParser.RULE_expression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1167;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CssExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1147;
	            localctx.exp = this.css_expression();
	            break;

	        case 2:
	            localctx = new JsxExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1148;
	            localctx.exp = this.jsx_expression();
	            break;

	        case 3:
	            localctx = new InstanceExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1149;
	            localctx.exp = this.instance_expression(0);
	            break;

	        case 4:
	            localctx = new MutableInstanceExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1150;
	            localctx.exp = this.mutable_instance_expression(0);
	            break;

	        case 5:
	            localctx = new ArrowExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1151;
	            localctx.exp = this.arrow_expression();
	            break;

	        case 6:
	            localctx = new MinusExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1152;
	            this.match(MParser.MINUS);
	            this.state = 1153;
	            localctx.exp = this.expression(23);
	            break;

	        case 7:
	            localctx = new NotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1154;
	            this.match(MParser.NOT);
	            this.state = 1155;
	            localctx.exp = this.expression(22);
	            break;

	        case 8:
	            localctx = new CodeExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1156;
	            this.match(MParser.CODE);
	            this.state = 1157;
	            this.match(MParser.LPAR);
	            this.state = 1158;
	            localctx.exp = this.expression(0);
	            this.state = 1159;
	            this.match(MParser.RPAR);
	            break;

	        case 9:
	            localctx = new ExecuteExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1161;
	            this.match(MParser.EXECUTE);
	            this.state = 1162;
	            this.match(MParser.LPAR);
	            this.state = 1163;
	            localctx.name = this.variable_identifier();
	            this.state = 1164;
	            this.match(MParser.RPAR);
	            break;

	        case 10:
	            localctx = new TypeExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1166;
	            localctx.exp = this.type_expression();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1261;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1259;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new MultiplyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
	                    this.state = 1169;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 1170;
	                    this.multiply();
	                    this.state = 1171;
	                    localctx.right = this.expression(21);
	                    break;

	                case 2:
	                    localctx = new DivideExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
	                    this.state = 1173;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 1174;
	                    this.divide();
	                    this.state = 1175;
	                    localctx.right = this.expression(20);
	                    break;

	                case 3:
	                    localctx = new ModuloExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
	                    this.state = 1177;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 1178;
	                    this.modulo();
	                    this.state = 1179;
	                    localctx.right = this.expression(19);
	                    break;

	                case 4:
	                    localctx = new IntDivideExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
	                    this.state = 1181;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 1182;
	                    this.idivide();
	                    this.state = 1183;
	                    localctx.right = this.expression(18);
	                    break;

	                case 5:
	                    localctx = new AddExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
	                    this.state = 1185;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 1186;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===MParser.PLUS || _la===MParser.MINUS)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1187;
	                    localctx.right = this.expression(17);
	                    break;

	                case 6:
	                    localctx = new CompareExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
	                    this.state = 1188;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 1189;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (MParser.GT - 40)) | (1 << (MParser.GTE - 40)) | (1 << (MParser.LT - 40)) | (1 << (MParser.LTE - 40)))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1190;
	                    localctx.right = this.expression(16);
	                    break;

	                case 7:
	                    localctx = new EqualsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
	                    this.state = 1191;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 1192;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (MParser.XEQ - 47)) | (1 << (MParser.EQ2 - 47)) | (1 << (MParser.TEQ - 47)))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1193;
	                    localctx.right = this.expression(14);
	                    break;

	                case 8:
	                    localctx = new ContainsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
	                    this.state = 1194;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 1196;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MParser.NOT) {
	                        this.state = 1195;
	                        this.match(MParser.NOT);
	                    }

	                    this.state = 1198;
	                    this.match(MParser.CONTAINS);
	                    this.state = 1199;
	                    localctx.right = this.expression(13);
	                    break;

	                case 9:
	                    localctx = new InExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
	                    this.state = 1200;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 1202;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MParser.NOT) {
	                        this.state = 1201;
	                        this.match(MParser.NOT);
	                    }

	                    this.state = 1204;
	                    this.match(MParser.IN);
	                    this.state = 1205;
	                    localctx.right = this.expression(12);
	                    break;

	                case 10:
	                    localctx = new HasExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
	                    this.state = 1206;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 1208;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MParser.NOT) {
	                        this.state = 1207;
	                        this.match(MParser.NOT);
	                    }

	                    this.state = 1210;
	                    this.match(MParser.HAS);
	                    this.state = 1211;
	                    localctx.right = this.expression(11);
	                    break;

	                case 11:
	                    localctx = new OrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
	                    this.state = 1212;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 1213;
	                    this.match(MParser.OR);
	                    this.state = 1214;
	                    localctx.right = this.expression(8);
	                    break;

	                case 12:
	                    localctx = new AndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
	                    this.state = 1215;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 1216;
	                    this.match(MParser.AND);
	                    this.state = 1217;
	                    localctx.right = this.expression(7);
	                    break;

	                case 13:
	                    localctx = new TernaryExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.ifTrue = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
	                    this.state = 1218;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 1219;
	                    this.match(MParser.IF);
	                    this.state = 1220;
	                    localctx.test = this.expression(0);
	                    this.state = 1221;
	                    this.match(MParser.ELSE);
	                    this.state = 1222;
	                    localctx.ifFalse = this.expression(6);
	                    break;

	                case 14:
	                    localctx = new IteratorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.exp = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
	                    this.state = 1224;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 1225;
	                    this.match(MParser.FOR);
	                    this.state = 1226;
	                    this.match(MParser.EACH);
	                    this.state = 1227;
	                    localctx.name = this.variable_identifier();
	                    this.state = 1228;
	                    this.match(MParser.IN);
	                    this.state = 1229;
	                    localctx.source = this.expression(2);
	                    break;

	                case 15:
	                    localctx = new FilteredListExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.src = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
	                    this.state = 1231;
	                    if (!( this.precpred(this._ctx, 24))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
	                    }
	                    this.state = 1232;
	                    this.filtered_list_suffix();
	                    break;

	                case 16:
	                    localctx = new CastExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
	                    this.state = 1233;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 1234;
	                    this.match(MParser.AS);
	                    this.state = 1236;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MParser.MUTABLE) {
	                        this.state = 1235;
	                        this.match(MParser.MUTABLE);
	                    }

	                    this.state = 1238;
	                    localctx.right = this.category_or_any_type();
	                    break;

	                case 17:
	                    localctx = new IsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
	                    this.state = 1239;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 1240;
	                    this.match(MParser.IS);
	                    this.state = 1242;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	                    if(la_===1) {
	                        this.state = 1241;
	                        this.match(MParser.NOT);

	                    }
	                    this.state = 1244;
	                    localctx.right = this.is_expression();
	                    break;

	                case 18:
	                    localctx = new HasAllExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
	                    this.state = 1245;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 1247;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MParser.NOT) {
	                        this.state = 1246;
	                        this.match(MParser.NOT);
	                    }

	                    this.state = 1249;
	                    this.match(MParser.HAS);
	                    this.state = 1250;
	                    this.match(MParser.ALL);
	                    this.state = 1251;
	                    localctx.right = this.filter_expression();
	                    break;

	                case 19:
	                    localctx = new HasAnyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
	                    this.state = 1252;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 1254;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===MParser.NOT) {
	                        this.state = 1253;
	                        this.match(MParser.NOT);
	                    }

	                    this.state = 1256;
	                    this.match(MParser.HAS);
	                    this.state = 1257;
	                    this.match(MParser.ANY);
	                    this.state = 1258;
	                    localctx.right = this.filter_expression();
	                    break;

	                } 
	            }
	            this.state = 1263;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	filter_expression() {
	    let localctx = new Filter_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, MParser.RULE_filter_expression);
	    try {
	        this.state = 1271;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ArrowFilterExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1264;
	            this.match(MParser.WHERE);
	            this.state = 1265;
	            this.arrow_expression();
	            break;

	        case 2:
	            localctx = new ExplicitFilterExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1266;
	            this.variable_identifier();
	            this.state = 1267;
	            this.match(MParser.WHERE);
	            this.state = 1268;
	            this.expression(0);
	            break;

	        case 3:
	            localctx = new OtherFilterExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1270;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_expression() {
	    let localctx = new Type_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, MParser.RULE_type_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1273;
	        localctx.name = this.type_identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectable_expression() {
	    let localctx = new Selectable_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, MParser.RULE_selectable_expression);
	    try {
	        this.state = 1281;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new MethodExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1275;
	            localctx.exp = this.method_expression();
	            break;

	        case 2:
	            localctx = new ParenthesisExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1276;
	            localctx.exp = this.parenthesis_expression();
	            break;

	        case 3:
	            localctx = new LiteralExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1277;
	            localctx.exp = this.literal_expression();
	            break;

	        case 4:
	            localctx = new IdentifierExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1278;
	            localctx.exp = this.identifier();
	            break;

	        case 5:
	            localctx = new ThisExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1279;
	            localctx.exp = this.this_expression();
	            break;

	        case 6:
	            localctx = new SuperExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1280;
	            localctx.exp = this.super_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	instance_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Instance_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 98;
	    this.enterRecursionRule(localctx, 98, MParser.RULE_instance_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new SelectableExpressionContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 1284;
	        localctx.parent = this.selectable_expression();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1290;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new SelectorExpressionContext(this, new Instance_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_instance_expression);
	                this.state = 1286;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1287;
	                localctx.selector = this.instance_selector(); 
	            }
	            this.state = 1292;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	mutable_instance_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Mutable_instance_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 100;
	    this.enterRecursionRule(localctx, 100, MParser.RULE_mutable_instance_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new MutableSelectableExpressionContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 1294;
	        this.match(MParser.MUTABLE);
	        this.state = 1295;
	        localctx.exp = this.identifier();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1301;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,73,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new MutableSelectorExpressionContext(this, new Mutable_instance_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_mutable_instance_expression);
	                this.state = 1297;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1298;
	                localctx.selector = this.instance_selector(); 
	            }
	            this.state = 1303;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,73,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	method_expression() {
	    let localctx = new Method_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, MParser.RULE_method_expression);
	    try {
	        this.state = 1313;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1304;
	            this.blob_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1305;
	            this.document_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1306;
	            this.fetch_expression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1307;
	            this.read_blob_expression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1308;
	            this.read_all_expression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1309;
	            this.read_one_expression();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1310;
	            this.sorted_expression();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1311;
	            this.method_call_expression();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1312;
	            this.constructor_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instance_selector() {
	    let localctx = new Instance_selectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, MParser.RULE_instance_selector);
	    try {
	        this.state = 1327;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new MemberSelectorContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1315;
	            this.match(MParser.DOT);
	            this.state = 1316;
	            localctx.name = this.member_identifier();
	            break;

	        case 2:
	            localctx = new MethodSelectorContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1317;
	            this.match(MParser.DOT);
	            this.state = 1318;
	            localctx.method = this.method_call_expression();
	            break;

	        case 3:
	            localctx = new SliceSelectorContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1319;
	            this.match(MParser.LBRAK);
	            this.state = 1320;
	            localctx.xslice = this.slice_arguments();
	            this.state = 1321;
	            this.match(MParser.RBRAK);
	            break;

	        case 4:
	            localctx = new ItemSelectorContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1323;
	            this.match(MParser.LBRAK);
	            this.state = 1324;
	            localctx.exp = this.expression(0);
	            this.state = 1325;
	            this.match(MParser.RBRAK);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blob_expression() {
	    let localctx = new Blob_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, MParser.RULE_blob_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1329;
	        this.match(MParser.BLOB);
	        this.state = 1330;
	        this.match(MParser.LPAR);
	        this.state = 1332;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 21)) & ~0x1f) == 0 && ((1 << (_la - 21)) & ((1 << (MParser.LPAR - 21)) | (1 << (MParser.LBRAK - 21)) | (1 << (MParser.LCURL - 21)) | (1 << (MParser.MINUS - 21)) | (1 << (MParser.LT - 21)) | (1 << (MParser.LTGT - 21)) | (1 << (MParser.LTCOLONGT - 21)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (MParser.BOOLEAN - 54)) | (1 << (MParser.CSS - 54)) | (1 << (MParser.CHARACTER - 54)) | (1 << (MParser.TEXT - 54)) | (1 << (MParser.INTEGER - 54)) | (1 << (MParser.DECIMAL - 54)) | (1 << (MParser.DATE - 54)) | (1 << (MParser.TIME - 54)) | (1 << (MParser.DATETIME - 54)) | (1 << (MParser.PERIOD - 54)) | (1 << (MParser.VERSION - 54)) | (1 << (MParser.CODE - 54)) | (1 << (MParser.DOCUMENT - 54)) | (1 << (MParser.BLOB - 54)) | (1 << (MParser.IMAGE - 54)) | (1 << (MParser.UUID - 54)) | (1 << (MParser.DBID - 54)) | (1 << (MParser.ITERATOR - 54)) | (1 << (MParser.CURSOR - 54)) | (1 << (MParser.HTML - 54)) | (1 << (MParser.TYPE - 54)) | (1 << (MParser.ANY - 54)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (MParser.CATEGORY - 91)) | (1 << (MParser.EXECUTE - 91)) | (1 << (MParser.FETCH - 91)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (MParser.MUTABLE - 127)) | (1 << (MParser.NONE - 127)) | (1 << (MParser.NOT - 127)) | (1 << (MParser.READ - 127)) | (1 << (MParser.RESOURCE - 127)) | (1 << (MParser.SELF - 127)) | (1 << (MParser.SORTED - 127)) | (1 << (MParser.SUPER - 127)) | (1 << (MParser.THIS - 127)))) !== 0) || ((((_la - 168)) & ~0x1f) == 0 && ((1 << (_la - 168)) & ((1 << (MParser.BOOLEAN_LITERAL - 168)) | (1 << (MParser.CHAR_LITERAL - 168)) | (1 << (MParser.MIN_INTEGER - 168)) | (1 << (MParser.MAX_INTEGER - 168)) | (1 << (MParser.SYMBOL_IDENTIFIER - 168)) | (1 << (MParser.TYPE_IDENTIFIER - 168)) | (1 << (MParser.VARIABLE_IDENTIFIER - 168)) | (1 << (MParser.TEXT_LITERAL - 168)) | (1 << (MParser.UUID_LITERAL - 168)) | (1 << (MParser.VERSION_LITERAL - 168)) | (1 << (MParser.INTEGER_LITERAL - 168)) | (1 << (MParser.HEXA_LITERAL - 168)) | (1 << (MParser.DECIMAL_LITERAL - 168)) | (1 << (MParser.DATETIME_LITERAL - 168)) | (1 << (MParser.TIME_LITERAL - 168)) | (1 << (MParser.DATE_LITERAL - 168)) | (1 << (MParser.PERIOD_LITERAL - 168)))) !== 0)) {
	            this.state = 1331;
	            this.expression(0);
	        }

	        this.state = 1334;
	        this.match(MParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	document_expression() {
	    let localctx = new Document_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, MParser.RULE_document_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1336;
	        this.match(MParser.DOCUMENT);
	        this.state = 1337;
	        this.match(MParser.LPAR);
	        this.state = 1341;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.FROM) {
	            this.state = 1338;
	            this.match(MParser.FROM);
	            this.state = 1339;
	            this.match(MParser.EQ);
	            this.state = 1340;
	            localctx.exp = this.expression(0);
	        }

	        this.state = 1343;
	        this.match(MParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructor_expression() {
	    let localctx = new Constructor_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, MParser.RULE_constructor_expression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1361;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ConstructorFromContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1345;
	            localctx.typ = this.mutable_category_type();
	            this.state = 1346;
	            this.match(MParser.LPAR);
	            this.state = 1347;
	            localctx.copyExp = this.copy_from();
	            this.state = 1350;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MParser.COMMA) {
	                this.state = 1348;
	                this.match(MParser.COMMA);
	                this.state = 1349;
	                localctx.args = this.argument_assignment_list(0);
	            }

	            this.state = 1352;
	            this.match(MParser.RPAR);
	            break;

	        case 2:
	            localctx = new ConstructorNoFromContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1354;
	            localctx.typ = this.mutable_category_type();
	            this.state = 1355;
	            this.match(MParser.LPAR);
	            this.state = 1357;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 21)) & ~0x1f) == 0 && ((1 << (_la - 21)) & ((1 << (MParser.LPAR - 21)) | (1 << (MParser.LBRAK - 21)) | (1 << (MParser.LCURL - 21)) | (1 << (MParser.MINUS - 21)) | (1 << (MParser.LT - 21)) | (1 << (MParser.LTGT - 21)) | (1 << (MParser.LTCOLONGT - 21)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (MParser.BOOLEAN - 54)) | (1 << (MParser.CSS - 54)) | (1 << (MParser.CHARACTER - 54)) | (1 << (MParser.TEXT - 54)) | (1 << (MParser.INTEGER - 54)) | (1 << (MParser.DECIMAL - 54)) | (1 << (MParser.DATE - 54)) | (1 << (MParser.TIME - 54)) | (1 << (MParser.DATETIME - 54)) | (1 << (MParser.PERIOD - 54)) | (1 << (MParser.VERSION - 54)) | (1 << (MParser.CODE - 54)) | (1 << (MParser.DOCUMENT - 54)) | (1 << (MParser.BLOB - 54)) | (1 << (MParser.IMAGE - 54)) | (1 << (MParser.UUID - 54)) | (1 << (MParser.DBID - 54)) | (1 << (MParser.ITERATOR - 54)) | (1 << (MParser.CURSOR - 54)) | (1 << (MParser.HTML - 54)) | (1 << (MParser.TYPE - 54)) | (1 << (MParser.ANY - 54)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (MParser.CATEGORY - 91)) | (1 << (MParser.EXECUTE - 91)) | (1 << (MParser.FETCH - 91)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (MParser.MUTABLE - 127)) | (1 << (MParser.NONE - 127)) | (1 << (MParser.NOT - 127)) | (1 << (MParser.READ - 127)) | (1 << (MParser.RESOURCE - 127)) | (1 << (MParser.SELF - 127)) | (1 << (MParser.SORTED - 127)) | (1 << (MParser.SUPER - 127)) | (1 << (MParser.THIS - 127)))) !== 0) || ((((_la - 168)) & ~0x1f) == 0 && ((1 << (_la - 168)) & ((1 << (MParser.BOOLEAN_LITERAL - 168)) | (1 << (MParser.CHAR_LITERAL - 168)) | (1 << (MParser.MIN_INTEGER - 168)) | (1 << (MParser.MAX_INTEGER - 168)) | (1 << (MParser.SYMBOL_IDENTIFIER - 168)) | (1 << (MParser.TYPE_IDENTIFIER - 168)) | (1 << (MParser.VARIABLE_IDENTIFIER - 168)) | (1 << (MParser.TEXT_LITERAL - 168)) | (1 << (MParser.UUID_LITERAL - 168)) | (1 << (MParser.VERSION_LITERAL - 168)) | (1 << (MParser.INTEGER_LITERAL - 168)) | (1 << (MParser.HEXA_LITERAL - 168)) | (1 << (MParser.DECIMAL_LITERAL - 168)) | (1 << (MParser.DATETIME_LITERAL - 168)) | (1 << (MParser.TIME_LITERAL - 168)) | (1 << (MParser.DATE_LITERAL - 168)) | (1 << (MParser.PERIOD_LITERAL - 168)))) !== 0)) {
	                this.state = 1356;
	                localctx.args = this.argument_assignment_list(0);
	            }

	            this.state = 1359;
	            this.match(MParser.RPAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copy_from() {
	    let localctx = new Copy_fromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, MParser.RULE_copy_from);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1363;
	        this.match(MParser.FROM);
	        this.state = 1364;
	        this.assign();
	        this.state = 1365;
	        localctx.exp = this.expression(0);
	        this.state = 1366;
	        if (!( this.willNotBe(this.equalToken()))) {
	            throw new antlr4.error.FailedPredicateException(this, "$parser.willNotBe($parser.equalToken())");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	argument_assignment_list(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Argument_assignment_listContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 114;
	    this.enterRecursionRule(localctx, 114, MParser.RULE_argument_assignment_list, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1373;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ExpressionAssignmentListContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1369;
	            localctx.exp = this.expression(0);
	            this.state = 1370;
	            if (!( this.willNotBe(this.equalToken()))) {
	                throw new antlr4.error.FailedPredicateException(this, "$parser.willNotBe($parser.equalToken())");
	            }
	            break;

	        case 2:
	            localctx = new ArgumentAssignmentListContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1372;
	            localctx.item = this.argument_assignment();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1380;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ArgumentAssignmentListItemContext(this, new Argument_assignment_listContext(this, _parentctx, _parentState));
	                localctx.items = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_argument_assignment_list);
	                this.state = 1375;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1376;
	                this.match(MParser.COMMA);
	                this.state = 1377;
	                localctx.item = this.argument_assignment(); 
	            }
	            this.state = 1382;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	argument_assignment() {
	    let localctx = new Argument_assignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, MParser.RULE_argument_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1383;
	        localctx.name = this.variable_identifier();
	        this.state = 1387;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	        if(la_===1) {
	            this.state = 1384;
	            this.assign();
	            this.state = 1385;
	            localctx.exp = this.expression(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	write_statement() {
	    let localctx = new Write_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, MParser.RULE_write_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1389;
	        this.match(MParser.WRITE);
	        this.state = 1390;
	        localctx.what = this.expression(0);
	        this.state = 1391;
	        this.match(MParser.TO);
	        this.state = 1392;
	        localctx.target = this.expression(0);
	        this.state = 1394;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.THEN) {
	            this.state = 1393;
	            this.then();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filtered_list_suffix() {
	    let localctx = new Filtered_list_suffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, MParser.RULE_filtered_list_suffix);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1396;
	        this.match(MParser.FILTERED);
	        this.state = 1399;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.WITH) {
	            this.state = 1397;
	            this.match(MParser.WITH);
	            this.state = 1398;
	            localctx.name = this.variable_identifier();
	        }

	        this.state = 1401;
	        this.match(MParser.WHERE);
	        this.state = 1402;
	        localctx.predicate = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fetch_expression() {
	    let localctx = new Fetch_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, MParser.RULE_fetch_expression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1442;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new FetchOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1404;
	            this.match(MParser.FETCH);
	            this.state = 1405;
	            this.match(MParser.ONE);
	            this.state = 1407;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MParser.MUTABLE || _la===MParser.TYPE_IDENTIFIER) {
	                this.state = 1406;
	                localctx.typ = this.mutable_category_type();
	            }

	            this.state = 1409;
	            this.match(MParser.WHERE);
	            this.state = 1410;
	            localctx.predicate = this.expression(0);
	            this.state = 1413;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	            if(la_===1) {
	                this.state = 1411;
	                this.match(MParser.INCLUDE);
	                this.state = 1412;
	                localctx.include = this.include_list();

	            }
	            break;

	        case 2:
	            localctx = new FetchManyContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1415;
	            this.match(MParser.FETCH);
	            this.state = 1422;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MParser.ALL:
	                this.state = 1416;
	                this.match(MParser.ALL);
	                break;
	            case MParser.ROWS:
	                this.state = 1417;
	                this.match(MParser.ROWS);
	                this.state = 1418;
	                localctx.xstart = this.expression(0);
	                this.state = 1419;
	                this.match(MParser.TO);
	                this.state = 1420;
	                localctx.xstop = this.expression(0);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1424;
	            this.match(MParser.LPAR);
	            this.state = 1426;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MParser.MUTABLE || _la===MParser.TYPE_IDENTIFIER) {
	                this.state = 1425;
	                localctx.typ = this.mutable_category_type();
	            }

	            this.state = 1428;
	            this.match(MParser.RPAR);
	            this.state = 1431;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	            if(la_===1) {
	                this.state = 1429;
	                this.match(MParser.WHERE);
	                this.state = 1430;
	                localctx.predicate = this.expression(0);

	            }
	            this.state = 1435;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	            if(la_===1) {
	                this.state = 1433;
	                this.match(MParser.INCLUDE);
	                this.state = 1434;
	                localctx.include = this.include_list();

	            }
	            this.state = 1440;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	            if(la_===1) {
	                this.state = 1437;
	                this.match(MParser.ORDER);
	                this.state = 1438;
	                this.match(MParser.BY);
	                this.state = 1439;
	                localctx.orderby = this.order_by_list();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fetch_statement() {
	    let localctx = new Fetch_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, MParser.RULE_fetch_statement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1485;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new FetchOneAsyncContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1444;
	            this.match(MParser.FETCH);
	            this.state = 1445;
	            this.match(MParser.ONE);
	            this.state = 1447;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MParser.MUTABLE || _la===MParser.TYPE_IDENTIFIER) {
	                this.state = 1446;
	                localctx.typ = this.mutable_category_type();
	            }

	            this.state = 1449;
	            this.match(MParser.WHERE);
	            this.state = 1450;
	            localctx.predicate = this.expression(0);
	            this.state = 1453;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MParser.INCLUDE) {
	                this.state = 1451;
	                this.match(MParser.INCLUDE);
	                this.state = 1452;
	                localctx.include = this.include_list();
	            }

	            this.state = 1455;
	            this.then();
	            break;

	        case 2:
	            localctx = new FetchManyAsyncContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1457;
	            this.match(MParser.FETCH);
	            this.state = 1464;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MParser.ALL:
	                this.state = 1458;
	                this.match(MParser.ALL);
	                break;
	            case MParser.ROWS:
	                this.state = 1459;
	                this.match(MParser.ROWS);
	                this.state = 1460;
	                localctx.xstart = this.expression(0);
	                this.state = 1461;
	                this.match(MParser.TO);
	                this.state = 1462;
	                localctx.xstop = this.expression(0);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1466;
	            this.match(MParser.LPAR);
	            this.state = 1468;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MParser.MUTABLE || _la===MParser.TYPE_IDENTIFIER) {
	                this.state = 1467;
	                localctx.typ = this.mutable_category_type();
	            }

	            this.state = 1470;
	            this.match(MParser.RPAR);
	            this.state = 1473;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MParser.WHERE) {
	                this.state = 1471;
	                this.match(MParser.WHERE);
	                this.state = 1472;
	                localctx.predicate = this.expression(0);
	            }

	            this.state = 1477;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MParser.INCLUDE) {
	                this.state = 1475;
	                this.match(MParser.INCLUDE);
	                this.state = 1476;
	                localctx.include = this.include_list();
	            }

	            this.state = 1482;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MParser.ORDER) {
	                this.state = 1479;
	                this.match(MParser.ORDER);
	                this.state = 1480;
	                this.match(MParser.BY);
	                this.state = 1481;
	                localctx.orderby = this.order_by_list();
	            }

	            this.state = 1484;
	            this.then();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	then() {
	    let localctx = new ThenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, MParser.RULE_then);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1487;
	        this.match(MParser.THEN);
	        this.state = 1488;
	        this.match(MParser.WITH);
	        this.state = 1489;
	        localctx.name = this.variable_identifier();
	        this.state = 1490;
	        this.match(MParser.COLON);
	        this.state = 1491;
	        this.indent();
	        this.state = 1492;
	        localctx.stmts = this.statement_list();
	        this.state = 1493;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	read_statement() {
	    let localctx = new Read_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, MParser.RULE_read_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1495;
	        this.match(MParser.READ);
	        this.state = 1496;
	        this.match(MParser.ALL);
	        this.state = 1497;
	        this.match(MParser.FROM);
	        this.state = 1498;
	        localctx.source = this.expression(0);
	        this.state = 1499;
	        this.then();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sorted_expression() {
	    let localctx = new Sorted_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, MParser.RULE_sorted_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1501;
	        this.match(MParser.SORTED);
	        this.state = 1503;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.DESC) {
	            this.state = 1502;
	            this.match(MParser.DESC);
	        }

	        this.state = 1505;
	        this.match(MParser.LPAR);
	        this.state = 1506;
	        localctx.source = this.instance_expression(0);
	        this.state = 1512;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.COMMA) {
	            this.state = 1507;
	            this.match(MParser.COMMA);
	            this.state = 1508;
	            this.key_token();
	            this.state = 1509;
	            this.match(MParser.EQ);
	            this.state = 1510;
	            localctx.key = this.sorted_key();
	        }

	        this.state = 1514;
	        this.match(MParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assign_instance_statement() {
	    let localctx = new Assign_instance_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, MParser.RULE_assign_instance_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1516;
	        localctx.inst = this.assignable_instance(0);
	        this.state = 1517;
	        this.assign();
	        this.state = 1518;
	        localctx.exp = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	child_instance() {
	    let localctx = new Child_instanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, MParser.RULE_child_instance);
	    try {
	        this.state = 1528;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new MemberInstanceContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1520;
	            if (!( this.wasNot(MParser.WS))) {
	                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(MParser.WS)");
	            }
	            this.state = 1521;
	            this.match(MParser.DOT);
	            this.state = 1522;
	            localctx.name = this.variable_identifier();
	            break;

	        case 2:
	            localctx = new ItemInstanceContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1523;
	            if (!( this.wasNot(MParser.WS))) {
	                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(MParser.WS)");
	            }
	            this.state = 1524;
	            this.match(MParser.LBRAK);
	            this.state = 1525;
	            localctx.exp = this.expression(0);
	            this.state = 1526;
	            this.match(MParser.RBRAK);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assign_tuple_statement() {
	    let localctx = new Assign_tuple_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, MParser.RULE_assign_tuple_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1530;
	        localctx.items = this.variable_identifier_list();
	        this.state = 1531;
	        this.assign();
	        this.state = 1532;
	        localctx.exp = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lfs() {
	    let localctx = new LfsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, MParser.RULE_lfs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1537;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,105,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1534;
	                this.match(MParser.LF); 
	            }
	            this.state = 1539;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,105,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lfp() {
	    let localctx = new LfpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, MParser.RULE_lfp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1541; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1540;
	            this.match(MParser.LF);
	            this.state = 1543; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===MParser.LF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ws_plus() {
	    let localctx = new Ws_plusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, MParser.RULE_ws_plus);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1548;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,107,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1545;
	                _la = this._input.LA(1);
	                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MParser.INDENT) | (1 << MParser.LF) | (1 << MParser.TAB) | (1 << MParser.WS))) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                } 
	            }
	            this.state = 1550;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,107,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indent() {
	    let localctx = new IndentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, MParser.RULE_indent);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1552; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1551;
	            this.match(MParser.LF);
	            this.state = 1554; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===MParser.LF);
	        this.state = 1556;
	        this.match(MParser.INDENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dedent() {
	    let localctx = new DedentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, MParser.RULE_dedent);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1561;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MParser.LF) {
	            this.state = 1558;
	            this.match(MParser.LF);
	            this.state = 1563;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1564;
	        this.match(MParser.DEDENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_literal() {
	    let localctx = new Type_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, MParser.RULE_type_literal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1566;
	        this.category_or_any_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	null_literal() {
	    let localctx = new Null_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, MParser.RULE_null_literal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1568;
	        this.match(MParser.NONE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comment_statement() {
	    let localctx = new Comment_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, MParser.RULE_comment_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1570;
	        _la = this._input.LA(1);
	        if(!(_la===MParser.CSS_DATA || _la===MParser.COMMENT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1572; 
	        this._errHandler.sync(this);
	        var _alt = 1+1;
	        do {
	        	switch (_alt) {
	        	case 1+1:
	        		this.state = 1571;
	        		this.matchWildcard();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1574; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,110, this._ctx);
	        } while ( _alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repl() {
	    let localctx = new ReplContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, MParser.RULE_repl);
	    try {
	        this.state = 1579;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1576;
	            this.declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1577;
	            this.statement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1578;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration_list() {
	    let localctx = new Declaration_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, MParser.RULE_declaration_list);
	    var _la = 0; // Token type
	    try {
	        localctx = new FullDeclarationListContext(this, localctx);
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1581;
	        this.lfs();
	        this.state = 1583;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.CSS_DATA || _la===MParser.COMMENT || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (MParser.ABSTRACT - 76)) | (1 << (MParser.ATTR - 76)) | (1 << (MParser.CATEGORY - 76)) | (1 << (MParser.CLASS - 76)) | (1 << (MParser.DEF - 76)) | (1 << (MParser.ENUM - 76)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (MParser.NATIVE - 128)) | (1 << (MParser.SINGLETON - 128)) | (1 << (MParser.STORABLE - 128)))) !== 0) || _la===MParser.WIDGET || _la===MParser.ARONDBASE_IDENTIFIER) {
	            this.state = 1582;
	            this.declarations();
	        }

	        this.state = 1585;
	        this.lfs();
	        this.state = 1586;
	        this.match(MParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarations() {
	    let localctx = new DeclarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, MParser.RULE_declarations);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1588;
	        this.declaration();
	        this.state = 1594;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,113,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1589;
	                this.lfp();
	                this.state = 1590;
	                this.declaration(); 
	            }
	            this.state = 1596;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,113,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, MParser.RULE_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1602;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MParser.CSS_DATA || _la===MParser.COMMENT) {
	            this.state = 1597;
	            this.comment_statement();
	            this.state = 1598;
	            this.lfp();
	            this.state = 1604;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1610;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MParser.ARONDBASE_IDENTIFIER) {
	            this.state = 1605;
	            this.annotation_constructor();
	            this.state = 1606;
	            this.lfp();
	            this.state = 1612;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1619;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1613;
	            this.attribute_declaration();
	            break;

	        case 2:
	            this.state = 1614;
	            this.category_declaration();
	            break;

	        case 3:
	            this.state = 1615;
	            this.resource_declaration();
	            break;

	        case 4:
	            this.state = 1616;
	            this.enum_declaration();
	            break;

	        case 5:
	            this.state = 1617;
	            this.widget_declaration();
	            break;

	        case 6:
	            this.state = 1618;
	            this.method_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_constructor() {
	    let localctx = new Annotation_constructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, MParser.RULE_annotation_constructor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1621;
	        localctx.name = this.annotation_identifier();
	        this.state = 1636;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.LPAR) {
	            this.state = 1622;
	            this.match(MParser.LPAR);
	            this.state = 1632;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case MParser.LPAR:
	            case MParser.LBRAK:
	            case MParser.LCURL:
	            case MParser.MINUS:
	            case MParser.LT:
	            case MParser.LTCOLONGT:
	            case MParser.BOOLEAN:
	            case MParser.CSS:
	            case MParser.CHARACTER:
	            case MParser.TEXT:
	            case MParser.INTEGER:
	            case MParser.DECIMAL:
	            case MParser.DATE:
	            case MParser.TIME:
	            case MParser.DATETIME:
	            case MParser.PERIOD:
	            case MParser.VERSION:
	            case MParser.CODE:
	            case MParser.DOCUMENT:
	            case MParser.BLOB:
	            case MParser.IMAGE:
	            case MParser.UUID:
	            case MParser.DBID:
	            case MParser.ITERATOR:
	            case MParser.CURSOR:
	            case MParser.HTML:
	            case MParser.TYPE:
	            case MParser.ANY:
	            case MParser.MUTABLE:
	            case MParser.NONE:
	            case MParser.BOOLEAN_LITERAL:
	            case MParser.CHAR_LITERAL:
	            case MParser.MIN_INTEGER:
	            case MParser.MAX_INTEGER:
	            case MParser.SYMBOL_IDENTIFIER:
	            case MParser.TYPE_IDENTIFIER:
	            case MParser.TEXT_LITERAL:
	            case MParser.UUID_LITERAL:
	            case MParser.VERSION_LITERAL:
	            case MParser.INTEGER_LITERAL:
	            case MParser.HEXA_LITERAL:
	            case MParser.DECIMAL_LITERAL:
	            case MParser.DATETIME_LITERAL:
	            case MParser.TIME_LITERAL:
	            case MParser.DATE_LITERAL:
	            case MParser.PERIOD_LITERAL:
	                this.state = 1623;
	                localctx.exp = this.annotation_argument_value();
	                break;
	            case MParser.GETTER:
	            case MParser.SETTER:
	            case MParser.VARIABLE_IDENTIFIER:
	                this.state = 1624;
	                this.annotation_argument();
	                this.state = 1629;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===MParser.COMMA) {
	                    this.state = 1625;
	                    this.match(MParser.COMMA);
	                    this.state = 1626;
	                    this.annotation_argument();
	                    this.state = 1631;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1634;
	            this.match(MParser.RPAR);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_identifier() {
	    let localctx = new Annotation_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, MParser.RULE_annotation_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1638;
	        this.match(MParser.ARONDBASE_IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_argument() {
	    let localctx = new Annotation_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, MParser.RULE_annotation_argument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1640;
	        localctx.name = this.annotation_argument_name();
	        this.state = 1641;
	        this.match(MParser.EQ);
	        this.state = 1642;
	        localctx.exp = this.annotation_argument_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_argument_name() {
	    let localctx = new Annotation_argument_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, MParser.RULE_annotation_argument_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1644;
	        _la = this._input.LA(1);
	        if(!(_la===MParser.GETTER || _la===MParser.SETTER || _la===MParser.VARIABLE_IDENTIFIER)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_argument_value() {
	    let localctx = new Annotation_argument_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, MParser.RULE_annotation_argument_value);
	    try {
	        this.state = 1648;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AnnotationLiteralValueContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1646;
	            localctx.exp = this.literal_expression();
	            break;

	        case 2:
	            localctx = new AnnotationTypeValueContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1647;
	            localctx.typ = this.primary_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resource_declaration() {
	    let localctx = new Resource_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, MParser.RULE_resource_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1650;
	        this.native_resource_declaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_declaration() {
	    let localctx = new Enum_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, MParser.RULE_enum_declaration);
	    try {
	        this.state = 1654;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1652;
	            this.enum_category_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1653;
	            this.enum_native_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_symbol_list() {
	    let localctx = new Native_symbol_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, MParser.RULE_native_symbol_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1656;
	        this.native_symbol();
	        this.state = 1662;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,122,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1657;
	                this.lfp();
	                this.state = 1658;
	                this.native_symbol(); 
	            }
	            this.state = 1664;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,122,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	category_symbol_list() {
	    let localctx = new Category_symbol_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, MParser.RULE_category_symbol_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1665;
	        this.category_symbol();
	        this.state = 1671;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,123,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1666;
	                this.lfp();
	                this.state = 1667;
	                this.category_symbol(); 
	            }
	            this.state = 1673;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,123,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbol_list() {
	    let localctx = new Symbol_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, MParser.RULE_symbol_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1674;
	        this.symbol_identifier();
	        this.state = 1679;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MParser.COMMA) {
	            this.state = 1675;
	            this.match(MParser.COMMA);
	            this.state = 1676;
	            this.symbol_identifier();
	            this.state = 1681;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_constraint() {
	    let localctx = new Attribute_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, MParser.RULE_attribute_constraint);
	    try {
	        this.state = 1692;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new MatchingListContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1682;
	            this.match(MParser.IN);
	            this.state = 1683;
	            localctx.source = this.list_literal();
	            break;

	        case 2:
	            localctx = new MatchingSetContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1684;
	            this.match(MParser.IN);
	            this.state = 1685;
	            localctx.source = this.set_literal();
	            break;

	        case 3:
	            localctx = new MatchingRangeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1686;
	            this.match(MParser.IN);
	            this.state = 1687;
	            localctx.source = this.range_literal();
	            break;

	        case 4:
	            localctx = new MatchingPatternContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1688;
	            this.match(MParser.MATCHING);
	            this.state = 1689;
	            localctx.text = this.match(MParser.TEXT_LITERAL);
	            break;

	        case 5:
	            localctx = new MatchingExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1690;
	            this.match(MParser.MATCHING);
	            this.state = 1691;
	            localctx.exp = this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	list_literal() {
	    let localctx = new List_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, MParser.RULE_list_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1695;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.MUTABLE) {
	            this.state = 1694;
	            this.match(MParser.MUTABLE);
	        }

	        this.state = 1697;
	        this.match(MParser.LBRAK);
	        this.state = 1699;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 21)) & ~0x1f) == 0 && ((1 << (_la - 21)) & ((1 << (MParser.LPAR - 21)) | (1 << (MParser.LBRAK - 21)) | (1 << (MParser.LCURL - 21)) | (1 << (MParser.MINUS - 21)) | (1 << (MParser.LT - 21)) | (1 << (MParser.LTGT - 21)) | (1 << (MParser.LTCOLONGT - 21)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (MParser.BOOLEAN - 54)) | (1 << (MParser.CSS - 54)) | (1 << (MParser.CHARACTER - 54)) | (1 << (MParser.TEXT - 54)) | (1 << (MParser.INTEGER - 54)) | (1 << (MParser.DECIMAL - 54)) | (1 << (MParser.DATE - 54)) | (1 << (MParser.TIME - 54)) | (1 << (MParser.DATETIME - 54)) | (1 << (MParser.PERIOD - 54)) | (1 << (MParser.VERSION - 54)) | (1 << (MParser.CODE - 54)) | (1 << (MParser.DOCUMENT - 54)) | (1 << (MParser.BLOB - 54)) | (1 << (MParser.IMAGE - 54)) | (1 << (MParser.UUID - 54)) | (1 << (MParser.DBID - 54)) | (1 << (MParser.ITERATOR - 54)) | (1 << (MParser.CURSOR - 54)) | (1 << (MParser.HTML - 54)) | (1 << (MParser.TYPE - 54)) | (1 << (MParser.ANY - 54)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (MParser.CATEGORY - 91)) | (1 << (MParser.EXECUTE - 91)) | (1 << (MParser.FETCH - 91)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (MParser.MUTABLE - 127)) | (1 << (MParser.NONE - 127)) | (1 << (MParser.NOT - 127)) | (1 << (MParser.READ - 127)) | (1 << (MParser.RESOURCE - 127)) | (1 << (MParser.SELF - 127)) | (1 << (MParser.SORTED - 127)) | (1 << (MParser.SUPER - 127)) | (1 << (MParser.THIS - 127)))) !== 0) || ((((_la - 168)) & ~0x1f) == 0 && ((1 << (_la - 168)) & ((1 << (MParser.BOOLEAN_LITERAL - 168)) | (1 << (MParser.CHAR_LITERAL - 168)) | (1 << (MParser.MIN_INTEGER - 168)) | (1 << (MParser.MAX_INTEGER - 168)) | (1 << (MParser.SYMBOL_IDENTIFIER - 168)) | (1 << (MParser.TYPE_IDENTIFIER - 168)) | (1 << (MParser.VARIABLE_IDENTIFIER - 168)) | (1 << (MParser.TEXT_LITERAL - 168)) | (1 << (MParser.UUID_LITERAL - 168)) | (1 << (MParser.VERSION_LITERAL - 168)) | (1 << (MParser.INTEGER_LITERAL - 168)) | (1 << (MParser.HEXA_LITERAL - 168)) | (1 << (MParser.DECIMAL_LITERAL - 168)) | (1 << (MParser.DATETIME_LITERAL - 168)) | (1 << (MParser.TIME_LITERAL - 168)) | (1 << (MParser.DATE_LITERAL - 168)) | (1 << (MParser.PERIOD_LITERAL - 168)))) !== 0)) {
	            this.state = 1698;
	            this.expression_list();
	        }

	        this.state = 1701;
	        this.match(MParser.RBRAK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_literal() {
	    let localctx = new Set_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, MParser.RULE_set_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1704;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.MUTABLE) {
	            this.state = 1703;
	            this.match(MParser.MUTABLE);
	        }

	        this.state = 1706;
	        this.match(MParser.LT);
	        this.state = 1708;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 21)) & ~0x1f) == 0 && ((1 << (_la - 21)) & ((1 << (MParser.LPAR - 21)) | (1 << (MParser.LBRAK - 21)) | (1 << (MParser.LCURL - 21)) | (1 << (MParser.MINUS - 21)) | (1 << (MParser.LT - 21)) | (1 << (MParser.LTGT - 21)) | (1 << (MParser.LTCOLONGT - 21)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (MParser.BOOLEAN - 54)) | (1 << (MParser.CSS - 54)) | (1 << (MParser.CHARACTER - 54)) | (1 << (MParser.TEXT - 54)) | (1 << (MParser.INTEGER - 54)) | (1 << (MParser.DECIMAL - 54)) | (1 << (MParser.DATE - 54)) | (1 << (MParser.TIME - 54)) | (1 << (MParser.DATETIME - 54)) | (1 << (MParser.PERIOD - 54)) | (1 << (MParser.VERSION - 54)) | (1 << (MParser.CODE - 54)) | (1 << (MParser.DOCUMENT - 54)) | (1 << (MParser.BLOB - 54)) | (1 << (MParser.IMAGE - 54)) | (1 << (MParser.UUID - 54)) | (1 << (MParser.DBID - 54)) | (1 << (MParser.ITERATOR - 54)) | (1 << (MParser.CURSOR - 54)) | (1 << (MParser.HTML - 54)) | (1 << (MParser.TYPE - 54)) | (1 << (MParser.ANY - 54)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (MParser.CATEGORY - 91)) | (1 << (MParser.EXECUTE - 91)) | (1 << (MParser.FETCH - 91)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (MParser.MUTABLE - 127)) | (1 << (MParser.NONE - 127)) | (1 << (MParser.NOT - 127)) | (1 << (MParser.READ - 127)) | (1 << (MParser.RESOURCE - 127)) | (1 << (MParser.SELF - 127)) | (1 << (MParser.SORTED - 127)) | (1 << (MParser.SUPER - 127)) | (1 << (MParser.THIS - 127)))) !== 0) || ((((_la - 168)) & ~0x1f) == 0 && ((1 << (_la - 168)) & ((1 << (MParser.BOOLEAN_LITERAL - 168)) | (1 << (MParser.CHAR_LITERAL - 168)) | (1 << (MParser.MIN_INTEGER - 168)) | (1 << (MParser.MAX_INTEGER - 168)) | (1 << (MParser.SYMBOL_IDENTIFIER - 168)) | (1 << (MParser.TYPE_IDENTIFIER - 168)) | (1 << (MParser.VARIABLE_IDENTIFIER - 168)) | (1 << (MParser.TEXT_LITERAL - 168)) | (1 << (MParser.UUID_LITERAL - 168)) | (1 << (MParser.VERSION_LITERAL - 168)) | (1 << (MParser.INTEGER_LITERAL - 168)) | (1 << (MParser.HEXA_LITERAL - 168)) | (1 << (MParser.DECIMAL_LITERAL - 168)) | (1 << (MParser.DATETIME_LITERAL - 168)) | (1 << (MParser.TIME_LITERAL - 168)) | (1 << (MParser.DATE_LITERAL - 168)) | (1 << (MParser.PERIOD_LITERAL - 168)))) !== 0)) {
	            this.state = 1707;
	            this.expression_list();
	        }

	        this.state = 1710;
	        this.match(MParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression_list() {
	    let localctx = new Expression_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, MParser.RULE_expression_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1712;
	        this.expression(0);
	        this.state = 1717;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MParser.COMMA) {
	            this.state = 1713;
	            this.match(MParser.COMMA);
	            this.state = 1714;
	            this.expression(0);
	            this.state = 1719;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	range_literal() {
	    let localctx = new Range_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, MParser.RULE_range_literal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1720;
	        this.match(MParser.LBRAK);
	        this.state = 1721;
	        localctx.low = this.expression(0);
	        this.state = 1722;
	        this.match(MParser.RANGE);
	        this.state = 1723;
	        localctx.high = this.expression(0);
	        this.state = 1724;
	        this.match(MParser.RBRAK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	typedef(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new TypedefContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 192;
	    this.enterRecursionRule(localctx, 192, MParser.RULE_typedef, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1743;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.BOOLEAN:
	        case MParser.CSS:
	        case MParser.CHARACTER:
	        case MParser.TEXT:
	        case MParser.INTEGER:
	        case MParser.DECIMAL:
	        case MParser.DATE:
	        case MParser.TIME:
	        case MParser.DATETIME:
	        case MParser.PERIOD:
	        case MParser.VERSION:
	        case MParser.CODE:
	        case MParser.DOCUMENT:
	        case MParser.BLOB:
	        case MParser.IMAGE:
	        case MParser.UUID:
	        case MParser.DBID:
	        case MParser.HTML:
	        case MParser.TYPE_IDENTIFIER:
	            localctx = new PrimaryTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1727;
	            localctx.p = this.primary_type();
	            break;
	        case MParser.CURSOR:
	            localctx = new CursorTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1728;
	            this.match(MParser.CURSOR);
	            this.state = 1729;
	            this.match(MParser.LT);
	            this.state = 1730;
	            localctx.c = this.typedef(0);
	            this.state = 1731;
	            this.match(MParser.GT);
	            break;
	        case MParser.ITERATOR:
	            localctx = new IteratorTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1733;
	            this.match(MParser.ITERATOR);
	            this.state = 1734;
	            this.match(MParser.LT);
	            this.state = 1735;
	            localctx.i = this.typedef(0);
	            this.state = 1736;
	            this.match(MParser.GT);
	            break;
	        case MParser.TYPE:
	            localctx = new TypeTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1738;
	            this.match(MParser.TYPE);
	            this.state = 1739;
	            this.match(MParser.LT);
	            this.state = 1740;
	            localctx.t = this.typedef(0);
	            this.state = 1741;
	            this.match(MParser.GT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1754;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,133,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1752;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new SetTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
	                    localctx.s = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_typedef);
	                    this.state = 1745;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 1746;
	                    this.match(MParser.LTGT);
	                    break;

	                case 2:
	                    localctx = new ListTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
	                    localctx.l = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_typedef);
	                    this.state = 1747;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 1748;
	                    this.match(MParser.LBRAK);
	                    this.state = 1749;
	                    this.match(MParser.RBRAK);
	                    break;

	                case 3:
	                    localctx = new DictTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
	                    localctx.d = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_typedef);
	                    this.state = 1750;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 1751;
	                    this.match(MParser.LTCOLONGT);
	                    break;

	                } 
	            }
	            this.state = 1756;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,133,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	primary_type() {
	    let localctx = new Primary_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, MParser.RULE_primary_type);
	    try {
	        this.state = 1759;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.BOOLEAN:
	        case MParser.CSS:
	        case MParser.CHARACTER:
	        case MParser.TEXT:
	        case MParser.INTEGER:
	        case MParser.DECIMAL:
	        case MParser.DATE:
	        case MParser.TIME:
	        case MParser.DATETIME:
	        case MParser.PERIOD:
	        case MParser.VERSION:
	        case MParser.CODE:
	        case MParser.DOCUMENT:
	        case MParser.BLOB:
	        case MParser.IMAGE:
	        case MParser.UUID:
	        case MParser.DBID:
	        case MParser.HTML:
	            localctx = new NativeTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1757;
	            localctx.n = this.native_type();
	            break;
	        case MParser.TYPE_IDENTIFIER:
	            localctx = new CategoryTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1758;
	            localctx.c = this.category_type();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_type() {
	    let localctx = new Native_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, MParser.RULE_native_type);
	    try {
	        this.state = 1779;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.BOOLEAN:
	            localctx = new BooleanTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1761;
	            this.match(MParser.BOOLEAN);
	            break;
	        case MParser.CSS:
	            localctx = new CssTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1762;
	            this.match(MParser.CSS);
	            break;
	        case MParser.CHARACTER:
	            localctx = new CharacterTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1763;
	            this.match(MParser.CHARACTER);
	            break;
	        case MParser.TEXT:
	            localctx = new TextTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1764;
	            this.match(MParser.TEXT);
	            break;
	        case MParser.IMAGE:
	            localctx = new ImageTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1765;
	            this.match(MParser.IMAGE);
	            break;
	        case MParser.INTEGER:
	            localctx = new IntegerTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1766;
	            this.match(MParser.INTEGER);
	            break;
	        case MParser.DECIMAL:
	            localctx = new DecimalTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1767;
	            this.match(MParser.DECIMAL);
	            break;
	        case MParser.DOCUMENT:
	            localctx = new DocumentTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1768;
	            this.match(MParser.DOCUMENT);
	            break;
	        case MParser.DATE:
	            localctx = new DateTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1769;
	            this.match(MParser.DATE);
	            break;
	        case MParser.DATETIME:
	            localctx = new DateTimeTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1770;
	            this.match(MParser.DATETIME);
	            break;
	        case MParser.TIME:
	            localctx = new TimeTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1771;
	            this.match(MParser.TIME);
	            break;
	        case MParser.PERIOD:
	            localctx = new PeriodTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1772;
	            this.match(MParser.PERIOD);
	            break;
	        case MParser.VERSION:
	            localctx = new VersionTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1773;
	            this.match(MParser.VERSION);
	            break;
	        case MParser.CODE:
	            localctx = new CodeTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1774;
	            this.match(MParser.CODE);
	            break;
	        case MParser.BLOB:
	            localctx = new BlobTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1775;
	            this.match(MParser.BLOB);
	            break;
	        case MParser.UUID:
	            localctx = new UUIDTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1776;
	            this.match(MParser.UUID);
	            break;
	        case MParser.DBID:
	            localctx = new DbIdTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1777;
	            this.match(MParser.DBID);
	            break;
	        case MParser.HTML:
	            localctx = new HtmlTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1778;
	            this.match(MParser.HTML);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	category_type() {
	    let localctx = new Category_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, MParser.RULE_category_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1781;
	        localctx.t1 = this.match(MParser.TYPE_IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mutable_category_type() {
	    let localctx = new Mutable_category_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, MParser.RULE_mutable_category_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1784;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.MUTABLE) {
	            this.state = 1783;
	            this.match(MParser.MUTABLE);
	        }

	        this.state = 1786;
	        this.category_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	code_type() {
	    let localctx = new Code_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, MParser.RULE_code_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1788;
	        localctx.t1 = this.match(MParser.CODE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	category_declaration() {
	    let localctx = new Category_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, MParser.RULE_category_declaration);
	    try {
	        this.state = 1793;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ConcreteCategoryDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1790;
	            localctx.decl = this.concrete_category_declaration();
	            break;

	        case 2:
	            localctx = new NativeCategoryDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1791;
	            localctx.decl = this.native_category_declaration();
	            break;

	        case 3:
	            localctx = new SingletonCategoryDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1792;
	            localctx.decl = this.singleton_category_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	widget_declaration() {
	    let localctx = new Widget_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, MParser.RULE_widget_declaration);
	    try {
	        this.state = 1797;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.WIDGET:
	            localctx = new ConcreteWidgetDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1795;
	            localctx.decl = this.concrete_widget_declaration();
	            break;
	        case MParser.NATIVE:
	            localctx = new NativeWidgetDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1796;
	            localctx.decl = this.native_widget_declaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_identifier_list() {
	    let localctx = new Type_identifier_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, MParser.RULE_type_identifier_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1799;
	        this.type_identifier();
	        this.state = 1804;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,139,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1800;
	                this.match(MParser.COMMA);
	                this.state = 1801;
	                this.type_identifier(); 
	            }
	            this.state = 1806;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,139,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	method_identifier() {
	    let localctx = new Method_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, MParser.RULE_method_identifier);
	    try {
	        this.state = 1809;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.CATEGORY:
	        case MParser.RESOURCE:
	        case MParser.VARIABLE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1807;
	            this.variable_identifier();
	            break;
	        case MParser.TYPE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1808;
	            this.type_identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier_or_keyword() {
	    let localctx = new Identifier_or_keywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, MParser.RULE_identifier_or_keyword);
	    try {
	        this.state = 1813;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1811;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1812;
	            this.keyword();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nospace_hyphen_identifier_or_keyword() {
	    let localctx = new Nospace_hyphen_identifier_or_keywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, MParser.RULE_nospace_hyphen_identifier_or_keyword);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1815;
	        if (!( this.wasNotWhiteSpace())) {
	            throw new antlr4.error.FailedPredicateException(this, "$parser.wasNotWhiteSpace()");
	        }
	        this.state = 1816;
	        this.match(MParser.MINUS);
	        this.state = 1817;
	        this.nospace_identifier_or_keyword();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nospace_identifier_or_keyword() {
	    let localctx = new Nospace_identifier_or_keywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, MParser.RULE_nospace_identifier_or_keyword);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1819;
	        if (!( this.wasNotWhiteSpace())) {
	            throw new antlr4.error.FailedPredicateException(this, "$parser.wasNotWhiteSpace()");
	        }
	        this.state = 1820;
	        this.identifier_or_keyword();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, MParser.RULE_identifier);
	    try {
	        this.state = 1825;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.CATEGORY:
	        case MParser.RESOURCE:
	        case MParser.VARIABLE_IDENTIFIER:
	            localctx = new VariableIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1822;
	            this.variable_identifier();
	            break;
	        case MParser.TYPE_IDENTIFIER:
	            localctx = new TypeIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1823;
	            this.type_identifier();
	            break;
	        case MParser.SYMBOL_IDENTIFIER:
	            localctx = new SymbolIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1824;
	            this.symbol_identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_identifier() {
	    let localctx = new Member_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, MParser.RULE_member_identifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1827;
	        _la = this._input.LA(1);
	        if(!(_la===MParser.CATEGORY || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (MParser.MUTABLE - 127)) | (1 << (MParser.RESOURCE - 127)) | (1 << (MParser.STORABLE - 127)))) !== 0) || _la===MParser.VARIABLE_IDENTIFIER)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_identifier() {
	    let localctx = new Variable_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, MParser.RULE_variable_identifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1829;
	        _la = this._input.LA(1);
	        if(!(_la===MParser.CATEGORY || _la===MParser.RESOURCE || _la===MParser.VARIABLE_IDENTIFIER)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_identifier() {
	    let localctx = new Attribute_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, MParser.RULE_attribute_identifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1831;
	        _la = this._input.LA(1);
	        if(!(((((_la - 143)) & ~0x1f) == 0 && ((1 << (_la - 143)) & ((1 << (MParser.RESOURCE - 143)) | (1 << (MParser.STORABLE - 143)) | (1 << (MParser.VARIABLE_IDENTIFIER - 143)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_identifier() {
	    let localctx = new Type_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, MParser.RULE_type_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1833;
	        this.match(MParser.TYPE_IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbol_identifier() {
	    let localctx = new Symbol_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, MParser.RULE_symbol_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1835;
	        this.match(MParser.SYMBOL_IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument_list() {
	    let localctx = new Argument_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, MParser.RULE_argument_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1837;
	        this.argument();
	        this.state = 1842;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MParser.COMMA) {
	            this.state = 1838;
	            this.match(MParser.COMMA);
	            this.state = 1839;
	            this.argument();
	            this.state = 1844;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, MParser.RULE_argument);
	    var _la = 0; // Token type
	    try {
	        this.state = 1850;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.CODE:
	            localctx = new CodeArgumentContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1845;
	            localctx.arg = this.code_argument();
	            break;
	        case MParser.CATEGORY:
	        case MParser.MUTABLE:
	        case MParser.RESOURCE:
	        case MParser.VARIABLE_IDENTIFIER:
	            localctx = new OperatorArgumentContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1847;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MParser.MUTABLE) {
	                this.state = 1846;
	                this.match(MParser.MUTABLE);
	            }

	            this.state = 1849;
	            localctx.arg = this.operator_argument();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator_argument() {
	    let localctx = new Operator_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, MParser.RULE_operator_argument);
	    try {
	        this.state = 1854;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1852;
	            this.named_argument();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1853;
	            this.typed_argument();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_argument() {
	    let localctx = new Named_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, MParser.RULE_named_argument);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1856;
	        this.variable_identifier();
	        this.state = 1859;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.EQ) {
	            this.state = 1857;
	            this.match(MParser.EQ);
	            this.state = 1858;
	            this.literal_expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	code_argument() {
	    let localctx = new Code_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, MParser.RULE_code_argument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1861;
	        this.code_type();
	        this.state = 1862;
	        localctx.name = this.variable_identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	category_or_any_type() {
	    let localctx = new Category_or_any_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, MParser.RULE_category_or_any_type);
	    try {
	        this.state = 1866;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.BOOLEAN:
	        case MParser.CSS:
	        case MParser.CHARACTER:
	        case MParser.TEXT:
	        case MParser.INTEGER:
	        case MParser.DECIMAL:
	        case MParser.DATE:
	        case MParser.TIME:
	        case MParser.DATETIME:
	        case MParser.PERIOD:
	        case MParser.VERSION:
	        case MParser.CODE:
	        case MParser.DOCUMENT:
	        case MParser.BLOB:
	        case MParser.IMAGE:
	        case MParser.UUID:
	        case MParser.DBID:
	        case MParser.ITERATOR:
	        case MParser.CURSOR:
	        case MParser.HTML:
	        case MParser.TYPE:
	        case MParser.TYPE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1864;
	            this.typedef(0);
	            break;
	        case MParser.ANY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1865;
	            this.any_type(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	any_type(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Any_typeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 242;
	    this.enterRecursionRule(localctx, 242, MParser.RULE_any_type, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new AnyTypeContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 1869;
	        this.match(MParser.ANY);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1879;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,150,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1877;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new AnyListTypeContext(this, new Any_typeContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_any_type);
	                    this.state = 1871;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1872;
	                    this.match(MParser.LBRAK);
	                    this.state = 1873;
	                    this.match(MParser.RBRAK);
	                    break;

	                case 2:
	                    localctx = new AnyDictTypeContext(this, new Any_typeContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_any_type);
	                    this.state = 1874;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 1875;
	                    this.match(MParser.LCURL);
	                    this.state = 1876;
	                    this.match(MParser.RCURL);
	                    break;

	                } 
	            }
	            this.state = 1881;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,150,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	member_method_declaration_list() {
	    let localctx = new Member_method_declaration_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, MParser.RULE_member_method_declaration_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1882;
	        this.member_method_declaration();
	        this.state = 1888;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,151,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1883;
	                this.lfp();
	                this.state = 1884;
	                this.member_method_declaration(); 
	            }
	            this.state = 1890;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,151,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_method_declaration() {
	    let localctx = new Member_method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, MParser.RULE_member_method_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1896;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MParser.CSS_DATA || _la===MParser.COMMENT) {
	            this.state = 1891;
	            this.comment_statement();
	            this.state = 1892;
	            this.lfp();
	            this.state = 1898;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1904;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MParser.ARONDBASE_IDENTIFIER) {
	            this.state = 1899;
	            this.annotation_constructor();
	            this.state = 1900;
	            this.lfp();
	            this.state = 1906;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1912;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1907;
	            this.setter_method_declaration();
	            break;

	        case 2:
	            this.state = 1908;
	            this.getter_method_declaration();
	            break;

	        case 3:
	            this.state = 1909;
	            this.concrete_method_declaration();
	            break;

	        case 4:
	            this.state = 1910;
	            this.abstract_method_declaration();
	            break;

	        case 5:
	            this.state = 1911;
	            this.operator_method_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_member_method_declaration_list() {
	    let localctx = new Native_member_method_declaration_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, MParser.RULE_native_member_method_declaration_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1914;
	        this.native_member_method_declaration();
	        this.state = 1920;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,155,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1915;
	                this.lfp();
	                this.state = 1916;
	                this.native_member_method_declaration(); 
	            }
	            this.state = 1922;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,155,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_member_method_declaration() {
	    let localctx = new Native_member_method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, MParser.RULE_native_member_method_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1928;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MParser.CSS_DATA || _la===MParser.COMMENT) {
	            this.state = 1923;
	            this.comment_statement();
	            this.state = 1924;
	            this.lfp();
	            this.state = 1930;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1936;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MParser.ARONDBASE_IDENTIFIER) {
	            this.state = 1931;
	            this.annotation_constructor();
	            this.state = 1932;
	            this.lfp();
	            this.state = 1938;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1942;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1939;
	            this.native_getter_declaration();
	            break;

	        case 2:
	            this.state = 1940;
	            this.native_setter_declaration();
	            break;

	        case 3:
	            this.state = 1941;
	            this.native_method_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_category_binding() {
	    let localctx = new Native_category_bindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, MParser.RULE_native_category_binding);
	    try {
	        this.state = 1954;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.JAVA:
	            localctx = new JavaCategoryBindingContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1944;
	            this.match(MParser.JAVA);
	            this.state = 1945;
	            localctx.binding = this.java_class_identifier_expression(0);
	            break;
	        case MParser.CSHARP:
	            localctx = new CSharpCategoryBindingContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1946;
	            this.match(MParser.CSHARP);
	            this.state = 1947;
	            localctx.binding = this.csharp_identifier_expression(0);
	            break;
	        case MParser.PYTHON2:
	            localctx = new Python2CategoryBindingContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1948;
	            this.match(MParser.PYTHON2);
	            this.state = 1949;
	            localctx.binding = this.python_category_binding();
	            break;
	        case MParser.PYTHON3:
	            localctx = new Python3CategoryBindingContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1950;
	            this.match(MParser.PYTHON3);
	            this.state = 1951;
	            localctx.binding = this.python_category_binding();
	            break;
	        case MParser.JAVASCRIPT:
	            localctx = new JavascriptCategoryBindingContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1952;
	            this.match(MParser.JAVASCRIPT);
	            this.state = 1953;
	            localctx.binding = this.javascript_category_binding();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	python_category_binding() {
	    let localctx = new Python_category_bindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, MParser.RULE_python_category_binding);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1956;
	        this.identifier();
	        this.state = 1958;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	        if(la_===1) {
	            this.state = 1957;
	            this.python_module();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	python_module() {
	    let localctx = new Python_moduleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, MParser.RULE_python_module);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1960;
	        this.match(MParser.FROM);
	        this.state = 1961;
	        this.module_token();
	        this.state = 1962;
	        this.match(MParser.COLON);
	        this.state = 1963;
	        this.python_identifier();
	        this.state = 1968;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,161,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1964;
	                this.match(MParser.DOT);
	                this.state = 1965;
	                this.python_identifier(); 
	            }
	            this.state = 1970;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,161,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_category_binding() {
	    let localctx = new Javascript_category_bindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, MParser.RULE_javascript_category_binding);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1971;
	        this.javascript_identifier();
	        this.state = 1976;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,162,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1972;
	                this.match(MParser.DOT);
	                this.state = 1973;
	                this.javascript_identifier(); 
	            }
	            this.state = 1978;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,162,this._ctx);
	        }

	        this.state = 1980;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
	        if(la_===1) {
	            this.state = 1979;
	            this.javascript_module();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_module() {
	    let localctx = new Javascript_moduleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, MParser.RULE_javascript_module);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1982;
	        this.match(MParser.FROM);
	        this.state = 1983;
	        this.module_token();
	        this.state = 1984;
	        this.match(MParser.COLON);
	        this.state = 1986;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.SLASH) {
	            this.state = 1985;
	            this.match(MParser.SLASH);
	        }

	        this.state = 1988;
	        this.javascript_identifier();
	        this.state = 1993;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,165,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1989;
	                this.match(MParser.SLASH);
	                this.state = 1990;
	                this.javascript_identifier(); 
	            }
	            this.state = 1995;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,165,this._ctx);
	        }

	        this.state = 1998;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
	        if(la_===1) {
	            this.state = 1996;
	            this.match(MParser.DOT);
	            this.state = 1997;
	            this.javascript_identifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_identifier_list() {
	    let localctx = new Variable_identifier_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, MParser.RULE_variable_identifier_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2000;
	        this.variable_identifier();
	        this.state = 2005;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MParser.COMMA) {
	            this.state = 2001;
	            this.match(MParser.COMMA);
	            this.state = 2002;
	            this.variable_identifier();
	            this.state = 2007;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_identifier_list() {
	    let localctx = new Attribute_identifier_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, MParser.RULE_attribute_identifier_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2008;
	        this.attribute_identifier();
	        this.state = 2013;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MParser.COMMA) {
	            this.state = 2009;
	            this.match(MParser.COMMA);
	            this.state = 2010;
	            this.attribute_identifier();
	            this.state = 2015;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	method_declaration() {
	    let localctx = new Method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, MParser.RULE_method_declaration);
	    try {
	        this.state = 2020;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2016;
	            this.abstract_method_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2017;
	            this.concrete_method_declaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2018;
	            this.native_method_declaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2019;
	            this.test_method_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_statement_list() {
	    let localctx = new Native_statement_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, MParser.RULE_native_statement_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2022;
	        this.native_statement();
	        this.state = 2028;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,170,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2023;
	                this.lfp();
	                this.state = 2024;
	                this.native_statement(); 
	            }
	            this.state = 2030;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,170,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_statement() {
	    let localctx = new Native_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, MParser.RULE_native_statement);
	    try {
	        this.state = 2041;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.JAVA:
	            localctx = new JavaNativeStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2031;
	            this.match(MParser.JAVA);
	            this.state = 2032;
	            this.java_statement();
	            break;
	        case MParser.CSHARP:
	            localctx = new CSharpNativeStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2033;
	            this.match(MParser.CSHARP);
	            this.state = 2034;
	            this.csharp_statement();
	            break;
	        case MParser.PYTHON2:
	            localctx = new Python2NativeStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2035;
	            this.match(MParser.PYTHON2);
	            this.state = 2036;
	            this.python_native_statement();
	            break;
	        case MParser.PYTHON3:
	            localctx = new Python3NativeStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2037;
	            this.match(MParser.PYTHON3);
	            this.state = 2038;
	            this.python_native_statement();
	            break;
	        case MParser.JAVASCRIPT:
	            localctx = new JavascriptNativeStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2039;
	            this.match(MParser.JAVASCRIPT);
	            this.state = 2040;
	            this.javascript_native_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	python_native_statement() {
	    let localctx = new Python_native_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, MParser.RULE_python_native_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2043;
	        this.python_statement();
	        this.state = 2045;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.SEMI) {
	            this.state = 2044;
	            this.match(MParser.SEMI);
	        }

	        this.state = 2048;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.FROM) {
	            this.state = 2047;
	            this.python_module();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_native_statement() {
	    let localctx = new Javascript_native_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, MParser.RULE_javascript_native_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2050;
	        this.javascript_statement();
	        this.state = 2052;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.SEMI) {
	            this.state = 2051;
	            this.match(MParser.SEMI);
	        }

	        this.state = 2055;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.FROM) {
	            this.state = 2054;
	            this.javascript_module();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement_list() {
	    let localctx = new Statement_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, MParser.RULE_statement_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2057;
	        this.statement();
	        this.state = 2063;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,176,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2058;
	                this.lfp();
	                this.state = 2059;
	                this.statement(); 
	            }
	            this.state = 2065;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,176,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertion_list() {
	    let localctx = new Assertion_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, MParser.RULE_assertion_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2066;
	        this.assertion();
	        this.state = 2072;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,177,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2067;
	                this.lfp();
	                this.state = 2068;
	                this.assertion(); 
	            }
	            this.state = 2074;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,177,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_case_statement_list() {
	    let localctx = new Switch_case_statement_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, MParser.RULE_switch_case_statement_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2075;
	        this.switch_case_statement();
	        this.state = 2081;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,178,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2076;
	                this.lfp();
	                this.state = 2077;
	                this.switch_case_statement(); 
	            }
	            this.state = 2083;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,178,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catch_statement_list() {
	    let localctx = new Catch_statement_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, MParser.RULE_catch_statement_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2084;
	        this.catch_statement();
	        this.state = 2090;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,179,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2085;
	                this.lfp();
	                this.state = 2086;
	                this.catch_statement(); 
	            }
	            this.state = 2092;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,179,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal_collection() {
	    let localctx = new Literal_collectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, MParser.RULE_literal_collection);
	    try {
	        this.state = 2107;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new LiteralRangeLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2093;
	            this.match(MParser.LBRAK);
	            this.state = 2094;
	            localctx.low = this.atomic_literal();
	            this.state = 2095;
	            this.match(MParser.RANGE);
	            this.state = 2096;
	            localctx.high = this.atomic_literal();
	            this.state = 2097;
	            this.match(MParser.RBRAK);
	            break;

	        case 2:
	            localctx = new LiteralListLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2099;
	            this.match(MParser.LBRAK);
	            this.state = 2100;
	            this.literal_list_literal();
	            this.state = 2101;
	            this.match(MParser.RBRAK);
	            break;

	        case 3:
	            localctx = new LiteralSetLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2103;
	            this.match(MParser.LT);
	            this.state = 2104;
	            this.literal_list_literal();
	            this.state = 2105;
	            this.match(MParser.GT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomic_literal() {
	    let localctx = new Atomic_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, MParser.RULE_atomic_literal);
	    var _la = 0; // Token type
	    try {
	        this.state = 2132;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new MinIntegerLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2109;
	            this.match(MParser.MIN_INTEGER);
	            break;

	        case 2:
	            localctx = new MaxIntegerLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2110;
	            this.match(MParser.MAX_INTEGER);
	            break;

	        case 3:
	            localctx = new IntegerLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2112;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MParser.MINUS) {
	                this.state = 2111;
	                this.match(MParser.MINUS);
	            }

	            this.state = 2114;
	            this.match(MParser.INTEGER_LITERAL);
	            break;

	        case 4:
	            localctx = new HexadecimalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2115;
	            this.match(MParser.HEXA_LITERAL);
	            break;

	        case 5:
	            localctx = new CharacterLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2116;
	            this.match(MParser.CHAR_LITERAL);
	            break;

	        case 6:
	            localctx = new DateLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2117;
	            this.match(MParser.DATE_LITERAL);
	            break;

	        case 7:
	            localctx = new TimeLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2118;
	            this.match(MParser.TIME_LITERAL);
	            break;

	        case 8:
	            localctx = new TextLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2119;
	            this.match(MParser.TEXT_LITERAL);
	            break;

	        case 9:
	            localctx = new DecimalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2121;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MParser.MINUS) {
	                this.state = 2120;
	                this.match(MParser.MINUS);
	            }

	            this.state = 2123;
	            this.match(MParser.DECIMAL_LITERAL);
	            break;

	        case 10:
	            localctx = new DateTimeLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2124;
	            this.match(MParser.DATETIME_LITERAL);
	            break;

	        case 11:
	            localctx = new BooleanLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2125;
	            this.match(MParser.BOOLEAN_LITERAL);
	            break;

	        case 12:
	            localctx = new PeriodLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2126;
	            this.match(MParser.PERIOD_LITERAL);
	            break;

	        case 13:
	            localctx = new VersionLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2127;
	            this.match(MParser.VERSION_LITERAL);
	            break;

	        case 14:
	            localctx = new UUIDLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2128;
	            this.match(MParser.UUID_LITERAL);
	            break;

	        case 15:
	            localctx = new SymbolLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2129;
	            this.symbol_identifier();
	            break;

	        case 16:
	            localctx = new TypeLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2130;
	            this.type_literal();
	            break;

	        case 17:
	            localctx = new NullLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2131;
	            this.null_literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal_list_literal() {
	    let localctx = new Literal_list_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, MParser.RULE_literal_list_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2134;
	        this.atomic_literal();
	        this.state = 2139;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MParser.COMMA) {
	            this.state = 2135;
	            this.match(MParser.COMMA);
	            this.state = 2136;
	            this.atomic_literal();
	            this.state = 2141;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	this_expression() {
	    let localctx = new This_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, MParser.RULE_this_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2142;
	        _la = this._input.LA(1);
	        if(!(_la===MParser.SELF || _la===MParser.THIS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	super_expression() {
	    let localctx = new Super_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, MParser.RULE_super_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2147;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.TYPE_IDENTIFIER) {
	            this.state = 2144;
	            this.category_type();
	            this.state = 2145;
	            this.match(MParser.DOT);
	        }

	        this.state = 2149;
	        this.match(MParser.SUPER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesis_expression() {
	    let localctx = new Parenthesis_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, MParser.RULE_parenthesis_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2151;
	        this.match(MParser.LPAR);
	        this.state = 2152;
	        this.expression(0);
	        this.state = 2153;
	        this.match(MParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal_expression() {
	    let localctx = new Literal_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, MParser.RULE_literal_expression);
	    try {
	        this.state = 2157;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.MINUS:
	        case MParser.BOOLEAN:
	        case MParser.CSS:
	        case MParser.CHARACTER:
	        case MParser.TEXT:
	        case MParser.INTEGER:
	        case MParser.DECIMAL:
	        case MParser.DATE:
	        case MParser.TIME:
	        case MParser.DATETIME:
	        case MParser.PERIOD:
	        case MParser.VERSION:
	        case MParser.CODE:
	        case MParser.DOCUMENT:
	        case MParser.BLOB:
	        case MParser.IMAGE:
	        case MParser.UUID:
	        case MParser.DBID:
	        case MParser.ITERATOR:
	        case MParser.CURSOR:
	        case MParser.HTML:
	        case MParser.TYPE:
	        case MParser.ANY:
	        case MParser.NONE:
	        case MParser.BOOLEAN_LITERAL:
	        case MParser.CHAR_LITERAL:
	        case MParser.MIN_INTEGER:
	        case MParser.MAX_INTEGER:
	        case MParser.SYMBOL_IDENTIFIER:
	        case MParser.TYPE_IDENTIFIER:
	        case MParser.TEXT_LITERAL:
	        case MParser.UUID_LITERAL:
	        case MParser.VERSION_LITERAL:
	        case MParser.INTEGER_LITERAL:
	        case MParser.HEXA_LITERAL:
	        case MParser.DECIMAL_LITERAL:
	        case MParser.DATETIME_LITERAL:
	        case MParser.TIME_LITERAL:
	        case MParser.DATE_LITERAL:
	        case MParser.PERIOD_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2155;
	            this.atomic_literal();
	            break;
	        case MParser.LPAR:
	        case MParser.LBRAK:
	        case MParser.LCURL:
	        case MParser.LT:
	        case MParser.LTCOLONGT:
	        case MParser.MUTABLE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2156;
	            this.collection_literal();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collection_literal() {
	    let localctx = new Collection_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, MParser.RULE_collection_literal);
	    try {
	        this.state = 2165;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,187,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2159;
	            this.range_literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2160;
	            this.list_literal();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2161;
	            this.set_literal();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2162;
	            this.dict_literal();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2163;
	            this.document_literal();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2164;
	            this.tuple_literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuple_literal() {
	    let localctx = new Tuple_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, MParser.RULE_tuple_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2168;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.MUTABLE) {
	            this.state = 2167;
	            this.match(MParser.MUTABLE);
	        }

	        this.state = 2170;
	        this.match(MParser.LPAR);
	        this.state = 2172;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 21)) & ~0x1f) == 0 && ((1 << (_la - 21)) & ((1 << (MParser.LPAR - 21)) | (1 << (MParser.LBRAK - 21)) | (1 << (MParser.LCURL - 21)) | (1 << (MParser.MINUS - 21)) | (1 << (MParser.LT - 21)) | (1 << (MParser.LTGT - 21)) | (1 << (MParser.LTCOLONGT - 21)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (MParser.BOOLEAN - 54)) | (1 << (MParser.CSS - 54)) | (1 << (MParser.CHARACTER - 54)) | (1 << (MParser.TEXT - 54)) | (1 << (MParser.INTEGER - 54)) | (1 << (MParser.DECIMAL - 54)) | (1 << (MParser.DATE - 54)) | (1 << (MParser.TIME - 54)) | (1 << (MParser.DATETIME - 54)) | (1 << (MParser.PERIOD - 54)) | (1 << (MParser.VERSION - 54)) | (1 << (MParser.CODE - 54)) | (1 << (MParser.DOCUMENT - 54)) | (1 << (MParser.BLOB - 54)) | (1 << (MParser.IMAGE - 54)) | (1 << (MParser.UUID - 54)) | (1 << (MParser.DBID - 54)) | (1 << (MParser.ITERATOR - 54)) | (1 << (MParser.CURSOR - 54)) | (1 << (MParser.HTML - 54)) | (1 << (MParser.TYPE - 54)) | (1 << (MParser.ANY - 54)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (MParser.CATEGORY - 91)) | (1 << (MParser.EXECUTE - 91)) | (1 << (MParser.FETCH - 91)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (MParser.MUTABLE - 127)) | (1 << (MParser.NONE - 127)) | (1 << (MParser.NOT - 127)) | (1 << (MParser.READ - 127)) | (1 << (MParser.RESOURCE - 127)) | (1 << (MParser.SELF - 127)) | (1 << (MParser.SORTED - 127)) | (1 << (MParser.SUPER - 127)) | (1 << (MParser.THIS - 127)))) !== 0) || ((((_la - 168)) & ~0x1f) == 0 && ((1 << (_la - 168)) & ((1 << (MParser.BOOLEAN_LITERAL - 168)) | (1 << (MParser.CHAR_LITERAL - 168)) | (1 << (MParser.MIN_INTEGER - 168)) | (1 << (MParser.MAX_INTEGER - 168)) | (1 << (MParser.SYMBOL_IDENTIFIER - 168)) | (1 << (MParser.TYPE_IDENTIFIER - 168)) | (1 << (MParser.VARIABLE_IDENTIFIER - 168)) | (1 << (MParser.TEXT_LITERAL - 168)) | (1 << (MParser.UUID_LITERAL - 168)) | (1 << (MParser.VERSION_LITERAL - 168)) | (1 << (MParser.INTEGER_LITERAL - 168)) | (1 << (MParser.HEXA_LITERAL - 168)) | (1 << (MParser.DECIMAL_LITERAL - 168)) | (1 << (MParser.DATETIME_LITERAL - 168)) | (1 << (MParser.TIME_LITERAL - 168)) | (1 << (MParser.DATE_LITERAL - 168)) | (1 << (MParser.PERIOD_LITERAL - 168)))) !== 0)) {
	            this.state = 2171;
	            this.expression_tuple();
	        }

	        this.state = 2174;
	        this.match(MParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dict_literal() {
	    let localctx = new Dict_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, MParser.RULE_dict_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2177;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.MUTABLE) {
	            this.state = 2176;
	            this.match(MParser.MUTABLE);
	        }

	        this.state = 2187;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2179;
	            this.match(MParser.LT);
	            this.state = 2180;
	            this.dict_entry_list();
	            this.state = 2181;
	            this.match(MParser.GT);
	            break;

	        case 2:
	            this.state = 2183;
	            this.match(MParser.LTCOLONGT);
	            break;

	        case 3:
	            this.state = 2184;
	            this.match(MParser.LT);
	            this.state = 2185;
	            this.match(MParser.COLON);
	            this.state = 2186;
	            this.match(MParser.GT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	document_literal() {
	    let localctx = new Document_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, MParser.RULE_document_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2189;
	        this.match(MParser.LCURL);
	        this.state = 2191;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MParser.JAVA) | (1 << MParser.CSHARP) | (1 << MParser.PYTHON2) | (1 << MParser.PYTHON3) | (1 << MParser.JAVASCRIPT) | (1 << MParser.SWIFT))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (MParser.BOOLEAN - 54)) | (1 << (MParser.CHARACTER - 54)) | (1 << (MParser.TEXT - 54)) | (1 << (MParser.INTEGER - 54)) | (1 << (MParser.DECIMAL - 54)) | (1 << (MParser.DATE - 54)) | (1 << (MParser.TIME - 54)) | (1 << (MParser.DATETIME - 54)) | (1 << (MParser.PERIOD - 54)) | (1 << (MParser.VERSION - 54)) | (1 << (MParser.CODE - 54)) | (1 << (MParser.DOCUMENT - 54)) | (1 << (MParser.BLOB - 54)) | (1 << (MParser.IMAGE - 54)) | (1 << (MParser.UUID - 54)) | (1 << (MParser.DBID - 54)) | (1 << (MParser.ITERATOR - 54)) | (1 << (MParser.CURSOR - 54)) | (1 << (MParser.HTML - 54)) | (1 << (MParser.ABSTRACT - 54)) | (1 << (MParser.ALL - 54)) | (1 << (MParser.ALWAYS - 54)) | (1 << (MParser.AND - 54)) | (1 << (MParser.ANY - 54)) | (1 << (MParser.AS - 54)) | (1 << (MParser.ASC - 54)) | (1 << (MParser.ATTR - 54)) | (1 << (MParser.ATTRIBUTE - 54)) | (1 << (MParser.ATTRIBUTES - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (MParser.BINDINGS - 86)) | (1 << (MParser.BREAK - 86)) | (1 << (MParser.BY - 86)) | (1 << (MParser.CASE - 86)) | (1 << (MParser.CATCH - 86)) | (1 << (MParser.CATEGORY - 86)) | (1 << (MParser.CLASS - 86)) | (1 << (MParser.CONTAINS - 86)) | (1 << (MParser.DEF - 86)) | (1 << (MParser.DEFAULT - 86)) | (1 << (MParser.DEFINE - 86)) | (1 << (MParser.DELETE - 86)) | (1 << (MParser.DESC - 86)) | (1 << (MParser.DO - 86)) | (1 << (MParser.DOING - 86)) | (1 << (MParser.EACH - 86)) | (1 << (MParser.ELSE - 86)) | (1 << (MParser.ENUM - 86)) | (1 << (MParser.ENUMERATED - 86)) | (1 << (MParser.EXCEPT - 86)) | (1 << (MParser.EXECUTE - 86)) | (1 << (MParser.EXPECTING - 86)) | (1 << (MParser.EXTENDS - 86)) | (1 << (MParser.FETCH - 86)) | (1 << (MParser.FILTERED - 86)) | (1 << (MParser.FINALLY - 86)) | (1 << (MParser.FLUSH - 86)) | (1 << (MParser.FOR - 86)) | (1 << (MParser.FROM - 86)) | (1 << (MParser.GETTER - 86)) | (1 << (MParser.HAS - 86)) | (1 << (MParser.IF - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (MParser.IN - 118)) | (1 << (MParser.INDEX - 118)) | (1 << (MParser.IS - 118)) | (1 << (MParser.MATCHING - 118)) | (1 << (MParser.METHOD - 118)) | (1 << (MParser.METHODS - 118)) | (1 << (MParser.MODULO - 118)) | (1 << (MParser.MUTABLE - 118)) | (1 << (MParser.NATIVE - 118)) | (1 << (MParser.NONE - 118)) | (1 << (MParser.NOT - 118)) | (1 << (MParser.NOTHING - 118)) | (1 << (MParser.NULL - 118)) | (1 << (MParser.ON - 118)) | (1 << (MParser.ONE - 118)) | (1 << (MParser.OPERATOR - 118)) | (1 << (MParser.OR - 118)) | (1 << (MParser.ORDER - 118)) | (1 << (MParser.OTHERWISE - 118)) | (1 << (MParser.PASS - 118)) | (1 << (MParser.RAISE - 118)) | (1 << (MParser.READ - 118)) | (1 << (MParser.RECEIVING - 118)) | (1 << (MParser.RESOURCE - 118)) | (1 << (MParser.RETURN - 118)) | (1 << (MParser.RETURNING - 118)) | (1 << (MParser.ROWS - 118)) | (1 << (MParser.SELF - 118)) | (1 << (MParser.SETTER - 118)) | (1 << (MParser.SINGLETON - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (MParser.SORTED - 150)) | (1 << (MParser.STORABLE - 150)) | (1 << (MParser.STORE - 150)) | (1 << (MParser.SUPER - 150)) | (1 << (MParser.SWITCH - 150)) | (1 << (MParser.TEST - 150)) | (1 << (MParser.THIS - 150)) | (1 << (MParser.THROW - 150)) | (1 << (MParser.TO - 150)) | (1 << (MParser.TRY - 150)) | (1 << (MParser.VERIFYING - 150)) | (1 << (MParser.WIDGET - 150)) | (1 << (MParser.WITH - 150)) | (1 << (MParser.WHEN - 150)) | (1 << (MParser.WHERE - 150)) | (1 << (MParser.WHILE - 150)) | (1 << (MParser.WRITE - 150)) | (1 << (MParser.SYMBOL_IDENTIFIER - 150)) | (1 << (MParser.TYPE_IDENTIFIER - 150)) | (1 << (MParser.VARIABLE_IDENTIFIER - 150)) | (1 << (MParser.TEXT_LITERAL - 150)))) !== 0)) {
	            this.state = 2190;
	            this.doc_entry_list();
	        }

	        this.state = 2193;
	        this.match(MParser.RCURL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression_tuple() {
	    let localctx = new Expression_tupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, MParser.RULE_expression_tuple);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2195;
	        this.expression(0);
	        this.state = 2196;
	        this.match(MParser.COMMA);
	        this.state = 2205;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 21)) & ~0x1f) == 0 && ((1 << (_la - 21)) & ((1 << (MParser.LPAR - 21)) | (1 << (MParser.LBRAK - 21)) | (1 << (MParser.LCURL - 21)) | (1 << (MParser.MINUS - 21)) | (1 << (MParser.LT - 21)) | (1 << (MParser.LTGT - 21)) | (1 << (MParser.LTCOLONGT - 21)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (MParser.BOOLEAN - 54)) | (1 << (MParser.CSS - 54)) | (1 << (MParser.CHARACTER - 54)) | (1 << (MParser.TEXT - 54)) | (1 << (MParser.INTEGER - 54)) | (1 << (MParser.DECIMAL - 54)) | (1 << (MParser.DATE - 54)) | (1 << (MParser.TIME - 54)) | (1 << (MParser.DATETIME - 54)) | (1 << (MParser.PERIOD - 54)) | (1 << (MParser.VERSION - 54)) | (1 << (MParser.CODE - 54)) | (1 << (MParser.DOCUMENT - 54)) | (1 << (MParser.BLOB - 54)) | (1 << (MParser.IMAGE - 54)) | (1 << (MParser.UUID - 54)) | (1 << (MParser.DBID - 54)) | (1 << (MParser.ITERATOR - 54)) | (1 << (MParser.CURSOR - 54)) | (1 << (MParser.HTML - 54)) | (1 << (MParser.TYPE - 54)) | (1 << (MParser.ANY - 54)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (MParser.CATEGORY - 91)) | (1 << (MParser.EXECUTE - 91)) | (1 << (MParser.FETCH - 91)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (MParser.MUTABLE - 127)) | (1 << (MParser.NONE - 127)) | (1 << (MParser.NOT - 127)) | (1 << (MParser.READ - 127)) | (1 << (MParser.RESOURCE - 127)) | (1 << (MParser.SELF - 127)) | (1 << (MParser.SORTED - 127)) | (1 << (MParser.SUPER - 127)) | (1 << (MParser.THIS - 127)))) !== 0) || ((((_la - 168)) & ~0x1f) == 0 && ((1 << (_la - 168)) & ((1 << (MParser.BOOLEAN_LITERAL - 168)) | (1 << (MParser.CHAR_LITERAL - 168)) | (1 << (MParser.MIN_INTEGER - 168)) | (1 << (MParser.MAX_INTEGER - 168)) | (1 << (MParser.SYMBOL_IDENTIFIER - 168)) | (1 << (MParser.TYPE_IDENTIFIER - 168)) | (1 << (MParser.VARIABLE_IDENTIFIER - 168)) | (1 << (MParser.TEXT_LITERAL - 168)) | (1 << (MParser.UUID_LITERAL - 168)) | (1 << (MParser.VERSION_LITERAL - 168)) | (1 << (MParser.INTEGER_LITERAL - 168)) | (1 << (MParser.HEXA_LITERAL - 168)) | (1 << (MParser.DECIMAL_LITERAL - 168)) | (1 << (MParser.DATETIME_LITERAL - 168)) | (1 << (MParser.TIME_LITERAL - 168)) | (1 << (MParser.DATE_LITERAL - 168)) | (1 << (MParser.PERIOD_LITERAL - 168)))) !== 0)) {
	            this.state = 2197;
	            this.expression(0);
	            this.state = 2202;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===MParser.COMMA) {
	                this.state = 2198;
	                this.match(MParser.COMMA);
	                this.state = 2199;
	                this.expression(0);
	                this.state = 2204;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doc_entry_list() {
	    let localctx = new Doc_entry_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, MParser.RULE_doc_entry_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2207;
	        this.doc_entry();
	        this.state = 2212;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MParser.COMMA) {
	            this.state = 2208;
	            this.match(MParser.COMMA);
	            this.state = 2209;
	            this.doc_entry();
	            this.state = 2214;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doc_entry() {
	    let localctx = new Doc_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, MParser.RULE_doc_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2215;
	        localctx.key = this.doc_key();
	        this.state = 2216;
	        this.match(MParser.COLON);
	        this.state = 2217;
	        localctx.value = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doc_key() {
	    let localctx = new Doc_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, MParser.RULE_doc_key);
	    try {
	        this.state = 2221;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.JAVA:
	        case MParser.CSHARP:
	        case MParser.PYTHON2:
	        case MParser.PYTHON3:
	        case MParser.JAVASCRIPT:
	        case MParser.SWIFT:
	        case MParser.BOOLEAN:
	        case MParser.CHARACTER:
	        case MParser.TEXT:
	        case MParser.INTEGER:
	        case MParser.DECIMAL:
	        case MParser.DATE:
	        case MParser.TIME:
	        case MParser.DATETIME:
	        case MParser.PERIOD:
	        case MParser.VERSION:
	        case MParser.CODE:
	        case MParser.DOCUMENT:
	        case MParser.BLOB:
	        case MParser.IMAGE:
	        case MParser.UUID:
	        case MParser.DBID:
	        case MParser.ITERATOR:
	        case MParser.CURSOR:
	        case MParser.HTML:
	        case MParser.ABSTRACT:
	        case MParser.ALL:
	        case MParser.ALWAYS:
	        case MParser.AND:
	        case MParser.ANY:
	        case MParser.AS:
	        case MParser.ASC:
	        case MParser.ATTR:
	        case MParser.ATTRIBUTE:
	        case MParser.ATTRIBUTES:
	        case MParser.BINDINGS:
	        case MParser.BREAK:
	        case MParser.BY:
	        case MParser.CASE:
	        case MParser.CATCH:
	        case MParser.CATEGORY:
	        case MParser.CLASS:
	        case MParser.CONTAINS:
	        case MParser.DEF:
	        case MParser.DEFAULT:
	        case MParser.DEFINE:
	        case MParser.DELETE:
	        case MParser.DESC:
	        case MParser.DO:
	        case MParser.DOING:
	        case MParser.EACH:
	        case MParser.ELSE:
	        case MParser.ENUM:
	        case MParser.ENUMERATED:
	        case MParser.EXCEPT:
	        case MParser.EXECUTE:
	        case MParser.EXPECTING:
	        case MParser.EXTENDS:
	        case MParser.FETCH:
	        case MParser.FILTERED:
	        case MParser.FINALLY:
	        case MParser.FLUSH:
	        case MParser.FOR:
	        case MParser.FROM:
	        case MParser.GETTER:
	        case MParser.HAS:
	        case MParser.IF:
	        case MParser.IN:
	        case MParser.INDEX:
	        case MParser.IS:
	        case MParser.MATCHING:
	        case MParser.METHOD:
	        case MParser.METHODS:
	        case MParser.MODULO:
	        case MParser.MUTABLE:
	        case MParser.NATIVE:
	        case MParser.NONE:
	        case MParser.NOT:
	        case MParser.NOTHING:
	        case MParser.NULL:
	        case MParser.ON:
	        case MParser.ONE:
	        case MParser.OPERATOR:
	        case MParser.OR:
	        case MParser.ORDER:
	        case MParser.OTHERWISE:
	        case MParser.PASS:
	        case MParser.RAISE:
	        case MParser.READ:
	        case MParser.RECEIVING:
	        case MParser.RESOURCE:
	        case MParser.RETURN:
	        case MParser.RETURNING:
	        case MParser.ROWS:
	        case MParser.SELF:
	        case MParser.SETTER:
	        case MParser.SINGLETON:
	        case MParser.SORTED:
	        case MParser.STORABLE:
	        case MParser.STORE:
	        case MParser.SUPER:
	        case MParser.SWITCH:
	        case MParser.TEST:
	        case MParser.THIS:
	        case MParser.THROW:
	        case MParser.TO:
	        case MParser.TRY:
	        case MParser.VERIFYING:
	        case MParser.WIDGET:
	        case MParser.WITH:
	        case MParser.WHEN:
	        case MParser.WHERE:
	        case MParser.WHILE:
	        case MParser.WRITE:
	        case MParser.SYMBOL_IDENTIFIER:
	        case MParser.TYPE_IDENTIFIER:
	        case MParser.VARIABLE_IDENTIFIER:
	            localctx = new DocKeyIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2219;
	            localctx.name = this.identifier_or_keyword();
	            break;
	        case MParser.TEXT_LITERAL:
	            localctx = new DocKeyTextContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2220;
	            localctx.name = this.match(MParser.TEXT_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dict_entry_list() {
	    let localctx = new Dict_entry_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, MParser.RULE_dict_entry_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2223;
	        this.dict_entry();
	        this.state = 2228;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MParser.COMMA) {
	            this.state = 2224;
	            this.match(MParser.COMMA);
	            this.state = 2225;
	            this.dict_entry();
	            this.state = 2230;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dict_entry() {
	    let localctx = new Dict_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, MParser.RULE_dict_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2231;
	        localctx.key = this.dict_key();
	        this.state = 2232;
	        this.match(MParser.COLON);
	        this.state = 2233;
	        localctx.value = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dict_key() {
	    let localctx = new Dict_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, MParser.RULE_dict_key);
	    try {
	        this.state = 2237;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.JAVA:
	        case MParser.CSHARP:
	        case MParser.PYTHON2:
	        case MParser.PYTHON3:
	        case MParser.JAVASCRIPT:
	        case MParser.SWIFT:
	        case MParser.BOOLEAN:
	        case MParser.CHARACTER:
	        case MParser.TEXT:
	        case MParser.INTEGER:
	        case MParser.DECIMAL:
	        case MParser.DATE:
	        case MParser.TIME:
	        case MParser.DATETIME:
	        case MParser.PERIOD:
	        case MParser.VERSION:
	        case MParser.CODE:
	        case MParser.DOCUMENT:
	        case MParser.BLOB:
	        case MParser.IMAGE:
	        case MParser.UUID:
	        case MParser.DBID:
	        case MParser.ITERATOR:
	        case MParser.CURSOR:
	        case MParser.HTML:
	        case MParser.ABSTRACT:
	        case MParser.ALL:
	        case MParser.ALWAYS:
	        case MParser.AND:
	        case MParser.ANY:
	        case MParser.AS:
	        case MParser.ASC:
	        case MParser.ATTR:
	        case MParser.ATTRIBUTE:
	        case MParser.ATTRIBUTES:
	        case MParser.BINDINGS:
	        case MParser.BREAK:
	        case MParser.BY:
	        case MParser.CASE:
	        case MParser.CATCH:
	        case MParser.CATEGORY:
	        case MParser.CLASS:
	        case MParser.CONTAINS:
	        case MParser.DEF:
	        case MParser.DEFAULT:
	        case MParser.DEFINE:
	        case MParser.DELETE:
	        case MParser.DESC:
	        case MParser.DO:
	        case MParser.DOING:
	        case MParser.EACH:
	        case MParser.ELSE:
	        case MParser.ENUM:
	        case MParser.ENUMERATED:
	        case MParser.EXCEPT:
	        case MParser.EXECUTE:
	        case MParser.EXPECTING:
	        case MParser.EXTENDS:
	        case MParser.FETCH:
	        case MParser.FILTERED:
	        case MParser.FINALLY:
	        case MParser.FLUSH:
	        case MParser.FOR:
	        case MParser.FROM:
	        case MParser.GETTER:
	        case MParser.HAS:
	        case MParser.IF:
	        case MParser.IN:
	        case MParser.INDEX:
	        case MParser.IS:
	        case MParser.MATCHING:
	        case MParser.METHOD:
	        case MParser.METHODS:
	        case MParser.MODULO:
	        case MParser.MUTABLE:
	        case MParser.NATIVE:
	        case MParser.NONE:
	        case MParser.NOT:
	        case MParser.NOTHING:
	        case MParser.NULL:
	        case MParser.ON:
	        case MParser.ONE:
	        case MParser.OPERATOR:
	        case MParser.OR:
	        case MParser.ORDER:
	        case MParser.OTHERWISE:
	        case MParser.PASS:
	        case MParser.RAISE:
	        case MParser.READ:
	        case MParser.RECEIVING:
	        case MParser.RESOURCE:
	        case MParser.RETURN:
	        case MParser.RETURNING:
	        case MParser.ROWS:
	        case MParser.SELF:
	        case MParser.SETTER:
	        case MParser.SINGLETON:
	        case MParser.SORTED:
	        case MParser.STORABLE:
	        case MParser.STORE:
	        case MParser.SUPER:
	        case MParser.SWITCH:
	        case MParser.TEST:
	        case MParser.THIS:
	        case MParser.THROW:
	        case MParser.TO:
	        case MParser.TRY:
	        case MParser.VERIFYING:
	        case MParser.WIDGET:
	        case MParser.WITH:
	        case MParser.WHEN:
	        case MParser.WHERE:
	        case MParser.WHILE:
	        case MParser.WRITE:
	        case MParser.SYMBOL_IDENTIFIER:
	        case MParser.TYPE_IDENTIFIER:
	        case MParser.VARIABLE_IDENTIFIER:
	            localctx = new DictKeyIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2235;
	            localctx.name = this.identifier_or_keyword();
	            break;
	        case MParser.TEXT_LITERAL:
	            localctx = new DictKeyTextContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2236;
	            localctx.name = this.match(MParser.TEXT_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	slice_arguments() {
	    let localctx = new Slice_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, MParser.RULE_slice_arguments);
	    try {
	        this.state = 2248;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SliceFirstAndLastContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2239;
	            localctx.first = this.expression(0);
	            this.state = 2240;
	            this.match(MParser.COLON);
	            this.state = 2241;
	            localctx.last = this.expression(0);
	            break;

	        case 2:
	            localctx = new SliceFirstOnlyContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2243;
	            localctx.first = this.expression(0);
	            this.state = 2244;
	            this.match(MParser.COLON);
	            break;

	        case 3:
	            localctx = new SliceLastOnlyContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2246;
	            this.match(MParser.COLON);
	            this.state = 2247;
	            localctx.last = this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assign_variable_statement() {
	    let localctx = new Assign_variable_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, MParser.RULE_assign_variable_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2250;
	        this.variable_identifier();
	        this.state = 2251;
	        this.assign();
	        this.state = 2252;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	assignable_instance(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Assignable_instanceContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 324;
	    this.enterRecursionRule(localctx, 324, MParser.RULE_assignable_instance, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new RootInstanceContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2255;
	        this.variable_identifier();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2261;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,200,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ChildInstanceContext(this, new Assignable_instanceContext(this, _parentctx, _parentState));
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_assignable_instance);
	                this.state = 2257;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2258;
	                this.child_instance(); 
	            }
	            this.state = 2263;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,200,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	is_expression() {
	    let localctx = new Is_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, MParser.RULE_is_expression);
	    try {
	        this.state = 2268;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new IsATypeExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2264;
	            if (!( this.willBeAOrAn())) {
	                throw new antlr4.error.FailedPredicateException(this, "$parser.willBeAOrAn()");
	            }
	            this.state = 2265;
	            this.match(MParser.VARIABLE_IDENTIFIER);
	            this.state = 2266;
	            this.category_or_any_type();
	            break;

	        case 2:
	            localctx = new IsOtherExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2267;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	metadata() {
	    let localctx = new MetadataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, MParser.RULE_metadata);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2270;
	        if (!( this.willBeText("metadata"))) {
	            throw new antlr4.error.FailedPredicateException(this, "$parser.willBeText(\"metadata\")");
	        }
	        this.state = 2271;
	        this.match(MParser.VARIABLE_IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrow_expression() {
	    let localctx = new Arrow_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, MParser.RULE_arrow_expression);
	    try {
	        this.state = 2281;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ArrowExpressionBodyContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2273;
	            this.arrow_prefix();
	            this.state = 2274;
	            this.expression(0);
	            break;

	        case 2:
	            localctx = new ArrowStatementsBodyContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2276;
	            this.arrow_prefix();
	            this.state = 2277;
	            this.match(MParser.LCURL);
	            this.state = 2278;
	            this.statement_list();
	            this.state = 2279;
	            this.match(MParser.RCURL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrow_prefix() {
	    let localctx = new Arrow_prefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, MParser.RULE_arrow_prefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2283;
	        this.arrow_args();
	        this.state = 2284;
	        localctx.s1 = this.ws_plus();
	        this.state = 2285;
	        this.match(MParser.EGT);
	        this.state = 2286;
	        localctx.s2 = this.ws_plus();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrow_args() {
	    let localctx = new Arrow_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, MParser.RULE_arrow_args);
	    var _la = 0; // Token type
	    try {
	        this.state = 2294;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.CATEGORY:
	        case MParser.RESOURCE:
	        case MParser.VARIABLE_IDENTIFIER:
	            localctx = new ArrowSingleArgContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2288;
	            this.variable_identifier();
	            break;
	        case MParser.LPAR:
	            localctx = new ArrowListArgContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2289;
	            this.match(MParser.LPAR);
	            this.state = 2291;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===MParser.CATEGORY || _la===MParser.RESOURCE || _la===MParser.VARIABLE_IDENTIFIER) {
	                this.state = 2290;
	                this.variable_identifier_list();
	            }

	            this.state = 2293;
	            this.match(MParser.RPAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sorted_key() {
	    let localctx = new Sorted_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, MParser.RULE_sorted_key);
	    try {
	        this.state = 2298;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2296;
	            this.instance_expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2297;
	            this.arrow_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	read_blob_expression() {
	    let localctx = new Read_blob_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, MParser.RULE_read_blob_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2300;
	        this.match(MParser.READ);
	        this.state = 2301;
	        this.match(MParser.BLOB);
	        this.state = 2302;
	        this.match(MParser.FROM);
	        this.state = 2303;
	        localctx.source = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	read_all_expression() {
	    let localctx = new Read_all_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, MParser.RULE_read_all_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2305;
	        this.match(MParser.READ);
	        this.state = 2306;
	        this.match(MParser.ALL);
	        this.state = 2307;
	        this.match(MParser.FROM);
	        this.state = 2308;
	        localctx.source = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	read_one_expression() {
	    let localctx = new Read_one_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, MParser.RULE_read_one_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2310;
	        this.match(MParser.READ);
	        this.state = 2311;
	        this.match(MParser.ONE);
	        this.state = 2312;
	        this.match(MParser.FROM);
	        this.state = 2313;
	        localctx.source = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	order_by_list() {
	    let localctx = new Order_by_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, MParser.RULE_order_by_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2315;
	        this.order_by();
	        this.state = 2320;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,206,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2316;
	                this.match(MParser.COMMA);
	                this.state = 2317;
	                this.order_by(); 
	            }
	            this.state = 2322;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,206,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	order_by() {
	    let localctx = new Order_byContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, MParser.RULE_order_by);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2323;
	        this.variable_identifier();
	        this.state = 2328;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,207,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2324;
	                this.match(MParser.DOT);
	                this.state = 2325;
	                this.variable_identifier(); 
	            }
	            this.state = 2330;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,207,this._ctx);
	        }

	        this.state = 2332;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
	        if(la_===1) {
	            this.state = 2331;
	            _la = this._input.LA(1);
	            if(!(_la===MParser.ASC || _la===MParser.DESC)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	include_list() {
	    let localctx = new Include_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, MParser.RULE_include_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2334;
	        this.variable_identifier();
	        this.state = 2339;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,209,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2335;
	                this.match(MParser.COMMA);
	                this.state = 2336;
	                this.variable_identifier(); 
	            }
	            this.state = 2341;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,209,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator() {
	    let localctx = new OperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, MParser.RULE_operator);
	    try {
	        this.state = 2348;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.PLUS:
	            localctx = new OperatorPlusContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2342;
	            this.match(MParser.PLUS);
	            break;
	        case MParser.MINUS:
	            localctx = new OperatorMinusContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2343;
	            this.match(MParser.MINUS);
	            break;
	        case MParser.STAR:
	            localctx = new OperatorMultiplyContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2344;
	            this.multiply();
	            break;
	        case MParser.SLASH:
	            localctx = new OperatorDivideContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2345;
	            this.divide();
	            break;
	        case MParser.BSLASH:
	            localctx = new OperatorIDivideContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2346;
	            this.idivide();
	            break;
	        case MParser.PERCENT:
	        case MParser.MODULO:
	            localctx = new OperatorModuloContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2347;
	            this.modulo();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, MParser.RULE_keyword);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2350;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MParser.JAVA) | (1 << MParser.CSHARP) | (1 << MParser.PYTHON2) | (1 << MParser.PYTHON3) | (1 << MParser.JAVASCRIPT) | (1 << MParser.SWIFT))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (MParser.BOOLEAN - 54)) | (1 << (MParser.CHARACTER - 54)) | (1 << (MParser.TEXT - 54)) | (1 << (MParser.INTEGER - 54)) | (1 << (MParser.DECIMAL - 54)) | (1 << (MParser.DATE - 54)) | (1 << (MParser.TIME - 54)) | (1 << (MParser.DATETIME - 54)) | (1 << (MParser.PERIOD - 54)) | (1 << (MParser.VERSION - 54)) | (1 << (MParser.CODE - 54)) | (1 << (MParser.DOCUMENT - 54)) | (1 << (MParser.BLOB - 54)) | (1 << (MParser.IMAGE - 54)) | (1 << (MParser.UUID - 54)) | (1 << (MParser.DBID - 54)) | (1 << (MParser.ITERATOR - 54)) | (1 << (MParser.CURSOR - 54)) | (1 << (MParser.HTML - 54)) | (1 << (MParser.ABSTRACT - 54)) | (1 << (MParser.ALL - 54)) | (1 << (MParser.ALWAYS - 54)) | (1 << (MParser.AND - 54)) | (1 << (MParser.ANY - 54)) | (1 << (MParser.AS - 54)) | (1 << (MParser.ASC - 54)) | (1 << (MParser.ATTR - 54)) | (1 << (MParser.ATTRIBUTE - 54)) | (1 << (MParser.ATTRIBUTES - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (MParser.BINDINGS - 86)) | (1 << (MParser.BREAK - 86)) | (1 << (MParser.BY - 86)) | (1 << (MParser.CASE - 86)) | (1 << (MParser.CATCH - 86)) | (1 << (MParser.CATEGORY - 86)) | (1 << (MParser.CLASS - 86)) | (1 << (MParser.CONTAINS - 86)) | (1 << (MParser.DEF - 86)) | (1 << (MParser.DEFAULT - 86)) | (1 << (MParser.DEFINE - 86)) | (1 << (MParser.DELETE - 86)) | (1 << (MParser.DESC - 86)) | (1 << (MParser.DO - 86)) | (1 << (MParser.DOING - 86)) | (1 << (MParser.EACH - 86)) | (1 << (MParser.ELSE - 86)) | (1 << (MParser.ENUM - 86)) | (1 << (MParser.ENUMERATED - 86)) | (1 << (MParser.EXCEPT - 86)) | (1 << (MParser.EXECUTE - 86)) | (1 << (MParser.EXPECTING - 86)) | (1 << (MParser.EXTENDS - 86)) | (1 << (MParser.FETCH - 86)) | (1 << (MParser.FILTERED - 86)) | (1 << (MParser.FINALLY - 86)) | (1 << (MParser.FLUSH - 86)) | (1 << (MParser.FOR - 86)) | (1 << (MParser.FROM - 86)) | (1 << (MParser.GETTER - 86)) | (1 << (MParser.HAS - 86)) | (1 << (MParser.IF - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (MParser.IN - 118)) | (1 << (MParser.INDEX - 118)) | (1 << (MParser.IS - 118)) | (1 << (MParser.MATCHING - 118)) | (1 << (MParser.METHOD - 118)) | (1 << (MParser.METHODS - 118)) | (1 << (MParser.MODULO - 118)) | (1 << (MParser.MUTABLE - 118)) | (1 << (MParser.NATIVE - 118)) | (1 << (MParser.NONE - 118)) | (1 << (MParser.NOT - 118)) | (1 << (MParser.NOTHING - 118)) | (1 << (MParser.NULL - 118)) | (1 << (MParser.ON - 118)) | (1 << (MParser.ONE - 118)) | (1 << (MParser.OPERATOR - 118)) | (1 << (MParser.OR - 118)) | (1 << (MParser.ORDER - 118)) | (1 << (MParser.OTHERWISE - 118)) | (1 << (MParser.PASS - 118)) | (1 << (MParser.RAISE - 118)) | (1 << (MParser.READ - 118)) | (1 << (MParser.RECEIVING - 118)) | (1 << (MParser.RESOURCE - 118)) | (1 << (MParser.RETURN - 118)) | (1 << (MParser.RETURNING - 118)) | (1 << (MParser.ROWS - 118)) | (1 << (MParser.SELF - 118)) | (1 << (MParser.SETTER - 118)) | (1 << (MParser.SINGLETON - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (MParser.SORTED - 150)) | (1 << (MParser.STORABLE - 150)) | (1 << (MParser.STORE - 150)) | (1 << (MParser.SUPER - 150)) | (1 << (MParser.SWITCH - 150)) | (1 << (MParser.TEST - 150)) | (1 << (MParser.THIS - 150)) | (1 << (MParser.THROW - 150)) | (1 << (MParser.TO - 150)) | (1 << (MParser.TRY - 150)) | (1 << (MParser.VERIFYING - 150)) | (1 << (MParser.WIDGET - 150)) | (1 << (MParser.WITH - 150)) | (1 << (MParser.WHEN - 150)) | (1 << (MParser.WHERE - 150)) | (1 << (MParser.WHILE - 150)) | (1 << (MParser.WRITE - 150)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	new_token() {
	    let localctx = new New_tokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, MParser.RULE_new_token);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2352;
	        localctx.i1 = this.match(MParser.VARIABLE_IDENTIFIER);
	        this.state = 2353;
	        if (!( this.isText(localctx.i1,"new"))) {
	            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"new\")");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_token() {
	    let localctx = new Key_tokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, MParser.RULE_key_token);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2355;
	        localctx.i1 = this.match(MParser.VARIABLE_IDENTIFIER);
	        this.state = 2356;
	        if (!( this.isText(localctx.i1,"key"))) {
	            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"key\")");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module_token() {
	    let localctx = new Module_tokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, MParser.RULE_module_token);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2358;
	        localctx.i1 = this.match(MParser.VARIABLE_IDENTIFIER);
	        this.state = 2359;
	        if (!( this.isText(localctx.i1,"module"))) {
	            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"module\")");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_token() {
	    let localctx = new Value_tokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, MParser.RULE_value_token);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2361;
	        localctx.i1 = this.match(MParser.VARIABLE_IDENTIFIER);
	        this.state = 2362;
	        if (!( this.isText(localctx.i1,"value"))) {
	            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"value\")");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbols_token() {
	    let localctx = new Symbols_tokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, MParser.RULE_symbols_token);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2364;
	        localctx.i1 = this.match(MParser.VARIABLE_IDENTIFIER);
	        this.state = 2365;
	        if (!( this.isText(localctx.i1,"symbols"))) {
	            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"symbols\")");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assign() {
	    let localctx = new AssignContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, MParser.RULE_assign);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2367;
	        this.match(MParser.EQ);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiply() {
	    let localctx = new MultiplyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, MParser.RULE_multiply);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2369;
	        this.match(MParser.STAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	divide() {
	    let localctx = new DivideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, MParser.RULE_divide);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2371;
	        this.match(MParser.SLASH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	idivide() {
	    let localctx = new IdivideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, MParser.RULE_idivide);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2373;
	        this.match(MParser.BSLASH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modulo() {
	    let localctx = new ModuloContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, MParser.RULE_modulo);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2375;
	        _la = this._input.LA(1);
	        if(!(_la===MParser.PERCENT || _la===MParser.MODULO)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_statement() {
	    let localctx = new Javascript_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, MParser.RULE_javascript_statement);
	    try {
	        this.state = 2384;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new JavascriptReturnStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2377;
	            this.match(MParser.RETURN);
	            this.state = 2378;
	            localctx.exp = this.javascript_expression(0);
	            this.state = 2379;
	            this.match(MParser.SEMI);
	            break;

	        case 2:
	            localctx = new JavascriptStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2381;
	            localctx.exp = this.javascript_expression(0);
	            this.state = 2382;
	            this.match(MParser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	javascript_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Javascript_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 376;
	    this.enterRecursionRule(localctx, 376, MParser.RULE_javascript_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new JavascriptPrimaryExpressionContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2387;
	        localctx.exp = this.javascript_primary_expression();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2393;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,212,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new JavascriptSelectorExpressionContext(this, new Javascript_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_javascript_expression);
	                this.state = 2389;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2390;
	                localctx.child = this.javascript_selector_expression(); 
	            }
	            this.state = 2395;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,212,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	javascript_primary_expression() {
	    let localctx = new Javascript_primary_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, MParser.RULE_javascript_primary_expression);
	    try {
	        this.state = 2403;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2396;
	            this.javascript_this_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2397;
	            this.javascript_new_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2398;
	            this.javascript_parenthesis_expression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2399;
	            this.javascript_identifier_expression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2400;
	            this.javascript_literal_expression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2401;
	            this.javascript_method_expression();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2402;
	            this.javascript_item_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_this_expression() {
	    let localctx = new Javascript_this_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, MParser.RULE_javascript_this_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2405;
	        this.this_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_new_expression() {
	    let localctx = new Javascript_new_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, MParser.RULE_javascript_new_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2407;
	        this.new_token();
	        this.state = 2408;
	        this.javascript_method_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_selector_expression() {
	    let localctx = new Javascript_selector_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, MParser.RULE_javascript_selector_expression);
	    try {
	        this.state = 2415;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new JavascriptMethodExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2410;
	            this.match(MParser.DOT);
	            this.state = 2411;
	            localctx.method = this.javascript_method_expression();
	            break;

	        case 2:
	            localctx = new JavascriptMemberExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2412;
	            this.match(MParser.DOT);
	            this.state = 2413;
	            localctx.name = this.javascript_identifier();
	            break;

	        case 3:
	            localctx = new JavascriptItemExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2414;
	            localctx.exp = this.javascript_item_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_method_expression() {
	    let localctx = new Javascript_method_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, MParser.RULE_javascript_method_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2417;
	        localctx.name = this.javascript_identifier();
	        this.state = 2418;
	        this.match(MParser.LPAR);
	        this.state = 2420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MParser.JAVA) | (1 << MParser.CSHARP) | (1 << MParser.PYTHON2) | (1 << MParser.PYTHON3) | (1 << MParser.JAVASCRIPT) | (1 << MParser.SWIFT) | (1 << MParser.LPAR) | (1 << MParser.LBRAK))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (MParser.BOOLEAN - 54)) | (1 << (MParser.CHARACTER - 54)) | (1 << (MParser.TEXT - 54)) | (1 << (MParser.INTEGER - 54)) | (1 << (MParser.DECIMAL - 54)) | (1 << (MParser.DATE - 54)) | (1 << (MParser.TIME - 54)) | (1 << (MParser.DATETIME - 54)) | (1 << (MParser.PERIOD - 54)) | (1 << (MParser.VERSION - 54)) | (1 << (MParser.CODE - 54)) | (1 << (MParser.DOCUMENT - 54)) | (1 << (MParser.BLOB - 54)) | (1 << (MParser.IMAGE - 54)) | (1 << (MParser.UUID - 54)) | (1 << (MParser.DBID - 54)) | (1 << (MParser.ITERATOR - 54)) | (1 << (MParser.CURSOR - 54)) | (1 << (MParser.HTML - 54)) | (1 << (MParser.ABSTRACT - 54)) | (1 << (MParser.ALL - 54)) | (1 << (MParser.ALWAYS - 54)) | (1 << (MParser.AND - 54)) | (1 << (MParser.ANY - 54)) | (1 << (MParser.AS - 54)) | (1 << (MParser.ASC - 54)) | (1 << (MParser.ATTR - 54)) | (1 << (MParser.ATTRIBUTE - 54)) | (1 << (MParser.ATTRIBUTES - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (MParser.BINDINGS - 86)) | (1 << (MParser.BREAK - 86)) | (1 << (MParser.BY - 86)) | (1 << (MParser.CASE - 86)) | (1 << (MParser.CATCH - 86)) | (1 << (MParser.CATEGORY - 86)) | (1 << (MParser.CLASS - 86)) | (1 << (MParser.CONTAINS - 86)) | (1 << (MParser.DEF - 86)) | (1 << (MParser.DEFAULT - 86)) | (1 << (MParser.DEFINE - 86)) | (1 << (MParser.DELETE - 86)) | (1 << (MParser.DESC - 86)) | (1 << (MParser.DO - 86)) | (1 << (MParser.DOING - 86)) | (1 << (MParser.EACH - 86)) | (1 << (MParser.ELSE - 86)) | (1 << (MParser.ENUM - 86)) | (1 << (MParser.ENUMERATED - 86)) | (1 << (MParser.EXCEPT - 86)) | (1 << (MParser.EXECUTE - 86)) | (1 << (MParser.EXPECTING - 86)) | (1 << (MParser.EXTENDS - 86)) | (1 << (MParser.FETCH - 86)) | (1 << (MParser.FILTERED - 86)) | (1 << (MParser.FINALLY - 86)) | (1 << (MParser.FLUSH - 86)) | (1 << (MParser.FOR - 86)) | (1 << (MParser.FROM - 86)) | (1 << (MParser.GETTER - 86)) | (1 << (MParser.HAS - 86)) | (1 << (MParser.IF - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (MParser.IN - 118)) | (1 << (MParser.INDEX - 118)) | (1 << (MParser.IS - 118)) | (1 << (MParser.MATCHING - 118)) | (1 << (MParser.METHOD - 118)) | (1 << (MParser.METHODS - 118)) | (1 << (MParser.MODULO - 118)) | (1 << (MParser.MUTABLE - 118)) | (1 << (MParser.NATIVE - 118)) | (1 << (MParser.NONE - 118)) | (1 << (MParser.NOT - 118)) | (1 << (MParser.NOTHING - 118)) | (1 << (MParser.NULL - 118)) | (1 << (MParser.ON - 118)) | (1 << (MParser.ONE - 118)) | (1 << (MParser.OPERATOR - 118)) | (1 << (MParser.OR - 118)) | (1 << (MParser.ORDER - 118)) | (1 << (MParser.OTHERWISE - 118)) | (1 << (MParser.PASS - 118)) | (1 << (MParser.RAISE - 118)) | (1 << (MParser.READ - 118)) | (1 << (MParser.RECEIVING - 118)) | (1 << (MParser.RESOURCE - 118)) | (1 << (MParser.RETURN - 118)) | (1 << (MParser.RETURNING - 118)) | (1 << (MParser.ROWS - 118)) | (1 << (MParser.SELF - 118)) | (1 << (MParser.SETTER - 118)) | (1 << (MParser.SINGLETON - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (MParser.SORTED - 150)) | (1 << (MParser.STORABLE - 150)) | (1 << (MParser.STORE - 150)) | (1 << (MParser.SUPER - 150)) | (1 << (MParser.SWITCH - 150)) | (1 << (MParser.TEST - 150)) | (1 << (MParser.THIS - 150)) | (1 << (MParser.THROW - 150)) | (1 << (MParser.TO - 150)) | (1 << (MParser.TRY - 150)) | (1 << (MParser.VERIFYING - 150)) | (1 << (MParser.WIDGET - 150)) | (1 << (MParser.WITH - 150)) | (1 << (MParser.WHEN - 150)) | (1 << (MParser.WHERE - 150)) | (1 << (MParser.WHILE - 150)) | (1 << (MParser.WRITE - 150)) | (1 << (MParser.BOOLEAN_LITERAL - 150)) | (1 << (MParser.CHAR_LITERAL - 150)) | (1 << (MParser.SYMBOL_IDENTIFIER - 150)) | (1 << (MParser.TYPE_IDENTIFIER - 150)) | (1 << (MParser.VARIABLE_IDENTIFIER - 150)) | (1 << (MParser.DOLLAR_IDENTIFIER - 150)) | (1 << (MParser.TEXT_LITERAL - 150)) | (1 << (MParser.INTEGER_LITERAL - 150)))) !== 0) || _la===MParser.DECIMAL_LITERAL) {
	            this.state = 2419;
	            localctx.args = this.javascript_arguments(0);
	        }

	        this.state = 2422;
	        this.match(MParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	javascript_arguments(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Javascript_argumentsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 388;
	    this.enterRecursionRule(localctx, 388, MParser.RULE_javascript_arguments, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new JavascriptArgumentListContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2425;
	        localctx.item = this.javascript_expression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2432;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,216,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new JavascriptArgumentListItemContext(this, new Javascript_argumentsContext(this, _parentctx, _parentState));
	                localctx.items = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_javascript_arguments);
	                this.state = 2427;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2428;
	                this.match(MParser.COMMA);
	                this.state = 2429;
	                localctx.item = this.javascript_expression(0); 
	            }
	            this.state = 2434;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,216,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	javascript_item_expression() {
	    let localctx = new Javascript_item_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, MParser.RULE_javascript_item_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2435;
	        this.match(MParser.LBRAK);
	        this.state = 2436;
	        localctx.exp = this.javascript_expression(0);
	        this.state = 2437;
	        this.match(MParser.RBRAK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_parenthesis_expression() {
	    let localctx = new Javascript_parenthesis_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, MParser.RULE_javascript_parenthesis_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2439;
	        this.match(MParser.LPAR);
	        this.state = 2440;
	        localctx.exp = this.javascript_expression(0);
	        this.state = 2441;
	        this.match(MParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_identifier_expression() {
	    let localctx = new Javascript_identifier_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, MParser.RULE_javascript_identifier_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2443;
	        localctx.name = this.javascript_identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_literal_expression() {
	    let localctx = new Javascript_literal_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, MParser.RULE_javascript_literal_expression);
	    try {
	        this.state = 2450;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.INTEGER_LITERAL:
	            localctx = new JavascriptIntegerLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2445;
	            localctx.t = this.match(MParser.INTEGER_LITERAL);
	            break;
	        case MParser.DECIMAL_LITERAL:
	            localctx = new JavascriptDecimalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2446;
	            localctx.t = this.match(MParser.DECIMAL_LITERAL);
	            break;
	        case MParser.TEXT_LITERAL:
	            localctx = new JavascriptTextLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2447;
	            localctx.t = this.match(MParser.TEXT_LITERAL);
	            break;
	        case MParser.BOOLEAN_LITERAL:
	            localctx = new JavascriptBooleanLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2448;
	            localctx.t = this.match(MParser.BOOLEAN_LITERAL);
	            break;
	        case MParser.CHAR_LITERAL:
	            localctx = new JavascriptCharacterLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2449;
	            localctx.t = this.match(MParser.CHAR_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_identifier() {
	    let localctx = new Javascript_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, MParser.RULE_javascript_identifier);
	    try {
	        this.state = 2457;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.VARIABLE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2452;
	            this.match(MParser.VARIABLE_IDENTIFIER);
	            break;
	        case MParser.SYMBOL_IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2453;
	            this.match(MParser.SYMBOL_IDENTIFIER);
	            break;
	        case MParser.DOLLAR_IDENTIFIER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2454;
	            this.match(MParser.DOLLAR_IDENTIFIER);
	            break;
	        case MParser.TYPE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2455;
	            this.match(MParser.TYPE_IDENTIFIER);
	            break;
	        case MParser.JAVA:
	        case MParser.CSHARP:
	        case MParser.PYTHON2:
	        case MParser.PYTHON3:
	        case MParser.JAVASCRIPT:
	        case MParser.SWIFT:
	        case MParser.BOOLEAN:
	        case MParser.CHARACTER:
	        case MParser.TEXT:
	        case MParser.INTEGER:
	        case MParser.DECIMAL:
	        case MParser.DATE:
	        case MParser.TIME:
	        case MParser.DATETIME:
	        case MParser.PERIOD:
	        case MParser.VERSION:
	        case MParser.CODE:
	        case MParser.DOCUMENT:
	        case MParser.BLOB:
	        case MParser.IMAGE:
	        case MParser.UUID:
	        case MParser.DBID:
	        case MParser.ITERATOR:
	        case MParser.CURSOR:
	        case MParser.HTML:
	        case MParser.ABSTRACT:
	        case MParser.ALL:
	        case MParser.ALWAYS:
	        case MParser.AND:
	        case MParser.ANY:
	        case MParser.AS:
	        case MParser.ASC:
	        case MParser.ATTR:
	        case MParser.ATTRIBUTE:
	        case MParser.ATTRIBUTES:
	        case MParser.BINDINGS:
	        case MParser.BREAK:
	        case MParser.BY:
	        case MParser.CASE:
	        case MParser.CATCH:
	        case MParser.CATEGORY:
	        case MParser.CLASS:
	        case MParser.CONTAINS:
	        case MParser.DEF:
	        case MParser.DEFAULT:
	        case MParser.DEFINE:
	        case MParser.DELETE:
	        case MParser.DESC:
	        case MParser.DO:
	        case MParser.DOING:
	        case MParser.EACH:
	        case MParser.ELSE:
	        case MParser.ENUM:
	        case MParser.ENUMERATED:
	        case MParser.EXCEPT:
	        case MParser.EXECUTE:
	        case MParser.EXPECTING:
	        case MParser.EXTENDS:
	        case MParser.FETCH:
	        case MParser.FILTERED:
	        case MParser.FINALLY:
	        case MParser.FLUSH:
	        case MParser.FOR:
	        case MParser.FROM:
	        case MParser.GETTER:
	        case MParser.HAS:
	        case MParser.IF:
	        case MParser.IN:
	        case MParser.INDEX:
	        case MParser.IS:
	        case MParser.MATCHING:
	        case MParser.METHOD:
	        case MParser.METHODS:
	        case MParser.MODULO:
	        case MParser.MUTABLE:
	        case MParser.NATIVE:
	        case MParser.NONE:
	        case MParser.NOT:
	        case MParser.NOTHING:
	        case MParser.NULL:
	        case MParser.ON:
	        case MParser.ONE:
	        case MParser.OPERATOR:
	        case MParser.OR:
	        case MParser.ORDER:
	        case MParser.OTHERWISE:
	        case MParser.PASS:
	        case MParser.RAISE:
	        case MParser.READ:
	        case MParser.RECEIVING:
	        case MParser.RESOURCE:
	        case MParser.RETURN:
	        case MParser.RETURNING:
	        case MParser.ROWS:
	        case MParser.SELF:
	        case MParser.SETTER:
	        case MParser.SINGLETON:
	        case MParser.SORTED:
	        case MParser.STORABLE:
	        case MParser.STORE:
	        case MParser.SUPER:
	        case MParser.SWITCH:
	        case MParser.TEST:
	        case MParser.THIS:
	        case MParser.THROW:
	        case MParser.TO:
	        case MParser.TRY:
	        case MParser.VERIFYING:
	        case MParser.WIDGET:
	        case MParser.WITH:
	        case MParser.WHEN:
	        case MParser.WHERE:
	        case MParser.WHILE:
	        case MParser.WRITE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2456;
	            this.keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	python_statement() {
	    let localctx = new Python_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, MParser.RULE_python_statement);
	    try {
	        this.state = 2462;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PythonReturnStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2459;
	            this.match(MParser.RETURN);
	            this.state = 2460;
	            localctx.exp = this.python_expression(0);
	            break;

	        case 2:
	            localctx = new PythonStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2461;
	            localctx.exp = this.python_expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	python_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Python_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 402;
	    this.enterRecursionRule(localctx, 402, MParser.RULE_python_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new PythonPrimaryExpressionContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2465;
	        localctx.exp = this.python_primary_expression();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2471;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,220,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new PythonSelectorExpressionContext(this, new Python_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_python_expression);
	                this.state = 2467;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2468;
	                localctx.child = this.python_selector_expression(); 
	            }
	            this.state = 2473;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,220,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	python_primary_expression() {
	    let localctx = new Python_primary_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, MParser.RULE_python_primary_expression);
	    try {
	        this.state = 2479;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,221,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PythonSelfExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2474;
	            localctx.exp = this.python_self_expression();
	            break;

	        case 2:
	            localctx = new PythonParenthesisExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2475;
	            localctx.exp = this.python_parenthesis_expression();
	            break;

	        case 3:
	            localctx = new PythonIdentifierExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2476;
	            localctx.exp = this.python_identifier_expression(0);
	            break;

	        case 4:
	            localctx = new PythonLiteralExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2477;
	            localctx.exp = this.python_literal_expression();
	            break;

	        case 5:
	            localctx = new PythonGlobalMethodExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2478;
	            localctx.exp = this.python_method_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	python_self_expression() {
	    let localctx = new Python_self_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, MParser.RULE_python_self_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2481;
	        this.this_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	python_selector_expression() {
	    let localctx = new Python_selector_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, MParser.RULE_python_selector_expression);
	    try {
	        this.state = 2489;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.DOT:
	            localctx = new PythonMethodExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2483;
	            this.match(MParser.DOT);
	            this.state = 2484;
	            localctx.exp = this.python_method_expression();
	            break;
	        case MParser.LBRAK:
	            localctx = new PythonItemExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2485;
	            this.match(MParser.LBRAK);
	            this.state = 2486;
	            localctx.exp = this.python_expression(0);
	            this.state = 2487;
	            this.match(MParser.RBRAK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	python_method_expression() {
	    let localctx = new Python_method_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, MParser.RULE_python_method_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2491;
	        localctx.name = this.python_identifier();
	        this.state = 2492;
	        this.match(MParser.LPAR);
	        this.state = 2494;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MParser.JAVA) | (1 << MParser.CSHARP) | (1 << MParser.PYTHON2) | (1 << MParser.PYTHON3) | (1 << MParser.JAVASCRIPT) | (1 << MParser.SWIFT) | (1 << MParser.LPAR))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (MParser.BOOLEAN - 54)) | (1 << (MParser.CHARACTER - 54)) | (1 << (MParser.TEXT - 54)) | (1 << (MParser.INTEGER - 54)) | (1 << (MParser.DECIMAL - 54)) | (1 << (MParser.DATE - 54)) | (1 << (MParser.TIME - 54)) | (1 << (MParser.DATETIME - 54)) | (1 << (MParser.PERIOD - 54)) | (1 << (MParser.VERSION - 54)) | (1 << (MParser.CODE - 54)) | (1 << (MParser.DOCUMENT - 54)) | (1 << (MParser.BLOB - 54)) | (1 << (MParser.IMAGE - 54)) | (1 << (MParser.UUID - 54)) | (1 << (MParser.DBID - 54)) | (1 << (MParser.ITERATOR - 54)) | (1 << (MParser.CURSOR - 54)) | (1 << (MParser.HTML - 54)) | (1 << (MParser.ABSTRACT - 54)) | (1 << (MParser.ALL - 54)) | (1 << (MParser.ALWAYS - 54)) | (1 << (MParser.AND - 54)) | (1 << (MParser.ANY - 54)) | (1 << (MParser.AS - 54)) | (1 << (MParser.ASC - 54)) | (1 << (MParser.ATTR - 54)) | (1 << (MParser.ATTRIBUTE - 54)) | (1 << (MParser.ATTRIBUTES - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (MParser.BINDINGS - 86)) | (1 << (MParser.BREAK - 86)) | (1 << (MParser.BY - 86)) | (1 << (MParser.CASE - 86)) | (1 << (MParser.CATCH - 86)) | (1 << (MParser.CATEGORY - 86)) | (1 << (MParser.CLASS - 86)) | (1 << (MParser.CONTAINS - 86)) | (1 << (MParser.DEF - 86)) | (1 << (MParser.DEFAULT - 86)) | (1 << (MParser.DEFINE - 86)) | (1 << (MParser.DELETE - 86)) | (1 << (MParser.DESC - 86)) | (1 << (MParser.DO - 86)) | (1 << (MParser.DOING - 86)) | (1 << (MParser.EACH - 86)) | (1 << (MParser.ELSE - 86)) | (1 << (MParser.ENUM - 86)) | (1 << (MParser.ENUMERATED - 86)) | (1 << (MParser.EXCEPT - 86)) | (1 << (MParser.EXECUTE - 86)) | (1 << (MParser.EXPECTING - 86)) | (1 << (MParser.EXTENDS - 86)) | (1 << (MParser.FETCH - 86)) | (1 << (MParser.FILTERED - 86)) | (1 << (MParser.FINALLY - 86)) | (1 << (MParser.FLUSH - 86)) | (1 << (MParser.FOR - 86)) | (1 << (MParser.FROM - 86)) | (1 << (MParser.GETTER - 86)) | (1 << (MParser.HAS - 86)) | (1 << (MParser.IF - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (MParser.IN - 118)) | (1 << (MParser.INDEX - 118)) | (1 << (MParser.IS - 118)) | (1 << (MParser.MATCHING - 118)) | (1 << (MParser.METHOD - 118)) | (1 << (MParser.METHODS - 118)) | (1 << (MParser.MODULO - 118)) | (1 << (MParser.MUTABLE - 118)) | (1 << (MParser.NATIVE - 118)) | (1 << (MParser.NONE - 118)) | (1 << (MParser.NOT - 118)) | (1 << (MParser.NOTHING - 118)) | (1 << (MParser.NULL - 118)) | (1 << (MParser.ON - 118)) | (1 << (MParser.ONE - 118)) | (1 << (MParser.OPERATOR - 118)) | (1 << (MParser.OR - 118)) | (1 << (MParser.ORDER - 118)) | (1 << (MParser.OTHERWISE - 118)) | (1 << (MParser.PASS - 118)) | (1 << (MParser.RAISE - 118)) | (1 << (MParser.READ - 118)) | (1 << (MParser.RECEIVING - 118)) | (1 << (MParser.RESOURCE - 118)) | (1 << (MParser.RETURN - 118)) | (1 << (MParser.RETURNING - 118)) | (1 << (MParser.ROWS - 118)) | (1 << (MParser.SELF - 118)) | (1 << (MParser.SETTER - 118)) | (1 << (MParser.SINGLETON - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (MParser.SORTED - 150)) | (1 << (MParser.STORABLE - 150)) | (1 << (MParser.STORE - 150)) | (1 << (MParser.SUPER - 150)) | (1 << (MParser.SWITCH - 150)) | (1 << (MParser.TEST - 150)) | (1 << (MParser.THIS - 150)) | (1 << (MParser.THROW - 150)) | (1 << (MParser.TO - 150)) | (1 << (MParser.TRY - 150)) | (1 << (MParser.VERIFYING - 150)) | (1 << (MParser.WIDGET - 150)) | (1 << (MParser.WITH - 150)) | (1 << (MParser.WHEN - 150)) | (1 << (MParser.WHERE - 150)) | (1 << (MParser.WHILE - 150)) | (1 << (MParser.WRITE - 150)) | (1 << (MParser.BOOLEAN_LITERAL - 150)) | (1 << (MParser.CHAR_LITERAL - 150)) | (1 << (MParser.SYMBOL_IDENTIFIER - 150)) | (1 << (MParser.TYPE_IDENTIFIER - 150)) | (1 << (MParser.VARIABLE_IDENTIFIER - 150)) | (1 << (MParser.DOLLAR_IDENTIFIER - 150)) | (1 << (MParser.TEXT_LITERAL - 150)) | (1 << (MParser.INTEGER_LITERAL - 150)))) !== 0) || _la===MParser.DECIMAL_LITERAL) {
	            this.state = 2493;
	            localctx.args = this.python_argument_list();
	        }

	        this.state = 2496;
	        this.match(MParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	python_argument_list() {
	    let localctx = new Python_argument_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, MParser.RULE_python_argument_list);
	    try {
	        this.state = 2504;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PythonOrdinalOnlyArgumentListContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2498;
	            localctx.ordinal = this.python_ordinal_argument_list(0);
	            break;

	        case 2:
	            localctx = new PythonNamedOnlyArgumentListContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2499;
	            localctx.named = this.python_named_argument_list(0);
	            break;

	        case 3:
	            localctx = new PythonArgumentListContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2500;
	            localctx.ordinal = this.python_ordinal_argument_list(0);
	            this.state = 2501;
	            this.match(MParser.COMMA);
	            this.state = 2502;
	            localctx.named = this.python_named_argument_list(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	python_ordinal_argument_list(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Python_ordinal_argument_listContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 414;
	    this.enterRecursionRule(localctx, 414, MParser.RULE_python_ordinal_argument_list, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new PythonOrdinalArgumentListContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2507;
	        localctx.item = this.python_expression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2514;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,225,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new PythonOrdinalArgumentListItemContext(this, new Python_ordinal_argument_listContext(this, _parentctx, _parentState));
	                localctx.items = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_python_ordinal_argument_list);
	                this.state = 2509;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2510;
	                this.match(MParser.COMMA);
	                this.state = 2511;
	                localctx.item = this.python_expression(0); 
	            }
	            this.state = 2516;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,225,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	python_named_argument_list(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Python_named_argument_listContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 416;
	    this.enterRecursionRule(localctx, 416, MParser.RULE_python_named_argument_list, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new PythonNamedArgumentListContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2518;
	        localctx.name = this.python_identifier();
	        this.state = 2519;
	        this.match(MParser.EQ);
	        this.state = 2520;
	        localctx.exp = this.python_expression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2530;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,226,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new PythonNamedArgumentListItemContext(this, new Python_named_argument_listContext(this, _parentctx, _parentState));
	                localctx.items = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_python_named_argument_list);
	                this.state = 2522;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2523;
	                this.match(MParser.COMMA);
	                this.state = 2524;
	                localctx.name = this.python_identifier();
	                this.state = 2525;
	                this.match(MParser.EQ);
	                this.state = 2526;
	                localctx.exp = this.python_expression(0); 
	            }
	            this.state = 2532;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,226,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	python_parenthesis_expression() {
	    let localctx = new Python_parenthesis_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, MParser.RULE_python_parenthesis_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2533;
	        this.match(MParser.LPAR);
	        this.state = 2534;
	        localctx.exp = this.python_expression(0);
	        this.state = 2535;
	        this.match(MParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	python_identifier_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Python_identifier_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 420;
	    this.enterRecursionRule(localctx, 420, MParser.RULE_python_identifier_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2540;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,227,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PythonPromptoIdentifierContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 2538;
	            this.match(MParser.DOLLAR_IDENTIFIER);
	            break;

	        case 2:
	            localctx = new PythonIdentifierContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2539;
	            localctx.name = this.python_identifier();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2547;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,228,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new PythonChildIdentifierContext(this, new Python_identifier_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_python_identifier_expression);
	                this.state = 2542;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2543;
	                this.match(MParser.DOT);
	                this.state = 2544;
	                localctx.name = this.python_identifier(); 
	            }
	            this.state = 2549;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,228,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	python_literal_expression() {
	    let localctx = new Python_literal_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, MParser.RULE_python_literal_expression);
	    try {
	        this.state = 2555;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.INTEGER_LITERAL:
	            localctx = new PythonIntegerLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2550;
	            localctx.t = this.match(MParser.INTEGER_LITERAL);
	            break;
	        case MParser.DECIMAL_LITERAL:
	            localctx = new PythonDecimalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2551;
	            localctx.t = this.match(MParser.DECIMAL_LITERAL);
	            break;
	        case MParser.TEXT_LITERAL:
	            localctx = new PythonTextLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2552;
	            localctx.t = this.match(MParser.TEXT_LITERAL);
	            break;
	        case MParser.BOOLEAN_LITERAL:
	            localctx = new PythonBooleanLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2553;
	            localctx.t = this.match(MParser.BOOLEAN_LITERAL);
	            break;
	        case MParser.CHAR_LITERAL:
	            localctx = new PythonCharacterLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2554;
	            localctx.t = this.match(MParser.CHAR_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	python_identifier() {
	    let localctx = new Python_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, MParser.RULE_python_identifier);
	    try {
	        this.state = 2562;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.VARIABLE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2557;
	            this.match(MParser.VARIABLE_IDENTIFIER);
	            break;
	        case MParser.SYMBOL_IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2558;
	            this.match(MParser.SYMBOL_IDENTIFIER);
	            break;
	        case MParser.DOLLAR_IDENTIFIER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2559;
	            this.match(MParser.DOLLAR_IDENTIFIER);
	            break;
	        case MParser.TYPE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2560;
	            this.match(MParser.TYPE_IDENTIFIER);
	            break;
	        case MParser.JAVA:
	        case MParser.CSHARP:
	        case MParser.PYTHON2:
	        case MParser.PYTHON3:
	        case MParser.JAVASCRIPT:
	        case MParser.SWIFT:
	        case MParser.BOOLEAN:
	        case MParser.CHARACTER:
	        case MParser.TEXT:
	        case MParser.INTEGER:
	        case MParser.DECIMAL:
	        case MParser.DATE:
	        case MParser.TIME:
	        case MParser.DATETIME:
	        case MParser.PERIOD:
	        case MParser.VERSION:
	        case MParser.CODE:
	        case MParser.DOCUMENT:
	        case MParser.BLOB:
	        case MParser.IMAGE:
	        case MParser.UUID:
	        case MParser.DBID:
	        case MParser.ITERATOR:
	        case MParser.CURSOR:
	        case MParser.HTML:
	        case MParser.ABSTRACT:
	        case MParser.ALL:
	        case MParser.ALWAYS:
	        case MParser.AND:
	        case MParser.ANY:
	        case MParser.AS:
	        case MParser.ASC:
	        case MParser.ATTR:
	        case MParser.ATTRIBUTE:
	        case MParser.ATTRIBUTES:
	        case MParser.BINDINGS:
	        case MParser.BREAK:
	        case MParser.BY:
	        case MParser.CASE:
	        case MParser.CATCH:
	        case MParser.CATEGORY:
	        case MParser.CLASS:
	        case MParser.CONTAINS:
	        case MParser.DEF:
	        case MParser.DEFAULT:
	        case MParser.DEFINE:
	        case MParser.DELETE:
	        case MParser.DESC:
	        case MParser.DO:
	        case MParser.DOING:
	        case MParser.EACH:
	        case MParser.ELSE:
	        case MParser.ENUM:
	        case MParser.ENUMERATED:
	        case MParser.EXCEPT:
	        case MParser.EXECUTE:
	        case MParser.EXPECTING:
	        case MParser.EXTENDS:
	        case MParser.FETCH:
	        case MParser.FILTERED:
	        case MParser.FINALLY:
	        case MParser.FLUSH:
	        case MParser.FOR:
	        case MParser.FROM:
	        case MParser.GETTER:
	        case MParser.HAS:
	        case MParser.IF:
	        case MParser.IN:
	        case MParser.INDEX:
	        case MParser.IS:
	        case MParser.MATCHING:
	        case MParser.METHOD:
	        case MParser.METHODS:
	        case MParser.MODULO:
	        case MParser.MUTABLE:
	        case MParser.NATIVE:
	        case MParser.NONE:
	        case MParser.NOT:
	        case MParser.NOTHING:
	        case MParser.NULL:
	        case MParser.ON:
	        case MParser.ONE:
	        case MParser.OPERATOR:
	        case MParser.OR:
	        case MParser.ORDER:
	        case MParser.OTHERWISE:
	        case MParser.PASS:
	        case MParser.RAISE:
	        case MParser.READ:
	        case MParser.RECEIVING:
	        case MParser.RESOURCE:
	        case MParser.RETURN:
	        case MParser.RETURNING:
	        case MParser.ROWS:
	        case MParser.SELF:
	        case MParser.SETTER:
	        case MParser.SINGLETON:
	        case MParser.SORTED:
	        case MParser.STORABLE:
	        case MParser.STORE:
	        case MParser.SUPER:
	        case MParser.SWITCH:
	        case MParser.TEST:
	        case MParser.THIS:
	        case MParser.THROW:
	        case MParser.TO:
	        case MParser.TRY:
	        case MParser.VERIFYING:
	        case MParser.WIDGET:
	        case MParser.WITH:
	        case MParser.WHEN:
	        case MParser.WHERE:
	        case MParser.WHILE:
	        case MParser.WRITE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2561;
	            this.keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	java_statement() {
	    let localctx = new Java_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, MParser.RULE_java_statement);
	    try {
	        this.state = 2571;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new JavaReturnStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2564;
	            this.match(MParser.RETURN);
	            this.state = 2565;
	            localctx.exp = this.java_expression(0);
	            this.state = 2566;
	            this.match(MParser.SEMI);
	            break;

	        case 2:
	            localctx = new JavaStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2568;
	            localctx.exp = this.java_expression(0);
	            this.state = 2569;
	            this.match(MParser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	java_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Java_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 428;
	    this.enterRecursionRule(localctx, 428, MParser.RULE_java_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new JavaPrimaryExpressionContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2574;
	        localctx.exp = this.java_primary_expression();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2580;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,232,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new JavaSelectorExpressionContext(this, new Java_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_java_expression);
	                this.state = 2576;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2577;
	                localctx.child = this.java_selector_expression(); 
	            }
	            this.state = 2582;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,232,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	java_primary_expression() {
	    let localctx = new Java_primary_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, MParser.RULE_java_primary_expression);
	    try {
	        this.state = 2588;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,233,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2583;
	            this.java_this_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2584;
	            this.java_new_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2585;
	            this.java_parenthesis_expression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2586;
	            this.java_identifier_expression(0);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2587;
	            this.java_literal_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	java_this_expression() {
	    let localctx = new Java_this_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, MParser.RULE_java_this_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2590;
	        this.this_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	java_new_expression() {
	    let localctx = new Java_new_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, MParser.RULE_java_new_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2592;
	        this.new_token();
	        this.state = 2593;
	        this.java_method_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	java_selector_expression() {
	    let localctx = new Java_selector_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, MParser.RULE_java_selector_expression);
	    try {
	        this.state = 2598;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.DOT:
	            localctx = new JavaMethodExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2595;
	            this.match(MParser.DOT);
	            this.state = 2596;
	            localctx.exp = this.java_method_expression();
	            break;
	        case MParser.LBRAK:
	            localctx = new JavaItemExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2597;
	            localctx.exp = this.java_item_expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	java_method_expression() {
	    let localctx = new Java_method_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, MParser.RULE_java_method_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2600;
	        localctx.name = this.java_identifier();
	        this.state = 2601;
	        this.match(MParser.LPAR);
	        this.state = 2603;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MParser.JAVA) | (1 << MParser.CSHARP) | (1 << MParser.PYTHON2) | (1 << MParser.PYTHON3) | (1 << MParser.JAVASCRIPT) | (1 << MParser.SWIFT) | (1 << MParser.LPAR))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (MParser.BOOLEAN - 54)) | (1 << (MParser.CHARACTER - 54)) | (1 << (MParser.TEXT - 54)) | (1 << (MParser.INTEGER - 54)) | (1 << (MParser.DECIMAL - 54)) | (1 << (MParser.DATE - 54)) | (1 << (MParser.TIME - 54)) | (1 << (MParser.DATETIME - 54)) | (1 << (MParser.PERIOD - 54)) | (1 << (MParser.VERSION - 54)) | (1 << (MParser.CODE - 54)) | (1 << (MParser.DOCUMENT - 54)) | (1 << (MParser.BLOB - 54)) | (1 << (MParser.IMAGE - 54)) | (1 << (MParser.UUID - 54)) | (1 << (MParser.DBID - 54)) | (1 << (MParser.ITERATOR - 54)) | (1 << (MParser.CURSOR - 54)) | (1 << (MParser.HTML - 54)) | (1 << (MParser.ABSTRACT - 54)) | (1 << (MParser.ALL - 54)) | (1 << (MParser.ALWAYS - 54)) | (1 << (MParser.AND - 54)) | (1 << (MParser.ANY - 54)) | (1 << (MParser.AS - 54)) | (1 << (MParser.ASC - 54)) | (1 << (MParser.ATTR - 54)) | (1 << (MParser.ATTRIBUTE - 54)) | (1 << (MParser.ATTRIBUTES - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (MParser.BINDINGS - 86)) | (1 << (MParser.BREAK - 86)) | (1 << (MParser.BY - 86)) | (1 << (MParser.CASE - 86)) | (1 << (MParser.CATCH - 86)) | (1 << (MParser.CATEGORY - 86)) | (1 << (MParser.CLASS - 86)) | (1 << (MParser.CONTAINS - 86)) | (1 << (MParser.DEF - 86)) | (1 << (MParser.DEFAULT - 86)) | (1 << (MParser.DEFINE - 86)) | (1 << (MParser.DELETE - 86)) | (1 << (MParser.DESC - 86)) | (1 << (MParser.DO - 86)) | (1 << (MParser.DOING - 86)) | (1 << (MParser.EACH - 86)) | (1 << (MParser.ELSE - 86)) | (1 << (MParser.ENUM - 86)) | (1 << (MParser.ENUMERATED - 86)) | (1 << (MParser.EXCEPT - 86)) | (1 << (MParser.EXECUTE - 86)) | (1 << (MParser.EXPECTING - 86)) | (1 << (MParser.EXTENDS - 86)) | (1 << (MParser.FETCH - 86)) | (1 << (MParser.FILTERED - 86)) | (1 << (MParser.FINALLY - 86)) | (1 << (MParser.FLUSH - 86)) | (1 << (MParser.FOR - 86)) | (1 << (MParser.FROM - 86)) | (1 << (MParser.GETTER - 86)) | (1 << (MParser.HAS - 86)) | (1 << (MParser.IF - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (MParser.IN - 118)) | (1 << (MParser.INDEX - 118)) | (1 << (MParser.IS - 118)) | (1 << (MParser.MATCHING - 118)) | (1 << (MParser.METHOD - 118)) | (1 << (MParser.METHODS - 118)) | (1 << (MParser.MODULO - 118)) | (1 << (MParser.MUTABLE - 118)) | (1 << (MParser.NATIVE - 118)) | (1 << (MParser.NONE - 118)) | (1 << (MParser.NOT - 118)) | (1 << (MParser.NOTHING - 118)) | (1 << (MParser.NULL - 118)) | (1 << (MParser.ON - 118)) | (1 << (MParser.ONE - 118)) | (1 << (MParser.OPERATOR - 118)) | (1 << (MParser.OR - 118)) | (1 << (MParser.ORDER - 118)) | (1 << (MParser.OTHERWISE - 118)) | (1 << (MParser.PASS - 118)) | (1 << (MParser.RAISE - 118)) | (1 << (MParser.READ - 118)) | (1 << (MParser.RECEIVING - 118)) | (1 << (MParser.RESOURCE - 118)) | (1 << (MParser.RETURN - 118)) | (1 << (MParser.RETURNING - 118)) | (1 << (MParser.ROWS - 118)) | (1 << (MParser.SELF - 118)) | (1 << (MParser.SETTER - 118)) | (1 << (MParser.SINGLETON - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (MParser.SORTED - 150)) | (1 << (MParser.STORABLE - 150)) | (1 << (MParser.STORE - 150)) | (1 << (MParser.SUPER - 150)) | (1 << (MParser.SWITCH - 150)) | (1 << (MParser.TEST - 150)) | (1 << (MParser.THIS - 150)) | (1 << (MParser.THROW - 150)) | (1 << (MParser.TO - 150)) | (1 << (MParser.TRY - 150)) | (1 << (MParser.VERIFYING - 150)) | (1 << (MParser.WIDGET - 150)) | (1 << (MParser.WITH - 150)) | (1 << (MParser.WHEN - 150)) | (1 << (MParser.WHERE - 150)) | (1 << (MParser.WHILE - 150)) | (1 << (MParser.WRITE - 150)) | (1 << (MParser.BOOLEAN_LITERAL - 150)) | (1 << (MParser.CHAR_LITERAL - 150)) | (1 << (MParser.SYMBOL_IDENTIFIER - 150)) | (1 << (MParser.TYPE_IDENTIFIER - 150)) | (1 << (MParser.VARIABLE_IDENTIFIER - 150)) | (1 << (MParser.DOLLAR_IDENTIFIER - 150)) | (1 << (MParser.TEXT_LITERAL - 150)) | (1 << (MParser.INTEGER_LITERAL - 150)))) !== 0) || _la===MParser.DECIMAL_LITERAL) {
	            this.state = 2602;
	            localctx.args = this.java_arguments(0);
	        }

	        this.state = 2605;
	        this.match(MParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	java_arguments(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Java_argumentsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 440;
	    this.enterRecursionRule(localctx, 440, MParser.RULE_java_arguments, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new JavaArgumentListContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2608;
	        localctx.item = this.java_expression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2615;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,236,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new JavaArgumentListItemContext(this, new Java_argumentsContext(this, _parentctx, _parentState));
	                localctx.items = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_java_arguments);
	                this.state = 2610;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2611;
	                this.match(MParser.COMMA);
	                this.state = 2612;
	                localctx.item = this.java_expression(0); 
	            }
	            this.state = 2617;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,236,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	java_item_expression() {
	    let localctx = new Java_item_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, MParser.RULE_java_item_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2618;
	        this.match(MParser.LBRAK);
	        this.state = 2619;
	        localctx.exp = this.java_expression(0);
	        this.state = 2620;
	        this.match(MParser.RBRAK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	java_parenthesis_expression() {
	    let localctx = new Java_parenthesis_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, MParser.RULE_java_parenthesis_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2622;
	        this.match(MParser.LPAR);
	        this.state = 2623;
	        localctx.exp = this.java_expression(0);
	        this.state = 2624;
	        this.match(MParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	java_identifier_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Java_identifier_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 446;
	    this.enterRecursionRule(localctx, 446, MParser.RULE_java_identifier_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new JavaIdentifierContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2627;
	        localctx.name = this.java_identifier();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2634;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,237,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new JavaChildIdentifierContext(this, new Java_identifier_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_java_identifier_expression);
	                this.state = 2629;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2630;
	                this.match(MParser.DOT);
	                this.state = 2631;
	                localctx.name = this.java_identifier(); 
	            }
	            this.state = 2636;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,237,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	java_class_identifier_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Java_class_identifier_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 448;
	    this.enterRecursionRule(localctx, 448, MParser.RULE_java_class_identifier_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new JavaClassIdentifierContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2638;
	        localctx.klass = this.java_identifier_expression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2644;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,238,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new JavaChildClassIdentifierContext(this, new Java_class_identifier_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_java_class_identifier_expression);
	                this.state = 2640;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2641;
	                localctx.name = this.match(MParser.DOLLAR_IDENTIFIER); 
	            }
	            this.state = 2646;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,238,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	java_literal_expression() {
	    let localctx = new Java_literal_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, MParser.RULE_java_literal_expression);
	    try {
	        this.state = 2652;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.INTEGER_LITERAL:
	            localctx = new JavaIntegerLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2647;
	            localctx.t = this.match(MParser.INTEGER_LITERAL);
	            break;
	        case MParser.DECIMAL_LITERAL:
	            localctx = new JavaDecimalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2648;
	            localctx.t = this.match(MParser.DECIMAL_LITERAL);
	            break;
	        case MParser.TEXT_LITERAL:
	            localctx = new JavaTextLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2649;
	            localctx.t = this.match(MParser.TEXT_LITERAL);
	            break;
	        case MParser.BOOLEAN_LITERAL:
	            localctx = new JavaBooleanLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2650;
	            localctx.t = this.match(MParser.BOOLEAN_LITERAL);
	            break;
	        case MParser.CHAR_LITERAL:
	            localctx = new JavaCharacterLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2651;
	            localctx.t = this.match(MParser.CHAR_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	java_identifier() {
	    let localctx = new Java_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, MParser.RULE_java_identifier);
	    try {
	        this.state = 2659;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.VARIABLE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2654;
	            this.match(MParser.VARIABLE_IDENTIFIER);
	            break;
	        case MParser.SYMBOL_IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2655;
	            this.match(MParser.SYMBOL_IDENTIFIER);
	            break;
	        case MParser.DOLLAR_IDENTIFIER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2656;
	            this.match(MParser.DOLLAR_IDENTIFIER);
	            break;
	        case MParser.TYPE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2657;
	            this.match(MParser.TYPE_IDENTIFIER);
	            break;
	        case MParser.JAVA:
	        case MParser.CSHARP:
	        case MParser.PYTHON2:
	        case MParser.PYTHON3:
	        case MParser.JAVASCRIPT:
	        case MParser.SWIFT:
	        case MParser.BOOLEAN:
	        case MParser.CHARACTER:
	        case MParser.TEXT:
	        case MParser.INTEGER:
	        case MParser.DECIMAL:
	        case MParser.DATE:
	        case MParser.TIME:
	        case MParser.DATETIME:
	        case MParser.PERIOD:
	        case MParser.VERSION:
	        case MParser.CODE:
	        case MParser.DOCUMENT:
	        case MParser.BLOB:
	        case MParser.IMAGE:
	        case MParser.UUID:
	        case MParser.DBID:
	        case MParser.ITERATOR:
	        case MParser.CURSOR:
	        case MParser.HTML:
	        case MParser.ABSTRACT:
	        case MParser.ALL:
	        case MParser.ALWAYS:
	        case MParser.AND:
	        case MParser.ANY:
	        case MParser.AS:
	        case MParser.ASC:
	        case MParser.ATTR:
	        case MParser.ATTRIBUTE:
	        case MParser.ATTRIBUTES:
	        case MParser.BINDINGS:
	        case MParser.BREAK:
	        case MParser.BY:
	        case MParser.CASE:
	        case MParser.CATCH:
	        case MParser.CATEGORY:
	        case MParser.CLASS:
	        case MParser.CONTAINS:
	        case MParser.DEF:
	        case MParser.DEFAULT:
	        case MParser.DEFINE:
	        case MParser.DELETE:
	        case MParser.DESC:
	        case MParser.DO:
	        case MParser.DOING:
	        case MParser.EACH:
	        case MParser.ELSE:
	        case MParser.ENUM:
	        case MParser.ENUMERATED:
	        case MParser.EXCEPT:
	        case MParser.EXECUTE:
	        case MParser.EXPECTING:
	        case MParser.EXTENDS:
	        case MParser.FETCH:
	        case MParser.FILTERED:
	        case MParser.FINALLY:
	        case MParser.FLUSH:
	        case MParser.FOR:
	        case MParser.FROM:
	        case MParser.GETTER:
	        case MParser.HAS:
	        case MParser.IF:
	        case MParser.IN:
	        case MParser.INDEX:
	        case MParser.IS:
	        case MParser.MATCHING:
	        case MParser.METHOD:
	        case MParser.METHODS:
	        case MParser.MODULO:
	        case MParser.MUTABLE:
	        case MParser.NATIVE:
	        case MParser.NONE:
	        case MParser.NOT:
	        case MParser.NOTHING:
	        case MParser.NULL:
	        case MParser.ON:
	        case MParser.ONE:
	        case MParser.OPERATOR:
	        case MParser.OR:
	        case MParser.ORDER:
	        case MParser.OTHERWISE:
	        case MParser.PASS:
	        case MParser.RAISE:
	        case MParser.READ:
	        case MParser.RECEIVING:
	        case MParser.RESOURCE:
	        case MParser.RETURN:
	        case MParser.RETURNING:
	        case MParser.ROWS:
	        case MParser.SELF:
	        case MParser.SETTER:
	        case MParser.SINGLETON:
	        case MParser.SORTED:
	        case MParser.STORABLE:
	        case MParser.STORE:
	        case MParser.SUPER:
	        case MParser.SWITCH:
	        case MParser.TEST:
	        case MParser.THIS:
	        case MParser.THROW:
	        case MParser.TO:
	        case MParser.TRY:
	        case MParser.VERIFYING:
	        case MParser.WIDGET:
	        case MParser.WITH:
	        case MParser.WHEN:
	        case MParser.WHERE:
	        case MParser.WHILE:
	        case MParser.WRITE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2658;
	            this.keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csharp_statement() {
	    let localctx = new Csharp_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, MParser.RULE_csharp_statement);
	    try {
	        this.state = 2668;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CSharpReturnStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2661;
	            this.match(MParser.RETURN);
	            this.state = 2662;
	            localctx.exp = this.csharp_expression(0);
	            this.state = 2663;
	            this.match(MParser.SEMI);
	            break;

	        case 2:
	            localctx = new CSharpStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2665;
	            localctx.exp = this.csharp_expression(0);
	            this.state = 2666;
	            this.match(MParser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	csharp_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Csharp_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 456;
	    this.enterRecursionRule(localctx, 456, MParser.RULE_csharp_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new CSharpPrimaryExpressionContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2671;
	        localctx.exp = this.csharp_primary_expression();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2677;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,242,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new CSharpSelectorExpressionContext(this, new Csharp_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_csharp_expression);
	                this.state = 2673;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2674;
	                localctx.child = this.csharp_selector_expression(); 
	            }
	            this.state = 2679;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,242,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	csharp_primary_expression() {
	    let localctx = new Csharp_primary_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, MParser.RULE_csharp_primary_expression);
	    try {
	        this.state = 2685;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2680;
	            this.csharp_this_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2681;
	            this.csharp_new_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2682;
	            this.csharp_parenthesis_expression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2683;
	            this.csharp_identifier_expression(0);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2684;
	            this.csharp_literal_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csharp_this_expression() {
	    let localctx = new Csharp_this_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, MParser.RULE_csharp_this_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2687;
	        this.this_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csharp_new_expression() {
	    let localctx = new Csharp_new_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, MParser.RULE_csharp_new_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2689;
	        this.new_token();
	        this.state = 2690;
	        this.csharp_method_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csharp_selector_expression() {
	    let localctx = new Csharp_selector_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, MParser.RULE_csharp_selector_expression);
	    try {
	        this.state = 2695;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.DOT:
	            localctx = new CSharpMethodExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2692;
	            this.match(MParser.DOT);
	            this.state = 2693;
	            localctx.exp = this.csharp_method_expression();
	            break;
	        case MParser.LBRAK:
	            localctx = new CSharpItemExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2694;
	            localctx.exp = this.csharp_item_expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csharp_method_expression() {
	    let localctx = new Csharp_method_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, MParser.RULE_csharp_method_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2697;
	        localctx.name = this.csharp_identifier();
	        this.state = 2698;
	        this.match(MParser.LPAR);
	        this.state = 2700;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MParser.JAVA) | (1 << MParser.CSHARP) | (1 << MParser.PYTHON2) | (1 << MParser.PYTHON3) | (1 << MParser.JAVASCRIPT) | (1 << MParser.SWIFT) | (1 << MParser.LPAR))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (MParser.BOOLEAN - 54)) | (1 << (MParser.CHARACTER - 54)) | (1 << (MParser.TEXT - 54)) | (1 << (MParser.INTEGER - 54)) | (1 << (MParser.DECIMAL - 54)) | (1 << (MParser.DATE - 54)) | (1 << (MParser.TIME - 54)) | (1 << (MParser.DATETIME - 54)) | (1 << (MParser.PERIOD - 54)) | (1 << (MParser.VERSION - 54)) | (1 << (MParser.CODE - 54)) | (1 << (MParser.DOCUMENT - 54)) | (1 << (MParser.BLOB - 54)) | (1 << (MParser.IMAGE - 54)) | (1 << (MParser.UUID - 54)) | (1 << (MParser.DBID - 54)) | (1 << (MParser.ITERATOR - 54)) | (1 << (MParser.CURSOR - 54)) | (1 << (MParser.HTML - 54)) | (1 << (MParser.ABSTRACT - 54)) | (1 << (MParser.ALL - 54)) | (1 << (MParser.ALWAYS - 54)) | (1 << (MParser.AND - 54)) | (1 << (MParser.ANY - 54)) | (1 << (MParser.AS - 54)) | (1 << (MParser.ASC - 54)) | (1 << (MParser.ATTR - 54)) | (1 << (MParser.ATTRIBUTE - 54)) | (1 << (MParser.ATTRIBUTES - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (MParser.BINDINGS - 86)) | (1 << (MParser.BREAK - 86)) | (1 << (MParser.BY - 86)) | (1 << (MParser.CASE - 86)) | (1 << (MParser.CATCH - 86)) | (1 << (MParser.CATEGORY - 86)) | (1 << (MParser.CLASS - 86)) | (1 << (MParser.CONTAINS - 86)) | (1 << (MParser.DEF - 86)) | (1 << (MParser.DEFAULT - 86)) | (1 << (MParser.DEFINE - 86)) | (1 << (MParser.DELETE - 86)) | (1 << (MParser.DESC - 86)) | (1 << (MParser.DO - 86)) | (1 << (MParser.DOING - 86)) | (1 << (MParser.EACH - 86)) | (1 << (MParser.ELSE - 86)) | (1 << (MParser.ENUM - 86)) | (1 << (MParser.ENUMERATED - 86)) | (1 << (MParser.EXCEPT - 86)) | (1 << (MParser.EXECUTE - 86)) | (1 << (MParser.EXPECTING - 86)) | (1 << (MParser.EXTENDS - 86)) | (1 << (MParser.FETCH - 86)) | (1 << (MParser.FILTERED - 86)) | (1 << (MParser.FINALLY - 86)) | (1 << (MParser.FLUSH - 86)) | (1 << (MParser.FOR - 86)) | (1 << (MParser.FROM - 86)) | (1 << (MParser.GETTER - 86)) | (1 << (MParser.HAS - 86)) | (1 << (MParser.IF - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (MParser.IN - 118)) | (1 << (MParser.INDEX - 118)) | (1 << (MParser.IS - 118)) | (1 << (MParser.MATCHING - 118)) | (1 << (MParser.METHOD - 118)) | (1 << (MParser.METHODS - 118)) | (1 << (MParser.MODULO - 118)) | (1 << (MParser.MUTABLE - 118)) | (1 << (MParser.NATIVE - 118)) | (1 << (MParser.NONE - 118)) | (1 << (MParser.NOT - 118)) | (1 << (MParser.NOTHING - 118)) | (1 << (MParser.NULL - 118)) | (1 << (MParser.ON - 118)) | (1 << (MParser.ONE - 118)) | (1 << (MParser.OPERATOR - 118)) | (1 << (MParser.OR - 118)) | (1 << (MParser.ORDER - 118)) | (1 << (MParser.OTHERWISE - 118)) | (1 << (MParser.PASS - 118)) | (1 << (MParser.RAISE - 118)) | (1 << (MParser.READ - 118)) | (1 << (MParser.RECEIVING - 118)) | (1 << (MParser.RESOURCE - 118)) | (1 << (MParser.RETURN - 118)) | (1 << (MParser.RETURNING - 118)) | (1 << (MParser.ROWS - 118)) | (1 << (MParser.SELF - 118)) | (1 << (MParser.SETTER - 118)) | (1 << (MParser.SINGLETON - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (MParser.SORTED - 150)) | (1 << (MParser.STORABLE - 150)) | (1 << (MParser.STORE - 150)) | (1 << (MParser.SUPER - 150)) | (1 << (MParser.SWITCH - 150)) | (1 << (MParser.TEST - 150)) | (1 << (MParser.THIS - 150)) | (1 << (MParser.THROW - 150)) | (1 << (MParser.TO - 150)) | (1 << (MParser.TRY - 150)) | (1 << (MParser.VERIFYING - 150)) | (1 << (MParser.WIDGET - 150)) | (1 << (MParser.WITH - 150)) | (1 << (MParser.WHEN - 150)) | (1 << (MParser.WHERE - 150)) | (1 << (MParser.WHILE - 150)) | (1 << (MParser.WRITE - 150)) | (1 << (MParser.BOOLEAN_LITERAL - 150)) | (1 << (MParser.CHAR_LITERAL - 150)) | (1 << (MParser.SYMBOL_IDENTIFIER - 150)) | (1 << (MParser.TYPE_IDENTIFIER - 150)) | (1 << (MParser.VARIABLE_IDENTIFIER - 150)) | (1 << (MParser.DOLLAR_IDENTIFIER - 150)) | (1 << (MParser.TEXT_LITERAL - 150)) | (1 << (MParser.INTEGER_LITERAL - 150)))) !== 0) || _la===MParser.DECIMAL_LITERAL) {
	            this.state = 2699;
	            localctx.args = this.csharp_arguments(0);
	        }

	        this.state = 2702;
	        this.match(MParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	csharp_arguments(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Csharp_argumentsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 468;
	    this.enterRecursionRule(localctx, 468, MParser.RULE_csharp_arguments, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new CSharpArgumentListContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2705;
	        localctx.item = this.csharp_expression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2712;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,246,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new CSharpArgumentListItemContext(this, new Csharp_argumentsContext(this, _parentctx, _parentState));
	                localctx.items = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_csharp_arguments);
	                this.state = 2707;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2708;
	                this.match(MParser.COMMA);
	                this.state = 2709;
	                localctx.item = this.csharp_expression(0); 
	            }
	            this.state = 2714;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,246,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	csharp_item_expression() {
	    let localctx = new Csharp_item_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, MParser.RULE_csharp_item_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2715;
	        this.match(MParser.LBRAK);
	        this.state = 2716;
	        localctx.exp = this.csharp_expression(0);
	        this.state = 2717;
	        this.match(MParser.RBRAK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csharp_parenthesis_expression() {
	    let localctx = new Csharp_parenthesis_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, MParser.RULE_csharp_parenthesis_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2719;
	        this.match(MParser.LPAR);
	        this.state = 2720;
	        localctx.exp = this.csharp_expression(0);
	        this.state = 2721;
	        this.match(MParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	csharp_identifier_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Csharp_identifier_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 474;
	    this.enterRecursionRule(localctx, 474, MParser.RULE_csharp_identifier_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2726;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CSharpPromptoIdentifierContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 2724;
	            this.match(MParser.DOLLAR_IDENTIFIER);
	            break;

	        case 2:
	            localctx = new CSharpIdentifierContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2725;
	            localctx.name = this.csharp_identifier();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2733;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,248,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new CSharpChildIdentifierContext(this, new Csharp_identifier_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_csharp_identifier_expression);
	                this.state = 2728;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2729;
	                this.match(MParser.DOT);
	                this.state = 2730;
	                localctx.name = this.csharp_identifier(); 
	            }
	            this.state = 2735;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,248,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	csharp_literal_expression() {
	    let localctx = new Csharp_literal_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, MParser.RULE_csharp_literal_expression);
	    try {
	        this.state = 2741;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.INTEGER_LITERAL:
	            localctx = new CSharpIntegerLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2736;
	            this.match(MParser.INTEGER_LITERAL);
	            break;
	        case MParser.DECIMAL_LITERAL:
	            localctx = new CSharpDecimalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2737;
	            this.match(MParser.DECIMAL_LITERAL);
	            break;
	        case MParser.TEXT_LITERAL:
	            localctx = new CSharpTextLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2738;
	            this.match(MParser.TEXT_LITERAL);
	            break;
	        case MParser.BOOLEAN_LITERAL:
	            localctx = new CSharpBooleanLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2739;
	            this.match(MParser.BOOLEAN_LITERAL);
	            break;
	        case MParser.CHAR_LITERAL:
	            localctx = new CSharpCharacterLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2740;
	            this.match(MParser.CHAR_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csharp_identifier() {
	    let localctx = new Csharp_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, MParser.RULE_csharp_identifier);
	    try {
	        this.state = 2748;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.VARIABLE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2743;
	            this.match(MParser.VARIABLE_IDENTIFIER);
	            break;
	        case MParser.SYMBOL_IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2744;
	            this.match(MParser.SYMBOL_IDENTIFIER);
	            break;
	        case MParser.DOLLAR_IDENTIFIER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2745;
	            this.match(MParser.DOLLAR_IDENTIFIER);
	            break;
	        case MParser.TYPE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2746;
	            this.match(MParser.TYPE_IDENTIFIER);
	            break;
	        case MParser.JAVA:
	        case MParser.CSHARP:
	        case MParser.PYTHON2:
	        case MParser.PYTHON3:
	        case MParser.JAVASCRIPT:
	        case MParser.SWIFT:
	        case MParser.BOOLEAN:
	        case MParser.CHARACTER:
	        case MParser.TEXT:
	        case MParser.INTEGER:
	        case MParser.DECIMAL:
	        case MParser.DATE:
	        case MParser.TIME:
	        case MParser.DATETIME:
	        case MParser.PERIOD:
	        case MParser.VERSION:
	        case MParser.CODE:
	        case MParser.DOCUMENT:
	        case MParser.BLOB:
	        case MParser.IMAGE:
	        case MParser.UUID:
	        case MParser.DBID:
	        case MParser.ITERATOR:
	        case MParser.CURSOR:
	        case MParser.HTML:
	        case MParser.ABSTRACT:
	        case MParser.ALL:
	        case MParser.ALWAYS:
	        case MParser.AND:
	        case MParser.ANY:
	        case MParser.AS:
	        case MParser.ASC:
	        case MParser.ATTR:
	        case MParser.ATTRIBUTE:
	        case MParser.ATTRIBUTES:
	        case MParser.BINDINGS:
	        case MParser.BREAK:
	        case MParser.BY:
	        case MParser.CASE:
	        case MParser.CATCH:
	        case MParser.CATEGORY:
	        case MParser.CLASS:
	        case MParser.CONTAINS:
	        case MParser.DEF:
	        case MParser.DEFAULT:
	        case MParser.DEFINE:
	        case MParser.DELETE:
	        case MParser.DESC:
	        case MParser.DO:
	        case MParser.DOING:
	        case MParser.EACH:
	        case MParser.ELSE:
	        case MParser.ENUM:
	        case MParser.ENUMERATED:
	        case MParser.EXCEPT:
	        case MParser.EXECUTE:
	        case MParser.EXPECTING:
	        case MParser.EXTENDS:
	        case MParser.FETCH:
	        case MParser.FILTERED:
	        case MParser.FINALLY:
	        case MParser.FLUSH:
	        case MParser.FOR:
	        case MParser.FROM:
	        case MParser.GETTER:
	        case MParser.HAS:
	        case MParser.IF:
	        case MParser.IN:
	        case MParser.INDEX:
	        case MParser.IS:
	        case MParser.MATCHING:
	        case MParser.METHOD:
	        case MParser.METHODS:
	        case MParser.MODULO:
	        case MParser.MUTABLE:
	        case MParser.NATIVE:
	        case MParser.NONE:
	        case MParser.NOT:
	        case MParser.NOTHING:
	        case MParser.NULL:
	        case MParser.ON:
	        case MParser.ONE:
	        case MParser.OPERATOR:
	        case MParser.OR:
	        case MParser.ORDER:
	        case MParser.OTHERWISE:
	        case MParser.PASS:
	        case MParser.RAISE:
	        case MParser.READ:
	        case MParser.RECEIVING:
	        case MParser.RESOURCE:
	        case MParser.RETURN:
	        case MParser.RETURNING:
	        case MParser.ROWS:
	        case MParser.SELF:
	        case MParser.SETTER:
	        case MParser.SINGLETON:
	        case MParser.SORTED:
	        case MParser.STORABLE:
	        case MParser.STORE:
	        case MParser.SUPER:
	        case MParser.SWITCH:
	        case MParser.TEST:
	        case MParser.THIS:
	        case MParser.THROW:
	        case MParser.TO:
	        case MParser.TRY:
	        case MParser.VERIFYING:
	        case MParser.WIDGET:
	        case MParser.WITH:
	        case MParser.WHEN:
	        case MParser.WHERE:
	        case MParser.WHILE:
	        case MParser.WRITE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2747;
	            this.keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_expression() {
	    let localctx = new Jsx_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, MParser.RULE_jsx_expression);
	    try {
	        this.state = 2752;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,251,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2750;
	            this.jsx_element();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2751;
	            this.jsx_fragment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_element() {
	    let localctx = new Jsx_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, MParser.RULE_jsx_element);
	    try {
	        this.state = 2761;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,253,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new JsxSelfClosingContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2754;
	            localctx.jsx = this.jsx_self_closing();
	            break;

	        case 2:
	            localctx = new JsxElementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2755;
	            localctx.opening = this.jsx_opening();
	            this.state = 2757;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	            if(la_===1) {
	                this.state = 2756;
	                localctx.children_ = this.jsx_children();

	            }
	            this.state = 2759;
	            localctx.closing = this.jsx_closing();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_fragment() {
	    let localctx = new Jsx_fragmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, MParser.RULE_jsx_fragment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2763;
	        this.jsx_fragment_start();
	        this.state = 2764;
	        this.ws_plus();
	        this.state = 2766;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
	        if(la_===1) {
	            this.state = 2765;
	            localctx.children_ = this.jsx_children();

	        }
	        this.state = 2768;
	        this.ws_plus();
	        this.state = 2769;
	        this.jsx_fragment_end();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_fragment_start() {
	    let localctx = new Jsx_fragment_startContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, MParser.RULE_jsx_fragment_start);
	    try {
	        this.state = 2774;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.LT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2771;
	            this.match(MParser.LT);
	            this.state = 2772;
	            this.match(MParser.GT);
	            break;
	        case MParser.LTGT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2773;
	            this.match(MParser.LTGT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_fragment_end() {
	    let localctx = new Jsx_fragment_endContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, MParser.RULE_jsx_fragment_end);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2776;
	        this.match(MParser.LT);
	        this.state = 2777;
	        this.match(MParser.SLASH);
	        this.state = 2778;
	        this.match(MParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_self_closing() {
	    let localctx = new Jsx_self_closingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, MParser.RULE_jsx_self_closing);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2780;
	        this.match(MParser.LT);
	        this.state = 2781;
	        localctx.name = this.jsx_element_name();
	        this.state = 2782;
	        this.ws_plus();
	        this.state = 2786;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MParser.JAVA) | (1 << MParser.CSHARP) | (1 << MParser.PYTHON2) | (1 << MParser.PYTHON3) | (1 << MParser.JAVASCRIPT) | (1 << MParser.SWIFT))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (MParser.BOOLEAN - 54)) | (1 << (MParser.CHARACTER - 54)) | (1 << (MParser.TEXT - 54)) | (1 << (MParser.INTEGER - 54)) | (1 << (MParser.DECIMAL - 54)) | (1 << (MParser.DATE - 54)) | (1 << (MParser.TIME - 54)) | (1 << (MParser.DATETIME - 54)) | (1 << (MParser.PERIOD - 54)) | (1 << (MParser.VERSION - 54)) | (1 << (MParser.CODE - 54)) | (1 << (MParser.DOCUMENT - 54)) | (1 << (MParser.BLOB - 54)) | (1 << (MParser.IMAGE - 54)) | (1 << (MParser.UUID - 54)) | (1 << (MParser.DBID - 54)) | (1 << (MParser.ITERATOR - 54)) | (1 << (MParser.CURSOR - 54)) | (1 << (MParser.HTML - 54)) | (1 << (MParser.ABSTRACT - 54)) | (1 << (MParser.ALL - 54)) | (1 << (MParser.ALWAYS - 54)) | (1 << (MParser.AND - 54)) | (1 << (MParser.ANY - 54)) | (1 << (MParser.AS - 54)) | (1 << (MParser.ASC - 54)) | (1 << (MParser.ATTR - 54)) | (1 << (MParser.ATTRIBUTE - 54)) | (1 << (MParser.ATTRIBUTES - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (MParser.BINDINGS - 86)) | (1 << (MParser.BREAK - 86)) | (1 << (MParser.BY - 86)) | (1 << (MParser.CASE - 86)) | (1 << (MParser.CATCH - 86)) | (1 << (MParser.CATEGORY - 86)) | (1 << (MParser.CLASS - 86)) | (1 << (MParser.CONTAINS - 86)) | (1 << (MParser.DEF - 86)) | (1 << (MParser.DEFAULT - 86)) | (1 << (MParser.DEFINE - 86)) | (1 << (MParser.DELETE - 86)) | (1 << (MParser.DESC - 86)) | (1 << (MParser.DO - 86)) | (1 << (MParser.DOING - 86)) | (1 << (MParser.EACH - 86)) | (1 << (MParser.ELSE - 86)) | (1 << (MParser.ENUM - 86)) | (1 << (MParser.ENUMERATED - 86)) | (1 << (MParser.EXCEPT - 86)) | (1 << (MParser.EXECUTE - 86)) | (1 << (MParser.EXPECTING - 86)) | (1 << (MParser.EXTENDS - 86)) | (1 << (MParser.FETCH - 86)) | (1 << (MParser.FILTERED - 86)) | (1 << (MParser.FINALLY - 86)) | (1 << (MParser.FLUSH - 86)) | (1 << (MParser.FOR - 86)) | (1 << (MParser.FROM - 86)) | (1 << (MParser.GETTER - 86)) | (1 << (MParser.HAS - 86)) | (1 << (MParser.IF - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (MParser.IN - 118)) | (1 << (MParser.INDEX - 118)) | (1 << (MParser.IS - 118)) | (1 << (MParser.MATCHING - 118)) | (1 << (MParser.METHOD - 118)) | (1 << (MParser.METHODS - 118)) | (1 << (MParser.MODULO - 118)) | (1 << (MParser.MUTABLE - 118)) | (1 << (MParser.NATIVE - 118)) | (1 << (MParser.NONE - 118)) | (1 << (MParser.NOT - 118)) | (1 << (MParser.NOTHING - 118)) | (1 << (MParser.NULL - 118)) | (1 << (MParser.ON - 118)) | (1 << (MParser.ONE - 118)) | (1 << (MParser.OPERATOR - 118)) | (1 << (MParser.OR - 118)) | (1 << (MParser.ORDER - 118)) | (1 << (MParser.OTHERWISE - 118)) | (1 << (MParser.PASS - 118)) | (1 << (MParser.RAISE - 118)) | (1 << (MParser.READ - 118)) | (1 << (MParser.RECEIVING - 118)) | (1 << (MParser.RESOURCE - 118)) | (1 << (MParser.RETURN - 118)) | (1 << (MParser.RETURNING - 118)) | (1 << (MParser.ROWS - 118)) | (1 << (MParser.SELF - 118)) | (1 << (MParser.SETTER - 118)) | (1 << (MParser.SINGLETON - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (MParser.SORTED - 150)) | (1 << (MParser.STORABLE - 150)) | (1 << (MParser.STORE - 150)) | (1 << (MParser.SUPER - 150)) | (1 << (MParser.SWITCH - 150)) | (1 << (MParser.TEST - 150)) | (1 << (MParser.THIS - 150)) | (1 << (MParser.THROW - 150)) | (1 << (MParser.TO - 150)) | (1 << (MParser.TRY - 150)) | (1 << (MParser.VERIFYING - 150)) | (1 << (MParser.WIDGET - 150)) | (1 << (MParser.WITH - 150)) | (1 << (MParser.WHEN - 150)) | (1 << (MParser.WHERE - 150)) | (1 << (MParser.WHILE - 150)) | (1 << (MParser.WRITE - 150)) | (1 << (MParser.SYMBOL_IDENTIFIER - 150)) | (1 << (MParser.TYPE_IDENTIFIER - 150)) | (1 << (MParser.VARIABLE_IDENTIFIER - 150)))) !== 0)) {
	            this.state = 2783;
	            localctx.attributes = this.jsx_attribute();
	            this.state = 2788;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2789;
	        this.match(MParser.SLASH);
	        this.state = 2790;
	        this.match(MParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_opening() {
	    let localctx = new Jsx_openingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, MParser.RULE_jsx_opening);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2792;
	        this.match(MParser.LT);
	        this.state = 2793;
	        localctx.name = this.jsx_element_name();
	        this.state = 2794;
	        this.ws_plus();
	        this.state = 2798;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MParser.JAVA) | (1 << MParser.CSHARP) | (1 << MParser.PYTHON2) | (1 << MParser.PYTHON3) | (1 << MParser.JAVASCRIPT) | (1 << MParser.SWIFT))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (MParser.BOOLEAN - 54)) | (1 << (MParser.CHARACTER - 54)) | (1 << (MParser.TEXT - 54)) | (1 << (MParser.INTEGER - 54)) | (1 << (MParser.DECIMAL - 54)) | (1 << (MParser.DATE - 54)) | (1 << (MParser.TIME - 54)) | (1 << (MParser.DATETIME - 54)) | (1 << (MParser.PERIOD - 54)) | (1 << (MParser.VERSION - 54)) | (1 << (MParser.CODE - 54)) | (1 << (MParser.DOCUMENT - 54)) | (1 << (MParser.BLOB - 54)) | (1 << (MParser.IMAGE - 54)) | (1 << (MParser.UUID - 54)) | (1 << (MParser.DBID - 54)) | (1 << (MParser.ITERATOR - 54)) | (1 << (MParser.CURSOR - 54)) | (1 << (MParser.HTML - 54)) | (1 << (MParser.ABSTRACT - 54)) | (1 << (MParser.ALL - 54)) | (1 << (MParser.ALWAYS - 54)) | (1 << (MParser.AND - 54)) | (1 << (MParser.ANY - 54)) | (1 << (MParser.AS - 54)) | (1 << (MParser.ASC - 54)) | (1 << (MParser.ATTR - 54)) | (1 << (MParser.ATTRIBUTE - 54)) | (1 << (MParser.ATTRIBUTES - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (MParser.BINDINGS - 86)) | (1 << (MParser.BREAK - 86)) | (1 << (MParser.BY - 86)) | (1 << (MParser.CASE - 86)) | (1 << (MParser.CATCH - 86)) | (1 << (MParser.CATEGORY - 86)) | (1 << (MParser.CLASS - 86)) | (1 << (MParser.CONTAINS - 86)) | (1 << (MParser.DEF - 86)) | (1 << (MParser.DEFAULT - 86)) | (1 << (MParser.DEFINE - 86)) | (1 << (MParser.DELETE - 86)) | (1 << (MParser.DESC - 86)) | (1 << (MParser.DO - 86)) | (1 << (MParser.DOING - 86)) | (1 << (MParser.EACH - 86)) | (1 << (MParser.ELSE - 86)) | (1 << (MParser.ENUM - 86)) | (1 << (MParser.ENUMERATED - 86)) | (1 << (MParser.EXCEPT - 86)) | (1 << (MParser.EXECUTE - 86)) | (1 << (MParser.EXPECTING - 86)) | (1 << (MParser.EXTENDS - 86)) | (1 << (MParser.FETCH - 86)) | (1 << (MParser.FILTERED - 86)) | (1 << (MParser.FINALLY - 86)) | (1 << (MParser.FLUSH - 86)) | (1 << (MParser.FOR - 86)) | (1 << (MParser.FROM - 86)) | (1 << (MParser.GETTER - 86)) | (1 << (MParser.HAS - 86)) | (1 << (MParser.IF - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (MParser.IN - 118)) | (1 << (MParser.INDEX - 118)) | (1 << (MParser.IS - 118)) | (1 << (MParser.MATCHING - 118)) | (1 << (MParser.METHOD - 118)) | (1 << (MParser.METHODS - 118)) | (1 << (MParser.MODULO - 118)) | (1 << (MParser.MUTABLE - 118)) | (1 << (MParser.NATIVE - 118)) | (1 << (MParser.NONE - 118)) | (1 << (MParser.NOT - 118)) | (1 << (MParser.NOTHING - 118)) | (1 << (MParser.NULL - 118)) | (1 << (MParser.ON - 118)) | (1 << (MParser.ONE - 118)) | (1 << (MParser.OPERATOR - 118)) | (1 << (MParser.OR - 118)) | (1 << (MParser.ORDER - 118)) | (1 << (MParser.OTHERWISE - 118)) | (1 << (MParser.PASS - 118)) | (1 << (MParser.RAISE - 118)) | (1 << (MParser.READ - 118)) | (1 << (MParser.RECEIVING - 118)) | (1 << (MParser.RESOURCE - 118)) | (1 << (MParser.RETURN - 118)) | (1 << (MParser.RETURNING - 118)) | (1 << (MParser.ROWS - 118)) | (1 << (MParser.SELF - 118)) | (1 << (MParser.SETTER - 118)) | (1 << (MParser.SINGLETON - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (MParser.SORTED - 150)) | (1 << (MParser.STORABLE - 150)) | (1 << (MParser.STORE - 150)) | (1 << (MParser.SUPER - 150)) | (1 << (MParser.SWITCH - 150)) | (1 << (MParser.TEST - 150)) | (1 << (MParser.THIS - 150)) | (1 << (MParser.THROW - 150)) | (1 << (MParser.TO - 150)) | (1 << (MParser.TRY - 150)) | (1 << (MParser.VERIFYING - 150)) | (1 << (MParser.WIDGET - 150)) | (1 << (MParser.WITH - 150)) | (1 << (MParser.WHEN - 150)) | (1 << (MParser.WHERE - 150)) | (1 << (MParser.WHILE - 150)) | (1 << (MParser.WRITE - 150)) | (1 << (MParser.SYMBOL_IDENTIFIER - 150)) | (1 << (MParser.TYPE_IDENTIFIER - 150)) | (1 << (MParser.VARIABLE_IDENTIFIER - 150)))) !== 0)) {
	            this.state = 2795;
	            localctx.attributes = this.jsx_attribute();
	            this.state = 2800;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2801;
	        this.match(MParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_closing() {
	    let localctx = new Jsx_closingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, MParser.RULE_jsx_closing);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2803;
	        this.match(MParser.LT);
	        this.state = 2804;
	        this.match(MParser.SLASH);
	        this.state = 2805;
	        localctx.name = this.jsx_element_name();
	        this.state = 2806;
	        this.match(MParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_element_name() {
	    let localctx = new Jsx_element_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, MParser.RULE_jsx_element_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2808;
	        this.jsx_identifier();
	        this.state = 2813;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===MParser.DOT) {
	            this.state = 2809;
	            this.match(MParser.DOT);
	            this.state = 2810;
	            this.jsx_identifier();
	            this.state = 2815;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_identifier() {
	    let localctx = new Jsx_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, MParser.RULE_jsx_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2816;
	        this.identifier_or_keyword();
	        this.state = 2820;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,259,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2817;
	                this.nospace_hyphen_identifier_or_keyword(); 
	            }
	            this.state = 2822;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,259,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_attribute() {
	    let localctx = new Jsx_attributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, MParser.RULE_jsx_attribute);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2823;
	        localctx.name = this.jsx_identifier();
	        this.state = 2826;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===MParser.EQ) {
	            this.state = 2824;
	            this.match(MParser.EQ);
	            this.state = 2825;
	            localctx.value = this.jsx_attribute_value();
	        }

	        this.state = 2828;
	        this.ws_plus();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_attribute_value() {
	    let localctx = new Jsx_attribute_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, MParser.RULE_jsx_attribute_value);
	    try {
	        this.state = 2835;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.TEXT_LITERAL:
	            localctx = new JsxLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2830;
	            this.match(MParser.TEXT_LITERAL);
	            break;
	        case MParser.LCURL:
	            localctx = new JsxValueContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2831;
	            this.match(MParser.LCURL);
	            this.state = 2832;
	            localctx.exp = this.expression(0);
	            this.state = 2833;
	            this.match(MParser.RCURL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_children() {
	    let localctx = new Jsx_childrenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, MParser.RULE_jsx_children);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2838; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2837;
	        		this.jsx_child();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2840; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,262, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_child() {
	    let localctx = new Jsx_childContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, MParser.RULE_jsx_child);
	    var _la = 0; // Token type
	    try {
	        this.state = 2849;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.INDENT:
	        case MParser.DEDENT:
	        case MParser.LF_TAB:
	        case MParser.LF_MORE:
	        case MParser.LF:
	        case MParser.TAB:
	        case MParser.WS:
	        case MParser.CSS_DATA:
	        case MParser.COMMENT:
	        case MParser.JAVA:
	        case MParser.CSHARP:
	        case MParser.PYTHON2:
	        case MParser.PYTHON3:
	        case MParser.JAVASCRIPT:
	        case MParser.SWIFT:
	        case MParser.COLON:
	        case MParser.SEMI:
	        case MParser.COMMA:
	        case MParser.RANGE:
	        case MParser.DOT:
	        case MParser.LPAR:
	        case MParser.RPAR:
	        case MParser.LBRAK:
	        case MParser.RBRAK:
	        case MParser.QMARK:
	        case MParser.XMARK:
	        case MParser.AMP:
	        case MParser.AMP2:
	        case MParser.PIPE:
	        case MParser.PIPE2:
	        case MParser.PLUS:
	        case MParser.MINUS:
	        case MParser.STAR:
	        case MParser.SLASH:
	        case MParser.BSLASH:
	        case MParser.PERCENT:
	        case MParser.SHARP:
	        case MParser.GTE:
	        case MParser.LTE:
	        case MParser.LTGT:
	        case MParser.LTCOLONGT:
	        case MParser.EQ:
	        case MParser.XEQ:
	        case MParser.EQ2:
	        case MParser.TEQ:
	        case MParser.TILDE:
	        case MParser.LARROW:
	        case MParser.RARROW:
	        case MParser.EGT:
	        case MParser.BOOLEAN:
	        case MParser.CSS:
	        case MParser.CHARACTER:
	        case MParser.TEXT:
	        case MParser.INTEGER:
	        case MParser.DECIMAL:
	        case MParser.DATE:
	        case MParser.TIME:
	        case MParser.DATETIME:
	        case MParser.PERIOD:
	        case MParser.VERSION:
	        case MParser.METHOD_COLON:
	        case MParser.CODE:
	        case MParser.DOCUMENT:
	        case MParser.BLOB:
	        case MParser.IMAGE:
	        case MParser.UUID:
	        case MParser.DBID:
	        case MParser.ITERATOR:
	        case MParser.CURSOR:
	        case MParser.HTML:
	        case MParser.TYPE:
	        case MParser.ABSTRACT:
	        case MParser.ALL:
	        case MParser.ALWAYS:
	        case MParser.AND:
	        case MParser.ANY:
	        case MParser.AS:
	        case MParser.ASC:
	        case MParser.ATTR:
	        case MParser.ATTRIBUTE:
	        case MParser.ATTRIBUTES:
	        case MParser.BINDINGS:
	        case MParser.BREAK:
	        case MParser.BY:
	        case MParser.CASE:
	        case MParser.CATCH:
	        case MParser.CATEGORY:
	        case MParser.CLASS:
	        case MParser.CONTAINS:
	        case MParser.DEF:
	        case MParser.DEFAULT:
	        case MParser.DEFINE:
	        case MParser.DELETE:
	        case MParser.DESC:
	        case MParser.DO:
	        case MParser.DOING:
	        case MParser.EACH:
	        case MParser.ELSE:
	        case MParser.ENUM:
	        case MParser.ENUMERATED:
	        case MParser.EXCEPT:
	        case MParser.EXECUTE:
	        case MParser.EXPECTING:
	        case MParser.EXTENDS:
	        case MParser.FETCH:
	        case MParser.FILTERED:
	        case MParser.FINALLY:
	        case MParser.FLUSH:
	        case MParser.FOR:
	        case MParser.FROM:
	        case MParser.GETTER:
	        case MParser.HAS:
	        case MParser.IF:
	        case MParser.IN:
	        case MParser.INCLUDE:
	        case MParser.INDEX:
	        case MParser.INVOKE_COLON:
	        case MParser.IS:
	        case MParser.MATCHING:
	        case MParser.METHOD:
	        case MParser.METHODS:
	        case MParser.MODULO:
	        case MParser.MUTABLE:
	        case MParser.NATIVE:
	        case MParser.NONE:
	        case MParser.NOT:
	        case MParser.NOTHING:
	        case MParser.NULL:
	        case MParser.ON:
	        case MParser.ONE:
	        case MParser.OPERATOR:
	        case MParser.OR:
	        case MParser.ORDER:
	        case MParser.OTHERWISE:
	        case MParser.PASS:
	        case MParser.RAISE:
	        case MParser.READ:
	        case MParser.RECEIVING:
	        case MParser.RESOURCE:
	        case MParser.RETURN:
	        case MParser.RETURNING:
	        case MParser.ROWS:
	        case MParser.SELF:
	        case MParser.SETTER:
	        case MParser.SINGLETON:
	        case MParser.SORTED:
	        case MParser.STORABLE:
	        case MParser.STORE:
	        case MParser.SUPER:
	        case MParser.SWITCH:
	        case MParser.TEST:
	        case MParser.THEN:
	        case MParser.THIS:
	        case MParser.THROW:
	        case MParser.TO:
	        case MParser.TRY:
	        case MParser.VERIFYING:
	        case MParser.WIDGET:
	        case MParser.WITH:
	        case MParser.WHEN:
	        case MParser.WHERE:
	        case MParser.WHILE:
	        case MParser.WRITE:
	        case MParser.BOOLEAN_LITERAL:
	        case MParser.CHAR_LITERAL:
	        case MParser.MIN_INTEGER:
	        case MParser.MAX_INTEGER:
	        case MParser.SYMBOL_IDENTIFIER:
	        case MParser.TYPE_IDENTIFIER:
	        case MParser.VARIABLE_IDENTIFIER:
	        case MParser.NATIVE_IDENTIFIER:
	        case MParser.DOLLAR_IDENTIFIER:
	        case MParser.ARONDBASE_IDENTIFIER:
	        case MParser.TEXT_LITERAL:
	        case MParser.UUID_LITERAL:
	        case MParser.VERSION_LITERAL:
	        case MParser.INTEGER_LITERAL:
	        case MParser.HEXA_LITERAL:
	        case MParser.DECIMAL_LITERAL:
	        case MParser.DATETIME_LITERAL:
	        case MParser.TIME_LITERAL:
	        case MParser.DATE_LITERAL:
	        case MParser.PERIOD_LITERAL:
	        case MParser.JSX_TEXT:
	            localctx = new JsxTextContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2842;
	            localctx.text = this.jsx_text();
	            break;
	        case MParser.LT:
	            localctx = new JsxChildContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2843;
	            localctx.jsx = this.jsx_element();
	            break;
	        case MParser.LCURL:
	            localctx = new JsxCodeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2844;
	            this.match(MParser.LCURL);
	            this.state = 2846;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 21)) & ~0x1f) == 0 && ((1 << (_la - 21)) & ((1 << (MParser.LPAR - 21)) | (1 << (MParser.LBRAK - 21)) | (1 << (MParser.LCURL - 21)) | (1 << (MParser.MINUS - 21)) | (1 << (MParser.LT - 21)) | (1 << (MParser.LTGT - 21)) | (1 << (MParser.LTCOLONGT - 21)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (MParser.BOOLEAN - 54)) | (1 << (MParser.CSS - 54)) | (1 << (MParser.CHARACTER - 54)) | (1 << (MParser.TEXT - 54)) | (1 << (MParser.INTEGER - 54)) | (1 << (MParser.DECIMAL - 54)) | (1 << (MParser.DATE - 54)) | (1 << (MParser.TIME - 54)) | (1 << (MParser.DATETIME - 54)) | (1 << (MParser.PERIOD - 54)) | (1 << (MParser.VERSION - 54)) | (1 << (MParser.CODE - 54)) | (1 << (MParser.DOCUMENT - 54)) | (1 << (MParser.BLOB - 54)) | (1 << (MParser.IMAGE - 54)) | (1 << (MParser.UUID - 54)) | (1 << (MParser.DBID - 54)) | (1 << (MParser.ITERATOR - 54)) | (1 << (MParser.CURSOR - 54)) | (1 << (MParser.HTML - 54)) | (1 << (MParser.TYPE - 54)) | (1 << (MParser.ANY - 54)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (MParser.CATEGORY - 91)) | (1 << (MParser.EXECUTE - 91)) | (1 << (MParser.FETCH - 91)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (MParser.MUTABLE - 127)) | (1 << (MParser.NONE - 127)) | (1 << (MParser.NOT - 127)) | (1 << (MParser.READ - 127)) | (1 << (MParser.RESOURCE - 127)) | (1 << (MParser.SELF - 127)) | (1 << (MParser.SORTED - 127)) | (1 << (MParser.SUPER - 127)) | (1 << (MParser.THIS - 127)))) !== 0) || ((((_la - 168)) & ~0x1f) == 0 && ((1 << (_la - 168)) & ((1 << (MParser.BOOLEAN_LITERAL - 168)) | (1 << (MParser.CHAR_LITERAL - 168)) | (1 << (MParser.MIN_INTEGER - 168)) | (1 << (MParser.MAX_INTEGER - 168)) | (1 << (MParser.SYMBOL_IDENTIFIER - 168)) | (1 << (MParser.TYPE_IDENTIFIER - 168)) | (1 << (MParser.VARIABLE_IDENTIFIER - 168)) | (1 << (MParser.TEXT_LITERAL - 168)) | (1 << (MParser.UUID_LITERAL - 168)) | (1 << (MParser.VERSION_LITERAL - 168)) | (1 << (MParser.INTEGER_LITERAL - 168)) | (1 << (MParser.HEXA_LITERAL - 168)) | (1 << (MParser.DECIMAL_LITERAL - 168)) | (1 << (MParser.DATETIME_LITERAL - 168)) | (1 << (MParser.TIME_LITERAL - 168)) | (1 << (MParser.DATE_LITERAL - 168)) | (1 << (MParser.PERIOD_LITERAL - 168)))) !== 0)) {
	                this.state = 2845;
	                localctx.exp = this.expression(0);
	            }

	            this.state = 2848;
	            this.match(MParser.RCURL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_text() {
	    let localctx = new Jsx_textContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, MParser.RULE_jsx_text);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2852; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2851;
	        		this.jsx_char();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2854; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,265, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_char() {
	    let localctx = new Jsx_charContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, MParser.RULE_jsx_char);
	    var _la = 0; // Token type
	    try {
	        this.state = 2858;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2856;
	            _la = this._input.LA(1);
	            if(_la<=0 || ((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (MParser.LCURL - 25)) | (1 << (MParser.RCURL - 25)) | (1 << (MParser.GT - 25)) | (1 << (MParser.LT - 25)))) !== 0)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2857;
	            this.match(MParser.JSX_TEXT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	css_expression() {
	    let localctx = new Css_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, MParser.RULE_css_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2860;
	        this.match(MParser.LCURL);
	        this.state = 2862; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2861;
	            localctx.field = this.css_field();
	            this.state = 2864; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (MParser.JAVA - 10)) | (1 << (MParser.CSHARP - 10)) | (1 << (MParser.PYTHON2 - 10)) | (1 << (MParser.PYTHON3 - 10)) | (1 << (MParser.JAVASCRIPT - 10)) | (1 << (MParser.SWIFT - 10)) | (1 << (MParser.MINUS - 10)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (MParser.BOOLEAN - 54)) | (1 << (MParser.CHARACTER - 54)) | (1 << (MParser.TEXT - 54)) | (1 << (MParser.INTEGER - 54)) | (1 << (MParser.DECIMAL - 54)) | (1 << (MParser.DATE - 54)) | (1 << (MParser.TIME - 54)) | (1 << (MParser.DATETIME - 54)) | (1 << (MParser.PERIOD - 54)) | (1 << (MParser.VERSION - 54)) | (1 << (MParser.CODE - 54)) | (1 << (MParser.DOCUMENT - 54)) | (1 << (MParser.BLOB - 54)) | (1 << (MParser.IMAGE - 54)) | (1 << (MParser.UUID - 54)) | (1 << (MParser.DBID - 54)) | (1 << (MParser.ITERATOR - 54)) | (1 << (MParser.CURSOR - 54)) | (1 << (MParser.HTML - 54)) | (1 << (MParser.ABSTRACT - 54)) | (1 << (MParser.ALL - 54)) | (1 << (MParser.ALWAYS - 54)) | (1 << (MParser.AND - 54)) | (1 << (MParser.ANY - 54)) | (1 << (MParser.AS - 54)) | (1 << (MParser.ASC - 54)) | (1 << (MParser.ATTR - 54)) | (1 << (MParser.ATTRIBUTE - 54)) | (1 << (MParser.ATTRIBUTES - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (MParser.BINDINGS - 86)) | (1 << (MParser.BREAK - 86)) | (1 << (MParser.BY - 86)) | (1 << (MParser.CASE - 86)) | (1 << (MParser.CATCH - 86)) | (1 << (MParser.CATEGORY - 86)) | (1 << (MParser.CLASS - 86)) | (1 << (MParser.CONTAINS - 86)) | (1 << (MParser.DEF - 86)) | (1 << (MParser.DEFAULT - 86)) | (1 << (MParser.DEFINE - 86)) | (1 << (MParser.DELETE - 86)) | (1 << (MParser.DESC - 86)) | (1 << (MParser.DO - 86)) | (1 << (MParser.DOING - 86)) | (1 << (MParser.EACH - 86)) | (1 << (MParser.ELSE - 86)) | (1 << (MParser.ENUM - 86)) | (1 << (MParser.ENUMERATED - 86)) | (1 << (MParser.EXCEPT - 86)) | (1 << (MParser.EXECUTE - 86)) | (1 << (MParser.EXPECTING - 86)) | (1 << (MParser.EXTENDS - 86)) | (1 << (MParser.FETCH - 86)) | (1 << (MParser.FILTERED - 86)) | (1 << (MParser.FINALLY - 86)) | (1 << (MParser.FLUSH - 86)) | (1 << (MParser.FOR - 86)) | (1 << (MParser.FROM - 86)) | (1 << (MParser.GETTER - 86)) | (1 << (MParser.HAS - 86)) | (1 << (MParser.IF - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (MParser.IN - 118)) | (1 << (MParser.INDEX - 118)) | (1 << (MParser.IS - 118)) | (1 << (MParser.MATCHING - 118)) | (1 << (MParser.METHOD - 118)) | (1 << (MParser.METHODS - 118)) | (1 << (MParser.MODULO - 118)) | (1 << (MParser.MUTABLE - 118)) | (1 << (MParser.NATIVE - 118)) | (1 << (MParser.NONE - 118)) | (1 << (MParser.NOT - 118)) | (1 << (MParser.NOTHING - 118)) | (1 << (MParser.NULL - 118)) | (1 << (MParser.ON - 118)) | (1 << (MParser.ONE - 118)) | (1 << (MParser.OPERATOR - 118)) | (1 << (MParser.OR - 118)) | (1 << (MParser.ORDER - 118)) | (1 << (MParser.OTHERWISE - 118)) | (1 << (MParser.PASS - 118)) | (1 << (MParser.RAISE - 118)) | (1 << (MParser.READ - 118)) | (1 << (MParser.RECEIVING - 118)) | (1 << (MParser.RESOURCE - 118)) | (1 << (MParser.RETURN - 118)) | (1 << (MParser.RETURNING - 118)) | (1 << (MParser.ROWS - 118)) | (1 << (MParser.SELF - 118)) | (1 << (MParser.SETTER - 118)) | (1 << (MParser.SINGLETON - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (MParser.SORTED - 150)) | (1 << (MParser.STORABLE - 150)) | (1 << (MParser.STORE - 150)) | (1 << (MParser.SUPER - 150)) | (1 << (MParser.SWITCH - 150)) | (1 << (MParser.TEST - 150)) | (1 << (MParser.THIS - 150)) | (1 << (MParser.THROW - 150)) | (1 << (MParser.TO - 150)) | (1 << (MParser.TRY - 150)) | (1 << (MParser.VERIFYING - 150)) | (1 << (MParser.WIDGET - 150)) | (1 << (MParser.WITH - 150)) | (1 << (MParser.WHEN - 150)) | (1 << (MParser.WHERE - 150)) | (1 << (MParser.WHILE - 150)) | (1 << (MParser.WRITE - 150)) | (1 << (MParser.SYMBOL_IDENTIFIER - 150)) | (1 << (MParser.TYPE_IDENTIFIER - 150)) | (1 << (MParser.VARIABLE_IDENTIFIER - 150)))) !== 0));
	        this.state = 2866;
	        this.match(MParser.RCURL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	css_field() {
	    let localctx = new Css_fieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, MParser.RULE_css_field);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2868;
	        localctx.name = this.css_identifier(0);
	        this.state = 2869;
	        this.match(MParser.COLON);
	        this.state = 2871; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2870;
	            localctx.values = this.css_value();
	            this.state = 2873; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MParser.INDENT) | (1 << MParser.DEDENT) | (1 << MParser.LF_TAB) | (1 << MParser.LF_MORE) | (1 << MParser.LF) | (1 << MParser.TAB) | (1 << MParser.WS) | (1 << MParser.CSS_DATA) | (1 << MParser.COMMENT) | (1 << MParser.JAVA) | (1 << MParser.CSHARP) | (1 << MParser.PYTHON2) | (1 << MParser.PYTHON3) | (1 << MParser.JAVASCRIPT) | (1 << MParser.SWIFT) | (1 << MParser.COLON) | (1 << MParser.COMMA) | (1 << MParser.RANGE) | (1 << MParser.DOT) | (1 << MParser.LPAR) | (1 << MParser.RPAR) | (1 << MParser.LBRAK) | (1 << MParser.RBRAK) | (1 << MParser.LCURL) | (1 << MParser.QMARK) | (1 << MParser.XMARK) | (1 << MParser.AMP) | (1 << MParser.AMP2) | (1 << MParser.PIPE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MParser.PIPE2 - 32)) | (1 << (MParser.PLUS - 32)) | (1 << (MParser.MINUS - 32)) | (1 << (MParser.STAR - 32)) | (1 << (MParser.SLASH - 32)) | (1 << (MParser.BSLASH - 32)) | (1 << (MParser.PERCENT - 32)) | (1 << (MParser.SHARP - 32)) | (1 << (MParser.GT - 32)) | (1 << (MParser.GTE - 32)) | (1 << (MParser.LT - 32)) | (1 << (MParser.LTE - 32)) | (1 << (MParser.LTGT - 32)) | (1 << (MParser.LTCOLONGT - 32)) | (1 << (MParser.EQ - 32)) | (1 << (MParser.XEQ - 32)) | (1 << (MParser.EQ2 - 32)) | (1 << (MParser.TEQ - 32)) | (1 << (MParser.TILDE - 32)) | (1 << (MParser.LARROW - 32)) | (1 << (MParser.RARROW - 32)) | (1 << (MParser.EGT - 32)) | (1 << (MParser.BOOLEAN - 32)) | (1 << (MParser.CSS - 32)) | (1 << (MParser.CHARACTER - 32)) | (1 << (MParser.TEXT - 32)) | (1 << (MParser.INTEGER - 32)) | (1 << (MParser.DECIMAL - 32)) | (1 << (MParser.DATE - 32)) | (1 << (MParser.TIME - 32)) | (1 << (MParser.DATETIME - 32)) | (1 << (MParser.PERIOD - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (MParser.VERSION - 64)) | (1 << (MParser.METHOD_COLON - 64)) | (1 << (MParser.CODE - 64)) | (1 << (MParser.DOCUMENT - 64)) | (1 << (MParser.BLOB - 64)) | (1 << (MParser.IMAGE - 64)) | (1 << (MParser.UUID - 64)) | (1 << (MParser.DBID - 64)) | (1 << (MParser.ITERATOR - 64)) | (1 << (MParser.CURSOR - 64)) | (1 << (MParser.HTML - 64)) | (1 << (MParser.TYPE - 64)) | (1 << (MParser.ABSTRACT - 64)) | (1 << (MParser.ALL - 64)) | (1 << (MParser.ALWAYS - 64)) | (1 << (MParser.AND - 64)) | (1 << (MParser.ANY - 64)) | (1 << (MParser.AS - 64)) | (1 << (MParser.ASC - 64)) | (1 << (MParser.ATTR - 64)) | (1 << (MParser.ATTRIBUTE - 64)) | (1 << (MParser.ATTRIBUTES - 64)) | (1 << (MParser.BINDINGS - 64)) | (1 << (MParser.BREAK - 64)) | (1 << (MParser.BY - 64)) | (1 << (MParser.CASE - 64)) | (1 << (MParser.CATCH - 64)) | (1 << (MParser.CATEGORY - 64)) | (1 << (MParser.CLASS - 64)) | (1 << (MParser.CONTAINS - 64)) | (1 << (MParser.DEF - 64)) | (1 << (MParser.DEFAULT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (MParser.DEFINE - 96)) | (1 << (MParser.DELETE - 96)) | (1 << (MParser.DESC - 96)) | (1 << (MParser.DO - 96)) | (1 << (MParser.DOING - 96)) | (1 << (MParser.EACH - 96)) | (1 << (MParser.ELSE - 96)) | (1 << (MParser.ENUM - 96)) | (1 << (MParser.ENUMERATED - 96)) | (1 << (MParser.EXCEPT - 96)) | (1 << (MParser.EXECUTE - 96)) | (1 << (MParser.EXPECTING - 96)) | (1 << (MParser.EXTENDS - 96)) | (1 << (MParser.FETCH - 96)) | (1 << (MParser.FILTERED - 96)) | (1 << (MParser.FINALLY - 96)) | (1 << (MParser.FLUSH - 96)) | (1 << (MParser.FOR - 96)) | (1 << (MParser.FROM - 96)) | (1 << (MParser.GETTER - 96)) | (1 << (MParser.HAS - 96)) | (1 << (MParser.IF - 96)) | (1 << (MParser.IN - 96)) | (1 << (MParser.INCLUDE - 96)) | (1 << (MParser.INDEX - 96)) | (1 << (MParser.INVOKE_COLON - 96)) | (1 << (MParser.IS - 96)) | (1 << (MParser.MATCHING - 96)) | (1 << (MParser.METHOD - 96)) | (1 << (MParser.METHODS - 96)) | (1 << (MParser.MODULO - 96)) | (1 << (MParser.MUTABLE - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (MParser.NATIVE - 128)) | (1 << (MParser.NONE - 128)) | (1 << (MParser.NOT - 128)) | (1 << (MParser.NOTHING - 128)) | (1 << (MParser.NULL - 128)) | (1 << (MParser.ON - 128)) | (1 << (MParser.ONE - 128)) | (1 << (MParser.OPERATOR - 128)) | (1 << (MParser.OR - 128)) | (1 << (MParser.ORDER - 128)) | (1 << (MParser.OTHERWISE - 128)) | (1 << (MParser.PASS - 128)) | (1 << (MParser.RAISE - 128)) | (1 << (MParser.READ - 128)) | (1 << (MParser.RECEIVING - 128)) | (1 << (MParser.RESOURCE - 128)) | (1 << (MParser.RETURN - 128)) | (1 << (MParser.RETURNING - 128)) | (1 << (MParser.ROWS - 128)) | (1 << (MParser.SELF - 128)) | (1 << (MParser.SETTER - 128)) | (1 << (MParser.SINGLETON - 128)) | (1 << (MParser.SORTED - 128)) | (1 << (MParser.STORABLE - 128)) | (1 << (MParser.STORE - 128)) | (1 << (MParser.SUPER - 128)) | (1 << (MParser.SWITCH - 128)) | (1 << (MParser.TEST - 128)) | (1 << (MParser.THEN - 128)) | (1 << (MParser.THIS - 128)) | (1 << (MParser.THROW - 128)) | (1 << (MParser.TO - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (MParser.TRY - 160)) | (1 << (MParser.VERIFYING - 160)) | (1 << (MParser.WIDGET - 160)) | (1 << (MParser.WITH - 160)) | (1 << (MParser.WHEN - 160)) | (1 << (MParser.WHERE - 160)) | (1 << (MParser.WHILE - 160)) | (1 << (MParser.WRITE - 160)) | (1 << (MParser.BOOLEAN_LITERAL - 160)) | (1 << (MParser.CHAR_LITERAL - 160)) | (1 << (MParser.MIN_INTEGER - 160)) | (1 << (MParser.MAX_INTEGER - 160)) | (1 << (MParser.SYMBOL_IDENTIFIER - 160)) | (1 << (MParser.TYPE_IDENTIFIER - 160)) | (1 << (MParser.VARIABLE_IDENTIFIER - 160)) | (1 << (MParser.NATIVE_IDENTIFIER - 160)) | (1 << (MParser.DOLLAR_IDENTIFIER - 160)) | (1 << (MParser.ARONDBASE_IDENTIFIER - 160)) | (1 << (MParser.TEXT_LITERAL - 160)) | (1 << (MParser.UUID_LITERAL - 160)) | (1 << (MParser.VERSION_LITERAL - 160)) | (1 << (MParser.INTEGER_LITERAL - 160)) | (1 << (MParser.HEXA_LITERAL - 160)) | (1 << (MParser.DECIMAL_LITERAL - 160)) | (1 << (MParser.DATETIME_LITERAL - 160)) | (1 << (MParser.TIME_LITERAL - 160)) | (1 << (MParser.DATE_LITERAL - 160)) | (1 << (MParser.PERIOD_LITERAL - 160)) | (1 << (MParser.JSX_TEXT - 160)))) !== 0));
	        this.state = 2875;
	        this.match(MParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	css_identifier(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Css_identifierContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 516;
	    this.enterRecursionRule(localctx, 516, MParser.RULE_css_identifier, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2881;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.JAVA:
	        case MParser.CSHARP:
	        case MParser.PYTHON2:
	        case MParser.PYTHON3:
	        case MParser.JAVASCRIPT:
	        case MParser.SWIFT:
	        case MParser.BOOLEAN:
	        case MParser.CHARACTER:
	        case MParser.TEXT:
	        case MParser.INTEGER:
	        case MParser.DECIMAL:
	        case MParser.DATE:
	        case MParser.TIME:
	        case MParser.DATETIME:
	        case MParser.PERIOD:
	        case MParser.VERSION:
	        case MParser.CODE:
	        case MParser.DOCUMENT:
	        case MParser.BLOB:
	        case MParser.IMAGE:
	        case MParser.UUID:
	        case MParser.DBID:
	        case MParser.ITERATOR:
	        case MParser.CURSOR:
	        case MParser.HTML:
	        case MParser.ABSTRACT:
	        case MParser.ALL:
	        case MParser.ALWAYS:
	        case MParser.AND:
	        case MParser.ANY:
	        case MParser.AS:
	        case MParser.ASC:
	        case MParser.ATTR:
	        case MParser.ATTRIBUTE:
	        case MParser.ATTRIBUTES:
	        case MParser.BINDINGS:
	        case MParser.BREAK:
	        case MParser.BY:
	        case MParser.CASE:
	        case MParser.CATCH:
	        case MParser.CATEGORY:
	        case MParser.CLASS:
	        case MParser.CONTAINS:
	        case MParser.DEF:
	        case MParser.DEFAULT:
	        case MParser.DEFINE:
	        case MParser.DELETE:
	        case MParser.DESC:
	        case MParser.DO:
	        case MParser.DOING:
	        case MParser.EACH:
	        case MParser.ELSE:
	        case MParser.ENUM:
	        case MParser.ENUMERATED:
	        case MParser.EXCEPT:
	        case MParser.EXECUTE:
	        case MParser.EXPECTING:
	        case MParser.EXTENDS:
	        case MParser.FETCH:
	        case MParser.FILTERED:
	        case MParser.FINALLY:
	        case MParser.FLUSH:
	        case MParser.FOR:
	        case MParser.FROM:
	        case MParser.GETTER:
	        case MParser.HAS:
	        case MParser.IF:
	        case MParser.IN:
	        case MParser.INDEX:
	        case MParser.IS:
	        case MParser.MATCHING:
	        case MParser.METHOD:
	        case MParser.METHODS:
	        case MParser.MODULO:
	        case MParser.MUTABLE:
	        case MParser.NATIVE:
	        case MParser.NONE:
	        case MParser.NOT:
	        case MParser.NOTHING:
	        case MParser.NULL:
	        case MParser.ON:
	        case MParser.ONE:
	        case MParser.OPERATOR:
	        case MParser.OR:
	        case MParser.ORDER:
	        case MParser.OTHERWISE:
	        case MParser.PASS:
	        case MParser.RAISE:
	        case MParser.READ:
	        case MParser.RECEIVING:
	        case MParser.RESOURCE:
	        case MParser.RETURN:
	        case MParser.RETURNING:
	        case MParser.ROWS:
	        case MParser.SELF:
	        case MParser.SETTER:
	        case MParser.SINGLETON:
	        case MParser.SORTED:
	        case MParser.STORABLE:
	        case MParser.STORE:
	        case MParser.SUPER:
	        case MParser.SWITCH:
	        case MParser.TEST:
	        case MParser.THIS:
	        case MParser.THROW:
	        case MParser.TO:
	        case MParser.TRY:
	        case MParser.VERIFYING:
	        case MParser.WIDGET:
	        case MParser.WITH:
	        case MParser.WHEN:
	        case MParser.WHERE:
	        case MParser.WHILE:
	        case MParser.WRITE:
	        case MParser.SYMBOL_IDENTIFIER:
	        case MParser.TYPE_IDENTIFIER:
	        case MParser.VARIABLE_IDENTIFIER:
	            this.state = 2878;
	            this.identifier_or_keyword();
	            break;
	        case MParser.MINUS:
	            this.state = 2879;
	            this.match(MParser.MINUS);
	            this.state = 2880;
	            this.nospace_identifier_or_keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2891;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,271,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Css_identifierContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_css_identifier);
	                this.state = 2883;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2885; 
	                this._errHandler.sync(this);
	                var _alt = 1;
	                do {
	                	switch (_alt) {
	                	case 1:
	                		this.state = 2884;
	                		this.nospace_hyphen_identifier_or_keyword();
	                		break;
	                	default:
	                		throw new antlr4.error.NoViableAltException(this);
	                	}
	                	this.state = 2887; 
	                	this._errHandler.sync(this);
	                	_alt = this._interp.adaptivePredict(this._input,270, this._ctx);
	                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER ); 
	            }
	            this.state = 2893;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,271,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	css_value() {
	    let localctx = new Css_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, MParser.RULE_css_value);
	    try {
	        this.state = 2899;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case MParser.LCURL:
	            localctx = new CssValueContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2894;
	            this.match(MParser.LCURL);
	            this.state = 2895;
	            localctx.exp = this.expression(0);
	            this.state = 2896;
	            this.match(MParser.RCURL);
	            break;
	        case MParser.INDENT:
	        case MParser.DEDENT:
	        case MParser.LF_TAB:
	        case MParser.LF_MORE:
	        case MParser.LF:
	        case MParser.TAB:
	        case MParser.WS:
	        case MParser.CSS_DATA:
	        case MParser.COMMENT:
	        case MParser.JAVA:
	        case MParser.CSHARP:
	        case MParser.PYTHON2:
	        case MParser.PYTHON3:
	        case MParser.JAVASCRIPT:
	        case MParser.SWIFT:
	        case MParser.COLON:
	        case MParser.COMMA:
	        case MParser.RANGE:
	        case MParser.DOT:
	        case MParser.LPAR:
	        case MParser.RPAR:
	        case MParser.LBRAK:
	        case MParser.RBRAK:
	        case MParser.QMARK:
	        case MParser.XMARK:
	        case MParser.AMP:
	        case MParser.AMP2:
	        case MParser.PIPE:
	        case MParser.PIPE2:
	        case MParser.PLUS:
	        case MParser.MINUS:
	        case MParser.STAR:
	        case MParser.SLASH:
	        case MParser.BSLASH:
	        case MParser.PERCENT:
	        case MParser.SHARP:
	        case MParser.GT:
	        case MParser.GTE:
	        case MParser.LT:
	        case MParser.LTE:
	        case MParser.LTGT:
	        case MParser.LTCOLONGT:
	        case MParser.EQ:
	        case MParser.XEQ:
	        case MParser.EQ2:
	        case MParser.TEQ:
	        case MParser.TILDE:
	        case MParser.LARROW:
	        case MParser.RARROW:
	        case MParser.EGT:
	        case MParser.BOOLEAN:
	        case MParser.CSS:
	        case MParser.CHARACTER:
	        case MParser.TEXT:
	        case MParser.INTEGER:
	        case MParser.DECIMAL:
	        case MParser.DATE:
	        case MParser.TIME:
	        case MParser.DATETIME:
	        case MParser.PERIOD:
	        case MParser.VERSION:
	        case MParser.METHOD_COLON:
	        case MParser.CODE:
	        case MParser.DOCUMENT:
	        case MParser.BLOB:
	        case MParser.IMAGE:
	        case MParser.UUID:
	        case MParser.DBID:
	        case MParser.ITERATOR:
	        case MParser.CURSOR:
	        case MParser.HTML:
	        case MParser.TYPE:
	        case MParser.ABSTRACT:
	        case MParser.ALL:
	        case MParser.ALWAYS:
	        case MParser.AND:
	        case MParser.ANY:
	        case MParser.AS:
	        case MParser.ASC:
	        case MParser.ATTR:
	        case MParser.ATTRIBUTE:
	        case MParser.ATTRIBUTES:
	        case MParser.BINDINGS:
	        case MParser.BREAK:
	        case MParser.BY:
	        case MParser.CASE:
	        case MParser.CATCH:
	        case MParser.CATEGORY:
	        case MParser.CLASS:
	        case MParser.CONTAINS:
	        case MParser.DEF:
	        case MParser.DEFAULT:
	        case MParser.DEFINE:
	        case MParser.DELETE:
	        case MParser.DESC:
	        case MParser.DO:
	        case MParser.DOING:
	        case MParser.EACH:
	        case MParser.ELSE:
	        case MParser.ENUM:
	        case MParser.ENUMERATED:
	        case MParser.EXCEPT:
	        case MParser.EXECUTE:
	        case MParser.EXPECTING:
	        case MParser.EXTENDS:
	        case MParser.FETCH:
	        case MParser.FILTERED:
	        case MParser.FINALLY:
	        case MParser.FLUSH:
	        case MParser.FOR:
	        case MParser.FROM:
	        case MParser.GETTER:
	        case MParser.HAS:
	        case MParser.IF:
	        case MParser.IN:
	        case MParser.INCLUDE:
	        case MParser.INDEX:
	        case MParser.INVOKE_COLON:
	        case MParser.IS:
	        case MParser.MATCHING:
	        case MParser.METHOD:
	        case MParser.METHODS:
	        case MParser.MODULO:
	        case MParser.MUTABLE:
	        case MParser.NATIVE:
	        case MParser.NONE:
	        case MParser.NOT:
	        case MParser.NOTHING:
	        case MParser.NULL:
	        case MParser.ON:
	        case MParser.ONE:
	        case MParser.OPERATOR:
	        case MParser.OR:
	        case MParser.ORDER:
	        case MParser.OTHERWISE:
	        case MParser.PASS:
	        case MParser.RAISE:
	        case MParser.READ:
	        case MParser.RECEIVING:
	        case MParser.RESOURCE:
	        case MParser.RETURN:
	        case MParser.RETURNING:
	        case MParser.ROWS:
	        case MParser.SELF:
	        case MParser.SETTER:
	        case MParser.SINGLETON:
	        case MParser.SORTED:
	        case MParser.STORABLE:
	        case MParser.STORE:
	        case MParser.SUPER:
	        case MParser.SWITCH:
	        case MParser.TEST:
	        case MParser.THEN:
	        case MParser.THIS:
	        case MParser.THROW:
	        case MParser.TO:
	        case MParser.TRY:
	        case MParser.VERIFYING:
	        case MParser.WIDGET:
	        case MParser.WITH:
	        case MParser.WHEN:
	        case MParser.WHERE:
	        case MParser.WHILE:
	        case MParser.WRITE:
	        case MParser.BOOLEAN_LITERAL:
	        case MParser.CHAR_LITERAL:
	        case MParser.MIN_INTEGER:
	        case MParser.MAX_INTEGER:
	        case MParser.SYMBOL_IDENTIFIER:
	        case MParser.TYPE_IDENTIFIER:
	        case MParser.VARIABLE_IDENTIFIER:
	        case MParser.NATIVE_IDENTIFIER:
	        case MParser.DOLLAR_IDENTIFIER:
	        case MParser.ARONDBASE_IDENTIFIER:
	        case MParser.TEXT_LITERAL:
	        case MParser.UUID_LITERAL:
	        case MParser.VERSION_LITERAL:
	        case MParser.INTEGER_LITERAL:
	        case MParser.HEXA_LITERAL:
	        case MParser.DECIMAL_LITERAL:
	        case MParser.DATETIME_LITERAL:
	        case MParser.TIME_LITERAL:
	        case MParser.DATE_LITERAL:
	        case MParser.PERIOD_LITERAL:
	        case MParser.JSX_TEXT:
	            localctx = new CssTextContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2898;
	            localctx.text = this.css_text();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	css_text() {
	    let localctx = new Css_textContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, MParser.RULE_css_text);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2902; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2901;
	        		_la = this._input.LA(1);
	        		if(_la<=0 || (((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MParser.SEMI) | (1 << MParser.LCURL) | (1 << MParser.RCURL))) !== 0)) {
	        		this._errHandler.recoverInline(this);
	        		}
	        		else {
	        			this._errHandler.reportMatch(this);
	        		    this.consume();
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2904; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,273, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

MParser.EOF = antlr4.Token.EOF;
MParser.INDENT = 1;
MParser.DEDENT = 2;
MParser.LF_TAB = 3;
MParser.LF_MORE = 4;
MParser.LF = 5;
MParser.TAB = 6;
MParser.WS = 7;
MParser.CSS_DATA = 8;
MParser.COMMENT = 9;
MParser.JAVA = 10;
MParser.CSHARP = 11;
MParser.PYTHON2 = 12;
MParser.PYTHON3 = 13;
MParser.JAVASCRIPT = 14;
MParser.SWIFT = 15;
MParser.COLON = 16;
MParser.SEMI = 17;
MParser.COMMA = 18;
MParser.RANGE = 19;
MParser.DOT = 20;
MParser.LPAR = 21;
MParser.RPAR = 22;
MParser.LBRAK = 23;
MParser.RBRAK = 24;
MParser.LCURL = 25;
MParser.RCURL = 26;
MParser.QMARK = 27;
MParser.XMARK = 28;
MParser.AMP = 29;
MParser.AMP2 = 30;
MParser.PIPE = 31;
MParser.PIPE2 = 32;
MParser.PLUS = 33;
MParser.MINUS = 34;
MParser.STAR = 35;
MParser.SLASH = 36;
MParser.BSLASH = 37;
MParser.PERCENT = 38;
MParser.SHARP = 39;
MParser.GT = 40;
MParser.GTE = 41;
MParser.LT = 42;
MParser.LTE = 43;
MParser.LTGT = 44;
MParser.LTCOLONGT = 45;
MParser.EQ = 46;
MParser.XEQ = 47;
MParser.EQ2 = 48;
MParser.TEQ = 49;
MParser.TILDE = 50;
MParser.LARROW = 51;
MParser.RARROW = 52;
MParser.EGT = 53;
MParser.BOOLEAN = 54;
MParser.CSS = 55;
MParser.CHARACTER = 56;
MParser.TEXT = 57;
MParser.INTEGER = 58;
MParser.DECIMAL = 59;
MParser.DATE = 60;
MParser.TIME = 61;
MParser.DATETIME = 62;
MParser.PERIOD = 63;
MParser.VERSION = 64;
MParser.METHOD_COLON = 65;
MParser.CODE = 66;
MParser.DOCUMENT = 67;
MParser.BLOB = 68;
MParser.IMAGE = 69;
MParser.UUID = 70;
MParser.DBID = 71;
MParser.ITERATOR = 72;
MParser.CURSOR = 73;
MParser.HTML = 74;
MParser.TYPE = 75;
MParser.ABSTRACT = 76;
MParser.ALL = 77;
MParser.ALWAYS = 78;
MParser.AND = 79;
MParser.ANY = 80;
MParser.AS = 81;
MParser.ASC = 82;
MParser.ATTR = 83;
MParser.ATTRIBUTE = 84;
MParser.ATTRIBUTES = 85;
MParser.BINDINGS = 86;
MParser.BREAK = 87;
MParser.BY = 88;
MParser.CASE = 89;
MParser.CATCH = 90;
MParser.CATEGORY = 91;
MParser.CLASS = 92;
MParser.CONTAINS = 93;
MParser.DEF = 94;
MParser.DEFAULT = 95;
MParser.DEFINE = 96;
MParser.DELETE = 97;
MParser.DESC = 98;
MParser.DO = 99;
MParser.DOING = 100;
MParser.EACH = 101;
MParser.ELSE = 102;
MParser.ENUM = 103;
MParser.ENUMERATED = 104;
MParser.EXCEPT = 105;
MParser.EXECUTE = 106;
MParser.EXPECTING = 107;
MParser.EXTENDS = 108;
MParser.FETCH = 109;
MParser.FILTERED = 110;
MParser.FINALLY = 111;
MParser.FLUSH = 112;
MParser.FOR = 113;
MParser.FROM = 114;
MParser.GETTER = 115;
MParser.HAS = 116;
MParser.IF = 117;
MParser.IN = 118;
MParser.INCLUDE = 119;
MParser.INDEX = 120;
MParser.INVOKE_COLON = 121;
MParser.IS = 122;
MParser.MATCHING = 123;
MParser.METHOD = 124;
MParser.METHODS = 125;
MParser.MODULO = 126;
MParser.MUTABLE = 127;
MParser.NATIVE = 128;
MParser.NONE = 129;
MParser.NOT = 130;
MParser.NOTHING = 131;
MParser.NULL = 132;
MParser.ON = 133;
MParser.ONE = 134;
MParser.OPERATOR = 135;
MParser.OR = 136;
MParser.ORDER = 137;
MParser.OTHERWISE = 138;
MParser.PASS = 139;
MParser.RAISE = 140;
MParser.READ = 141;
MParser.RECEIVING = 142;
MParser.RESOURCE = 143;
MParser.RETURN = 144;
MParser.RETURNING = 145;
MParser.ROWS = 146;
MParser.SELF = 147;
MParser.SETTER = 148;
MParser.SINGLETON = 149;
MParser.SORTED = 150;
MParser.STORABLE = 151;
MParser.STORE = 152;
MParser.SUPER = 153;
MParser.SWITCH = 154;
MParser.TEST = 155;
MParser.THEN = 156;
MParser.THIS = 157;
MParser.THROW = 158;
MParser.TO = 159;
MParser.TRY = 160;
MParser.VERIFYING = 161;
MParser.WIDGET = 162;
MParser.WITH = 163;
MParser.WHEN = 164;
MParser.WHERE = 165;
MParser.WHILE = 166;
MParser.WRITE = 167;
MParser.BOOLEAN_LITERAL = 168;
MParser.CHAR_LITERAL = 169;
MParser.MIN_INTEGER = 170;
MParser.MAX_INTEGER = 171;
MParser.SYMBOL_IDENTIFIER = 172;
MParser.TYPE_IDENTIFIER = 173;
MParser.VARIABLE_IDENTIFIER = 174;
MParser.NATIVE_IDENTIFIER = 175;
MParser.DOLLAR_IDENTIFIER = 176;
MParser.ARONDBASE_IDENTIFIER = 177;
MParser.TEXT_LITERAL = 178;
MParser.UUID_LITERAL = 179;
MParser.VERSION_LITERAL = 180;
MParser.INTEGER_LITERAL = 181;
MParser.HEXA_LITERAL = 182;
MParser.DECIMAL_LITERAL = 183;
MParser.DATETIME_LITERAL = 184;
MParser.TIME_LITERAL = 185;
MParser.DATE_LITERAL = 186;
MParser.PERIOD_LITERAL = 187;
MParser.JSX_TEXT = 188;

MParser.RULE_enum_category_declaration = 0;
MParser.RULE_enum_native_declaration = 1;
MParser.RULE_native_symbol = 2;
MParser.RULE_category_symbol = 3;
MParser.RULE_attribute_declaration = 4;
MParser.RULE_index_clause = 5;
MParser.RULE_concrete_widget_declaration = 6;
MParser.RULE_native_widget_declaration = 7;
MParser.RULE_concrete_category_declaration = 8;
MParser.RULE_singleton_category_declaration = 9;
MParser.RULE_derived_list = 10;
MParser.RULE_operator_method_declaration = 11;
MParser.RULE_setter_method_declaration = 12;
MParser.RULE_native_setter_declaration = 13;
MParser.RULE_getter_method_declaration = 14;
MParser.RULE_native_getter_declaration = 15;
MParser.RULE_native_category_declaration = 16;
MParser.RULE_native_resource_declaration = 17;
MParser.RULE_native_category_bindings = 18;
MParser.RULE_native_category_binding_list = 19;
MParser.RULE_abstract_method_declaration = 20;
MParser.RULE_concrete_method_declaration = 21;
MParser.RULE_native_method_declaration = 22;
MParser.RULE_test_method_declaration = 23;
MParser.RULE_assertion = 24;
MParser.RULE_typed_argument = 25;
MParser.RULE_statement = 26;
MParser.RULE_flush_statement = 27;
MParser.RULE_store_statement = 28;
MParser.RULE_method_call_expression = 29;
MParser.RULE_method_call_statement = 30;
MParser.RULE_with_resource_statement = 31;
MParser.RULE_with_singleton_statement = 32;
MParser.RULE_switch_statement = 33;
MParser.RULE_switch_case_statement = 34;
MParser.RULE_for_each_statement = 35;
MParser.RULE_do_while_statement = 36;
MParser.RULE_while_statement = 37;
MParser.RULE_if_statement = 38;
MParser.RULE_else_if_statement_list = 39;
MParser.RULE_raise_statement = 40;
MParser.RULE_try_statement = 41;
MParser.RULE_catch_statement = 42;
MParser.RULE_break_statement = 43;
MParser.RULE_return_statement = 44;
MParser.RULE_expression = 45;
MParser.RULE_filter_expression = 46;
MParser.RULE_type_expression = 47;
MParser.RULE_selectable_expression = 48;
MParser.RULE_instance_expression = 49;
MParser.RULE_mutable_instance_expression = 50;
MParser.RULE_method_expression = 51;
MParser.RULE_instance_selector = 52;
MParser.RULE_blob_expression = 53;
MParser.RULE_document_expression = 54;
MParser.RULE_constructor_expression = 55;
MParser.RULE_copy_from = 56;
MParser.RULE_argument_assignment_list = 57;
MParser.RULE_argument_assignment = 58;
MParser.RULE_write_statement = 59;
MParser.RULE_filtered_list_suffix = 60;
MParser.RULE_fetch_expression = 61;
MParser.RULE_fetch_statement = 62;
MParser.RULE_then = 63;
MParser.RULE_read_statement = 64;
MParser.RULE_sorted_expression = 65;
MParser.RULE_assign_instance_statement = 66;
MParser.RULE_child_instance = 67;
MParser.RULE_assign_tuple_statement = 68;
MParser.RULE_lfs = 69;
MParser.RULE_lfp = 70;
MParser.RULE_ws_plus = 71;
MParser.RULE_indent = 72;
MParser.RULE_dedent = 73;
MParser.RULE_type_literal = 74;
MParser.RULE_null_literal = 75;
MParser.RULE_comment_statement = 76;
MParser.RULE_repl = 77;
MParser.RULE_declaration_list = 78;
MParser.RULE_declarations = 79;
MParser.RULE_declaration = 80;
MParser.RULE_annotation_constructor = 81;
MParser.RULE_annotation_identifier = 82;
MParser.RULE_annotation_argument = 83;
MParser.RULE_annotation_argument_name = 84;
MParser.RULE_annotation_argument_value = 85;
MParser.RULE_resource_declaration = 86;
MParser.RULE_enum_declaration = 87;
MParser.RULE_native_symbol_list = 88;
MParser.RULE_category_symbol_list = 89;
MParser.RULE_symbol_list = 90;
MParser.RULE_attribute_constraint = 91;
MParser.RULE_list_literal = 92;
MParser.RULE_set_literal = 93;
MParser.RULE_expression_list = 94;
MParser.RULE_range_literal = 95;
MParser.RULE_typedef = 96;
MParser.RULE_primary_type = 97;
MParser.RULE_native_type = 98;
MParser.RULE_category_type = 99;
MParser.RULE_mutable_category_type = 100;
MParser.RULE_code_type = 101;
MParser.RULE_category_declaration = 102;
MParser.RULE_widget_declaration = 103;
MParser.RULE_type_identifier_list = 104;
MParser.RULE_method_identifier = 105;
MParser.RULE_identifier_or_keyword = 106;
MParser.RULE_nospace_hyphen_identifier_or_keyword = 107;
MParser.RULE_nospace_identifier_or_keyword = 108;
MParser.RULE_identifier = 109;
MParser.RULE_member_identifier = 110;
MParser.RULE_variable_identifier = 111;
MParser.RULE_attribute_identifier = 112;
MParser.RULE_type_identifier = 113;
MParser.RULE_symbol_identifier = 114;
MParser.RULE_argument_list = 115;
MParser.RULE_argument = 116;
MParser.RULE_operator_argument = 117;
MParser.RULE_named_argument = 118;
MParser.RULE_code_argument = 119;
MParser.RULE_category_or_any_type = 120;
MParser.RULE_any_type = 121;
MParser.RULE_member_method_declaration_list = 122;
MParser.RULE_member_method_declaration = 123;
MParser.RULE_native_member_method_declaration_list = 124;
MParser.RULE_native_member_method_declaration = 125;
MParser.RULE_native_category_binding = 126;
MParser.RULE_python_category_binding = 127;
MParser.RULE_python_module = 128;
MParser.RULE_javascript_category_binding = 129;
MParser.RULE_javascript_module = 130;
MParser.RULE_variable_identifier_list = 131;
MParser.RULE_attribute_identifier_list = 132;
MParser.RULE_method_declaration = 133;
MParser.RULE_native_statement_list = 134;
MParser.RULE_native_statement = 135;
MParser.RULE_python_native_statement = 136;
MParser.RULE_javascript_native_statement = 137;
MParser.RULE_statement_list = 138;
MParser.RULE_assertion_list = 139;
MParser.RULE_switch_case_statement_list = 140;
MParser.RULE_catch_statement_list = 141;
MParser.RULE_literal_collection = 142;
MParser.RULE_atomic_literal = 143;
MParser.RULE_literal_list_literal = 144;
MParser.RULE_this_expression = 145;
MParser.RULE_super_expression = 146;
MParser.RULE_parenthesis_expression = 147;
MParser.RULE_literal_expression = 148;
MParser.RULE_collection_literal = 149;
MParser.RULE_tuple_literal = 150;
MParser.RULE_dict_literal = 151;
MParser.RULE_document_literal = 152;
MParser.RULE_expression_tuple = 153;
MParser.RULE_doc_entry_list = 154;
MParser.RULE_doc_entry = 155;
MParser.RULE_doc_key = 156;
MParser.RULE_dict_entry_list = 157;
MParser.RULE_dict_entry = 158;
MParser.RULE_dict_key = 159;
MParser.RULE_slice_arguments = 160;
MParser.RULE_assign_variable_statement = 161;
MParser.RULE_assignable_instance = 162;
MParser.RULE_is_expression = 163;
MParser.RULE_metadata = 164;
MParser.RULE_arrow_expression = 165;
MParser.RULE_arrow_prefix = 166;
MParser.RULE_arrow_args = 167;
MParser.RULE_sorted_key = 168;
MParser.RULE_read_blob_expression = 169;
MParser.RULE_read_all_expression = 170;
MParser.RULE_read_one_expression = 171;
MParser.RULE_order_by_list = 172;
MParser.RULE_order_by = 173;
MParser.RULE_include_list = 174;
MParser.RULE_operator = 175;
MParser.RULE_keyword = 176;
MParser.RULE_new_token = 177;
MParser.RULE_key_token = 178;
MParser.RULE_module_token = 179;
MParser.RULE_value_token = 180;
MParser.RULE_symbols_token = 181;
MParser.RULE_assign = 182;
MParser.RULE_multiply = 183;
MParser.RULE_divide = 184;
MParser.RULE_idivide = 185;
MParser.RULE_modulo = 186;
MParser.RULE_javascript_statement = 187;
MParser.RULE_javascript_expression = 188;
MParser.RULE_javascript_primary_expression = 189;
MParser.RULE_javascript_this_expression = 190;
MParser.RULE_javascript_new_expression = 191;
MParser.RULE_javascript_selector_expression = 192;
MParser.RULE_javascript_method_expression = 193;
MParser.RULE_javascript_arguments = 194;
MParser.RULE_javascript_item_expression = 195;
MParser.RULE_javascript_parenthesis_expression = 196;
MParser.RULE_javascript_identifier_expression = 197;
MParser.RULE_javascript_literal_expression = 198;
MParser.RULE_javascript_identifier = 199;
MParser.RULE_python_statement = 200;
MParser.RULE_python_expression = 201;
MParser.RULE_python_primary_expression = 202;
MParser.RULE_python_self_expression = 203;
MParser.RULE_python_selector_expression = 204;
MParser.RULE_python_method_expression = 205;
MParser.RULE_python_argument_list = 206;
MParser.RULE_python_ordinal_argument_list = 207;
MParser.RULE_python_named_argument_list = 208;
MParser.RULE_python_parenthesis_expression = 209;
MParser.RULE_python_identifier_expression = 210;
MParser.RULE_python_literal_expression = 211;
MParser.RULE_python_identifier = 212;
MParser.RULE_java_statement = 213;
MParser.RULE_java_expression = 214;
MParser.RULE_java_primary_expression = 215;
MParser.RULE_java_this_expression = 216;
MParser.RULE_java_new_expression = 217;
MParser.RULE_java_selector_expression = 218;
MParser.RULE_java_method_expression = 219;
MParser.RULE_java_arguments = 220;
MParser.RULE_java_item_expression = 221;
MParser.RULE_java_parenthesis_expression = 222;
MParser.RULE_java_identifier_expression = 223;
MParser.RULE_java_class_identifier_expression = 224;
MParser.RULE_java_literal_expression = 225;
MParser.RULE_java_identifier = 226;
MParser.RULE_csharp_statement = 227;
MParser.RULE_csharp_expression = 228;
MParser.RULE_csharp_primary_expression = 229;
MParser.RULE_csharp_this_expression = 230;
MParser.RULE_csharp_new_expression = 231;
MParser.RULE_csharp_selector_expression = 232;
MParser.RULE_csharp_method_expression = 233;
MParser.RULE_csharp_arguments = 234;
MParser.RULE_csharp_item_expression = 235;
MParser.RULE_csharp_parenthesis_expression = 236;
MParser.RULE_csharp_identifier_expression = 237;
MParser.RULE_csharp_literal_expression = 238;
MParser.RULE_csharp_identifier = 239;
MParser.RULE_jsx_expression = 240;
MParser.RULE_jsx_element = 241;
MParser.RULE_jsx_fragment = 242;
MParser.RULE_jsx_fragment_start = 243;
MParser.RULE_jsx_fragment_end = 244;
MParser.RULE_jsx_self_closing = 245;
MParser.RULE_jsx_opening = 246;
MParser.RULE_jsx_closing = 247;
MParser.RULE_jsx_element_name = 248;
MParser.RULE_jsx_identifier = 249;
MParser.RULE_jsx_attribute = 250;
MParser.RULE_jsx_attribute_value = 251;
MParser.RULE_jsx_children = 252;
MParser.RULE_jsx_child = 253;
MParser.RULE_jsx_text = 254;
MParser.RULE_jsx_char = 255;
MParser.RULE_css_expression = 256;
MParser.RULE_css_field = 257;
MParser.RULE_css_identifier = 258;
MParser.RULE_css_value = 259;
MParser.RULE_css_text = 260;

class Enum_category_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_enum_category_declaration;
        this.name = null; // Type_identifierContext
        this.derived = null; // Type_identifierContext
        this.attrs = null; // Attribute_identifier_listContext
        this.symbols = null; // Category_symbol_listContext
    }

	ENUM() {
	    return this.getToken(MParser.ENUM, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	type_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Type_identifierContext,i);
	    }
	};

	category_symbol_list() {
	    return this.getTypedRuleContext(Category_symbol_listContext,0);
	};

	attribute_identifier_list() {
	    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
	};

	COMMA() {
	    return this.getToken(MParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterEnum_category_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitEnum_category_declaration(this);
		}
	}


}



class Enum_native_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_enum_native_declaration;
        this.name = null; // Type_identifierContext
        this.typ = null; // Native_typeContext
        this.symbols = null; // Native_symbol_listContext
    }

	ENUM() {
	    return this.getToken(MParser.ENUM, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	native_type() {
	    return this.getTypedRuleContext(Native_typeContext,0);
	};

	native_symbol_list() {
	    return this.getTypedRuleContext(Native_symbol_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterEnum_native_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitEnum_native_declaration(this);
		}
	}


}



class Native_symbolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_native_symbol;
        this.name = null; // Symbol_identifierContext
        this.exp = null; // ExpressionContext
    }

	EQ() {
	    return this.getToken(MParser.EQ, 0);
	};

	symbol_identifier() {
	    return this.getTypedRuleContext(Symbol_identifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNative_symbol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNative_symbol(this);
		}
	}


}



class Category_symbolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_category_symbol;
        this.name = null; // Symbol_identifierContext
        this.args = null; // Argument_assignment_listContext
    }

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	symbol_identifier() {
	    return this.getTypedRuleContext(Symbol_identifierContext,0);
	};

	argument_assignment_list() {
	    return this.getTypedRuleContext(Argument_assignment_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCategory_symbol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCategory_symbol(this);
		}
	}


}



class Attribute_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_attribute_declaration;
        this.name = null; // Attribute_identifierContext
        this.typ = null; // TypedefContext
        this.match = null; // Attribute_constraintContext
        this.indices = null; // Index_clauseContext
    }

	ATTR() {
	    return this.getToken(MParser.ATTR, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	attribute_identifier() {
	    return this.getTypedRuleContext(Attribute_identifierContext,0);
	};

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	STORABLE() {
	    return this.getToken(MParser.STORABLE, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	PASS() {
	    return this.getToken(MParser.PASS, 0);
	};

	attribute_constraint() {
	    return this.getTypedRuleContext(Attribute_constraintContext,0);
	};

	index_clause() {
	    return this.getTypedRuleContext(Index_clauseContext,0);
	};

	lfp() {
	    return this.getTypedRuleContext(LfpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAttribute_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAttribute_declaration(this);
		}
	}


}



class Index_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_index_clause;
        this.indices = null; // Variable_identifier_listContext
    }

	INDEX() {
	    return this.getToken(MParser.INDEX, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	variable_identifier_list() {
	    return this.getTypedRuleContext(Variable_identifier_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterIndex_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitIndex_clause(this);
		}
	}


}



class Concrete_widget_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_concrete_widget_declaration;
        this.name = null; // Type_identifierContext
        this.derived = null; // Type_identifierContext
        this.methods = null; // Member_method_declaration_listContext
    }

	WIDGET() {
	    return this.getToken(MParser.WIDGET, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	type_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Type_identifierContext,i);
	    }
	};

	PASS() {
	    return this.getToken(MParser.PASS, 0);
	};

	member_method_declaration_list() {
	    return this.getTypedRuleContext(Member_method_declaration_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterConcrete_widget_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitConcrete_widget_declaration(this);
		}
	}


}



class Native_widget_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_native_widget_declaration;
        this.name = null; // Type_identifierContext
        this.bindings = null; // Native_category_bindingsContext
        this.methods = null; // Native_member_method_declaration_listContext
    }

	NATIVE() {
	    return this.getToken(MParser.NATIVE, 0);
	};

	WIDGET() {
	    return this.getToken(MParser.WIDGET, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	lfp() {
	    return this.getTypedRuleContext(LfpContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	native_category_bindings() {
	    return this.getTypedRuleContext(Native_category_bindingsContext,0);
	};

	native_member_method_declaration_list() {
	    return this.getTypedRuleContext(Native_member_method_declaration_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNative_widget_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNative_widget_declaration(this);
		}
	}


}



class Concrete_category_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_concrete_category_declaration;
        this.name = null; // Type_identifierContext
        this.derived = null; // Derived_listContext
        this.attrs = null; // Attribute_identifier_listContext
        this.methods = null; // Member_method_declaration_listContext
    }

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	CLASS() {
	    return this.getToken(MParser.CLASS, 0);
	};

	CATEGORY() {
	    return this.getToken(MParser.CATEGORY, 0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	STORABLE() {
	    return this.getToken(MParser.STORABLE, 0);
	};

	COMMA() {
	    return this.getToken(MParser.COMMA, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	derived_list() {
	    return this.getTypedRuleContext(Derived_listContext,0);
	};

	attribute_identifier_list() {
	    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
	};

	PASS() {
	    return this.getToken(MParser.PASS, 0);
	};

	member_method_declaration_list() {
	    return this.getTypedRuleContext(Member_method_declaration_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterConcrete_category_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitConcrete_category_declaration(this);
		}
	}


}



class Singleton_category_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_singleton_category_declaration;
        this.name = null; // Type_identifierContext
        this.attrs = null; // Attribute_identifier_listContext
        this.methods = null; // Member_method_declaration_listContext
    }

	SINGLETON() {
	    return this.getToken(MParser.SINGLETON, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	attribute_identifier_list() {
	    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
	};

	PASS() {
	    return this.getToken(MParser.PASS, 0);
	};

	member_method_declaration_list() {
	    return this.getTypedRuleContext(Member_method_declaration_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSingleton_category_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSingleton_category_declaration(this);
		}
	}


}



class Derived_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_derived_list;
        this.items = null; // Type_identifier_listContext
    }

	type_identifier_list() {
	    return this.getTypedRuleContext(Type_identifier_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDerived_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDerived_list(this);
		}
	}


}



class Operator_method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_operator_method_declaration;
        this.op = null; // OperatorContext
        this.arg = null; // Operator_argumentContext
        this.typ = null; // TypedefContext
        this.stmts = null; // Statement_listContext
    }

	DEF() {
	    return this.getToken(MParser.DEF, 0);
	};

	OPERATOR() {
	    return this.getToken(MParser.OPERATOR, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	operator() {
	    return this.getTypedRuleContext(OperatorContext,0);
	};

	operator_argument() {
	    return this.getTypedRuleContext(Operator_argumentContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	RARROW() {
	    return this.getToken(MParser.RARROW, 0);
	};

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterOperator_method_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitOperator_method_declaration(this);
		}
	}


}



class Setter_method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_setter_method_declaration;
        this.name = null; // Variable_identifierContext
        this.stmts = null; // Statement_listContext
    }

	DEF() {
	    return this.getToken(MParser.DEF, 0);
	};

	SETTER() {
	    return this.getToken(MParser.SETTER, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSetter_method_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSetter_method_declaration(this);
		}
	}


}



class Native_setter_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_native_setter_declaration;
        this.name = null; // Variable_identifierContext
        this.stmts = null; // Native_statement_listContext
    }

	DEF() {
	    return this.getToken(MParser.DEF, 0);
	};

	SETTER() {
	    return this.getToken(MParser.SETTER, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	native_statement_list() {
	    return this.getTypedRuleContext(Native_statement_listContext,0);
	};

	NATIVE() {
	    return this.getToken(MParser.NATIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNative_setter_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNative_setter_declaration(this);
		}
	}


}



class Getter_method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_getter_method_declaration;
        this.name = null; // Variable_identifierContext
        this.stmts = null; // Statement_listContext
    }

	DEF() {
	    return this.getToken(MParser.DEF, 0);
	};

	GETTER() {
	    return this.getToken(MParser.GETTER, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterGetter_method_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitGetter_method_declaration(this);
		}
	}


}



class Native_getter_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_native_getter_declaration;
        this.name = null; // Variable_identifierContext
        this.stmts = null; // Native_statement_listContext
    }

	DEF() {
	    return this.getToken(MParser.DEF, 0);
	};

	GETTER() {
	    return this.getToken(MParser.GETTER, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	native_statement_list() {
	    return this.getTypedRuleContext(Native_statement_listContext,0);
	};

	NATIVE() {
	    return this.getToken(MParser.NATIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNative_getter_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNative_getter_declaration(this);
		}
	}


}



class Native_category_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_native_category_declaration;
        this.name = null; // Type_identifierContext
        this.attrs = null; // Attribute_identifier_listContext
        this.bindings = null; // Native_category_bindingsContext
        this.methods = null; // Native_member_method_declaration_listContext
    }

	NATIVE() {
	    return this.getToken(MParser.NATIVE, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	CLASS() {
	    return this.getToken(MParser.CLASS, 0);
	};

	CATEGORY() {
	    return this.getToken(MParser.CATEGORY, 0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	native_category_bindings() {
	    return this.getTypedRuleContext(Native_category_bindingsContext,0);
	};

	STORABLE() {
	    return this.getToken(MParser.STORABLE, 0);
	};

	lfp() {
	    return this.getTypedRuleContext(LfpContext,0);
	};

	attribute_identifier_list() {
	    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
	};

	native_member_method_declaration_list() {
	    return this.getTypedRuleContext(Native_member_method_declaration_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNative_category_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNative_category_declaration(this);
		}
	}


}



class Native_resource_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_native_resource_declaration;
        this.name = null; // Type_identifierContext
        this.attrs = null; // Attribute_identifier_listContext
        this.bindings = null; // Native_category_bindingsContext
        this.methods = null; // Native_member_method_declaration_listContext
    }

	NATIVE() {
	    return this.getToken(MParser.NATIVE, 0);
	};

	RESOURCE() {
	    return this.getToken(MParser.RESOURCE, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	native_category_bindings() {
	    return this.getTypedRuleContext(Native_category_bindingsContext,0);
	};

	STORABLE() {
	    return this.getToken(MParser.STORABLE, 0);
	};

	lfp() {
	    return this.getTypedRuleContext(LfpContext,0);
	};

	attribute_identifier_list() {
	    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
	};

	native_member_method_declaration_list() {
	    return this.getTypedRuleContext(Native_member_method_declaration_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNative_resource_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNative_resource_declaration(this);
		}
	}


}



class Native_category_bindingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_native_category_bindings;
        this.items = null; // Native_category_binding_listContext
    }

	DEF() {
	    return this.getToken(MParser.DEF, 0);
	};

	BINDINGS() {
	    return this.getToken(MParser.BINDINGS, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	CLASS() {
	    return this.getToken(MParser.CLASS, 0);
	};

	CATEGORY() {
	    return this.getToken(MParser.CATEGORY, 0);
	};

	native_category_binding_list() {
	    return this.getTypedRuleContext(Native_category_binding_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNative_category_bindings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNative_category_bindings(this);
		}
	}


}



class Native_category_binding_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_native_category_binding_list;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class NativeCategoryBindingListItemContext extends Native_category_binding_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // Native_category_binding_listContext;
        this.item = null; // Native_category_bindingContext;
        super.copyFrom(ctx);
    }

	lfp() {
	    return this.getTypedRuleContext(LfpContext,0);
	};

	native_category_binding_list() {
	    return this.getTypedRuleContext(Native_category_binding_listContext,0);
	};

	native_category_binding() {
	    return this.getTypedRuleContext(Native_category_bindingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNativeCategoryBindingListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNativeCategoryBindingListItem(this);
		}
	}


}

MParser.NativeCategoryBindingListItemContext = NativeCategoryBindingListItemContext;

class NativeCategoryBindingListContext extends Native_category_binding_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.item = null; // Native_category_bindingContext;
        super.copyFrom(ctx);
    }

	native_category_binding() {
	    return this.getTypedRuleContext(Native_category_bindingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNativeCategoryBindingList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNativeCategoryBindingList(this);
		}
	}


}

MParser.NativeCategoryBindingListContext = NativeCategoryBindingListContext;

class Abstract_method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_abstract_method_declaration;
        this.name = null; // Method_identifierContext
        this.args = null; // Argument_listContext
        this.typ = null; // TypedefContext
    }

	ABSTRACT() {
	    return this.getToken(MParser.ABSTRACT, 0);
	};

	DEF() {
	    return this.getToken(MParser.DEF, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	method_identifier() {
	    return this.getTypedRuleContext(Method_identifierContext,0);
	};

	RARROW() {
	    return this.getToken(MParser.RARROW, 0);
	};

	argument_list() {
	    return this.getTypedRuleContext(Argument_listContext,0);
	};

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	MUTABLE() {
	    return this.getToken(MParser.MUTABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAbstract_method_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAbstract_method_declaration(this);
		}
	}


}



class Concrete_method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_concrete_method_declaration;
        this.name = null; // Method_identifierContext
        this.args = null; // Argument_listContext
        this.typ = null; // TypedefContext
        this.stmts = null; // Statement_listContext
    }

	DEF() {
	    return this.getToken(MParser.DEF, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	method_identifier() {
	    return this.getTypedRuleContext(Method_identifierContext,0);
	};

	PASS() {
	    return this.getToken(MParser.PASS, 0);
	};

	RARROW() {
	    return this.getToken(MParser.RARROW, 0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	argument_list() {
	    return this.getTypedRuleContext(Argument_listContext,0);
	};

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	MUTABLE() {
	    return this.getToken(MParser.MUTABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterConcrete_method_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitConcrete_method_declaration(this);
		}
	}


}



class Native_method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_native_method_declaration;
        this.name = null; // Method_identifierContext
        this.args = null; // Argument_listContext
        this.typ = null; // Category_or_any_typeContext
        this.stmts = null; // Native_statement_listContext
    }

	DEF() {
	    return this.getToken(MParser.DEF, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	method_identifier() {
	    return this.getTypedRuleContext(Method_identifierContext,0);
	};

	native_statement_list() {
	    return this.getTypedRuleContext(Native_statement_listContext,0);
	};

	NATIVE() {
	    return this.getToken(MParser.NATIVE, 0);
	};

	RARROW() {
	    return this.getToken(MParser.RARROW, 0);
	};

	argument_list() {
	    return this.getTypedRuleContext(Argument_listContext,0);
	};

	category_or_any_type() {
	    return this.getTypedRuleContext(Category_or_any_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNative_method_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNative_method_declaration(this);
		}
	}


}



class Test_method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_test_method_declaration;
        this.name = null; // Token
        this.stmts = null; // Statement_listContext
        this.exps = null; // Assertion_listContext
        this.error = null; // Symbol_identifierContext
    }

	DEF() {
	    return this.getToken(MParser.DEF, 0);
	};

	TEST() {
	    return this.getToken(MParser.TEST, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.COLON);
	    } else {
	        return this.getToken(MParser.COLON, i);
	    }
	};


	indent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndentContext);
	    } else {
	        return this.getTypedRuleContext(IndentContext,i);
	    }
	};

	dedent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DedentContext);
	    } else {
	        return this.getTypedRuleContext(DedentContext,i);
	    }
	};

	lfp() {
	    return this.getTypedRuleContext(LfpContext,0);
	};

	VERIFYING() {
	    return this.getToken(MParser.VERIFYING, 0);
	};

	TEXT_LITERAL() {
	    return this.getToken(MParser.TEXT_LITERAL, 0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	assertion_list() {
	    return this.getTypedRuleContext(Assertion_listContext,0);
	};

	symbol_identifier() {
	    return this.getTypedRuleContext(Symbol_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterTest_method_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitTest_method_declaration(this);
		}
	}


}



class AssertionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_assertion;
        this.exp = null; // ExpressionContext
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAssertion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAssertion(this);
		}
	}


}



class Typed_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_typed_argument;
        this.name = null; // Variable_identifierContext
        this.typ = null; // Category_or_any_typeContext
        this.attrs = null; // Attribute_identifier_listContext
        this.value = null; // Literal_expressionContext
    }

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	category_or_any_type() {
	    return this.getTypedRuleContext(Category_or_any_typeContext,0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	EQ() {
	    return this.getToken(MParser.EQ, 0);
	};

	attribute_identifier_list() {
	    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
	};

	literal_expression() {
	    return this.getTypedRuleContext(Literal_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterTyped_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitTyped_argument(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CommentStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.decl = null; // Comment_statementContext;
        super.copyFrom(ctx);
    }

	comment_statement() {
	    return this.getTypedRuleContext(Comment_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCommentStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCommentStatement(this);
		}
	}


}

MParser.CommentStatementContext = CommentStatementContext;

class StoreStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Store_statementContext;
        super.copyFrom(ctx);
    }

	store_statement() {
	    return this.getTypedRuleContext(Store_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterStoreStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitStoreStatement(this);
		}
	}


}

MParser.StoreStatementContext = StoreStatementContext;

class WithSingletonStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // With_singleton_statementContext;
        super.copyFrom(ctx);
    }

	with_singleton_statement() {
	    return this.getTypedRuleContext(With_singleton_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterWithSingletonStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitWithSingletonStatement(this);
		}
	}


}

MParser.WithSingletonStatementContext = WithSingletonStatementContext;

class WriteStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Write_statementContext;
        super.copyFrom(ctx);
    }

	write_statement() {
	    return this.getTypedRuleContext(Write_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterWriteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitWriteStatement(this);
		}
	}


}

MParser.WriteStatementContext = WriteStatementContext;

class WhileStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // While_statementContext;
        super.copyFrom(ctx);
    }

	while_statement() {
	    return this.getTypedRuleContext(While_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitWhileStatement(this);
		}
	}


}

MParser.WhileStatementContext = WhileStatementContext;

class WithResourceStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // With_resource_statementContext;
        super.copyFrom(ctx);
    }

	with_resource_statement() {
	    return this.getTypedRuleContext(With_resource_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterWithResourceStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitWithResourceStatement(this);
		}
	}


}

MParser.WithResourceStatementContext = WithResourceStatementContext;

class RaiseStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Raise_statementContext;
        super.copyFrom(ctx);
    }

	raise_statement() {
	    return this.getTypedRuleContext(Raise_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterRaiseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitRaiseStatement(this);
		}
	}


}

MParser.RaiseStatementContext = RaiseStatementContext;

class FetchStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Fetch_statementContext;
        super.copyFrom(ctx);
    }

	fetch_statement() {
	    return this.getTypedRuleContext(Fetch_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterFetchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitFetchStatement(this);
		}
	}


}

MParser.FetchStatementContext = FetchStatementContext;

class BreakStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Break_statementContext;
        super.copyFrom(ctx);
    }

	break_statement() {
	    return this.getTypedRuleContext(Break_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterBreakStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitBreakStatement(this);
		}
	}


}

MParser.BreakStatementContext = BreakStatementContext;

class AssignInstanceStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Assign_instance_statementContext;
        super.copyFrom(ctx);
    }

	assign_instance_statement() {
	    return this.getTypedRuleContext(Assign_instance_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAssignInstanceStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAssignInstanceStatement(this);
		}
	}


}

MParser.AssignInstanceStatementContext = AssignInstanceStatementContext;

class IfStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // If_statementContext;
        super.copyFrom(ctx);
    }

	if_statement() {
	    return this.getTypedRuleContext(If_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitIfStatement(this);
		}
	}


}

MParser.IfStatementContext = IfStatementContext;

class SwitchStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Switch_statementContext;
        super.copyFrom(ctx);
    }

	switch_statement() {
	    return this.getTypedRuleContext(Switch_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSwitchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSwitchStatement(this);
		}
	}


}

MParser.SwitchStatementContext = SwitchStatementContext;

class TryStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Try_statementContext;
        super.copyFrom(ctx);
    }

	try_statement() {
	    return this.getTypedRuleContext(Try_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterTryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitTryStatement(this);
		}
	}


}

MParser.TryStatementContext = TryStatementContext;

class ReadStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Read_statementContext;
        super.copyFrom(ctx);
    }

	read_statement() {
	    return this.getTypedRuleContext(Read_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterReadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitReadStatement(this);
		}
	}


}

MParser.ReadStatementContext = ReadStatementContext;

class MethodCallStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Method_call_statementContext;
        super.copyFrom(ctx);
    }

	method_call_statement() {
	    return this.getTypedRuleContext(Method_call_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMethodCallStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMethodCallStatement(this);
		}
	}


}

MParser.MethodCallStatementContext = MethodCallStatementContext;

class ReturnStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Return_statementContext;
        super.copyFrom(ctx);
    }

	return_statement() {
	    return this.getTypedRuleContext(Return_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitReturnStatement(this);
		}
	}


}

MParser.ReturnStatementContext = ReturnStatementContext;

class AssignTupleStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Assign_tuple_statementContext;
        super.copyFrom(ctx);
    }

	assign_tuple_statement() {
	    return this.getTypedRuleContext(Assign_tuple_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAssignTupleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAssignTupleStatement(this);
		}
	}


}

MParser.AssignTupleStatementContext = AssignTupleStatementContext;

class ClosureStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.decl = null; // Concrete_method_declarationContext;
        super.copyFrom(ctx);
    }

	concrete_method_declaration() {
	    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterClosureStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitClosureStatement(this);
		}
	}


}

MParser.ClosureStatementContext = ClosureStatementContext;

class FlushStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Flush_statementContext;
        super.copyFrom(ctx);
    }

	flush_statement() {
	    return this.getTypedRuleContext(Flush_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterFlushStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitFlushStatement(this);
		}
	}


}

MParser.FlushStatementContext = FlushStatementContext;

class DoWhileStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Do_while_statementContext;
        super.copyFrom(ctx);
    }

	do_while_statement() {
	    return this.getTypedRuleContext(Do_while_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDoWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDoWhileStatement(this);
		}
	}


}

MParser.DoWhileStatementContext = DoWhileStatementContext;

class ForEachStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // For_each_statementContext;
        super.copyFrom(ctx);
    }

	for_each_statement() {
	    return this.getTypedRuleContext(For_each_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterForEachStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitForEachStatement(this);
		}
	}


}

MParser.ForEachStatementContext = ForEachStatementContext;

class Flush_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_flush_statement;
    }

	FLUSH() {
	    return this.getToken(MParser.FLUSH, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterFlush_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitFlush_statement(this);
		}
	}


}



class Store_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_store_statement;
        this.to_del = null; // Expression_listContext
        this.to_add = null; // Expression_listContext
        this.with_meta = null; // ExpressionContext
        this.stmts = null; // Statement_listContext
    }

	DELETE() {
	    return this.getToken(MParser.DELETE, 0);
	};

	LPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.LPAR);
	    } else {
	        return this.getToken(MParser.LPAR, i);
	    }
	};


	RPAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.RPAR);
	    } else {
	        return this.getToken(MParser.RPAR, i);
	    }
	};


	STORE() {
	    return this.getToken(MParser.STORE, 0);
	};

	expression_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression_listContext);
	    } else {
	        return this.getTypedRuleContext(Expression_listContext,i);
	    }
	};

	WITH() {
	    return this.getToken(MParser.WITH, 0);
	};

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	THEN() {
	    return this.getToken(MParser.THEN, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	AND() {
	    return this.getToken(MParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterStore_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitStore_statement(this);
		}
	}


}



class Method_call_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_method_call_expression;
        this.name = null; // Method_identifierContext
        this.args = null; // Argument_assignment_listContext
    }

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	method_identifier() {
	    return this.getTypedRuleContext(Method_identifierContext,0);
	};

	argument_assignment_list() {
	    return this.getTypedRuleContext(Argument_assignment_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMethod_call_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMethod_call_expression(this);
		}
	}


}



class Method_call_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_method_call_statement;
        this.parent = null; // Instance_expressionContext
        this.method = null; // Method_call_expressionContext
        this.name = null; // Variable_identifierContext
        this.stmts = null; // Statement_listContext
    }

	method_call_expression() {
	    return this.getTypedRuleContext(Method_call_expressionContext,0);
	};

	DOT() {
	    return this.getToken(MParser.DOT, 0);
	};

	THEN() {
	    return this.getToken(MParser.THEN, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	instance_expression() {
	    return this.getTypedRuleContext(Instance_expressionContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	WITH() {
	    return this.getToken(MParser.WITH, 0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMethod_call_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMethod_call_statement(this);
		}
	}


}



class With_resource_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_with_resource_statement;
        this.stmt = null; // Assign_variable_statementContext
        this.stmts = null; // Statement_listContext
    }

	WITH() {
	    return this.getToken(MParser.WITH, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	assign_variable_statement() {
	    return this.getTypedRuleContext(Assign_variable_statementContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterWith_resource_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitWith_resource_statement(this);
		}
	}


}



class With_singleton_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_with_singleton_statement;
        this.typ = null; // Type_identifierContext
        this.stmts = null; // Statement_listContext
    }

	WITH() {
	    return this.getToken(MParser.WITH, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterWith_singleton_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitWith_singleton_statement(this);
		}
	}


}



class Switch_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_switch_statement;
        this.exp = null; // ExpressionContext
        this.cases = null; // Switch_case_statement_listContext
        this.stmts = null; // Statement_listContext
    }

	SWITCH() {
	    return this.getToken(MParser.SWITCH, 0);
	};

	ON() {
	    return this.getToken(MParser.ON, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.COLON);
	    } else {
	        return this.getToken(MParser.COLON, i);
	    }
	};


	indent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndentContext);
	    } else {
	        return this.getTypedRuleContext(IndentContext,i);
	    }
	};

	dedent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DedentContext);
	    } else {
	        return this.getTypedRuleContext(DedentContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	switch_case_statement_list() {
	    return this.getTypedRuleContext(Switch_case_statement_listContext,0);
	};

	lfp() {
	    return this.getTypedRuleContext(LfpContext,0);
	};

	OTHERWISE() {
	    return this.getToken(MParser.OTHERWISE, 0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSwitch_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSwitch_statement(this);
		}
	}


}



class Switch_case_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_switch_case_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AtomicSwitchCaseContext extends Switch_case_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Atomic_literalContext;
        this.stmts = null; // Statement_listContext;
        super.copyFrom(ctx);
    }

	WHEN() {
	    return this.getToken(MParser.WHEN, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	atomic_literal() {
	    return this.getTypedRuleContext(Atomic_literalContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAtomicSwitchCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAtomicSwitchCase(this);
		}
	}


}

MParser.AtomicSwitchCaseContext = AtomicSwitchCaseContext;

class CollectionSwitchCaseContext extends Switch_case_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Literal_collectionContext;
        this.stmts = null; // Statement_listContext;
        super.copyFrom(ctx);
    }

	WHEN() {
	    return this.getToken(MParser.WHEN, 0);
	};

	IN() {
	    return this.getToken(MParser.IN, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	literal_collection() {
	    return this.getTypedRuleContext(Literal_collectionContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCollectionSwitchCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCollectionSwitchCase(this);
		}
	}


}

MParser.CollectionSwitchCaseContext = CollectionSwitchCaseContext;

class For_each_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_for_each_statement;
        this.name1 = null; // Variable_identifierContext
        this.name2 = null; // Variable_identifierContext
        this.source = null; // ExpressionContext
        this.stmts = null; // Statement_listContext
    }

	FOR() {
	    return this.getToken(MParser.FOR, 0);
	};

	IN() {
	    return this.getToken(MParser.IN, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	variable_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Variable_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Variable_identifierContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	COMMA() {
	    return this.getToken(MParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterFor_each_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitFor_each_statement(this);
		}
	}


}



class Do_while_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_do_while_statement;
        this.stmts = null; // Statement_listContext
        this.exp = null; // ExpressionContext
    }

	DO() {
	    return this.getToken(MParser.DO, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	lfp() {
	    return this.getTypedRuleContext(LfpContext,0);
	};

	WHILE() {
	    return this.getToken(MParser.WHILE, 0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDo_while_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDo_while_statement(this);
		}
	}


}



class While_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_while_statement;
        this.exp = null; // ExpressionContext
        this.stmts = null; // Statement_listContext
    }

	WHILE() {
	    return this.getToken(MParser.WHILE, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterWhile_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitWhile_statement(this);
		}
	}


}



class If_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_if_statement;
        this.exp = null; // ExpressionContext
        this.stmts = null; // Statement_listContext
        this.elseIfs = null; // Else_if_statement_listContext
        this.elseStmts = null; // Statement_listContext
    }

	IF() {
	    return this.getToken(MParser.IF, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.COLON);
	    } else {
	        return this.getToken(MParser.COLON, i);
	    }
	};


	indent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndentContext);
	    } else {
	        return this.getTypedRuleContext(IndentContext,i);
	    }
	};

	dedent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DedentContext);
	    } else {
	        return this.getTypedRuleContext(DedentContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Statement_listContext);
	    } else {
	        return this.getTypedRuleContext(Statement_listContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(MParser.ELSE, 0);
	};

	else_if_statement_list() {
	    return this.getTypedRuleContext(Else_if_statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterIf_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitIf_statement(this);
		}
	}


}



class Else_if_statement_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_else_if_statement_list;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ElseIfStatementListContext extends Else_if_statement_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        this.stmts = null; // Statement_listContext;
        super.copyFrom(ctx);
    }

	ELSE() {
	    return this.getToken(MParser.ELSE, 0);
	};

	IF() {
	    return this.getToken(MParser.IF, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterElseIfStatementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitElseIfStatementList(this);
		}
	}


}

MParser.ElseIfStatementListContext = ElseIfStatementListContext;

class ElseIfStatementListItemContext extends Else_if_statement_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // Else_if_statement_listContext;
        this.exp = null; // ExpressionContext;
        this.stmts = null; // Statement_listContext;
        super.copyFrom(ctx);
    }

	lfp() {
	    return this.getTypedRuleContext(LfpContext,0);
	};

	ELSE() {
	    return this.getToken(MParser.ELSE, 0);
	};

	IF() {
	    return this.getToken(MParser.IF, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	else_if_statement_list() {
	    return this.getTypedRuleContext(Else_if_statement_listContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterElseIfStatementListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitElseIfStatementListItem(this);
		}
	}


}

MParser.ElseIfStatementListItemContext = ElseIfStatementListItemContext;

class Raise_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_raise_statement;
        this.exp = null; // ExpressionContext
    }

	RAISE() {
	    return this.getToken(MParser.RAISE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterRaise_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitRaise_statement(this);
		}
	}


}



class Try_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_try_statement;
        this.name = null; // Variable_identifierContext
        this.stmts = null; // Statement_listContext
        this.handlers = null; // Catch_statement_listContext
        this.anyStmts = null; // Statement_listContext
        this.finalStmts = null; // Statement_listContext
    }

	TRY() {
	    return this.getToken(MParser.TRY, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.COLON);
	    } else {
	        return this.getToken(MParser.COLON, i);
	    }
	};


	indent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndentContext);
	    } else {
	        return this.getTypedRuleContext(IndentContext,i);
	    }
	};

	dedent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DedentContext);
	    } else {
	        return this.getTypedRuleContext(DedentContext,i);
	    }
	};

	lfs = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfsContext);
	    } else {
	        return this.getTypedRuleContext(LfsContext,i);
	    }
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	statement_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Statement_listContext);
	    } else {
	        return this.getTypedRuleContext(Statement_listContext,i);
	    }
	};

	EXCEPT() {
	    return this.getToken(MParser.EXCEPT, 0);
	};

	FINALLY() {
	    return this.getToken(MParser.FINALLY, 0);
	};

	catch_statement_list() {
	    return this.getTypedRuleContext(Catch_statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterTry_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitTry_statement(this);
		}
	}


}



class Catch_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_catch_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CatchAtomicStatementContext extends Catch_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Symbol_identifierContext;
        this.stmts = null; // Statement_listContext;
        super.copyFrom(ctx);
    }

	EXCEPT() {
	    return this.getToken(MParser.EXCEPT, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	lfs() {
	    return this.getTypedRuleContext(LfsContext,0);
	};

	symbol_identifier() {
	    return this.getTypedRuleContext(Symbol_identifierContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCatchAtomicStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCatchAtomicStatement(this);
		}
	}


}

MParser.CatchAtomicStatementContext = CatchAtomicStatementContext;

class CatchCollectionStatementContext extends Catch_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Symbol_listContext;
        this.stmts = null; // Statement_listContext;
        super.copyFrom(ctx);
    }

	EXCEPT() {
	    return this.getToken(MParser.EXCEPT, 0);
	};

	IN() {
	    return this.getToken(MParser.IN, 0);
	};

	LBRAK() {
	    return this.getToken(MParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(MParser.RBRAK, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	lfs() {
	    return this.getTypedRuleContext(LfsContext,0);
	};

	symbol_list() {
	    return this.getTypedRuleContext(Symbol_listContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCatchCollectionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCatchCollectionStatement(this);
		}
	}


}

MParser.CatchCollectionStatementContext = CatchCollectionStatementContext;

class Break_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_break_statement;
    }

	BREAK() {
	    return this.getToken(MParser.BREAK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterBreak_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitBreak_statement(this);
		}
	}


}



class Return_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_return_statement;
        this.exp = null; // ExpressionContext
    }

	RETURN() {
	    return this.getToken(MParser.RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterReturn_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitReturn_statement(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class IntDivideExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	idivide() {
	    return this.getTypedRuleContext(IdivideContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterIntDivideExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitIntDivideExpression(this);
		}
	}


}

MParser.IntDivideExpressionContext = IntDivideExpressionContext;

class HasAnyExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // Filter_expressionContext;
        super.copyFrom(ctx);
    }

	HAS() {
	    return this.getToken(MParser.HAS, 0);
	};

	ANY() {
	    return this.getToken(MParser.ANY, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	filter_expression() {
	    return this.getTypedRuleContext(Filter_expressionContext,0);
	};

	NOT() {
	    return this.getToken(MParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterHasAnyExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitHasAnyExpression(this);
		}
	}


}

MParser.HasAnyExpressionContext = HasAnyExpressionContext;

class HasExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	HAS() {
	    return this.getToken(MParser.HAS, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	NOT() {
	    return this.getToken(MParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterHasExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitHasExpression(this);
		}
	}


}

MParser.HasExpressionContext = HasExpressionContext;

class TernaryExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.ifTrue = null; // ExpressionContext;
        this.test = null; // ExpressionContext;
        this.ifFalse = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	IF() {
	    return this.getToken(MParser.IF, 0);
	};

	ELSE() {
	    return this.getToken(MParser.ELSE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterTernaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitTernaryExpression(this);
		}
	}


}

MParser.TernaryExpressionContext = TernaryExpressionContext;

class InExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	IN() {
	    return this.getToken(MParser.IN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	NOT() {
	    return this.getToken(MParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterInExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitInExpression(this);
		}
	}


}

MParser.InExpressionContext = InExpressionContext;

class JsxExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Jsx_expressionContext;
        super.copyFrom(ctx);
    }

	jsx_expression() {
	    return this.getTypedRuleContext(Jsx_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsxExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsxExpression(this);
		}
	}


}

MParser.JsxExpressionContext = JsxExpressionContext;

class NotExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(MParser.NOT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNotExpression(this);
		}
	}


}

MParser.NotExpressionContext = NotExpressionContext;

class CompareExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.op = null; // Token;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	LT() {
	    return this.getToken(MParser.LT, 0);
	};

	LTE() {
	    return this.getToken(MParser.LTE, 0);
	};

	GT() {
	    return this.getToken(MParser.GT, 0);
	};

	GTE() {
	    return this.getToken(MParser.GTE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCompareExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCompareExpression(this);
		}
	}


}

MParser.CompareExpressionContext = CompareExpressionContext;

class OrExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	OR() {
	    return this.getToken(MParser.OR, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitOrExpression(this);
		}
	}


}

MParser.OrExpressionContext = OrExpressionContext;

class CodeExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	CODE() {
	    return this.getToken(MParser.CODE, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCodeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCodeExpression(this);
		}
	}


}

MParser.CodeExpressionContext = CodeExpressionContext;

class AndExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	AND() {
	    return this.getToken(MParser.AND, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAndExpression(this);
		}
	}


}

MParser.AndExpressionContext = AndExpressionContext;

class ArrowExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Arrow_expressionContext;
        super.copyFrom(ctx);
    }

	arrow_expression() {
	    return this.getTypedRuleContext(Arrow_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterArrowExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitArrowExpression(this);
		}
	}


}

MParser.ArrowExpressionContext = ArrowExpressionContext;

class ContainsExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	CONTAINS() {
	    return this.getToken(MParser.CONTAINS, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	NOT() {
	    return this.getToken(MParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterContainsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitContainsExpression(this);
		}
	}


}

MParser.ContainsExpressionContext = ContainsExpressionContext;

class FilteredListExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.src = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	filtered_list_suffix() {
	    return this.getTypedRuleContext(Filtered_list_suffixContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterFilteredListExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitFilteredListExpression(this);
		}
	}


}

MParser.FilteredListExpressionContext = FilteredListExpressionContext;

class TypeExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Type_expressionContext;
        super.copyFrom(ctx);
    }

	type_expression() {
	    return this.getTypedRuleContext(Type_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterTypeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitTypeExpression(this);
		}
	}


}

MParser.TypeExpressionContext = TypeExpressionContext;

class MultiplyExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	multiply() {
	    return this.getTypedRuleContext(MultiplyContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMultiplyExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMultiplyExpression(this);
		}
	}


}

MParser.MultiplyExpressionContext = MultiplyExpressionContext;

class ExecuteExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Variable_identifierContext;
        super.copyFrom(ctx);
    }

	EXECUTE() {
	    return this.getToken(MParser.EXECUTE, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterExecuteExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitExecuteExpression(this);
		}
	}


}

MParser.ExecuteExpressionContext = ExecuteExpressionContext;

class IteratorExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        this.name = null; // Variable_identifierContext;
        this.source = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	FOR() {
	    return this.getToken(MParser.FOR, 0);
	};

	EACH() {
	    return this.getToken(MParser.EACH, 0);
	};

	IN() {
	    return this.getToken(MParser.IN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterIteratorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitIteratorExpression(this);
		}
	}


}

MParser.IteratorExpressionContext = IteratorExpressionContext;

class DivideExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	divide() {
	    return this.getTypedRuleContext(DivideContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDivideExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDivideExpression(this);
		}
	}


}

MParser.DivideExpressionContext = DivideExpressionContext;

class IsExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // Is_expressionContext;
        super.copyFrom(ctx);
    }

	IS() {
	    return this.getToken(MParser.IS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	is_expression() {
	    return this.getTypedRuleContext(Is_expressionContext,0);
	};

	NOT() {
	    return this.getToken(MParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterIsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitIsExpression(this);
		}
	}


}

MParser.IsExpressionContext = IsExpressionContext;

class MinusExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	MINUS() {
	    return this.getToken(MParser.MINUS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMinusExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMinusExpression(this);
		}
	}


}

MParser.MinusExpressionContext = MinusExpressionContext;

class AddExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.op = null; // Token;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	PLUS() {
	    return this.getToken(MParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(MParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAddExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAddExpression(this);
		}
	}


}

MParser.AddExpressionContext = AddExpressionContext;

class HasAllExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // Filter_expressionContext;
        super.copyFrom(ctx);
    }

	HAS() {
	    return this.getToken(MParser.HAS, 0);
	};

	ALL() {
	    return this.getToken(MParser.ALL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	filter_expression() {
	    return this.getTypedRuleContext(Filter_expressionContext,0);
	};

	NOT() {
	    return this.getToken(MParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterHasAllExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitHasAllExpression(this);
		}
	}


}

MParser.HasAllExpressionContext = HasAllExpressionContext;

class InstanceExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Instance_expressionContext;
        super.copyFrom(ctx);
    }

	instance_expression() {
	    return this.getTypedRuleContext(Instance_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterInstanceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitInstanceExpression(this);
		}
	}


}

MParser.InstanceExpressionContext = InstanceExpressionContext;

class MutableInstanceExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Mutable_instance_expressionContext;
        super.copyFrom(ctx);
    }

	mutable_instance_expression() {
	    return this.getTypedRuleContext(Mutable_instance_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMutableInstanceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMutableInstanceExpression(this);
		}
	}


}

MParser.MutableInstanceExpressionContext = MutableInstanceExpressionContext;

class CssExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Css_expressionContext;
        super.copyFrom(ctx);
    }

	css_expression() {
	    return this.getTypedRuleContext(Css_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCssExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCssExpression(this);
		}
	}


}

MParser.CssExpressionContext = CssExpressionContext;

class CastExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // Category_or_any_typeContext;
        super.copyFrom(ctx);
    }

	AS() {
	    return this.getToken(MParser.AS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	category_or_any_type() {
	    return this.getTypedRuleContext(Category_or_any_typeContext,0);
	};

	MUTABLE() {
	    return this.getToken(MParser.MUTABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCastExpression(this);
		}
	}


}

MParser.CastExpressionContext = CastExpressionContext;

class ModuloExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	modulo() {
	    return this.getTypedRuleContext(ModuloContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterModuloExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitModuloExpression(this);
		}
	}


}

MParser.ModuloExpressionContext = ModuloExpressionContext;

class EqualsExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.op = null; // Token;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	EQ2() {
	    return this.getToken(MParser.EQ2, 0);
	};

	XEQ() {
	    return this.getToken(MParser.XEQ, 0);
	};

	TEQ() {
	    return this.getToken(MParser.TEQ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterEqualsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitEqualsExpression(this);
		}
	}


}

MParser.EqualsExpressionContext = EqualsExpressionContext;

class Filter_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_filter_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExplicitFilterExpressionContext extends Filter_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	WHERE() {
	    return this.getToken(MParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterExplicitFilterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitExplicitFilterExpression(this);
		}
	}


}

MParser.ExplicitFilterExpressionContext = ExplicitFilterExpressionContext;

class OtherFilterExpressionContext extends Filter_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterOtherFilterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitOtherFilterExpression(this);
		}
	}


}

MParser.OtherFilterExpressionContext = OtherFilterExpressionContext;

class ArrowFilterExpressionContext extends Filter_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	WHERE() {
	    return this.getToken(MParser.WHERE, 0);
	};

	arrow_expression() {
	    return this.getTypedRuleContext(Arrow_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterArrowFilterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitArrowFilterExpression(this);
		}
	}


}

MParser.ArrowFilterExpressionContext = ArrowFilterExpressionContext;

class Type_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_type_expression;
        this.name = null; // Type_identifierContext
    }

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterType_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitType_expression(this);
		}
	}


}



class Selectable_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_selectable_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ThisExpressionContext extends Selectable_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // This_expressionContext;
        super.copyFrom(ctx);
    }

	this_expression() {
	    return this.getTypedRuleContext(This_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterThisExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitThisExpression(this);
		}
	}


}

MParser.ThisExpressionContext = ThisExpressionContext;

class ParenthesisExpressionContext extends Selectable_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Parenthesis_expressionContext;
        super.copyFrom(ctx);
    }

	parenthesis_expression() {
	    return this.getTypedRuleContext(Parenthesis_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterParenthesisExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitParenthesisExpression(this);
		}
	}


}

MParser.ParenthesisExpressionContext = ParenthesisExpressionContext;

class LiteralExpressionContext extends Selectable_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Literal_expressionContext;
        super.copyFrom(ctx);
    }

	literal_expression() {
	    return this.getTypedRuleContext(Literal_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitLiteralExpression(this);
		}
	}


}

MParser.LiteralExpressionContext = LiteralExpressionContext;

class MethodExpressionContext extends Selectable_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Method_expressionContext;
        super.copyFrom(ctx);
    }

	method_expression() {
	    return this.getTypedRuleContext(Method_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMethodExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMethodExpression(this);
		}
	}


}

MParser.MethodExpressionContext = MethodExpressionContext;

class SuperExpressionContext extends Selectable_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Super_expressionContext;
        super.copyFrom(ctx);
    }

	super_expression() {
	    return this.getTypedRuleContext(Super_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSuperExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSuperExpression(this);
		}
	}


}

MParser.SuperExpressionContext = SuperExpressionContext;

class IdentifierExpressionContext extends Selectable_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterIdentifierExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitIdentifierExpression(this);
		}
	}


}

MParser.IdentifierExpressionContext = IdentifierExpressionContext;

class Instance_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_instance_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SelectorExpressionContext extends Instance_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Instance_expressionContext;
        this.selector = null; // Instance_selectorContext;
        super.copyFrom(ctx);
    }

	instance_expression() {
	    return this.getTypedRuleContext(Instance_expressionContext,0);
	};

	instance_selector() {
	    return this.getTypedRuleContext(Instance_selectorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSelectorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSelectorExpression(this);
		}
	}


}

MParser.SelectorExpressionContext = SelectorExpressionContext;

class SelectableExpressionContext extends Instance_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Selectable_expressionContext;
        super.copyFrom(ctx);
    }

	selectable_expression() {
	    return this.getTypedRuleContext(Selectable_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSelectableExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSelectableExpression(this);
		}
	}


}

MParser.SelectableExpressionContext = SelectableExpressionContext;

class Mutable_instance_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_mutable_instance_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class MutableSelectableExpressionContext extends Mutable_instance_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	MUTABLE() {
	    return this.getToken(MParser.MUTABLE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMutableSelectableExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMutableSelectableExpression(this);
		}
	}


}

MParser.MutableSelectableExpressionContext = MutableSelectableExpressionContext;

class MutableSelectorExpressionContext extends Mutable_instance_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Mutable_instance_expressionContext;
        this.selector = null; // Instance_selectorContext;
        super.copyFrom(ctx);
    }

	mutable_instance_expression() {
	    return this.getTypedRuleContext(Mutable_instance_expressionContext,0);
	};

	instance_selector() {
	    return this.getTypedRuleContext(Instance_selectorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMutableSelectorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMutableSelectorExpression(this);
		}
	}


}

MParser.MutableSelectorExpressionContext = MutableSelectorExpressionContext;

class Method_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_method_expression;
    }

	blob_expression() {
	    return this.getTypedRuleContext(Blob_expressionContext,0);
	};

	document_expression() {
	    return this.getTypedRuleContext(Document_expressionContext,0);
	};

	fetch_expression() {
	    return this.getTypedRuleContext(Fetch_expressionContext,0);
	};

	read_blob_expression() {
	    return this.getTypedRuleContext(Read_blob_expressionContext,0);
	};

	read_all_expression() {
	    return this.getTypedRuleContext(Read_all_expressionContext,0);
	};

	read_one_expression() {
	    return this.getTypedRuleContext(Read_one_expressionContext,0);
	};

	sorted_expression() {
	    return this.getTypedRuleContext(Sorted_expressionContext,0);
	};

	method_call_expression() {
	    return this.getTypedRuleContext(Method_call_expressionContext,0);
	};

	constructor_expression() {
	    return this.getTypedRuleContext(Constructor_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMethod_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMethod_expression(this);
		}
	}


}



class Instance_selectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_instance_selector;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SliceSelectorContext extends Instance_selectorContext {

    constructor(parser, ctx) {
        super(parser);
        this.xslice = null; // Slice_argumentsContext;
        super.copyFrom(ctx);
    }

	LBRAK() {
	    return this.getToken(MParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(MParser.RBRAK, 0);
	};

	slice_arguments() {
	    return this.getTypedRuleContext(Slice_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSliceSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSliceSelector(this);
		}
	}


}

MParser.SliceSelectorContext = SliceSelectorContext;

class MethodSelectorContext extends Instance_selectorContext {

    constructor(parser, ctx) {
        super(parser);
        this.method = null; // Method_call_expressionContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(MParser.DOT, 0);
	};

	method_call_expression() {
	    return this.getTypedRuleContext(Method_call_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMethodSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMethodSelector(this);
		}
	}


}

MParser.MethodSelectorContext = MethodSelectorContext;

class MemberSelectorContext extends Instance_selectorContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Member_identifierContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(MParser.DOT, 0);
	};

	member_identifier() {
	    return this.getTypedRuleContext(Member_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMemberSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMemberSelector(this);
		}
	}


}

MParser.MemberSelectorContext = MemberSelectorContext;

class ItemSelectorContext extends Instance_selectorContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	LBRAK() {
	    return this.getToken(MParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(MParser.RBRAK, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterItemSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitItemSelector(this);
		}
	}


}

MParser.ItemSelectorContext = ItemSelectorContext;

class Blob_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_blob_expression;
    }

	BLOB() {
	    return this.getToken(MParser.BLOB, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterBlob_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitBlob_expression(this);
		}
	}


}



class Document_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_document_expression;
        this.exp = null; // ExpressionContext
    }

	DOCUMENT() {
	    return this.getToken(MParser.DOCUMENT, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	FROM() {
	    return this.getToken(MParser.FROM, 0);
	};

	EQ() {
	    return this.getToken(MParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDocument_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDocument_expression(this);
		}
	}


}



class Constructor_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_constructor_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ConstructorFromContext extends Constructor_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.typ = null; // Mutable_category_typeContext;
        this.copyExp = null; // Copy_fromContext;
        this.args = null; // Argument_assignment_listContext;
        super.copyFrom(ctx);
    }

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	mutable_category_type() {
	    return this.getTypedRuleContext(Mutable_category_typeContext,0);
	};

	copy_from() {
	    return this.getTypedRuleContext(Copy_fromContext,0);
	};

	COMMA() {
	    return this.getToken(MParser.COMMA, 0);
	};

	argument_assignment_list() {
	    return this.getTypedRuleContext(Argument_assignment_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterConstructorFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitConstructorFrom(this);
		}
	}


}

MParser.ConstructorFromContext = ConstructorFromContext;

class ConstructorNoFromContext extends Constructor_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.typ = null; // Mutable_category_typeContext;
        this.args = null; // Argument_assignment_listContext;
        super.copyFrom(ctx);
    }

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	mutable_category_type() {
	    return this.getTypedRuleContext(Mutable_category_typeContext,0);
	};

	argument_assignment_list() {
	    return this.getTypedRuleContext(Argument_assignment_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterConstructorNoFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitConstructorNoFrom(this);
		}
	}


}

MParser.ConstructorNoFromContext = ConstructorNoFromContext;

class Copy_fromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_copy_from;
        this.exp = null; // ExpressionContext
    }

	FROM() {
	    return this.getToken(MParser.FROM, 0);
	};

	assign() {
	    return this.getTypedRuleContext(AssignContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCopy_from(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCopy_from(this);
		}
	}


}



class Argument_assignment_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_argument_assignment_list;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExpressionAssignmentListContext extends Argument_assignment_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterExpressionAssignmentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitExpressionAssignmentList(this);
		}
	}


}

MParser.ExpressionAssignmentListContext = ExpressionAssignmentListContext;

class ArgumentAssignmentListContext extends Argument_assignment_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.item = null; // Argument_assignmentContext;
        super.copyFrom(ctx);
    }

	argument_assignment() {
	    return this.getTypedRuleContext(Argument_assignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterArgumentAssignmentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitArgumentAssignmentList(this);
		}
	}


}

MParser.ArgumentAssignmentListContext = ArgumentAssignmentListContext;

class ArgumentAssignmentListItemContext extends Argument_assignment_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // Argument_assignment_listContext;
        this.item = null; // Argument_assignmentContext;
        super.copyFrom(ctx);
    }

	COMMA() {
	    return this.getToken(MParser.COMMA, 0);
	};

	argument_assignment_list() {
	    return this.getTypedRuleContext(Argument_assignment_listContext,0);
	};

	argument_assignment() {
	    return this.getTypedRuleContext(Argument_assignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterArgumentAssignmentListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitArgumentAssignmentListItem(this);
		}
	}


}

MParser.ArgumentAssignmentListItemContext = ArgumentAssignmentListItemContext;

class Argument_assignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_argument_assignment;
        this.name = null; // Variable_identifierContext
        this.exp = null; // ExpressionContext
    }

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	assign() {
	    return this.getTypedRuleContext(AssignContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterArgument_assignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitArgument_assignment(this);
		}
	}


}



class Write_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_write_statement;
        this.what = null; // ExpressionContext
        this.target = null; // ExpressionContext
    }

	WRITE() {
	    return this.getToken(MParser.WRITE, 0);
	};

	TO() {
	    return this.getToken(MParser.TO, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	then() {
	    return this.getTypedRuleContext(ThenContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterWrite_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitWrite_statement(this);
		}
	}


}



class Filtered_list_suffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_filtered_list_suffix;
        this.name = null; // Variable_identifierContext
        this.predicate = null; // ExpressionContext
    }

	FILTERED() {
	    return this.getToken(MParser.FILTERED, 0);
	};

	WHERE() {
	    return this.getToken(MParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	WITH() {
	    return this.getToken(MParser.WITH, 0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterFiltered_list_suffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitFiltered_list_suffix(this);
		}
	}


}



class Fetch_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_fetch_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class FetchOneContext extends Fetch_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.typ = null; // Mutable_category_typeContext;
        this.predicate = null; // ExpressionContext;
        this.include = null; // Include_listContext;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(MParser.FETCH, 0);
	};

	ONE() {
	    return this.getToken(MParser.ONE, 0);
	};

	WHERE() {
	    return this.getToken(MParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	INCLUDE() {
	    return this.getToken(MParser.INCLUDE, 0);
	};

	mutable_category_type() {
	    return this.getTypedRuleContext(Mutable_category_typeContext,0);
	};

	include_list() {
	    return this.getTypedRuleContext(Include_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterFetchOne(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitFetchOne(this);
		}
	}


}

MParser.FetchOneContext = FetchOneContext;

class FetchManyContext extends Fetch_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.xstart = null; // ExpressionContext;
        this.xstop = null; // ExpressionContext;
        this.typ = null; // Mutable_category_typeContext;
        this.predicate = null; // ExpressionContext;
        this.include = null; // Include_listContext;
        this.orderby = null; // Order_by_listContext;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(MParser.FETCH, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	ALL() {
	    return this.getToken(MParser.ALL, 0);
	};

	ROWS() {
	    return this.getToken(MParser.ROWS, 0);
	};

	TO() {
	    return this.getToken(MParser.TO, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	WHERE() {
	    return this.getToken(MParser.WHERE, 0);
	};

	INCLUDE() {
	    return this.getToken(MParser.INCLUDE, 0);
	};

	ORDER() {
	    return this.getToken(MParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(MParser.BY, 0);
	};

	mutable_category_type() {
	    return this.getTypedRuleContext(Mutable_category_typeContext,0);
	};

	include_list() {
	    return this.getTypedRuleContext(Include_listContext,0);
	};

	order_by_list() {
	    return this.getTypedRuleContext(Order_by_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterFetchMany(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitFetchMany(this);
		}
	}


}

MParser.FetchManyContext = FetchManyContext;

class Fetch_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_fetch_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class FetchManyAsyncContext extends Fetch_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.xstart = null; // ExpressionContext;
        this.xstop = null; // ExpressionContext;
        this.typ = null; // Mutable_category_typeContext;
        this.predicate = null; // ExpressionContext;
        this.include = null; // Include_listContext;
        this.orderby = null; // Order_by_listContext;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(MParser.FETCH, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	then() {
	    return this.getTypedRuleContext(ThenContext,0);
	};

	ALL() {
	    return this.getToken(MParser.ALL, 0);
	};

	ROWS() {
	    return this.getToken(MParser.ROWS, 0);
	};

	TO() {
	    return this.getToken(MParser.TO, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	WHERE() {
	    return this.getToken(MParser.WHERE, 0);
	};

	INCLUDE() {
	    return this.getToken(MParser.INCLUDE, 0);
	};

	ORDER() {
	    return this.getToken(MParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(MParser.BY, 0);
	};

	mutable_category_type() {
	    return this.getTypedRuleContext(Mutable_category_typeContext,0);
	};

	include_list() {
	    return this.getTypedRuleContext(Include_listContext,0);
	};

	order_by_list() {
	    return this.getTypedRuleContext(Order_by_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterFetchManyAsync(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitFetchManyAsync(this);
		}
	}


}

MParser.FetchManyAsyncContext = FetchManyAsyncContext;

class FetchOneAsyncContext extends Fetch_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.typ = null; // Mutable_category_typeContext;
        this.predicate = null; // ExpressionContext;
        this.include = null; // Include_listContext;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(MParser.FETCH, 0);
	};

	ONE() {
	    return this.getToken(MParser.ONE, 0);
	};

	WHERE() {
	    return this.getToken(MParser.WHERE, 0);
	};

	then() {
	    return this.getTypedRuleContext(ThenContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	INCLUDE() {
	    return this.getToken(MParser.INCLUDE, 0);
	};

	mutable_category_type() {
	    return this.getTypedRuleContext(Mutable_category_typeContext,0);
	};

	include_list() {
	    return this.getTypedRuleContext(Include_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterFetchOneAsync(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitFetchOneAsync(this);
		}
	}


}

MParser.FetchOneAsyncContext = FetchOneAsyncContext;

class ThenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_then;
        this.name = null; // Variable_identifierContext
        this.stmts = null; // Statement_listContext
    }

	THEN() {
	    return this.getToken(MParser.THEN, 0);
	};

	WITH() {
	    return this.getToken(MParser.WITH, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterThen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitThen(this);
		}
	}


}



class Read_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_read_statement;
        this.source = null; // ExpressionContext
    }

	READ() {
	    return this.getToken(MParser.READ, 0);
	};

	ALL() {
	    return this.getToken(MParser.ALL, 0);
	};

	FROM() {
	    return this.getToken(MParser.FROM, 0);
	};

	then() {
	    return this.getTypedRuleContext(ThenContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterRead_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitRead_statement(this);
		}
	}


}



class Sorted_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_sorted_expression;
        this.source = null; // Instance_expressionContext
        this.key = null; // Sorted_keyContext
    }

	SORTED() {
	    return this.getToken(MParser.SORTED, 0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	instance_expression() {
	    return this.getTypedRuleContext(Instance_expressionContext,0);
	};

	DESC() {
	    return this.getToken(MParser.DESC, 0);
	};

	COMMA() {
	    return this.getToken(MParser.COMMA, 0);
	};

	key_token() {
	    return this.getTypedRuleContext(Key_tokenContext,0);
	};

	EQ() {
	    return this.getToken(MParser.EQ, 0);
	};

	sorted_key() {
	    return this.getTypedRuleContext(Sorted_keyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSorted_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSorted_expression(this);
		}
	}


}



class Assign_instance_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_assign_instance_statement;
        this.inst = null; // Assignable_instanceContext
        this.exp = null; // ExpressionContext
    }

	assign() {
	    return this.getTypedRuleContext(AssignContext,0);
	};

	assignable_instance() {
	    return this.getTypedRuleContext(Assignable_instanceContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAssign_instance_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAssign_instance_statement(this);
		}
	}


}



class Child_instanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_child_instance;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class MemberInstanceContext extends Child_instanceContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Variable_identifierContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(MParser.DOT, 0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMemberInstance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMemberInstance(this);
		}
	}


}

MParser.MemberInstanceContext = MemberInstanceContext;

class ItemInstanceContext extends Child_instanceContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	LBRAK() {
	    return this.getToken(MParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(MParser.RBRAK, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterItemInstance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitItemInstance(this);
		}
	}


}

MParser.ItemInstanceContext = ItemInstanceContext;

class Assign_tuple_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_assign_tuple_statement;
        this.items = null; // Variable_identifier_listContext
        this.exp = null; // ExpressionContext
    }

	assign() {
	    return this.getTypedRuleContext(AssignContext,0);
	};

	variable_identifier_list() {
	    return this.getTypedRuleContext(Variable_identifier_listContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAssign_tuple_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAssign_tuple_statement(this);
		}
	}


}



class LfsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_lfs;
    }

	LF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.LF);
	    } else {
	        return this.getToken(MParser.LF, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterLfs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitLfs(this);
		}
	}


}



class LfpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_lfp;
    }

	LF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.LF);
	    } else {
	        return this.getToken(MParser.LF, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterLfp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitLfp(this);
		}
	}


}



class Ws_plusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_ws_plus;
    }

	LF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.LF);
	    } else {
	        return this.getToken(MParser.LF, i);
	    }
	};


	TAB = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.TAB);
	    } else {
	        return this.getToken(MParser.TAB, i);
	    }
	};


	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.WS);
	    } else {
	        return this.getToken(MParser.WS, i);
	    }
	};


	INDENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.INDENT);
	    } else {
	        return this.getToken(MParser.INDENT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterWs_plus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitWs_plus(this);
		}
	}


}



class IndentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_indent;
    }

	INDENT() {
	    return this.getToken(MParser.INDENT, 0);
	};

	LF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.LF);
	    } else {
	        return this.getToken(MParser.LF, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterIndent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitIndent(this);
		}
	}


}



class DedentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_dedent;
    }

	DEDENT() {
	    return this.getToken(MParser.DEDENT, 0);
	};

	LF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.LF);
	    } else {
	        return this.getToken(MParser.LF, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDedent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDedent(this);
		}
	}


}



class Type_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_type_literal;
    }

	category_or_any_type() {
	    return this.getTypedRuleContext(Category_or_any_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterType_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitType_literal(this);
		}
	}


}



class Null_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_null_literal;
    }

	NONE() {
	    return this.getToken(MParser.NONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNull_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNull_literal(this);
		}
	}


}



class Comment_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_comment_statement;
    }

	COMMENT() {
	    return this.getToken(MParser.COMMENT, 0);
	};

	CSS_DATA() {
	    return this.getToken(MParser.CSS_DATA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterComment_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitComment_statement(this);
		}
	}


}



class ReplContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_repl;
    }

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterRepl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitRepl(this);
		}
	}


}



class Declaration_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_declaration_list;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class FullDeclarationListContext extends Declaration_listContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	lfs = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfsContext);
	    } else {
	        return this.getTypedRuleContext(LfsContext,i);
	    }
	};

	EOF() {
	    return this.getToken(MParser.EOF, 0);
	};

	declarations() {
	    return this.getTypedRuleContext(DeclarationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterFullDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitFullDeclarationList(this);
		}
	}


}

MParser.FullDeclarationListContext = FullDeclarationListContext;

class DeclarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_declarations;
    }

	declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDeclarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDeclarations(this);
		}
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_declaration;
    }

	attribute_declaration() {
	    return this.getTypedRuleContext(Attribute_declarationContext,0);
	};

	category_declaration() {
	    return this.getTypedRuleContext(Category_declarationContext,0);
	};

	resource_declaration() {
	    return this.getTypedRuleContext(Resource_declarationContext,0);
	};

	enum_declaration() {
	    return this.getTypedRuleContext(Enum_declarationContext,0);
	};

	widget_declaration() {
	    return this.getTypedRuleContext(Widget_declarationContext,0);
	};

	method_declaration() {
	    return this.getTypedRuleContext(Method_declarationContext,0);
	};

	comment_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Comment_statementContext);
	    } else {
	        return this.getTypedRuleContext(Comment_statementContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	annotation_constructor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Annotation_constructorContext);
	    } else {
	        return this.getTypedRuleContext(Annotation_constructorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDeclaration(this);
		}
	}


}



class Annotation_constructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_annotation_constructor;
        this.name = null; // Annotation_identifierContext
        this.exp = null; // Annotation_argument_valueContext
    }

	annotation_identifier() {
	    return this.getTypedRuleContext(Annotation_identifierContext,0);
	};

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	annotation_argument_value() {
	    return this.getTypedRuleContext(Annotation_argument_valueContext,0);
	};

	annotation_argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Annotation_argumentContext);
	    } else {
	        return this.getTypedRuleContext(Annotation_argumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.COMMA);
	    } else {
	        return this.getToken(MParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAnnotation_constructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAnnotation_constructor(this);
		}
	}


}



class Annotation_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_annotation_identifier;
    }

	ARONDBASE_IDENTIFIER() {
	    return this.getToken(MParser.ARONDBASE_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAnnotation_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAnnotation_identifier(this);
		}
	}


}



class Annotation_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_annotation_argument;
        this.name = null; // Annotation_argument_nameContext
        this.exp = null; // Annotation_argument_valueContext
    }

	EQ() {
	    return this.getToken(MParser.EQ, 0);
	};

	annotation_argument_name() {
	    return this.getTypedRuleContext(Annotation_argument_nameContext,0);
	};

	annotation_argument_value() {
	    return this.getTypedRuleContext(Annotation_argument_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAnnotation_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAnnotation_argument(this);
		}
	}


}



class Annotation_argument_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_annotation_argument_name;
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
	};

	GETTER() {
	    return this.getToken(MParser.GETTER, 0);
	};

	SETTER() {
	    return this.getToken(MParser.SETTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAnnotation_argument_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAnnotation_argument_name(this);
		}
	}


}



class Annotation_argument_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_annotation_argument_value;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AnnotationLiteralValueContext extends Annotation_argument_valueContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Literal_expressionContext;
        super.copyFrom(ctx);
    }

	literal_expression() {
	    return this.getTypedRuleContext(Literal_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAnnotationLiteralValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAnnotationLiteralValue(this);
		}
	}


}

MParser.AnnotationLiteralValueContext = AnnotationLiteralValueContext;

class AnnotationTypeValueContext extends Annotation_argument_valueContext {

    constructor(parser, ctx) {
        super(parser);
        this.typ = null; // Primary_typeContext;
        super.copyFrom(ctx);
    }

	primary_type() {
	    return this.getTypedRuleContext(Primary_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAnnotationTypeValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAnnotationTypeValue(this);
		}
	}


}

MParser.AnnotationTypeValueContext = AnnotationTypeValueContext;

class Resource_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_resource_declaration;
    }

	native_resource_declaration() {
	    return this.getTypedRuleContext(Native_resource_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterResource_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitResource_declaration(this);
		}
	}


}



class Enum_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_enum_declaration;
    }

	enum_category_declaration() {
	    return this.getTypedRuleContext(Enum_category_declarationContext,0);
	};

	enum_native_declaration() {
	    return this.getTypedRuleContext(Enum_native_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterEnum_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitEnum_declaration(this);
		}
	}


}



class Native_symbol_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_native_symbol_list;
    }

	native_symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Native_symbolContext);
	    } else {
	        return this.getTypedRuleContext(Native_symbolContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNative_symbol_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNative_symbol_list(this);
		}
	}


}



class Category_symbol_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_category_symbol_list;
    }

	category_symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Category_symbolContext);
	    } else {
	        return this.getTypedRuleContext(Category_symbolContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCategory_symbol_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCategory_symbol_list(this);
		}
	}


}



class Symbol_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_symbol_list;
    }

	symbol_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Symbol_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Symbol_identifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.COMMA);
	    } else {
	        return this.getToken(MParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSymbol_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSymbol_list(this);
		}
	}


}



class Attribute_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_attribute_constraint;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class MatchingSetContext extends Attribute_constraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.source = null; // Set_literalContext;
        super.copyFrom(ctx);
    }

	IN() {
	    return this.getToken(MParser.IN, 0);
	};

	set_literal() {
	    return this.getTypedRuleContext(Set_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMatchingSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMatchingSet(this);
		}
	}


}

MParser.MatchingSetContext = MatchingSetContext;

class MatchingPatternContext extends Attribute_constraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.text = null; // Token;
        super.copyFrom(ctx);
    }

	MATCHING() {
	    return this.getToken(MParser.MATCHING, 0);
	};

	TEXT_LITERAL() {
	    return this.getToken(MParser.TEXT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMatchingPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMatchingPattern(this);
		}
	}


}

MParser.MatchingPatternContext = MatchingPatternContext;

class MatchingListContext extends Attribute_constraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.source = null; // List_literalContext;
        super.copyFrom(ctx);
    }

	IN() {
	    return this.getToken(MParser.IN, 0);
	};

	list_literal() {
	    return this.getTypedRuleContext(List_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMatchingList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMatchingList(this);
		}
	}


}

MParser.MatchingListContext = MatchingListContext;

class MatchingRangeContext extends Attribute_constraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.source = null; // Range_literalContext;
        super.copyFrom(ctx);
    }

	IN() {
	    return this.getToken(MParser.IN, 0);
	};

	range_literal() {
	    return this.getTypedRuleContext(Range_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMatchingRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMatchingRange(this);
		}
	}


}

MParser.MatchingRangeContext = MatchingRangeContext;

class MatchingExpressionContext extends Attribute_constraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	MATCHING() {
	    return this.getToken(MParser.MATCHING, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMatchingExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMatchingExpression(this);
		}
	}


}

MParser.MatchingExpressionContext = MatchingExpressionContext;

class List_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_list_literal;
    }

	LBRAK() {
	    return this.getToken(MParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(MParser.RBRAK, 0);
	};

	MUTABLE() {
	    return this.getToken(MParser.MUTABLE, 0);
	};

	expression_list() {
	    return this.getTypedRuleContext(Expression_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterList_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitList_literal(this);
		}
	}


}



class Set_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_set_literal;
    }

	LT() {
	    return this.getToken(MParser.LT, 0);
	};

	GT() {
	    return this.getToken(MParser.GT, 0);
	};

	MUTABLE() {
	    return this.getToken(MParser.MUTABLE, 0);
	};

	expression_list() {
	    return this.getTypedRuleContext(Expression_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSet_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSet_literal(this);
		}
	}


}



class Expression_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_expression_list;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.COMMA);
	    } else {
	        return this.getToken(MParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterExpression_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitExpression_list(this);
		}
	}


}



class Range_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_range_literal;
        this.low = null; // ExpressionContext
        this.high = null; // ExpressionContext
    }

	LBRAK() {
	    return this.getToken(MParser.LBRAK, 0);
	};

	RANGE() {
	    return this.getToken(MParser.RANGE, 0);
	};

	RBRAK() {
	    return this.getToken(MParser.RBRAK, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterRange_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitRange_literal(this);
		}
	}


}



class TypedefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_typedef;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class IteratorTypeContext extends TypedefContext {

    constructor(parser, ctx) {
        super(parser);
        this.i = null; // TypedefContext;
        super.copyFrom(ctx);
    }

	ITERATOR() {
	    return this.getToken(MParser.ITERATOR, 0);
	};

	LT() {
	    return this.getToken(MParser.LT, 0);
	};

	GT() {
	    return this.getToken(MParser.GT, 0);
	};

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterIteratorType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitIteratorType(this);
		}
	}


}

MParser.IteratorTypeContext = IteratorTypeContext;

class SetTypeContext extends TypedefContext {

    constructor(parser, ctx) {
        super(parser);
        this.s = null; // TypedefContext;
        super.copyFrom(ctx);
    }

	LTGT() {
	    return this.getToken(MParser.LTGT, 0);
	};

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSetType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSetType(this);
		}
	}


}

MParser.SetTypeContext = SetTypeContext;

class ListTypeContext extends TypedefContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // TypedefContext;
        super.copyFrom(ctx);
    }

	LBRAK() {
	    return this.getToken(MParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(MParser.RBRAK, 0);
	};

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterListType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitListType(this);
		}
	}


}

MParser.ListTypeContext = ListTypeContext;

class DictTypeContext extends TypedefContext {

    constructor(parser, ctx) {
        super(parser);
        this.d = null; // TypedefContext;
        super.copyFrom(ctx);
    }

	LTCOLONGT() {
	    return this.getToken(MParser.LTCOLONGT, 0);
	};

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDictType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDictType(this);
		}
	}


}

MParser.DictTypeContext = DictTypeContext;

class CursorTypeContext extends TypedefContext {

    constructor(parser, ctx) {
        super(parser);
        this.c = null; // TypedefContext;
        super.copyFrom(ctx);
    }

	CURSOR() {
	    return this.getToken(MParser.CURSOR, 0);
	};

	LT() {
	    return this.getToken(MParser.LT, 0);
	};

	GT() {
	    return this.getToken(MParser.GT, 0);
	};

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCursorType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCursorType(this);
		}
	}


}

MParser.CursorTypeContext = CursorTypeContext;

class TypeTypeContext extends TypedefContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // TypedefContext;
        super.copyFrom(ctx);
    }

	TYPE() {
	    return this.getToken(MParser.TYPE, 0);
	};

	LT() {
	    return this.getToken(MParser.LT, 0);
	};

	GT() {
	    return this.getToken(MParser.GT, 0);
	};

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterTypeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitTypeType(this);
		}
	}


}

MParser.TypeTypeContext = TypeTypeContext;

class PrimaryTypeContext extends TypedefContext {

    constructor(parser, ctx) {
        super(parser);
        this.p = null; // Primary_typeContext;
        super.copyFrom(ctx);
    }

	primary_type() {
	    return this.getTypedRuleContext(Primary_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPrimaryType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPrimaryType(this);
		}
	}


}

MParser.PrimaryTypeContext = PrimaryTypeContext;

class Primary_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_primary_type;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class NativeTypeContext extends Primary_typeContext {

    constructor(parser, ctx) {
        super(parser);
        this.n = null; // Native_typeContext;
        super.copyFrom(ctx);
    }

	native_type() {
	    return this.getTypedRuleContext(Native_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNativeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNativeType(this);
		}
	}


}

MParser.NativeTypeContext = NativeTypeContext;

class CategoryTypeContext extends Primary_typeContext {

    constructor(parser, ctx) {
        super(parser);
        this.c = null; // Category_typeContext;
        super.copyFrom(ctx);
    }

	category_type() {
	    return this.getTypedRuleContext(Category_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCategoryType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCategoryType(this);
		}
	}


}

MParser.CategoryTypeContext = CategoryTypeContext;

class Native_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_native_type;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PeriodTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PERIOD() {
	    return this.getToken(MParser.PERIOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPeriodType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPeriodType(this);
		}
	}


}

MParser.PeriodTypeContext = PeriodTypeContext;

class HtmlTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	HTML() {
	    return this.getToken(MParser.HTML, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterHtmlType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitHtmlType(this);
		}
	}


}

MParser.HtmlTypeContext = HtmlTypeContext;

class CssTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CSS() {
	    return this.getToken(MParser.CSS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCssType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCssType(this);
		}
	}


}

MParser.CssTypeContext = CssTypeContext;

class BooleanTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BOOLEAN() {
	    return this.getToken(MParser.BOOLEAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterBooleanType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitBooleanType(this);
		}
	}


}

MParser.BooleanTypeContext = BooleanTypeContext;

class DocumentTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DOCUMENT() {
	    return this.getToken(MParser.DOCUMENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDocumentType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDocumentType(this);
		}
	}


}

MParser.DocumentTypeContext = DocumentTypeContext;

class CharacterTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHARACTER() {
	    return this.getToken(MParser.CHARACTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCharacterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCharacterType(this);
		}
	}


}

MParser.CharacterTypeContext = CharacterTypeContext;

class VersionTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VERSION() {
	    return this.getToken(MParser.VERSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterVersionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitVersionType(this);
		}
	}


}

MParser.VersionTypeContext = VersionTypeContext;

class TextTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TEXT() {
	    return this.getToken(MParser.TEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterTextType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitTextType(this);
		}
	}


}

MParser.TextTypeContext = TextTypeContext;

class ImageTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IMAGE() {
	    return this.getToken(MParser.IMAGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterImageType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitImageType(this);
		}
	}


}

MParser.ImageTypeContext = ImageTypeContext;

class TimeTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TIME() {
	    return this.getToken(MParser.TIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterTimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitTimeType(this);
		}
	}


}

MParser.TimeTypeContext = TimeTypeContext;

class IntegerTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTEGER() {
	    return this.getToken(MParser.INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterIntegerType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitIntegerType(this);
		}
	}


}

MParser.IntegerTypeContext = IntegerTypeContext;

class DateTimeTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DATETIME() {
	    return this.getToken(MParser.DATETIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDateTimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDateTimeType(this);
		}
	}


}

MParser.DateTimeTypeContext = DateTimeTypeContext;

class BlobTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BLOB() {
	    return this.getToken(MParser.BLOB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterBlobType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitBlobType(this);
		}
	}


}

MParser.BlobTypeContext = BlobTypeContext;

class UUIDTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UUID() {
	    return this.getToken(MParser.UUID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterUUIDType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitUUIDType(this);
		}
	}


}

MParser.UUIDTypeContext = UUIDTypeContext;

class DecimalTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DECIMAL() {
	    return this.getToken(MParser.DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDecimalType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDecimalType(this);
		}
	}


}

MParser.DecimalTypeContext = DecimalTypeContext;

class CodeTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CODE() {
	    return this.getToken(MParser.CODE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCodeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCodeType(this);
		}
	}


}

MParser.CodeTypeContext = CodeTypeContext;

class DateTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DATE() {
	    return this.getToken(MParser.DATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDateType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDateType(this);
		}
	}


}

MParser.DateTypeContext = DateTypeContext;

class DbIdTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DBID() {
	    return this.getToken(MParser.DBID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDbIdType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDbIdType(this);
		}
	}


}

MParser.DbIdTypeContext = DbIdTypeContext;

class Category_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_category_type;
        this.t1 = null; // Token
    }

	TYPE_IDENTIFIER() {
	    return this.getToken(MParser.TYPE_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCategory_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCategory_type(this);
		}
	}


}



class Mutable_category_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_mutable_category_type;
    }

	category_type() {
	    return this.getTypedRuleContext(Category_typeContext,0);
	};

	MUTABLE() {
	    return this.getToken(MParser.MUTABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMutable_category_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMutable_category_type(this);
		}
	}


}



class Code_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_code_type;
        this.t1 = null; // Token
    }

	CODE() {
	    return this.getToken(MParser.CODE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCode_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCode_type(this);
		}
	}


}



class Category_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_category_declaration;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ConcreteCategoryDeclarationContext extends Category_declarationContext {

    constructor(parser, ctx) {
        super(parser);
        this.decl = null; // Concrete_category_declarationContext;
        super.copyFrom(ctx);
    }

	concrete_category_declaration() {
	    return this.getTypedRuleContext(Concrete_category_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterConcreteCategoryDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitConcreteCategoryDeclaration(this);
		}
	}


}

MParser.ConcreteCategoryDeclarationContext = ConcreteCategoryDeclarationContext;

class NativeCategoryDeclarationContext extends Category_declarationContext {

    constructor(parser, ctx) {
        super(parser);
        this.decl = null; // Native_category_declarationContext;
        super.copyFrom(ctx);
    }

	native_category_declaration() {
	    return this.getTypedRuleContext(Native_category_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNativeCategoryDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNativeCategoryDeclaration(this);
		}
	}


}

MParser.NativeCategoryDeclarationContext = NativeCategoryDeclarationContext;

class SingletonCategoryDeclarationContext extends Category_declarationContext {

    constructor(parser, ctx) {
        super(parser);
        this.decl = null; // Singleton_category_declarationContext;
        super.copyFrom(ctx);
    }

	singleton_category_declaration() {
	    return this.getTypedRuleContext(Singleton_category_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSingletonCategoryDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSingletonCategoryDeclaration(this);
		}
	}


}

MParser.SingletonCategoryDeclarationContext = SingletonCategoryDeclarationContext;

class Widget_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_widget_declaration;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ConcreteWidgetDeclarationContext extends Widget_declarationContext {

    constructor(parser, ctx) {
        super(parser);
        this.decl = null; // Concrete_widget_declarationContext;
        super.copyFrom(ctx);
    }

	concrete_widget_declaration() {
	    return this.getTypedRuleContext(Concrete_widget_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterConcreteWidgetDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitConcreteWidgetDeclaration(this);
		}
	}


}

MParser.ConcreteWidgetDeclarationContext = ConcreteWidgetDeclarationContext;

class NativeWidgetDeclarationContext extends Widget_declarationContext {

    constructor(parser, ctx) {
        super(parser);
        this.decl = null; // Native_widget_declarationContext;
        super.copyFrom(ctx);
    }

	native_widget_declaration() {
	    return this.getTypedRuleContext(Native_widget_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNativeWidgetDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNativeWidgetDeclaration(this);
		}
	}


}

MParser.NativeWidgetDeclarationContext = NativeWidgetDeclarationContext;

class Type_identifier_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_type_identifier_list;
    }

	type_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Type_identifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.COMMA);
	    } else {
	        return this.getToken(MParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterType_identifier_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitType_identifier_list(this);
		}
	}


}



class Method_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_method_identifier;
    }

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMethod_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMethod_identifier(this);
		}
	}


}



class Identifier_or_keywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_identifier_or_keyword;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterIdentifier_or_keyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitIdentifier_or_keyword(this);
		}
	}


}



class Nospace_hyphen_identifier_or_keywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_nospace_hyphen_identifier_or_keyword;
    }

	MINUS() {
	    return this.getToken(MParser.MINUS, 0);
	};

	nospace_identifier_or_keyword() {
	    return this.getTypedRuleContext(Nospace_identifier_or_keywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNospace_hyphen_identifier_or_keyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNospace_hyphen_identifier_or_keyword(this);
		}
	}


}



class Nospace_identifier_or_keywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_nospace_identifier_or_keyword;
    }

	identifier_or_keyword() {
	    return this.getTypedRuleContext(Identifier_or_keywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNospace_identifier_or_keyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNospace_identifier_or_keyword(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_identifier;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TypeIdentifierContext extends IdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterTypeIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitTypeIdentifier(this);
		}
	}


}

MParser.TypeIdentifierContext = TypeIdentifierContext;

class SymbolIdentifierContext extends IdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	symbol_identifier() {
	    return this.getTypedRuleContext(Symbol_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSymbolIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSymbolIdentifier(this);
		}
	}


}

MParser.SymbolIdentifierContext = SymbolIdentifierContext;

class VariableIdentifierContext extends IdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterVariableIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitVariableIdentifier(this);
		}
	}


}

MParser.VariableIdentifierContext = VariableIdentifierContext;

class Member_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_member_identifier;
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
	};

	CATEGORY() {
	    return this.getToken(MParser.CATEGORY, 0);
	};

	MUTABLE() {
	    return this.getToken(MParser.MUTABLE, 0);
	};

	STORABLE() {
	    return this.getToken(MParser.STORABLE, 0);
	};

	RESOURCE() {
	    return this.getToken(MParser.RESOURCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMember_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMember_identifier(this);
		}
	}


}



class Variable_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_variable_identifier;
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
	};

	CATEGORY() {
	    return this.getToken(MParser.CATEGORY, 0);
	};

	RESOURCE() {
	    return this.getToken(MParser.RESOURCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterVariable_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitVariable_identifier(this);
		}
	}


}



class Attribute_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_attribute_identifier;
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
	};

	STORABLE() {
	    return this.getToken(MParser.STORABLE, 0);
	};

	RESOURCE() {
	    return this.getToken(MParser.RESOURCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAttribute_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAttribute_identifier(this);
		}
	}


}



class Type_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_type_identifier;
    }

	TYPE_IDENTIFIER() {
	    return this.getToken(MParser.TYPE_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterType_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitType_identifier(this);
		}
	}


}



class Symbol_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_symbol_identifier;
    }

	SYMBOL_IDENTIFIER() {
	    return this.getToken(MParser.SYMBOL_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSymbol_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSymbol_identifier(this);
		}
	}


}



class Argument_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_argument_list;
    }

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.COMMA);
	    } else {
	        return this.getToken(MParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterArgument_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitArgument_list(this);
		}
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_argument;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class OperatorArgumentContext extends ArgumentContext {

    constructor(parser, ctx) {
        super(parser);
        this.arg = null; // Operator_argumentContext;
        super.copyFrom(ctx);
    }

	operator_argument() {
	    return this.getTypedRuleContext(Operator_argumentContext,0);
	};

	MUTABLE() {
	    return this.getToken(MParser.MUTABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterOperatorArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitOperatorArgument(this);
		}
	}


}

MParser.OperatorArgumentContext = OperatorArgumentContext;

class CodeArgumentContext extends ArgumentContext {

    constructor(parser, ctx) {
        super(parser);
        this.arg = null; // Code_argumentContext;
        super.copyFrom(ctx);
    }

	code_argument() {
	    return this.getTypedRuleContext(Code_argumentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCodeArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCodeArgument(this);
		}
	}


}

MParser.CodeArgumentContext = CodeArgumentContext;

class Operator_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_operator_argument;
    }

	named_argument() {
	    return this.getTypedRuleContext(Named_argumentContext,0);
	};

	typed_argument() {
	    return this.getTypedRuleContext(Typed_argumentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterOperator_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitOperator_argument(this);
		}
	}


}



class Named_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_named_argument;
    }

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	EQ() {
	    return this.getToken(MParser.EQ, 0);
	};

	literal_expression() {
	    return this.getTypedRuleContext(Literal_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNamed_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNamed_argument(this);
		}
	}


}



class Code_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_code_argument;
        this.name = null; // Variable_identifierContext
    }

	code_type() {
	    return this.getTypedRuleContext(Code_typeContext,0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCode_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCode_argument(this);
		}
	}


}



class Category_or_any_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_category_or_any_type;
    }

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	any_type() {
	    return this.getTypedRuleContext(Any_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCategory_or_any_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCategory_or_any_type(this);
		}
	}


}



class Any_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_any_type;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AnyListTypeContext extends Any_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	any_type() {
	    return this.getTypedRuleContext(Any_typeContext,0);
	};

	LBRAK() {
	    return this.getToken(MParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(MParser.RBRAK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAnyListType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAnyListType(this);
		}
	}


}

MParser.AnyListTypeContext = AnyListTypeContext;

class AnyTypeContext extends Any_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ANY() {
	    return this.getToken(MParser.ANY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAnyType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAnyType(this);
		}
	}


}

MParser.AnyTypeContext = AnyTypeContext;

class AnyDictTypeContext extends Any_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	any_type() {
	    return this.getTypedRuleContext(Any_typeContext,0);
	};

	LCURL() {
	    return this.getToken(MParser.LCURL, 0);
	};

	RCURL() {
	    return this.getToken(MParser.RCURL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAnyDictType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAnyDictType(this);
		}
	}


}

MParser.AnyDictTypeContext = AnyDictTypeContext;

class Member_method_declaration_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_member_method_declaration_list;
    }

	member_method_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Member_method_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Member_method_declarationContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMember_method_declaration_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMember_method_declaration_list(this);
		}
	}


}



class Member_method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_member_method_declaration;
    }

	setter_method_declaration() {
	    return this.getTypedRuleContext(Setter_method_declarationContext,0);
	};

	getter_method_declaration() {
	    return this.getTypedRuleContext(Getter_method_declarationContext,0);
	};

	concrete_method_declaration() {
	    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
	};

	abstract_method_declaration() {
	    return this.getTypedRuleContext(Abstract_method_declarationContext,0);
	};

	operator_method_declaration() {
	    return this.getTypedRuleContext(Operator_method_declarationContext,0);
	};

	comment_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Comment_statementContext);
	    } else {
	        return this.getTypedRuleContext(Comment_statementContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	annotation_constructor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Annotation_constructorContext);
	    } else {
	        return this.getTypedRuleContext(Annotation_constructorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMember_method_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMember_method_declaration(this);
		}
	}


}



class Native_member_method_declaration_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_native_member_method_declaration_list;
    }

	native_member_method_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Native_member_method_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Native_member_method_declarationContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNative_member_method_declaration_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNative_member_method_declaration_list(this);
		}
	}


}



class Native_member_method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_native_member_method_declaration;
    }

	native_getter_declaration() {
	    return this.getTypedRuleContext(Native_getter_declarationContext,0);
	};

	native_setter_declaration() {
	    return this.getTypedRuleContext(Native_setter_declarationContext,0);
	};

	native_method_declaration() {
	    return this.getTypedRuleContext(Native_method_declarationContext,0);
	};

	comment_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Comment_statementContext);
	    } else {
	        return this.getTypedRuleContext(Comment_statementContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	annotation_constructor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Annotation_constructorContext);
	    } else {
	        return this.getTypedRuleContext(Annotation_constructorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNative_member_method_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNative_member_method_declaration(this);
		}
	}


}



class Native_category_bindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_native_category_binding;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Python2CategoryBindingContext extends Native_category_bindingContext {

    constructor(parser, ctx) {
        super(parser);
        this.binding = null; // Python_category_bindingContext;
        super.copyFrom(ctx);
    }

	PYTHON2() {
	    return this.getToken(MParser.PYTHON2, 0);
	};

	python_category_binding() {
	    return this.getTypedRuleContext(Python_category_bindingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPython2CategoryBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPython2CategoryBinding(this);
		}
	}


}

MParser.Python2CategoryBindingContext = Python2CategoryBindingContext;

class Python3CategoryBindingContext extends Native_category_bindingContext {

    constructor(parser, ctx) {
        super(parser);
        this.binding = null; // Python_category_bindingContext;
        super.copyFrom(ctx);
    }

	PYTHON3() {
	    return this.getToken(MParser.PYTHON3, 0);
	};

	python_category_binding() {
	    return this.getTypedRuleContext(Python_category_bindingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPython3CategoryBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPython3CategoryBinding(this);
		}
	}


}

MParser.Python3CategoryBindingContext = Python3CategoryBindingContext;

class JavaCategoryBindingContext extends Native_category_bindingContext {

    constructor(parser, ctx) {
        super(parser);
        this.binding = null; // Java_class_identifier_expressionContext;
        super.copyFrom(ctx);
    }

	JAVA() {
	    return this.getToken(MParser.JAVA, 0);
	};

	java_class_identifier_expression() {
	    return this.getTypedRuleContext(Java_class_identifier_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavaCategoryBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavaCategoryBinding(this);
		}
	}


}

MParser.JavaCategoryBindingContext = JavaCategoryBindingContext;

class CSharpCategoryBindingContext extends Native_category_bindingContext {

    constructor(parser, ctx) {
        super(parser);
        this.binding = null; // Csharp_identifier_expressionContext;
        super.copyFrom(ctx);
    }

	CSHARP() {
	    return this.getToken(MParser.CSHARP, 0);
	};

	csharp_identifier_expression() {
	    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCSharpCategoryBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCSharpCategoryBinding(this);
		}
	}


}

MParser.CSharpCategoryBindingContext = CSharpCategoryBindingContext;

class JavascriptCategoryBindingContext extends Native_category_bindingContext {

    constructor(parser, ctx) {
        super(parser);
        this.binding = null; // Javascript_category_bindingContext;
        super.copyFrom(ctx);
    }

	JAVASCRIPT() {
	    return this.getToken(MParser.JAVASCRIPT, 0);
	};

	javascript_category_binding() {
	    return this.getTypedRuleContext(Javascript_category_bindingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascriptCategoryBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascriptCategoryBinding(this);
		}
	}


}

MParser.JavascriptCategoryBindingContext = JavascriptCategoryBindingContext;

class Python_category_bindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_python_category_binding;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	python_module() {
	    return this.getTypedRuleContext(Python_moduleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPython_category_binding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPython_category_binding(this);
		}
	}


}



class Python_moduleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_python_module;
    }

	FROM() {
	    return this.getToken(MParser.FROM, 0);
	};

	module_token() {
	    return this.getTypedRuleContext(Module_tokenContext,0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	python_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Python_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Python_identifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.DOT);
	    } else {
	        return this.getToken(MParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPython_module(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPython_module(this);
		}
	}


}



class Javascript_category_bindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_javascript_category_binding;
    }

	javascript_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Javascript_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Javascript_identifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.DOT);
	    } else {
	        return this.getToken(MParser.DOT, i);
	    }
	};


	javascript_module() {
	    return this.getTypedRuleContext(Javascript_moduleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascript_category_binding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascript_category_binding(this);
		}
	}


}



class Javascript_moduleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_javascript_module;
    }

	FROM() {
	    return this.getToken(MParser.FROM, 0);
	};

	module_token() {
	    return this.getTypedRuleContext(Module_tokenContext,0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	javascript_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Javascript_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Javascript_identifierContext,i);
	    }
	};

	SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.SLASH);
	    } else {
	        return this.getToken(MParser.SLASH, i);
	    }
	};


	DOT() {
	    return this.getToken(MParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascript_module(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascript_module(this);
		}
	}


}



class Variable_identifier_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_variable_identifier_list;
    }

	variable_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Variable_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Variable_identifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.COMMA);
	    } else {
	        return this.getToken(MParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterVariable_identifier_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitVariable_identifier_list(this);
		}
	}


}



class Attribute_identifier_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_attribute_identifier_list;
    }

	attribute_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Attribute_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Attribute_identifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.COMMA);
	    } else {
	        return this.getToken(MParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAttribute_identifier_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAttribute_identifier_list(this);
		}
	}


}



class Method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_method_declaration;
    }

	abstract_method_declaration() {
	    return this.getTypedRuleContext(Abstract_method_declarationContext,0);
	};

	concrete_method_declaration() {
	    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
	};

	native_method_declaration() {
	    return this.getTypedRuleContext(Native_method_declarationContext,0);
	};

	test_method_declaration() {
	    return this.getTypedRuleContext(Test_method_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMethod_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMethod_declaration(this);
		}
	}


}



class Native_statement_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_native_statement_list;
    }

	native_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Native_statementContext);
	    } else {
	        return this.getTypedRuleContext(Native_statementContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNative_statement_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNative_statement_list(this);
		}
	}


}



class Native_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_native_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CSharpNativeStatementContext extends Native_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CSHARP() {
	    return this.getToken(MParser.CSHARP, 0);
	};

	csharp_statement() {
	    return this.getTypedRuleContext(Csharp_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCSharpNativeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCSharpNativeStatement(this);
		}
	}


}

MParser.CSharpNativeStatementContext = CSharpNativeStatementContext;

class JavaNativeStatementContext extends Native_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	JAVA() {
	    return this.getToken(MParser.JAVA, 0);
	};

	java_statement() {
	    return this.getTypedRuleContext(Java_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavaNativeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavaNativeStatement(this);
		}
	}


}

MParser.JavaNativeStatementContext = JavaNativeStatementContext;

class JavascriptNativeStatementContext extends Native_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	JAVASCRIPT() {
	    return this.getToken(MParser.JAVASCRIPT, 0);
	};

	javascript_native_statement() {
	    return this.getTypedRuleContext(Javascript_native_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascriptNativeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascriptNativeStatement(this);
		}
	}


}

MParser.JavascriptNativeStatementContext = JavascriptNativeStatementContext;

class Python2NativeStatementContext extends Native_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PYTHON2() {
	    return this.getToken(MParser.PYTHON2, 0);
	};

	python_native_statement() {
	    return this.getTypedRuleContext(Python_native_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPython2NativeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPython2NativeStatement(this);
		}
	}


}

MParser.Python2NativeStatementContext = Python2NativeStatementContext;

class Python3NativeStatementContext extends Native_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PYTHON3() {
	    return this.getToken(MParser.PYTHON3, 0);
	};

	python_native_statement() {
	    return this.getTypedRuleContext(Python_native_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPython3NativeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPython3NativeStatement(this);
		}
	}


}

MParser.Python3NativeStatementContext = Python3NativeStatementContext;

class Python_native_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_python_native_statement;
    }

	python_statement() {
	    return this.getTypedRuleContext(Python_statementContext,0);
	};

	SEMI() {
	    return this.getToken(MParser.SEMI, 0);
	};

	python_module() {
	    return this.getTypedRuleContext(Python_moduleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPython_native_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPython_native_statement(this);
		}
	}


}



class Javascript_native_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_javascript_native_statement;
    }

	javascript_statement() {
	    return this.getTypedRuleContext(Javascript_statementContext,0);
	};

	SEMI() {
	    return this.getToken(MParser.SEMI, 0);
	};

	javascript_module() {
	    return this.getTypedRuleContext(Javascript_moduleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascript_native_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascript_native_statement(this);
		}
	}


}



class Statement_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_statement_list;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterStatement_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitStatement_list(this);
		}
	}


}



class Assertion_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_assertion_list;
    }

	assertion = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssertionContext);
	    } else {
	        return this.getTypedRuleContext(AssertionContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAssertion_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAssertion_list(this);
		}
	}


}



class Switch_case_statement_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_switch_case_statement_list;
    }

	switch_case_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Switch_case_statementContext);
	    } else {
	        return this.getTypedRuleContext(Switch_case_statementContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSwitch_case_statement_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSwitch_case_statement_list(this);
		}
	}


}



class Catch_statement_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_catch_statement_list;
    }

	catch_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Catch_statementContext);
	    } else {
	        return this.getTypedRuleContext(Catch_statementContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCatch_statement_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCatch_statement_list(this);
		}
	}


}



class Literal_collectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_literal_collection;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class LiteralListLiteralContext extends Literal_collectionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LBRAK() {
	    return this.getToken(MParser.LBRAK, 0);
	};

	literal_list_literal() {
	    return this.getTypedRuleContext(Literal_list_literalContext,0);
	};

	RBRAK() {
	    return this.getToken(MParser.RBRAK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterLiteralListLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitLiteralListLiteral(this);
		}
	}


}

MParser.LiteralListLiteralContext = LiteralListLiteralContext;

class LiteralRangeLiteralContext extends Literal_collectionContext {

    constructor(parser, ctx) {
        super(parser);
        this.low = null; // Atomic_literalContext;
        this.high = null; // Atomic_literalContext;
        super.copyFrom(ctx);
    }

	LBRAK() {
	    return this.getToken(MParser.LBRAK, 0);
	};

	RANGE() {
	    return this.getToken(MParser.RANGE, 0);
	};

	RBRAK() {
	    return this.getToken(MParser.RBRAK, 0);
	};

	atomic_literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Atomic_literalContext);
	    } else {
	        return this.getTypedRuleContext(Atomic_literalContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterLiteralRangeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitLiteralRangeLiteral(this);
		}
	}


}

MParser.LiteralRangeLiteralContext = LiteralRangeLiteralContext;

class LiteralSetLiteralContext extends Literal_collectionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LT() {
	    return this.getToken(MParser.LT, 0);
	};

	literal_list_literal() {
	    return this.getTypedRuleContext(Literal_list_literalContext,0);
	};

	GT() {
	    return this.getToken(MParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterLiteralSetLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitLiteralSetLiteral(this);
		}
	}


}

MParser.LiteralSetLiteralContext = LiteralSetLiteralContext;

class Atomic_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_atomic_literal;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class MinIntegerLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MIN_INTEGER() {
	    return this.getToken(MParser.MIN_INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMinIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMinIntegerLiteral(this);
		}
	}


}

MParser.MinIntegerLiteralContext = MinIntegerLiteralContext;

class DateLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DATE_LITERAL() {
	    return this.getToken(MParser.DATE_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDateLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDateLiteral(this);
		}
	}


}

MParser.DateLiteralContext = DateLiteralContext;

class SymbolLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	symbol_identifier() {
	    return this.getTypedRuleContext(Symbol_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSymbolLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSymbolLiteral(this);
		}
	}


}

MParser.SymbolLiteralContext = SymbolLiteralContext;

class BooleanLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BOOLEAN_LITERAL() {
	    return this.getToken(MParser.BOOLEAN_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}

MParser.BooleanLiteralContext = BooleanLiteralContext;

class VersionLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VERSION_LITERAL() {
	    return this.getToken(MParser.VERSION_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterVersionLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitVersionLiteral(this);
		}
	}


}

MParser.VersionLiteralContext = VersionLiteralContext;

class HexadecimalLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	HEXA_LITERAL() {
	    return this.getToken(MParser.HEXA_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterHexadecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitHexadecimalLiteral(this);
		}
	}


}

MParser.HexadecimalLiteralContext = HexadecimalLiteralContext;

class UUIDLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UUID_LITERAL() {
	    return this.getToken(MParser.UUID_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterUUIDLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitUUIDLiteral(this);
		}
	}


}

MParser.UUIDLiteralContext = UUIDLiteralContext;

class MaxIntegerLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MAX_INTEGER() {
	    return this.getToken(MParser.MAX_INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMaxIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMaxIntegerLiteral(this);
		}
	}


}

MParser.MaxIntegerLiteralContext = MaxIntegerLiteralContext;

class TypeLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	type_literal() {
	    return this.getTypedRuleContext(Type_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterTypeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitTypeLiteral(this);
		}
	}


}

MParser.TypeLiteralContext = TypeLiteralContext;

class DateTimeLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DATETIME_LITERAL() {
	    return this.getToken(MParser.DATETIME_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDateTimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDateTimeLiteral(this);
		}
	}


}

MParser.DateTimeLiteralContext = DateTimeLiteralContext;

class PeriodLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PERIOD_LITERAL() {
	    return this.getToken(MParser.PERIOD_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPeriodLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPeriodLiteral(this);
		}
	}


}

MParser.PeriodLiteralContext = PeriodLiteralContext;

class DecimalLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DECIMAL_LITERAL() {
	    return this.getToken(MParser.DECIMAL_LITERAL, 0);
	};

	MINUS() {
	    return this.getToken(MParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDecimalLiteral(this);
		}
	}


}

MParser.DecimalLiteralContext = DecimalLiteralContext;

class TextLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TEXT_LITERAL() {
	    return this.getToken(MParser.TEXT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterTextLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitTextLiteral(this);
		}
	}


}

MParser.TextLiteralContext = TextLiteralContext;

class NullLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	null_literal() {
	    return this.getTypedRuleContext(Null_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNullLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNullLiteral(this);
		}
	}


}

MParser.NullLiteralContext = NullLiteralContext;

class IntegerLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTEGER_LITERAL() {
	    return this.getToken(MParser.INTEGER_LITERAL, 0);
	};

	MINUS() {
	    return this.getToken(MParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitIntegerLiteral(this);
		}
	}


}

MParser.IntegerLiteralContext = IntegerLiteralContext;

class TimeLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TIME_LITERAL() {
	    return this.getToken(MParser.TIME_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterTimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitTimeLiteral(this);
		}
	}


}

MParser.TimeLiteralContext = TimeLiteralContext;

class CharacterLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHAR_LITERAL() {
	    return this.getToken(MParser.CHAR_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCharacterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCharacterLiteral(this);
		}
	}


}

MParser.CharacterLiteralContext = CharacterLiteralContext;

class Literal_list_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_literal_list_literal;
    }

	atomic_literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Atomic_literalContext);
	    } else {
	        return this.getTypedRuleContext(Atomic_literalContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.COMMA);
	    } else {
	        return this.getToken(MParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterLiteral_list_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitLiteral_list_literal(this);
		}
	}


}



class This_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_this_expression;
    }

	SELF() {
	    return this.getToken(MParser.SELF, 0);
	};

	THIS() {
	    return this.getToken(MParser.THIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterThis_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitThis_expression(this);
		}
	}


}



class Super_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_super_expression;
    }

	SUPER() {
	    return this.getToken(MParser.SUPER, 0);
	};

	category_type() {
	    return this.getTypedRuleContext(Category_typeContext,0);
	};

	DOT() {
	    return this.getToken(MParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSuper_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSuper_expression(this);
		}
	}


}



class Parenthesis_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_parenthesis_expression;
    }

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterParenthesis_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitParenthesis_expression(this);
		}
	}


}



class Literal_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_literal_expression;
    }

	atomic_literal() {
	    return this.getTypedRuleContext(Atomic_literalContext,0);
	};

	collection_literal() {
	    return this.getTypedRuleContext(Collection_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterLiteral_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitLiteral_expression(this);
		}
	}


}



class Collection_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_collection_literal;
    }

	range_literal() {
	    return this.getTypedRuleContext(Range_literalContext,0);
	};

	list_literal() {
	    return this.getTypedRuleContext(List_literalContext,0);
	};

	set_literal() {
	    return this.getTypedRuleContext(Set_literalContext,0);
	};

	dict_literal() {
	    return this.getTypedRuleContext(Dict_literalContext,0);
	};

	document_literal() {
	    return this.getTypedRuleContext(Document_literalContext,0);
	};

	tuple_literal() {
	    return this.getTypedRuleContext(Tuple_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCollection_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCollection_literal(this);
		}
	}


}



class Tuple_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_tuple_literal;
    }

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	MUTABLE() {
	    return this.getToken(MParser.MUTABLE, 0);
	};

	expression_tuple() {
	    return this.getTypedRuleContext(Expression_tupleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterTuple_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitTuple_literal(this);
		}
	}


}



class Dict_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_dict_literal;
    }

	LTCOLONGT() {
	    return this.getToken(MParser.LTCOLONGT, 0);
	};

	MUTABLE() {
	    return this.getToken(MParser.MUTABLE, 0);
	};

	LT() {
	    return this.getToken(MParser.LT, 0);
	};

	dict_entry_list() {
	    return this.getTypedRuleContext(Dict_entry_listContext,0);
	};

	GT() {
	    return this.getToken(MParser.GT, 0);
	};

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDict_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDict_literal(this);
		}
	}


}



class Document_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_document_literal;
    }

	LCURL() {
	    return this.getToken(MParser.LCURL, 0);
	};

	RCURL() {
	    return this.getToken(MParser.RCURL, 0);
	};

	doc_entry_list() {
	    return this.getTypedRuleContext(Doc_entry_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDocument_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDocument_literal(this);
		}
	}


}



class Expression_tupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_expression_tuple;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.COMMA);
	    } else {
	        return this.getToken(MParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterExpression_tuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitExpression_tuple(this);
		}
	}


}



class Doc_entry_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_doc_entry_list;
    }

	doc_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Doc_entryContext);
	    } else {
	        return this.getTypedRuleContext(Doc_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.COMMA);
	    } else {
	        return this.getToken(MParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDoc_entry_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDoc_entry_list(this);
		}
	}


}



class Doc_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_doc_entry;
        this.key = null; // Doc_keyContext
        this.value = null; // ExpressionContext
    }

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	doc_key() {
	    return this.getTypedRuleContext(Doc_keyContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDoc_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDoc_entry(this);
		}
	}


}



class Doc_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_doc_key;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DocKeyIdentifierContext extends Doc_keyContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Identifier_or_keywordContext;
        super.copyFrom(ctx);
    }

	identifier_or_keyword() {
	    return this.getTypedRuleContext(Identifier_or_keywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDocKeyIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDocKeyIdentifier(this);
		}
	}


}

MParser.DocKeyIdentifierContext = DocKeyIdentifierContext;

class DocKeyTextContext extends Doc_keyContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Token;
        super.copyFrom(ctx);
    }

	TEXT_LITERAL() {
	    return this.getToken(MParser.TEXT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDocKeyText(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDocKeyText(this);
		}
	}


}

MParser.DocKeyTextContext = DocKeyTextContext;

class Dict_entry_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_dict_entry_list;
    }

	dict_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Dict_entryContext);
	    } else {
	        return this.getTypedRuleContext(Dict_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.COMMA);
	    } else {
	        return this.getToken(MParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDict_entry_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDict_entry_list(this);
		}
	}


}



class Dict_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_dict_entry;
        this.key = null; // Dict_keyContext
        this.value = null; // ExpressionContext
    }

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	dict_key() {
	    return this.getTypedRuleContext(Dict_keyContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDict_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDict_entry(this);
		}
	}


}



class Dict_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_dict_key;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DictKeyIdentifierContext extends Dict_keyContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Identifier_or_keywordContext;
        super.copyFrom(ctx);
    }

	identifier_or_keyword() {
	    return this.getTypedRuleContext(Identifier_or_keywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDictKeyIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDictKeyIdentifier(this);
		}
	}


}

MParser.DictKeyIdentifierContext = DictKeyIdentifierContext;

class DictKeyTextContext extends Dict_keyContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Token;
        super.copyFrom(ctx);
    }

	TEXT_LITERAL() {
	    return this.getToken(MParser.TEXT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDictKeyText(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDictKeyText(this);
		}
	}


}

MParser.DictKeyTextContext = DictKeyTextContext;

class Slice_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_slice_arguments;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SliceFirstAndLastContext extends Slice_argumentsContext {

    constructor(parser, ctx) {
        super(parser);
        this.first = null; // ExpressionContext;
        this.last = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSliceFirstAndLast(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSliceFirstAndLast(this);
		}
	}


}

MParser.SliceFirstAndLastContext = SliceFirstAndLastContext;

class SliceLastOnlyContext extends Slice_argumentsContext {

    constructor(parser, ctx) {
        super(parser);
        this.last = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSliceLastOnly(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSliceLastOnly(this);
		}
	}


}

MParser.SliceLastOnlyContext = SliceLastOnlyContext;

class SliceFirstOnlyContext extends Slice_argumentsContext {

    constructor(parser, ctx) {
        super(parser);
        this.first = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSliceFirstOnly(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSliceFirstOnly(this);
		}
	}


}

MParser.SliceFirstOnlyContext = SliceFirstOnlyContext;

class Assign_variable_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_assign_variable_statement;
    }

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	assign() {
	    return this.getTypedRuleContext(AssignContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAssign_variable_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAssign_variable_statement(this);
		}
	}


}



class Assignable_instanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_assignable_instance;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ChildInstanceContext extends Assignable_instanceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	assignable_instance() {
	    return this.getTypedRuleContext(Assignable_instanceContext,0);
	};

	child_instance() {
	    return this.getTypedRuleContext(Child_instanceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterChildInstance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitChildInstance(this);
		}
	}


}

MParser.ChildInstanceContext = ChildInstanceContext;

class RootInstanceContext extends Assignable_instanceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterRootInstance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitRootInstance(this);
		}
	}


}

MParser.RootInstanceContext = RootInstanceContext;

class Is_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_is_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class IsATypeExpressionContext extends Is_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
	};

	category_or_any_type() {
	    return this.getTypedRuleContext(Category_or_any_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterIsATypeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitIsATypeExpression(this);
		}
	}


}

MParser.IsATypeExpressionContext = IsATypeExpressionContext;

class IsOtherExpressionContext extends Is_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterIsOtherExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitIsOtherExpression(this);
		}
	}


}

MParser.IsOtherExpressionContext = IsOtherExpressionContext;

class MetadataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_metadata;
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMetadata(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMetadata(this);
		}
	}


}



class Arrow_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_arrow_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ArrowExpressionBodyContext extends Arrow_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	arrow_prefix() {
	    return this.getTypedRuleContext(Arrow_prefixContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterArrowExpressionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitArrowExpressionBody(this);
		}
	}


}

MParser.ArrowExpressionBodyContext = ArrowExpressionBodyContext;

class ArrowStatementsBodyContext extends Arrow_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	arrow_prefix() {
	    return this.getTypedRuleContext(Arrow_prefixContext,0);
	};

	LCURL() {
	    return this.getToken(MParser.LCURL, 0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	RCURL() {
	    return this.getToken(MParser.RCURL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterArrowStatementsBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitArrowStatementsBody(this);
		}
	}


}

MParser.ArrowStatementsBodyContext = ArrowStatementsBodyContext;

class Arrow_prefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_arrow_prefix;
        this.s1 = null; // Ws_plusContext
        this.s2 = null; // Ws_plusContext
    }

	arrow_args() {
	    return this.getTypedRuleContext(Arrow_argsContext,0);
	};

	EGT() {
	    return this.getToken(MParser.EGT, 0);
	};

	ws_plus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ws_plusContext);
	    } else {
	        return this.getTypedRuleContext(Ws_plusContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterArrow_prefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitArrow_prefix(this);
		}
	}


}



class Arrow_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_arrow_args;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ArrowListArgContext extends Arrow_argsContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	variable_identifier_list() {
	    return this.getTypedRuleContext(Variable_identifier_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterArrowListArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitArrowListArg(this);
		}
	}


}

MParser.ArrowListArgContext = ArrowListArgContext;

class ArrowSingleArgContext extends Arrow_argsContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterArrowSingleArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitArrowSingleArg(this);
		}
	}


}

MParser.ArrowSingleArgContext = ArrowSingleArgContext;

class Sorted_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_sorted_key;
    }

	instance_expression() {
	    return this.getTypedRuleContext(Instance_expressionContext,0);
	};

	arrow_expression() {
	    return this.getTypedRuleContext(Arrow_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSorted_key(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSorted_key(this);
		}
	}


}



class Read_blob_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_read_blob_expression;
        this.source = null; // ExpressionContext
    }

	READ() {
	    return this.getToken(MParser.READ, 0);
	};

	BLOB() {
	    return this.getToken(MParser.BLOB, 0);
	};

	FROM() {
	    return this.getToken(MParser.FROM, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterRead_blob_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitRead_blob_expression(this);
		}
	}


}



class Read_all_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_read_all_expression;
        this.source = null; // ExpressionContext
    }

	READ() {
	    return this.getToken(MParser.READ, 0);
	};

	ALL() {
	    return this.getToken(MParser.ALL, 0);
	};

	FROM() {
	    return this.getToken(MParser.FROM, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterRead_all_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitRead_all_expression(this);
		}
	}


}



class Read_one_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_read_one_expression;
        this.source = null; // ExpressionContext
    }

	READ() {
	    return this.getToken(MParser.READ, 0);
	};

	ONE() {
	    return this.getToken(MParser.ONE, 0);
	};

	FROM() {
	    return this.getToken(MParser.FROM, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterRead_one_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitRead_one_expression(this);
		}
	}


}



class Order_by_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_order_by_list;
    }

	order_by = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Order_byContext);
	    } else {
	        return this.getTypedRuleContext(Order_byContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.COMMA);
	    } else {
	        return this.getToken(MParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterOrder_by_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitOrder_by_list(this);
		}
	}


}



class Order_byContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_order_by;
    }

	variable_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Variable_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Variable_identifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.DOT);
	    } else {
	        return this.getToken(MParser.DOT, i);
	    }
	};


	ASC() {
	    return this.getToken(MParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(MParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterOrder_by(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitOrder_by(this);
		}
	}


}



class Include_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_include_list;
    }

	variable_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Variable_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Variable_identifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.COMMA);
	    } else {
	        return this.getToken(MParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterInclude_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitInclude_list(this);
		}
	}


}



class OperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_operator;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class OperatorPlusContext extends OperatorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PLUS() {
	    return this.getToken(MParser.PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterOperatorPlus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitOperatorPlus(this);
		}
	}


}

MParser.OperatorPlusContext = OperatorPlusContext;

class OperatorDivideContext extends OperatorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	divide() {
	    return this.getTypedRuleContext(DivideContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterOperatorDivide(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitOperatorDivide(this);
		}
	}


}

MParser.OperatorDivideContext = OperatorDivideContext;

class OperatorIDivideContext extends OperatorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	idivide() {
	    return this.getTypedRuleContext(IdivideContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterOperatorIDivide(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitOperatorIDivide(this);
		}
	}


}

MParser.OperatorIDivideContext = OperatorIDivideContext;

class OperatorMultiplyContext extends OperatorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	multiply() {
	    return this.getTypedRuleContext(MultiplyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterOperatorMultiply(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitOperatorMultiply(this);
		}
	}


}

MParser.OperatorMultiplyContext = OperatorMultiplyContext;

class OperatorMinusContext extends OperatorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MINUS() {
	    return this.getToken(MParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterOperatorMinus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitOperatorMinus(this);
		}
	}


}

MParser.OperatorMinusContext = OperatorMinusContext;

class OperatorModuloContext extends OperatorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	modulo() {
	    return this.getTypedRuleContext(ModuloContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterOperatorModulo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitOperatorModulo(this);
		}
	}


}

MParser.OperatorModuloContext = OperatorModuloContext;

class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_keyword;
    }

	JAVA() {
	    return this.getToken(MParser.JAVA, 0);
	};

	CSHARP() {
	    return this.getToken(MParser.CSHARP, 0);
	};

	PYTHON2() {
	    return this.getToken(MParser.PYTHON2, 0);
	};

	PYTHON3() {
	    return this.getToken(MParser.PYTHON3, 0);
	};

	JAVASCRIPT() {
	    return this.getToken(MParser.JAVASCRIPT, 0);
	};

	SWIFT() {
	    return this.getToken(MParser.SWIFT, 0);
	};

	BOOLEAN() {
	    return this.getToken(MParser.BOOLEAN, 0);
	};

	CHARACTER() {
	    return this.getToken(MParser.CHARACTER, 0);
	};

	TEXT() {
	    return this.getToken(MParser.TEXT, 0);
	};

	INTEGER() {
	    return this.getToken(MParser.INTEGER, 0);
	};

	DECIMAL() {
	    return this.getToken(MParser.DECIMAL, 0);
	};

	DATE() {
	    return this.getToken(MParser.DATE, 0);
	};

	TIME() {
	    return this.getToken(MParser.TIME, 0);
	};

	DATETIME() {
	    return this.getToken(MParser.DATETIME, 0);
	};

	PERIOD() {
	    return this.getToken(MParser.PERIOD, 0);
	};

	VERSION() {
	    return this.getToken(MParser.VERSION, 0);
	};

	CODE() {
	    return this.getToken(MParser.CODE, 0);
	};

	DOCUMENT() {
	    return this.getToken(MParser.DOCUMENT, 0);
	};

	BLOB() {
	    return this.getToken(MParser.BLOB, 0);
	};

	IMAGE() {
	    return this.getToken(MParser.IMAGE, 0);
	};

	DBID() {
	    return this.getToken(MParser.DBID, 0);
	};

	UUID() {
	    return this.getToken(MParser.UUID, 0);
	};

	ITERATOR() {
	    return this.getToken(MParser.ITERATOR, 0);
	};

	CURSOR() {
	    return this.getToken(MParser.CURSOR, 0);
	};

	HTML() {
	    return this.getToken(MParser.HTML, 0);
	};

	ABSTRACT() {
	    return this.getToken(MParser.ABSTRACT, 0);
	};

	ALL() {
	    return this.getToken(MParser.ALL, 0);
	};

	ALWAYS() {
	    return this.getToken(MParser.ALWAYS, 0);
	};

	AND() {
	    return this.getToken(MParser.AND, 0);
	};

	ANY() {
	    return this.getToken(MParser.ANY, 0);
	};

	AS() {
	    return this.getToken(MParser.AS, 0);
	};

	ASC() {
	    return this.getToken(MParser.ASC, 0);
	};

	ATTR() {
	    return this.getToken(MParser.ATTR, 0);
	};

	ATTRIBUTE() {
	    return this.getToken(MParser.ATTRIBUTE, 0);
	};

	ATTRIBUTES() {
	    return this.getToken(MParser.ATTRIBUTES, 0);
	};

	BINDINGS() {
	    return this.getToken(MParser.BINDINGS, 0);
	};

	BREAK() {
	    return this.getToken(MParser.BREAK, 0);
	};

	BY() {
	    return this.getToken(MParser.BY, 0);
	};

	CASE() {
	    return this.getToken(MParser.CASE, 0);
	};

	CATCH() {
	    return this.getToken(MParser.CATCH, 0);
	};

	CATEGORY() {
	    return this.getToken(MParser.CATEGORY, 0);
	};

	CLASS() {
	    return this.getToken(MParser.CLASS, 0);
	};

	CONTAINS() {
	    return this.getToken(MParser.CONTAINS, 0);
	};

	DEF() {
	    return this.getToken(MParser.DEF, 0);
	};

	DEFAULT() {
	    return this.getToken(MParser.DEFAULT, 0);
	};

	DEFINE() {
	    return this.getToken(MParser.DEFINE, 0);
	};

	DELETE() {
	    return this.getToken(MParser.DELETE, 0);
	};

	DESC() {
	    return this.getToken(MParser.DESC, 0);
	};

	DO() {
	    return this.getToken(MParser.DO, 0);
	};

	DOING() {
	    return this.getToken(MParser.DOING, 0);
	};

	EACH() {
	    return this.getToken(MParser.EACH, 0);
	};

	ELSE() {
	    return this.getToken(MParser.ELSE, 0);
	};

	ENUM() {
	    return this.getToken(MParser.ENUM, 0);
	};

	ENUMERATED() {
	    return this.getToken(MParser.ENUMERATED, 0);
	};

	EXCEPT() {
	    return this.getToken(MParser.EXCEPT, 0);
	};

	EXECUTE() {
	    return this.getToken(MParser.EXECUTE, 0);
	};

	EXPECTING() {
	    return this.getToken(MParser.EXPECTING, 0);
	};

	EXTENDS() {
	    return this.getToken(MParser.EXTENDS, 0);
	};

	FETCH() {
	    return this.getToken(MParser.FETCH, 0);
	};

	FILTERED() {
	    return this.getToken(MParser.FILTERED, 0);
	};

	FINALLY() {
	    return this.getToken(MParser.FINALLY, 0);
	};

	FLUSH() {
	    return this.getToken(MParser.FLUSH, 0);
	};

	FOR() {
	    return this.getToken(MParser.FOR, 0);
	};

	FROM() {
	    return this.getToken(MParser.FROM, 0);
	};

	GETTER() {
	    return this.getToken(MParser.GETTER, 0);
	};

	HAS() {
	    return this.getToken(MParser.HAS, 0);
	};

	IF() {
	    return this.getToken(MParser.IF, 0);
	};

	IN() {
	    return this.getToken(MParser.IN, 0);
	};

	INDEX() {
	    return this.getToken(MParser.INDEX, 0);
	};

	IS() {
	    return this.getToken(MParser.IS, 0);
	};

	MATCHING() {
	    return this.getToken(MParser.MATCHING, 0);
	};

	METHOD() {
	    return this.getToken(MParser.METHOD, 0);
	};

	METHODS() {
	    return this.getToken(MParser.METHODS, 0);
	};

	MODULO() {
	    return this.getToken(MParser.MODULO, 0);
	};

	MUTABLE() {
	    return this.getToken(MParser.MUTABLE, 0);
	};

	NATIVE() {
	    return this.getToken(MParser.NATIVE, 0);
	};

	NONE() {
	    return this.getToken(MParser.NONE, 0);
	};

	NOT() {
	    return this.getToken(MParser.NOT, 0);
	};

	NOTHING() {
	    return this.getToken(MParser.NOTHING, 0);
	};

	NULL() {
	    return this.getToken(MParser.NULL, 0);
	};

	ON() {
	    return this.getToken(MParser.ON, 0);
	};

	ONE() {
	    return this.getToken(MParser.ONE, 0);
	};

	OPERATOR() {
	    return this.getToken(MParser.OPERATOR, 0);
	};

	OR() {
	    return this.getToken(MParser.OR, 0);
	};

	ORDER() {
	    return this.getToken(MParser.ORDER, 0);
	};

	OTHERWISE() {
	    return this.getToken(MParser.OTHERWISE, 0);
	};

	PASS() {
	    return this.getToken(MParser.PASS, 0);
	};

	RAISE() {
	    return this.getToken(MParser.RAISE, 0);
	};

	READ() {
	    return this.getToken(MParser.READ, 0);
	};

	RECEIVING() {
	    return this.getToken(MParser.RECEIVING, 0);
	};

	RESOURCE() {
	    return this.getToken(MParser.RESOURCE, 0);
	};

	RETURN() {
	    return this.getToken(MParser.RETURN, 0);
	};

	RETURNING() {
	    return this.getToken(MParser.RETURNING, 0);
	};

	ROWS() {
	    return this.getToken(MParser.ROWS, 0);
	};

	SELF() {
	    return this.getToken(MParser.SELF, 0);
	};

	SETTER() {
	    return this.getToken(MParser.SETTER, 0);
	};

	SINGLETON() {
	    return this.getToken(MParser.SINGLETON, 0);
	};

	SORTED() {
	    return this.getToken(MParser.SORTED, 0);
	};

	SUPER() {
	    return this.getToken(MParser.SUPER, 0);
	};

	STORABLE() {
	    return this.getToken(MParser.STORABLE, 0);
	};

	STORE() {
	    return this.getToken(MParser.STORE, 0);
	};

	SWITCH() {
	    return this.getToken(MParser.SWITCH, 0);
	};

	TEST() {
	    return this.getToken(MParser.TEST, 0);
	};

	THIS() {
	    return this.getToken(MParser.THIS, 0);
	};

	THROW() {
	    return this.getToken(MParser.THROW, 0);
	};

	TO() {
	    return this.getToken(MParser.TO, 0);
	};

	TRY() {
	    return this.getToken(MParser.TRY, 0);
	};

	VERIFYING() {
	    return this.getToken(MParser.VERIFYING, 0);
	};

	WIDGET() {
	    return this.getToken(MParser.WIDGET, 0);
	};

	WITH() {
	    return this.getToken(MParser.WITH, 0);
	};

	WHEN() {
	    return this.getToken(MParser.WHEN, 0);
	};

	WHERE() {
	    return this.getToken(MParser.WHERE, 0);
	};

	WHILE() {
	    return this.getToken(MParser.WHILE, 0);
	};

	WRITE() {
	    return this.getToken(MParser.WRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitKeyword(this);
		}
	}


}



class New_tokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_new_token;
        this.i1 = null; // Token
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterNew_token(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitNew_token(this);
		}
	}


}



class Key_tokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_key_token;
        this.i1 = null; // Token
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterKey_token(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitKey_token(this);
		}
	}


}



class Module_tokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_module_token;
        this.i1 = null; // Token
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterModule_token(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitModule_token(this);
		}
	}


}



class Value_tokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_value_token;
        this.i1 = null; // Token
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterValue_token(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitValue_token(this);
		}
	}


}



class Symbols_tokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_symbols_token;
        this.i1 = null; // Token
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterSymbols_token(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitSymbols_token(this);
		}
	}


}



class AssignContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_assign;
    }

	EQ() {
	    return this.getToken(MParser.EQ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterAssign(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitAssign(this);
		}
	}


}



class MultiplyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_multiply;
    }

	STAR() {
	    return this.getToken(MParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterMultiply(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitMultiply(this);
		}
	}


}



class DivideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_divide;
    }

	SLASH() {
	    return this.getToken(MParser.SLASH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterDivide(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitDivide(this);
		}
	}


}



class IdivideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_idivide;
    }

	BSLASH() {
	    return this.getToken(MParser.BSLASH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterIdivide(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitIdivide(this);
		}
	}


}



class ModuloContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_modulo;
    }

	PERCENT() {
	    return this.getToken(MParser.PERCENT, 0);
	};

	MODULO() {
	    return this.getToken(MParser.MODULO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterModulo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitModulo(this);
		}
	}


}



class Javascript_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_javascript_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavascriptStatementContext extends Javascript_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Javascript_expressionContext;
        super.copyFrom(ctx);
    }

	SEMI() {
	    return this.getToken(MParser.SEMI, 0);
	};

	javascript_expression() {
	    return this.getTypedRuleContext(Javascript_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascriptStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascriptStatement(this);
		}
	}


}

MParser.JavascriptStatementContext = JavascriptStatementContext;

class JavascriptReturnStatementContext extends Javascript_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Javascript_expressionContext;
        super.copyFrom(ctx);
    }

	RETURN() {
	    return this.getToken(MParser.RETURN, 0);
	};

	SEMI() {
	    return this.getToken(MParser.SEMI, 0);
	};

	javascript_expression() {
	    return this.getTypedRuleContext(Javascript_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascriptReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascriptReturnStatement(this);
		}
	}


}

MParser.JavascriptReturnStatementContext = JavascriptReturnStatementContext;

class Javascript_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_javascript_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavascriptSelectorExpressionContext extends Javascript_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Javascript_expressionContext;
        this.child = null; // Javascript_selector_expressionContext;
        super.copyFrom(ctx);
    }

	javascript_expression() {
	    return this.getTypedRuleContext(Javascript_expressionContext,0);
	};

	javascript_selector_expression() {
	    return this.getTypedRuleContext(Javascript_selector_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascriptSelectorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascriptSelectorExpression(this);
		}
	}


}

MParser.JavascriptSelectorExpressionContext = JavascriptSelectorExpressionContext;

class JavascriptPrimaryExpressionContext extends Javascript_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Javascript_primary_expressionContext;
        super.copyFrom(ctx);
    }

	javascript_primary_expression() {
	    return this.getTypedRuleContext(Javascript_primary_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascriptPrimaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascriptPrimaryExpression(this);
		}
	}


}

MParser.JavascriptPrimaryExpressionContext = JavascriptPrimaryExpressionContext;

class Javascript_primary_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_javascript_primary_expression;
    }

	javascript_this_expression() {
	    return this.getTypedRuleContext(Javascript_this_expressionContext,0);
	};

	javascript_new_expression() {
	    return this.getTypedRuleContext(Javascript_new_expressionContext,0);
	};

	javascript_parenthesis_expression() {
	    return this.getTypedRuleContext(Javascript_parenthesis_expressionContext,0);
	};

	javascript_identifier_expression() {
	    return this.getTypedRuleContext(Javascript_identifier_expressionContext,0);
	};

	javascript_literal_expression() {
	    return this.getTypedRuleContext(Javascript_literal_expressionContext,0);
	};

	javascript_method_expression() {
	    return this.getTypedRuleContext(Javascript_method_expressionContext,0);
	};

	javascript_item_expression() {
	    return this.getTypedRuleContext(Javascript_item_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascript_primary_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascript_primary_expression(this);
		}
	}


}



class Javascript_this_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_javascript_this_expression;
    }

	this_expression() {
	    return this.getTypedRuleContext(This_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascript_this_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascript_this_expression(this);
		}
	}


}



class Javascript_new_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_javascript_new_expression;
    }

	new_token() {
	    return this.getTypedRuleContext(New_tokenContext,0);
	};

	javascript_method_expression() {
	    return this.getTypedRuleContext(Javascript_method_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascript_new_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascript_new_expression(this);
		}
	}


}



class Javascript_selector_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_javascript_selector_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavascriptMemberExpressionContext extends Javascript_selector_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Javascript_identifierContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(MParser.DOT, 0);
	};

	javascript_identifier() {
	    return this.getTypedRuleContext(Javascript_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascriptMemberExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascriptMemberExpression(this);
		}
	}


}

MParser.JavascriptMemberExpressionContext = JavascriptMemberExpressionContext;

class JavascriptItemExpressionContext extends Javascript_selector_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Javascript_item_expressionContext;
        super.copyFrom(ctx);
    }

	javascript_item_expression() {
	    return this.getTypedRuleContext(Javascript_item_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascriptItemExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascriptItemExpression(this);
		}
	}


}

MParser.JavascriptItemExpressionContext = JavascriptItemExpressionContext;

class JavascriptMethodExpressionContext extends Javascript_selector_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.method = null; // Javascript_method_expressionContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(MParser.DOT, 0);
	};

	javascript_method_expression() {
	    return this.getTypedRuleContext(Javascript_method_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascriptMethodExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascriptMethodExpression(this);
		}
	}


}

MParser.JavascriptMethodExpressionContext = JavascriptMethodExpressionContext;

class Javascript_method_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_javascript_method_expression;
        this.name = null; // Javascript_identifierContext
        this.args = null; // Javascript_argumentsContext
    }

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	javascript_identifier() {
	    return this.getTypedRuleContext(Javascript_identifierContext,0);
	};

	javascript_arguments() {
	    return this.getTypedRuleContext(Javascript_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascript_method_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascript_method_expression(this);
		}
	}


}



class Javascript_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_javascript_arguments;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavascriptArgumentListContext extends Javascript_argumentsContext {

    constructor(parser, ctx) {
        super(parser);
        this.item = null; // Javascript_expressionContext;
        super.copyFrom(ctx);
    }

	javascript_expression() {
	    return this.getTypedRuleContext(Javascript_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascriptArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascriptArgumentList(this);
		}
	}


}

MParser.JavascriptArgumentListContext = JavascriptArgumentListContext;

class JavascriptArgumentListItemContext extends Javascript_argumentsContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // Javascript_argumentsContext;
        this.item = null; // Javascript_expressionContext;
        super.copyFrom(ctx);
    }

	COMMA() {
	    return this.getToken(MParser.COMMA, 0);
	};

	javascript_arguments() {
	    return this.getTypedRuleContext(Javascript_argumentsContext,0);
	};

	javascript_expression() {
	    return this.getTypedRuleContext(Javascript_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascriptArgumentListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascriptArgumentListItem(this);
		}
	}


}

MParser.JavascriptArgumentListItemContext = JavascriptArgumentListItemContext;

class Javascript_item_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_javascript_item_expression;
        this.exp = null; // Javascript_expressionContext
    }

	LBRAK() {
	    return this.getToken(MParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(MParser.RBRAK, 0);
	};

	javascript_expression() {
	    return this.getTypedRuleContext(Javascript_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascript_item_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascript_item_expression(this);
		}
	}


}



class Javascript_parenthesis_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_javascript_parenthesis_expression;
        this.exp = null; // Javascript_expressionContext
    }

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	javascript_expression() {
	    return this.getTypedRuleContext(Javascript_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascript_parenthesis_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascript_parenthesis_expression(this);
		}
	}


}



class Javascript_identifier_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_javascript_identifier_expression;
        this.name = null; // Javascript_identifierContext
    }

	javascript_identifier() {
	    return this.getTypedRuleContext(Javascript_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascript_identifier_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascript_identifier_expression(this);
		}
	}


}



class Javascript_literal_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_javascript_literal_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavascriptIntegerLiteralContext extends Javascript_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	INTEGER_LITERAL() {
	    return this.getToken(MParser.INTEGER_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascriptIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascriptIntegerLiteral(this);
		}
	}


}

MParser.JavascriptIntegerLiteralContext = JavascriptIntegerLiteralContext;

class JavascriptBooleanLiteralContext extends Javascript_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	BOOLEAN_LITERAL() {
	    return this.getToken(MParser.BOOLEAN_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascriptBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascriptBooleanLiteral(this);
		}
	}


}

MParser.JavascriptBooleanLiteralContext = JavascriptBooleanLiteralContext;

class JavascriptCharacterLiteralContext extends Javascript_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	CHAR_LITERAL() {
	    return this.getToken(MParser.CHAR_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascriptCharacterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascriptCharacterLiteral(this);
		}
	}


}

MParser.JavascriptCharacterLiteralContext = JavascriptCharacterLiteralContext;

class JavascriptTextLiteralContext extends Javascript_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	TEXT_LITERAL() {
	    return this.getToken(MParser.TEXT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascriptTextLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascriptTextLiteral(this);
		}
	}


}

MParser.JavascriptTextLiteralContext = JavascriptTextLiteralContext;

class JavascriptDecimalLiteralContext extends Javascript_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	DECIMAL_LITERAL() {
	    return this.getToken(MParser.DECIMAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascriptDecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascriptDecimalLiteral(this);
		}
	}


}

MParser.JavascriptDecimalLiteralContext = JavascriptDecimalLiteralContext;

class Javascript_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_javascript_identifier;
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
	};

	SYMBOL_IDENTIFIER() {
	    return this.getToken(MParser.SYMBOL_IDENTIFIER, 0);
	};

	DOLLAR_IDENTIFIER() {
	    return this.getToken(MParser.DOLLAR_IDENTIFIER, 0);
	};

	TYPE_IDENTIFIER() {
	    return this.getToken(MParser.TYPE_IDENTIFIER, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavascript_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavascript_identifier(this);
		}
	}


}



class Python_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_python_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PythonStatementContext extends Python_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_expressionContext;
        super.copyFrom(ctx);
    }

	python_expression() {
	    return this.getTypedRuleContext(Python_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonStatement(this);
		}
	}


}

MParser.PythonStatementContext = PythonStatementContext;

class PythonReturnStatementContext extends Python_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_expressionContext;
        super.copyFrom(ctx);
    }

	RETURN() {
	    return this.getToken(MParser.RETURN, 0);
	};

	python_expression() {
	    return this.getTypedRuleContext(Python_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonReturnStatement(this);
		}
	}


}

MParser.PythonReturnStatementContext = PythonReturnStatementContext;

class Python_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_python_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PythonSelectorExpressionContext extends Python_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Python_expressionContext;
        this.child = null; // Python_selector_expressionContext;
        super.copyFrom(ctx);
    }

	python_expression() {
	    return this.getTypedRuleContext(Python_expressionContext,0);
	};

	python_selector_expression() {
	    return this.getTypedRuleContext(Python_selector_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonSelectorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonSelectorExpression(this);
		}
	}


}

MParser.PythonSelectorExpressionContext = PythonSelectorExpressionContext;

class PythonPrimaryExpressionContext extends Python_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_primary_expressionContext;
        super.copyFrom(ctx);
    }

	python_primary_expression() {
	    return this.getTypedRuleContext(Python_primary_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonPrimaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonPrimaryExpression(this);
		}
	}


}

MParser.PythonPrimaryExpressionContext = PythonPrimaryExpressionContext;

class Python_primary_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_python_primary_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PythonParenthesisExpressionContext extends Python_primary_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_parenthesis_expressionContext;
        super.copyFrom(ctx);
    }

	python_parenthesis_expression() {
	    return this.getTypedRuleContext(Python_parenthesis_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonParenthesisExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonParenthesisExpression(this);
		}
	}


}

MParser.PythonParenthesisExpressionContext = PythonParenthesisExpressionContext;

class PythonIdentifierExpressionContext extends Python_primary_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_identifier_expressionContext;
        super.copyFrom(ctx);
    }

	python_identifier_expression() {
	    return this.getTypedRuleContext(Python_identifier_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonIdentifierExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonIdentifierExpression(this);
		}
	}


}

MParser.PythonIdentifierExpressionContext = PythonIdentifierExpressionContext;

class PythonSelfExpressionContext extends Python_primary_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_self_expressionContext;
        super.copyFrom(ctx);
    }

	python_self_expression() {
	    return this.getTypedRuleContext(Python_self_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonSelfExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonSelfExpression(this);
		}
	}


}

MParser.PythonSelfExpressionContext = PythonSelfExpressionContext;

class PythonLiteralExpressionContext extends Python_primary_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_literal_expressionContext;
        super.copyFrom(ctx);
    }

	python_literal_expression() {
	    return this.getTypedRuleContext(Python_literal_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonLiteralExpression(this);
		}
	}


}

MParser.PythonLiteralExpressionContext = PythonLiteralExpressionContext;

class PythonGlobalMethodExpressionContext extends Python_primary_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_method_expressionContext;
        super.copyFrom(ctx);
    }

	python_method_expression() {
	    return this.getTypedRuleContext(Python_method_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonGlobalMethodExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonGlobalMethodExpression(this);
		}
	}


}

MParser.PythonGlobalMethodExpressionContext = PythonGlobalMethodExpressionContext;

class Python_self_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_python_self_expression;
    }

	this_expression() {
	    return this.getTypedRuleContext(This_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPython_self_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPython_self_expression(this);
		}
	}


}



class Python_selector_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_python_selector_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PythonMethodExpressionContext extends Python_selector_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_method_expressionContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(MParser.DOT, 0);
	};

	python_method_expression() {
	    return this.getTypedRuleContext(Python_method_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonMethodExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonMethodExpression(this);
		}
	}


}

MParser.PythonMethodExpressionContext = PythonMethodExpressionContext;

class PythonItemExpressionContext extends Python_selector_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_expressionContext;
        super.copyFrom(ctx);
    }

	LBRAK() {
	    return this.getToken(MParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(MParser.RBRAK, 0);
	};

	python_expression() {
	    return this.getTypedRuleContext(Python_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonItemExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonItemExpression(this);
		}
	}


}

MParser.PythonItemExpressionContext = PythonItemExpressionContext;

class Python_method_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_python_method_expression;
        this.name = null; // Python_identifierContext
        this.args = null; // Python_argument_listContext
    }

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	python_identifier() {
	    return this.getTypedRuleContext(Python_identifierContext,0);
	};

	python_argument_list() {
	    return this.getTypedRuleContext(Python_argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPython_method_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPython_method_expression(this);
		}
	}


}



class Python_argument_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_python_argument_list;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PythonOrdinalOnlyArgumentListContext extends Python_argument_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.ordinal = null; // Python_ordinal_argument_listContext;
        super.copyFrom(ctx);
    }

	python_ordinal_argument_list() {
	    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonOrdinalOnlyArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonOrdinalOnlyArgumentList(this);
		}
	}


}

MParser.PythonOrdinalOnlyArgumentListContext = PythonOrdinalOnlyArgumentListContext;

class PythonNamedOnlyArgumentListContext extends Python_argument_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.named = null; // Python_named_argument_listContext;
        super.copyFrom(ctx);
    }

	python_named_argument_list() {
	    return this.getTypedRuleContext(Python_named_argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonNamedOnlyArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonNamedOnlyArgumentList(this);
		}
	}


}

MParser.PythonNamedOnlyArgumentListContext = PythonNamedOnlyArgumentListContext;

class PythonArgumentListContext extends Python_argument_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.ordinal = null; // Python_ordinal_argument_listContext;
        this.named = null; // Python_named_argument_listContext;
        super.copyFrom(ctx);
    }

	COMMA() {
	    return this.getToken(MParser.COMMA, 0);
	};

	python_ordinal_argument_list() {
	    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
	};

	python_named_argument_list() {
	    return this.getTypedRuleContext(Python_named_argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonArgumentList(this);
		}
	}


}

MParser.PythonArgumentListContext = PythonArgumentListContext;

class Python_ordinal_argument_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_python_ordinal_argument_list;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PythonOrdinalArgumentListContext extends Python_ordinal_argument_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.item = null; // Python_expressionContext;
        super.copyFrom(ctx);
    }

	python_expression() {
	    return this.getTypedRuleContext(Python_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonOrdinalArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonOrdinalArgumentList(this);
		}
	}


}

MParser.PythonOrdinalArgumentListContext = PythonOrdinalArgumentListContext;

class PythonOrdinalArgumentListItemContext extends Python_ordinal_argument_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // Python_ordinal_argument_listContext;
        this.item = null; // Python_expressionContext;
        super.copyFrom(ctx);
    }

	COMMA() {
	    return this.getToken(MParser.COMMA, 0);
	};

	python_ordinal_argument_list() {
	    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
	};

	python_expression() {
	    return this.getTypedRuleContext(Python_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonOrdinalArgumentListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonOrdinalArgumentListItem(this);
		}
	}


}

MParser.PythonOrdinalArgumentListItemContext = PythonOrdinalArgumentListItemContext;

class Python_named_argument_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_python_named_argument_list;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PythonNamedArgumentListContext extends Python_named_argument_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Python_identifierContext;
        this.exp = null; // Python_expressionContext;
        super.copyFrom(ctx);
    }

	EQ() {
	    return this.getToken(MParser.EQ, 0);
	};

	python_identifier() {
	    return this.getTypedRuleContext(Python_identifierContext,0);
	};

	python_expression() {
	    return this.getTypedRuleContext(Python_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonNamedArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonNamedArgumentList(this);
		}
	}


}

MParser.PythonNamedArgumentListContext = PythonNamedArgumentListContext;

class PythonNamedArgumentListItemContext extends Python_named_argument_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // Python_named_argument_listContext;
        this.name = null; // Python_identifierContext;
        this.exp = null; // Python_expressionContext;
        super.copyFrom(ctx);
    }

	COMMA() {
	    return this.getToken(MParser.COMMA, 0);
	};

	EQ() {
	    return this.getToken(MParser.EQ, 0);
	};

	python_named_argument_list() {
	    return this.getTypedRuleContext(Python_named_argument_listContext,0);
	};

	python_identifier() {
	    return this.getTypedRuleContext(Python_identifierContext,0);
	};

	python_expression() {
	    return this.getTypedRuleContext(Python_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonNamedArgumentListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonNamedArgumentListItem(this);
		}
	}


}

MParser.PythonNamedArgumentListItemContext = PythonNamedArgumentListItemContext;

class Python_parenthesis_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_python_parenthesis_expression;
        this.exp = null; // Python_expressionContext
    }

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	python_expression() {
	    return this.getTypedRuleContext(Python_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPython_parenthesis_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPython_parenthesis_expression(this);
		}
	}


}



class Python_identifier_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_python_identifier_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PythonChildIdentifierContext extends Python_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Python_identifier_expressionContext;
        this.name = null; // Python_identifierContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(MParser.DOT, 0);
	};

	python_identifier_expression() {
	    return this.getTypedRuleContext(Python_identifier_expressionContext,0);
	};

	python_identifier() {
	    return this.getTypedRuleContext(Python_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonChildIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonChildIdentifier(this);
		}
	}


}

MParser.PythonChildIdentifierContext = PythonChildIdentifierContext;

class PythonPromptoIdentifierContext extends Python_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DOLLAR_IDENTIFIER() {
	    return this.getToken(MParser.DOLLAR_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonPromptoIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonPromptoIdentifier(this);
		}
	}


}

MParser.PythonPromptoIdentifierContext = PythonPromptoIdentifierContext;

class PythonIdentifierContext extends Python_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Python_identifierContext;
        super.copyFrom(ctx);
    }

	python_identifier() {
	    return this.getTypedRuleContext(Python_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonIdentifier(this);
		}
	}


}

MParser.PythonIdentifierContext = PythonIdentifierContext;

class Python_literal_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_python_literal_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PythonIntegerLiteralContext extends Python_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	INTEGER_LITERAL() {
	    return this.getToken(MParser.INTEGER_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonIntegerLiteral(this);
		}
	}


}

MParser.PythonIntegerLiteralContext = PythonIntegerLiteralContext;

class PythonBooleanLiteralContext extends Python_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	BOOLEAN_LITERAL() {
	    return this.getToken(MParser.BOOLEAN_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonBooleanLiteral(this);
		}
	}


}

MParser.PythonBooleanLiteralContext = PythonBooleanLiteralContext;

class PythonCharacterLiteralContext extends Python_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	CHAR_LITERAL() {
	    return this.getToken(MParser.CHAR_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonCharacterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonCharacterLiteral(this);
		}
	}


}

MParser.PythonCharacterLiteralContext = PythonCharacterLiteralContext;

class PythonTextLiteralContext extends Python_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	TEXT_LITERAL() {
	    return this.getToken(MParser.TEXT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonTextLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonTextLiteral(this);
		}
	}


}

MParser.PythonTextLiteralContext = PythonTextLiteralContext;

class PythonDecimalLiteralContext extends Python_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	DECIMAL_LITERAL() {
	    return this.getToken(MParser.DECIMAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPythonDecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPythonDecimalLiteral(this);
		}
	}


}

MParser.PythonDecimalLiteralContext = PythonDecimalLiteralContext;

class Python_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_python_identifier;
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
	};

	SYMBOL_IDENTIFIER() {
	    return this.getToken(MParser.SYMBOL_IDENTIFIER, 0);
	};

	DOLLAR_IDENTIFIER() {
	    return this.getToken(MParser.DOLLAR_IDENTIFIER, 0);
	};

	TYPE_IDENTIFIER() {
	    return this.getToken(MParser.TYPE_IDENTIFIER, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterPython_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitPython_identifier(this);
		}
	}


}



class Java_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_java_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavaReturnStatementContext extends Java_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Java_expressionContext;
        super.copyFrom(ctx);
    }

	RETURN() {
	    return this.getToken(MParser.RETURN, 0);
	};

	SEMI() {
	    return this.getToken(MParser.SEMI, 0);
	};

	java_expression() {
	    return this.getTypedRuleContext(Java_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavaReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavaReturnStatement(this);
		}
	}


}

MParser.JavaReturnStatementContext = JavaReturnStatementContext;

class JavaStatementContext extends Java_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Java_expressionContext;
        super.copyFrom(ctx);
    }

	SEMI() {
	    return this.getToken(MParser.SEMI, 0);
	};

	java_expression() {
	    return this.getTypedRuleContext(Java_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavaStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavaStatement(this);
		}
	}


}

MParser.JavaStatementContext = JavaStatementContext;

class Java_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_java_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavaSelectorExpressionContext extends Java_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Java_expressionContext;
        this.child = null; // Java_selector_expressionContext;
        super.copyFrom(ctx);
    }

	java_expression() {
	    return this.getTypedRuleContext(Java_expressionContext,0);
	};

	java_selector_expression() {
	    return this.getTypedRuleContext(Java_selector_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavaSelectorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavaSelectorExpression(this);
		}
	}


}

MParser.JavaSelectorExpressionContext = JavaSelectorExpressionContext;

class JavaPrimaryExpressionContext extends Java_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Java_primary_expressionContext;
        super.copyFrom(ctx);
    }

	java_primary_expression() {
	    return this.getTypedRuleContext(Java_primary_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavaPrimaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavaPrimaryExpression(this);
		}
	}


}

MParser.JavaPrimaryExpressionContext = JavaPrimaryExpressionContext;

class Java_primary_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_java_primary_expression;
    }

	java_this_expression() {
	    return this.getTypedRuleContext(Java_this_expressionContext,0);
	};

	java_new_expression() {
	    return this.getTypedRuleContext(Java_new_expressionContext,0);
	};

	java_parenthesis_expression() {
	    return this.getTypedRuleContext(Java_parenthesis_expressionContext,0);
	};

	java_identifier_expression() {
	    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
	};

	java_literal_expression() {
	    return this.getTypedRuleContext(Java_literal_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJava_primary_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJava_primary_expression(this);
		}
	}


}



class Java_this_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_java_this_expression;
    }

	this_expression() {
	    return this.getTypedRuleContext(This_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJava_this_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJava_this_expression(this);
		}
	}


}



class Java_new_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_java_new_expression;
    }

	new_token() {
	    return this.getTypedRuleContext(New_tokenContext,0);
	};

	java_method_expression() {
	    return this.getTypedRuleContext(Java_method_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJava_new_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJava_new_expression(this);
		}
	}


}



class Java_selector_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_java_selector_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavaItemExpressionContext extends Java_selector_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Java_item_expressionContext;
        super.copyFrom(ctx);
    }

	java_item_expression() {
	    return this.getTypedRuleContext(Java_item_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavaItemExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavaItemExpression(this);
		}
	}


}

MParser.JavaItemExpressionContext = JavaItemExpressionContext;

class JavaMethodExpressionContext extends Java_selector_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Java_method_expressionContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(MParser.DOT, 0);
	};

	java_method_expression() {
	    return this.getTypedRuleContext(Java_method_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavaMethodExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavaMethodExpression(this);
		}
	}


}

MParser.JavaMethodExpressionContext = JavaMethodExpressionContext;

class Java_method_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_java_method_expression;
        this.name = null; // Java_identifierContext
        this.args = null; // Java_argumentsContext
    }

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	java_identifier() {
	    return this.getTypedRuleContext(Java_identifierContext,0);
	};

	java_arguments() {
	    return this.getTypedRuleContext(Java_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJava_method_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJava_method_expression(this);
		}
	}


}



class Java_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_java_arguments;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavaArgumentListItemContext extends Java_argumentsContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // Java_argumentsContext;
        this.item = null; // Java_expressionContext;
        super.copyFrom(ctx);
    }

	COMMA() {
	    return this.getToken(MParser.COMMA, 0);
	};

	java_arguments() {
	    return this.getTypedRuleContext(Java_argumentsContext,0);
	};

	java_expression() {
	    return this.getTypedRuleContext(Java_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavaArgumentListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavaArgumentListItem(this);
		}
	}


}

MParser.JavaArgumentListItemContext = JavaArgumentListItemContext;

class JavaArgumentListContext extends Java_argumentsContext {

    constructor(parser, ctx) {
        super(parser);
        this.item = null; // Java_expressionContext;
        super.copyFrom(ctx);
    }

	java_expression() {
	    return this.getTypedRuleContext(Java_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavaArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavaArgumentList(this);
		}
	}


}

MParser.JavaArgumentListContext = JavaArgumentListContext;

class Java_item_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_java_item_expression;
        this.exp = null; // Java_expressionContext
    }

	LBRAK() {
	    return this.getToken(MParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(MParser.RBRAK, 0);
	};

	java_expression() {
	    return this.getTypedRuleContext(Java_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJava_item_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJava_item_expression(this);
		}
	}


}



class Java_parenthesis_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_java_parenthesis_expression;
        this.exp = null; // Java_expressionContext
    }

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	java_expression() {
	    return this.getTypedRuleContext(Java_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJava_parenthesis_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJava_parenthesis_expression(this);
		}
	}


}



class Java_identifier_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_java_identifier_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavaIdentifierContext extends Java_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Java_identifierContext;
        super.copyFrom(ctx);
    }

	java_identifier() {
	    return this.getTypedRuleContext(Java_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavaIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavaIdentifier(this);
		}
	}


}

MParser.JavaIdentifierContext = JavaIdentifierContext;

class JavaChildIdentifierContext extends Java_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Java_identifier_expressionContext;
        this.name = null; // Java_identifierContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(MParser.DOT, 0);
	};

	java_identifier_expression() {
	    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
	};

	java_identifier() {
	    return this.getTypedRuleContext(Java_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavaChildIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavaChildIdentifier(this);
		}
	}


}

MParser.JavaChildIdentifierContext = JavaChildIdentifierContext;

class Java_class_identifier_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_java_class_identifier_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavaClassIdentifierContext extends Java_class_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.klass = null; // Java_identifier_expressionContext;
        super.copyFrom(ctx);
    }

	java_identifier_expression() {
	    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavaClassIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavaClassIdentifier(this);
		}
	}


}

MParser.JavaClassIdentifierContext = JavaClassIdentifierContext;

class JavaChildClassIdentifierContext extends Java_class_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Java_class_identifier_expressionContext;
        this.name = null; // Token;
        super.copyFrom(ctx);
    }

	java_class_identifier_expression() {
	    return this.getTypedRuleContext(Java_class_identifier_expressionContext,0);
	};

	DOLLAR_IDENTIFIER() {
	    return this.getToken(MParser.DOLLAR_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavaChildClassIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavaChildClassIdentifier(this);
		}
	}


}

MParser.JavaChildClassIdentifierContext = JavaChildClassIdentifierContext;

class Java_literal_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_java_literal_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavaBooleanLiteralContext extends Java_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	BOOLEAN_LITERAL() {
	    return this.getToken(MParser.BOOLEAN_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavaBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavaBooleanLiteral(this);
		}
	}


}

MParser.JavaBooleanLiteralContext = JavaBooleanLiteralContext;

class JavaCharacterLiteralContext extends Java_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	CHAR_LITERAL() {
	    return this.getToken(MParser.CHAR_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavaCharacterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavaCharacterLiteral(this);
		}
	}


}

MParser.JavaCharacterLiteralContext = JavaCharacterLiteralContext;

class JavaIntegerLiteralContext extends Java_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	INTEGER_LITERAL() {
	    return this.getToken(MParser.INTEGER_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavaIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavaIntegerLiteral(this);
		}
	}


}

MParser.JavaIntegerLiteralContext = JavaIntegerLiteralContext;

class JavaTextLiteralContext extends Java_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	TEXT_LITERAL() {
	    return this.getToken(MParser.TEXT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavaTextLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavaTextLiteral(this);
		}
	}


}

MParser.JavaTextLiteralContext = JavaTextLiteralContext;

class JavaDecimalLiteralContext extends Java_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	DECIMAL_LITERAL() {
	    return this.getToken(MParser.DECIMAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJavaDecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJavaDecimalLiteral(this);
		}
	}


}

MParser.JavaDecimalLiteralContext = JavaDecimalLiteralContext;

class Java_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_java_identifier;
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
	};

	SYMBOL_IDENTIFIER() {
	    return this.getToken(MParser.SYMBOL_IDENTIFIER, 0);
	};

	DOLLAR_IDENTIFIER() {
	    return this.getToken(MParser.DOLLAR_IDENTIFIER, 0);
	};

	TYPE_IDENTIFIER() {
	    return this.getToken(MParser.TYPE_IDENTIFIER, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJava_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJava_identifier(this);
		}
	}


}



class Csharp_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_csharp_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CSharpReturnStatementContext extends Csharp_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Csharp_expressionContext;
        super.copyFrom(ctx);
    }

	RETURN() {
	    return this.getToken(MParser.RETURN, 0);
	};

	SEMI() {
	    return this.getToken(MParser.SEMI, 0);
	};

	csharp_expression() {
	    return this.getTypedRuleContext(Csharp_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCSharpReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCSharpReturnStatement(this);
		}
	}


}

MParser.CSharpReturnStatementContext = CSharpReturnStatementContext;

class CSharpStatementContext extends Csharp_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Csharp_expressionContext;
        super.copyFrom(ctx);
    }

	SEMI() {
	    return this.getToken(MParser.SEMI, 0);
	};

	csharp_expression() {
	    return this.getTypedRuleContext(Csharp_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCSharpStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCSharpStatement(this);
		}
	}


}

MParser.CSharpStatementContext = CSharpStatementContext;

class Csharp_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_csharp_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CSharpSelectorExpressionContext extends Csharp_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Csharp_expressionContext;
        this.child = null; // Csharp_selector_expressionContext;
        super.copyFrom(ctx);
    }

	csharp_expression() {
	    return this.getTypedRuleContext(Csharp_expressionContext,0);
	};

	csharp_selector_expression() {
	    return this.getTypedRuleContext(Csharp_selector_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCSharpSelectorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCSharpSelectorExpression(this);
		}
	}


}

MParser.CSharpSelectorExpressionContext = CSharpSelectorExpressionContext;

class CSharpPrimaryExpressionContext extends Csharp_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Csharp_primary_expressionContext;
        super.copyFrom(ctx);
    }

	csharp_primary_expression() {
	    return this.getTypedRuleContext(Csharp_primary_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCSharpPrimaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCSharpPrimaryExpression(this);
		}
	}


}

MParser.CSharpPrimaryExpressionContext = CSharpPrimaryExpressionContext;

class Csharp_primary_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_csharp_primary_expression;
    }

	csharp_this_expression() {
	    return this.getTypedRuleContext(Csharp_this_expressionContext,0);
	};

	csharp_new_expression() {
	    return this.getTypedRuleContext(Csharp_new_expressionContext,0);
	};

	csharp_parenthesis_expression() {
	    return this.getTypedRuleContext(Csharp_parenthesis_expressionContext,0);
	};

	csharp_identifier_expression() {
	    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
	};

	csharp_literal_expression() {
	    return this.getTypedRuleContext(Csharp_literal_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCsharp_primary_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCsharp_primary_expression(this);
		}
	}


}



class Csharp_this_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_csharp_this_expression;
    }

	this_expression() {
	    return this.getTypedRuleContext(This_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCsharp_this_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCsharp_this_expression(this);
		}
	}


}



class Csharp_new_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_csharp_new_expression;
    }

	new_token() {
	    return this.getTypedRuleContext(New_tokenContext,0);
	};

	csharp_method_expression() {
	    return this.getTypedRuleContext(Csharp_method_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCsharp_new_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCsharp_new_expression(this);
		}
	}


}



class Csharp_selector_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_csharp_selector_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CSharpMethodExpressionContext extends Csharp_selector_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Csharp_method_expressionContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(MParser.DOT, 0);
	};

	csharp_method_expression() {
	    return this.getTypedRuleContext(Csharp_method_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCSharpMethodExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCSharpMethodExpression(this);
		}
	}


}

MParser.CSharpMethodExpressionContext = CSharpMethodExpressionContext;

class CSharpItemExpressionContext extends Csharp_selector_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Csharp_item_expressionContext;
        super.copyFrom(ctx);
    }

	csharp_item_expression() {
	    return this.getTypedRuleContext(Csharp_item_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCSharpItemExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCSharpItemExpression(this);
		}
	}


}

MParser.CSharpItemExpressionContext = CSharpItemExpressionContext;

class Csharp_method_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_csharp_method_expression;
        this.name = null; // Csharp_identifierContext
        this.args = null; // Csharp_argumentsContext
    }

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	csharp_identifier() {
	    return this.getTypedRuleContext(Csharp_identifierContext,0);
	};

	csharp_arguments() {
	    return this.getTypedRuleContext(Csharp_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCsharp_method_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCsharp_method_expression(this);
		}
	}


}



class Csharp_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_csharp_arguments;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CSharpArgumentListContext extends Csharp_argumentsContext {

    constructor(parser, ctx) {
        super(parser);
        this.item = null; // Csharp_expressionContext;
        super.copyFrom(ctx);
    }

	csharp_expression() {
	    return this.getTypedRuleContext(Csharp_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCSharpArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCSharpArgumentList(this);
		}
	}


}

MParser.CSharpArgumentListContext = CSharpArgumentListContext;

class CSharpArgumentListItemContext extends Csharp_argumentsContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // Csharp_argumentsContext;
        this.item = null; // Csharp_expressionContext;
        super.copyFrom(ctx);
    }

	COMMA() {
	    return this.getToken(MParser.COMMA, 0);
	};

	csharp_arguments() {
	    return this.getTypedRuleContext(Csharp_argumentsContext,0);
	};

	csharp_expression() {
	    return this.getTypedRuleContext(Csharp_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCSharpArgumentListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCSharpArgumentListItem(this);
		}
	}


}

MParser.CSharpArgumentListItemContext = CSharpArgumentListItemContext;

class Csharp_item_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_csharp_item_expression;
        this.exp = null; // Csharp_expressionContext
    }

	LBRAK() {
	    return this.getToken(MParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(MParser.RBRAK, 0);
	};

	csharp_expression() {
	    return this.getTypedRuleContext(Csharp_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCsharp_item_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCsharp_item_expression(this);
		}
	}


}



class Csharp_parenthesis_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_csharp_parenthesis_expression;
        this.exp = null; // Csharp_expressionContext
    }

	LPAR() {
	    return this.getToken(MParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(MParser.RPAR, 0);
	};

	csharp_expression() {
	    return this.getTypedRuleContext(Csharp_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCsharp_parenthesis_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCsharp_parenthesis_expression(this);
		}
	}


}



class Csharp_identifier_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_csharp_identifier_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CSharpIdentifierContext extends Csharp_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Csharp_identifierContext;
        super.copyFrom(ctx);
    }

	csharp_identifier() {
	    return this.getTypedRuleContext(Csharp_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCSharpIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCSharpIdentifier(this);
		}
	}


}

MParser.CSharpIdentifierContext = CSharpIdentifierContext;

class CSharpChildIdentifierContext extends Csharp_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Csharp_identifier_expressionContext;
        this.name = null; // Csharp_identifierContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(MParser.DOT, 0);
	};

	csharp_identifier_expression() {
	    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
	};

	csharp_identifier() {
	    return this.getTypedRuleContext(Csharp_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCSharpChildIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCSharpChildIdentifier(this);
		}
	}


}

MParser.CSharpChildIdentifierContext = CSharpChildIdentifierContext;

class CSharpPromptoIdentifierContext extends Csharp_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DOLLAR_IDENTIFIER() {
	    return this.getToken(MParser.DOLLAR_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCSharpPromptoIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCSharpPromptoIdentifier(this);
		}
	}


}

MParser.CSharpPromptoIdentifierContext = CSharpPromptoIdentifierContext;

class Csharp_literal_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_csharp_literal_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CSharpBooleanLiteralContext extends Csharp_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BOOLEAN_LITERAL() {
	    return this.getToken(MParser.BOOLEAN_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCSharpBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCSharpBooleanLiteral(this);
		}
	}


}

MParser.CSharpBooleanLiteralContext = CSharpBooleanLiteralContext;

class CSharpIntegerLiteralContext extends Csharp_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTEGER_LITERAL() {
	    return this.getToken(MParser.INTEGER_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCSharpIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCSharpIntegerLiteral(this);
		}
	}


}

MParser.CSharpIntegerLiteralContext = CSharpIntegerLiteralContext;

class CSharpDecimalLiteralContext extends Csharp_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DECIMAL_LITERAL() {
	    return this.getToken(MParser.DECIMAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCSharpDecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCSharpDecimalLiteral(this);
		}
	}


}

MParser.CSharpDecimalLiteralContext = CSharpDecimalLiteralContext;

class CSharpCharacterLiteralContext extends Csharp_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHAR_LITERAL() {
	    return this.getToken(MParser.CHAR_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCSharpCharacterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCSharpCharacterLiteral(this);
		}
	}


}

MParser.CSharpCharacterLiteralContext = CSharpCharacterLiteralContext;

class CSharpTextLiteralContext extends Csharp_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TEXT_LITERAL() {
	    return this.getToken(MParser.TEXT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCSharpTextLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCSharpTextLiteral(this);
		}
	}


}

MParser.CSharpTextLiteralContext = CSharpTextLiteralContext;

class Csharp_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_csharp_identifier;
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
	};

	SYMBOL_IDENTIFIER() {
	    return this.getToken(MParser.SYMBOL_IDENTIFIER, 0);
	};

	DOLLAR_IDENTIFIER() {
	    return this.getToken(MParser.DOLLAR_IDENTIFIER, 0);
	};

	TYPE_IDENTIFIER() {
	    return this.getToken(MParser.TYPE_IDENTIFIER, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCsharp_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCsharp_identifier(this);
		}
	}


}



class Jsx_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_jsx_expression;
    }

	jsx_element() {
	    return this.getTypedRuleContext(Jsx_elementContext,0);
	};

	jsx_fragment() {
	    return this.getTypedRuleContext(Jsx_fragmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsx_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsx_expression(this);
		}
	}


}



class Jsx_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_jsx_element;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JsxSelfClosingContext extends Jsx_elementContext {

    constructor(parser, ctx) {
        super(parser);
        this.jsx = null; // Jsx_self_closingContext;
        super.copyFrom(ctx);
    }

	jsx_self_closing() {
	    return this.getTypedRuleContext(Jsx_self_closingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsxSelfClosing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsxSelfClosing(this);
		}
	}


}

MParser.JsxSelfClosingContext = JsxSelfClosingContext;

class JsxElementContext extends Jsx_elementContext {

    constructor(parser, ctx) {
        super(parser);
        this.opening = null; // Jsx_openingContext;
        this.children_ = null; // Jsx_childrenContext;
        this.closing = null; // Jsx_closingContext;
        super.copyFrom(ctx);
    }

	jsx_opening() {
	    return this.getTypedRuleContext(Jsx_openingContext,0);
	};

	jsx_closing() {
	    return this.getTypedRuleContext(Jsx_closingContext,0);
	};

	jsx_children() {
	    return this.getTypedRuleContext(Jsx_childrenContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsxElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsxElement(this);
		}
	}


}

MParser.JsxElementContext = JsxElementContext;

class Jsx_fragmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_jsx_fragment;
        this.children_ = null; // Jsx_childrenContext
    }

	jsx_fragment_start() {
	    return this.getTypedRuleContext(Jsx_fragment_startContext,0);
	};

	ws_plus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ws_plusContext);
	    } else {
	        return this.getTypedRuleContext(Ws_plusContext,i);
	    }
	};

	jsx_fragment_end() {
	    return this.getTypedRuleContext(Jsx_fragment_endContext,0);
	};

	jsx_children() {
	    return this.getTypedRuleContext(Jsx_childrenContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsx_fragment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsx_fragment(this);
		}
	}


}



class Jsx_fragment_startContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_jsx_fragment_start;
    }

	LT() {
	    return this.getToken(MParser.LT, 0);
	};

	GT() {
	    return this.getToken(MParser.GT, 0);
	};

	LTGT() {
	    return this.getToken(MParser.LTGT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsx_fragment_start(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsx_fragment_start(this);
		}
	}


}



class Jsx_fragment_endContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_jsx_fragment_end;
    }

	LT() {
	    return this.getToken(MParser.LT, 0);
	};

	SLASH() {
	    return this.getToken(MParser.SLASH, 0);
	};

	GT() {
	    return this.getToken(MParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsx_fragment_end(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsx_fragment_end(this);
		}
	}


}



class Jsx_self_closingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_jsx_self_closing;
        this.name = null; // Jsx_element_nameContext
        this.attributes = null; // Jsx_attributeContext
    }

	LT() {
	    return this.getToken(MParser.LT, 0);
	};

	ws_plus() {
	    return this.getTypedRuleContext(Ws_plusContext,0);
	};

	SLASH() {
	    return this.getToken(MParser.SLASH, 0);
	};

	GT() {
	    return this.getToken(MParser.GT, 0);
	};

	jsx_element_name() {
	    return this.getTypedRuleContext(Jsx_element_nameContext,0);
	};

	jsx_attribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Jsx_attributeContext);
	    } else {
	        return this.getTypedRuleContext(Jsx_attributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsx_self_closing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsx_self_closing(this);
		}
	}


}



class Jsx_openingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_jsx_opening;
        this.name = null; // Jsx_element_nameContext
        this.attributes = null; // Jsx_attributeContext
    }

	LT() {
	    return this.getToken(MParser.LT, 0);
	};

	ws_plus() {
	    return this.getTypedRuleContext(Ws_plusContext,0);
	};

	GT() {
	    return this.getToken(MParser.GT, 0);
	};

	jsx_element_name() {
	    return this.getTypedRuleContext(Jsx_element_nameContext,0);
	};

	jsx_attribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Jsx_attributeContext);
	    } else {
	        return this.getTypedRuleContext(Jsx_attributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsx_opening(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsx_opening(this);
		}
	}


}



class Jsx_closingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_jsx_closing;
        this.name = null; // Jsx_element_nameContext
    }

	LT() {
	    return this.getToken(MParser.LT, 0);
	};

	SLASH() {
	    return this.getToken(MParser.SLASH, 0);
	};

	GT() {
	    return this.getToken(MParser.GT, 0);
	};

	jsx_element_name() {
	    return this.getTypedRuleContext(Jsx_element_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsx_closing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsx_closing(this);
		}
	}


}



class Jsx_element_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_jsx_element_name;
    }

	jsx_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Jsx_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Jsx_identifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.DOT);
	    } else {
	        return this.getToken(MParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsx_element_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsx_element_name(this);
		}
	}


}



class Jsx_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_jsx_identifier;
    }

	identifier_or_keyword() {
	    return this.getTypedRuleContext(Identifier_or_keywordContext,0);
	};

	nospace_hyphen_identifier_or_keyword = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Nospace_hyphen_identifier_or_keywordContext);
	    } else {
	        return this.getTypedRuleContext(Nospace_hyphen_identifier_or_keywordContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsx_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsx_identifier(this);
		}
	}


}



class Jsx_attributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_jsx_attribute;
        this.name = null; // Jsx_identifierContext
        this.value = null; // Jsx_attribute_valueContext
    }

	ws_plus() {
	    return this.getTypedRuleContext(Ws_plusContext,0);
	};

	jsx_identifier() {
	    return this.getTypedRuleContext(Jsx_identifierContext,0);
	};

	EQ() {
	    return this.getToken(MParser.EQ, 0);
	};

	jsx_attribute_value() {
	    return this.getTypedRuleContext(Jsx_attribute_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsx_attribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsx_attribute(this);
		}
	}


}



class Jsx_attribute_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_jsx_attribute_value;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JsxValueContext extends Jsx_attribute_valueContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	LCURL() {
	    return this.getToken(MParser.LCURL, 0);
	};

	RCURL() {
	    return this.getToken(MParser.RCURL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsxValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsxValue(this);
		}
	}


}

MParser.JsxValueContext = JsxValueContext;

class JsxLiteralContext extends Jsx_attribute_valueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TEXT_LITERAL() {
	    return this.getToken(MParser.TEXT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsxLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsxLiteral(this);
		}
	}


}

MParser.JsxLiteralContext = JsxLiteralContext;

class Jsx_childrenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_jsx_children;
    }

	jsx_child = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Jsx_childContext);
	    } else {
	        return this.getTypedRuleContext(Jsx_childContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsx_children(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsx_children(this);
		}
	}


}



class Jsx_childContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_jsx_child;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JsxTextContext extends Jsx_childContext {

    constructor(parser, ctx) {
        super(parser);
        this.text = null; // Jsx_textContext;
        super.copyFrom(ctx);
    }

	jsx_text() {
	    return this.getTypedRuleContext(Jsx_textContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsxText(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsxText(this);
		}
	}


}

MParser.JsxTextContext = JsxTextContext;

class JsxChildContext extends Jsx_childContext {

    constructor(parser, ctx) {
        super(parser);
        this.jsx = null; // Jsx_elementContext;
        super.copyFrom(ctx);
    }

	jsx_element() {
	    return this.getTypedRuleContext(Jsx_elementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsxChild(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsxChild(this);
		}
	}


}

MParser.JsxChildContext = JsxChildContext;

class JsxCodeContext extends Jsx_childContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	LCURL() {
	    return this.getToken(MParser.LCURL, 0);
	};

	RCURL() {
	    return this.getToken(MParser.RCURL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsxCode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsxCode(this);
		}
	}


}

MParser.JsxCodeContext = JsxCodeContext;

class Jsx_textContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_jsx_text;
    }

	jsx_char = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Jsx_charContext);
	    } else {
	        return this.getTypedRuleContext(Jsx_charContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsx_text(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsx_text(this);
		}
	}


}



class Jsx_charContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_jsx_char;
    }

	LCURL() {
	    return this.getToken(MParser.LCURL, 0);
	};

	RCURL() {
	    return this.getToken(MParser.RCURL, 0);
	};

	LT() {
	    return this.getToken(MParser.LT, 0);
	};

	GT() {
	    return this.getToken(MParser.GT, 0);
	};

	JSX_TEXT() {
	    return this.getToken(MParser.JSX_TEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterJsx_char(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitJsx_char(this);
		}
	}


}



class Css_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_css_expression;
        this.field = null; // Css_fieldContext
    }

	LCURL() {
	    return this.getToken(MParser.LCURL, 0);
	};

	RCURL() {
	    return this.getToken(MParser.RCURL, 0);
	};

	css_field = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Css_fieldContext);
	    } else {
	        return this.getTypedRuleContext(Css_fieldContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCss_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCss_expression(this);
		}
	}


}



class Css_fieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_css_field;
        this.name = null; // Css_identifierContext
        this.values = null; // Css_valueContext
    }

	COLON() {
	    return this.getToken(MParser.COLON, 0);
	};

	SEMI() {
	    return this.getToken(MParser.SEMI, 0);
	};

	css_identifier() {
	    return this.getTypedRuleContext(Css_identifierContext,0);
	};

	css_value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Css_valueContext);
	    } else {
	        return this.getTypedRuleContext(Css_valueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCss_field(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCss_field(this);
		}
	}


}



class Css_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_css_identifier;
    }

	identifier_or_keyword() {
	    return this.getTypedRuleContext(Identifier_or_keywordContext,0);
	};

	MINUS() {
	    return this.getToken(MParser.MINUS, 0);
	};

	nospace_identifier_or_keyword() {
	    return this.getTypedRuleContext(Nospace_identifier_or_keywordContext,0);
	};

	css_identifier() {
	    return this.getTypedRuleContext(Css_identifierContext,0);
	};

	nospace_hyphen_identifier_or_keyword = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Nospace_hyphen_identifier_or_keywordContext);
	    } else {
	        return this.getTypedRuleContext(Nospace_hyphen_identifier_or_keywordContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCss_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCss_identifier(this);
		}
	}


}



class Css_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_css_value;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CssTextContext extends Css_valueContext {

    constructor(parser, ctx) {
        super(parser);
        this.text = null; // Css_textContext;
        super.copyFrom(ctx);
    }

	css_text() {
	    return this.getTypedRuleContext(Css_textContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCssText(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCssText(this);
		}
	}


}

MParser.CssTextContext = CssTextContext;

class CssValueContext extends Css_valueContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	LCURL() {
	    return this.getToken(MParser.LCURL, 0);
	};

	RCURL() {
	    return this.getToken(MParser.RCURL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCssValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCssValue(this);
		}
	}


}

MParser.CssValueContext = CssValueContext;

class Css_textContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MParser.RULE_css_text;
    }

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.SEMI);
	    } else {
	        return this.getToken(MParser.SEMI, i);
	    }
	};


	LCURL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.LCURL);
	    } else {
	        return this.getToken(MParser.LCURL, i);
	    }
	};


	RCURL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MParser.RCURL);
	    } else {
	        return this.getToken(MParser.RCURL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.enterCss_text(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MParserListener ) {
	        listener.exitCss_text(this);
		}
	}


}




MParser.Enum_category_declarationContext = Enum_category_declarationContext; 
MParser.Enum_native_declarationContext = Enum_native_declarationContext; 
MParser.Native_symbolContext = Native_symbolContext; 
MParser.Category_symbolContext = Category_symbolContext; 
MParser.Attribute_declarationContext = Attribute_declarationContext; 
MParser.Index_clauseContext = Index_clauseContext; 
MParser.Concrete_widget_declarationContext = Concrete_widget_declarationContext; 
MParser.Native_widget_declarationContext = Native_widget_declarationContext; 
MParser.Concrete_category_declarationContext = Concrete_category_declarationContext; 
MParser.Singleton_category_declarationContext = Singleton_category_declarationContext; 
MParser.Derived_listContext = Derived_listContext; 
MParser.Operator_method_declarationContext = Operator_method_declarationContext; 
MParser.Setter_method_declarationContext = Setter_method_declarationContext; 
MParser.Native_setter_declarationContext = Native_setter_declarationContext; 
MParser.Getter_method_declarationContext = Getter_method_declarationContext; 
MParser.Native_getter_declarationContext = Native_getter_declarationContext; 
MParser.Native_category_declarationContext = Native_category_declarationContext; 
MParser.Native_resource_declarationContext = Native_resource_declarationContext; 
MParser.Native_category_bindingsContext = Native_category_bindingsContext; 
MParser.Native_category_binding_listContext = Native_category_binding_listContext; 
MParser.Abstract_method_declarationContext = Abstract_method_declarationContext; 
MParser.Concrete_method_declarationContext = Concrete_method_declarationContext; 
MParser.Native_method_declarationContext = Native_method_declarationContext; 
MParser.Test_method_declarationContext = Test_method_declarationContext; 
MParser.AssertionContext = AssertionContext; 
MParser.Typed_argumentContext = Typed_argumentContext; 
MParser.StatementContext = StatementContext; 
MParser.Flush_statementContext = Flush_statementContext; 
MParser.Store_statementContext = Store_statementContext; 
MParser.Method_call_expressionContext = Method_call_expressionContext; 
MParser.Method_call_statementContext = Method_call_statementContext; 
MParser.With_resource_statementContext = With_resource_statementContext; 
MParser.With_singleton_statementContext = With_singleton_statementContext; 
MParser.Switch_statementContext = Switch_statementContext; 
MParser.Switch_case_statementContext = Switch_case_statementContext; 
MParser.For_each_statementContext = For_each_statementContext; 
MParser.Do_while_statementContext = Do_while_statementContext; 
MParser.While_statementContext = While_statementContext; 
MParser.If_statementContext = If_statementContext; 
MParser.Else_if_statement_listContext = Else_if_statement_listContext; 
MParser.Raise_statementContext = Raise_statementContext; 
MParser.Try_statementContext = Try_statementContext; 
MParser.Catch_statementContext = Catch_statementContext; 
MParser.Break_statementContext = Break_statementContext; 
MParser.Return_statementContext = Return_statementContext; 
MParser.ExpressionContext = ExpressionContext; 
MParser.Filter_expressionContext = Filter_expressionContext; 
MParser.Type_expressionContext = Type_expressionContext; 
MParser.Selectable_expressionContext = Selectable_expressionContext; 
MParser.Instance_expressionContext = Instance_expressionContext; 
MParser.Mutable_instance_expressionContext = Mutable_instance_expressionContext; 
MParser.Method_expressionContext = Method_expressionContext; 
MParser.Instance_selectorContext = Instance_selectorContext; 
MParser.Blob_expressionContext = Blob_expressionContext; 
MParser.Document_expressionContext = Document_expressionContext; 
MParser.Constructor_expressionContext = Constructor_expressionContext; 
MParser.Copy_fromContext = Copy_fromContext; 
MParser.Argument_assignment_listContext = Argument_assignment_listContext; 
MParser.Argument_assignmentContext = Argument_assignmentContext; 
MParser.Write_statementContext = Write_statementContext; 
MParser.Filtered_list_suffixContext = Filtered_list_suffixContext; 
MParser.Fetch_expressionContext = Fetch_expressionContext; 
MParser.Fetch_statementContext = Fetch_statementContext; 
MParser.ThenContext = ThenContext; 
MParser.Read_statementContext = Read_statementContext; 
MParser.Sorted_expressionContext = Sorted_expressionContext; 
MParser.Assign_instance_statementContext = Assign_instance_statementContext; 
MParser.Child_instanceContext = Child_instanceContext; 
MParser.Assign_tuple_statementContext = Assign_tuple_statementContext; 
MParser.LfsContext = LfsContext; 
MParser.LfpContext = LfpContext; 
MParser.Ws_plusContext = Ws_plusContext; 
MParser.IndentContext = IndentContext; 
MParser.DedentContext = DedentContext; 
MParser.Type_literalContext = Type_literalContext; 
MParser.Null_literalContext = Null_literalContext; 
MParser.Comment_statementContext = Comment_statementContext; 
MParser.ReplContext = ReplContext; 
MParser.Declaration_listContext = Declaration_listContext; 
MParser.DeclarationsContext = DeclarationsContext; 
MParser.DeclarationContext = DeclarationContext; 
MParser.Annotation_constructorContext = Annotation_constructorContext; 
MParser.Annotation_identifierContext = Annotation_identifierContext; 
MParser.Annotation_argumentContext = Annotation_argumentContext; 
MParser.Annotation_argument_nameContext = Annotation_argument_nameContext; 
MParser.Annotation_argument_valueContext = Annotation_argument_valueContext; 
MParser.Resource_declarationContext = Resource_declarationContext; 
MParser.Enum_declarationContext = Enum_declarationContext; 
MParser.Native_symbol_listContext = Native_symbol_listContext; 
MParser.Category_symbol_listContext = Category_symbol_listContext; 
MParser.Symbol_listContext = Symbol_listContext; 
MParser.Attribute_constraintContext = Attribute_constraintContext; 
MParser.List_literalContext = List_literalContext; 
MParser.Set_literalContext = Set_literalContext; 
MParser.Expression_listContext = Expression_listContext; 
MParser.Range_literalContext = Range_literalContext; 
MParser.TypedefContext = TypedefContext; 
MParser.Primary_typeContext = Primary_typeContext; 
MParser.Native_typeContext = Native_typeContext; 
MParser.Category_typeContext = Category_typeContext; 
MParser.Mutable_category_typeContext = Mutable_category_typeContext; 
MParser.Code_typeContext = Code_typeContext; 
MParser.Category_declarationContext = Category_declarationContext; 
MParser.Widget_declarationContext = Widget_declarationContext; 
MParser.Type_identifier_listContext = Type_identifier_listContext; 
MParser.Method_identifierContext = Method_identifierContext; 
MParser.Identifier_or_keywordContext = Identifier_or_keywordContext; 
MParser.Nospace_hyphen_identifier_or_keywordContext = Nospace_hyphen_identifier_or_keywordContext; 
MParser.Nospace_identifier_or_keywordContext = Nospace_identifier_or_keywordContext; 
MParser.IdentifierContext = IdentifierContext; 
MParser.Member_identifierContext = Member_identifierContext; 
MParser.Variable_identifierContext = Variable_identifierContext; 
MParser.Attribute_identifierContext = Attribute_identifierContext; 
MParser.Type_identifierContext = Type_identifierContext; 
MParser.Symbol_identifierContext = Symbol_identifierContext; 
MParser.Argument_listContext = Argument_listContext; 
MParser.ArgumentContext = ArgumentContext; 
MParser.Operator_argumentContext = Operator_argumentContext; 
MParser.Named_argumentContext = Named_argumentContext; 
MParser.Code_argumentContext = Code_argumentContext; 
MParser.Category_or_any_typeContext = Category_or_any_typeContext; 
MParser.Any_typeContext = Any_typeContext; 
MParser.Member_method_declaration_listContext = Member_method_declaration_listContext; 
MParser.Member_method_declarationContext = Member_method_declarationContext; 
MParser.Native_member_method_declaration_listContext = Native_member_method_declaration_listContext; 
MParser.Native_member_method_declarationContext = Native_member_method_declarationContext; 
MParser.Native_category_bindingContext = Native_category_bindingContext; 
MParser.Python_category_bindingContext = Python_category_bindingContext; 
MParser.Python_moduleContext = Python_moduleContext; 
MParser.Javascript_category_bindingContext = Javascript_category_bindingContext; 
MParser.Javascript_moduleContext = Javascript_moduleContext; 
MParser.Variable_identifier_listContext = Variable_identifier_listContext; 
MParser.Attribute_identifier_listContext = Attribute_identifier_listContext; 
MParser.Method_declarationContext = Method_declarationContext; 
MParser.Native_statement_listContext = Native_statement_listContext; 
MParser.Native_statementContext = Native_statementContext; 
MParser.Python_native_statementContext = Python_native_statementContext; 
MParser.Javascript_native_statementContext = Javascript_native_statementContext; 
MParser.Statement_listContext = Statement_listContext; 
MParser.Assertion_listContext = Assertion_listContext; 
MParser.Switch_case_statement_listContext = Switch_case_statement_listContext; 
MParser.Catch_statement_listContext = Catch_statement_listContext; 
MParser.Literal_collectionContext = Literal_collectionContext; 
MParser.Atomic_literalContext = Atomic_literalContext; 
MParser.Literal_list_literalContext = Literal_list_literalContext; 
MParser.This_expressionContext = This_expressionContext; 
MParser.Super_expressionContext = Super_expressionContext; 
MParser.Parenthesis_expressionContext = Parenthesis_expressionContext; 
MParser.Literal_expressionContext = Literal_expressionContext; 
MParser.Collection_literalContext = Collection_literalContext; 
MParser.Tuple_literalContext = Tuple_literalContext; 
MParser.Dict_literalContext = Dict_literalContext; 
MParser.Document_literalContext = Document_literalContext; 
MParser.Expression_tupleContext = Expression_tupleContext; 
MParser.Doc_entry_listContext = Doc_entry_listContext; 
MParser.Doc_entryContext = Doc_entryContext; 
MParser.Doc_keyContext = Doc_keyContext; 
MParser.Dict_entry_listContext = Dict_entry_listContext; 
MParser.Dict_entryContext = Dict_entryContext; 
MParser.Dict_keyContext = Dict_keyContext; 
MParser.Slice_argumentsContext = Slice_argumentsContext; 
MParser.Assign_variable_statementContext = Assign_variable_statementContext; 
MParser.Assignable_instanceContext = Assignable_instanceContext; 
MParser.Is_expressionContext = Is_expressionContext; 
MParser.MetadataContext = MetadataContext; 
MParser.Arrow_expressionContext = Arrow_expressionContext; 
MParser.Arrow_prefixContext = Arrow_prefixContext; 
MParser.Arrow_argsContext = Arrow_argsContext; 
MParser.Sorted_keyContext = Sorted_keyContext; 
MParser.Read_blob_expressionContext = Read_blob_expressionContext; 
MParser.Read_all_expressionContext = Read_all_expressionContext; 
MParser.Read_one_expressionContext = Read_one_expressionContext; 
MParser.Order_by_listContext = Order_by_listContext; 
MParser.Order_byContext = Order_byContext; 
MParser.Include_listContext = Include_listContext; 
MParser.OperatorContext = OperatorContext; 
MParser.KeywordContext = KeywordContext; 
MParser.New_tokenContext = New_tokenContext; 
MParser.Key_tokenContext = Key_tokenContext; 
MParser.Module_tokenContext = Module_tokenContext; 
MParser.Value_tokenContext = Value_tokenContext; 
MParser.Symbols_tokenContext = Symbols_tokenContext; 
MParser.AssignContext = AssignContext; 
MParser.MultiplyContext = MultiplyContext; 
MParser.DivideContext = DivideContext; 
MParser.IdivideContext = IdivideContext; 
MParser.ModuloContext = ModuloContext; 
MParser.Javascript_statementContext = Javascript_statementContext; 
MParser.Javascript_expressionContext = Javascript_expressionContext; 
MParser.Javascript_primary_expressionContext = Javascript_primary_expressionContext; 
MParser.Javascript_this_expressionContext = Javascript_this_expressionContext; 
MParser.Javascript_new_expressionContext = Javascript_new_expressionContext; 
MParser.Javascript_selector_expressionContext = Javascript_selector_expressionContext; 
MParser.Javascript_method_expressionContext = Javascript_method_expressionContext; 
MParser.Javascript_argumentsContext = Javascript_argumentsContext; 
MParser.Javascript_item_expressionContext = Javascript_item_expressionContext; 
MParser.Javascript_parenthesis_expressionContext = Javascript_parenthesis_expressionContext; 
MParser.Javascript_identifier_expressionContext = Javascript_identifier_expressionContext; 
MParser.Javascript_literal_expressionContext = Javascript_literal_expressionContext; 
MParser.Javascript_identifierContext = Javascript_identifierContext; 
MParser.Python_statementContext = Python_statementContext; 
MParser.Python_expressionContext = Python_expressionContext; 
MParser.Python_primary_expressionContext = Python_primary_expressionContext; 
MParser.Python_self_expressionContext = Python_self_expressionContext; 
MParser.Python_selector_expressionContext = Python_selector_expressionContext; 
MParser.Python_method_expressionContext = Python_method_expressionContext; 
MParser.Python_argument_listContext = Python_argument_listContext; 
MParser.Python_ordinal_argument_listContext = Python_ordinal_argument_listContext; 
MParser.Python_named_argument_listContext = Python_named_argument_listContext; 
MParser.Python_parenthesis_expressionContext = Python_parenthesis_expressionContext; 
MParser.Python_identifier_expressionContext = Python_identifier_expressionContext; 
MParser.Python_literal_expressionContext = Python_literal_expressionContext; 
MParser.Python_identifierContext = Python_identifierContext; 
MParser.Java_statementContext = Java_statementContext; 
MParser.Java_expressionContext = Java_expressionContext; 
MParser.Java_primary_expressionContext = Java_primary_expressionContext; 
MParser.Java_this_expressionContext = Java_this_expressionContext; 
MParser.Java_new_expressionContext = Java_new_expressionContext; 
MParser.Java_selector_expressionContext = Java_selector_expressionContext; 
MParser.Java_method_expressionContext = Java_method_expressionContext; 
MParser.Java_argumentsContext = Java_argumentsContext; 
MParser.Java_item_expressionContext = Java_item_expressionContext; 
MParser.Java_parenthesis_expressionContext = Java_parenthesis_expressionContext; 
MParser.Java_identifier_expressionContext = Java_identifier_expressionContext; 
MParser.Java_class_identifier_expressionContext = Java_class_identifier_expressionContext; 
MParser.Java_literal_expressionContext = Java_literal_expressionContext; 
MParser.Java_identifierContext = Java_identifierContext; 
MParser.Csharp_statementContext = Csharp_statementContext; 
MParser.Csharp_expressionContext = Csharp_expressionContext; 
MParser.Csharp_primary_expressionContext = Csharp_primary_expressionContext; 
MParser.Csharp_this_expressionContext = Csharp_this_expressionContext; 
MParser.Csharp_new_expressionContext = Csharp_new_expressionContext; 
MParser.Csharp_selector_expressionContext = Csharp_selector_expressionContext; 
MParser.Csharp_method_expressionContext = Csharp_method_expressionContext; 
MParser.Csharp_argumentsContext = Csharp_argumentsContext; 
MParser.Csharp_item_expressionContext = Csharp_item_expressionContext; 
MParser.Csharp_parenthesis_expressionContext = Csharp_parenthesis_expressionContext; 
MParser.Csharp_identifier_expressionContext = Csharp_identifier_expressionContext; 
MParser.Csharp_literal_expressionContext = Csharp_literal_expressionContext; 
MParser.Csharp_identifierContext = Csharp_identifierContext; 
MParser.Jsx_expressionContext = Jsx_expressionContext; 
MParser.Jsx_elementContext = Jsx_elementContext; 
MParser.Jsx_fragmentContext = Jsx_fragmentContext; 
MParser.Jsx_fragment_startContext = Jsx_fragment_startContext; 
MParser.Jsx_fragment_endContext = Jsx_fragment_endContext; 
MParser.Jsx_self_closingContext = Jsx_self_closingContext; 
MParser.Jsx_openingContext = Jsx_openingContext; 
MParser.Jsx_closingContext = Jsx_closingContext; 
MParser.Jsx_element_nameContext = Jsx_element_nameContext; 
MParser.Jsx_identifierContext = Jsx_identifierContext; 
MParser.Jsx_attributeContext = Jsx_attributeContext; 
MParser.Jsx_attribute_valueContext = Jsx_attribute_valueContext; 
MParser.Jsx_childrenContext = Jsx_childrenContext; 
MParser.Jsx_childContext = Jsx_childContext; 
MParser.Jsx_textContext = Jsx_textContext; 
MParser.Jsx_charContext = Jsx_charContext; 
MParser.Css_expressionContext = Css_expressionContext; 
MParser.Css_fieldContext = Css_fieldContext; 
MParser.Css_identifierContext = Css_identifierContext; 
MParser.Css_valueContext = Css_valueContext; 
MParser.Css_textContext = Css_textContext; 
