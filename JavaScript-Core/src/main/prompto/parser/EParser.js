// Generated from EParser.g4 by ANTLR 4.9
// jshint ignore: start
import antlr4 from 'antlr4';
import EParserListener from './EParserListener.js';
import AbstractParser from './AbstractParser.js';


const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u00bb\u0b9b\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
    "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
    "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
    "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004",
    "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004",
    "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004",
    "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t",
    "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004",
    "\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t",
    "\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004",
    "\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t",
    "\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004",
    "\u0097\t\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t",
    "\u009a\u0004\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004",
    "\u009e\t\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t",
    "\u00a1\u0004\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004",
    "\u00a5\t\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t",
    "\u00a8\u0004\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004",
    "\u00ac\t\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t",
    "\u00af\u0004\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004",
    "\u00b3\t\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t",
    "\u00b6\u0004\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004",
    "\u00ba\t\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t",
    "\u00bd\u0004\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004",
    "\u00c1\t\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t",
    "\u00c4\u0004\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004",
    "\u00c8\t\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t",
    "\u00cb\u0004\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004",
    "\u00cf\t\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t",
    "\u00d2\u0004\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004",
    "\u00d6\t\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t",
    "\u00d9\u0004\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004",
    "\u00dd\t\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t",
    "\u00e0\u0004\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004",
    "\u00e4\t\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t",
    "\u00e7\u0004\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004",
    "\u00eb\t\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t",
    "\u00ee\u0004\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004",
    "\u00f2\t\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t",
    "\u00f5\u0004\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004",
    "\u00f9\t\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t",
    "\u00fc\u0004\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004",
    "\u0100\t\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t",
    "\u0103\u0004\u0104\t\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0005",
    "\u0002\u0213\n\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0002\u0005\u0002\u021a\n\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u0238\n\u0005\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0005\u0006\u023e\n\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u0243\n\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0005\u0006\u0249\n\u0006\u0005\u0006\u024b",
    "\n\u0006\u0003\u0006\u0005\u0006\u024e\n\u0006\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u0255\n\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0005\u0007\u025e\n\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0005\t\u0277\n\t\u0003\t\u0003\t\u0005\t\u027b\n\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0286",
    "\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t",
    "\u028f\n\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u029e\n\n\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u02a7\n\n\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u02ae",
    "\n\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0005\f\u02b8\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u02ce\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u02e5",
    "\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0005\u0011\u02f2\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005",
    "\u0011\u02fd\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0005\u0011\u030b\n\u0011\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0311\n\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0005\u0012\u031c\n\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u032a",
    "\n\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0007\u0014",
    "\u033c\n\u0014\f\u0014\u000e\u0014\u033f\u000b\u0014\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0005\u0015\u0349\n\u0015\u0005\u0015\u034b\n\u0015\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0005\u0016\u0354\n\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0358",
    "\n\u0016\u0003\u0016\u0005\u0016\u035b\n\u0016\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0363\n",
    "\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0367\n\u0017\u0003\u0017",
    "\u0005\u0017\u036a\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0005\u0017\u0371\n\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u0379\n",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u037e\n\u0018",
    "\u0003\u0018\u0003\u0018\u0005\u0018\u0382\n\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005",
    "\u0019\u039d\n\u0019\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0005\u001b\u03a4\n\u001b\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0005\u001c\u03a9\n\u001c\u0003\u001c\u0003\u001c\u0005\u001c",
    "\u03ad\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u03c4",
    "\n\u001d\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0005\u001f\u03cd\n\u001f\u0003\u001f\u0003",
    "\u001f\u0005\u001f\u03d1\n\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u03d9\n\u001f\u0003",
    " \u0003 \u0005 \u03dd\n \u0003 \u0005 \u03e0\n \u0003 \u0003 \u0003",
    " \u0005 \u03e5\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u03ec\n",
    " \u0003 \u0005 \u03ef\n \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#",
    "\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u0410\n#\u0003#\u0003",
    "#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0005$\u0423\n$\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0005%\u042a\n%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u044c\n(\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u0455\n(\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0007)\u046a\n)\f",
    ")\u000e)\u046d\u000b)\u0003*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u047c\n+\u0003+\u0003",
    "+\u0003+\u0005+\u0481\n+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005",
    "+\u0489\n+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u0492",
    "\n+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0005,\u04a9\n,\u0003-\u0003-\u0003.\u0003.\u0005.\u04af\n",
    ".\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0005/\u04b9",
    "\n/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0005/\u04d4\n/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0005/\u04f1\n/\u0003/\u0003/\u0003/\u0003",
    "/\u0005/\u04f7\n/\u0003/\u0003/\u0003/\u0003/\u0005/\u04fd\n/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0005/\u0517\n/\u0003/\u0003/\u0003/\u0003/\u0005",
    "/\u051d\n/\u0003/\u0003/\u0003/\u0005/\u0522\n/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0005/\u0529\n/\u0003/\u0003/\u0003/\u0003/\u0003/\u0007",
    "/\u0530\n/\f/\u000e/\u0533\u000b/\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00050\u053c\n0\u00031\u00031\u00031\u00031\u00031\u0007",
    "1\u0543\n1\f1\u000e1\u0546\u000b1\u00032\u00032\u00032\u00032\u0003",
    "3\u00033\u00033\u00033\u00034\u00034\u00035\u00035\u00035\u00035\u0003",
    "5\u00055\u0557\n5\u00036\u00036\u00036\u00036\u00036\u00076\u055e\n",
    "6\f6\u000e6\u0561\u000b6\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00057\u0570\n7\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00078\u0578\n8\f8\u000e8\u057b\u000b",
    "8\u00039\u00039\u00039\u00059\u0580\n9\u0003:\u0003:\u0003:\u0003:\u0003",
    ";\u0003;\u0003;\u0003;\u0005;\u058a\n;\u0003;\u0003;\u0003;\u0005;\u058f",
    "\n;\u0005;\u0591\n;\u0003;\u0003;\u0003;\u0003;\u0005;\u0597\n;\u0005",
    ";\u0599\n;\u0005;\u059b\n;\u0003<\u0003<\u0003<\u0003<\u0003<\u0003",
    "=\u0003=\u0003=\u0003=\u0003>\u0003>\u0003>\u0005>\u05a9\n>\u0003>\u0003",
    ">\u0003>\u0003?\u0003?\u0003?\u0005?\u05b1\n?\u0003?\u0003?\u0003?\u0003",
    "?\u0003?\u0005?\u05b8\n?\u0003?\u0003?\u0005?\u05bc\n?\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0005?\u05c7\n?\u0003",
    "?\u0003?\u0005?\u05cb\n?\u0003?\u0003?\u0003?\u0005?\u05d0\n?\u0005",
    "?\u05d2\n?\u0003@\u0003@\u0003@\u0005@\u05d7\n@\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0005@\u05e6\n@\u0003@\u0003@\u0005@\u05ea\n@\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u05f5\n@\u0003@\u0003",
    "@\u0005@\u05f9\n@\u0003@\u0003@\u0003@\u0005@\u05fe\n@\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u0608\n@\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003",
    "A\u0003B\u0003B\u0005B\u0618\nB\u0003B\u0003B\u0003B\u0003B\u0003B\u0003",
    "B\u0005B\u0620\nB\u0003C\u0003C\u0003C\u0003C\u0003C\u0005C\u0627\n",
    "C\u0005C\u0629\nC\u0003C\u0003C\u0003C\u0005C\u062e\nC\u0005C\u0630",
    "\nC\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0007D\u0639\n",
    "D\fD\u000eD\u063c\u000bD\u0003E\u0003E\u0003E\u0005E\u0641\nE\u0003",
    "E\u0003E\u0003F\u0003F\u0003F\u0003F\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0005G\u0651\nG\u0003H\u0003H\u0003H\u0003H\u0003",
    "I\u0007I\u0658\nI\fI\u000eI\u065b\u000bI\u0003J\u0006J\u065e\nJ\rJ\u000e",
    "J\u065f\u0003K\u0007K\u0663\nK\fK\u000eK\u0666\u000bK\u0003L\u0006L",
    "\u0669\nL\rL\u000eL\u066a\u0003L\u0003L\u0003M\u0007M\u0670\nM\fM\u000e",
    "M\u0673\u000bM\u0003M\u0003M\u0003N\u0003N\u0003N\u0003N\u0003O\u0003",
    "O\u0003P\u0003P\u0003P\u0005P\u0680\nP\u0003Q\u0005Q\u0683\nQ\u0003",
    "Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003R\u0007R\u068c\nR\fR\u000e",
    "R\u068f\u000bR\u0003S\u0003S\u0003S\u0007S\u0694\nS\fS\u000eS\u0697",
    "\u000bS\u0003S\u0003S\u0003S\u0007S\u069c\nS\fS\u000eS\u069f\u000bS",
    "\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0005S\u06a7\nS\u0003T\u0003",
    "T\u0003T\u0003T\u0003T\u0003T\u0007T\u06af\nT\fT\u000eT\u06b2\u000b",
    "T\u0005T\u06b4\nT\u0003T\u0003T\u0005T\u06b8\nT\u0003U\u0003U\u0003",
    "V\u0003V\u0003V\u0003V\u0003W\u0003W\u0003X\u0003X\u0005X\u06c4\nX\u0003",
    "Y\u0003Y\u0003Z\u0003Z\u0005Z\u06ca\nZ\u0003[\u0003[\u0003[\u0003[\u0007",
    "[\u06d0\n[\f[\u000e[\u06d3\u000b[\u0003\\\u0003\\\u0003\\\u0003\\\u0007",
    "\\\u06d9\n\\\f\\\u000e\\\u06dc\u000b\\\u0003]\u0003]\u0003]\u0007]\u06e1",
    "\n]\f]\u000e]\u06e4\u000b]\u0003^\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0005^\u06f0\n^\u0003_\u0005_\u06f3\n",
    "_\u0003_\u0003_\u0005_\u06f7\n_\u0003_\u0003_\u0003`\u0005`\u06fc\n",
    "`\u0003`\u0003`\u0005`\u0700\n`\u0003`\u0003`\u0003a\u0003a\u0003a\u0007",
    "a\u0707\na\fa\u000ea\u070a\u000ba\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003",
    "c\u0003c\u0003c\u0003c\u0005c\u071e\nc\u0003c\u0003c\u0003c\u0003c\u0003",
    "c\u0003c\u0003c\u0007c\u0727\nc\fc\u000ec\u072a\u000bc\u0003d\u0003",
    "d\u0005d\u072e\nd\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0005",
    "e\u0741\ne\u0003f\u0003f\u0003g\u0005g\u0746\ng\u0003g\u0003g\u0003",
    "h\u0003h\u0003i\u0003i\u0003i\u0005i\u074f\ni\u0003j\u0003j\u0005j\u0753",
    "\nj\u0003k\u0003k\u0003k\u0007k\u0758\nk\fk\u000ek\u075b\u000bk\u0003",
    "l\u0003l\u0005l\u075f\nl\u0003m\u0003m\u0005m\u0763\nm\u0003n\u0003",
    "n\u0003n\u0003n\u0003o\u0003o\u0003o\u0003p\u0003p\u0003p\u0005p\u076f",
    "\np\u0003q\u0003q\u0003r\u0003r\u0003s\u0003s\u0003t\u0003t\u0003u\u0003",
    "u\u0003v\u0003v\u0003v\u0007v\u077e\nv\fv\u000ev\u0781\u000bv\u0003",
    "w\u0003w\u0005w\u0785\nw\u0003w\u0005w\u0788\nw\u0003x\u0003x\u0005",
    "x\u078c\nx\u0003y\u0003y\u0003y\u0005y\u0791\ny\u0003z\u0003z\u0003",
    "z\u0003{\u0003{\u0005{\u0798\n{\u0003|\u0003|\u0003|\u0003|\u0003|\u0003",
    "|\u0003|\u0003|\u0003|\u0007|\u07a3\n|\f|\u000e|\u07a6\u000b|\u0003",
    "}\u0003}\u0003}\u0003}\u0007}\u07ac\n}\f}\u000e}\u07af\u000b}\u0003",
    "~\u0003~\u0003~\u0007~\u07b4\n~\f~\u000e~\u07b7\u000b~\u0003~\u0003",
    "~\u0003~\u0007~\u07bc\n~\f~\u000e~\u07bf\u000b~\u0003~\u0003~\u0003",
    "~\u0003~\u0003~\u0005~\u07c6\n~\u0003\u007f\u0003\u007f\u0003\u007f",
    "\u0003\u007f\u0007\u007f\u07cc\n\u007f\f\u007f\u000e\u007f\u07cf\u000b",
    "\u007f\u0003\u0080\u0003\u0080\u0003\u0080\u0007\u0080\u07d4\n\u0080",
    "\f\u0080\u000e\u0080\u07d7\u000b\u0080\u0003\u0080\u0003\u0080\u0003",
    "\u0080\u0007\u0080\u07dc\n\u0080\f\u0080\u000e\u0080\u07df\u000b\u0080",
    "\u0003\u0080\u0003\u0080\u0003\u0080\u0005\u0080\u07e4\n\u0080\u0003",
    "\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003",
    "\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u07f0\n\u0081",
    "\u0003\u0082\u0003\u0082\u0005\u0082\u07f4\n\u0082\u0003\u0083\u0003",
    "\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0007\u0083\u07fc",
    "\n\u0083\f\u0083\u000e\u0083\u07ff\u000b\u0083\u0003\u0084\u0003\u0084",
    "\u0003\u0084\u0007\u0084\u0804\n\u0084\f\u0084\u000e\u0084\u0807\u000b",
    "\u0084\u0003\u0084\u0005\u0084\u080a\n\u0084\u0003\u0085\u0003\u0085",
    "\u0003\u0085\u0003\u0085\u0005\u0085\u0810\n\u0085\u0003\u0085\u0003",
    "\u0085\u0003\u0085\u0007\u0085\u0815\n\u0085\f\u0085\u000e\u0085\u0818",
    "\u000b\u0085\u0003\u0085\u0003\u0085\u0005\u0085\u081c\n\u0085\u0003",
    "\u0086\u0003\u0086\u0003\u0086\u0007\u0086\u0821\n\u0086\f\u0086\u000e",
    "\u0086\u0824\u000b\u0086\u0003\u0087\u0003\u0087\u0003\u0087\u0007\u0087",
    "\u0829\n\u0087\f\u0087\u000e\u0087\u082c\u000b\u0087\u0003\u0088\u0003",
    "\u0088\u0003\u0088\u0003\u0088\u0005\u0088\u0832\n\u0088\u0003\u0089",
    "\u0003\u0089\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0007\u008a",
    "\u083a\n\u008a\f\u008a\u000e\u008a\u083d\u000b\u008a\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0003\u008b\u0005\u008b\u0849\n\u008b\u0003\u008c",
    "\u0003\u008c\u0005\u008c\u084d\n\u008c\u0003\u008c\u0005\u008c\u0850",
    "\n\u008c\u0003\u008d\u0003\u008d\u0005\u008d\u0854\n\u008d\u0003\u008d",
    "\u0005\u008d\u0857\n\u008d\u0003\u008e\u0003\u008e\u0003\u008e\u0003",
    "\u008e\u0007\u008e\u085d\n\u008e\f\u008e\u000e\u008e\u0860\u000b\u008e",
    "\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0007\u008f\u0866\n",
    "\u008f\f\u008f\u000e\u008f\u0869\u000b\u008f\u0003\u0090\u0003\u0090",
    "\u0003\u0090\u0003\u0090\u0007\u0090\u086f\n\u0090\f\u0090\u000e\u0090",
    "\u0872\u000b\u0090\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0007",
    "\u0091\u0878\n\u0091\f\u0091\u000e\u0091\u087b\u000b\u0091\u0003\u0092",
    "\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092",
    "\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092",
    "\u0003\u0092\u0005\u0092\u088b\n\u0092\u0003\u0093\u0003\u0093\u0003",
    "\u0093\u0005\u0093\u0890\n\u0093\u0003\u0093\u0003\u0093\u0003\u0093",
    "\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0005\u0093\u0899\n",
    "\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003",
    "\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0005\u0093\u08a4\n\u0093",
    "\u0003\u0094\u0003\u0094\u0003\u0094\u0007\u0094\u08a9\n\u0094\f\u0094",
    "\u000e\u0094\u08ac\u000b\u0094\u0003\u0095\u0003\u0095\u0003\u0096\u0003",
    "\u0096\u0003\u0096\u0005\u0096\u08b3\n\u0096\u0003\u0096\u0003\u0096",
    "\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0098\u0003\u0098",
    "\u0005\u0098\u08bd\n\u0098\u0003\u0099\u0003\u0099\u0003\u0099\u0003",
    "\u0099\u0003\u0099\u0003\u0099\u0005\u0099\u08c5\n\u0099\u0003\u009a",
    "\u0005\u009a\u08c8\n\u009a\u0003\u009a\u0003\u009a\u0005\u009a\u08cc",
    "\n\u009a\u0003\u009a\u0003\u009a\u0003\u009b\u0005\u009b\u08d1\n\u009b",
    "\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b",
    "\u0003\u009b\u0003\u009b\u0005\u009b\u08db\n\u009b\u0003\u009c\u0003",
    "\u009c\u0005\u009c\u08df\n\u009c\u0003\u009c\u0003\u009c\u0003\u009d",
    "\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0007\u009d\u08e8\n",
    "\u009d\f\u009d\u000e\u009d\u08eb\u000b\u009d\u0005\u009d\u08ed\n\u009d",
    "\u0003\u009e\u0003\u009e\u0003\u009e\u0007\u009e\u08f2\n\u009e\f\u009e",
    "\u000e\u009e\u08f5\u000b\u009e\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u00a0\u0003\u00a0\u0005\u00a0\u08fd\n\u00a0\u0003\u00a1",
    "\u0003\u00a1\u0003\u00a1\u0007\u00a1\u0902\n\u00a1\f\u00a1\u000e\u00a1",
    "\u0905\u000b\u00a1\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003",
    "\u00a3\u0003\u00a3\u0005\u00a3\u090d\n\u00a3\u0003\u00a4\u0003\u00a4",
    "\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4",
    "\u0003\u00a4\u0005\u00a4\u0918\n\u00a4\u0003\u00a5\u0003\u00a5\u0003",
    "\u00a5\u0003\u00a5\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003",
    "\u00a6\u0007\u00a6\u0923\n\u00a6\f\u00a6\u000e\u00a6\u0926\u000b\u00a6",
    "\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0005\u00a7\u092c\n",
    "\u00a7\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003",
    "\u00a8\u0003\u00a8\u0003\u00a8\u0005\u00a8\u0936\n\u00a8\u0003\u00a9",
    "\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00aa\u0003\u00aa",
    "\u0003\u00aa\u0005\u00aa\u0940\n\u00aa\u0003\u00aa\u0005\u00aa\u0943",
    "\n\u00aa\u0003\u00ab\u0003\u00ab\u0005\u00ab\u0947\n\u00ab\u0003\u00ac",
    "\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ad\u0003\u00ad",
    "\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00ae",
    "\u0003\u00ae\u0003\u00ae\u0003\u00af\u0003\u00af\u0003\u00af\u0007\u00af",
    "\u095b\n\u00af\f\u00af\u000e\u00af\u095e\u000b\u00af\u0003\u00b0\u0003",
    "\u00b0\u0003\u00b0\u0007\u00b0\u0963\n\u00b0\f\u00b0\u000e\u00b0\u0966",
    "\u000b\u00b0\u0003\u00b0\u0005\u00b0\u0969\n\u00b0\u0003\u00b1\u0003",
    "\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0005\u00b1\u0971",
    "\n\u00b1\u0003\u00b2\u0003\u00b2\u0003\u00b3\u0003\u00b3\u0003\u00b3",
    "\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b5\u0003\u00b5\u0003\u00b5",
    "\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b7\u0003\u00b7\u0003\u00b7",
    "\u0003\u00b8\u0003\u00b8\u0003\u00b9\u0003\u00b9\u0003\u00ba\u0003\u00ba",
    "\u0003\u00bb\u0003\u00bb\u0003\u00bc\u0003\u00bc\u0003\u00bd\u0003\u00bd",
    "\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd",
    "\u0995\n\u00bd\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003",
    "\u00be\u0007\u00be\u099c\n\u00be\f\u00be\u000e\u00be\u099f\u000b\u00be",
    "\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf",
    "\u0003\u00bf\u0005\u00bf\u09a8\n\u00bf\u0003\u00c0\u0003\u00c0\u0003",
    "\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0005\u00c2\u09b4\n\u00c2\u0003\u00c3\u0003\u00c3",
    "\u0003\u00c3\u0005\u00c3\u09b9\n\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0007",
    "\u00c4\u09c3\n\u00c4\f\u00c4\u000e\u00c4\u09c6\u000b\u00c4\u0003\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c6\u0003\u00c6\u0003\u00c6",
    "\u0003\u00c6\u0003\u00c7\u0003\u00c7\u0003\u00c8\u0003\u00c8\u0003\u00c8",
    "\u0003\u00c8\u0003\u00c8\u0005\u00c8\u09d7\n\u00c8\u0003\u00c9\u0003",
    "\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9\u09de\n\u00c9",
    "\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0005\u00ca\u09e3\n\u00ca\u0003",
    "\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0007\u00cb\u09ea",
    "\n\u00cb\f\u00cb\u000e\u00cb\u09ed\u000b\u00cb\u0003\u00cc\u0003\u00cc",
    "\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc\u09f4\n\u00cc\u0003",
    "\u00cd\u0003\u00cd\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003",
    "\u00ce\u0003\u00ce\u0005\u00ce\u09fe\n\u00ce\u0003\u00cf\u0003\u00cf",
    "\u0003\u00cf\u0005\u00cf\u0a03\n\u00cf\u0003\u00cf\u0003\u00cf\u0003",
    "\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0005",
    "\u00d0\u0a0d\n\u00d0\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1",
    "\u0003\u00d1\u0003\u00d1\u0007\u00d1\u0a15\n\u00d1\f\u00d1\u000e\u00d1",
    "\u0a18\u000b\u00d1\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003",
    "\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003",
    "\u00d2\u0007\u00d2\u0a25\n\u00d2\f\u00d2\u000e\u00d2\u0a28\u000b\u00d2",
    "\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0005\u00d4\u0a31\n\u00d4\u0003\u00d4\u0003\u00d4\u0003",
    "\u00d4\u0007\u00d4\u0a36\n\u00d4\f\u00d4\u000e\u00d4\u0a39\u000b\u00d4",
    "\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0005\u00d5",
    "\u0a40\n\u00d5\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003",
    "\u00d6\u0005\u00d6\u0a47\n\u00d6\u0003\u00d7\u0003\u00d7\u0003\u00d7",
    "\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0005\u00d7\u0a50\n",
    "\u00d7\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0007",
    "\u00d8\u0a57\n\u00d8\f\u00d8\u000e\u00d8\u0a5a\u000b\u00d8\u0003\u00d9",
    "\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0005\u00d9\u0a61\n",
    "\u00d9\u0003\u00da\u0003\u00da\u0003\u00db\u0003\u00db\u0003\u00db\u0003",
    "\u00dc\u0003\u00dc\u0003\u00dc\u0005\u00dc\u0a6b\n\u00dc\u0003\u00dd",
    "\u0003\u00dd\u0003\u00dd\u0005\u00dd\u0a70\n\u00dd\u0003\u00dd\u0003",
    "\u00dd\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0007\u00de\u0a7a\n\u00de\f\u00de\u000e\u00de\u0a7d\u000b\u00de",
    "\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00e0\u0003\u00e0",
    "\u0003\u00e0\u0003\u00e0\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1",
    "\u0003\u00e1\u0003\u00e1\u0007\u00e1\u0a8d\n\u00e1\f\u00e1\u000e\u00e1",
    "\u0a90\u000b\u00e1\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003",
    "\u00e2\u0007\u00e2\u0a97\n\u00e2\f\u00e2\u000e\u00e2\u0a9a\u000b\u00e2",
    "\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0005\u00e3",
    "\u0aa1\n\u00e3\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003",
    "\u00e4\u0005\u00e4\u0aa8\n\u00e4\u0003\u00e5\u0003\u00e5\u0003\u00e5",
    "\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0005\u00e5\u0ab1\n",
    "\u00e5\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0007",
    "\u00e6\u0ab8\n\u00e6\f\u00e6\u000e\u00e6\u0abb\u000b\u00e6\u0003\u00e7",
    "\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0005\u00e7\u0ac2\n",
    "\u00e7\u0003\u00e8\u0003\u00e8\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0003",
    "\u00ea\u0003\u00ea\u0003\u00ea\u0005\u00ea\u0acc\n\u00ea\u0003\u00eb",
    "\u0003\u00eb\u0003\u00eb\u0005\u00eb\u0ad1\n\u00eb\u0003\u00eb\u0003",
    "\u00eb\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003",
    "\u00ec\u0007\u00ec\u0adb\n\u00ec\f\u00ec\u000e\u00ec\u0ade\u000b\u00ec",
    "\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ee\u0003\u00ee",
    "\u0003\u00ee\u0003\u00ee\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0005\u00ef",
    "\u0aeb\n\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0007\u00ef\u0af0",
    "\n\u00ef\f\u00ef\u000e\u00ef\u0af3\u000b\u00ef\u0003\u00f0\u0003\u00f0",
    "\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0005\u00f0\u0afa\n\u00f0\u0003",
    "\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0005\u00f1\u0b01",
    "\n\u00f1\u0003\u00f2\u0003\u00f2\u0005\u00f2\u0b05\n\u00f2\u0003\u00f3",
    "\u0003\u00f3\u0003\u00f3\u0005\u00f3\u0b0a\n\u00f3\u0003\u00f3\u0003",
    "\u00f3\u0005\u00f3\u0b0e\n\u00f3\u0003\u00f4\u0003\u00f4\u0003\u00f4",
    "\u0005\u00f4\u0b13\n\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003",
    "\u00f5\u0003\u00f5\u0003\u00f5\u0005\u00f5\u0b1b\n\u00f5\u0003\u00f6",
    "\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f7\u0003\u00f7\u0003\u00f7",
    "\u0003\u00f7\u0007\u00f7\u0b25\n\u00f7\f\u00f7\u000e\u00f7\u0b28\u000b",
    "\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f8\u0003\u00f8\u0003",
    "\u00f8\u0003\u00f8\u0007\u00f8\u0b31\n\u00f8\f\u00f8\u000e\u00f8\u0b34",
    "\u000b\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f9\u0003\u00f9\u0003\u00f9",
    "\u0003\u00f9\u0003\u00f9\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0007\u00fa",
    "\u0b40\n\u00fa\f\u00fa\u000e\u00fa\u0b43\u000b\u00fa\u0003\u00fb\u0003",
    "\u00fb\u0007\u00fb\u0b47\n\u00fb\f\u00fb\u000e\u00fb\u0b4a\u000b\u00fb",
    "\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0005\u00fc\u0b4f\n\u00fc\u0003",
    "\u00fc\u0003\u00fc\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0003",
    "\u00fd\u0005\u00fd\u0b58\n\u00fd\u0003\u00fe\u0006\u00fe\u0b5b\n\u00fe",
    "\r\u00fe\u000e\u00fe\u0b5c\u0003\u00ff\u0003\u00ff\u0003\u00ff\u0003",
    "\u00ff\u0005\u00ff\u0b63\n\u00ff\u0003\u00ff\u0005\u00ff\u0b66\n\u00ff",
    "\u0003\u0100\u0006\u0100\u0b69\n\u0100\r\u0100\u000e\u0100\u0b6a\u0003",
    "\u0101\u0003\u0101\u0005\u0101\u0b6f\n\u0101\u0003\u0102\u0003\u0102",
    "\u0006\u0102\u0b73\n\u0102\r\u0102\u000e\u0102\u0b74\u0003\u0102\u0003",
    "\u0102\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003",
    "\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0005\u0104\u0b82\n\u0104",
    "\u0003\u0104\u0003\u0104\u0006\u0104\u0b86\n\u0104\r\u0104\u000e\u0104",
    "\u0b87\u0007\u0104\u0b8a\n\u0104\f\u0104\u000e\u0104\u0b8d\u000b\u0104",
    "\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0005\u0105",
    "\u0b94\n\u0105\u0003\u0106\u0006\u0106\u0b97\n\u0106\r\u0106\u000e\u0106",
    "\u0b98\u0003\u0106\u0003\u0b98\u001a&P\\`jn\u0086\u00c4\u00f6\u014a",
    "\u017a\u0186\u0194\u01a0\u01a2\u01a6\u01ae\u01ba\u01c0\u01c2\u01ca\u01d6",
    "\u01dc\u0206\u0107\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016",
    "\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnp",
    "rtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092",
    "\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa",
    "\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2",
    "\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da",
    "\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2",
    "\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a",
    "\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122",
    "\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a",
    "\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152",
    "\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a",
    "\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182",
    "\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a",
    "\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2",
    "\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca",
    "\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2",
    "\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa",
    "\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u0002\u000f\u0003\u0002",
    "\"#\u0003\u0002),\u0005\u0002--//33\u0004\u0002\u0003\u0003\u0007\t",
    "\u0005\u0002ss\u0093\u0093\u00ad\u00ad\u0004\u0002[[\u00ad\u00ad\u0004",
    "\u0002\u0096\u0096\u00ad\u00ad\u0004\u0002\u0092\u0092\u009c\u009c\u0004",
    "\u0002RRbb\t\u0002\u000b\u0010779ACJLwy\u009a\u009c\u00a6\u0004\u0002",
    "\'\'}}\u0005\u0002\u001a\u001b))++\u0003\u0002\u0012\u0012\u0002\u0c56",
    "\u0002\u020c\u0003\u0002\u0002\u0002\u0004\u0221\u0003\u0002\u0002\u0002",
    "\u0006\u022d\u0003\u0002\u0002\u0002\b\u0233\u0003\u0002\u0002\u0002",
    "\n\u0239\u0003\u0002\u0002\u0002\f\u024f\u0003\u0002\u0002\u0002\u000e",
    "\u025f\u0003\u0002\u0002\u0002\u0010\u0272\u0003\u0002\u0002\u0002\u0012",
    "\u0290\u0003\u0002\u0002\u0002\u0014\u02ad\u0003\u0002\u0002\u0002\u0016",
    "\u02af\u0003\u0002\u0002\u0002\u0018\u02bf\u0003\u0002\u0002\u0002\u001a",
    "\u02c9\u0003\u0002\u0002\u0002\u001c\u02d6\u0003\u0002\u0002\u0002\u001e",
    "\u02e0\u0003\u0002\u0002\u0002 \u02ed\u0003\u0002\u0002\u0002\"\u030c",
    "\u0003\u0002\u0002\u0002$\u032b\u0003\u0002\u0002\u0002&\u0334\u0003",
    "\u0002\u0002\u0002(\u034a\u0003\u0002\u0002\u0002*\u034c\u0003\u0002",
    "\u0002\u0002,\u035c\u0003\u0002\u0002\u0002.\u0374\u0003\u0002\u0002",
    "\u00020\u0389\u0003\u0002\u0002\u00022\u039e\u0003\u0002\u0002\u0002",
    "4\u03a0\u0003\u0002\u0002\u00026\u03a5\u0003\u0002\u0002\u00028\u03c3",
    "\u0003\u0002\u0002\u0002:\u03c5\u0003\u0002\u0002\u0002<\u03d0\u0003",
    "\u0002\u0002\u0002>\u03ee\u0003\u0002\u0002\u0002@\u03f0\u0003\u0002",
    "\u0002\u0002B\u03f9\u0003\u0002\u0002\u0002D\u0402\u0003\u0002\u0002",
    "\u0002F\u0422\u0003\u0002\u0002\u0002H\u0424\u0003\u0002\u0002\u0002",
    "J\u0432\u0003\u0002\u0002\u0002L\u043b\u0003\u0002\u0002\u0002N\u0442",
    "\u0003\u0002\u0002\u0002P\u0456\u0003\u0002\u0002\u0002R\u046e\u0003",
    "\u0002\u0002\u0002T\u0471\u0003\u0002\u0002\u0002V\u04a8\u0003\u0002",
    "\u0002\u0002X\u04aa\u0003\u0002\u0002\u0002Z\u04ac\u0003\u0002\u0002",
    "\u0002\\\u04d3\u0003\u0002\u0002\u0002^\u053b\u0003\u0002\u0002\u0002",
    "`\u053d\u0003\u0002\u0002\u0002b\u0547\u0003\u0002\u0002\u0002d\u054b",
    "\u0003\u0002\u0002\u0002f\u054f\u0003\u0002\u0002\u0002h\u0556\u0003",
    "\u0002\u0002\u0002j\u0558\u0003\u0002\u0002\u0002l\u056f\u0003\u0002",
    "\u0002\u0002n\u0571\u0003\u0002\u0002\u0002p\u057c\u0003\u0002\u0002",
    "\u0002r\u0581\u0003\u0002\u0002\u0002t\u059a\u0003\u0002\u0002\u0002",
    "v\u059c\u0003\u0002\u0002\u0002x\u05a1\u0003\u0002\u0002\u0002z\u05a5",
    "\u0003\u0002\u0002\u0002|\u05d1\u0003\u0002\u0002\u0002~\u0607\u0003",
    "\u0002\u0002\u0002\u0080\u0609\u0003\u0002\u0002\u0002\u0082\u0615\u0003",
    "\u0002\u0002\u0002\u0084\u062f\u0003\u0002\u0002\u0002\u0086\u0631\u0003",
    "\u0002\u0002\u0002\u0088\u0640\u0003\u0002\u0002\u0002\u008a\u0644\u0003",
    "\u0002\u0002\u0002\u008c\u0650\u0003\u0002\u0002\u0002\u008e\u0652\u0003",
    "\u0002\u0002\u0002\u0090\u0659\u0003\u0002\u0002\u0002\u0092\u065d\u0003",
    "\u0002\u0002\u0002\u0094\u0664\u0003\u0002\u0002\u0002\u0096\u0668\u0003",
    "\u0002\u0002\u0002\u0098\u0671\u0003\u0002\u0002\u0002\u009a\u0676\u0003",
    "\u0002\u0002\u0002\u009c\u067a\u0003\u0002\u0002\u0002\u009e\u067f\u0003",
    "\u0002\u0002\u0002\u00a0\u0682\u0003\u0002\u0002\u0002\u00a2\u0687\u0003",
    "\u0002\u0002\u0002\u00a4\u0695\u0003\u0002\u0002\u0002\u00a6\u06a8\u0003",
    "\u0002\u0002\u0002\u00a8\u06b9\u0003\u0002\u0002\u0002\u00aa\u06bb\u0003",
    "\u0002\u0002\u0002\u00ac\u06bf\u0003\u0002\u0002\u0002\u00ae\u06c3\u0003",
    "\u0002\u0002\u0002\u00b0\u06c5\u0003\u0002\u0002\u0002\u00b2\u06c9\u0003",
    "\u0002\u0002\u0002\u00b4\u06cb\u0003\u0002\u0002\u0002\u00b6\u06d4\u0003",
    "\u0002\u0002\u0002\u00b8\u06dd\u0003\u0002\u0002\u0002\u00ba\u06ef\u0003",
    "\u0002\u0002\u0002\u00bc\u06f2\u0003\u0002\u0002\u0002\u00be\u06fb\u0003",
    "\u0002\u0002\u0002\u00c0\u0703\u0003\u0002\u0002\u0002\u00c2\u070b\u0003",
    "\u0002\u0002\u0002\u00c4\u071d\u0003\u0002\u0002\u0002\u00c6\u072d\u0003",
    "\u0002\u0002\u0002\u00c8\u0740\u0003\u0002\u0002\u0002\u00ca\u0742\u0003",
    "\u0002\u0002\u0002\u00cc\u0745\u0003\u0002\u0002\u0002\u00ce\u0749\u0003",
    "\u0002\u0002\u0002\u00d0\u074e\u0003\u0002\u0002\u0002\u00d2\u0752\u0003",
    "\u0002\u0002\u0002\u00d4\u0754\u0003\u0002\u0002\u0002\u00d6\u075e\u0003",
    "\u0002\u0002\u0002\u00d8\u0762\u0003\u0002\u0002\u0002\u00da\u0764\u0003",
    "\u0002\u0002\u0002\u00dc\u0768\u0003\u0002\u0002\u0002\u00de\u076e\u0003",
    "\u0002\u0002\u0002\u00e0\u0770\u0003\u0002\u0002\u0002\u00e2\u0772\u0003",
    "\u0002\u0002\u0002\u00e4\u0774\u0003\u0002\u0002\u0002\u00e6\u0776\u0003",
    "\u0002\u0002\u0002\u00e8\u0778\u0003\u0002\u0002\u0002\u00ea\u077a\u0003",
    "\u0002\u0002\u0002\u00ec\u0787\u0003\u0002\u0002\u0002\u00ee\u078b\u0003",
    "\u0002\u0002\u0002\u00f0\u078d\u0003\u0002\u0002\u0002\u00f2\u0792\u0003",
    "\u0002\u0002\u0002\u00f4\u0797\u0003\u0002\u0002\u0002\u00f6\u0799\u0003",
    "\u0002\u0002\u0002\u00f8\u07a7\u0003\u0002\u0002\u0002\u00fa\u07b5\u0003",
    "\u0002\u0002\u0002\u00fc\u07c7\u0003\u0002\u0002\u0002\u00fe\u07d5\u0003",
    "\u0002\u0002\u0002\u0100\u07ef\u0003\u0002\u0002\u0002\u0102\u07f1\u0003",
    "\u0002\u0002\u0002\u0104\u07f5\u0003\u0002\u0002\u0002\u0106\u0800\u0003",
    "\u0002\u0002\u0002\u0108\u080b\u0003\u0002\u0002\u0002\u010a\u081d\u0003",
    "\u0002\u0002\u0002\u010c\u0825\u0003\u0002\u0002\u0002\u010e\u0831\u0003",
    "\u0002\u0002\u0002\u0110\u0833\u0003\u0002\u0002\u0002\u0112\u0835\u0003",
    "\u0002\u0002\u0002\u0114\u0848\u0003\u0002\u0002\u0002\u0116\u084a\u0003",
    "\u0002\u0002\u0002\u0118\u0851\u0003\u0002\u0002\u0002\u011a\u0858\u0003",
    "\u0002\u0002\u0002\u011c\u0861\u0003\u0002\u0002\u0002\u011e\u086a\u0003",
    "\u0002\u0002\u0002\u0120\u0873\u0003\u0002\u0002\u0002\u0122\u088a\u0003",
    "\u0002\u0002\u0002\u0124\u08a3\u0003\u0002\u0002\u0002\u0126\u08a5\u0003",
    "\u0002\u0002\u0002\u0128\u08ad\u0003\u0002\u0002\u0002\u012a\u08b2\u0003",
    "\u0002\u0002\u0002\u012c\u08b6\u0003\u0002\u0002\u0002\u012e\u08bc\u0003",
    "\u0002\u0002\u0002\u0130\u08c4\u0003\u0002\u0002\u0002\u0132\u08c7\u0003",
    "\u0002\u0002\u0002\u0134\u08d0\u0003\u0002\u0002\u0002\u0136\u08dc\u0003",
    "\u0002\u0002\u0002\u0138\u08e2\u0003\u0002\u0002\u0002\u013a\u08ee\u0003",
    "\u0002\u0002\u0002\u013c\u08f6\u0003\u0002\u0002\u0002\u013e\u08fc\u0003",
    "\u0002\u0002\u0002\u0140\u08fe\u0003\u0002\u0002\u0002\u0142\u0906\u0003",
    "\u0002\u0002\u0002\u0144\u090c\u0003\u0002\u0002\u0002\u0146\u0917\u0003",
    "\u0002\u0002\u0002\u0148\u0919\u0003\u0002\u0002\u0002\u014a\u091d\u0003",
    "\u0002\u0002\u0002\u014c\u092b\u0003\u0002\u0002\u0002\u014e\u0935\u0003",
    "\u0002\u0002\u0002\u0150\u0937\u0003\u0002\u0002\u0002\u0152\u0942\u0003",
    "\u0002\u0002\u0002\u0154\u0946\u0003\u0002\u0002\u0002\u0156\u0948\u0003",
    "\u0002\u0002\u0002\u0158\u094d\u0003\u0002\u0002\u0002\u015a\u0952\u0003",
    "\u0002\u0002\u0002\u015c\u0957\u0003\u0002\u0002\u0002\u015e\u095f\u0003",
    "\u0002\u0002\u0002\u0160\u0970\u0003\u0002\u0002\u0002\u0162\u0972\u0003",
    "\u0002\u0002\u0002\u0164\u0974\u0003\u0002\u0002\u0002\u0166\u0977\u0003",
    "\u0002\u0002\u0002\u0168\u097a\u0003\u0002\u0002\u0002\u016a\u097d\u0003",
    "\u0002\u0002\u0002\u016c\u0980\u0003\u0002\u0002\u0002\u016e\u0983\u0003",
    "\u0002\u0002\u0002\u0170\u0985\u0003\u0002\u0002\u0002\u0172\u0987\u0003",
    "\u0002\u0002\u0002\u0174\u0989\u0003\u0002\u0002\u0002\u0176\u098b\u0003",
    "\u0002\u0002\u0002\u0178\u0994\u0003\u0002\u0002\u0002\u017a\u0996\u0003",
    "\u0002\u0002\u0002\u017c\u09a7\u0003\u0002\u0002\u0002\u017e\u09a9\u0003",
    "\u0002\u0002\u0002\u0180\u09ab\u0003\u0002\u0002\u0002\u0182\u09b3\u0003",
    "\u0002\u0002\u0002\u0184\u09b5\u0003\u0002\u0002\u0002\u0186\u09bc\u0003",
    "\u0002\u0002\u0002\u0188\u09c7\u0003\u0002\u0002\u0002\u018a\u09cb\u0003",
    "\u0002\u0002\u0002\u018c\u09cf\u0003\u0002\u0002\u0002\u018e\u09d6\u0003",
    "\u0002\u0002\u0002\u0190\u09dd\u0003\u0002\u0002\u0002\u0192\u09e2\u0003",
    "\u0002\u0002\u0002\u0194\u09e4\u0003\u0002\u0002\u0002\u0196\u09f3\u0003",
    "\u0002\u0002\u0002\u0198\u09f5\u0003\u0002\u0002\u0002\u019a\u09fd\u0003",
    "\u0002\u0002\u0002\u019c\u09ff\u0003\u0002\u0002\u0002\u019e\u0a0c\u0003",
    "\u0002\u0002\u0002\u01a0\u0a0e\u0003\u0002\u0002\u0002\u01a2\u0a19\u0003",
    "\u0002\u0002\u0002\u01a4\u0a29\u0003\u0002\u0002\u0002\u01a6\u0a30\u0003",
    "\u0002\u0002\u0002\u01a8\u0a3f\u0003\u0002\u0002\u0002\u01aa\u0a46\u0003",
    "\u0002\u0002\u0002\u01ac\u0a4f\u0003\u0002\u0002\u0002\u01ae\u0a51\u0003",
    "\u0002\u0002\u0002\u01b0\u0a60\u0003\u0002\u0002\u0002\u01b2\u0a62\u0003",
    "\u0002\u0002\u0002\u01b4\u0a64\u0003\u0002\u0002\u0002\u01b6\u0a6a\u0003",
    "\u0002\u0002\u0002\u01b8\u0a6c\u0003\u0002\u0002\u0002\u01ba\u0a73\u0003",
    "\u0002\u0002\u0002\u01bc\u0a7e\u0003\u0002\u0002\u0002\u01be\u0a82\u0003",
    "\u0002\u0002\u0002\u01c0\u0a86\u0003\u0002\u0002\u0002\u01c2\u0a91\u0003",
    "\u0002\u0002\u0002\u01c4\u0aa0\u0003\u0002\u0002\u0002\u01c6\u0aa7\u0003",
    "\u0002\u0002\u0002\u01c8\u0ab0\u0003\u0002\u0002\u0002\u01ca\u0ab2\u0003",
    "\u0002\u0002\u0002\u01cc\u0ac1\u0003\u0002\u0002\u0002\u01ce\u0ac3\u0003",
    "\u0002\u0002\u0002\u01d0\u0ac5\u0003\u0002\u0002\u0002\u01d2\u0acb\u0003",
    "\u0002\u0002\u0002\u01d4\u0acd\u0003\u0002\u0002\u0002\u01d6\u0ad4\u0003",
    "\u0002\u0002\u0002\u01d8\u0adf\u0003\u0002\u0002\u0002\u01da\u0ae3\u0003",
    "\u0002\u0002\u0002\u01dc\u0aea\u0003\u0002\u0002\u0002\u01de\u0af9\u0003",
    "\u0002\u0002\u0002\u01e0\u0b00\u0003\u0002\u0002\u0002\u01e2\u0b04\u0003",
    "\u0002\u0002\u0002\u01e4\u0b0d\u0003\u0002\u0002\u0002\u01e6\u0b0f\u0003",
    "\u0002\u0002\u0002\u01e8\u0b1a\u0003\u0002\u0002\u0002\u01ea\u0b1c\u0003",
    "\u0002\u0002\u0002\u01ec\u0b20\u0003\u0002\u0002\u0002\u01ee\u0b2c\u0003",
    "\u0002\u0002\u0002\u01f0\u0b37\u0003\u0002\u0002\u0002\u01f2\u0b3c\u0003",
    "\u0002\u0002\u0002\u01f4\u0b44\u0003\u0002\u0002\u0002\u01f6\u0b4b\u0003",
    "\u0002\u0002\u0002\u01f8\u0b57\u0003\u0002\u0002\u0002\u01fa\u0b5a\u0003",
    "\u0002\u0002\u0002\u01fc\u0b65\u0003\u0002\u0002\u0002\u01fe\u0b68\u0003",
    "\u0002\u0002\u0002\u0200\u0b6e\u0003\u0002\u0002\u0002\u0202\u0b70\u0003",
    "\u0002\u0002\u0002\u0204\u0b78\u0003\u0002\u0002\u0002\u0206\u0b81\u0003",
    "\u0002\u0002\u0002\u0208\u0b93\u0003\u0002\u0002\u0002\u020a\u0b96\u0003",
    "\u0002\u0002\u0002\u020c\u020d\u0007`\u0002\u0002\u020d\u020e\u0005",
    "\u00e6t\u0002\u020e\u020f\u0007Q\u0002\u0002\u020f\u0212\u0007h\u0002",
    "\u0002\u0210\u0213\u0007[\u0002\u0002\u0211\u0213\u0005\u00e6t\u0002",
    "\u0212\u0210\u0003\u0002\u0002\u0002\u0212\u0211\u0003\u0002\u0002\u0002",
    "\u0213\u0219\u0003\u0002\u0002\u0002\u0214\u0215\u0005(\u0015\u0002",
    "\u0215\u0216\u0007\u0013\u0002\u0002\u0216\u0217\u0007O\u0002\u0002",
    "\u0217\u021a\u0003\u0002\u0002\u0002\u0218\u021a\u0007\u00a2\u0002\u0002",
    "\u0219\u0214\u0003\u0002\u0002\u0002\u0219\u0218\u0003\u0002\u0002\u0002",
    "\u021a\u021b\u0003\u0002\u0002\u0002\u021b\u021c\u0005\u016c\u00b7\u0002",
    "\u021c\u021d\u0007\u0011\u0002\u0002\u021d\u021e\u0005\u0096L\u0002",
    "\u021e\u021f\u0005\u00b6\\\u0002\u021f\u0220\u0005\u0098M\u0002\u0220",
    "\u0003\u0003\u0002\u0002\u0002\u0221\u0222\u0007`\u0002\u0002\u0222",
    "\u0223\u0005\u00e6t\u0002\u0223\u0224\u0007Q\u0002\u0002\u0224\u0225",
    "\u0007h\u0002\u0002\u0225\u0226\u0005\u00c8e\u0002\u0226\u0227\u0007",
    "\u00a2\u0002\u0002\u0227\u0228\u0005\u016c\u00b7\u0002\u0228\u0229\u0007",
    "\u0011\u0002\u0002\u0229\u022a\u0005\u0096L\u0002\u022a\u022b\u0005",
    "\u00b4[\u0002\u022b\u022c\u0005\u0098M\u0002\u022c\u0005\u0003\u0002",
    "\u0002\u0002\u022d\u022e\u0005\u00e8u\u0002\u022e\u022f\u0007\u00a2",
    "\u0002\u0002\u022f\u0230\u0005\\/\u0002\u0230\u0231\u0007Q\u0002\u0002",
    "\u0231\u0232\u0005\u016a\u00b6\u0002\u0232\u0007\u0003\u0002\u0002\u0002",
    "\u0233\u0234\u0005\u00e8u\u0002\u0234\u0237\u0005\u0086D\u0002\u0235",
    "\u0236\u0007O\u0002\u0002\u0236\u0238\u0005\u0088E\u0002\u0237\u0235",
    "\u0003\u0002\u0002\u0002\u0237\u0238\u0003\u0002\u0002\u0002\u0238\t",
    "\u0003\u0002\u0002\u0002\u0239\u023a\u0007`\u0002\u0002\u023a\u023b",
    "\u0005\u00e4s\u0002\u023b\u023d\u0007Q\u0002\u0002\u023c\u023e\u0007",
    "\u0096\u0002\u0002\u023d\u023c\u0003\u0002\u0002\u0002\u023d\u023e\u0003",
    "\u0002\u0002\u0002\u023e\u023f\u0003\u0002\u0002\u0002\u023f\u0240\u0005",
    "\u00c4c\u0002\u0240\u0242\u0007T\u0002\u0002\u0241\u0243\u0005\u00ba",
    "^\u0002\u0242\u0241\u0003\u0002\u0002\u0002\u0242\u0243\u0003\u0002",
    "\u0002\u0002\u0243\u024d\u0003\u0002\u0002\u0002\u0244\u024a\u0007\u00a2",
    "\u0002\u0002\u0245\u0248\u0005\u010a\u0086\u0002\u0246\u0247\u0007O",
    "\u0002\u0002\u0247\u0249\u0005\u00e2r\u0002\u0248\u0246\u0003\u0002",
    "\u0002\u0002\u0248\u0249\u0003\u0002\u0002\u0002\u0249\u024b\u0003\u0002",
    "\u0002\u0002\u024a\u0245\u0003\u0002\u0002\u0002\u024a\u024b\u0003\u0002",
    "\u0002\u0002\u024b\u024c\u0003\u0002\u0002\u0002\u024c\u024e\u0007w",
    "\u0002\u0002\u024d\u0244\u0003\u0002\u0002\u0002\u024d\u024e\u0003\u0002",
    "\u0002\u0002\u024e\u000b\u0003\u0002\u0002\u0002\u024f\u0250\u0007`",
    "\u0002\u0002\u0250\u0251\u0005\u00e6t\u0002\u0251\u0254\u0007Q\u0002",
    "\u0002\u0252\u0255\u0007\u00a1\u0002\u0002\u0253\u0255\u0005\u00e6t",
    "\u0002\u0254\u0252\u0003\u0002\u0002\u0002\u0254\u0253\u0003\u0002\u0002",
    "\u0002\u0255\u025d\u0003\u0002\u0002\u0002\u0256\u0257\u0007\u00a2\u0002",
    "\u0002\u0257\u0258\u0007|\u0002\u0002\u0258\u0259\u0007\u0011\u0002",
    "\u0002\u0259\u025a\u0005\u0096L\u0002\u025a\u025b\u0005\u00f8}\u0002",
    "\u025b\u025c\u0005\u0098M\u0002\u025c\u025e\u0003\u0002\u0002\u0002",
    "\u025d\u0256\u0003\u0002\u0002\u0002\u025d\u025e\u0003\u0002\u0002\u0002",
    "\u025e\r\u0003\u0002\u0002\u0002\u025f\u0260\u0007`\u0002\u0002\u0260",
    "\u0261\u0005\u00e6t\u0002\u0261\u0262\u0007Q\u0002\u0002\u0262\u0263",
    "\u0007\u007f\u0002\u0002\u0263\u0264\u0007\u00a1\u0002\u0002\u0264\u0265",
    "\u0007\u00a2\u0002\u0002\u0265\u0266\u0007V\u0002\u0002\u0266\u0267",
    "\u0007\u0011\u0002\u0002\u0267\u0268\u0005\u0096L\u0002\u0268\u0269",
    "\u0005$\u0013\u0002\u0269\u026a\u0005\u0098M\u0002\u026a\u026b\u0005",
    "\u0092J\u0002\u026b\u026c\u0007O\u0002\u0002\u026c\u026d\u0007|\u0002",
    "\u0002\u026d\u026e\u0007\u0011\u0002\u0002\u026e\u026f\u0005\u0096L",
    "\u0002\u026f\u0270\u0005\u00fc\u007f\u0002\u0270\u0271\u0005\u0098M",
    "\u0002\u0271\u000f\u0003\u0002\u0002\u0002\u0272\u0273\u0007`\u0002",
    "\u0002\u0273\u0274\u0005\u00e6t\u0002\u0274\u0276\u0007Q\u0002\u0002",
    "\u0275\u0277\u0007\u0096\u0002\u0002\u0276\u0275\u0003\u0002\u0002\u0002",
    "\u0276\u0277\u0003\u0002\u0002\u0002\u0277\u027a\u0003\u0002\u0002\u0002",
    "\u0278\u027b\u0007[\u0002\u0002\u0279\u027b\u0005\u0014\u000b\u0002",
    "\u027a\u0278\u0003\u0002\u0002\u0002\u027a\u0279\u0003\u0002\u0002\u0002",
    "\u027b\u028e\u0003\u0002\u0002\u0002\u027c\u0285\u0005(\u0015\u0002",
    "\u027d\u027e\u0007\u0013\u0002\u0002\u027e\u027f\u0007O\u0002\u0002",
    "\u027f\u0280\u0007|\u0002\u0002\u0280\u0281\u0007\u0011\u0002\u0002",
    "\u0281\u0282\u0005\u0096L\u0002\u0282\u0283\u0005\u00f8}\u0002\u0283",
    "\u0284\u0005\u0098M\u0002\u0284\u0286\u0003\u0002\u0002\u0002\u0285",
    "\u027d\u0003\u0002\u0002\u0002\u0285\u0286\u0003\u0002\u0002\u0002\u0286",
    "\u028f\u0003\u0002\u0002\u0002\u0287\u0288\u0007\u00a2\u0002\u0002\u0288",
    "\u0289\u0007|\u0002\u0002\u0289\u028a\u0007\u0011\u0002\u0002\u028a",
    "\u028b\u0005\u0096L\u0002\u028b\u028c\u0005\u00f8}\u0002\u028c\u028d",
    "\u0005\u0098M\u0002\u028d\u028f\u0003\u0002\u0002\u0002\u028e\u027c",
    "\u0003\u0002\u0002\u0002\u028e\u0287\u0003\u0002\u0002\u0002\u028e\u028f",
    "\u0003\u0002\u0002\u0002\u028f\u0011\u0003\u0002\u0002\u0002\u0290\u0291",
    "\u0007`\u0002\u0002\u0291\u0292\u0005\u00e6t\u0002\u0292\u0293\u0007",
    "Q\u0002\u0002\u0293\u02a6\u0007\u0094\u0002\u0002\u0294\u029d\u0005",
    "(\u0015\u0002\u0295\u0296\u0007\u0013\u0002\u0002\u0296\u0297\u0007",
    "O\u0002\u0002\u0297\u0298\u0007|\u0002\u0002\u0298\u0299\u0007\u0011",
    "\u0002\u0002\u0299\u029a\u0005\u0096L\u0002\u029a\u029b\u0005\u00f8",
    "}\u0002\u029b\u029c\u0005\u0098M\u0002\u029c\u029e\u0003\u0002\u0002",
    "\u0002\u029d\u0295\u0003\u0002\u0002\u0002\u029d\u029e\u0003\u0002\u0002",
    "\u0002\u029e\u02a7\u0003\u0002\u0002\u0002\u029f\u02a0\u0007\u00a2\u0002",
    "\u0002\u02a0\u02a1\u0007|\u0002\u0002\u02a1\u02a2\u0007\u0011\u0002",
    "\u0002\u02a2\u02a3\u0005\u0096L\u0002\u02a3\u02a4\u0005\u00f8}\u0002",
    "\u02a4\u02a5\u0005\u0098M\u0002\u02a5\u02a7\u0003\u0002\u0002\u0002",
    "\u02a6\u0294\u0003\u0002\u0002\u0002\u02a6\u029f\u0003\u0002\u0002\u0002",
    "\u02a6\u02a7\u0003\u0002\u0002\u0002\u02a7\u0013\u0003\u0002\u0002\u0002",
    "\u02a8\u02ae\u0005\u00d4k\u0002\u02a9\u02aa\u0005\u00d4k\u0002\u02aa",
    "\u02ab\u0007O\u0002\u0002\u02ab\u02ac\u0005\u00e6t\u0002\u02ac\u02ae",
    "\u0003\u0002\u0002\u0002\u02ad\u02a8\u0003\u0002\u0002\u0002\u02ad\u02a9",
    "\u0003\u0002\u0002\u0002\u02ae\u0015\u0003\u0002\u0002\u0002\u02af\u02b0",
    "\u0007`\u0002\u0002\u02b0\u02b1\u0005\u0160\u00b1\u0002\u02b1\u02b2",
    "\u0007Q\u0002\u0002\u02b2\u02b3\u0007\u0086\u0002\u0002\u02b3\u02b4",
    "\u0007\u008d\u0002\u0002\u02b4\u02b7\u0005\u00eex\u0002\u02b5\u02b6",
    "\u0007\u0090\u0002\u0002\u02b6\u02b8\u0005\u00c4c\u0002\u02b7\u02b5",
    "\u0003\u0002\u0002\u0002\u02b7\u02b8\u0003\u0002\u0002\u0002\u02b8\u02b9",
    "\u0003\u0002\u0002\u0002\u02b9\u02ba\u0007d\u0002\u0002\u02ba\u02bb",
    "\u0007\u0011\u0002\u0002\u02bb\u02bc\u0005\u0096L\u0002\u02bc\u02bd",
    "\u0005\u011a\u008e\u0002\u02bd\u02be\u0005\u0098M\u0002\u02be\u0017",
    "\u0003\u0002\u0002\u0002\u02bf\u02c0\u0007`\u0002\u0002\u02c0\u02c1",
    "\u0005\u00e2r\u0002\u02c1\u02c2\u0007Q\u0002\u0002\u02c2\u02c3\u0007",
    "\u0093\u0002\u0002\u02c3\u02c4\u0007d\u0002\u0002\u02c4\u02c5\u0007",
    "\u0011\u0002\u0002\u02c5\u02c6\u0005\u0096L\u0002\u02c6\u02c7\u0005",
    "\u011a\u008e\u0002\u02c7\u02c8\u0005\u0098M\u0002\u02c8\u0019\u0003",
    "\u0002\u0002\u0002\u02c9\u02ca\u0007`\u0002\u0002\u02ca\u02cb\u0005",
    "\u00e2r\u0002\u02cb\u02cd\u0007Q\u0002\u0002\u02cc\u02ce\u0007\u007f",
    "\u0002\u0002\u02cd\u02cc\u0003\u0002\u0002\u0002\u02cd\u02ce\u0003\u0002",
    "\u0002\u0002\u02ce\u02cf\u0003\u0002\u0002\u0002\u02cf\u02d0\u0007\u0093",
    "\u0002\u0002\u02d0\u02d1\u0007d\u0002\u0002\u02d1\u02d2\u0007\u0011",
    "\u0002\u0002\u02d2\u02d3\u0005\u0096L\u0002\u02d3\u02d4\u0005\u0112",
    "\u008a\u0002\u02d4\u02d5\u0005\u0098M\u0002\u02d5\u001b\u0003\u0002",
    "\u0002\u0002\u02d6\u02d7\u0007`\u0002\u0002\u02d7\u02d8\u0005\u00e2",
    "r\u0002\u02d8\u02d9\u0007Q\u0002\u0002\u02d9\u02da\u0007s\u0002\u0002",
    "\u02da\u02db\u0007d\u0002\u0002\u02db\u02dc\u0007\u0011\u0002\u0002",
    "\u02dc\u02dd\u0005\u0096L\u0002\u02dd\u02de\u0005\u011a\u008e\u0002",
    "\u02de\u02df\u0005\u0098M\u0002\u02df\u001d\u0003\u0002\u0002\u0002",
    "\u02e0\u02e1\u0007`\u0002\u0002\u02e1\u02e2\u0005\u00e2r\u0002\u02e2",
    "\u02e4\u0007Q\u0002\u0002\u02e3\u02e5\u0007\u007f\u0002\u0002\u02e4",
    "\u02e3\u0003\u0002\u0002\u0002\u02e4\u02e5\u0003\u0002\u0002\u0002\u02e5",
    "\u02e6\u0003\u0002\u0002\u0002\u02e6\u02e7\u0007s\u0002\u0002\u02e7",
    "\u02e8\u0007d\u0002\u0002\u02e8\u02e9\u0007\u0011\u0002\u0002\u02e9",
    "\u02ea\u0005\u0096L\u0002\u02ea\u02eb\u0005\u0112\u008a\u0002\u02eb",
    "\u02ec\u0005\u0098M\u0002\u02ec\u001f\u0003\u0002\u0002\u0002\u02ed",
    "\u02ee\u0007`\u0002\u0002\u02ee\u02ef\u0005\u00e6t\u0002\u02ef\u02f1",
    "\u0007Q\u0002\u0002\u02f0\u02f2\u0007\u0096\u0002\u0002\u02f1\u02f0",
    "\u0003\u0002\u0002\u0002\u02f1\u02f2\u0003\u0002\u0002\u0002\u02f2\u02f3",
    "\u0003\u0002\u0002\u0002\u02f3\u02f4\u0007\u007f\u0002\u0002\u02f4\u02fc",
    "\u0007[\u0002\u0002\u02f5\u02f6\u0005(\u0015\u0002\u02f6\u02f7\u0007",
    "\u0013\u0002\u0002\u02f7\u02f8\u0007O\u0002\u0002\u02f8\u02f9\u0007",
    "V\u0002\u0002\u02f9\u02fd\u0003\u0002\u0002\u0002\u02fa\u02fb\u0007",
    "\u00a2\u0002\u0002\u02fb\u02fd\u0007V\u0002\u0002\u02fc\u02f5\u0003",
    "\u0002\u0002\u0002\u02fc\u02fa\u0003\u0002\u0002\u0002\u02fd\u02fe\u0003",
    "\u0002\u0002\u0002\u02fe\u02ff\u0007\u0011\u0002\u0002\u02ff\u0300\u0005",
    "\u0096L\u0002\u0300\u0301\u0005$\u0013\u0002\u0301\u030a\u0005\u0098",
    "M\u0002\u0302\u0303\u0005\u0092J\u0002\u0303\u0304\u0007O\u0002\u0002",
    "\u0304\u0305\u0007|\u0002\u0002\u0305\u0306\u0007\u0011\u0002\u0002",
    "\u0306\u0307\u0005\u0096L\u0002\u0307\u0308\u0005\u00fc\u007f\u0002",
    "\u0308\u0309\u0005\u0098M\u0002\u0309\u030b\u0003\u0002\u0002\u0002",
    "\u030a\u0302\u0003\u0002\u0002\u0002\u030a\u030b\u0003\u0002\u0002\u0002",
    "\u030b!\u0003\u0002\u0002\u0002\u030c\u030d\u0007`\u0002\u0002\u030d",
    "\u030e\u0005\u00e6t\u0002\u030e\u0310\u0007Q\u0002\u0002\u030f\u0311",
    "\u0007\u0096\u0002\u0002\u0310\u030f\u0003\u0002\u0002\u0002\u0310\u0311",
    "\u0003\u0002\u0002\u0002\u0311\u0312\u0003\u0002\u0002\u0002\u0312\u0313",
    "\u0007\u007f\u0002\u0002\u0313\u031b\u0007\u008e\u0002\u0002\u0314\u0315",
    "\u0005(\u0015\u0002\u0315\u0316\u0007\u0013\u0002\u0002\u0316\u0317",
    "\u0007O\u0002\u0002\u0317\u0318\u0007V\u0002\u0002\u0318\u031c\u0003",
    "\u0002\u0002\u0002\u0319\u031a\u0007\u00a2\u0002\u0002\u031a\u031c\u0007",
    "V\u0002\u0002\u031b\u0314\u0003\u0002\u0002\u0002\u031b\u0319\u0003",
    "\u0002\u0002\u0002\u031c\u031d\u0003\u0002\u0002\u0002\u031d\u031e\u0007",
    "\u0011\u0002\u0002\u031e\u031f\u0005\u0096L\u0002\u031f\u0320\u0005",
    "$\u0013\u0002\u0320\u0329\u0005\u0098M\u0002\u0321\u0322\u0005\u0092",
    "J\u0002\u0322\u0323\u0007O\u0002\u0002\u0323\u0324\u0007|\u0002\u0002",
    "\u0324\u0325\u0007\u0011\u0002\u0002\u0325\u0326\u0005\u0096L\u0002",
    "\u0326\u0327\u0005\u00fc\u007f\u0002\u0327\u0328\u0005\u0098M\u0002",
    "\u0328\u032a\u0003\u0002\u0002\u0002\u0329\u0321\u0003\u0002\u0002\u0002",
    "\u0329\u032a\u0003\u0002\u0002\u0002\u032a#\u0003\u0002\u0002\u0002",
    "\u032b\u032c\u0007`\u0002\u0002\u032c\u032d\u0007[\u0002\u0002\u032d",
    "\u032e\u0007V\u0002\u0002\u032e\u032f\u0007Q\u0002\u0002\u032f\u0330",
    "\u0007\u0011\u0002\u0002\u0330\u0331\u0005\u0096L\u0002\u0331\u0332",
    "\u0005&\u0014\u0002\u0332\u0333\u0005\u0098M\u0002\u0333%\u0003\u0002",
    "\u0002\u0002\u0334\u0335\b\u0014\u0001\u0002\u0335\u0336\u0005\u0100",
    "\u0081\u0002\u0336\u033d\u0003\u0002\u0002\u0002\u0337\u0338\f\u0003",
    "\u0002\u0002\u0338\u0339\u0005\u0092J\u0002\u0339\u033a\u0005\u0100",
    "\u0081\u0002\u033a\u033c\u0003\u0002\u0002\u0002\u033b\u0337\u0003\u0002",
    "\u0002\u0002\u033c\u033f\u0003\u0002\u0002\u0002\u033d\u033b\u0003\u0002",
    "\u0002\u0002\u033d\u033e\u0003\u0002\u0002\u0002\u033e\'\u0003\u0002",
    "\u0002\u0002\u033f\u033d\u0003\u0002\u0002\u0002\u0340\u0341\u0007\u00a2",
    "\u0002\u0002\u0341\u0342\u0007T\u0002\u0002\u0342\u034b\u0005\u00e4",
    "s\u0002\u0343\u0344\u0007\u00a2\u0002\u0002\u0344\u0345\u0007U\u0002",
    "\u0002\u0345\u0348\u0005\u010c\u0087\u0002\u0346\u0347\u0007O\u0002",
    "\u0002\u0347\u0349\u0005\u00e4s\u0002\u0348\u0346\u0003\u0002\u0002",
    "\u0002\u0348\u0349\u0003\u0002\u0002\u0002\u0349\u034b\u0003\u0002\u0002",
    "\u0002\u034a\u0340\u0003\u0002\u0002\u0002\u034a\u0343\u0003\u0002\u0002",
    "\u0002\u034b)\u0003\u0002\u0002\u0002\u034c\u034d\u0007`\u0002\u0002",
    "\u034d\u034e\u0005\u00d6l\u0002\u034e\u034f\u0007Q\u0002\u0002\u034f",
    "\u0350\u0007L\u0002\u0002\u0350\u0353\u0007{\u0002\u0002\u0351\u0352",
    "\u0007\u008d\u0002\u0002\u0352\u0354\u00054\u001b\u0002\u0353\u0351",
    "\u0003\u0002\u0002\u0002\u0353\u0354\u0003\u0002\u0002\u0002\u0354\u035a",
    "\u0003\u0002\u0002\u0002\u0355\u0357\u0007\u0090\u0002\u0002\u0356\u0358",
    "\u0007~\u0002\u0002\u0357\u0356\u0003\u0002\u0002\u0002\u0357\u0358",
    "\u0003\u0002\u0002\u0002\u0358\u0359\u0003\u0002\u0002\u0002\u0359\u035b",
    "\u0005\u00c4c\u0002\u035a\u0355\u0003\u0002\u0002\u0002\u035a\u035b",
    "\u0003\u0002\u0002\u0002\u035b+\u0003\u0002\u0002\u0002\u035c\u035d",
    "\u0007`\u0002\u0002\u035d\u035e\u0005\u00d6l\u0002\u035e\u035f\u0007",
    "Q\u0002\u0002\u035f\u0362\u0007{\u0002\u0002\u0360\u0361\u0007\u008d",
    "\u0002\u0002\u0361\u0363\u00054\u001b\u0002\u0362\u0360\u0003\u0002",
    "\u0002\u0002\u0362\u0363\u0003\u0002\u0002\u0002\u0363\u0369\u0003\u0002",
    "\u0002\u0002\u0364\u0366\u0007\u0090\u0002\u0002\u0365\u0367\u0007~",
    "\u0002\u0002\u0366\u0365\u0003\u0002\u0002\u0002\u0366\u0367\u0003\u0002",
    "\u0002\u0002\u0367\u0368\u0003\u0002\u0002\u0002\u0368\u036a\u0005\u00c4",
    "c\u0002\u0369\u0364\u0003\u0002\u0002\u0002\u0369\u036a\u0003\u0002",
    "\u0002\u0002\u036a\u036b\u0003\u0002\u0002\u0002\u036b\u036c\u0007d",
    "\u0002\u0002\u036c\u036d\u0007\u0011\u0002\u0002\u036d\u0370\u0005\u0096",
    "L\u0002\u036e\u0371\u0005\u011a\u008e\u0002\u036f\u0371\u0007\u008a",
    "\u0002\u0002\u0370\u036e\u0003\u0002\u0002\u0002\u0370\u036f\u0003\u0002",
    "\u0002\u0002\u0371\u0372\u0003\u0002\u0002\u0002\u0372\u0373\u0005\u0098",
    "M\u0002\u0373-\u0003\u0002\u0002\u0002\u0374\u0375\u0007`\u0002\u0002",
    "\u0375\u0376\u0005\u00d6l\u0002\u0376\u0378\u0007Q\u0002\u0002\u0377",
    "\u0379\u0007\u007f\u0002\u0002\u0378\u0377\u0003\u0002\u0002\u0002\u0378",
    "\u0379\u0003\u0002\u0002\u0002\u0379\u037a\u0003\u0002\u0002\u0002\u037a",
    "\u037d\u0007{\u0002\u0002\u037b\u037c\u0007\u008d\u0002\u0002\u037c",
    "\u037e\u00054\u001b\u0002\u037d\u037b\u0003\u0002\u0002\u0002\u037d",
    "\u037e\u0003\u0002\u0002\u0002\u037e\u0381\u0003\u0002\u0002\u0002\u037f",
    "\u0380\u0007\u0090\u0002\u0002\u0380\u0382\u0005\u00f4{\u0002\u0381",
    "\u037f\u0003\u0002\u0002\u0002\u0381\u0382\u0003\u0002\u0002\u0002\u0382",
    "\u0383\u0003\u0002\u0002\u0002\u0383\u0384\u0007d\u0002\u0002\u0384",
    "\u0385\u0007\u0011\u0002\u0002\u0385\u0386\u0005\u0096L\u0002\u0386",
    "\u0387\u0005\u0112\u008a\u0002\u0387\u0388\u0005\u0098M\u0002\u0388",
    "/\u0003\u0002\u0002\u0002\u0389\u038a\u0007`\u0002\u0002\u038a\u038b",
    "\u0007\u00b1\u0002\u0002\u038b\u038c\u0007Q\u0002\u0002\u038c\u038d",
    "\u0007\u009a\u0002\u0002\u038d\u038e\u0007{\u0002\u0002\u038e\u038f",
    "\u0007d\u0002\u0002\u038f\u0390\u0007\u0011\u0002\u0002\u0390\u0391",
    "\u0005\u0096L\u0002\u0391\u0392\u0005\u011a\u008e\u0002\u0392\u0393",
    "\u0005\u0098M\u0002\u0393\u0394\u0005\u0092J\u0002\u0394\u0395\u0007",
    "O\u0002\u0002\u0395\u039c\u0007\u00a0\u0002\u0002\u0396\u0397\u0007",
    "\u0011\u0002\u0002\u0397\u0398\u0005\u0096L\u0002\u0398\u0399\u0005",
    "\u011c\u008f\u0002\u0399\u039a\u0005\u0098M\u0002\u039a\u039d\u0003",
    "\u0002\u0002\u0002\u039b\u039d\u0005\u00e8u\u0002\u039c\u0396\u0003",
    "\u0002\u0002\u0002\u039c\u039b\u0003\u0002\u0002\u0002\u039d1\u0003",
    "\u0002\u0002\u0002\u039e\u039f\u0005\\/\u0002\u039f3\u0003\u0002\u0002",
    "\u0002\u03a0\u03a3\u0005\u00eav\u0002\u03a1\u03a2\u0007O\u0002\u0002",
    "\u03a2\u03a4\u0005\u00ecw\u0002\u03a3\u03a1\u0003\u0002\u0002\u0002",
    "\u03a3\u03a4\u0003\u0002\u0002\u0002\u03a45\u0003\u0002\u0002\u0002",
    "\u03a5\u03a6\u0005\u00f4{\u0002\u03a6\u03a8\u0005\u00e2r\u0002\u03a7",
    "\u03a9\u0005(\u0015\u0002\u03a8\u03a7\u0003\u0002\u0002\u0002\u03a8",
    "\u03a9\u0003\u0002\u0002\u0002\u03a9\u03ac\u0003\u0002\u0002\u0002\u03aa",
    "\u03ab\u0007/\u0002\u0002\u03ab\u03ad\u0005\u012e\u0098\u0002\u03ac",
    "\u03aa\u0003\u0002\u0002\u0002\u03ac\u03ad\u0003\u0002\u0002\u0002\u03ad",
    "7\u0003\u0002\u0002\u0002\u03ae\u03c4\u0005\u008aF\u0002\u03af\u03c4",
    "\u0005> \u0002\u03b0\u03c4\u0005\u008eH\u0002\u03b1\u03c4\u0005<\u001f",
    "\u0002\u03b2\u03c4\u0005~@\u0002\u03b3\u03c4\u0005\u0080A\u0002\u03b4",
    "\u03c4\u0005:\u001e\u0002\u03b5\u03c4\u0005X-\u0002\u03b6\u03c4\u0005",
    "Z.\u0002\u03b7\u03c4\u0005N(\u0002\u03b8\u03c4\u0005D#\u0002\u03b9\u03c4",
    "\u0005H%\u0002\u03ba\u03c4\u0005L\'\u0002\u03bb\u03c4\u0005J&\u0002",
    "\u03bc\u03c4\u0005R*\u0002\u03bd\u03c4\u0005T+\u0002\u03be\u03c4\u0005",
    "v<\u0002\u03bf\u03c4\u0005@!\u0002\u03c0\u03c4\u0005B\"\u0002\u03c1",
    "\u03c4\u0005,\u0017\u0002\u03c2\u03c4\u0005\u0110\u0089\u0002\u03c3",
    "\u03ae\u0003\u0002\u0002\u0002\u03c3\u03af\u0003\u0002\u0002\u0002\u03c3",
    "\u03b0\u0003\u0002\u0002\u0002\u03c3\u03b1\u0003\u0002\u0002\u0002\u03c3",
    "\u03b2\u0003\u0002\u0002\u0002\u03c3\u03b3\u0003\u0002\u0002\u0002\u03c3",
    "\u03b4\u0003\u0002\u0002\u0002\u03c3\u03b5\u0003\u0002\u0002\u0002\u03c3",
    "\u03b6\u0003\u0002\u0002\u0002\u03c3\u03b7\u0003\u0002\u0002\u0002\u03c3",
    "\u03b8\u0003\u0002\u0002\u0002\u03c3\u03b9\u0003\u0002\u0002\u0002\u03c3",
    "\u03ba\u0003\u0002\u0002\u0002\u03c3\u03bb\u0003\u0002\u0002\u0002\u03c3",
    "\u03bc\u0003\u0002\u0002\u0002\u03c3\u03bd\u0003\u0002\u0002\u0002\u03c3",
    "\u03be\u0003\u0002\u0002\u0002\u03c3\u03bf\u0003\u0002\u0002\u0002\u03c3",
    "\u03c0\u0003\u0002\u0002\u0002\u03c3\u03c1\u0003\u0002\u0002\u0002\u03c3",
    "\u03c2\u0003\u0002\u0002\u0002\u03c49\u0003\u0002\u0002\u0002\u03c5",
    "\u03c6\u0007p\u0002\u0002\u03c6;\u0003\u0002\u0002\u0002\u03c7\u03c8",
    "\u0007a\u0002\u0002\u03c8\u03cc\u0005\u00c0a\u0002\u03c9\u03ca\u0007",
    "O\u0002\u0002\u03ca\u03cb\u0007\u0097\u0002\u0002\u03cb\u03cd\u0005",
    "\u00c0a\u0002\u03cc\u03c9\u0003\u0002\u0002\u0002\u03cc\u03cd\u0003",
    "\u0002\u0002\u0002\u03cd\u03d1\u0003\u0002\u0002\u0002\u03ce\u03cf\u0007",
    "\u0097\u0002\u0002\u03cf\u03d1\u0005\u00c0a\u0002\u03d0\u03c7\u0003",
    "\u0002\u0002\u0002\u03d0\u03ce\u0003\u0002\u0002\u0002\u03d1\u03d8\u0003",
    "\u0002\u0002\u0002\u03d2\u03d3\u0007\u009b\u0002\u0002\u03d3\u03d4\u0007",
    "\u0011\u0002\u0002\u03d4\u03d5\u0005\u0096L\u0002\u03d5\u03d6\u0005",
    "\u011a\u008e\u0002\u03d6\u03d7\u0005\u0098M\u0002\u03d7\u03d9\u0003",
    "\u0002\u0002\u0002\u03d8\u03d2\u0003\u0002\u0002\u0002\u03d8\u03d9\u0003",
    "\u0002\u0002\u0002\u03d9=\u0003\u0002\u0002\u0002\u03da\u03dd\u0005",
    "j6\u0002\u03db\u03dd\u0005`1\u0002\u03dc\u03da\u0003\u0002\u0002\u0002",
    "\u03dc\u03db\u0003\u0002\u0002\u0002\u03dd\u03df\u0003\u0002\u0002\u0002",
    "\u03de\u03e0\u0005\u0084C\u0002\u03df\u03de\u0003\u0002\u0002\u0002",
    "\u03df\u03e0\u0003\u0002\u0002\u0002\u03e0\u03eb\u0003\u0002\u0002\u0002",
    "\u03e1\u03e4\u0007\u009b\u0002\u0002\u03e2\u03e3\u0007\u00a2\u0002\u0002",
    "\u03e3\u03e5\u0005\u00e2r\u0002\u03e4\u03e2\u0003\u0002\u0002\u0002",
    "\u03e4\u03e5\u0003\u0002\u0002\u0002\u03e5\u03e6\u0003\u0002\u0002\u0002",
    "\u03e6\u03e7\u0007\u0011\u0002\u0002\u03e7\u03e8\u0005\u0096L\u0002",
    "\u03e8\u03e9\u0005\u011a\u008e\u0002\u03e9\u03ea\u0005\u0098M\u0002",
    "\u03ea\u03ec\u0003\u0002\u0002\u0002\u03eb\u03e1\u0003\u0002\u0002\u0002",
    "\u03eb\u03ec\u0003\u0002\u0002\u0002\u03ec\u03ef\u0003\u0002\u0002\u0002",
    "\u03ed\u03ef\u0005d3\u0002\u03ee\u03dc\u0003\u0002\u0002\u0002\u03ee",
    "\u03ed\u0003\u0002\u0002\u0002\u03ef?\u0003\u0002\u0002\u0002\u03f0",
    "\u03f1\u0007\u00a2\u0002\u0002\u03f1\u03f2\u0005\u0148\u00a5\u0002\u03f2",
    "\u03f3\u0007\u0013\u0002\u0002\u03f3\u03f4\u0007c\u0002\u0002\u03f4",
    "\u03f5\u0007\u0011\u0002\u0002\u03f5\u03f6\u0005\u0096L\u0002\u03f6",
    "\u03f7\u0005\u011a\u008e\u0002\u03f7\u03f8\u0005\u0098M\u0002\u03f8",
    "A\u0003\u0002\u0002\u0002\u03f9\u03fa\u0007\u00a2\u0002\u0002\u03fa",
    "\u03fb\u0005\u00e6t\u0002\u03fb\u03fc\u0007\u0013\u0002\u0002\u03fc",
    "\u03fd\u0007c\u0002\u0002\u03fd\u03fe\u0007\u0011\u0002\u0002\u03fe",
    "\u03ff\u0005\u0096L\u0002\u03ff\u0400\u0005\u011a\u008e\u0002\u0400",
    "\u0401\u0005\u0098M\u0002\u0401C\u0003\u0002\u0002\u0002\u0402\u0403",
    "\u0007\u0099\u0002\u0002\u0403\u0404\u0007\u0084\u0002\u0002\u0404\u0405",
    "\u0005\\/\u0002\u0405\u0406\u0007\u0011\u0002\u0002\u0406\u0407\u0005",
    "\u0096L\u0002\u0407\u040f\u0005\u011e\u0090\u0002\u0408\u0409\u0005",
    "\u0092J\u0002\u0409\u040a\u0007\u0089\u0002\u0002\u040a\u040b\u0007",
    "\u0011\u0002\u0002\u040b\u040c\u0005\u0096L\u0002\u040c\u040d\u0005",
    "\u011a\u008e\u0002\u040d\u040e\u0005\u0098M\u0002\u040e\u0410\u0003",
    "\u0002\u0002\u0002\u040f\u0408\u0003\u0002\u0002\u0002\u040f\u0410\u0003",
    "\u0002\u0002\u0002\u0410\u0411\u0003\u0002\u0002\u0002\u0411\u0412\u0005",
    "\u0098M\u0002\u0412E\u0003\u0002\u0002\u0002\u0413\u0414\u0007\u00a3",
    "\u0002\u0002\u0414\u0415\u0005\u0124\u0093\u0002\u0415\u0416\u0007\u0011",
    "\u0002\u0002\u0416\u0417\u0005\u0096L\u0002\u0417\u0418\u0005\u011a",
    "\u008e\u0002\u0418\u0419\u0005\u0098M\u0002\u0419\u0423\u0003\u0002",
    "\u0002\u0002\u041a\u041b\u0007\u00a3\u0002\u0002\u041b\u041c\u0007v",
    "\u0002\u0002\u041c\u041d\u0005\u0122\u0092\u0002\u041d\u041e\u0007\u0011",
    "\u0002\u0002\u041e\u041f\u0005\u0096L\u0002\u041f\u0420\u0005\u011a",
    "\u008e\u0002\u0420\u0421\u0005\u0098M\u0002\u0421\u0423\u0003\u0002",
    "\u0002\u0002\u0422\u0413\u0003\u0002\u0002\u0002\u0422\u041a\u0003\u0002",
    "\u0002\u0002\u0423G\u0003\u0002\u0002\u0002\u0424\u0425\u0007q\u0002",
    "\u0002\u0425\u0426\u0007e\u0002\u0002\u0426\u0429\u0005\u00e2r\u0002",
    "\u0427\u0428\u0007\u0013\u0002\u0002\u0428\u042a\u0005\u00e2r\u0002",
    "\u0429\u0427\u0003\u0002\u0002\u0002\u0429\u042a\u0003\u0002\u0002\u0002",
    "\u042a\u042b\u0003\u0002\u0002\u0002\u042b\u042c\u0007v\u0002\u0002",
    "\u042c\u042d\u0005\\/\u0002\u042d\u042e\u0007\u0011\u0002\u0002\u042e",
    "\u042f\u0005\u0096L\u0002\u042f\u0430\u0005\u011a\u008e\u0002\u0430",
    "\u0431\u0005\u0098M\u0002\u0431I\u0003\u0002\u0002\u0002\u0432\u0433",
    "\u0007c\u0002\u0002\u0433\u0434\u0007\u0011\u0002\u0002\u0434\u0435",
    "\u0005\u0096L\u0002\u0435\u0436\u0005\u011a\u008e\u0002\u0436\u0437",
    "\u0005\u0098M\u0002\u0437\u0438\u0005\u0092J\u0002\u0438\u0439\u0007",
    "\u00a5\u0002\u0002\u0439\u043a\u0005\\/\u0002\u043aK\u0003\u0002\u0002",
    "\u0002\u043b\u043c\u0007\u00a5\u0002\u0002\u043c\u043d\u0005\\/\u0002",
    "\u043d\u043e\u0007\u0011\u0002\u0002\u043e\u043f\u0005\u0096L\u0002",
    "\u043f\u0440\u0005\u011a\u008e\u0002\u0440\u0441\u0005\u0098M\u0002",
    "\u0441M\u0003\u0002\u0002\u0002\u0442\u0443\u0007u\u0002\u0002\u0443",
    "\u0444\u0005\\/\u0002\u0444\u0445\u0007\u0011\u0002\u0002\u0445\u0446",
    "\u0005\u0096L\u0002\u0446\u0447\u0005\u011a\u008e\u0002\u0447\u044b",
    "\u0005\u0098M\u0002\u0448\u0449\u0005\u0092J\u0002\u0449\u044a\u0005",
    "P)\u0002\u044a\u044c\u0003\u0002\u0002\u0002\u044b\u0448\u0003\u0002",
    "\u0002\u0002\u044b\u044c\u0003\u0002\u0002\u0002\u044c\u0454\u0003\u0002",
    "\u0002\u0002\u044d\u044e\u0005\u0092J\u0002\u044e\u044f\u0007f\u0002",
    "\u0002\u044f\u0450\u0007\u0011\u0002\u0002\u0450\u0451\u0005\u0096L",
    "\u0002\u0451\u0452\u0005\u011a\u008e\u0002\u0452\u0453\u0005\u0098M",
    "\u0002\u0453\u0455\u0003\u0002\u0002\u0002\u0454\u044d\u0003\u0002\u0002",
    "\u0002\u0454\u0455\u0003\u0002\u0002\u0002\u0455O\u0003\u0002\u0002",
    "\u0002\u0456\u0457\b)\u0001\u0002\u0457\u0458\u0007f\u0002\u0002\u0458",
    "\u0459\u0007u\u0002\u0002\u0459\u045a\u0005\\/\u0002\u045a\u045b\u0007",
    "\u0011\u0002\u0002\u045b\u045c\u0005\u0096L\u0002\u045c\u045d\u0005",
    "\u011a\u008e\u0002\u045d\u045e\u0005\u0098M\u0002\u045e\u046b\u0003",
    "\u0002\u0002\u0002\u045f\u0460\f\u0003\u0002\u0002\u0460\u0461\u0005",
    "\u0092J\u0002\u0461\u0462\u0007f\u0002\u0002\u0462\u0463\u0007u\u0002",
    "\u0002\u0463\u0464\u0005\\/\u0002\u0464\u0465\u0007\u0011\u0002\u0002",
    "\u0465\u0466\u0005\u0096L\u0002\u0466\u0467\u0005\u011a\u008e\u0002",
    "\u0467\u0468\u0005\u0098M\u0002\u0468\u046a\u0003\u0002\u0002\u0002",
    "\u0469\u045f\u0003\u0002\u0002\u0002\u046a\u046d\u0003\u0002\u0002\u0002",
    "\u046b\u0469\u0003\u0002\u0002\u0002\u046b\u046c\u0003\u0002\u0002\u0002",
    "\u046cQ\u0003\u0002\u0002\u0002\u046d\u046b\u0003\u0002\u0002\u0002",
    "\u046e\u046f\u0007\u008b\u0002\u0002\u046f\u0470\u0005\\/\u0002\u0470",
    "S\u0003\u0002\u0002\u0002\u0471\u0472\u0007\u0099\u0002\u0002\u0472",
    "\u0473\u0007\u0084\u0002\u0002\u0473\u0474\u0005\u00e2r\u0002\u0474",
    "\u0475\u0007d\u0002\u0002\u0475\u0476\u0007\u0011\u0002\u0002\u0476",
    "\u0477\u0005\u0096L\u0002\u0477\u0478\u0005\u011a\u008e\u0002\u0478",
    "\u0479\u0005\u0098M\u0002\u0479\u047b\u0005\u0090I\u0002\u047a\u047c",
    "\u0005\u0120\u0091\u0002\u047b\u047a\u0003\u0002\u0002\u0002\u047b\u047c",
    "\u0003\u0002\u0002\u0002\u047c\u0488\u0003\u0002\u0002\u0002\u047d\u0481",
    "\u0007\u0089\u0002\u0002\u047e\u047f\u0007\u00a3\u0002\u0002\u047f\u0481",
    "\u0007P\u0002\u0002\u0480\u047d\u0003\u0002\u0002\u0002\u0480\u047e",
    "\u0003\u0002\u0002\u0002\u0481\u0482\u0003\u0002\u0002\u0002\u0482\u0483",
    "\u0007\u0011\u0002\u0002\u0483\u0484\u0005\u0096L\u0002\u0484\u0485",
    "\u0005\u011a\u008e\u0002\u0485\u0486\u0005\u0098M\u0002\u0486\u0487",
    "\u0005\u0090I\u0002\u0487\u0489\u0003\u0002\u0002\u0002\u0488\u0480",
    "\u0003\u0002\u0002\u0002\u0488\u0489\u0003\u0002\u0002\u0002\u0489\u0491",
    "\u0003\u0002\u0002\u0002\u048a\u048b\u0007N\u0002\u0002\u048b\u048c",
    "\u0007\u0011\u0002\u0002\u048c\u048d\u0005\u0096L\u0002\u048d\u048e",
    "\u0005\u011a\u008e\u0002\u048e\u048f\u0005\u0098M\u0002\u048f\u0490",
    "\u0005\u0090I\u0002\u0490\u0492\u0003\u0002\u0002\u0002\u0491\u048a",
    "\u0003\u0002\u0002\u0002\u0491\u0492\u0003\u0002\u0002\u0002\u0492\u0493",
    "\u0003\u0002\u0002\u0002\u0493\u0494\u0005\u0090I\u0002\u0494U\u0003",
    "\u0002\u0002\u0002\u0495\u0496\u0007\u00a3\u0002\u0002\u0496\u0497\u0005",
    "\u00e8u\u0002\u0497\u0498\u0007\u0011\u0002\u0002\u0498\u0499\u0005",
    "\u0096L\u0002\u0499\u049a\u0005\u011a\u008e\u0002\u049a\u049b\u0005",
    "\u0098M\u0002\u049b\u049c\u0005\u0090I\u0002\u049c\u04a9\u0003\u0002",
    "\u0002\u0002\u049d\u049e\u0007\u00a3\u0002\u0002\u049e\u049f\u0007v",
    "\u0002\u0002\u049f\u04a0\u0007\u0018\u0002\u0002\u04a0\u04a1\u0005\u00b8",
    "]\u0002\u04a1\u04a2\u0007\u0019\u0002\u0002\u04a2\u04a3\u0007\u0011",
    "\u0002\u0002\u04a3\u04a4\u0005\u0096L\u0002\u04a4\u04a5\u0005\u011a",
    "\u008e\u0002\u04a5\u04a6\u0005\u0098M\u0002\u04a6\u04a7\u0005\u0090",
    "I\u0002\u04a7\u04a9\u0003\u0002\u0002\u0002\u04a8\u0495\u0003\u0002",
    "\u0002\u0002\u04a8\u049d\u0003\u0002\u0002\u0002\u04a9W\u0003\u0002",
    "\u0002\u0002\u04aa\u04ab\u0007W\u0002\u0002\u04abY\u0003\u0002\u0002",
    "\u0002\u04ac\u04ae\u0007\u008f\u0002\u0002\u04ad\u04af\u0005\\/\u0002",
    "\u04ae\u04ad\u0003\u0002\u0002\u0002\u04ae\u04af\u0003\u0002\u0002\u0002",
    "\u04af[\u0003\u0002\u0002\u0002\u04b0\u04b1\b/\u0001\u0002\u04b1\u04d4",
    "\u0005\u0202\u0102\u0002\u04b2\u04d4\u0005\u01e2\u00f2\u0002\u04b3\u04d4",
    "\u0005j6\u0002\u04b4\u04d4\u0005\u014e\u00a8\u0002\u04b5\u04d4\u0005",
    "`1\u0002\u04b6\u04b9\u0005j6\u0002\u04b7\u04b9\u0005`1\u0002\u04b8\u04b6",
    "\u0003\u0002\u0002\u0002\u04b8\u04b7\u0003\u0002\u0002\u0002\u04b9\u04ba",
    "\u0003\u0002\u0002\u0002\u04ba\u04bb\u0005\u0084C\u0002\u04bb\u04d4",
    "\u0003\u0002\u0002\u0002\u04bc\u04d4\u0005t;\u0002\u04bd\u04be\u0007",
    "#\u0002\u0002\u04be\u04d4\u0005\\/$\u04bf\u04c0\u0007\u0081\u0002\u0002",
    "\u04c0\u04d4\u0005\\/#\u04c1\u04c2\u0007C\u0002\u0002\u04c2\u04c3\u0007",
    "\u0011\u0002\u0002\u04c3\u04d4\u0005\\/\u0011\u04c4\u04c5\u0007j\u0002",
    "\u0002\u04c5\u04c6\u0007\u0011\u0002\u0002\u04c6\u04d4\u0005\u00e2r",
    "\u0002\u04c7\u04c8\u0007B\u0002\u0002\u04c8\u04d4\u0005\u00d6l\u0002",
    "\u04c9\u04d4\u0005r:\u0002\u04ca\u04d4\u0005p9\u0002\u04cb\u04d4\u0005",
    "n8\u0002\u04cc\u04d4\u0005|?\u0002\u04cd\u04d4\u0005\u0156\u00ac\u0002",
    "\u04ce\u04d4\u0005\u0158\u00ad\u0002\u04cf\u04d4\u0005\u015a\u00ae\u0002",
    "\u04d0\u04d4\u0005\u0082B\u0002\u04d1\u04d4\u0005x=\u0002\u04d2\u04d4",
    "\u0005d3\u0002\u04d3\u04b0\u0003\u0002\u0002\u0002\u04d3\u04b2\u0003",
    "\u0002\u0002\u0002\u04d3\u04b3\u0003\u0002\u0002\u0002\u04d3\u04b4\u0003",
    "\u0002\u0002\u0002\u04d3\u04b5\u0003\u0002\u0002\u0002\u04d3\u04b8\u0003",
    "\u0002\u0002\u0002\u04d3\u04bc\u0003\u0002\u0002\u0002\u04d3\u04bd\u0003",
    "\u0002\u0002\u0002\u04d3\u04bf\u0003\u0002\u0002\u0002\u04d3\u04c1\u0003",
    "\u0002\u0002\u0002\u04d3\u04c4\u0003\u0002\u0002\u0002\u04d3\u04c7\u0003",
    "\u0002\u0002\u0002\u04d3\u04c9\u0003\u0002\u0002\u0002\u04d3\u04ca\u0003",
    "\u0002\u0002\u0002\u04d3\u04cb\u0003\u0002\u0002\u0002\u04d3\u04cc\u0003",
    "\u0002\u0002\u0002\u04d3\u04cd\u0003\u0002\u0002\u0002\u04d3\u04ce\u0003",
    "\u0002\u0002\u0002\u04d3\u04cf\u0003\u0002\u0002\u0002\u04d3\u04d0\u0003",
    "\u0002\u0002\u0002\u04d3\u04d1\u0003\u0002\u0002\u0002\u04d3\u04d2\u0003",
    "\u0002\u0002\u0002\u04d4\u0531\u0003\u0002\u0002\u0002\u04d5\u04d6\f",
    "!\u0002\u0002\u04d6\u04d7\u0005\u0170\u00b9\u0002\u04d7\u04d8\u0005",
    "\\/\"\u04d8\u0530\u0003\u0002\u0002\u0002\u04d9\u04da\f \u0002\u0002",
    "\u04da\u04db\u0005\u0172\u00ba\u0002\u04db\u04dc\u0005\\/!\u04dc\u0530",
    "\u0003\u0002\u0002\u0002\u04dd\u04de\f\u001f\u0002\u0002\u04de\u04df",
    "\u0005\u0176\u00bc\u0002\u04df\u04e0\u0005\\/ \u04e0\u0530\u0003\u0002",
    "\u0002\u0002\u04e1\u04e2\f\u001e\u0002\u0002\u04e2\u04e3\u0005\u0174",
    "\u00bb\u0002\u04e3\u04e4\u0005\\/\u001f\u04e4\u0530\u0003\u0002\u0002",
    "\u0002\u04e5\u04e6\f\u001d\u0002\u0002\u04e6\u04e7\t\u0002\u0002\u0002",
    "\u04e7\u0530\u0005\\/\u001e\u04e8\u04e9\f\u001c\u0002\u0002\u04e9\u04ea",
    "\t\u0003\u0002\u0002\u04ea\u0530\u0005\\/\u001d\u04eb\u04ec\f\u001a",
    "\u0002\u0002\u04ec\u04ed\t\u0004\u0002\u0002\u04ed\u0530\u0005\\/\u001b",
    "\u04ee\u04f0\f\u0019\u0002\u0002\u04ef\u04f1\u0007\u0081\u0002\u0002",
    "\u04f0\u04ef\u0003\u0002\u0002\u0002\u04f0\u04f1\u0003\u0002\u0002\u0002",
    "\u04f1\u04f2\u0003\u0002\u0002\u0002\u04f2\u04f3\u0007]\u0002\u0002",
    "\u04f3\u0530\u0005\\/\u001a\u04f4\u04f6\f\u0018\u0002\u0002\u04f5\u04f7",
    "\u0007\u0081\u0002\u0002\u04f6\u04f5\u0003\u0002\u0002\u0002\u04f6\u04f7",
    "\u0003\u0002\u0002\u0002\u04f7\u04f8\u0003\u0002\u0002\u0002\u04f8\u04f9",
    "\u0007v\u0002\u0002\u04f9\u0530\u0005\\/\u0019\u04fa\u04fc\f\u0017\u0002",
    "\u0002\u04fb\u04fd\u0007\u0081\u0002\u0002\u04fc\u04fb\u0003\u0002\u0002",
    "\u0002\u04fc\u04fd\u0003\u0002\u0002\u0002\u04fd\u04fe\u0003\u0002\u0002",
    "\u0002\u04fe\u04ff\u0007t\u0002\u0002\u04ff\u0530\u0005\\/\u0018\u0500",
    "\u0501\f\u0014\u0002\u0002\u0501\u0502\u0007\u0087\u0002\u0002\u0502",
    "\u0530\u0005\\/\u0015\u0503\u0504\f\u0013\u0002\u0002\u0504\u0505\u0007",
    "O\u0002\u0002\u0505\u0530\u0005\\/\u0014\u0506\u0507\f\u0012\u0002\u0002",
    "\u0507\u0508\u0007u\u0002\u0002\u0508\u0509\u0005\\/\u0002\u0509\u050a",
    "\u0007f\u0002\u0002\u050a\u050b\u0005\\/\u0013\u050b\u0530\u0003\u0002",
    "\u0002\u0002\u050c\u050d\f\u0003\u0002\u0002\u050d\u050e\u0007q\u0002",
    "\u0002\u050e\u050f\u0007e\u0002\u0002\u050f\u0510\u0005\u00e2r\u0002",
    "\u0510\u0511\u0007v\u0002\u0002\u0511\u0512\u0005\\/\u0004\u0512\u0530",
    "\u0003\u0002\u0002\u0002\u0513\u0514\f\"\u0002\u0002\u0514\u0516\u0007",
    "Q\u0002\u0002\u0515\u0517\u0007~\u0002\u0002\u0516\u0515\u0003\u0002",
    "\u0002\u0002\u0516\u0517\u0003\u0002\u0002\u0002\u0517\u0518\u0003\u0002",
    "\u0002\u0002\u0518\u0530\u0005\u00f4{\u0002\u0519\u051a\f\u001b\u0002",
    "\u0002\u051a\u051c\u0007y\u0002\u0002\u051b\u051d\u0007\u0081\u0002",
    "\u0002\u051c\u051b\u0003\u0002\u0002\u0002\u051c\u051d\u0003\u0002\u0002",
    "\u0002\u051d\u051e\u0003\u0002\u0002\u0002\u051e\u0530\u0005\u014c\u00a7",
    "\u0002\u051f\u0521\f\u0016\u0002\u0002\u0520\u0522\u0007\u0081\u0002",
    "\u0002\u0521\u0520\u0003\u0002\u0002\u0002\u0521\u0522\u0003\u0002\u0002",
    "\u0002\u0522\u0523\u0003\u0002\u0002\u0002\u0523\u0524\u0007t\u0002",
    "\u0002\u0524\u0525\u0007M\u0002\u0002\u0525\u0530\u0005^0\u0002\u0526",
    "\u0528\f\u0015\u0002\u0002\u0527\u0529\u0007\u0081\u0002\u0002\u0528",
    "\u0527\u0003\u0002\u0002\u0002\u0528\u0529\u0003\u0002\u0002\u0002\u0529",
    "\u052a\u0003\u0002\u0002\u0002\u052a\u052b\u0007t\u0002\u0002\u052b",
    "\u052c\u0007P\u0002\u0002\u052c\u0530\u0005^0\u0002\u052d\u052e\f\u000b",
    "\u0002\u0002\u052e\u0530\u0005z>\u0002\u052f\u04d5\u0003\u0002\u0002",
    "\u0002\u052f\u04d9\u0003\u0002\u0002\u0002\u052f\u04dd\u0003\u0002\u0002",
    "\u0002\u052f\u04e1\u0003\u0002\u0002\u0002\u052f\u04e5\u0003\u0002\u0002",
    "\u0002\u052f\u04e8\u0003\u0002\u0002\u0002\u052f\u04eb\u0003\u0002\u0002",
    "\u0002\u052f\u04ee\u0003\u0002\u0002\u0002\u052f\u04f4\u0003\u0002\u0002",
    "\u0002\u052f\u04fa\u0003\u0002\u0002\u0002\u052f\u0500\u0003\u0002\u0002",
    "\u0002\u052f\u0503\u0003\u0002\u0002\u0002\u052f\u0506\u0003\u0002\u0002",
    "\u0002\u052f\u050c\u0003\u0002\u0002\u0002\u052f\u0513\u0003\u0002\u0002",
    "\u0002\u052f\u0519\u0003\u0002\u0002\u0002\u052f\u051f\u0003\u0002\u0002",
    "\u0002\u052f\u0526\u0003\u0002\u0002\u0002\u052f\u052d\u0003\u0002\u0002",
    "\u0002\u0530\u0533\u0003\u0002\u0002\u0002\u0531\u052f\u0003\u0002\u0002",
    "\u0002\u0531\u0532\u0003\u0002\u0002\u0002\u0532]\u0003\u0002\u0002",
    "\u0002\u0533\u0531\u0003\u0002\u0002\u0002\u0534\u0535\u0007\u00a4\u0002",
    "\u0002\u0535\u053c\u0005\u014e\u00a8\u0002\u0536\u0537\u0005\u00e2r",
    "\u0002\u0537\u0538\u0007\u00a4\u0002\u0002\u0538\u0539\u0005\\/\u0002",
    "\u0539\u053c\u0003\u0002\u0002\u0002\u053a\u053c\u0005\\/\u0002\u053b",
    "\u0534\u0003\u0002\u0002\u0002\u053b\u0536\u0003\u0002\u0002\u0002\u053b",
    "\u053a\u0003\u0002\u0002\u0002\u053c_\u0003\u0002\u0002\u0002\u053d",
    "\u053e\b1\u0001\u0002\u053e\u053f\u0005\u00dep\u0002\u053f\u0544\u0003",
    "\u0002\u0002\u0002\u0540\u0541\f\u0003\u0002\u0002\u0541\u0543\u0005",
    "b2\u0002\u0542\u0540\u0003\u0002\u0002\u0002\u0543\u0546\u0003\u0002",
    "\u0002\u0002\u0544\u0542\u0003\u0002\u0002\u0002\u0544\u0545\u0003\u0002",
    "\u0002\u0002\u0545a\u0003\u0002\u0002\u0002\u0546\u0544\u0003\u0002",
    "\u0002\u0002\u0547\u0548\u00062\u0018\u0003\u0548\u0549\u0007\u0015",
    "\u0002\u0002\u0549\u054a\u0005\u00dep\u0002\u054ac\u0003\u0002\u0002",
    "\u0002\u054b\u054c\u0007x\u0002\u0002\u054c\u054d\u0005\u00e2r\u0002",
    "\u054d\u054e\u0005f4\u0002\u054ee\u0003\u0002\u0002\u0002\u054f\u0550",
    "\u00064\u0019\u0003\u0550g\u0003\u0002\u0002\u0002\u0551\u0557\u0005",
    "\u012c\u0097\u0002\u0552\u0557\u0005\u012e\u0098\u0002\u0553\u0557\u0005",
    "\u00dep\u0002\u0554\u0557\u0005\u0128\u0095\u0002\u0555\u0557\u0005",
    "\u012a\u0096\u0002\u0556\u0551\u0003\u0002\u0002\u0002\u0556\u0552\u0003",
    "\u0002\u0002\u0002\u0556\u0553\u0003\u0002\u0002\u0002\u0556\u0554\u0003",
    "\u0002\u0002\u0002\u0556\u0555\u0003\u0002\u0002\u0002\u0557i\u0003",
    "\u0002\u0002\u0002\u0558\u0559\b6\u0001\u0002\u0559\u055a\u0005h5\u0002",
    "\u055a\u055f\u0003\u0002\u0002\u0002\u055b\u055c\f\u0003\u0002\u0002",
    "\u055c\u055e\u0005l7\u0002\u055d\u055b\u0003\u0002\u0002\u0002\u055e",
    "\u0561\u0003\u0002\u0002\u0002\u055f\u055d\u0003\u0002\u0002\u0002\u055f",
    "\u0560\u0003\u0002\u0002\u0002\u0560k\u0003\u0002\u0002\u0002\u0561",
    "\u055f\u0003\u0002\u0002\u0002\u0562\u0563\u00067\u001b\u0003\u0563",
    "\u0564\u0007\u0015\u0002\u0002\u0564\u0570\u0005\u00e0q\u0002\u0565",
    "\u0566\u00067\u001c\u0003\u0566\u0567\u0007\u0018\u0002\u0002\u0567",
    "\u0568\u0005\u0146\u00a4\u0002\u0568\u0569\u0007\u0019\u0002\u0002\u0569",
    "\u0570\u0003\u0002\u0002\u0002\u056a\u056b\u00067\u001d\u0003\u056b",
    "\u056c\u0007\u0018\u0002\u0002\u056c\u056d\u0005\\/\u0002\u056d\u056e",
    "\u0007\u0019\u0002\u0002\u056e\u0570\u0003\u0002\u0002\u0002\u056f\u0562",
    "\u0003\u0002\u0002\u0002\u056f\u0565\u0003\u0002\u0002\u0002\u056f\u056a",
    "\u0003\u0002\u0002\u0002\u0570m\u0003\u0002\u0002\u0002\u0571\u0572",
    "\b8\u0001\u0002\u0572\u0573\u0007~\u0002\u0002\u0573\u0574\u0005\u00de",
    "p\u0002\u0574\u0579\u0003\u0002\u0002\u0002\u0575\u0576\f\u0003\u0002",
    "\u0002\u0576\u0578\u0005l7\u0002\u0577\u0575\u0003\u0002\u0002\u0002",
    "\u0578\u057b\u0003\u0002\u0002\u0002\u0579\u0577\u0003\u0002\u0002\u0002",
    "\u0579\u057a\u0003\u0002\u0002\u0002\u057ao\u0003\u0002\u0002\u0002",
    "\u057b\u0579\u0003\u0002\u0002\u0002\u057c\u057f\u0007D\u0002\u0002",
    "\u057d\u057e\u0007r\u0002\u0002\u057e\u0580\u0005\\/\u0002\u057f\u057d",
    "\u0003\u0002\u0002\u0002\u057f\u0580\u0003\u0002\u0002\u0002\u0580q",
    "\u0003\u0002\u0002\u0002\u0581\u0582\u0007E\u0002\u0002\u0582\u0583",
    "\u0007r\u0002\u0002\u0583\u0584\u0005\\/\u0002\u0584s\u0003\u0002\u0002",
    "\u0002\u0585\u0586\u0005\u00ccg\u0002\u0586\u0587\u0007r\u0002\u0002",
    "\u0587\u0590\u0005\\/\u0002\u0588\u058a\u0007\u0013\u0002\u0002\u0589",
    "\u0588\u0003\u0002\u0002\u0002\u0589\u058a\u0003\u0002\u0002\u0002\u058a",
    "\u058b\u0003\u0002\u0002\u0002\u058b\u058e\u0005\u0086D\u0002\u058c",
    "\u058d\u0007O\u0002\u0002\u058d\u058f\u0005\u0088E\u0002\u058e\u058c",
    "\u0003\u0002\u0002\u0002\u058e\u058f\u0003\u0002\u0002\u0002\u058f\u0591",
    "\u0003\u0002\u0002\u0002\u0590\u0589\u0003\u0002\u0002\u0002\u0590\u0591",
    "\u0003\u0002\u0002\u0002\u0591\u059b\u0003\u0002\u0002\u0002\u0592\u0598",
    "\u0005\u00ccg\u0002\u0593\u0596\u0005\u0086D\u0002\u0594\u0595\u0007",
    "O\u0002\u0002\u0595\u0597\u0005\u0088E\u0002\u0596\u0594\u0003\u0002",
    "\u0002\u0002\u0596\u0597\u0003\u0002\u0002\u0002\u0597\u0599\u0003\u0002",
    "\u0002\u0002\u0598\u0593\u0003\u0002\u0002\u0002\u0598\u0599\u0003\u0002",
    "\u0002\u0002\u0599\u059b\u0003\u0002\u0002\u0002\u059a\u0585\u0003\u0002",
    "\u0002\u0002\u059a\u0592\u0003\u0002\u0002\u0002\u059bu\u0003\u0002",
    "\u0002\u0002\u059c\u059d\u0007\u00a6\u0002\u0002\u059d\u059e\u0005\\",
    "/\u0002\u059e\u059f\u0007\u009e\u0002\u0002\u059f\u05a0\u0005\\/\u0002",
    "\u05a0w\u0003\u0002\u0002\u0002\u05a1\u05a2\u0005`1\u0002\u05a2\u05a3",
    "\u0007#\u0002\u0002\u05a3\u05a4\u0005\\/\u0002\u05a4y\u0003\u0002\u0002",
    "\u0002\u05a5\u05a8\u0007n\u0002\u0002\u05a6\u05a7\u0007\u00a2\u0002",
    "\u0002\u05a7\u05a9\u0005\u00e2r\u0002\u05a8\u05a6\u0003\u0002\u0002",
    "\u0002\u05a8\u05a9\u0003\u0002\u0002\u0002\u05a9\u05aa\u0003\u0002\u0002",
    "\u0002\u05aa\u05ab\u0007\u00a4\u0002\u0002\u05ab\u05ac\u0005\\/\u0002",
    "\u05ac{\u0003\u0002\u0002\u0002\u05ad\u05ae\u0007m\u0002\u0002\u05ae",
    "\u05b0\u0007\u0085\u0002\u0002\u05af\u05b1\u0005\u00ccg\u0002\u05b0",
    "\u05af\u0003\u0002\u0002\u0002\u05b0\u05b1\u0003\u0002\u0002\u0002\u05b1",
    "\u05b2\u0003\u0002\u0002\u0002\u05b2\u05b3\u0007\u00a4\u0002\u0002\u05b3",
    "\u05d2\u0005\\/\u0002\u05b4\u05c6\u0007m\u0002\u0002\u05b5\u05b7\u0007",
    "M\u0002\u0002\u05b6\u05b8\u0005\u00ccg\u0002\u05b7\u05b6\u0003\u0002",
    "\u0002\u0002\u05b7\u05b8\u0003\u0002\u0002\u0002\u05b8\u05c7\u0003\u0002",
    "\u0002\u0002\u05b9\u05bb\u0005\u00ccg\u0002\u05ba\u05bc\u0007\u0091",
    "\u0002\u0002\u05bb\u05ba\u0003\u0002\u0002\u0002\u05bb\u05bc\u0003\u0002",
    "\u0002\u0002\u05bc\u05bd\u0003\u0002\u0002\u0002\u05bd\u05be\u0005\\",
    "/\u0002\u05be\u05bf\u0007\u009e\u0002\u0002\u05bf\u05c0\u0005\\/\u0002",
    "\u05c0\u05c7\u0003\u0002\u0002\u0002\u05c1\u05c2\u0007\u0091\u0002\u0002",
    "\u05c2\u05c3\u0005\\/\u0002\u05c3\u05c4\u0007\u009e\u0002\u0002\u05c4",
    "\u05c5\u0005\\/\u0002\u05c5\u05c7\u0003\u0002\u0002\u0002\u05c6\u05b5",
    "\u0003\u0002\u0002\u0002\u05c6\u05b9\u0003\u0002\u0002\u0002\u05c6\u05c1",
    "\u0003\u0002\u0002\u0002\u05c7\u05ca\u0003\u0002\u0002\u0002\u05c8\u05c9",
    "\u0007\u00a4\u0002\u0002\u05c9\u05cb\u0005\\/\u0002\u05ca\u05c8\u0003",
    "\u0002\u0002\u0002\u05ca\u05cb\u0003\u0002\u0002\u0002\u05cb\u05cf\u0003",
    "\u0002\u0002\u0002\u05cc\u05cd\u0007\u0088\u0002\u0002\u05cd\u05ce\u0007",
    "X\u0002\u0002\u05ce\u05d0\u0005\u015c\u00af\u0002\u05cf\u05cc\u0003",
    "\u0002\u0002\u0002\u05cf\u05d0\u0003\u0002\u0002\u0002\u05d0\u05d2\u0003",
    "\u0002\u0002\u0002\u05d1\u05ad\u0003\u0002\u0002\u0002\u05d1\u05b4\u0003",
    "\u0002\u0002\u0002\u05d2}\u0003\u0002\u0002\u0002\u05d3\u05d4\u0007",
    "m\u0002\u0002\u05d4\u05d6\u0007\u0085\u0002\u0002\u05d5\u05d7\u0005",
    "\u00ccg\u0002\u05d6\u05d5\u0003\u0002\u0002\u0002\u05d6\u05d7\u0003",
    "\u0002\u0002\u0002\u05d7\u05d8\u0003\u0002\u0002\u0002\u05d8\u05d9\u0007",
    "\u00a4\u0002\u0002\u05d9\u05da\u0005\\/\u0002\u05da\u05db\u0007\u009b",
    "\u0002\u0002\u05db\u05dc\u0007\u00a2\u0002\u0002\u05dc\u05dd\u0005\u00e2",
    "r\u0002\u05dd\u05de\u0007\u0011\u0002\u0002\u05de\u05df\u0005\u0096",
    "L\u0002\u05df\u05e0\u0005\u011a\u008e\u0002\u05e0\u05e1\u0005\u0098",
    "M\u0002\u05e1\u0608\u0003\u0002\u0002\u0002\u05e2\u05f4\u0007m\u0002",
    "\u0002\u05e3\u05e5\u0007M\u0002\u0002\u05e4\u05e6\u0005\u00ccg\u0002",
    "\u05e5\u05e4\u0003\u0002\u0002\u0002\u05e5\u05e6\u0003\u0002\u0002\u0002",
    "\u05e6\u05f5\u0003\u0002\u0002\u0002\u05e7\u05e9\u0005\u00ccg\u0002",
    "\u05e8\u05ea\u0007\u0091\u0002\u0002\u05e9\u05e8\u0003\u0002\u0002\u0002",
    "\u05e9\u05ea\u0003\u0002\u0002\u0002\u05ea\u05eb\u0003\u0002\u0002\u0002",
    "\u05eb\u05ec\u0005\\/\u0002\u05ec\u05ed\u0007\u009e\u0002\u0002\u05ed",
    "\u05ee\u0005\\/\u0002\u05ee\u05f5\u0003\u0002\u0002\u0002\u05ef\u05f0",
    "\u0007\u0091\u0002\u0002\u05f0\u05f1\u0005\\/\u0002\u05f1\u05f2\u0007",
    "\u009e\u0002\u0002\u05f2\u05f3\u0005\\/\u0002\u05f3\u05f5\u0003\u0002",
    "\u0002\u0002\u05f4\u05e3\u0003\u0002\u0002\u0002\u05f4\u05e7\u0003\u0002",
    "\u0002\u0002\u05f4\u05ef\u0003\u0002\u0002\u0002\u05f5\u05f8\u0003\u0002",
    "\u0002\u0002\u05f6\u05f7\u0007\u00a4\u0002\u0002\u05f7\u05f9\u0005\\",
    "/\u0002\u05f8\u05f6\u0003\u0002\u0002\u0002\u05f8\u05f9\u0003\u0002",
    "\u0002\u0002\u05f9\u05fd\u0003\u0002\u0002\u0002\u05fa\u05fb\u0007\u0088",
    "\u0002\u0002\u05fb\u05fc\u0007X\u0002\u0002\u05fc\u05fe\u0005\u015c",
    "\u00af\u0002\u05fd\u05fa\u0003\u0002\u0002\u0002\u05fd\u05fe\u0003\u0002",
    "\u0002\u0002\u05fe\u05ff\u0003\u0002\u0002\u0002\u05ff\u0600\u0007\u009b",
    "\u0002\u0002\u0600\u0601\u0007\u00a2\u0002\u0002\u0601\u0602\u0005\u00e2",
    "r\u0002\u0602\u0603\u0007\u0011\u0002\u0002\u0603\u0604\u0005\u0096",
    "L\u0002\u0604\u0605\u0005\u011a\u008e\u0002\u0605\u0606\u0005\u0098",
    "M\u0002\u0606\u0608\u0003\u0002\u0002\u0002\u0607\u05d3\u0003\u0002",
    "\u0002\u0002\u0607\u05e2\u0003\u0002\u0002\u0002\u0608\u007f\u0003\u0002",
    "\u0002\u0002\u0609\u060a\u0007\u008c\u0002\u0002\u060a\u060b\u0007M",
    "\u0002\u0002\u060b\u060c\u0007r\u0002\u0002\u060c\u060d\u0005\\/\u0002",
    "\u060d\u060e\u0007\u009b\u0002\u0002\u060e\u060f\u0007\u00a2\u0002\u0002",
    "\u060f\u0610\u0005\u00e2r\u0002\u0610\u0611\u0007\u0011\u0002\u0002",
    "\u0611\u0612\u0005\u0096L\u0002\u0612\u0613\u0005\u011a\u008e\u0002",
    "\u0613\u0614\u0005\u0098M\u0002\u0614\u0081\u0003\u0002\u0002\u0002",
    "\u0615\u0617\u0007\u0095\u0002\u0002\u0616\u0618\u0007b\u0002\u0002",
    "\u0617\u0616\u0003\u0002\u0002\u0002\u0617\u0618\u0003\u0002\u0002\u0002",
    "\u0618\u0619\u0003\u0002\u0002\u0002\u0619\u061f\u0005j6\u0002\u061a",
    "\u061b\u0007\u00a2\u0002\u0002\u061b\u061c\u0005\u0154\u00ab\u0002\u061c",
    "\u061d\u0007Q\u0002\u0002\u061d\u061e\u0005\u0166\u00b4\u0002\u061e",
    "\u0620\u0003\u0002\u0002\u0002\u061f\u061a\u0003\u0002\u0002\u0002\u061f",
    "\u0620\u0003\u0002\u0002\u0002\u0620\u0083\u0003\u0002\u0002\u0002\u0621",
    "\u0622\u0006C\u001f\u0003\u0622\u0628\u0005\\/\u0002\u0623\u0626\u0005",
    "\u0086D\u0002\u0624\u0625\u0007O\u0002\u0002\u0625\u0627\u0005\u0088",
    "E\u0002\u0626\u0624\u0003\u0002\u0002\u0002\u0626\u0627\u0003\u0002",
    "\u0002\u0002\u0627\u0629\u0003\u0002\u0002\u0002\u0628\u0623\u0003\u0002",
    "\u0002\u0002\u0628\u0629\u0003\u0002\u0002\u0002\u0629\u0630\u0003\u0002",
    "\u0002\u0002\u062a\u062d\u0005\u0086D\u0002\u062b\u062c\u0007O\u0002",
    "\u0002\u062c\u062e\u0005\u0088E\u0002\u062d\u062b\u0003\u0002\u0002",
    "\u0002\u062d\u062e\u0003\u0002\u0002\u0002\u062e\u0630\u0003\u0002\u0002",
    "\u0002\u062f\u0621\u0003\u0002\u0002\u0002\u062f\u062a\u0003\u0002\u0002",
    "\u0002\u0630\u0085\u0003\u0002\u0002\u0002\u0631\u0632\bD\u0001\u0002",
    "\u0632\u0633\u0007\u00a2\u0002\u0002\u0633\u0634\u0005\u0088E\u0002",
    "\u0634\u063a\u0003\u0002\u0002\u0002\u0635\u0636\f\u0003\u0002\u0002",
    "\u0636\u0637\u0007\u0013\u0002\u0002\u0637\u0639\u0005\u0088E\u0002",
    "\u0638\u0635\u0003\u0002\u0002\u0002\u0639\u063c\u0003\u0002\u0002\u0002",
    "\u063a\u0638\u0003\u0002\u0002\u0002\u063a\u063b\u0003\u0002\u0002\u0002",
    "\u063b\u0087\u0003\u0002\u0002\u0002\u063c\u063a\u0003\u0002\u0002\u0002",
    "\u063d\u063e\u0005\\/\u0002\u063e\u063f\u0007Q\u0002\u0002\u063f\u0641",
    "\u0003\u0002\u0002\u0002\u0640\u063d\u0003\u0002\u0002\u0002\u0640\u0641",
    "\u0003\u0002\u0002\u0002\u0641\u0642\u0003\u0002\u0002\u0002\u0642\u0643",
    "\u0005\u00e2r\u0002\u0643\u0089\u0003\u0002\u0002\u0002\u0644\u0645",
    "\u0005\u014a\u00a6\u0002\u0645\u0646\u0005\u016e\u00b8\u0002\u0646\u0647",
    "\u0005\\/\u0002\u0647\u008b\u0003\u0002\u0002\u0002\u0648\u0649\u0006",
    "G!\u0003\u0649\u064a\u0007\u0015\u0002\u0002\u064a\u0651\u0005\u00e2",
    "r\u0002\u064b\u064c\u0006G\"\u0003\u064c\u064d\u0007\u0018\u0002\u0002",
    "\u064d\u064e\u0005\\/\u0002\u064e\u064f\u0007\u0019\u0002\u0002\u064f",
    "\u0651\u0003\u0002\u0002\u0002\u0650\u0648\u0003\u0002\u0002\u0002\u0650",
    "\u064b\u0003\u0002\u0002\u0002\u0651\u008d\u0003\u0002\u0002\u0002\u0652",
    "\u0653\u0005\u010a\u0086\u0002\u0653\u0654\u0005\u016e\u00b8\u0002\u0654",
    "\u0655\u0005\\/\u0002\u0655\u008f\u0003\u0002\u0002\u0002\u0656\u0658",
    "\u0007\u0007\u0002\u0002\u0657\u0656\u0003\u0002\u0002\u0002\u0658\u065b",
    "\u0003\u0002\u0002\u0002\u0659\u0657\u0003\u0002\u0002\u0002\u0659\u065a",
    "\u0003\u0002\u0002\u0002\u065a\u0091\u0003\u0002\u0002\u0002\u065b\u0659",
    "\u0003\u0002\u0002\u0002\u065c\u065e\u0007\u0007\u0002\u0002\u065d\u065c",
    "\u0003\u0002\u0002\u0002\u065e\u065f\u0003\u0002\u0002\u0002\u065f\u065d",
    "\u0003\u0002\u0002\u0002\u065f\u0660\u0003\u0002\u0002\u0002\u0660\u0093",
    "\u0003\u0002\u0002\u0002\u0661\u0663\t\u0005\u0002\u0002\u0662\u0661",
    "\u0003\u0002\u0002\u0002\u0663\u0666\u0003\u0002\u0002\u0002\u0664\u0662",
    "\u0003\u0002\u0002\u0002\u0664\u0665\u0003\u0002\u0002\u0002\u0665\u0095",
    "\u0003\u0002\u0002\u0002\u0666\u0664\u0003\u0002\u0002\u0002\u0667\u0669",
    "\u0007\u0007\u0002\u0002\u0668\u0667\u0003\u0002\u0002\u0002\u0669\u066a",
    "\u0003\u0002\u0002\u0002\u066a\u0668\u0003\u0002\u0002\u0002\u066a\u066b",
    "\u0003\u0002\u0002\u0002\u066b\u066c\u0003\u0002\u0002\u0002\u066c\u066d",
    "\u0007\u0003\u0002\u0002\u066d\u0097\u0003\u0002\u0002\u0002\u066e\u0670",
    "\u0007\u0007\u0002\u0002\u066f\u066e\u0003\u0002\u0002\u0002\u0670\u0673",
    "\u0003\u0002\u0002\u0002\u0671\u066f\u0003\u0002\u0002\u0002\u0671\u0672",
    "\u0003\u0002\u0002\u0002\u0672\u0674\u0003\u0002\u0002\u0002\u0673\u0671",
    "\u0003\u0002\u0002\u0002\u0674\u0675\u0007\u0004\u0002\u0002\u0675\u0099",
    "\u0003\u0002\u0002\u0002\u0676\u0677\u0007K\u0002\u0002\u0677\u0678",
    "\u0007\u0011\u0002\u0002\u0678\u0679\u0005\u00f4{\u0002\u0679\u009b",
    "\u0003\u0002\u0002\u0002\u067a\u067b\u0007\u0082\u0002\u0002\u067b\u009d",
    "\u0003\u0002\u0002\u0002\u067c\u0680\u0005\u00a4S\u0002\u067d\u0680",
    "\u00058\u001d\u0002\u067e\u0680\u0005\\/\u0002\u067f\u067c\u0003\u0002",
    "\u0002\u0002\u067f\u067d\u0003\u0002\u0002\u0002\u067f\u067e\u0003\u0002",
    "\u0002\u0002\u0680\u009f\u0003\u0002\u0002\u0002\u0681\u0683\u0005\u00a2",
    "R\u0002\u0682\u0681\u0003\u0002\u0002\u0002\u0682\u0683\u0003\u0002",
    "\u0002\u0002\u0683\u0684\u0003\u0002\u0002\u0002\u0684\u0685\u0005\u0090",
    "I\u0002\u0685\u0686\u0007\u0002\u0002\u0003\u0686\u00a1\u0003\u0002",
    "\u0002\u0002\u0687\u068d\u0005\u00a4S\u0002\u0688\u0689\u0005\u0092",
    "J\u0002\u0689\u068a\u0005\u00a4S\u0002\u068a\u068c\u0003\u0002\u0002",
    "\u0002\u068b\u0688\u0003\u0002\u0002\u0002\u068c\u068f\u0003\u0002\u0002",
    "\u0002\u068d\u068b\u0003\u0002\u0002\u0002\u068d\u068e\u0003\u0002\u0002",
    "\u0002\u068e\u00a3\u0003\u0002\u0002\u0002\u068f\u068d\u0003\u0002\u0002",
    "\u0002\u0690\u0691\u0005\u0110\u0089\u0002\u0691\u0692\u0005\u0092J",
    "\u0002\u0692\u0694\u0003\u0002\u0002\u0002\u0693\u0690\u0003\u0002\u0002",
    "\u0002\u0694\u0697\u0003\u0002\u0002\u0002\u0695\u0693\u0003\u0002\u0002",
    "\u0002\u0695\u0696\u0003\u0002\u0002\u0002\u0696\u069d\u0003\u0002\u0002",
    "\u0002\u0697\u0695\u0003\u0002\u0002\u0002\u0698\u0699\u0005\u00a6T",
    "\u0002\u0699\u069a\u0005\u0092J\u0002\u069a\u069c\u0003\u0002\u0002",
    "\u0002\u069b\u0698\u0003\u0002\u0002\u0002\u069c\u069f\u0003\u0002\u0002",
    "\u0002\u069d\u069b\u0003\u0002\u0002\u0002\u069d\u069e\u0003\u0002\u0002",
    "\u0002\u069e\u06a6\u0003\u0002\u0002\u0002\u069f\u069d\u0003\u0002\u0002",
    "\u0002\u06a0\u06a7\u0005\n\u0006\u0002\u06a1\u06a7\u0005\u00d0i\u0002",
    "\u06a2\u06a7\u0005\u00b0Y\u0002\u06a3\u06a7\u0005\u00b2Z\u0002\u06a4",
    "\u06a7\u0005\u00d2j\u0002\u06a5\u06a7\u0005\u010e\u0088\u0002\u06a6",
    "\u06a0\u0003\u0002\u0002\u0002\u06a6\u06a1\u0003\u0002\u0002\u0002\u06a6",
    "\u06a2\u0003\u0002\u0002\u0002\u06a6\u06a3\u0003\u0002\u0002\u0002\u06a6",
    "\u06a4\u0003\u0002\u0002\u0002\u06a6\u06a5\u0003\u0002\u0002\u0002\u06a7",
    "\u00a5\u0003\u0002\u0002\u0002\u06a8\u06b7\u0005\u00a8U\u0002\u06a9",
    "\u06b3\u0007\u0016\u0002\u0002\u06aa\u06b4\u0005\u00aeX\u0002\u06ab",
    "\u06b0\u0005\u00aaV\u0002\u06ac\u06ad\u0007\u0013\u0002\u0002\u06ad",
    "\u06af\u0005\u00aaV\u0002\u06ae\u06ac\u0003\u0002\u0002\u0002\u06af",
    "\u06b2\u0003\u0002\u0002\u0002\u06b0\u06ae\u0003\u0002\u0002\u0002\u06b0",
    "\u06b1\u0003\u0002\u0002\u0002\u06b1\u06b4\u0003\u0002\u0002\u0002\u06b2",
    "\u06b0\u0003\u0002\u0002\u0002\u06b3\u06aa\u0003\u0002\u0002\u0002\u06b3",
    "\u06ab\u0003\u0002\u0002\u0002\u06b4\u06b5\u0003\u0002\u0002\u0002\u06b5",
    "\u06b6\u0007\u0017\u0002\u0002\u06b6\u06b8\u0003\u0002\u0002\u0002\u06b7",
    "\u06a9\u0003\u0002\u0002\u0002\u06b7\u06b8\u0003\u0002\u0002\u0002\u06b8",
    "\u00a7\u0003\u0002\u0002\u0002\u06b9\u06ba\u0007\u00b0\u0002\u0002\u06ba",
    "\u00a9\u0003\u0002\u0002\u0002\u06bb\u06bc\u0005\u00acW\u0002\u06bc",
    "\u06bd\u0007/\u0002\u0002\u06bd\u06be\u0005\u00aeX\u0002\u06be\u00ab",
    "\u0003\u0002\u0002\u0002\u06bf\u06c0\t\u0006\u0002\u0002\u06c0\u00ad",
    "\u0003\u0002\u0002\u0002\u06c1\u06c4\u0005\u012e\u0098\u0002\u06c2\u06c4",
    "\u0005\u00c6d\u0002\u06c3\u06c1\u0003\u0002\u0002\u0002\u06c3\u06c2",
    "\u0003\u0002\u0002\u0002\u06c4\u00af\u0003\u0002\u0002\u0002\u06c5\u06c6",
    "\u0005\"\u0012\u0002\u06c6\u00b1\u0003\u0002\u0002\u0002\u06c7\u06ca",
    "\u0005\u0002\u0002\u0002\u06c8\u06ca\u0005\u0004\u0003\u0002\u06c9\u06c7",
    "\u0003\u0002\u0002\u0002\u06c9\u06c8\u0003\u0002\u0002\u0002\u06ca\u00b3",
    "\u0003\u0002\u0002\u0002\u06cb\u06d1\u0005\u0006\u0004\u0002\u06cc\u06cd",
    "\u0005\u0092J\u0002\u06cd\u06ce\u0005\u0006\u0004\u0002\u06ce\u06d0",
    "\u0003\u0002\u0002\u0002\u06cf\u06cc\u0003\u0002\u0002\u0002\u06d0\u06d3",
    "\u0003\u0002\u0002\u0002\u06d1\u06cf\u0003\u0002\u0002\u0002\u06d1\u06d2",
    "\u0003\u0002\u0002\u0002\u06d2\u00b5\u0003\u0002\u0002\u0002\u06d3\u06d1",
    "\u0003\u0002\u0002\u0002\u06d4\u06da\u0005\b\u0005\u0002\u06d5\u06d6",
    "\u0005\u0092J\u0002\u06d6\u06d7\u0005\b\u0005\u0002\u06d7\u06d9\u0003",
    "\u0002\u0002\u0002\u06d8\u06d5\u0003\u0002\u0002\u0002\u06d9\u06dc\u0003",
    "\u0002\u0002\u0002\u06da\u06d8\u0003\u0002\u0002\u0002\u06da\u06db\u0003",
    "\u0002\u0002\u0002\u06db\u00b7\u0003\u0002\u0002\u0002\u06dc\u06da\u0003",
    "\u0002\u0002\u0002\u06dd\u06e2\u0005\u00e8u\u0002\u06de\u06df\u0007",
    "\u0013\u0002\u0002\u06df\u06e1\u0005\u00e8u\u0002\u06e0\u06de\u0003",
    "\u0002\u0002\u0002\u06e1\u06e4\u0003\u0002\u0002\u0002\u06e2\u06e0\u0003",
    "\u0002\u0002\u0002\u06e2\u06e3\u0003\u0002\u0002\u0002\u06e3\u00b9\u0003",
    "\u0002\u0002\u0002\u06e4\u06e2\u0003\u0002\u0002\u0002\u06e5\u06e6\u0007",
    "v\u0002\u0002\u06e6\u06f0\u0005\u00bc_\u0002\u06e7\u06e8\u0007v\u0002",
    "\u0002\u06e8\u06f0\u0005\u00be`\u0002\u06e9\u06ea\u0007v\u0002\u0002",
    "\u06ea\u06f0\u0005\u00c2b\u0002\u06eb\u06ec\u0007z\u0002\u0002\u06ec",
    "\u06f0\u0007\u00b1\u0002\u0002\u06ed\u06ee\u0007z\u0002\u0002\u06ee",
    "\u06f0\u0005\\/\u0002\u06ef\u06e5\u0003\u0002\u0002\u0002\u06ef\u06e7",
    "\u0003\u0002\u0002\u0002\u06ef\u06e9\u0003\u0002\u0002\u0002\u06ef\u06eb",
    "\u0003\u0002\u0002\u0002\u06ef\u06ed\u0003\u0002\u0002\u0002\u06f0\u00bb",
    "\u0003\u0002\u0002\u0002\u06f1\u06f3\u0007~\u0002\u0002\u06f2\u06f1",
    "\u0003\u0002\u0002\u0002\u06f2\u06f3\u0003\u0002\u0002\u0002\u06f3\u06f4",
    "\u0003\u0002\u0002\u0002\u06f4\u06f6\u0007\u0018\u0002\u0002\u06f5\u06f7",
    "\u0005\u00c0a\u0002\u06f6\u06f5\u0003\u0002\u0002\u0002\u06f6\u06f7",
    "\u0003\u0002\u0002\u0002\u06f7\u06f8\u0003\u0002\u0002\u0002\u06f8\u06f9",
    "\u0007\u0019\u0002\u0002\u06f9\u00bd\u0003\u0002\u0002\u0002\u06fa\u06fc",
    "\u0007~\u0002\u0002\u06fb\u06fa\u0003\u0002\u0002\u0002\u06fb\u06fc",
    "\u0003\u0002\u0002\u0002\u06fc\u06fd\u0003\u0002\u0002\u0002\u06fd\u06ff",
    "\u0007+\u0002\u0002\u06fe\u0700\u0005\u00c0a\u0002\u06ff\u06fe\u0003",
    "\u0002\u0002\u0002\u06ff\u0700\u0003\u0002\u0002\u0002\u0700\u0701\u0003",
    "\u0002\u0002\u0002\u0701\u0702\u0007)\u0002\u0002\u0702\u00bf\u0003",
    "\u0002\u0002\u0002\u0703\u0708\u0005\\/\u0002\u0704\u0705\u0007\u0013",
    "\u0002\u0002\u0705\u0707\u0005\\/\u0002\u0706\u0704\u0003\u0002\u0002",
    "\u0002\u0707\u070a\u0003\u0002\u0002\u0002\u0708\u0706\u0003\u0002\u0002",
    "\u0002\u0708\u0709\u0003\u0002\u0002\u0002\u0709\u00c1\u0003\u0002\u0002",
    "\u0002\u070a\u0708\u0003\u0002\u0002\u0002\u070b\u070c\u0007\u0018\u0002",
    "\u0002\u070c\u070d\u0005\\/\u0002\u070d\u070e\u0007\u0014\u0002\u0002",
    "\u070e\u070f\u0005\\/\u0002\u070f\u0710\u0007\u0019\u0002\u0002\u0710",
    "\u00c3\u0003\u0002\u0002\u0002\u0711\u0712\bc\u0001\u0002\u0712\u071e",
    "\u0005\u00c6d\u0002\u0713\u0714\u0007I\u0002\u0002\u0714\u0715\u0007",
    "+\u0002\u0002\u0715\u0716\u0005\u00c4c\u0002\u0716\u0717\u0007)\u0002",
    "\u0002\u0717\u071e\u0003\u0002\u0002\u0002\u0718\u0719\u0007H\u0002",
    "\u0002\u0719\u071a\u0007+\u0002\u0002\u071a\u071b\u0005\u00c4c\u0002",
    "\u071b\u071c\u0007)\u0002\u0002\u071c\u071e\u0003\u0002\u0002\u0002",
    "\u071d\u0711\u0003\u0002\u0002\u0002\u071d\u0713\u0003\u0002\u0002\u0002",
    "\u071d\u0718\u0003\u0002\u0002\u0002\u071e\u0728\u0003\u0002\u0002\u0002",
    "\u071f\u0720\f\u0007\u0002\u0002\u0720\u0727\u0007-\u0002\u0002\u0721",
    "\u0722\f\u0006\u0002\u0002\u0722\u0723\u0007\u0018\u0002\u0002\u0723",
    "\u0727\u0007\u0019\u0002\u0002\u0724\u0725\f\u0005\u0002\u0002\u0725",
    "\u0727\u0007.\u0002\u0002\u0726\u071f\u0003\u0002\u0002\u0002\u0726",
    "\u0721\u0003\u0002\u0002\u0002\u0726\u0724\u0003\u0002\u0002\u0002\u0727",
    "\u072a\u0003\u0002\u0002\u0002\u0728\u0726\u0003\u0002\u0002\u0002\u0728",
    "\u0729\u0003\u0002\u0002\u0002\u0729\u00c5\u0003\u0002\u0002\u0002\u072a",
    "\u0728\u0003\u0002\u0002\u0002\u072b\u072e\u0005\u00c8e\u0002\u072c",
    "\u072e\u0005\u00caf\u0002\u072d\u072b\u0003\u0002\u0002\u0002\u072d",
    "\u072c\u0003\u0002\u0002\u0002\u072e\u00c7\u0003\u0002\u0002\u0002\u072f",
    "\u0741\u00077\u0002\u0002\u0730\u0741\u00078\u0002\u0002\u0731\u0741",
    "\u00079\u0002\u0002\u0732\u0741\u0007:\u0002\u0002\u0733\u0741\u0007",
    "F\u0002\u0002\u0734\u0741\u0007;\u0002\u0002\u0735\u0741\u0007<\u0002",
    "\u0002\u0736\u0741\u0007D\u0002\u0002\u0737\u0741\u0007=\u0002\u0002",
    "\u0738\u0741\u0007?\u0002\u0002\u0739\u0741\u0007>\u0002\u0002\u073a",
    "\u0741\u0007@\u0002\u0002\u073b\u0741\u0007A\u0002\u0002\u073c\u0741",
    "\u0007C\u0002\u0002\u073d\u0741\u0007E\u0002\u0002\u073e\u0741\u0007",
    "G\u0002\u0002\u073f\u0741\u0007J\u0002\u0002\u0740\u072f\u0003\u0002",
    "\u0002\u0002\u0740\u0730\u0003\u0002\u0002\u0002\u0740\u0731\u0003\u0002",
    "\u0002\u0002\u0740\u0732\u0003\u0002\u0002\u0002\u0740\u0733\u0003\u0002",
    "\u0002\u0002\u0740\u0734\u0003\u0002\u0002\u0002\u0740\u0735\u0003\u0002",
    "\u0002\u0002\u0740\u0736\u0003\u0002\u0002\u0002\u0740\u0737\u0003\u0002",
    "\u0002\u0002\u0740\u0738\u0003\u0002\u0002\u0002\u0740\u0739\u0003\u0002",
    "\u0002\u0002\u0740\u073a\u0003\u0002\u0002\u0002\u0740\u073b\u0003\u0002",
    "\u0002\u0002\u0740\u073c\u0003\u0002\u0002\u0002\u0740\u073d\u0003\u0002",
    "\u0002\u0002\u0740\u073e\u0003\u0002\u0002\u0002\u0740\u073f\u0003\u0002",
    "\u0002\u0002\u0741\u00c9\u0003\u0002\u0002\u0002\u0742\u0743\u0007\u00ac",
    "\u0002\u0002\u0743\u00cb\u0003\u0002\u0002\u0002\u0744\u0746\u0007~",
    "\u0002\u0002\u0745\u0744\u0003\u0002\u0002\u0002\u0745\u0746\u0003\u0002",
    "\u0002\u0002\u0746\u0747\u0003\u0002\u0002\u0002\u0747\u0748\u0005\u00ca",
    "f\u0002\u0748\u00cd\u0003\u0002\u0002\u0002\u0749\u074a\u0007C\u0002",
    "\u0002\u074a\u00cf\u0003\u0002\u0002\u0002\u074b\u074f\u0005\u0010\t",
    "\u0002\u074c\u074f\u0005 \u0011\u0002\u074d\u074f\u0005\u0012\n\u0002",
    "\u074e\u074b\u0003\u0002\u0002\u0002\u074e\u074c\u0003\u0002\u0002\u0002",
    "\u074e\u074d\u0003\u0002\u0002\u0002\u074f\u00d1\u0003\u0002\u0002\u0002",
    "\u0750\u0753\u0005\f\u0007\u0002\u0751\u0753\u0005\u000e\b\u0002\u0752",
    "\u0750\u0003\u0002\u0002\u0002\u0752\u0751\u0003\u0002\u0002\u0002\u0753",
    "\u00d3\u0003\u0002\u0002\u0002\u0754\u0759\u0005\u00e6t\u0002\u0755",
    "\u0756\u0007\u0013\u0002\u0002\u0756\u0758\u0005\u00e6t\u0002\u0757",
    "\u0755\u0003\u0002\u0002\u0002\u0758\u075b\u0003\u0002\u0002\u0002\u0759",
    "\u0757\u0003\u0002\u0002\u0002\u0759\u075a\u0003\u0002\u0002\u0002\u075a",
    "\u00d5\u0003\u0002\u0002\u0002\u075b\u0759\u0003\u0002\u0002\u0002\u075c",
    "\u075f\u0005\u00e2r\u0002\u075d\u075f\u0005\u00e6t\u0002\u075e\u075c",
    "\u0003\u0002\u0002\u0002\u075e\u075d\u0003\u0002\u0002\u0002\u075f\u00d7",
    "\u0003\u0002\u0002\u0002\u0760\u0763\u0005\u00dep\u0002\u0761\u0763",
    "\u0005\u0162\u00b2\u0002\u0762\u0760\u0003\u0002\u0002\u0002\u0762\u0761",
    "\u0003\u0002\u0002\u0002\u0763\u00d9\u0003\u0002\u0002\u0002\u0764\u0765",
    "\u0006n&\u0003\u0765\u0766\u0007#\u0002\u0002\u0766\u0767\u0005\u00dc",
    "o\u0002\u0767\u00db\u0003\u0002\u0002\u0002\u0768\u0769\u0006o\'\u0003",
    "\u0769\u076a\u0005\u00d8m\u0002\u076a\u00dd\u0003\u0002\u0002\u0002",
    "\u076b\u076f\u0005\u00e2r\u0002\u076c\u076f\u0005\u00e6t\u0002\u076d",
    "\u076f\u0005\u00e8u\u0002\u076e\u076b\u0003\u0002\u0002\u0002\u076e",
    "\u076c\u0003\u0002\u0002\u0002\u076e\u076d\u0003\u0002\u0002\u0002\u076f",
    "\u00df\u0003\u0002\u0002\u0002\u0770\u0771\t\u0007\u0002\u0002\u0771",
    "\u00e1\u0003\u0002\u0002\u0002\u0772\u0773\u0007\u00ad\u0002\u0002\u0773",
    "\u00e3\u0003\u0002\u0002\u0002\u0774\u0775\t\b\u0002\u0002\u0775\u00e5",
    "\u0003\u0002\u0002\u0002\u0776\u0777\u0007\u00ac\u0002\u0002\u0777\u00e7",
    "\u0003\u0002\u0002\u0002\u0778\u0779\u0007\u00ab\u0002\u0002\u0779\u00e9",
    "\u0003\u0002\u0002\u0002\u077a\u077f\u0005\u00ecw\u0002\u077b\u077c",
    "\u0007\u0013\u0002\u0002\u077c\u077e\u0005\u00ecw\u0002\u077d\u077b",
    "\u0003\u0002\u0002\u0002\u077e\u0781\u0003\u0002\u0002\u0002\u077f\u077d",
    "\u0003\u0002\u0002\u0002\u077f\u0780\u0003\u0002\u0002\u0002\u0780\u00eb",
    "\u0003\u0002\u0002\u0002\u0781\u077f\u0003\u0002\u0002\u0002\u0782\u0788",
    "\u0005\u00f2z\u0002\u0783\u0785\u0007~\u0002\u0002\u0784\u0783\u0003",
    "\u0002\u0002\u0002\u0784\u0785\u0003\u0002\u0002\u0002\u0785\u0786\u0003",
    "\u0002\u0002\u0002\u0786\u0788\u0005\u00eex\u0002\u0787\u0782\u0003",
    "\u0002\u0002\u0002\u0787\u0784\u0003\u0002\u0002\u0002\u0788\u00ed\u0003",
    "\u0002\u0002\u0002\u0789\u078c\u0005\u00f0y\u0002\u078a\u078c\u0005",
    "6\u001c\u0002\u078b\u0789\u0003\u0002\u0002\u0002\u078b\u078a\u0003",
    "\u0002\u0002\u0002\u078c\u00ef\u0003\u0002\u0002\u0002\u078d\u0790\u0005",
    "\u00e2r\u0002\u078e\u078f\u0007/\u0002\u0002\u078f\u0791\u0005\u012e",
    "\u0098\u0002\u0790\u078e\u0003\u0002\u0002\u0002\u0790\u0791\u0003\u0002",
    "\u0002\u0002\u0791\u00f1\u0003\u0002\u0002\u0002\u0792\u0793\u0005\u00ce",
    "h\u0002\u0793\u0794\u0005\u00e2r\u0002\u0794\u00f3\u0003\u0002\u0002",
    "\u0002\u0795\u0798\u0005\u00c4c\u0002\u0796\u0798\u0005\u00f6|\u0002",
    "\u0797\u0795\u0003\u0002\u0002\u0002\u0797\u0796\u0003\u0002\u0002\u0002",
    "\u0798\u00f5\u0003\u0002\u0002\u0002\u0799\u079a\b|\u0001\u0002\u079a",
    "\u079b\u0007P\u0002\u0002\u079b\u07a4\u0003\u0002\u0002\u0002\u079c",
    "\u079d\f\u0004\u0002\u0002\u079d\u079e\u0007\u0018\u0002\u0002\u079e",
    "\u07a3\u0007\u0019\u0002\u0002\u079f\u07a0\f\u0003\u0002\u0002\u07a0",
    "\u07a1\u0007\u001a\u0002\u0002\u07a1\u07a3\u0007\u001b\u0002\u0002\u07a2",
    "\u079c\u0003\u0002\u0002\u0002\u07a2\u079f\u0003\u0002\u0002\u0002\u07a3",
    "\u07a6\u0003\u0002\u0002\u0002\u07a4\u07a2\u0003\u0002\u0002\u0002\u07a4",
    "\u07a5\u0003\u0002\u0002\u0002\u07a5\u00f7\u0003\u0002\u0002\u0002\u07a6",
    "\u07a4\u0003\u0002\u0002\u0002\u07a7\u07ad\u0005\u00fa~\u0002\u07a8",
    "\u07a9\u0005\u0092J\u0002\u07a9\u07aa\u0005\u00fa~\u0002\u07aa\u07ac",
    "\u0003\u0002\u0002\u0002\u07ab\u07a8\u0003\u0002\u0002\u0002\u07ac\u07af",
    "\u0003\u0002\u0002\u0002\u07ad\u07ab\u0003\u0002\u0002\u0002\u07ad\u07ae",
    "\u0003\u0002\u0002\u0002\u07ae\u00f9\u0003\u0002\u0002\u0002\u07af\u07ad",
    "\u0003\u0002\u0002\u0002\u07b0\u07b1\u0005\u0110\u0089\u0002\u07b1\u07b2",
    "\u0005\u0092J\u0002\u07b2\u07b4\u0003\u0002\u0002\u0002\u07b3\u07b0",
    "\u0003\u0002\u0002\u0002\u07b4\u07b7\u0003\u0002\u0002\u0002\u07b5\u07b3",
    "\u0003\u0002\u0002\u0002\u07b5\u07b6\u0003\u0002\u0002\u0002\u07b6\u07bd",
    "\u0003\u0002\u0002\u0002\u07b7\u07b5\u0003\u0002\u0002\u0002\u07b8\u07b9",
    "\u0005\u00a6T\u0002\u07b9\u07ba\u0005\u0092J\u0002\u07ba\u07bc\u0003",
    "\u0002\u0002\u0002\u07bb\u07b8\u0003\u0002\u0002\u0002\u07bc\u07bf\u0003",
    "\u0002\u0002\u0002\u07bd\u07bb\u0003\u0002\u0002\u0002\u07bd\u07be\u0003",
    "\u0002\u0002\u0002\u07be\u07c5\u0003\u0002\u0002\u0002\u07bf\u07bd\u0003",
    "\u0002\u0002\u0002\u07c0\u07c6\u0005\u0018\r\u0002\u07c1\u07c6\u0005",
    "\u001c\u000f\u0002\u07c2\u07c6\u0005,\u0017\u0002\u07c3\u07c6\u0005",
    "*\u0016\u0002\u07c4\u07c6\u0005\u0016\f\u0002\u07c5\u07c0\u0003\u0002",
    "\u0002\u0002\u07c5\u07c1\u0003\u0002\u0002\u0002\u07c5\u07c2\u0003\u0002",
    "\u0002\u0002\u07c5\u07c3\u0003\u0002\u0002\u0002\u07c5\u07c4\u0003\u0002",
    "\u0002\u0002\u07c6\u00fb\u0003\u0002\u0002\u0002\u07c7\u07cd\u0005\u00fe",
    "\u0080\u0002\u07c8\u07c9\u0005\u0092J\u0002\u07c9\u07ca\u0005\u00fe",
    "\u0080\u0002\u07ca\u07cc\u0003\u0002\u0002\u0002\u07cb\u07c8\u0003\u0002",
    "\u0002\u0002\u07cc\u07cf\u0003\u0002\u0002\u0002\u07cd\u07cb\u0003\u0002",
    "\u0002\u0002\u07cd\u07ce\u0003\u0002\u0002\u0002\u07ce\u00fd\u0003\u0002",
    "\u0002\u0002\u07cf\u07cd\u0003\u0002\u0002\u0002\u07d0\u07d1\u0005\u0110",
    "\u0089\u0002\u07d1\u07d2\u0005\u0092J\u0002\u07d2\u07d4\u0003\u0002",
    "\u0002\u0002\u07d3\u07d0\u0003\u0002\u0002\u0002\u07d4\u07d7\u0003\u0002",
    "\u0002\u0002\u07d5\u07d3\u0003\u0002\u0002\u0002\u07d5\u07d6\u0003\u0002",
    "\u0002\u0002\u07d6\u07dd\u0003\u0002\u0002\u0002\u07d7\u07d5\u0003\u0002",
    "\u0002\u0002\u07d8\u07d9\u0005\u00a6T\u0002\u07d9\u07da\u0005\u0092",
    "J\u0002\u07da\u07dc\u0003\u0002\u0002\u0002\u07db\u07d8\u0003\u0002",
    "\u0002\u0002\u07dc\u07df\u0003\u0002\u0002\u0002\u07dd\u07db\u0003\u0002",
    "\u0002\u0002\u07dd\u07de\u0003\u0002\u0002\u0002\u07de\u07e3\u0003\u0002",
    "\u0002\u0002\u07df\u07dd\u0003\u0002\u0002\u0002\u07e0\u07e4\u0005\u001e",
    "\u0010\u0002\u07e1\u07e4\u0005\u001a\u000e\u0002\u07e2\u07e4\u0005.",
    "\u0018\u0002\u07e3\u07e0\u0003\u0002\u0002\u0002\u07e3\u07e1\u0003\u0002",
    "\u0002\u0002\u07e3\u07e2\u0003\u0002\u0002\u0002\u07e4\u00ff\u0003\u0002",
    "\u0002\u0002\u07e5\u07e6\u0007\u000b\u0002\u0002\u07e6\u07f0\u0005\u01c2",
    "\u00e2\u0002\u07e7\u07e8\u0007\f\u0002\u0002\u07e8\u07f0\u0005\u01dc",
    "\u00ef\u0002\u07e9\u07ea\u0007\r\u0002\u0002\u07ea\u07f0\u0005\u0102",
    "\u0082\u0002\u07eb\u07ec\u0007\u000e\u0002\u0002\u07ec\u07f0\u0005\u0102",
    "\u0082\u0002\u07ed\u07ee\u0007\u000f\u0002\u0002\u07ee\u07f0\u0005\u0106",
    "\u0084\u0002\u07ef\u07e5\u0003\u0002\u0002\u0002\u07ef\u07e7\u0003\u0002",
    "\u0002\u0002\u07ef\u07e9\u0003\u0002\u0002\u0002\u07ef\u07eb\u0003\u0002",
    "\u0002\u0002\u07ef\u07ed\u0003\u0002\u0002\u0002\u07f0\u0101\u0003\u0002",
    "\u0002\u0002\u07f1\u07f3\u0005\u00dep\u0002\u07f2\u07f4\u0005\u0104",
    "\u0083\u0002\u07f3\u07f2\u0003\u0002\u0002\u0002\u07f3\u07f4\u0003\u0002",
    "\u0002\u0002\u07f4\u0103\u0003\u0002\u0002\u0002\u07f5\u07f6\u0007r",
    "\u0002\u0002\u07f6\u07f7\u0005\u0168\u00b5\u0002\u07f7\u07f8\u0007\u0011",
    "\u0002\u0002\u07f8\u07fd\u0005\u01aa\u00d6\u0002\u07f9\u07fa\u0007\u0015",
    "\u0002\u0002\u07fa\u07fc\u0005\u01aa\u00d6\u0002\u07fb\u07f9\u0003\u0002",
    "\u0002\u0002\u07fc\u07ff\u0003\u0002\u0002\u0002\u07fd\u07fb\u0003\u0002",
    "\u0002\u0002\u07fd\u07fe\u0003\u0002\u0002\u0002\u07fe\u0105\u0003\u0002",
    "\u0002\u0002\u07ff\u07fd\u0003\u0002\u0002\u0002\u0800\u0805\u0005\u0190",
    "\u00c9\u0002\u0801\u0802\u0007\u0015\u0002\u0002\u0802\u0804\u0005\u0190",
    "\u00c9\u0002\u0803\u0801\u0003\u0002\u0002\u0002\u0804\u0807\u0003\u0002",
    "\u0002\u0002\u0805\u0803\u0003\u0002\u0002\u0002\u0805\u0806\u0003\u0002",
    "\u0002\u0002\u0806\u0809\u0003\u0002\u0002\u0002\u0807\u0805\u0003\u0002",
    "\u0002\u0002\u0808\u080a\u0005\u0108\u0085\u0002\u0809\u0808\u0003\u0002",
    "\u0002\u0002\u0809\u080a\u0003\u0002\u0002\u0002\u080a\u0107\u0003\u0002",
    "\u0002\u0002\u080b\u080c\u0007r\u0002\u0002\u080c\u080d\u0005\u0168",
    "\u00b5\u0002\u080d\u080f\u0007\u0011\u0002\u0002\u080e\u0810\u0007%",
    "\u0002\u0002\u080f\u080e\u0003\u0002\u0002\u0002\u080f\u0810\u0003\u0002",
    "\u0002\u0002\u0810\u0811\u0003\u0002\u0002\u0002\u0811\u0816\u0005\u0190",
    "\u00c9\u0002\u0812\u0813\u0007%\u0002\u0002\u0813\u0815\u0005\u0190",
    "\u00c9\u0002\u0814\u0812\u0003\u0002\u0002\u0002\u0815\u0818\u0003\u0002",
    "\u0002\u0002\u0816\u0814\u0003\u0002\u0002\u0002\u0816\u0817\u0003\u0002",
    "\u0002\u0002\u0817\u081b\u0003\u0002\u0002\u0002\u0818\u0816\u0003\u0002",
    "\u0002\u0002\u0819\u081a\u0007\u0015\u0002\u0002\u081a\u081c\u0005\u0190",
    "\u00c9\u0002\u081b\u0819\u0003\u0002\u0002\u0002\u081b\u081c\u0003\u0002",
    "\u0002\u0002\u081c\u0109\u0003\u0002\u0002\u0002\u081d\u0822\u0005\u00e2",
    "r\u0002\u081e\u081f\u0007\u0013\u0002\u0002\u081f\u0821\u0005\u00e2",
    "r\u0002\u0820\u081e\u0003\u0002\u0002\u0002\u0821\u0824\u0003\u0002",
    "\u0002\u0002\u0822\u0820\u0003\u0002\u0002\u0002\u0822\u0823\u0003\u0002",
    "\u0002\u0002\u0823\u010b\u0003\u0002\u0002\u0002\u0824\u0822\u0003\u0002",
    "\u0002\u0002\u0825\u082a\u0005\u00e4s\u0002\u0826\u0827\u0007\u0013",
    "\u0002\u0002\u0827\u0829\u0005\u00e4s\u0002\u0828\u0826\u0003\u0002",
    "\u0002\u0002\u0829\u082c\u0003\u0002\u0002\u0002\u082a\u0828\u0003\u0002",
    "\u0002\u0002\u082a\u082b\u0003\u0002\u0002\u0002\u082b\u010d\u0003\u0002",
    "\u0002\u0002\u082c\u082a\u0003\u0002\u0002\u0002\u082d\u0832\u0005*",
    "\u0016\u0002\u082e\u0832\u0005,\u0017\u0002\u082f\u0832\u0005.\u0018",
    "\u0002\u0830\u0832\u00050\u0019\u0002\u0831\u082d\u0003\u0002\u0002",
    "\u0002\u0831\u082e\u0003\u0002\u0002\u0002\u0831\u082f\u0003\u0002\u0002",
    "\u0002\u0831\u0830\u0003\u0002\u0002\u0002\u0832\u010f\u0003\u0002\u0002",
    "\u0002\u0833\u0834\u0007\n\u0002\u0002\u0834\u0111\u0003\u0002\u0002",
    "\u0002\u0835\u083b\u0005\u0114\u008b\u0002\u0836\u0837\u0005\u0092J",
    "\u0002\u0837\u0838\u0005\u0114\u008b\u0002\u0838\u083a\u0003\u0002\u0002",
    "\u0002\u0839\u0836\u0003\u0002\u0002\u0002\u083a\u083d\u0003\u0002\u0002",
    "\u0002\u083b\u0839\u0003\u0002\u0002\u0002\u083b\u083c\u0003\u0002\u0002",
    "\u0002\u083c\u0113\u0003\u0002\u0002\u0002\u083d\u083b\u0003\u0002\u0002",
    "\u0002\u083e\u083f\u0007\u000b\u0002\u0002\u083f\u0849\u0005\u01ac\u00d7",
    "\u0002\u0840\u0841\u0007\f\u0002\u0002\u0841\u0849\u0005\u01c8\u00e5",
    "\u0002\u0842\u0843\u0007\r\u0002\u0002\u0843\u0849\u0005\u0116\u008c",
    "\u0002\u0844\u0845\u0007\u000e\u0002\u0002\u0845\u0849\u0005\u0116\u008c",
    "\u0002\u0846\u0847\u0007\u000f\u0002\u0002\u0847\u0849\u0005\u0118\u008d",
    "\u0002\u0848\u083e\u0003\u0002\u0002\u0002\u0848\u0840\u0003\u0002\u0002",
    "\u0002\u0848\u0842\u0003\u0002\u0002\u0002\u0848\u0844\u0003\u0002\u0002",
    "\u0002\u0848\u0846\u0003\u0002\u0002\u0002\u0849\u0115\u0003\u0002\u0002",
    "\u0002\u084a\u084c\u0005\u0192\u00ca\u0002\u084b\u084d\u0007\u0012\u0002",
    "\u0002\u084c\u084b\u0003\u0002\u0002\u0002\u084c\u084d\u0003\u0002\u0002",
    "\u0002\u084d\u084f\u0003\u0002\u0002\u0002\u084e\u0850\u0005\u0104\u0083",
    "\u0002\u084f\u084e\u0003\u0002\u0002\u0002\u084f\u0850\u0003\u0002\u0002",
    "\u0002\u0850\u0117\u0003\u0002\u0002\u0002\u0851\u0853\u0005\u0178\u00bd",
    "\u0002\u0852\u0854\u0007\u0012\u0002\u0002\u0853\u0852\u0003\u0002\u0002",
    "\u0002\u0853\u0854\u0003\u0002\u0002\u0002\u0854\u0856\u0003\u0002\u0002",
    "\u0002\u0855\u0857\u0005\u0108\u0085\u0002\u0856\u0855\u0003\u0002\u0002",
    "\u0002\u0856\u0857\u0003\u0002\u0002\u0002\u0857\u0119\u0003\u0002\u0002",
    "\u0002\u0858\u085e\u00058\u001d\u0002\u0859\u085a\u0005\u0092J\u0002",
    "\u085a\u085b\u00058\u001d\u0002\u085b\u085d\u0003\u0002\u0002\u0002",
    "\u085c\u0859\u0003\u0002\u0002\u0002\u085d\u0860\u0003\u0002\u0002\u0002",
    "\u085e\u085c\u0003\u0002\u0002\u0002\u085e\u085f\u0003\u0002\u0002\u0002",
    "\u085f\u011b\u0003\u0002\u0002\u0002\u0860\u085e\u0003\u0002\u0002\u0002",
    "\u0861\u0867\u00052\u001a\u0002\u0862\u0863\u0005\u0092J\u0002\u0863",
    "\u0864\u00052\u001a\u0002\u0864\u0866\u0003\u0002\u0002\u0002\u0865",
    "\u0862\u0003\u0002\u0002\u0002\u0866\u0869\u0003\u0002\u0002\u0002\u0867",
    "\u0865\u0003\u0002\u0002\u0002\u0867\u0868\u0003\u0002\u0002\u0002\u0868",
    "\u011d\u0003\u0002\u0002\u0002\u0869\u0867\u0003\u0002\u0002\u0002\u086a",
    "\u0870\u0005F$\u0002\u086b\u086c\u0005\u0092J\u0002\u086c\u086d\u0005",
    "F$\u0002\u086d\u086f\u0003\u0002\u0002\u0002\u086e\u086b\u0003\u0002",
    "\u0002\u0002\u086f\u0872\u0003\u0002\u0002\u0002\u0870\u086e\u0003\u0002",
    "\u0002\u0002\u0870\u0871\u0003\u0002\u0002\u0002\u0871\u011f\u0003\u0002",
    "\u0002\u0002\u0872\u0870\u0003\u0002\u0002\u0002\u0873\u0879\u0005V",
    ",\u0002\u0874\u0875\u0005\u0092J\u0002\u0875\u0876\u0005V,\u0002\u0876",
    "\u0878\u0003\u0002\u0002\u0002\u0877\u0874\u0003\u0002\u0002\u0002\u0878",
    "\u087b\u0003\u0002\u0002\u0002\u0879\u0877\u0003\u0002\u0002\u0002\u0879",
    "\u087a\u0003\u0002\u0002\u0002\u087a\u0121\u0003\u0002\u0002\u0002\u087b",
    "\u0879\u0003\u0002\u0002\u0002\u087c\u087d\u0007\u0018\u0002\u0002\u087d",
    "\u087e\u0005\u0124\u0093\u0002\u087e\u087f\u0007\u0014\u0002\u0002\u087f",
    "\u0880\u0005\u0124\u0093\u0002\u0880\u0881\u0007\u0019\u0002\u0002\u0881",
    "\u088b\u0003\u0002\u0002\u0002\u0882\u0883\u0007\u0018\u0002\u0002\u0883",
    "\u0884\u0005\u0126\u0094\u0002\u0884\u0885\u0007\u0019\u0002\u0002\u0885",
    "\u088b\u0003\u0002\u0002\u0002\u0886\u0887\u0007+\u0002\u0002\u0887",
    "\u0888\u0005\u0126\u0094\u0002\u0888\u0889\u0007)\u0002\u0002\u0889",
    "\u088b\u0003\u0002\u0002\u0002\u088a\u087c\u0003\u0002\u0002\u0002\u088a",
    "\u0882\u0003\u0002\u0002\u0002\u088a\u0886\u0003\u0002\u0002\u0002\u088b",
    "\u0123\u0003\u0002\u0002\u0002\u088c\u08a4\u0007\u00a9\u0002\u0002\u088d",
    "\u08a4\u0007\u00aa\u0002\u0002\u088e\u0890\u0007#\u0002\u0002\u088f",
    "\u088e\u0003\u0002\u0002\u0002\u088f\u0890\u0003\u0002\u0002\u0002\u0890",
    "\u0891\u0003\u0002\u0002\u0002\u0891\u08a4\u0007\u00b3\u0002\u0002\u0892",
    "\u08a4\u0007\u00b4\u0002\u0002\u0893\u08a4\u0007\u00a8\u0002\u0002\u0894",
    "\u08a4\u0007\u00b8\u0002\u0002\u0895\u08a4\u0007\u00b7\u0002\u0002\u0896",
    "\u08a4\u0007\u00b1\u0002\u0002\u0897\u0899\u0007#\u0002\u0002\u0898",
    "\u0897\u0003\u0002\u0002\u0002\u0898\u0899\u0003\u0002\u0002\u0002\u0899",
    "\u089a\u0003\u0002\u0002\u0002\u089a\u08a4\u0007\u00b5\u0002\u0002\u089b",
    "\u08a4\u0007\u00b6\u0002\u0002\u089c\u08a4\u0007\u00a7\u0002\u0002\u089d",
    "\u08a4\u0007\u00b9\u0002\u0002\u089e\u08a4\u0007\u00ba\u0002\u0002\u089f",
    "\u08a4\u0007\u00b2\u0002\u0002\u08a0\u08a4\u0005\u00e8u\u0002\u08a1",
    "\u08a4\u0005\u009aN\u0002\u08a2\u08a4\u0005\u009cO\u0002\u08a3\u088c",
    "\u0003\u0002\u0002\u0002\u08a3\u088d\u0003\u0002\u0002\u0002\u08a3\u088f",
    "\u0003\u0002\u0002\u0002\u08a3\u0892\u0003\u0002\u0002\u0002\u08a3\u0893",
    "\u0003\u0002\u0002\u0002\u08a3\u0894\u0003\u0002\u0002\u0002\u08a3\u0895",
    "\u0003\u0002\u0002\u0002\u08a3\u0896\u0003\u0002\u0002\u0002\u08a3\u0898",
    "\u0003\u0002\u0002\u0002\u08a3\u089b\u0003\u0002\u0002\u0002\u08a3\u089c",
    "\u0003\u0002\u0002\u0002\u08a3\u089d\u0003\u0002\u0002\u0002\u08a3\u089e",
    "\u0003\u0002\u0002\u0002\u08a3\u089f\u0003\u0002\u0002\u0002\u08a3\u08a0",
    "\u0003\u0002\u0002\u0002\u08a3\u08a1\u0003\u0002\u0002\u0002\u08a3\u08a2",
    "\u0003\u0002\u0002\u0002\u08a4\u0125\u0003\u0002\u0002\u0002\u08a5\u08aa",
    "\u0005\u0124\u0093\u0002\u08a6\u08a7\u0007\u0013\u0002\u0002\u08a7\u08a9",
    "\u0005\u0124\u0093\u0002\u08a8\u08a6\u0003\u0002\u0002\u0002\u08a9\u08ac",
    "\u0003\u0002\u0002\u0002\u08aa\u08a8\u0003\u0002\u0002\u0002\u08aa\u08ab",
    "\u0003\u0002\u0002\u0002\u08ab\u0127\u0003\u0002\u0002\u0002\u08ac\u08aa",
    "\u0003\u0002\u0002\u0002\u08ad\u08ae\t\t\u0002\u0002\u08ae\u0129\u0003",
    "\u0002\u0002\u0002\u08af\u08b0\u0005\u00caf\u0002\u08b0\u08b1\u0007",
    "\u0015\u0002\u0002\u08b1\u08b3\u0003\u0002\u0002\u0002\u08b2\u08af\u0003",
    "\u0002\u0002\u0002\u08b2\u08b3\u0003\u0002\u0002\u0002\u08b3\u08b4\u0003",
    "\u0002\u0002\u0002\u08b4\u08b5\u0007\u0098\u0002\u0002\u08b5\u012b\u0003",
    "\u0002\u0002\u0002\u08b6\u08b7\u0007\u0016\u0002\u0002\u08b7\u08b8\u0005",
    "\\/\u0002\u08b8\u08b9\u0007\u0017\u0002\u0002\u08b9\u012d\u0003\u0002",
    "\u0002\u0002\u08ba\u08bd\u0005\u0124\u0093\u0002\u08bb\u08bd\u0005\u0130",
    "\u0099\u0002\u08bc\u08ba\u0003\u0002\u0002\u0002\u08bc\u08bb\u0003\u0002",
    "\u0002\u0002\u08bd\u012f\u0003\u0002\u0002\u0002\u08be\u08c5\u0005\u00c2",
    "b\u0002\u08bf\u08c5\u0005\u00bc_\u0002\u08c0\u08c5\u0005\u00be`\u0002",
    "\u08c1\u08c5\u0005\u0134\u009b\u0002\u08c2\u08c5\u0005\u0136\u009c\u0002",
    "\u08c3\u08c5\u0005\u0132\u009a\u0002\u08c4\u08be\u0003\u0002\u0002\u0002",
    "\u08c4\u08bf\u0003\u0002\u0002\u0002\u08c4\u08c0\u0003\u0002\u0002\u0002",
    "\u08c4\u08c1\u0003\u0002\u0002\u0002\u08c4\u08c2\u0003\u0002\u0002\u0002",
    "\u08c4\u08c3\u0003\u0002\u0002\u0002\u08c5\u0131\u0003\u0002\u0002\u0002",
    "\u08c6\u08c8\u0007~\u0002\u0002\u08c7\u08c6\u0003\u0002\u0002\u0002",
    "\u08c7\u08c8\u0003\u0002\u0002\u0002\u08c8\u08c9\u0003\u0002\u0002\u0002",
    "\u08c9\u08cb\u0007\u0016\u0002\u0002\u08ca\u08cc\u0005\u0138\u009d\u0002",
    "\u08cb\u08ca\u0003\u0002\u0002\u0002\u08cb\u08cc\u0003\u0002\u0002\u0002",
    "\u08cc\u08cd\u0003\u0002\u0002\u0002\u08cd\u08ce\u0007\u0017\u0002\u0002",
    "\u08ce\u0133\u0003\u0002\u0002\u0002\u08cf\u08d1\u0007~\u0002\u0002",
    "\u08d0\u08cf\u0003\u0002\u0002\u0002\u08d0\u08d1\u0003\u0002\u0002\u0002",
    "\u08d1\u08da\u0003\u0002\u0002\u0002\u08d2\u08d3\u0007+\u0002\u0002",
    "\u08d3\u08d4\u0005\u0140\u00a1\u0002\u08d4\u08d5\u0007)\u0002\u0002",
    "\u08d5\u08db\u0003\u0002\u0002\u0002\u08d6\u08db\u0007.\u0002\u0002",
    "\u08d7\u08d8\u0007+\u0002\u0002\u08d8\u08d9\u0007\u0011\u0002\u0002",
    "\u08d9\u08db\u0007)\u0002\u0002\u08da\u08d2\u0003\u0002\u0002\u0002",
    "\u08da\u08d6\u0003\u0002\u0002\u0002\u08da\u08d7\u0003\u0002\u0002\u0002",
    "\u08db\u0135\u0003\u0002\u0002\u0002\u08dc\u08de\u0007\u001a\u0002\u0002",
    "\u08dd\u08df\u0005\u013a\u009e\u0002\u08de\u08dd\u0003\u0002\u0002\u0002",
    "\u08de\u08df\u0003\u0002\u0002\u0002\u08df\u08e0\u0003\u0002\u0002\u0002",
    "\u08e0\u08e1\u0007\u001b\u0002\u0002\u08e1\u0137\u0003\u0002\u0002\u0002",
    "\u08e2\u08e3\u0005\\/\u0002\u08e3\u08ec\u0007\u0013\u0002\u0002\u08e4",
    "\u08e9\u0005\\/\u0002\u08e5\u08e6\u0007\u0013\u0002\u0002\u08e6\u08e8",
    "\u0005\\/\u0002\u08e7\u08e5\u0003\u0002\u0002\u0002\u08e8\u08eb\u0003",
    "\u0002\u0002\u0002\u08e9\u08e7\u0003\u0002\u0002\u0002\u08e9\u08ea\u0003",
    "\u0002\u0002\u0002\u08ea\u08ed\u0003\u0002\u0002\u0002\u08eb\u08e9\u0003",
    "\u0002\u0002\u0002\u08ec\u08e4\u0003\u0002\u0002\u0002\u08ec\u08ed\u0003",
    "\u0002\u0002\u0002\u08ed\u0139\u0003\u0002\u0002\u0002\u08ee\u08f3\u0005",
    "\u013c\u009f\u0002\u08ef\u08f0\u0007\u0013\u0002\u0002\u08f0\u08f2\u0005",
    "\u013c\u009f\u0002\u08f1\u08ef\u0003\u0002\u0002\u0002\u08f2\u08f5\u0003",
    "\u0002\u0002\u0002\u08f3\u08f1\u0003\u0002\u0002\u0002\u08f3\u08f4\u0003",
    "\u0002\u0002\u0002\u08f4\u013b\u0003\u0002\u0002\u0002\u08f5\u08f3\u0003",
    "\u0002\u0002\u0002\u08f6\u08f7\u0005\u013e\u00a0\u0002\u08f7\u08f8\u0007",
    "\u0011\u0002\u0002\u08f8\u08f9\u0005\\/\u0002\u08f9\u013d\u0003\u0002",
    "\u0002\u0002\u08fa\u08fd\u0005\u00d8m\u0002\u08fb\u08fd\u0007\u00b1",
    "\u0002\u0002\u08fc\u08fa\u0003\u0002\u0002\u0002\u08fc\u08fb\u0003\u0002",
    "\u0002\u0002\u08fd\u013f\u0003\u0002\u0002\u0002\u08fe\u0903\u0005\u0142",
    "\u00a2\u0002\u08ff\u0900\u0007\u0013\u0002\u0002\u0900\u0902\u0005\u0142",
    "\u00a2\u0002\u0901\u08ff\u0003\u0002\u0002\u0002\u0902\u0905\u0003\u0002",
    "\u0002\u0002\u0903\u0901\u0003\u0002\u0002\u0002\u0903\u0904\u0003\u0002",
    "\u0002\u0002\u0904\u0141\u0003\u0002\u0002\u0002\u0905\u0903\u0003\u0002",
    "\u0002\u0002\u0906\u0907\u0005\u0144\u00a3\u0002\u0907\u0908\u0007\u0011",
    "\u0002\u0002\u0908\u0909\u0005\\/\u0002\u0909\u0143\u0003\u0002\u0002",
    "\u0002\u090a\u090d\u0005\u00d8m\u0002\u090b\u090d\u0007\u00b1\u0002",
    "\u0002\u090c\u090a\u0003\u0002\u0002\u0002\u090c\u090b\u0003\u0002\u0002",
    "\u0002\u090d\u0145\u0003\u0002\u0002\u0002\u090e\u090f\u0005\\/\u0002",
    "\u090f\u0910\u0007\u0011\u0002\u0002\u0910\u0911\u0005\\/\u0002\u0911",
    "\u0918\u0003\u0002\u0002\u0002\u0912\u0913\u0005\\/\u0002\u0913\u0914",
    "\u0007\u0011\u0002\u0002\u0914\u0918\u0003\u0002\u0002\u0002\u0915\u0916",
    "\u0007\u0011\u0002\u0002\u0916\u0918\u0005\\/\u0002\u0917\u090e\u0003",
    "\u0002\u0002\u0002\u0917\u0912\u0003\u0002\u0002\u0002\u0917\u0915\u0003",
    "\u0002\u0002\u0002\u0918\u0147\u0003\u0002\u0002\u0002\u0919\u091a\u0005",
    "\u00e2r\u0002\u091a\u091b\u0005\u016e\u00b8\u0002\u091b\u091c\u0005",
    "\\/\u0002\u091c\u0149\u0003\u0002\u0002\u0002\u091d\u091e\b\u00a6\u0001",
    "\u0002\u091e\u091f\u0005\u00e2r\u0002\u091f\u0924\u0003\u0002\u0002",
    "\u0002\u0920\u0921\f\u0003\u0002\u0002\u0921\u0923\u0005\u008cG\u0002",
    "\u0922\u0920\u0003\u0002\u0002\u0002\u0923\u0926\u0003\u0002\u0002\u0002",
    "\u0924\u0922\u0003\u0002\u0002\u0002\u0924\u0925\u0003\u0002\u0002\u0002",
    "\u0925\u014b\u0003\u0002\u0002\u0002\u0926\u0924\u0003\u0002\u0002\u0002",
    "\u0927\u0928\u0006\u00a7+\u0003\u0928\u0929\u0007\u00ad\u0002\u0002",
    "\u0929\u092c\u0005\u00f4{\u0002\u092a\u092c\u0005\\/\u0002\u092b\u0927",
    "\u0003\u0002\u0002\u0002\u092b\u092a\u0003\u0002\u0002\u0002\u092c\u014d",
    "\u0003\u0002\u0002\u0002\u092d\u092e\u0005\u0150\u00a9\u0002\u092e\u092f",
    "\u0005\\/\u0002\u092f\u0936\u0003\u0002\u0002\u0002\u0930\u0931\u0005",
    "\u0150\u00a9\u0002\u0931\u0932\u0007\u001a\u0002\u0002\u0932\u0933\u0005",
    "\u011a\u008e\u0002\u0933\u0934\u0007\u001b\u0002\u0002\u0934\u0936\u0003",
    "\u0002\u0002\u0002\u0935\u092d\u0003\u0002\u0002\u0002\u0935\u0930\u0003",
    "\u0002\u0002\u0002\u0936\u014f\u0003\u0002\u0002\u0002\u0937\u0938\u0005",
    "\u0152\u00aa\u0002\u0938\u0939\u0005\u0094K\u0002\u0939\u093a\u0007",
    "6\u0002\u0002\u093a\u093b\u0005\u0094K\u0002\u093b\u0151\u0003\u0002",
    "\u0002\u0002\u093c\u0943\u0005\u00e2r\u0002\u093d\u093f\u0007\u0016",
    "\u0002\u0002\u093e\u0940\u0005\u010a\u0086\u0002\u093f\u093e\u0003\u0002",
    "\u0002\u0002\u093f\u0940\u0003\u0002\u0002\u0002\u0940\u0941\u0003\u0002",
    "\u0002\u0002\u0941\u0943\u0007\u0017\u0002\u0002\u0942\u093c\u0003\u0002",
    "\u0002\u0002\u0942\u093d\u0003\u0002\u0002\u0002\u0943\u0153\u0003\u0002",
    "\u0002\u0002\u0944\u0947\u0005j6\u0002\u0945\u0947\u0005\u014e\u00a8",
    "\u0002\u0946\u0944\u0003\u0002\u0002\u0002\u0946\u0945\u0003\u0002\u0002",
    "\u0002\u0947\u0155\u0003\u0002\u0002\u0002\u0948\u0949\u0007\u008c\u0002",
    "\u0002\u0949\u094a\u0007E\u0002\u0002\u094a\u094b\u0007r\u0002\u0002",
    "\u094b\u094c\u0005\\/\u0002\u094c\u0157\u0003\u0002\u0002\u0002\u094d",
    "\u094e\u0007\u008c\u0002\u0002\u094e\u094f\u0007M\u0002\u0002\u094f",
    "\u0950\u0007r\u0002\u0002\u0950\u0951\u0005\\/\u0002\u0951\u0159\u0003",
    "\u0002\u0002\u0002\u0952\u0953\u0007\u008c\u0002\u0002\u0953\u0954\u0007",
    "\u0085\u0002\u0002\u0954\u0955\u0007r\u0002\u0002\u0955\u0956\u0005",
    "\\/\u0002\u0956\u015b\u0003\u0002\u0002\u0002\u0957\u095c\u0005\u015e",
    "\u00b0\u0002\u0958\u0959\u0007\u0013\u0002\u0002\u0959\u095b\u0005\u015e",
    "\u00b0\u0002\u095a\u0958\u0003\u0002\u0002\u0002\u095b\u095e\u0003\u0002",
    "\u0002\u0002\u095c\u095a\u0003\u0002\u0002\u0002\u095c\u095d\u0003\u0002",
    "\u0002\u0002\u095d\u015d\u0003\u0002\u0002\u0002\u095e\u095c\u0003\u0002",
    "\u0002\u0002\u095f\u0964\u0005\u00e2r\u0002\u0960\u0961\u0007\u0015",
    "\u0002\u0002\u0961\u0963\u0005\u00e2r\u0002\u0962\u0960\u0003\u0002",
    "\u0002\u0002\u0963\u0966\u0003\u0002\u0002\u0002\u0964\u0962\u0003\u0002",
    "\u0002\u0002\u0964\u0965\u0003\u0002\u0002\u0002\u0965\u0968\u0003\u0002",
    "\u0002\u0002\u0966\u0964\u0003\u0002\u0002\u0002\u0967\u0969\t\n\u0002",
    "\u0002\u0968\u0967\u0003\u0002\u0002\u0002\u0968\u0969\u0003\u0002\u0002",
    "\u0002\u0969\u015f\u0003\u0002\u0002\u0002\u096a\u0971\u0007\"\u0002",
    "\u0002\u096b\u0971\u0007#\u0002\u0002\u096c\u0971\u0005\u0170\u00b9",
    "\u0002\u096d\u0971\u0005\u0172\u00ba\u0002\u096e\u0971\u0005\u0174\u00bb",
    "\u0002\u096f\u0971\u0005\u0176\u00bc\u0002\u0970\u096a\u0003\u0002\u0002",
    "\u0002\u0970\u096b\u0003\u0002\u0002\u0002\u0970\u096c\u0003\u0002\u0002",
    "\u0002\u0970\u096d\u0003\u0002\u0002\u0002\u0970\u096e\u0003\u0002\u0002",
    "\u0002\u0970\u096f\u0003\u0002\u0002\u0002\u0971\u0161\u0003\u0002\u0002",
    "\u0002\u0972\u0973\t\u000b\u0002\u0002\u0973\u0163\u0003\u0002\u0002",
    "\u0002\u0974\u0975\u0007\u00ad\u0002\u0002\u0975\u0976\u0006\u00b3,",
    "\u0003\u0976\u0165\u0003\u0002\u0002\u0002\u0977\u0978\u0007\u00ad\u0002",
    "\u0002\u0978\u0979\u0006\u00b4-\u0003\u0979\u0167\u0003\u0002\u0002",
    "\u0002\u097a\u097b\u0007\u00ad\u0002\u0002\u097b\u097c\u0006\u00b5.",
    "\u0003\u097c\u0169\u0003\u0002\u0002\u0002\u097d\u097e\u0007\u00ad\u0002",
    "\u0002\u097e\u097f\u0006\u00b6/\u0003\u097f\u016b\u0003\u0002\u0002",
    "\u0002\u0980\u0981\u0007\u00ad\u0002\u0002\u0981\u0982\u0006\u00b70",
    "\u0003\u0982\u016d\u0003\u0002\u0002\u0002\u0983\u0984\u0007/\u0002",
    "\u0002\u0984\u016f\u0003\u0002\u0002\u0002\u0985\u0986\u0007$\u0002",
    "\u0002\u0986\u0171\u0003\u0002\u0002\u0002\u0987\u0988\u0007%\u0002",
    "\u0002\u0988\u0173\u0003\u0002\u0002\u0002\u0989\u098a\u0007&\u0002",
    "\u0002\u098a\u0175\u0003\u0002\u0002\u0002\u098b\u098c\t\f\u0002\u0002",
    "\u098c\u0177\u0003\u0002\u0002\u0002\u098d\u098e\u0007\u008f\u0002\u0002",
    "\u098e\u098f\u0005\u017a\u00be\u0002\u098f\u0990\u0007\u0012\u0002\u0002",
    "\u0990\u0995\u0003\u0002\u0002\u0002\u0991\u0992\u0005\u017a\u00be\u0002",
    "\u0992\u0993\u0007\u0012\u0002\u0002\u0993\u0995\u0003\u0002\u0002\u0002",
    "\u0994\u098d\u0003\u0002\u0002\u0002\u0994\u0991\u0003\u0002\u0002\u0002",
    "\u0995\u0179\u0003\u0002\u0002\u0002\u0996\u0997\b\u00be\u0001\u0002",
    "\u0997\u0998\u0005\u017c\u00bf\u0002\u0998\u099d\u0003\u0002\u0002\u0002",
    "\u0999\u099a\f\u0003\u0002\u0002\u099a\u099c\u0005\u0182\u00c2\u0002",
    "\u099b\u0999\u0003\u0002\u0002\u0002\u099c\u099f\u0003\u0002\u0002\u0002",
    "\u099d\u099b\u0003\u0002\u0002\u0002\u099d\u099e\u0003\u0002\u0002\u0002",
    "\u099e\u017b\u0003\u0002\u0002\u0002\u099f\u099d\u0003\u0002\u0002\u0002",
    "\u09a0\u09a8\u0005\u017e\u00c0\u0002\u09a1\u09a8\u0005\u0180\u00c1\u0002",
    "\u09a2\u09a8\u0005\u018a\u00c6\u0002\u09a3\u09a8\u0005\u018c\u00c7\u0002",
    "\u09a4\u09a8\u0005\u018e\u00c8\u0002\u09a5\u09a8\u0005\u0184\u00c3\u0002",
    "\u09a6\u09a8\u0005\u0188\u00c5\u0002\u09a7\u09a0\u0003\u0002\u0002\u0002",
    "\u09a7\u09a1\u0003\u0002\u0002\u0002\u09a7\u09a2\u0003\u0002\u0002\u0002",
    "\u09a7\u09a3\u0003\u0002\u0002\u0002\u09a7\u09a4\u0003\u0002\u0002\u0002",
    "\u09a7\u09a5\u0003\u0002\u0002\u0002\u09a7\u09a6\u0003\u0002\u0002\u0002",
    "\u09a8\u017d\u0003\u0002\u0002\u0002\u09a9\u09aa\u0005\u0128\u0095\u0002",
    "\u09aa\u017f\u0003\u0002\u0002\u0002\u09ab\u09ac\u0005\u0164\u00b3\u0002",
    "\u09ac\u09ad\u0005\u0184\u00c3\u0002\u09ad\u0181\u0003\u0002\u0002\u0002",
    "\u09ae\u09af\u0007\u0015\u0002\u0002\u09af\u09b4\u0005\u0184\u00c3\u0002",
    "\u09b0\u09b1\u0007\u0015\u0002\u0002\u09b1\u09b4\u0005\u0190\u00c9\u0002",
    "\u09b2\u09b4\u0005\u0188\u00c5\u0002\u09b3\u09ae\u0003\u0002\u0002\u0002",
    "\u09b3\u09b0\u0003\u0002\u0002\u0002\u09b3\u09b2\u0003\u0002\u0002\u0002",
    "\u09b4\u0183\u0003\u0002\u0002\u0002\u09b5\u09b6\u0005\u0190\u00c9\u0002",
    "\u09b6\u09b8\u0007\u0016\u0002\u0002\u09b7\u09b9\u0005\u0186\u00c4\u0002",
    "\u09b8\u09b7\u0003\u0002\u0002\u0002\u09b8\u09b9\u0003\u0002\u0002\u0002",
    "\u09b9\u09ba\u0003\u0002\u0002\u0002\u09ba\u09bb\u0007\u0017\u0002\u0002",
    "\u09bb\u0185\u0003\u0002\u0002\u0002\u09bc\u09bd\b\u00c4\u0001\u0002",
    "\u09bd\u09be\u0005\u017a\u00be\u0002\u09be\u09c4\u0003\u0002\u0002\u0002",
    "\u09bf\u09c0\f\u0003\u0002\u0002\u09c0\u09c1\u0007\u0013\u0002\u0002",
    "\u09c1\u09c3\u0005\u017a\u00be\u0002\u09c2\u09bf\u0003\u0002\u0002\u0002",
    "\u09c3\u09c6\u0003\u0002\u0002\u0002\u09c4\u09c2\u0003\u0002\u0002\u0002",
    "\u09c4\u09c5\u0003\u0002\u0002\u0002\u09c5\u0187\u0003\u0002\u0002\u0002",
    "\u09c6\u09c4\u0003\u0002\u0002\u0002\u09c7\u09c8\u0007\u0018\u0002\u0002",
    "\u09c8\u09c9\u0005\u017a\u00be\u0002\u09c9\u09ca\u0007\u0019\u0002\u0002",
    "\u09ca\u0189\u0003\u0002\u0002\u0002\u09cb\u09cc\u0007\u0016\u0002\u0002",
    "\u09cc\u09cd\u0005\u017a\u00be\u0002\u09cd\u09ce\u0007\u0017\u0002\u0002",
    "\u09ce\u018b\u0003\u0002\u0002\u0002\u09cf\u09d0\u0005\u0190\u00c9\u0002",
    "\u09d0\u018d\u0003\u0002\u0002\u0002\u09d1\u09d7\u0007\u00b3\u0002\u0002",
    "\u09d2\u09d7\u0007\u00b5\u0002\u0002\u09d3\u09d7\u0007\u00b1\u0002\u0002",
    "\u09d4\u09d7\u0007\u00a7\u0002\u0002\u09d5\u09d7\u0007\u00a8\u0002\u0002",
    "\u09d6\u09d1\u0003\u0002\u0002\u0002\u09d6\u09d2\u0003\u0002\u0002\u0002",
    "\u09d6\u09d3\u0003\u0002\u0002\u0002\u09d6\u09d4\u0003\u0002\u0002\u0002",
    "\u09d6\u09d5\u0003\u0002\u0002\u0002\u09d7\u018f\u0003\u0002\u0002\u0002",
    "\u09d8\u09de\u0007\u00ad\u0002\u0002\u09d9\u09de\u0007\u00ab\u0002\u0002",
    "\u09da\u09de\u0007\u00af\u0002\u0002\u09db\u09de\u0007\u00ac\u0002\u0002",
    "\u09dc\u09de\u0005\u0162\u00b2\u0002\u09dd\u09d8\u0003\u0002\u0002\u0002",
    "\u09dd\u09d9\u0003\u0002\u0002\u0002\u09dd\u09da\u0003\u0002\u0002\u0002",
    "\u09dd\u09db\u0003\u0002\u0002\u0002\u09dd\u09dc\u0003\u0002\u0002\u0002",
    "\u09de\u0191\u0003\u0002\u0002\u0002\u09df\u09e0\u0007\u008f\u0002\u0002",
    "\u09e0\u09e3\u0005\u0194\u00cb\u0002\u09e1\u09e3\u0005\u0194\u00cb\u0002",
    "\u09e2\u09df\u0003\u0002\u0002\u0002\u09e2\u09e1\u0003\u0002\u0002\u0002",
    "\u09e3\u0193\u0003\u0002\u0002\u0002\u09e4\u09e5\b\u00cb\u0001\u0002",
    "\u09e5\u09e6\u0005\u0196\u00cc\u0002\u09e6\u09eb\u0003\u0002\u0002\u0002",
    "\u09e7\u09e8\f\u0003\u0002\u0002\u09e8\u09ea\u0005\u019a\u00ce\u0002",
    "\u09e9\u09e7\u0003\u0002\u0002\u0002\u09ea\u09ed\u0003\u0002\u0002\u0002",
    "\u09eb\u09e9\u0003\u0002\u0002\u0002\u09eb\u09ec\u0003\u0002\u0002\u0002",
    "\u09ec\u0195\u0003\u0002\u0002\u0002\u09ed\u09eb\u0003\u0002\u0002\u0002",
    "\u09ee\u09f4\u0005\u0198\u00cd\u0002\u09ef\u09f4\u0005\u01a4\u00d3\u0002",
    "\u09f0\u09f4\u0005\u01a6\u00d4\u0002\u09f1\u09f4\u0005\u01a8\u00d5\u0002",
    "\u09f2\u09f4\u0005\u019c\u00cf\u0002\u09f3\u09ee\u0003\u0002\u0002\u0002",
    "\u09f3\u09ef\u0003\u0002\u0002\u0002\u09f3\u09f0\u0003\u0002\u0002\u0002",
    "\u09f3\u09f1\u0003\u0002\u0002\u0002\u09f3\u09f2\u0003\u0002\u0002\u0002",
    "\u09f4\u0197\u0003\u0002\u0002\u0002\u09f5\u09f6\u0005\u0128\u0095\u0002",
    "\u09f6\u0199\u0003\u0002\u0002\u0002\u09f7\u09f8\u0007\u0015\u0002\u0002",
    "\u09f8\u09fe\u0005\u019c\u00cf\u0002\u09f9\u09fa\u0007\u0018\u0002\u0002",
    "\u09fa\u09fb\u0005\u0194\u00cb\u0002\u09fb\u09fc\u0007\u0019\u0002\u0002",
    "\u09fc\u09fe\u0003\u0002\u0002\u0002\u09fd\u09f7\u0003\u0002\u0002\u0002",
    "\u09fd\u09f9\u0003\u0002\u0002\u0002\u09fe\u019b\u0003\u0002\u0002\u0002",
    "\u09ff\u0a00\u0005\u01aa\u00d6\u0002\u0a00\u0a02\u0007\u0016\u0002\u0002",
    "\u0a01\u0a03\u0005\u019e\u00d0\u0002\u0a02\u0a01\u0003\u0002\u0002\u0002",
    "\u0a02\u0a03\u0003\u0002\u0002\u0002\u0a03\u0a04\u0003\u0002\u0002\u0002",
    "\u0a04\u0a05\u0007\u0017\u0002\u0002\u0a05\u019d\u0003\u0002\u0002\u0002",
    "\u0a06\u0a0d\u0005\u01a0\u00d1\u0002\u0a07\u0a0d\u0005\u01a2\u00d2\u0002",
    "\u0a08\u0a09\u0005\u01a0\u00d1\u0002\u0a09\u0a0a\u0007\u0013\u0002\u0002",
    "\u0a0a\u0a0b\u0005\u01a2\u00d2\u0002\u0a0b\u0a0d\u0003\u0002\u0002\u0002",
    "\u0a0c\u0a06\u0003\u0002\u0002\u0002\u0a0c\u0a07\u0003\u0002\u0002\u0002",
    "\u0a0c\u0a08\u0003\u0002\u0002\u0002\u0a0d\u019f\u0003\u0002\u0002\u0002",
    "\u0a0e\u0a0f\b\u00d1\u0001\u0002\u0a0f\u0a10\u0005\u0194\u00cb\u0002",
    "\u0a10\u0a16\u0003\u0002\u0002\u0002\u0a11\u0a12\f\u0003\u0002\u0002",
    "\u0a12\u0a13\u0007\u0013\u0002\u0002\u0a13\u0a15\u0005\u0194\u00cb\u0002",
    "\u0a14\u0a11\u0003\u0002\u0002\u0002\u0a15\u0a18\u0003\u0002\u0002\u0002",
    "\u0a16\u0a14\u0003\u0002\u0002\u0002\u0a16\u0a17\u0003\u0002\u0002\u0002",
    "\u0a17\u01a1\u0003\u0002\u0002\u0002\u0a18\u0a16\u0003\u0002\u0002\u0002",
    "\u0a19\u0a1a\b\u00d2\u0001\u0002\u0a1a\u0a1b\u0005\u01aa\u00d6\u0002",
    "\u0a1b\u0a1c\u0007/\u0002\u0002\u0a1c\u0a1d\u0005\u0194\u00cb\u0002",
    "\u0a1d\u0a26\u0003\u0002\u0002\u0002\u0a1e\u0a1f\f\u0003\u0002\u0002",
    "\u0a1f\u0a20\u0007\u0013\u0002\u0002\u0a20\u0a21\u0005\u01aa\u00d6\u0002",
    "\u0a21\u0a22\u0007/\u0002\u0002\u0a22\u0a23\u0005\u0194\u00cb\u0002",
    "\u0a23\u0a25\u0003\u0002\u0002\u0002\u0a24\u0a1e\u0003\u0002\u0002\u0002",
    "\u0a25\u0a28\u0003\u0002\u0002\u0002\u0a26\u0a24\u0003\u0002\u0002\u0002",
    "\u0a26\u0a27\u0003\u0002\u0002\u0002\u0a27\u01a3\u0003\u0002\u0002\u0002",
    "\u0a28\u0a26\u0003\u0002\u0002\u0002\u0a29\u0a2a\u0007\u0016\u0002\u0002",
    "\u0a2a\u0a2b\u0005\u0194\u00cb\u0002\u0a2b\u0a2c\u0007\u0017\u0002\u0002",
    "\u0a2c\u01a5\u0003\u0002\u0002\u0002\u0a2d\u0a2e\b\u00d4\u0001\u0002",
    "\u0a2e\u0a31\u0007\u00af\u0002\u0002\u0a2f\u0a31\u0005\u01aa\u00d6\u0002",
    "\u0a30\u0a2d\u0003\u0002\u0002\u0002\u0a30\u0a2f\u0003\u0002\u0002\u0002",
    "\u0a31\u0a37\u0003\u0002\u0002\u0002\u0a32\u0a33\f\u0003\u0002\u0002",
    "\u0a33\u0a34\u0007\u0015\u0002\u0002\u0a34\u0a36\u0005\u01aa\u00d6\u0002",
    "\u0a35\u0a32\u0003\u0002\u0002\u0002\u0a36\u0a39\u0003\u0002\u0002\u0002",
    "\u0a37\u0a35\u0003\u0002\u0002\u0002\u0a37\u0a38\u0003\u0002\u0002\u0002",
    "\u0a38\u01a7\u0003\u0002\u0002\u0002\u0a39\u0a37\u0003\u0002\u0002\u0002",
    "\u0a3a\u0a40\u0007\u00b3\u0002\u0002\u0a3b\u0a40\u0007\u00b5\u0002\u0002",
    "\u0a3c\u0a40\u0007\u00b1\u0002\u0002\u0a3d\u0a40\u0007\u00a7\u0002\u0002",
    "\u0a3e\u0a40\u0007\u00a8\u0002\u0002\u0a3f\u0a3a\u0003\u0002\u0002\u0002",
    "\u0a3f\u0a3b\u0003\u0002\u0002\u0002\u0a3f\u0a3c\u0003\u0002\u0002\u0002",
    "\u0a3f\u0a3d\u0003\u0002\u0002\u0002\u0a3f\u0a3e\u0003\u0002\u0002\u0002",
    "\u0a40\u01a9\u0003\u0002\u0002\u0002\u0a41\u0a47\u0007\u00ad\u0002\u0002",
    "\u0a42\u0a47\u0007\u00ab\u0002\u0002\u0a43\u0a47\u0007\u00af\u0002\u0002",
    "\u0a44\u0a47\u0007\u00ac\u0002\u0002\u0a45\u0a47\u0005\u0162\u00b2\u0002",
    "\u0a46\u0a41\u0003\u0002\u0002\u0002\u0a46\u0a42\u0003\u0002\u0002\u0002",
    "\u0a46\u0a43\u0003\u0002\u0002\u0002\u0a46\u0a44\u0003\u0002\u0002\u0002",
    "\u0a46\u0a45\u0003\u0002\u0002\u0002\u0a47\u01ab\u0003\u0002\u0002\u0002",
    "\u0a48\u0a49\u0007\u008f\u0002\u0002\u0a49\u0a4a\u0005\u01ae\u00d8\u0002",
    "\u0a4a\u0a4b\u0007\u0012\u0002\u0002\u0a4b\u0a50\u0003\u0002\u0002\u0002",
    "\u0a4c\u0a4d\u0005\u01ae\u00d8\u0002\u0a4d\u0a4e\u0007\u0012\u0002\u0002",
    "\u0a4e\u0a50\u0003\u0002\u0002\u0002\u0a4f\u0a48\u0003\u0002\u0002\u0002",
    "\u0a4f\u0a4c\u0003\u0002\u0002\u0002\u0a50\u01ad\u0003\u0002\u0002\u0002",
    "\u0a51\u0a52\b\u00d8\u0001\u0002\u0a52\u0a53\u0005\u01b0\u00d9\u0002",
    "\u0a53\u0a58\u0003\u0002\u0002\u0002\u0a54\u0a55\f\u0003\u0002\u0002",
    "\u0a55\u0a57\u0005\u01b6\u00dc\u0002\u0a56\u0a54\u0003\u0002\u0002\u0002",
    "\u0a57\u0a5a\u0003\u0002\u0002\u0002\u0a58\u0a56\u0003\u0002\u0002\u0002",
    "\u0a58\u0a59\u0003\u0002\u0002\u0002\u0a59\u01af\u0003\u0002\u0002\u0002",
    "\u0a5a\u0a58\u0003\u0002\u0002\u0002\u0a5b\u0a61\u0005\u01b2\u00da\u0002",
    "\u0a5c\u0a61\u0005\u01b4\u00db\u0002\u0a5d\u0a61\u0005\u01be\u00e0\u0002",
    "\u0a5e\u0a61\u0005\u01c0\u00e1\u0002\u0a5f\u0a61\u0005\u01c4\u00e3\u0002",
    "\u0a60\u0a5b\u0003\u0002\u0002\u0002\u0a60\u0a5c\u0003\u0002\u0002\u0002",
    "\u0a60\u0a5d\u0003\u0002\u0002\u0002\u0a60\u0a5e\u0003\u0002\u0002\u0002",
    "\u0a60\u0a5f\u0003\u0002\u0002\u0002\u0a61\u01b1\u0003\u0002\u0002\u0002",
    "\u0a62\u0a63\u0005\u0128\u0095\u0002\u0a63\u01b3\u0003\u0002\u0002\u0002",
    "\u0a64\u0a65\u0005\u0164\u00b3\u0002\u0a65\u0a66\u0005\u01b8\u00dd\u0002",
    "\u0a66\u01b5\u0003\u0002\u0002\u0002\u0a67\u0a68\u0007\u0015\u0002\u0002",
    "\u0a68\u0a6b\u0005\u01b8\u00dd\u0002\u0a69\u0a6b\u0005\u01bc\u00df\u0002",
    "\u0a6a\u0a67\u0003\u0002\u0002\u0002\u0a6a\u0a69\u0003\u0002\u0002\u0002",
    "\u0a6b\u01b7\u0003\u0002\u0002\u0002\u0a6c\u0a6d\u0005\u01c6\u00e4\u0002",
    "\u0a6d\u0a6f\u0007\u0016\u0002\u0002\u0a6e\u0a70\u0005\u01ba\u00de\u0002",
    "\u0a6f\u0a6e\u0003\u0002\u0002\u0002\u0a6f\u0a70\u0003\u0002\u0002\u0002",
    "\u0a70\u0a71\u0003\u0002\u0002\u0002\u0a71\u0a72\u0007\u0017\u0002\u0002",
    "\u0a72\u01b9\u0003\u0002\u0002\u0002\u0a73\u0a74\b\u00de\u0001\u0002",
    "\u0a74\u0a75\u0005\u01ae\u00d8\u0002\u0a75\u0a7b\u0003\u0002\u0002\u0002",
    "\u0a76\u0a77\f\u0003\u0002\u0002\u0a77\u0a78\u0007\u0013\u0002\u0002",
    "\u0a78\u0a7a\u0005\u01ae\u00d8\u0002\u0a79\u0a76\u0003\u0002\u0002\u0002",
    "\u0a7a\u0a7d\u0003\u0002\u0002\u0002\u0a7b\u0a79\u0003\u0002\u0002\u0002",
    "\u0a7b\u0a7c\u0003\u0002\u0002\u0002\u0a7c\u01bb\u0003\u0002\u0002\u0002",
    "\u0a7d\u0a7b\u0003\u0002\u0002\u0002\u0a7e\u0a7f\u0007\u0018\u0002\u0002",
    "\u0a7f\u0a80\u0005\u01ae\u00d8\u0002\u0a80\u0a81\u0007\u0019\u0002\u0002",
    "\u0a81\u01bd\u0003\u0002\u0002\u0002\u0a82\u0a83\u0007\u0016\u0002\u0002",
    "\u0a83\u0a84\u0005\u01ae\u00d8\u0002\u0a84\u0a85\u0007\u0017\u0002\u0002",
    "\u0a85\u01bf\u0003\u0002\u0002\u0002\u0a86\u0a87\b\u00e1\u0001\u0002",
    "\u0a87\u0a88\u0005\u01c6\u00e4\u0002\u0a88\u0a8e\u0003\u0002\u0002\u0002",
    "\u0a89\u0a8a\f\u0003\u0002\u0002\u0a8a\u0a8b\u0007\u0015\u0002\u0002",
    "\u0a8b\u0a8d\u0005\u01c6\u00e4\u0002\u0a8c\u0a89\u0003\u0002\u0002\u0002",
    "\u0a8d\u0a90\u0003\u0002\u0002\u0002\u0a8e\u0a8c\u0003\u0002\u0002\u0002",
    "\u0a8e\u0a8f\u0003\u0002\u0002\u0002\u0a8f\u01c1\u0003\u0002\u0002\u0002",
    "\u0a90\u0a8e\u0003\u0002\u0002\u0002\u0a91\u0a92\b\u00e2\u0001\u0002",
    "\u0a92\u0a93\u0005\u01c0\u00e1\u0002\u0a93\u0a98\u0003\u0002\u0002\u0002",
    "\u0a94\u0a95\f\u0003\u0002\u0002\u0a95\u0a97\u0007\u00af\u0002\u0002",
    "\u0a96\u0a94\u0003\u0002\u0002\u0002\u0a97\u0a9a\u0003\u0002\u0002\u0002",
    "\u0a98\u0a96\u0003\u0002\u0002\u0002\u0a98\u0a99\u0003\u0002\u0002\u0002",
    "\u0a99\u01c3\u0003\u0002\u0002\u0002\u0a9a\u0a98\u0003\u0002\u0002\u0002",
    "\u0a9b\u0aa1\u0007\u00b3\u0002\u0002\u0a9c\u0aa1\u0007\u00b5\u0002\u0002",
    "\u0a9d\u0aa1\u0007\u00b1\u0002\u0002\u0a9e\u0aa1\u0007\u00a7\u0002\u0002",
    "\u0a9f\u0aa1\u0007\u00a8\u0002\u0002\u0aa0\u0a9b\u0003\u0002\u0002\u0002",
    "\u0aa0\u0a9c\u0003\u0002\u0002\u0002\u0aa0\u0a9d\u0003\u0002\u0002\u0002",
    "\u0aa0\u0a9e\u0003\u0002\u0002\u0002\u0aa0\u0a9f\u0003\u0002\u0002\u0002",
    "\u0aa1\u01c5\u0003\u0002\u0002\u0002\u0aa2\u0aa8\u0007\u00ad\u0002\u0002",
    "\u0aa3\u0aa8\u0007\u00ab\u0002\u0002\u0aa4\u0aa8\u0007\u00af\u0002\u0002",
    "\u0aa5\u0aa8\u0007\u00ac\u0002\u0002\u0aa6\u0aa8\u0005\u0162\u00b2\u0002",
    "\u0aa7\u0aa2\u0003\u0002\u0002\u0002\u0aa7\u0aa3\u0003\u0002\u0002\u0002",
    "\u0aa7\u0aa4\u0003\u0002\u0002\u0002\u0aa7\u0aa5\u0003\u0002\u0002\u0002",
    "\u0aa7\u0aa6\u0003\u0002\u0002\u0002\u0aa8\u01c7\u0003\u0002\u0002\u0002",
    "\u0aa9\u0aaa\u0007\u008f\u0002\u0002\u0aaa\u0aab\u0005\u01ca\u00e6\u0002",
    "\u0aab\u0aac\u0007\u0012\u0002\u0002\u0aac\u0ab1\u0003\u0002\u0002\u0002",
    "\u0aad\u0aae\u0005\u01ca\u00e6\u0002\u0aae\u0aaf\u0007\u0012\u0002\u0002",
    "\u0aaf\u0ab1\u0003\u0002\u0002\u0002\u0ab0\u0aa9\u0003\u0002\u0002\u0002",
    "\u0ab0\u0aad\u0003\u0002\u0002\u0002\u0ab1\u01c9\u0003\u0002\u0002\u0002",
    "\u0ab2\u0ab3\b\u00e6\u0001\u0002\u0ab3\u0ab4\u0005\u01cc\u00e7\u0002",
    "\u0ab4\u0ab9\u0003\u0002\u0002\u0002\u0ab5\u0ab6\f\u0003\u0002\u0002",
    "\u0ab6\u0ab8\u0005\u01d2\u00ea\u0002\u0ab7\u0ab5\u0003\u0002\u0002\u0002",
    "\u0ab8\u0abb\u0003\u0002\u0002\u0002\u0ab9\u0ab7\u0003\u0002\u0002\u0002",
    "\u0ab9\u0aba\u0003\u0002\u0002\u0002\u0aba\u01cb\u0003\u0002\u0002\u0002",
    "\u0abb\u0ab9\u0003\u0002\u0002\u0002\u0abc\u0ac2\u0005\u01ce\u00e8\u0002",
    "\u0abd\u0ac2\u0005\u01d0\u00e9\u0002\u0abe\u0ac2\u0005\u01da\u00ee\u0002",
    "\u0abf\u0ac2\u0005\u01dc\u00ef\u0002\u0ac0\u0ac2\u0005\u01de\u00f0\u0002",
    "\u0ac1\u0abc\u0003\u0002\u0002\u0002\u0ac1\u0abd\u0003\u0002\u0002\u0002",
    "\u0ac1\u0abe\u0003\u0002\u0002\u0002\u0ac1\u0abf\u0003\u0002\u0002\u0002",
    "\u0ac1\u0ac0\u0003\u0002\u0002\u0002\u0ac2\u01cd\u0003\u0002\u0002\u0002",
    "\u0ac3\u0ac4\u0005\u0128\u0095\u0002\u0ac4\u01cf\u0003\u0002\u0002\u0002",
    "\u0ac5\u0ac6\u0005\u0164\u00b3\u0002\u0ac6\u0ac7\u0005\u01d4\u00eb\u0002",
    "\u0ac7\u01d1\u0003\u0002\u0002\u0002\u0ac8\u0ac9\u0007\u0015\u0002\u0002",
    "\u0ac9\u0acc\u0005\u01d4\u00eb\u0002\u0aca\u0acc\u0005\u01d8\u00ed\u0002",
    "\u0acb\u0ac8\u0003\u0002\u0002\u0002\u0acb\u0aca\u0003\u0002\u0002\u0002",
    "\u0acc\u01d3\u0003\u0002\u0002\u0002\u0acd\u0ace\u0005\u01e0\u00f1\u0002",
    "\u0ace\u0ad0\u0007\u0016\u0002\u0002\u0acf\u0ad1\u0005\u01d6\u00ec\u0002",
    "\u0ad0\u0acf\u0003\u0002\u0002\u0002\u0ad0\u0ad1\u0003\u0002\u0002\u0002",
    "\u0ad1\u0ad2\u0003\u0002\u0002\u0002\u0ad2\u0ad3\u0007\u0017\u0002\u0002",
    "\u0ad3\u01d5\u0003\u0002\u0002\u0002\u0ad4\u0ad5\b\u00ec\u0001\u0002",
    "\u0ad5\u0ad6\u0005\u01ca\u00e6\u0002\u0ad6\u0adc\u0003\u0002\u0002\u0002",
    "\u0ad7\u0ad8\f\u0003\u0002\u0002\u0ad8\u0ad9\u0007\u0013\u0002\u0002",
    "\u0ad9\u0adb\u0005\u01ca\u00e6\u0002\u0ada\u0ad7\u0003\u0002\u0002\u0002",
    "\u0adb\u0ade\u0003\u0002\u0002\u0002\u0adc\u0ada\u0003\u0002\u0002\u0002",
    "\u0adc\u0add\u0003\u0002\u0002\u0002\u0add\u01d7\u0003\u0002\u0002\u0002",
    "\u0ade\u0adc\u0003\u0002\u0002\u0002\u0adf\u0ae0\u0007\u0018\u0002\u0002",
    "\u0ae0\u0ae1\u0005\u01ca\u00e6\u0002\u0ae1\u0ae2\u0007\u0019\u0002\u0002",
    "\u0ae2\u01d9\u0003\u0002\u0002\u0002\u0ae3\u0ae4\u0007\u0016\u0002\u0002",
    "\u0ae4\u0ae5\u0005\u01ca\u00e6\u0002\u0ae5\u0ae6\u0007\u0017\u0002\u0002",
    "\u0ae6\u01db\u0003\u0002\u0002\u0002\u0ae7\u0ae8\b\u00ef\u0001\u0002",
    "\u0ae8\u0aeb\u0007\u00af\u0002\u0002\u0ae9\u0aeb\u0005\u01e0\u00f1\u0002",
    "\u0aea\u0ae7\u0003\u0002\u0002\u0002\u0aea\u0ae9\u0003\u0002\u0002\u0002",
    "\u0aeb\u0af1\u0003\u0002\u0002\u0002\u0aec\u0aed\f\u0003\u0002\u0002",
    "\u0aed\u0aee\u0007\u0015\u0002\u0002\u0aee\u0af0\u0005\u01e0\u00f1\u0002",
    "\u0aef\u0aec\u0003\u0002\u0002\u0002\u0af0\u0af3\u0003\u0002\u0002\u0002",
    "\u0af1\u0aef\u0003\u0002\u0002\u0002\u0af1\u0af2\u0003\u0002\u0002\u0002",
    "\u0af2\u01dd\u0003\u0002\u0002\u0002\u0af3\u0af1\u0003\u0002\u0002\u0002",
    "\u0af4\u0afa\u0007\u00b3\u0002\u0002\u0af5\u0afa\u0007\u00b5\u0002\u0002",
    "\u0af6\u0afa\u0007\u00b1\u0002\u0002\u0af7\u0afa\u0007\u00a7\u0002\u0002",
    "\u0af8\u0afa\u0007\u00a8\u0002\u0002\u0af9\u0af4\u0003\u0002\u0002\u0002",
    "\u0af9\u0af5\u0003\u0002\u0002\u0002\u0af9\u0af6\u0003\u0002\u0002\u0002",
    "\u0af9\u0af7\u0003\u0002\u0002\u0002\u0af9\u0af8\u0003\u0002\u0002\u0002",
    "\u0afa\u01df\u0003\u0002\u0002\u0002\u0afb\u0b01\u0007\u00ad\u0002\u0002",
    "\u0afc\u0b01\u0007\u00ab\u0002\u0002\u0afd\u0b01\u0007\u00af\u0002\u0002",
    "\u0afe\u0b01\u0007\u00ac\u0002\u0002\u0aff\u0b01\u0005\u0162\u00b2\u0002",
    "\u0b00\u0afb\u0003\u0002\u0002\u0002\u0b00\u0afc\u0003\u0002\u0002\u0002",
    "\u0b00\u0afd\u0003\u0002\u0002\u0002\u0b00\u0afe\u0003\u0002\u0002\u0002",
    "\u0b00\u0aff\u0003\u0002\u0002\u0002\u0b01\u01e1\u0003\u0002\u0002\u0002",
    "\u0b02\u0b05\u0005\u01e4\u00f3\u0002\u0b03\u0b05\u0005\u01e6\u00f4\u0002",
    "\u0b04\u0b02\u0003\u0002\u0002\u0002\u0b04\u0b03\u0003\u0002\u0002\u0002",
    "\u0b05\u01e3\u0003\u0002\u0002\u0002\u0b06\u0b0e\u0005\u01ec\u00f7\u0002",
    "\u0b07\u0b09\u0005\u01ee\u00f8\u0002\u0b08\u0b0a\u0005\u01fa\u00fe\u0002",
    "\u0b09\u0b08\u0003\u0002\u0002\u0002\u0b09\u0b0a\u0003\u0002\u0002\u0002",
    "\u0b0a\u0b0b\u0003\u0002\u0002\u0002\u0b0b\u0b0c\u0005\u01f0\u00f9\u0002",
    "\u0b0c\u0b0e\u0003\u0002\u0002\u0002\u0b0d\u0b06\u0003\u0002\u0002\u0002",
    "\u0b0d\u0b07\u0003\u0002\u0002\u0002\u0b0e\u01e5\u0003\u0002\u0002\u0002",
    "\u0b0f\u0b10\u0005\u01e8\u00f5\u0002\u0b10\u0b12\u0005\u0094K\u0002",
    "\u0b11\u0b13\u0005\u01fa\u00fe\u0002\u0b12\u0b11\u0003\u0002\u0002\u0002",
    "\u0b12\u0b13\u0003\u0002\u0002\u0002\u0b13\u0b14\u0003\u0002\u0002\u0002",
    "\u0b14\u0b15\u0005\u0094K\u0002\u0b15\u0b16\u0005\u01ea\u00f6\u0002",
    "\u0b16\u01e7\u0003\u0002\u0002\u0002\u0b17\u0b18\u0007+\u0002\u0002",
    "\u0b18\u0b1b\u0007)\u0002\u0002\u0b19\u0b1b\u0007-\u0002\u0002\u0b1a",
    "\u0b17\u0003\u0002\u0002\u0002\u0b1a\u0b19\u0003\u0002\u0002\u0002\u0b1b",
    "\u01e9\u0003\u0002\u0002\u0002\u0b1c\u0b1d\u0007+\u0002\u0002\u0b1d",
    "\u0b1e\u0007%\u0002\u0002\u0b1e\u0b1f\u0007)\u0002\u0002\u0b1f\u01eb",
    "\u0003\u0002\u0002\u0002\u0b20\u0b21\u0007+\u0002\u0002\u0b21\u0b22",
    "\u0005\u01f2\u00fa\u0002\u0b22\u0b26\u0005\u0094K\u0002\u0b23\u0b25",
    "\u0005\u01f6\u00fc\u0002\u0b24\u0b23\u0003\u0002\u0002\u0002\u0b25\u0b28",
    "\u0003\u0002\u0002\u0002\u0b26\u0b24\u0003\u0002\u0002\u0002\u0b26\u0b27",
    "\u0003\u0002\u0002\u0002\u0b27\u0b29\u0003\u0002\u0002\u0002\u0b28\u0b26",
    "\u0003\u0002\u0002\u0002\u0b29\u0b2a\u0007%\u0002\u0002\u0b2a\u0b2b",
    "\u0007)\u0002\u0002\u0b2b\u01ed\u0003\u0002\u0002\u0002\u0b2c\u0b2d",
    "\u0007+\u0002\u0002\u0b2d\u0b2e\u0005\u01f2\u00fa\u0002\u0b2e\u0b32",
    "\u0005\u0094K\u0002\u0b2f\u0b31\u0005\u01f6\u00fc\u0002\u0b30\u0b2f",
    "\u0003\u0002\u0002\u0002\u0b31\u0b34\u0003\u0002\u0002\u0002\u0b32\u0b30",
    "\u0003\u0002\u0002\u0002\u0b32\u0b33\u0003\u0002\u0002\u0002\u0b33\u0b35",
    "\u0003\u0002\u0002\u0002\u0b34\u0b32\u0003\u0002\u0002\u0002\u0b35\u0b36",
    "\u0007)\u0002\u0002\u0b36\u01ef\u0003\u0002\u0002\u0002\u0b37\u0b38",
    "\u0007+\u0002\u0002\u0b38\u0b39\u0007%\u0002\u0002\u0b39\u0b3a\u0005",
    "\u01f2\u00fa\u0002\u0b3a\u0b3b\u0007)\u0002\u0002\u0b3b\u01f1\u0003",
    "\u0002\u0002\u0002\u0b3c\u0b41\u0005\u01f4\u00fb\u0002\u0b3d\u0b3e\u0007",
    "\u0015\u0002\u0002\u0b3e\u0b40\u0005\u01f4\u00fb\u0002\u0b3f\u0b3d\u0003",
    "\u0002\u0002\u0002\u0b40\u0b43\u0003\u0002\u0002\u0002\u0b41\u0b3f\u0003",
    "\u0002\u0002\u0002\u0b41\u0b42\u0003\u0002\u0002\u0002\u0b42\u01f3\u0003",
    "\u0002\u0002\u0002\u0b43\u0b41\u0003\u0002\u0002\u0002\u0b44\u0b48\u0005",
    "\u00d8m\u0002\u0b45\u0b47\u0005\u00dan\u0002\u0b46\u0b45\u0003\u0002",
    "\u0002\u0002\u0b47\u0b4a\u0003\u0002\u0002\u0002\u0b48\u0b46\u0003\u0002",
    "\u0002\u0002\u0b48\u0b49\u0003\u0002\u0002\u0002\u0b49\u01f5\u0003\u0002",
    "\u0002\u0002\u0b4a\u0b48\u0003\u0002\u0002\u0002\u0b4b\u0b4e\u0005\u01f4",
    "\u00fb\u0002\u0b4c\u0b4d\u0007/\u0002\u0002\u0b4d\u0b4f\u0005\u01f8",
    "\u00fd\u0002\u0b4e\u0b4c\u0003\u0002\u0002\u0002\u0b4e\u0b4f\u0003\u0002",
    "\u0002\u0002\u0b4f\u0b50\u0003\u0002\u0002\u0002\u0b50\u0b51\u0005\u0094",
    "K\u0002\u0b51\u01f7\u0003\u0002\u0002\u0002\u0b52\u0b58\u0007\u00b1",
    "\u0002\u0002\u0b53\u0b54\u0007\u001a\u0002\u0002\u0b54\u0b55\u0005\\",
    "/\u0002\u0b55\u0b56\u0007\u001b\u0002\u0002\u0b56\u0b58\u0003\u0002",
    "\u0002\u0002\u0b57\u0b52\u0003\u0002\u0002\u0002\u0b57\u0b53\u0003\u0002",
    "\u0002\u0002\u0b58\u01f9\u0003\u0002\u0002\u0002\u0b59\u0b5b\u0005\u01fc",
    "\u00ff\u0002\u0b5a\u0b59\u0003\u0002\u0002\u0002\u0b5b\u0b5c\u0003\u0002",
    "\u0002\u0002\u0b5c\u0b5a\u0003\u0002\u0002\u0002\u0b5c\u0b5d\u0003\u0002",
    "\u0002\u0002\u0b5d\u01fb\u0003\u0002\u0002\u0002\u0b5e\u0b66\u0005\u01fe",
    "\u0100\u0002\u0b5f\u0b66\u0005\u01e4\u00f3\u0002\u0b60\u0b62\u0007\u001a",
    "\u0002\u0002\u0b61\u0b63\u0005\\/\u0002\u0b62\u0b61\u0003\u0002\u0002",
    "\u0002\u0b62\u0b63\u0003\u0002\u0002\u0002\u0b63\u0b64\u0003\u0002\u0002",
    "\u0002\u0b64\u0b66\u0007\u001b\u0002\u0002\u0b65\u0b5e\u0003\u0002\u0002",
    "\u0002\u0b65\u0b5f\u0003\u0002\u0002\u0002\u0b65\u0b60\u0003\u0002\u0002",
    "\u0002\u0b66\u01fd\u0003\u0002\u0002\u0002\u0b67\u0b69\u0005\u0200\u0101",
    "\u0002\u0b68\u0b67\u0003\u0002\u0002\u0002\u0b69\u0b6a\u0003\u0002\u0002",
    "\u0002\u0b6a\u0b68\u0003\u0002\u0002\u0002\u0b6a\u0b6b\u0003\u0002\u0002",
    "\u0002\u0b6b\u01ff\u0003\u0002\u0002\u0002\u0b6c\u0b6f\n\r\u0002\u0002",
    "\u0b6d\u0b6f\u0007\u00bb\u0002\u0002\u0b6e\u0b6c\u0003\u0002\u0002\u0002",
    "\u0b6e\u0b6d\u0003\u0002\u0002\u0002\u0b6f\u0201\u0003\u0002\u0002\u0002",
    "\u0b70\u0b72\u0007\u001a\u0002\u0002\u0b71\u0b73\u0005\u0204\u0103\u0002",
    "\u0b72\u0b71\u0003\u0002\u0002\u0002\u0b73\u0b74\u0003\u0002\u0002\u0002",
    "\u0b74\u0b72\u0003\u0002\u0002\u0002\u0b74\u0b75\u0003\u0002\u0002\u0002",
    "\u0b75\u0b76\u0003\u0002\u0002\u0002\u0b76\u0b77\u0007\u001b\u0002\u0002",
    "\u0b77\u0203\u0003\u0002\u0002\u0002\u0b78\u0b79\u0005\u0206\u0104\u0002",
    "\u0b79\u0b7a\u0007\u0011\u0002\u0002\u0b7a\u0b7b\u0005\u0208\u0105\u0002",
    "\u0b7b\u0b7c\u0007\u0012\u0002\u0002\u0b7c\u0205\u0003\u0002\u0002\u0002",
    "\u0b7d\u0b7e\b\u0104\u0001\u0002\u0b7e\u0b82\u0005\u00d8m\u0002\u0b7f",
    "\u0b80\u0007#\u0002\u0002\u0b80\u0b82\u0005\u00dco\u0002\u0b81\u0b7d",
    "\u0003\u0002\u0002\u0002\u0b81\u0b7f\u0003\u0002\u0002\u0002\u0b82\u0b8b",
    "\u0003\u0002\u0002\u0002\u0b83\u0b85\f\u0003\u0002\u0002\u0b84\u0b86",
    "\u0005\u00dan\u0002\u0b85\u0b84\u0003\u0002\u0002\u0002\u0b86\u0b87",
    "\u0003\u0002\u0002\u0002\u0b87\u0b85\u0003\u0002\u0002\u0002\u0b87\u0b88",
    "\u0003\u0002\u0002\u0002\u0b88\u0b8a\u0003\u0002\u0002\u0002\u0b89\u0b83",
    "\u0003\u0002\u0002\u0002\u0b8a\u0b8d\u0003\u0002\u0002\u0002\u0b8b\u0b89",
    "\u0003\u0002\u0002\u0002\u0b8b\u0b8c\u0003\u0002\u0002\u0002\u0b8c\u0207",
    "\u0003\u0002\u0002\u0002\u0b8d\u0b8b\u0003\u0002\u0002\u0002\u0b8e\u0b8f",
    "\u0007\u001a\u0002\u0002\u0b8f\u0b90\u0005\\/\u0002\u0b90\u0b91\u0007",
    "\u001b\u0002\u0002\u0b91\u0b94\u0003\u0002\u0002\u0002\u0b92\u0b94\u0005",
    "\u020a\u0106\u0002\u0b93\u0b8e\u0003\u0002\u0002\u0002\u0b93\u0b92\u0003",
    "\u0002\u0002\u0002\u0b94\u0209\u0003\u0002\u0002\u0002\u0b95\u0b97\n",
    "\u000e\u0002\u0002\u0b96\u0b95\u0003\u0002\u0002\u0002\u0b97\u0b98\u0003",
    "\u0002\u0002\u0002\u0b98\u0b99\u0003\u0002\u0002\u0002\u0b98\u0b96\u0003",
    "\u0002\u0002\u0002\u0b99\u020b\u0003\u0002\u0002\u0002\u0118\u0212\u0219",
    "\u0237\u023d\u0242\u0248\u024a\u024d\u0254\u025d\u0276\u027a\u0285\u028e",
    "\u029d\u02a6\u02ad\u02b7\u02cd\u02e4\u02f1\u02fc\u030a\u0310\u031b\u0329",
    "\u033d\u0348\u034a\u0353\u0357\u035a\u0362\u0366\u0369\u0370\u0378\u037d",
    "\u0381\u039c\u03a3\u03a8\u03ac\u03c3\u03cc\u03d0\u03d8\u03dc\u03df\u03e4",
    "\u03eb\u03ee\u040f\u0422\u0429\u044b\u0454\u046b\u047b\u0480\u0488\u0491",
    "\u04a8\u04ae\u04b8\u04d3\u04f0\u04f6\u04fc\u0516\u051c\u0521\u0528\u052f",
    "\u0531\u053b\u0544\u0556\u055f\u056f\u0579\u057f\u0589\u058e\u0590\u0596",
    "\u0598\u059a\u05a8\u05b0\u05b7\u05bb\u05c6\u05ca\u05cf\u05d1\u05d6\u05e5",
    "\u05e9\u05f4\u05f8\u05fd\u0607\u0617\u061f\u0626\u0628\u062d\u062f\u063a",
    "\u0640\u0650\u0659\u065f\u0664\u066a\u0671\u067f\u0682\u068d\u0695\u069d",
    "\u06a6\u06b0\u06b3\u06b7\u06c3\u06c9\u06d1\u06da\u06e2\u06ef\u06f2\u06f6",
    "\u06fb\u06ff\u0708\u071d\u0726\u0728\u072d\u0740\u0745\u074e\u0752\u0759",
    "\u075e\u0762\u076e\u077f\u0784\u0787\u078b\u0790\u0797\u07a2\u07a4\u07ad",
    "\u07b5\u07bd\u07c5\u07cd\u07d5\u07dd\u07e3\u07ef\u07f3\u07fd\u0805\u0809",
    "\u080f\u0816\u081b\u0822\u082a\u0831\u083b\u0848\u084c\u084f\u0853\u0856",
    "\u085e\u0867\u0870\u0879\u088a\u088f\u0898\u08a3\u08aa\u08b2\u08bc\u08c4",
    "\u08c7\u08cb\u08d0\u08da\u08de\u08e9\u08ec\u08f3\u08fc\u0903\u090c\u0917",
    "\u0924\u092b\u0935\u093f\u0942\u0946\u095c\u0964\u0968\u0970\u0994\u099d",
    "\u09a7\u09b3\u09b8\u09c4\u09d6\u09dd\u09e2\u09eb\u09f3\u09fd\u0a02\u0a0c",
    "\u0a16\u0a26\u0a30\u0a37\u0a3f\u0a46\u0a4f\u0a58\u0a60\u0a6a\u0a6f\u0a7b",
    "\u0a8e\u0a98\u0aa0\u0aa7\u0ab0\u0ab9\u0ac1\u0acb\u0ad0\u0adc\u0aea\u0af1",
    "\u0af9\u0b00\u0b04\u0b09\u0b0d\u0b12\u0b1a\u0b26\u0b32\u0b41\u0b48\u0b4e",
    "\u0b57\u0b5c\u0b62\u0b65\u0b6a\u0b6e\u0b74\u0b81\u0b87\u0b8b\u0b93\u0b98"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class EParser extends AbstractParser {

    static grammarFileName = "EParser.g4";
    static literalNames = [ null, null, null, null, null, null, "'\t'", 
                            "' '", null, "'Java:'", "'C#:'", "'Python2:'", 
                            "'Python3:'", "'JavaScript:'", "'Swift:'", "':'", 
                            "';'", null, "'..'", null, null, null, null, 
                            null, null, null, null, "'!'", "'&'", "'&&'", 
                            "'|'", "'||'", null, "'-'", "'*'", "'/'", "'\\'", 
                            "'%'", "'#'", "'>'", "'>='", "'<'", "'<='", 
                            "'<>'", "'<:>'", "'='", "'!='", "'=='", "'~='", 
                            "'~'", "'<-'", "'->'", "'=>'", "'Boolean'", 
                            "'Css'", "'Character'", "'Text'", "'Integer'", 
                            "'Decimal'", "'Date'", "'Time'", "'DateTime'", 
                            "'Period'", "'Version'", "'Method:'", "'Code'", 
                            "'Document'", "'Blob'", "'Image'", "'Uuid'", 
                            "'Iterator'", "'Cursor'", "'Html'", "'Type'", 
                            "'abstract'", "'all'", "'always'", "'and'", 
                            "'any'", "'as'", null, "'attr'", "'attribute'", 
                            "'attributes'", "'bindings'", "'break'", "'by'", 
                            "'case'", "'catch'", "'category'", "'class'", 
                            "'contains'", "'def'", "'default'", "'define'", 
                            "'delete'", null, "'do'", "'doing'", "'each'", 
                            "'else'", "'enum'", "'enumerated'", "'except'", 
                            "'execute'", "'expecting'", "'extends'", "'fetch'", 
                            "'filtered'", "'finally'", "'flush'", "'for'", 
                            "'from'", "'getter'", "'has'", "'if'", "'in'", 
                            "'index'", "'invoke:'", "'is'", "'matching'", 
                            "'method'", "'methods'", "'modulo'", "'mutable'", 
                            "'native'", "'None'", "'not'", null, "'null'", 
                            "'on'", "'one'", "'operator'", "'or'", "'order'", 
                            "'otherwise'", "'pass'", "'raise'", "'read'", 
                            "'receiving'", "'resource'", "'return'", "'returning'", 
                            "'rows'", "'self'", "'setter'", "'singleton'", 
                            "'sorted'", "'storable'", "'store'", "'super'", 
                            "'switch'", "'test'", "'then'", "'this'", "'throw'", 
                            "'to'", "'try'", "'verifying'", "'widget'", 
                            "'with'", "'when'", "'where'", "'while'", "'write'", 
                            null, null, "'MIN_INTEGER'", "'MAX_INTEGER'" ];
    static symbolicNames = [ null, "INDENT", "DEDENT", "LF_TAB", "LF_MORE", 
                             "LF", "TAB", "WS", "COMMENT", "JAVA", "CSHARP", 
                             "PYTHON2", "PYTHON3", "JAVASCRIPT", "SWIFT", 
                             "COLON", "SEMI", "COMMA", "RANGE", "DOT", "LPAR", 
                             "RPAR", "LBRAK", "RBRAK", "LCURL", "RCURL", 
                             "QMARK", "XMARK", "AMP", "AMP2", "PIPE", "PIPE2", 
                             "PLUS", "MINUS", "STAR", "SLASH", "BSLASH", 
                             "PERCENT", "SHARP", "GT", "GTE", "LT", "LTE", 
                             "LTGT", "LTCOLONGT", "EQ", "XEQ", "EQ2", "TEQ", 
                             "TILDE", "LARROW", "RARROW", "EGT", "BOOLEAN", 
                             "CSS", "CHARACTER", "TEXT", "INTEGER", "DECIMAL", 
                             "DATE", "TIME", "DATETIME", "PERIOD", "VERSION", 
                             "METHOD_COLON", "CODE", "DOCUMENT", "BLOB", 
                             "IMAGE", "UUID", "ITERATOR", "CURSOR", "HTML", 
                             "TYPE", "ABSTRACT", "ALL", "ALWAYS", "AND", 
                             "ANY", "AS", "ASC", "ATTR", "ATTRIBUTE", "ATTRIBUTES", 
                             "BINDINGS", "BREAK", "BY", "CASE", "CATCH", 
                             "CATEGORY", "CLASS", "CONTAINS", "DEF", "DEFAULT", 
                             "DEFINE", "DELETE", "DESC", "DO", "DOING", 
                             "EACH", "ELSE", "ENUM", "ENUMERATED", "EXCEPT", 
                             "EXECUTE", "EXPECTING", "EXTENDS", "FETCH", 
                             "FILTERED", "FINALLY", "FLUSH", "FOR", "FROM", 
                             "GETTER", "HAS", "IF", "IN", "INDEX", "INVOKE_COLON", 
                             "IS", "MATCHING", "METHOD", "METHODS", "MODULO", 
                             "MUTABLE", "NATIVE", "NONE", "NOT", "NOTHING", 
                             "NULL", "ON", "ONE", "OPERATOR", "OR", "ORDER", 
                             "OTHERWISE", "PASS", "RAISE", "READ", "RECEIVING", 
                             "RESOURCE", "RETURN", "RETURNING", "ROWS", 
                             "SELF", "SETTER", "SINGLETON", "SORTED", "STORABLE", 
                             "STORE", "SUPER", "SWITCH", "TEST", "THEN", 
                             "THIS", "THROW", "TO", "TRY", "VERIFYING", 
                             "WIDGET", "WITH", "WHEN", "WHERE", "WHILE", 
                             "WRITE", "BOOLEAN_LITERAL", "CHAR_LITERAL", 
                             "MIN_INTEGER", "MAX_INTEGER", "SYMBOL_IDENTIFIER", 
                             "TYPE_IDENTIFIER", "VARIABLE_IDENTIFIER", "NATIVE_IDENTIFIER", 
                             "DOLLAR_IDENTIFIER", "ARONDBASE_IDENTIFIER", 
                             "TEXT_LITERAL", "UUID_LITERAL", "INTEGER_LITERAL", 
                             "HEXA_LITERAL", "DECIMAL_LITERAL", "DATETIME_LITERAL", 
                             "TIME_LITERAL", "DATE_LITERAL", "PERIOD_LITERAL", 
                             "VERSION_LITERAL", "JSX_TEXT" ];
    static ruleNames = [ "enum_category_declaration", "enum_native_declaration", 
                         "native_symbol", "category_symbol", "attribute_declaration", 
                         "concrete_widget_declaration", "native_widget_declaration", 
                         "concrete_category_declaration", "singleton_category_declaration", 
                         "derived_list", "operator_method_declaration", 
                         "setter_method_declaration", "native_setter_declaration", 
                         "getter_method_declaration", "native_getter_declaration", 
                         "native_category_declaration", "native_resource_declaration", 
                         "native_category_bindings", "native_category_binding_list", 
                         "attribute_list", "abstract_method_declaration", 
                         "concrete_method_declaration", "native_method_declaration", 
                         "test_method_declaration", "assertion", "full_argument_list", 
                         "typed_argument", "statement", "flush_statement", 
                         "store_statement", "method_call_statement", "with_resource_statement", 
                         "with_singleton_statement", "switch_statement", 
                         "switch_case_statement", "for_each_statement", 
                         "do_while_statement", "while_statement", "if_statement", 
                         "else_if_statement_list", "raise_statement", "try_statement", 
                         "catch_statement", "break_statement", "return_statement", 
                         "expression", "filter_expression", "unresolved_expression", 
                         "unresolved_selector", "invocation_expression", 
                         "invocation_trailer", "selectable_expression", 
                         "instance_expression", "instance_selector", "mutable_instance_expression", 
                         "document_expression", "blob_expression", "constructor_expression", 
                         "write_statement", "ambiguous_expression", "filtered_list_suffix", 
                         "fetch_expression", "fetch_statement", "read_statement", 
                         "sorted_expression", "argument_assignment_list", 
                         "with_argument_assignment_list", "argument_assignment", 
                         "assign_instance_statement", "child_instance", 
                         "assign_tuple_statement", "lfs", "lfp", "ws_plus", 
                         "indent", "dedent", "type_literal", "null_literal", 
                         "repl", "declaration_list", "declarations", "declaration", 
                         "annotation_constructor", "annotation_identifier", 
                         "annotation_argument", "annotation_argument_name", 
                         "annotation_argument_value", "resource_declaration", 
                         "enum_declaration", "native_symbol_list", "category_symbol_list", 
                         "symbol_list", "attribute_constraint", "list_literal", 
                         "set_literal", "expression_list", "range_literal", 
                         "typedef", "primary_type", "native_type", "category_type", 
                         "mutable_category_type", "code_type", "category_declaration", 
                         "widget_declaration", "type_identifier_list", "method_identifier", 
                         "identifier_or_keyword", "nospace_hyphen_identifier_or_keyword", 
                         "nospace_identifier_or_keyword", "identifier", 
                         "member_identifier", "variable_identifier", "attribute_identifier", 
                         "type_identifier", "symbol_identifier", "argument_list", 
                         "argument", "operator_argument", "named_argument", 
                         "code_argument", "category_or_any_type", "any_type", 
                         "member_method_declaration_list", "member_method_declaration", 
                         "native_member_method_declaration_list", "native_member_method_declaration", 
                         "native_category_binding", "python_category_binding", 
                         "python_module", "javascript_category_binding", 
                         "javascript_module", "variable_identifier_list", 
                         "attribute_identifier_list", "method_declaration", 
                         "comment_statement", "native_statement_list", "native_statement", 
                         "python_native_statement", "javascript_native_statement", 
                         "statement_list", "assertion_list", "switch_case_statement_list", 
                         "catch_statement_list", "literal_collection", "atomic_literal", 
                         "literal_list_literal", "this_expression", "super_expression", 
                         "parenthesis_expression", "literal_expression", 
                         "collection_literal", "tuple_literal", "dict_literal", 
                         "document_literal", "expression_tuple", "doc_entry_list", 
                         "doc_entry", "doc_key", "dict_entry_list", "dict_entry", 
                         "dict_key", "slice_arguments", "assign_variable_statement", 
                         "assignable_instance", "is_expression", "arrow_expression", 
                         "arrow_prefix", "arrow_args", "sorted_key", "read_blob_expression", 
                         "read_all_expression", "read_one_expression", "order_by_list", 
                         "order_by", "operator", "keyword", "new_token", 
                         "key_token", "module_token", "value_token", "symbols_token", 
                         "assign", "multiply", "divide", "idivide", "modulo", 
                         "javascript_statement", "javascript_expression", 
                         "javascript_primary_expression", "javascript_this_expression", 
                         "javascript_new_expression", "javascript_selector_expression", 
                         "javascript_method_expression", "javascript_arguments", 
                         "javascript_item_expression", "javascript_parenthesis_expression", 
                         "javascript_identifier_expression", "javascript_literal_expression", 
                         "javascript_identifier", "python_statement", "python_expression", 
                         "python_primary_expression", "python_self_expression", 
                         "python_selector_expression", "python_method_expression", 
                         "python_argument_list", "python_ordinal_argument_list", 
                         "python_named_argument_list", "python_parenthesis_expression", 
                         "python_identifier_expression", "python_literal_expression", 
                         "python_identifier", "java_statement", "java_expression", 
                         "java_primary_expression", "java_this_expression", 
                         "java_new_expression", "java_selector_expression", 
                         "java_method_expression", "java_arguments", "java_item_expression", 
                         "java_parenthesis_expression", "java_identifier_expression", 
                         "java_class_identifier_expression", "java_literal_expression", 
                         "java_identifier", "csharp_statement", "csharp_expression", 
                         "csharp_primary_expression", "csharp_this_expression", 
                         "csharp_new_expression", "csharp_selector_expression", 
                         "csharp_method_expression", "csharp_arguments", 
                         "csharp_item_expression", "csharp_parenthesis_expression", 
                         "csharp_identifier_expression", "csharp_literal_expression", 
                         "csharp_identifier", "jsx_expression", "jsx_element", 
                         "jsx_fragment", "jsx_fragment_start", "jsx_fragment_end", 
                         "jsx_self_closing", "jsx_opening", "jsx_closing", 
                         "jsx_element_name", "jsx_identifier", "jsx_attribute", 
                         "jsx_attribute_value", "jsx_children", "jsx_child", 
                         "jsx_text", "jsx_char", "css_expression", "css_field", 
                         "css_identifier", "css_value", "css_text" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = EParser.ruleNames;
        this.literalNames = EParser.literalNames;
        this.symbolicNames = EParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 18:
    	    		return this.native_category_binding_list_sempred(localctx, predIndex);
    	case 39:
    	    		return this.else_if_statement_list_sempred(localctx, predIndex);
    	case 45:
    	    		return this.expression_sempred(localctx, predIndex);
    	case 47:
    	    		return this.unresolved_expression_sempred(localctx, predIndex);
    	case 48:
    	    		return this.unresolved_selector_sempred(localctx, predIndex);
    	case 50:
    	    		return this.invocation_trailer_sempred(localctx, predIndex);
    	case 52:
    	    		return this.instance_expression_sempred(localctx, predIndex);
    	case 53:
    	    		return this.instance_selector_sempred(localctx, predIndex);
    	case 54:
    	    		return this.mutable_instance_expression_sempred(localctx, predIndex);
    	case 65:
    	    		return this.argument_assignment_list_sempred(localctx, predIndex);
    	case 66:
    	    		return this.with_argument_assignment_list_sempred(localctx, predIndex);
    	case 69:
    	    		return this.child_instance_sempred(localctx, predIndex);
    	case 97:
    	    		return this.typedef_sempred(localctx, predIndex);
    	case 108:
    	    		return this.nospace_hyphen_identifier_or_keyword_sempred(localctx, predIndex);
    	case 109:
    	    		return this.nospace_identifier_or_keyword_sempred(localctx, predIndex);
    	case 122:
    	    		return this.any_type_sempred(localctx, predIndex);
    	case 164:
    	    		return this.assignable_instance_sempred(localctx, predIndex);
    	case 165:
    	    		return this.is_expression_sempred(localctx, predIndex);
    	case 177:
    	    		return this.new_token_sempred(localctx, predIndex);
    	case 178:
    	    		return this.key_token_sempred(localctx, predIndex);
    	case 179:
    	    		return this.module_token_sempred(localctx, predIndex);
    	case 180:
    	    		return this.value_token_sempred(localctx, predIndex);
    	case 181:
    	    		return this.symbols_token_sempred(localctx, predIndex);
    	case 188:
    	    		return this.javascript_expression_sempred(localctx, predIndex);
    	case 194:
    	    		return this.javascript_arguments_sempred(localctx, predIndex);
    	case 201:
    	    		return this.python_expression_sempred(localctx, predIndex);
    	case 207:
    	    		return this.python_ordinal_argument_list_sempred(localctx, predIndex);
    	case 208:
    	    		return this.python_named_argument_list_sempred(localctx, predIndex);
    	case 210:
    	    		return this.python_identifier_expression_sempred(localctx, predIndex);
    	case 214:
    	    		return this.java_expression_sempred(localctx, predIndex);
    	case 220:
    	    		return this.java_arguments_sempred(localctx, predIndex);
    	case 223:
    	    		return this.java_identifier_expression_sempred(localctx, predIndex);
    	case 224:
    	    		return this.java_class_identifier_expression_sempred(localctx, predIndex);
    	case 228:
    	    		return this.csharp_expression_sempred(localctx, predIndex);
    	case 234:
    	    		return this.csharp_arguments_sempred(localctx, predIndex);
    	case 237:
    	    		return this.csharp_identifier_expression_sempred(localctx, predIndex);
    	case 258:
    	    		return this.css_identifier_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    native_category_binding_list_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    else_if_statement_list_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 31);
    		case 3:
    			return this.precpred(this._ctx, 30);
    		case 4:
    			return this.precpred(this._ctx, 29);
    		case 5:
    			return this.precpred(this._ctx, 28);
    		case 6:
    			return this.precpred(this._ctx, 27);
    		case 7:
    			return this.precpred(this._ctx, 26);
    		case 8:
    			return this.precpred(this._ctx, 24);
    		case 9:
    			return this.precpred(this._ctx, 23);
    		case 10:
    			return this.precpred(this._ctx, 22);
    		case 11:
    			return this.precpred(this._ctx, 21);
    		case 12:
    			return this.precpred(this._ctx, 18);
    		case 13:
    			return this.precpred(this._ctx, 17);
    		case 14:
    			return this.precpred(this._ctx, 16);
    		case 15:
    			return this.precpred(this._ctx, 1);
    		case 16:
    			return this.precpred(this._ctx, 32);
    		case 17:
    			return this.precpred(this._ctx, 25);
    		case 18:
    			return this.precpred(this._ctx, 20);
    		case 19:
    			return this.precpred(this._ctx, 19);
    		case 20:
    			return this.precpred(this._ctx, 9);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    unresolved_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 21:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    unresolved_selector_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 22:
    			return this.wasNot(EParser.WS);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    invocation_trailer_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 23:
    			return this.willBe(EParser.LF);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    instance_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 24:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    instance_selector_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 25:
    			return this.wasNot(EParser.WS);
    		case 26:
    			return this.wasNot(EParser.WS);
    		case 27:
    			return this.wasNot(EParser.WS);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    mutable_instance_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 28:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    argument_assignment_list_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 29:
    			return this.was(EParser.WS);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    with_argument_assignment_list_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 30:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    child_instance_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 31:
    			return this.wasNot(EParser.WS);
    		case 32:
    			return this.wasNot(EParser.WS);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    typedef_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 33:
    			return this.precpred(this._ctx, 5);
    		case 34:
    			return this.precpred(this._ctx, 4);
    		case 35:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    nospace_hyphen_identifier_or_keyword_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 36:
    			return this.wasNotWhiteSpace();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    nospace_identifier_or_keyword_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 37:
    			return this.wasNotWhiteSpace();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    any_type_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 38:
    			return this.precpred(this._ctx, 2);
    		case 39:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    assignable_instance_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 40:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    is_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 41:
    			return this.willBeAOrAn();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    new_token_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 42:
    			return this.isText(localctx.i1,"new");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    key_token_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 43:
    			return this.isText(localctx.i1,"key");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    module_token_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 44:
    			return this.isText(localctx.i1,"module");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    value_token_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 45:
    			return this.isText(localctx.i1,"value");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    symbols_token_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 46:
    			return this.isText(localctx.i1,"symbols");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    javascript_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 47:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    javascript_arguments_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 48:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    python_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 49:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    python_ordinal_argument_list_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 50:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    python_named_argument_list_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 51:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    python_identifier_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 52:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    java_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 53:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    java_arguments_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 54:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    java_identifier_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 55:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    java_class_identifier_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 56:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    csharp_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 57:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    csharp_arguments_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 58:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    csharp_identifier_expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 59:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    css_identifier_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 60:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	enum_category_declaration() {
	    let localctx = new Enum_category_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, EParser.RULE_enum_category_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 522;
	        this.match(EParser.DEFINE);
	        this.state = 523;
	        localctx.name = this.type_identifier();
	        this.state = 524;
	        this.match(EParser.AS);
	        this.state = 525;
	        this.match(EParser.ENUMERATED);
	        this.state = 528;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.CATEGORY:
	            this.state = 526;
	            this.match(EParser.CATEGORY);
	            break;
	        case EParser.TYPE_IDENTIFIER:
	            this.state = 527;
	            localctx.derived = this.type_identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 535;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 530;
	            localctx.attrs = this.attribute_list();
	            this.state = 531;
	            this.match(EParser.COMMA);
	            this.state = 532;
	            this.match(EParser.AND);
	            break;

	        case 2:
	            this.state = 534;
	            this.match(EParser.WITH);
	            break;

	        }
	        this.state = 537;
	        this.symbols_token();
	        this.state = 538;
	        this.match(EParser.COLON);
	        this.state = 539;
	        this.indent();
	        this.state = 540;
	        localctx.symbols = this.category_symbol_list();
	        this.state = 541;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_native_declaration() {
	    let localctx = new Enum_native_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, EParser.RULE_enum_native_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 543;
	        this.match(EParser.DEFINE);
	        this.state = 544;
	        localctx.name = this.type_identifier();
	        this.state = 545;
	        this.match(EParser.AS);
	        this.state = 546;
	        this.match(EParser.ENUMERATED);
	        this.state = 547;
	        localctx.typ = this.native_type();
	        this.state = 548;
	        this.match(EParser.WITH);
	        this.state = 549;
	        this.symbols_token();
	        this.state = 550;
	        this.match(EParser.COLON);
	        this.state = 551;
	        this.indent();
	        this.state = 552;
	        localctx.symbols = this.native_symbol_list();
	        this.state = 553;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_symbol() {
	    let localctx = new Native_symbolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, EParser.RULE_native_symbol);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 555;
	        localctx.name = this.symbol_identifier();
	        this.state = 556;
	        this.match(EParser.WITH);
	        this.state = 557;
	        localctx.exp = this.expression(0);
	        this.state = 558;
	        this.match(EParser.AS);
	        this.state = 559;
	        this.value_token();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	category_symbol() {
	    let localctx = new Category_symbolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, EParser.RULE_category_symbol);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 561;
	        localctx.name = this.symbol_identifier();
	        this.state = 562;
	        localctx.args = this.with_argument_assignment_list(0);
	        this.state = 565;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.AND) {
	            this.state = 563;
	            this.match(EParser.AND);
	            this.state = 564;
	            localctx.arg = this.argument_assignment();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_declaration() {
	    let localctx = new Attribute_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, EParser.RULE_attribute_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 567;
	        this.match(EParser.DEFINE);
	        this.state = 568;
	        localctx.name = this.attribute_identifier();
	        this.state = 569;
	        this.match(EParser.AS);
	        this.state = 571;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.STORABLE) {
	            this.state = 570;
	            this.match(EParser.STORABLE);
	        }

	        this.state = 573;
	        localctx.typ = this.typedef(0);
	        this.state = 574;
	        this.match(EParser.ATTRIBUTE);
	        this.state = 576;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.IN || _la===EParser.MATCHING) {
	            this.state = 575;
	            localctx.match = this.attribute_constraint();
	        }

	        this.state = 587;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.WITH) {
	            this.state = 578;
	            this.match(EParser.WITH);
	            this.state = 584;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===EParser.VARIABLE_IDENTIFIER) {
	                this.state = 579;
	                localctx.indices = this.variable_identifier_list();
	                this.state = 582;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===EParser.AND) {
	                    this.state = 580;
	                    this.match(EParser.AND);
	                    this.state = 581;
	                    localctx.index = this.variable_identifier();
	                }

	            }

	            this.state = 586;
	            this.match(EParser.INDEX);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	concrete_widget_declaration() {
	    let localctx = new Concrete_widget_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, EParser.RULE_concrete_widget_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 589;
	        this.match(EParser.DEFINE);
	        this.state = 590;
	        localctx.name = this.type_identifier();
	        this.state = 591;
	        this.match(EParser.AS);
	        this.state = 594;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.WIDGET:
	            this.state = 592;
	            this.match(EParser.WIDGET);
	            break;
	        case EParser.TYPE_IDENTIFIER:
	            this.state = 593;
	            localctx.derived = this.type_identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 603;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.WITH) {
	            this.state = 596;
	            this.match(EParser.WITH);
	            this.state = 597;
	            this.match(EParser.METHODS);
	            this.state = 598;
	            this.match(EParser.COLON);
	            this.state = 599;
	            this.indent();
	            this.state = 600;
	            localctx.methods = this.member_method_declaration_list();
	            this.state = 601;
	            this.dedent();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_widget_declaration() {
	    let localctx = new Native_widget_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, EParser.RULE_native_widget_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 605;
	        this.match(EParser.DEFINE);
	        this.state = 606;
	        localctx.name = this.type_identifier();
	        this.state = 607;
	        this.match(EParser.AS);
	        this.state = 608;
	        this.match(EParser.NATIVE);
	        this.state = 609;
	        this.match(EParser.WIDGET);
	        this.state = 610;
	        this.match(EParser.WITH);
	        this.state = 611;
	        this.match(EParser.BINDINGS);
	        this.state = 612;
	        this.match(EParser.COLON);
	        this.state = 613;
	        this.indent();
	        this.state = 614;
	        localctx.bindings = this.native_category_bindings();
	        this.state = 615;
	        this.dedent();
	        this.state = 616;
	        this.lfp();
	        this.state = 617;
	        this.match(EParser.AND);
	        this.state = 618;
	        this.match(EParser.METHODS);
	        this.state = 619;
	        this.match(EParser.COLON);
	        this.state = 620;
	        this.indent();
	        this.state = 621;
	        localctx.methods = this.native_member_method_declaration_list();
	        this.state = 622;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	concrete_category_declaration() {
	    let localctx = new Concrete_category_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, EParser.RULE_concrete_category_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 624;
	        this.match(EParser.DEFINE);
	        this.state = 625;
	        localctx.name = this.type_identifier();
	        this.state = 626;
	        this.match(EParser.AS);
	        this.state = 628;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.STORABLE) {
	            this.state = 627;
	            this.match(EParser.STORABLE);
	        }

	        this.state = 632;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.CATEGORY:
	            this.state = 630;
	            this.match(EParser.CATEGORY);
	            break;
	        case EParser.TYPE_IDENTIFIER:
	            this.state = 631;
	            localctx.derived = this.derived_list();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 652;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        if(la_===1) {
	            this.state = 634;
	            localctx.attrs = this.attribute_list();
	            this.state = 643;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===EParser.COMMA) {
	                this.state = 635;
	                this.match(EParser.COMMA);
	                this.state = 636;
	                this.match(EParser.AND);
	                this.state = 637;
	                this.match(EParser.METHODS);
	                this.state = 638;
	                this.match(EParser.COLON);
	                this.state = 639;
	                this.indent();
	                this.state = 640;
	                localctx.methods = this.member_method_declaration_list();
	                this.state = 641;
	                this.dedent();
	            }


	        } else if(la_===2) {
	            this.state = 645;
	            this.match(EParser.WITH);
	            this.state = 646;
	            this.match(EParser.METHODS);
	            this.state = 647;
	            this.match(EParser.COLON);
	            this.state = 648;
	            this.indent();
	            this.state = 649;
	            localctx.methods = this.member_method_declaration_list();
	            this.state = 650;
	            this.dedent();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleton_category_declaration() {
	    let localctx = new Singleton_category_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, EParser.RULE_singleton_category_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 654;
	        this.match(EParser.DEFINE);
	        this.state = 655;
	        localctx.name = this.type_identifier();
	        this.state = 656;
	        this.match(EParser.AS);
	        this.state = 657;
	        this.match(EParser.SINGLETON);
	        this.state = 676;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        if(la_===1) {
	            this.state = 658;
	            localctx.attrs = this.attribute_list();
	            this.state = 667;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===EParser.COMMA) {
	                this.state = 659;
	                this.match(EParser.COMMA);
	                this.state = 660;
	                this.match(EParser.AND);
	                this.state = 661;
	                this.match(EParser.METHODS);
	                this.state = 662;
	                this.match(EParser.COLON);
	                this.state = 663;
	                this.indent();
	                this.state = 664;
	                localctx.methods = this.member_method_declaration_list();
	                this.state = 665;
	                this.dedent();
	            }


	        } else if(la_===2) {
	            this.state = 669;
	            this.match(EParser.WITH);
	            this.state = 670;
	            this.match(EParser.METHODS);
	            this.state = 671;
	            this.match(EParser.COLON);
	            this.state = 672;
	            this.indent();
	            this.state = 673;
	            localctx.methods = this.member_method_declaration_list();
	            this.state = 674;
	            this.dedent();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	derived_list() {
	    let localctx = new Derived_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, EParser.RULE_derived_list);
	    try {
	        this.state = 683;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DerivedListContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 678;
	            localctx.items = this.type_identifier_list();
	            break;

	        case 2:
	            localctx = new DerivedListItemContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 679;
	            localctx.items = this.type_identifier_list();
	            this.state = 680;
	            this.match(EParser.AND);
	            this.state = 681;
	            localctx.item = this.type_identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator_method_declaration() {
	    let localctx = new Operator_method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, EParser.RULE_operator_method_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 685;
	        this.match(EParser.DEFINE);
	        this.state = 686;
	        localctx.op = this.operator();
	        this.state = 687;
	        this.match(EParser.AS);
	        this.state = 688;
	        this.match(EParser.OPERATOR);
	        this.state = 689;
	        this.match(EParser.RECEIVING);
	        this.state = 690;
	        localctx.arg = this.operator_argument();
	        this.state = 693;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.RETURNING) {
	            this.state = 691;
	            this.match(EParser.RETURNING);
	            this.state = 692;
	            localctx.typ = this.typedef(0);
	        }

	        this.state = 695;
	        this.match(EParser.DOING);
	        this.state = 696;
	        this.match(EParser.COLON);
	        this.state = 697;
	        this.indent();
	        this.state = 698;
	        localctx.stmts = this.statement_list();
	        this.state = 699;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setter_method_declaration() {
	    let localctx = new Setter_method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, EParser.RULE_setter_method_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 701;
	        this.match(EParser.DEFINE);
	        this.state = 702;
	        localctx.name = this.variable_identifier();
	        this.state = 703;
	        this.match(EParser.AS);
	        this.state = 704;
	        this.match(EParser.SETTER);
	        this.state = 705;
	        this.match(EParser.DOING);
	        this.state = 706;
	        this.match(EParser.COLON);
	        this.state = 707;
	        this.indent();
	        this.state = 708;
	        localctx.stmts = this.statement_list();
	        this.state = 709;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_setter_declaration() {
	    let localctx = new Native_setter_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, EParser.RULE_native_setter_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 711;
	        this.match(EParser.DEFINE);
	        this.state = 712;
	        localctx.name = this.variable_identifier();
	        this.state = 713;
	        this.match(EParser.AS);
	        this.state = 715;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.NATIVE) {
	            this.state = 714;
	            this.match(EParser.NATIVE);
	        }

	        this.state = 717;
	        this.match(EParser.SETTER);
	        this.state = 718;
	        this.match(EParser.DOING);
	        this.state = 719;
	        this.match(EParser.COLON);
	        this.state = 720;
	        this.indent();
	        this.state = 721;
	        localctx.stmts = this.native_statement_list();
	        this.state = 722;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getter_method_declaration() {
	    let localctx = new Getter_method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, EParser.RULE_getter_method_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 724;
	        this.match(EParser.DEFINE);
	        this.state = 725;
	        localctx.name = this.variable_identifier();
	        this.state = 726;
	        this.match(EParser.AS);
	        this.state = 727;
	        this.match(EParser.GETTER);
	        this.state = 728;
	        this.match(EParser.DOING);
	        this.state = 729;
	        this.match(EParser.COLON);
	        this.state = 730;
	        this.indent();
	        this.state = 731;
	        localctx.stmts = this.statement_list();
	        this.state = 732;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_getter_declaration() {
	    let localctx = new Native_getter_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, EParser.RULE_native_getter_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 734;
	        this.match(EParser.DEFINE);
	        this.state = 735;
	        localctx.name = this.variable_identifier();
	        this.state = 736;
	        this.match(EParser.AS);
	        this.state = 738;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.NATIVE) {
	            this.state = 737;
	            this.match(EParser.NATIVE);
	        }

	        this.state = 740;
	        this.match(EParser.GETTER);
	        this.state = 741;
	        this.match(EParser.DOING);
	        this.state = 742;
	        this.match(EParser.COLON);
	        this.state = 743;
	        this.indent();
	        this.state = 744;
	        localctx.stmts = this.native_statement_list();
	        this.state = 745;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_category_declaration() {
	    let localctx = new Native_category_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, EParser.RULE_native_category_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 747;
	        this.match(EParser.DEFINE);
	        this.state = 748;
	        localctx.name = this.type_identifier();
	        this.state = 749;
	        this.match(EParser.AS);
	        this.state = 751;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.STORABLE) {
	            this.state = 750;
	            this.match(EParser.STORABLE);
	        }

	        this.state = 753;
	        this.match(EParser.NATIVE);
	        this.state = 754;
	        this.match(EParser.CATEGORY);
	        this.state = 762;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 755;
	            localctx.attrs = this.attribute_list();
	            this.state = 756;
	            this.match(EParser.COMMA);
	            this.state = 757;
	            this.match(EParser.AND);
	            this.state = 758;
	            this.match(EParser.BINDINGS);
	            break;

	        case 2:
	            this.state = 760;
	            this.match(EParser.WITH);
	            this.state = 761;
	            this.match(EParser.BINDINGS);
	            break;

	        }
	        this.state = 764;
	        this.match(EParser.COLON);
	        this.state = 765;
	        this.indent();
	        this.state = 766;
	        localctx.bindings = this.native_category_bindings();
	        this.state = 767;
	        this.dedent();
	        this.state = 776;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        if(la_===1) {
	            this.state = 768;
	            this.lfp();
	            this.state = 769;
	            this.match(EParser.AND);
	            this.state = 770;
	            this.match(EParser.METHODS);
	            this.state = 771;
	            this.match(EParser.COLON);
	            this.state = 772;
	            this.indent();
	            this.state = 773;
	            localctx.methods = this.native_member_method_declaration_list();
	            this.state = 774;
	            this.dedent();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_resource_declaration() {
	    let localctx = new Native_resource_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, EParser.RULE_native_resource_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 778;
	        this.match(EParser.DEFINE);
	        this.state = 779;
	        localctx.name = this.type_identifier();
	        this.state = 780;
	        this.match(EParser.AS);
	        this.state = 782;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.STORABLE) {
	            this.state = 781;
	            this.match(EParser.STORABLE);
	        }

	        this.state = 784;
	        this.match(EParser.NATIVE);
	        this.state = 785;
	        this.match(EParser.RESOURCE);
	        this.state = 793;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 786;
	            localctx.attrs = this.attribute_list();
	            this.state = 787;
	            this.match(EParser.COMMA);
	            this.state = 788;
	            this.match(EParser.AND);
	            this.state = 789;
	            this.match(EParser.BINDINGS);
	            break;

	        case 2:
	            this.state = 791;
	            this.match(EParser.WITH);
	            this.state = 792;
	            this.match(EParser.BINDINGS);
	            break;

	        }
	        this.state = 795;
	        this.match(EParser.COLON);
	        this.state = 796;
	        this.indent();
	        this.state = 797;
	        localctx.bindings = this.native_category_bindings();
	        this.state = 798;
	        this.dedent();
	        this.state = 807;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        if(la_===1) {
	            this.state = 799;
	            this.lfp();
	            this.state = 800;
	            this.match(EParser.AND);
	            this.state = 801;
	            this.match(EParser.METHODS);
	            this.state = 802;
	            this.match(EParser.COLON);
	            this.state = 803;
	            this.indent();
	            this.state = 804;
	            localctx.methods = this.native_member_method_declaration_list();
	            this.state = 805;
	            this.dedent();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_category_bindings() {
	    let localctx = new Native_category_bindingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, EParser.RULE_native_category_bindings);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 809;
	        this.match(EParser.DEFINE);
	        this.state = 810;
	        this.match(EParser.CATEGORY);
	        this.state = 811;
	        this.match(EParser.BINDINGS);
	        this.state = 812;
	        this.match(EParser.AS);
	        this.state = 813;
	        this.match(EParser.COLON);
	        this.state = 814;
	        this.indent();
	        this.state = 815;
	        localctx.items = this.native_category_binding_list(0);
	        this.state = 816;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	native_category_binding_list(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Native_category_binding_listContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 36;
	    this.enterRecursionRule(localctx, 36, EParser.RULE_native_category_binding_list, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new NativeCategoryBindingListContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 819;
	        localctx.item = this.native_category_binding();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 827;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new NativeCategoryBindingListItemContext(this, new Native_category_binding_listContext(this, _parentctx, _parentState));
	                localctx.items = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_native_category_binding_list);
	                this.state = 821;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 822;
	                this.lfp();
	                this.state = 823;
	                localctx.item = this.native_category_binding(); 
	            }
	            this.state = 829;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	attribute_list() {
	    let localctx = new Attribute_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, EParser.RULE_attribute_list);
	    try {
	        this.state = 840;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AttributeListContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 830;
	            this.match(EParser.WITH);
	            this.state = 831;
	            this.match(EParser.ATTRIBUTE);
	            this.state = 832;
	            localctx.item = this.attribute_identifier();
	            break;

	        case 2:
	            localctx = new AttributeListItemContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 833;
	            this.match(EParser.WITH);
	            this.state = 834;
	            this.match(EParser.ATTRIBUTES);
	            this.state = 835;
	            localctx.items = this.attribute_identifier_list();
	            this.state = 838;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	            if(la_===1) {
	                this.state = 836;
	                this.match(EParser.AND);
	                this.state = 837;
	                localctx.item = this.attribute_identifier();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abstract_method_declaration() {
	    let localctx = new Abstract_method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, EParser.RULE_abstract_method_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 842;
	        this.match(EParser.DEFINE);
	        this.state = 843;
	        localctx.name = this.method_identifier();
	        this.state = 844;
	        this.match(EParser.AS);
	        this.state = 845;
	        this.match(EParser.ABSTRACT);
	        this.state = 846;
	        this.match(EParser.METHOD);
	        this.state = 849;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.RECEIVING) {
	            this.state = 847;
	            this.match(EParser.RECEIVING);
	            this.state = 848;
	            localctx.args = this.full_argument_list();
	        }

	        this.state = 856;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.RETURNING) {
	            this.state = 851;
	            this.match(EParser.RETURNING);
	            this.state = 853;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===EParser.MUTABLE) {
	                this.state = 852;
	                this.match(EParser.MUTABLE);
	            }

	            this.state = 855;
	            localctx.typ = this.typedef(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	concrete_method_declaration() {
	    let localctx = new Concrete_method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, EParser.RULE_concrete_method_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 858;
	        this.match(EParser.DEFINE);
	        this.state = 859;
	        localctx.name = this.method_identifier();
	        this.state = 860;
	        this.match(EParser.AS);
	        this.state = 861;
	        this.match(EParser.METHOD);
	        this.state = 864;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.RECEIVING) {
	            this.state = 862;
	            this.match(EParser.RECEIVING);
	            this.state = 863;
	            localctx.args = this.full_argument_list();
	        }

	        this.state = 871;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.RETURNING) {
	            this.state = 866;
	            this.match(EParser.RETURNING);
	            this.state = 868;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===EParser.MUTABLE) {
	                this.state = 867;
	                this.match(EParser.MUTABLE);
	            }

	            this.state = 870;
	            localctx.typ = this.typedef(0);
	        }

	        this.state = 873;
	        this.match(EParser.DOING);
	        this.state = 874;
	        this.match(EParser.COLON);
	        this.state = 875;
	        this.indent();
	        this.state = 878;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.COMMENT:
	        case EParser.LPAR:
	        case EParser.LBRAK:
	        case EParser.LCURL:
	        case EParser.MINUS:
	        case EParser.LT:
	        case EParser.LTCOLONGT:
	        case EParser.TYPE:
	        case EParser.BREAK:
	        case EParser.DEFINE:
	        case EParser.DELETE:
	        case EParser.DO:
	        case EParser.FETCH:
	        case EParser.FLUSH:
	        case EParser.FOR:
	        case EParser.IF:
	        case EParser.INVOKE_COLON:
	        case EParser.MUTABLE:
	        case EParser.NOTHING:
	        case EParser.RAISE:
	        case EParser.READ:
	        case EParser.RETURN:
	        case EParser.SELF:
	        case EParser.STORE:
	        case EParser.SUPER:
	        case EParser.SWITCH:
	        case EParser.THIS:
	        case EParser.WITH:
	        case EParser.WHILE:
	        case EParser.WRITE:
	        case EParser.BOOLEAN_LITERAL:
	        case EParser.CHAR_LITERAL:
	        case EParser.MIN_INTEGER:
	        case EParser.MAX_INTEGER:
	        case EParser.SYMBOL_IDENTIFIER:
	        case EParser.TYPE_IDENTIFIER:
	        case EParser.VARIABLE_IDENTIFIER:
	        case EParser.TEXT_LITERAL:
	        case EParser.UUID_LITERAL:
	        case EParser.INTEGER_LITERAL:
	        case EParser.HEXA_LITERAL:
	        case EParser.DECIMAL_LITERAL:
	        case EParser.DATETIME_LITERAL:
	        case EParser.TIME_LITERAL:
	        case EParser.DATE_LITERAL:
	        case EParser.PERIOD_LITERAL:
	        case EParser.VERSION_LITERAL:
	            this.state = 876;
	            localctx.stmts = this.statement_list();
	            break;
	        case EParser.PASS:
	            this.state = 877;
	            this.match(EParser.PASS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 880;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_method_declaration() {
	    let localctx = new Native_method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, EParser.RULE_native_method_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 882;
	        this.match(EParser.DEFINE);
	        this.state = 883;
	        localctx.name = this.method_identifier();
	        this.state = 884;
	        this.match(EParser.AS);
	        this.state = 886;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.NATIVE) {
	            this.state = 885;
	            this.match(EParser.NATIVE);
	        }

	        this.state = 888;
	        this.match(EParser.METHOD);
	        this.state = 891;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.RECEIVING) {
	            this.state = 889;
	            this.match(EParser.RECEIVING);
	            this.state = 890;
	            localctx.args = this.full_argument_list();
	        }

	        this.state = 895;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.RETURNING) {
	            this.state = 893;
	            this.match(EParser.RETURNING);
	            this.state = 894;
	            localctx.typ = this.category_or_any_type();
	        }

	        this.state = 897;
	        this.match(EParser.DOING);
	        this.state = 898;
	        this.match(EParser.COLON);
	        this.state = 899;
	        this.indent();
	        this.state = 900;
	        localctx.stmts = this.native_statement_list();
	        this.state = 901;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	test_method_declaration() {
	    let localctx = new Test_method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, EParser.RULE_test_method_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 903;
	        this.match(EParser.DEFINE);
	        this.state = 904;
	        localctx.name = this.match(EParser.TEXT_LITERAL);
	        this.state = 905;
	        this.match(EParser.AS);
	        this.state = 906;
	        this.match(EParser.TEST);
	        this.state = 907;
	        this.match(EParser.METHOD);
	        this.state = 908;
	        this.match(EParser.DOING);
	        this.state = 909;
	        this.match(EParser.COLON);
	        this.state = 910;
	        this.indent();
	        this.state = 911;
	        localctx.stmts = this.statement_list();
	        this.state = 912;
	        this.dedent();
	        this.state = 913;
	        this.lfp();
	        this.state = 914;
	        this.match(EParser.AND);
	        this.state = 915;
	        this.match(EParser.VERIFYING);
	        this.state = 922;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.COLON:
	            this.state = 916;
	            this.match(EParser.COLON);
	            this.state = 917;
	            this.indent();
	            this.state = 918;
	            localctx.exps = this.assertion_list();
	            this.state = 919;
	            this.dedent();
	            break;
	        case EParser.SYMBOL_IDENTIFIER:
	            this.state = 921;
	            localctx.error = this.symbol_identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertion() {
	    let localctx = new AssertionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, EParser.RULE_assertion);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 924;
	        localctx.exp = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	full_argument_list() {
	    let localctx = new Full_argument_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, EParser.RULE_full_argument_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 926;
	        localctx.items = this.argument_list();
	        this.state = 929;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.AND) {
	            this.state = 927;
	            this.match(EParser.AND);
	            this.state = 928;
	            localctx.item = this.argument();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typed_argument() {
	    let localctx = new Typed_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, EParser.RULE_typed_argument);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 931;
	        localctx.typ = this.category_or_any_type();
	        this.state = 932;
	        localctx.name = this.variable_identifier();
	        this.state = 934;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.WITH) {
	            this.state = 933;
	            localctx.attrs = this.attribute_list();
	        }

	        this.state = 938;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.EQ) {
	            this.state = 936;
	            this.match(EParser.EQ);
	            this.state = 937;
	            localctx.value = this.literal_expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, EParser.RULE_statement);
	    try {
	        this.state = 961;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AssignInstanceStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 940;
	            localctx.stmt = this.assign_instance_statement();
	            break;

	        case 2:
	            localctx = new MethodCallStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 941;
	            localctx.stmt = this.method_call_statement();
	            break;

	        case 3:
	            localctx = new AssignTupleStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 942;
	            localctx.stmt = this.assign_tuple_statement();
	            break;

	        case 4:
	            localctx = new StoreStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 943;
	            localctx.stmt = this.store_statement();
	            break;

	        case 5:
	            localctx = new FetchStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 944;
	            localctx.stmt = this.fetch_statement();
	            break;

	        case 6:
	            localctx = new ReadStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 945;
	            localctx.stmt = this.read_statement();
	            break;

	        case 7:
	            localctx = new FlushStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 946;
	            localctx.stmt = this.flush_statement();
	            break;

	        case 8:
	            localctx = new BreakStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 947;
	            localctx.stmt = this.break_statement();
	            break;

	        case 9:
	            localctx = new ReturnStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 948;
	            localctx.stmt = this.return_statement();
	            break;

	        case 10:
	            localctx = new IfStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 949;
	            localctx.stmt = this.if_statement();
	            break;

	        case 11:
	            localctx = new SwitchStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 950;
	            localctx.stmt = this.switch_statement();
	            break;

	        case 12:
	            localctx = new ForEachStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 951;
	            localctx.stmt = this.for_each_statement();
	            break;

	        case 13:
	            localctx = new WhileStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 952;
	            localctx.stmt = this.while_statement();
	            break;

	        case 14:
	            localctx = new DoWhileStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 953;
	            localctx.stmt = this.do_while_statement();
	            break;

	        case 15:
	            localctx = new RaiseStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 954;
	            localctx.stmt = this.raise_statement();
	            break;

	        case 16:
	            localctx = new TryStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 955;
	            localctx.stmt = this.try_statement();
	            break;

	        case 17:
	            localctx = new WriteStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 956;
	            localctx.stmt = this.write_statement();
	            break;

	        case 18:
	            localctx = new WithResourceStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 957;
	            localctx.stmt = this.with_resource_statement();
	            break;

	        case 19:
	            localctx = new WithSingletonStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 958;
	            localctx.stmt = this.with_singleton_statement();
	            break;

	        case 20:
	            localctx = new ClosureStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 959;
	            localctx.decl = this.concrete_method_declaration();
	            break;

	        case 21:
	            localctx = new CommentStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 960;
	            localctx.decl = this.comment_statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flush_statement() {
	    let localctx = new Flush_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, EParser.RULE_flush_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 963;
	        this.match(EParser.FLUSH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	store_statement() {
	    let localctx = new Store_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, EParser.RULE_store_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 974;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.DELETE:
	            this.state = 965;
	            this.match(EParser.DELETE);
	            this.state = 966;
	            localctx.to_del = this.expression_list();
	            this.state = 970;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===EParser.AND) {
	                this.state = 967;
	                this.match(EParser.AND);
	                this.state = 968;
	                this.match(EParser.STORE);
	                this.state = 969;
	                localctx.to_add = this.expression_list();
	            }

	            break;
	        case EParser.STORE:
	            this.state = 972;
	            this.match(EParser.STORE);
	            this.state = 973;
	            localctx.to_add = this.expression_list();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 982;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.THEN) {
	            this.state = 976;
	            this.match(EParser.THEN);
	            this.state = 977;
	            this.match(EParser.COLON);
	            this.state = 978;
	            this.indent();
	            this.state = 979;
	            localctx.stmts = this.statement_list();
	            this.state = 980;
	            this.dedent();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	method_call_statement() {
	    let localctx = new Method_call_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, EParser.RULE_method_call_statement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1004;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.LPAR:
	        case EParser.LBRAK:
	        case EParser.LCURL:
	        case EParser.MINUS:
	        case EParser.LT:
	        case EParser.LTCOLONGT:
	        case EParser.TYPE:
	        case EParser.MUTABLE:
	        case EParser.NOTHING:
	        case EParser.SELF:
	        case EParser.SUPER:
	        case EParser.THIS:
	        case EParser.BOOLEAN_LITERAL:
	        case EParser.CHAR_LITERAL:
	        case EParser.MIN_INTEGER:
	        case EParser.MAX_INTEGER:
	        case EParser.SYMBOL_IDENTIFIER:
	        case EParser.TYPE_IDENTIFIER:
	        case EParser.VARIABLE_IDENTIFIER:
	        case EParser.TEXT_LITERAL:
	        case EParser.UUID_LITERAL:
	        case EParser.INTEGER_LITERAL:
	        case EParser.HEXA_LITERAL:
	        case EParser.DECIMAL_LITERAL:
	        case EParser.DATETIME_LITERAL:
	        case EParser.TIME_LITERAL:
	        case EParser.DATE_LITERAL:
	        case EParser.PERIOD_LITERAL:
	        case EParser.VERSION_LITERAL:
	            localctx = new UnresolvedWithArgsStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 986;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 984;
	                localctx.exp1 = this.instance_expression(0);
	                break;

	            case 2:
	                this.state = 985;
	                localctx.exp2 = this.unresolved_expression(0);
	                break;

	            }
	            this.state = 989;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	            if(la_===1) {
	                this.state = 988;
	                localctx.args = this.argument_assignment_list();

	            }
	            this.state = 1001;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===EParser.THEN) {
	                this.state = 991;
	                this.match(EParser.THEN);
	                this.state = 994;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===EParser.WITH) {
	                    this.state = 992;
	                    this.match(EParser.WITH);
	                    this.state = 993;
	                    localctx.name = this.variable_identifier();
	                }

	                this.state = 996;
	                this.match(EParser.COLON);
	                this.state = 997;
	                this.indent();
	                this.state = 998;
	                localctx.stmts = this.statement_list();
	                this.state = 999;
	                this.dedent();
	            }

	            break;
	        case EParser.INVOKE_COLON:
	            localctx = new InvokeStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1003;
	            localctx.exp = this.invocation_expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_resource_statement() {
	    let localctx = new With_resource_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, EParser.RULE_with_resource_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1006;
	        this.match(EParser.WITH);
	        this.state = 1007;
	        localctx.stmt = this.assign_variable_statement();
	        this.state = 1008;
	        this.match(EParser.COMMA);
	        this.state = 1009;
	        this.match(EParser.DO);
	        this.state = 1010;
	        this.match(EParser.COLON);
	        this.state = 1011;
	        this.indent();
	        this.state = 1012;
	        localctx.stmts = this.statement_list();
	        this.state = 1013;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_singleton_statement() {
	    let localctx = new With_singleton_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, EParser.RULE_with_singleton_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1015;
	        this.match(EParser.WITH);
	        this.state = 1016;
	        localctx.typ = this.type_identifier();
	        this.state = 1017;
	        this.match(EParser.COMMA);
	        this.state = 1018;
	        this.match(EParser.DO);
	        this.state = 1019;
	        this.match(EParser.COLON);
	        this.state = 1020;
	        this.indent();
	        this.state = 1021;
	        localctx.stmts = this.statement_list();
	        this.state = 1022;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_statement() {
	    let localctx = new Switch_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, EParser.RULE_switch_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1024;
	        this.match(EParser.SWITCH);
	        this.state = 1025;
	        this.match(EParser.ON);
	        this.state = 1026;
	        localctx.exp = this.expression(0);
	        this.state = 1027;
	        this.match(EParser.COLON);
	        this.state = 1028;
	        this.indent();
	        this.state = 1029;
	        localctx.cases = this.switch_case_statement_list();
	        this.state = 1037;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	        if(la_===1) {
	            this.state = 1030;
	            this.lfp();
	            this.state = 1031;
	            this.match(EParser.OTHERWISE);
	            this.state = 1032;
	            this.match(EParser.COLON);
	            this.state = 1033;
	            this.indent();
	            this.state = 1034;
	            localctx.stmts = this.statement_list();
	            this.state = 1035;
	            this.dedent();

	        }
	        this.state = 1039;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_case_statement() {
	    let localctx = new Switch_case_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, EParser.RULE_switch_case_statement);
	    try {
	        this.state = 1056;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AtomicSwitchCaseContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1041;
	            this.match(EParser.WHEN);
	            this.state = 1042;
	            localctx.exp = this.atomic_literal();
	            this.state = 1043;
	            this.match(EParser.COLON);
	            this.state = 1044;
	            this.indent();
	            this.state = 1045;
	            localctx.stmts = this.statement_list();
	            this.state = 1046;
	            this.dedent();
	            break;

	        case 2:
	            localctx = new CollectionSwitchCaseContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1048;
	            this.match(EParser.WHEN);
	            this.state = 1049;
	            this.match(EParser.IN);
	            this.state = 1050;
	            localctx.exp = this.literal_collection();
	            this.state = 1051;
	            this.match(EParser.COLON);
	            this.state = 1052;
	            this.indent();
	            this.state = 1053;
	            localctx.stmts = this.statement_list();
	            this.state = 1054;
	            this.dedent();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_each_statement() {
	    let localctx = new For_each_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, EParser.RULE_for_each_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1058;
	        this.match(EParser.FOR);
	        this.state = 1059;
	        this.match(EParser.EACH);
	        this.state = 1060;
	        localctx.name1 = this.variable_identifier();
	        this.state = 1063;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.COMMA) {
	            this.state = 1061;
	            this.match(EParser.COMMA);
	            this.state = 1062;
	            localctx.name2 = this.variable_identifier();
	        }

	        this.state = 1065;
	        this.match(EParser.IN);
	        this.state = 1066;
	        localctx.source = this.expression(0);
	        this.state = 1067;
	        this.match(EParser.COLON);
	        this.state = 1068;
	        this.indent();
	        this.state = 1069;
	        localctx.stmts = this.statement_list();
	        this.state = 1070;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	do_while_statement() {
	    let localctx = new Do_while_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, EParser.RULE_do_while_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1072;
	        this.match(EParser.DO);
	        this.state = 1073;
	        this.match(EParser.COLON);
	        this.state = 1074;
	        this.indent();
	        this.state = 1075;
	        localctx.stmts = this.statement_list();
	        this.state = 1076;
	        this.dedent();
	        this.state = 1077;
	        this.lfp();
	        this.state = 1078;
	        this.match(EParser.WHILE);
	        this.state = 1079;
	        localctx.exp = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	while_statement() {
	    let localctx = new While_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, EParser.RULE_while_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1081;
	        this.match(EParser.WHILE);
	        this.state = 1082;
	        localctx.exp = this.expression(0);
	        this.state = 1083;
	        this.match(EParser.COLON);
	        this.state = 1084;
	        this.indent();
	        this.state = 1085;
	        localctx.stmts = this.statement_list();
	        this.state = 1086;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_statement() {
	    let localctx = new If_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, EParser.RULE_if_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1088;
	        this.match(EParser.IF);
	        this.state = 1089;
	        localctx.exp = this.expression(0);
	        this.state = 1090;
	        this.match(EParser.COLON);
	        this.state = 1091;
	        this.indent();
	        this.state = 1092;
	        localctx.stmts = this.statement_list();
	        this.state = 1093;
	        this.dedent();
	        this.state = 1097;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	        if(la_===1) {
	            this.state = 1094;
	            this.lfp();
	            this.state = 1095;
	            localctx.elseIfs = this.else_if_statement_list(0);

	        }
	        this.state = 1106;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	        if(la_===1) {
	            this.state = 1099;
	            this.lfp();
	            this.state = 1100;
	            this.match(EParser.ELSE);
	            this.state = 1101;
	            this.match(EParser.COLON);
	            this.state = 1102;
	            this.indent();
	            this.state = 1103;
	            localctx.elseStmts = this.statement_list();
	            this.state = 1104;
	            this.dedent();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	else_if_statement_list(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Else_if_statement_listContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 78;
	    this.enterRecursionRule(localctx, 78, EParser.RULE_else_if_statement_list, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new ElseIfStatementListContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 1109;
	        this.match(EParser.ELSE);
	        this.state = 1110;
	        this.match(EParser.IF);
	        this.state = 1111;
	        localctx.exp = this.expression(0);
	        this.state = 1112;
	        this.match(EParser.COLON);
	        this.state = 1113;
	        this.indent();
	        this.state = 1114;
	        localctx.stmts = this.statement_list();
	        this.state = 1115;
	        this.dedent();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1129;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,57,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ElseIfStatementListItemContext(this, new Else_if_statement_listContext(this, _parentctx, _parentState));
	                localctx.items = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_else_if_statement_list);
	                this.state = 1117;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1118;
	                this.lfp();
	                this.state = 1119;
	                this.match(EParser.ELSE);
	                this.state = 1120;
	                this.match(EParser.IF);
	                this.state = 1121;
	                localctx.exp = this.expression(0);
	                this.state = 1122;
	                this.match(EParser.COLON);
	                this.state = 1123;
	                this.indent();
	                this.state = 1124;
	                localctx.stmts = this.statement_list();
	                this.state = 1125;
	                this.dedent(); 
	            }
	            this.state = 1131;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,57,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	raise_statement() {
	    let localctx = new Raise_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, EParser.RULE_raise_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1132;
	        this.match(EParser.RAISE);
	        this.state = 1133;
	        localctx.exp = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	try_statement() {
	    let localctx = new Try_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, EParser.RULE_try_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1135;
	        this.match(EParser.SWITCH);
	        this.state = 1136;
	        this.match(EParser.ON);
	        this.state = 1137;
	        localctx.name = this.variable_identifier();
	        this.state = 1138;
	        this.match(EParser.DOING);
	        this.state = 1139;
	        this.match(EParser.COLON);
	        this.state = 1140;
	        this.indent();
	        this.state = 1141;
	        localctx.stmts = this.statement_list();
	        this.state = 1142;
	        this.dedent();
	        this.state = 1143;
	        this.lfs();
	        this.state = 1145;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        if(la_===1) {
	            this.state = 1144;
	            localctx.handlers = this.catch_statement_list();

	        }
	        this.state = 1158;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.OTHERWISE || _la===EParser.WHEN) {
	            this.state = 1150;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case EParser.OTHERWISE:
	                this.state = 1147;
	                this.match(EParser.OTHERWISE);
	                break;
	            case EParser.WHEN:
	                this.state = 1148;
	                this.match(EParser.WHEN);
	                this.state = 1149;
	                this.match(EParser.ANY);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1152;
	            this.match(EParser.COLON);
	            this.state = 1153;
	            this.indent();
	            this.state = 1154;
	            localctx.anyStmts = this.statement_list();
	            this.state = 1155;
	            this.dedent();
	            this.state = 1156;
	            this.lfs();
	        }

	        this.state = 1167;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.ALWAYS) {
	            this.state = 1160;
	            this.match(EParser.ALWAYS);
	            this.state = 1161;
	            this.match(EParser.COLON);
	            this.state = 1162;
	            this.indent();
	            this.state = 1163;
	            localctx.finalStmts = this.statement_list();
	            this.state = 1164;
	            this.dedent();
	            this.state = 1165;
	            this.lfs();
	        }

	        this.state = 1169;
	        this.lfs();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catch_statement() {
	    let localctx = new Catch_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, EParser.RULE_catch_statement);
	    try {
	        this.state = 1190;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CatchAtomicStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1171;
	            this.match(EParser.WHEN);
	            this.state = 1172;
	            localctx.name = this.symbol_identifier();
	            this.state = 1173;
	            this.match(EParser.COLON);
	            this.state = 1174;
	            this.indent();
	            this.state = 1175;
	            localctx.stmts = this.statement_list();
	            this.state = 1176;
	            this.dedent();
	            this.state = 1177;
	            this.lfs();
	            break;

	        case 2:
	            localctx = new CatchCollectionStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1179;
	            this.match(EParser.WHEN);
	            this.state = 1180;
	            this.match(EParser.IN);
	            this.state = 1181;
	            this.match(EParser.LBRAK);
	            this.state = 1182;
	            localctx.exp = this.symbol_list();
	            this.state = 1183;
	            this.match(EParser.RBRAK);
	            this.state = 1184;
	            this.match(EParser.COLON);
	            this.state = 1185;
	            this.indent();
	            this.state = 1186;
	            localctx.stmts = this.statement_list();
	            this.state = 1187;
	            this.dedent();
	            this.state = 1188;
	            this.lfs();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	break_statement() {
	    let localctx = new Break_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, EParser.RULE_break_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1192;
	        this.match(EParser.BREAK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	return_statement() {
	    let localctx = new Return_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, EParser.RULE_return_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1194;
	        this.match(EParser.RETURN);
	        this.state = 1196;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (EParser.LPAR - 20)) | (1 << (EParser.LBRAK - 20)) | (1 << (EParser.LCURL - 20)) | (1 << (EParser.MINUS - 20)) | (1 << (EParser.LT - 20)) | (1 << (EParser.LTGT - 20)) | (1 << (EParser.LTCOLONGT - 20)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (EParser.METHOD_COLON - 64)) | (1 << (EParser.CODE - 64)) | (1 << (EParser.DOCUMENT - 64)) | (1 << (EParser.BLOB - 64)) | (1 << (EParser.TYPE - 64)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (EParser.EXECUTE - 104)) | (1 << (EParser.FETCH - 104)) | (1 << (EParser.INVOKE_COLON - 104)) | (1 << (EParser.MUTABLE - 104)) | (1 << (EParser.NOT - 104)) | (1 << (EParser.NOTHING - 104)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (EParser.READ - 138)) | (1 << (EParser.SELF - 138)) | (1 << (EParser.SORTED - 138)) | (1 << (EParser.SUPER - 138)) | (1 << (EParser.THIS - 138)) | (1 << (EParser.BOOLEAN_LITERAL - 138)) | (1 << (EParser.CHAR_LITERAL - 138)) | (1 << (EParser.MIN_INTEGER - 138)) | (1 << (EParser.MAX_INTEGER - 138)) | (1 << (EParser.SYMBOL_IDENTIFIER - 138)))) !== 0) || ((((_la - 170)) & ~0x1f) == 0 && ((1 << (_la - 170)) & ((1 << (EParser.TYPE_IDENTIFIER - 170)) | (1 << (EParser.VARIABLE_IDENTIFIER - 170)) | (1 << (EParser.TEXT_LITERAL - 170)) | (1 << (EParser.UUID_LITERAL - 170)) | (1 << (EParser.INTEGER_LITERAL - 170)) | (1 << (EParser.HEXA_LITERAL - 170)) | (1 << (EParser.DECIMAL_LITERAL - 170)) | (1 << (EParser.DATETIME_LITERAL - 170)) | (1 << (EParser.TIME_LITERAL - 170)) | (1 << (EParser.DATE_LITERAL - 170)) | (1 << (EParser.PERIOD_LITERAL - 170)) | (1 << (EParser.VERSION_LITERAL - 170)))) !== 0)) {
	            this.state = 1195;
	            localctx.exp = this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 90;
	    this.enterRecursionRule(localctx, 90, EParser.RULE_expression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1233;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CssExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1199;
	            localctx.exp = this.css_expression();
	            break;

	        case 2:
	            localctx = new JsxExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1200;
	            localctx.exp = this.jsx_expression();
	            break;

	        case 3:
	            localctx = new InstanceExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1201;
	            localctx.exp = this.instance_expression(0);
	            break;

	        case 4:
	            localctx = new ArrowExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1202;
	            localctx.exp = this.arrow_expression();
	            break;

	        case 5:
	            localctx = new UnresolvedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1203;
	            localctx.exp = this.unresolved_expression(0);
	            break;

	        case 6:
	            localctx = new MethodCallExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1206;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1204;
	                localctx.exp1 = this.instance_expression(0);
	                break;

	            case 2:
	                this.state = 1205;
	                localctx.exp2 = this.unresolved_expression(0);
	                break;

	            }
	            this.state = 1208;
	            localctx.args = this.argument_assignment_list();
	            break;

	        case 7:
	            localctx = new ConstructorExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1210;
	            localctx.exp = this.constructor_expression();
	            break;

	        case 8:
	            localctx = new MinusExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1211;
	            this.match(EParser.MINUS);
	            this.state = 1212;
	            localctx.exp = this.expression(34);
	            break;

	        case 9:
	            localctx = new NotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1213;
	            this.match(EParser.NOT);
	            this.state = 1214;
	            localctx.exp = this.expression(33);
	            break;

	        case 10:
	            localctx = new CodeExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1215;
	            this.match(EParser.CODE);
	            this.state = 1216;
	            this.match(EParser.COLON);
	            this.state = 1217;
	            localctx.exp = this.expression(15);
	            break;

	        case 11:
	            localctx = new ExecuteExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1218;
	            this.match(EParser.EXECUTE);
	            this.state = 1219;
	            this.match(EParser.COLON);
	            this.state = 1220;
	            localctx.name = this.variable_identifier();
	            break;

	        case 12:
	            localctx = new ClosureExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1221;
	            this.match(EParser.METHOD_COLON);
	            this.state = 1222;
	            localctx.name = this.method_identifier();
	            break;

	        case 13:
	            localctx = new BlobExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1223;
	            localctx.exp = this.blob_expression();
	            break;

	        case 14:
	            localctx = new DocumentExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1224;
	            localctx.exp = this.document_expression();
	            break;

	        case 15:
	            localctx = new MutableInstanceExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1225;
	            localctx.exp = this.mutable_instance_expression(0);
	            break;

	        case 16:
	            localctx = new FetchExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1226;
	            localctx.exp = this.fetch_expression();
	            break;

	        case 17:
	            localctx = new ReadBlobExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1227;
	            localctx.exp = this.read_blob_expression();
	            break;

	        case 18:
	            localctx = new ReadAllExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1228;
	            localctx.exp = this.read_all_expression();
	            break;

	        case 19:
	            localctx = new ReadOneExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1229;
	            localctx.exp = this.read_one_expression();
	            break;

	        case 20:
	            localctx = new SortedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1230;
	            localctx.exp = this.sorted_expression();
	            break;

	        case 21:
	            localctx = new AmbiguousExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1231;
	            localctx.exp = this.ambiguous_expression();
	            break;

	        case 22:
	            localctx = new InvocationExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1232;
	            localctx.exp = this.invocation_expression();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1327;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,74,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1325;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new MultiplyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
	                    this.state = 1235;
	                    if (!( this.precpred(this._ctx, 31))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 31)");
	                    }
	                    this.state = 1236;
	                    this.multiply();
	                    this.state = 1237;
	                    localctx.right = this.expression(32);
	                    break;

	                case 2:
	                    localctx = new DivideExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
	                    this.state = 1239;
	                    if (!( this.precpred(this._ctx, 30))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 30)");
	                    }
	                    this.state = 1240;
	                    this.divide();
	                    this.state = 1241;
	                    localctx.right = this.expression(31);
	                    break;

	                case 3:
	                    localctx = new ModuloExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
	                    this.state = 1243;
	                    if (!( this.precpred(this._ctx, 29))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 29)");
	                    }
	                    this.state = 1244;
	                    this.modulo();
	                    this.state = 1245;
	                    localctx.right = this.expression(30);
	                    break;

	                case 4:
	                    localctx = new IntDivideExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
	                    this.state = 1247;
	                    if (!( this.precpred(this._ctx, 28))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
	                    }
	                    this.state = 1248;
	                    this.idivide();
	                    this.state = 1249;
	                    localctx.right = this.expression(29);
	                    break;

	                case 5:
	                    localctx = new AddExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
	                    this.state = 1251;
	                    if (!( this.precpred(this._ctx, 27))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
	                    }
	                    this.state = 1252;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===EParser.PLUS || _la===EParser.MINUS)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1253;
	                    localctx.right = this.expression(28);
	                    break;

	                case 6:
	                    localctx = new CompareExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
	                    this.state = 1254;
	                    if (!( this.precpred(this._ctx, 26))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
	                    }
	                    this.state = 1255;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (EParser.GT - 39)) | (1 << (EParser.GTE - 39)) | (1 << (EParser.LT - 39)) | (1 << (EParser.LTE - 39)))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1256;
	                    localctx.right = this.expression(27);
	                    break;

	                case 7:
	                    localctx = new EqualsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
	                    this.state = 1257;
	                    if (!( this.precpred(this._ctx, 24))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
	                    }
	                    this.state = 1258;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (EParser.LTGT - 43)) | (1 << (EParser.EQ - 43)) | (1 << (EParser.TILDE - 43)))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1259;
	                    localctx.right = this.expression(25);
	                    break;

	                case 8:
	                    localctx = new ContainsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
	                    this.state = 1260;
	                    if (!( this.precpred(this._ctx, 23))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
	                    }
	                    this.state = 1262;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===EParser.NOT) {
	                        this.state = 1261;
	                        this.match(EParser.NOT);
	                    }

	                    this.state = 1264;
	                    this.match(EParser.CONTAINS);
	                    this.state = 1265;
	                    localctx.right = this.expression(24);
	                    break;

	                case 9:
	                    localctx = new InExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
	                    this.state = 1266;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 1268;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===EParser.NOT) {
	                        this.state = 1267;
	                        this.match(EParser.NOT);
	                    }

	                    this.state = 1270;
	                    this.match(EParser.IN);
	                    this.state = 1271;
	                    localctx.right = this.expression(23);
	                    break;

	                case 10:
	                    localctx = new HasExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
	                    this.state = 1272;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 1274;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===EParser.NOT) {
	                        this.state = 1273;
	                        this.match(EParser.NOT);
	                    }

	                    this.state = 1276;
	                    this.match(EParser.HAS);
	                    this.state = 1277;
	                    localctx.right = this.expression(22);
	                    break;

	                case 11:
	                    localctx = new OrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
	                    this.state = 1278;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 1279;
	                    this.match(EParser.OR);
	                    this.state = 1280;
	                    localctx.right = this.expression(19);
	                    break;

	                case 12:
	                    localctx = new AndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
	                    this.state = 1281;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 1282;
	                    this.match(EParser.AND);
	                    this.state = 1283;
	                    localctx.right = this.expression(18);
	                    break;

	                case 13:
	                    localctx = new TernaryExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.ifTrue = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
	                    this.state = 1284;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 1285;
	                    this.match(EParser.IF);
	                    this.state = 1286;
	                    localctx.test = this.expression(0);
	                    this.state = 1287;
	                    this.match(EParser.ELSE);
	                    this.state = 1288;
	                    localctx.ifFalse = this.expression(17);
	                    break;

	                case 14:
	                    localctx = new IteratorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.exp = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
	                    this.state = 1290;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 1291;
	                    this.match(EParser.FOR);
	                    this.state = 1292;
	                    this.match(EParser.EACH);
	                    this.state = 1293;
	                    localctx.name = this.variable_identifier();
	                    this.state = 1294;
	                    this.match(EParser.IN);
	                    this.state = 1295;
	                    localctx.source = this.expression(2);
	                    break;

	                case 15:
	                    localctx = new CastExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
	                    this.state = 1297;
	                    if (!( this.precpred(this._ctx, 32))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 32)");
	                    }
	                    this.state = 1298;
	                    this.match(EParser.AS);
	                    this.state = 1300;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===EParser.MUTABLE) {
	                        this.state = 1299;
	                        this.match(EParser.MUTABLE);
	                    }

	                    this.state = 1302;
	                    localctx.right = this.category_or_any_type();
	                    break;

	                case 16:
	                    localctx = new IsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
	                    this.state = 1303;
	                    if (!( this.precpred(this._ctx, 25))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
	                    }
	                    this.state = 1304;
	                    this.match(EParser.IS);
	                    this.state = 1306;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	                    if(la_===1) {
	                        this.state = 1305;
	                        this.match(EParser.NOT);

	                    }
	                    this.state = 1308;
	                    localctx.right = this.is_expression();
	                    break;

	                case 17:
	                    localctx = new HasAllExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
	                    this.state = 1309;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 1311;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===EParser.NOT) {
	                        this.state = 1310;
	                        this.match(EParser.NOT);
	                    }

	                    this.state = 1313;
	                    this.match(EParser.HAS);
	                    this.state = 1314;
	                    this.match(EParser.ALL);
	                    this.state = 1315;
	                    localctx.right = this.filter_expression();
	                    break;

	                case 18:
	                    localctx = new HasAnyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
	                    this.state = 1316;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 1318;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===EParser.NOT) {
	                        this.state = 1317;
	                        this.match(EParser.NOT);
	                    }

	                    this.state = 1320;
	                    this.match(EParser.HAS);
	                    this.state = 1321;
	                    this.match(EParser.ANY);
	                    this.state = 1322;
	                    localctx.right = this.filter_expression();
	                    break;

	                case 19:
	                    localctx = new FilteredListExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.src = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
	                    this.state = 1323;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 1324;
	                    this.filtered_list_suffix();
	                    break;

	                } 
	            }
	            this.state = 1329;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,74,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	filter_expression() {
	    let localctx = new Filter_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, EParser.RULE_filter_expression);
	    try {
	        this.state = 1337;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ArrowFilterExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1330;
	            this.match(EParser.WHERE);
	            this.state = 1331;
	            this.arrow_expression();
	            break;

	        case 2:
	            localctx = new ExplicitFilterExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1332;
	            this.variable_identifier();
	            this.state = 1333;
	            this.match(EParser.WHERE);
	            this.state = 1334;
	            this.expression(0);
	            break;

	        case 3:
	            localctx = new OtherFilterExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1336;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	unresolved_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Unresolved_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 94;
	    this.enterRecursionRule(localctx, 94, EParser.RULE_unresolved_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new UnresolvedIdentifierContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 1340;
	        localctx.name = this.identifier();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1346;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,76,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new UnresolvedSelectorContext(this, new Unresolved_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_unresolved_expression);
	                this.state = 1342;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1343;
	                localctx.selector = this.unresolved_selector(); 
	            }
	            this.state = 1348;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,76,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	unresolved_selector() {
	    let localctx = new Unresolved_selectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, EParser.RULE_unresolved_selector);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1349;
	        if (!( this.wasNot(EParser.WS))) {
	            throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
	        }
	        this.state = 1350;
	        this.match(EParser.DOT);
	        this.state = 1351;
	        localctx.name = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invocation_expression() {
	    let localctx = new Invocation_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, EParser.RULE_invocation_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1353;
	        this.match(EParser.INVOKE_COLON);
	        this.state = 1354;
	        localctx.name = this.variable_identifier();
	        this.state = 1355;
	        this.invocation_trailer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invocation_trailer() {
	    let localctx = new Invocation_trailerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, EParser.RULE_invocation_trailer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1357;
	        if (!( this.willBe(EParser.LF))) {
	            throw new antlr4.error.FailedPredicateException(this, "$parser.willBe(EParser.LF)");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectable_expression() {
	    let localctx = new Selectable_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, EParser.RULE_selectable_expression);
	    try {
	        this.state = 1364;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ParenthesisExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1359;
	            localctx.exp = this.parenthesis_expression();
	            break;

	        case 2:
	            localctx = new LiteralExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1360;
	            localctx.exp = this.literal_expression();
	            break;

	        case 3:
	            localctx = new IdentifierExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1361;
	            localctx.exp = this.identifier();
	            break;

	        case 4:
	            localctx = new ThisExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1362;
	            localctx.exp = this.this_expression();
	            break;

	        case 5:
	            localctx = new SuperExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1363;
	            localctx.exp = this.super_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	instance_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Instance_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 104;
	    this.enterRecursionRule(localctx, 104, EParser.RULE_instance_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new SelectableExpressionContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 1367;
	        localctx.parent = this.selectable_expression();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1373;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new SelectorExpressionContext(this, new Instance_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_instance_expression);
	                this.state = 1369;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1370;
	                localctx.selector = this.instance_selector(); 
	            }
	            this.state = 1375;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	instance_selector() {
	    let localctx = new Instance_selectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, EParser.RULE_instance_selector);
	    try {
	        this.state = 1389;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new MemberSelectorContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1376;
	            if (!( this.wasNot(EParser.WS))) {
	                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
	            }
	            this.state = 1377;
	            this.match(EParser.DOT);
	            this.state = 1378;
	            localctx.name = this.member_identifier();
	            break;

	        case 2:
	            localctx = new SliceSelectorContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1379;
	            if (!( this.wasNot(EParser.WS))) {
	                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
	            }
	            this.state = 1380;
	            this.match(EParser.LBRAK);
	            this.state = 1381;
	            localctx.xslice = this.slice_arguments();
	            this.state = 1382;
	            this.match(EParser.RBRAK);
	            break;

	        case 3:
	            localctx = new ItemSelectorContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1384;
	            if (!( this.wasNot(EParser.WS))) {
	                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
	            }
	            this.state = 1385;
	            this.match(EParser.LBRAK);
	            this.state = 1386;
	            localctx.exp = this.expression(0);
	            this.state = 1387;
	            this.match(EParser.RBRAK);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	mutable_instance_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Mutable_instance_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 108;
	    this.enterRecursionRule(localctx, 108, EParser.RULE_mutable_instance_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new MutableSelectableExpressionContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 1392;
	        this.match(EParser.MUTABLE);
	        this.state = 1393;
	        localctx.exp = this.identifier();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1399;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new MutableSelectorExpressionContext(this, new Mutable_instance_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_mutable_instance_expression);
	                this.state = 1395;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1396;
	                localctx.selector = this.instance_selector(); 
	            }
	            this.state = 1401;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	document_expression() {
	    let localctx = new Document_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, EParser.RULE_document_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1402;
	        this.match(EParser.DOCUMENT);
	        this.state = 1405;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        if(la_===1) {
	            this.state = 1403;
	            this.match(EParser.FROM);
	            this.state = 1404;
	            localctx.exp = this.expression(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blob_expression() {
	    let localctx = new Blob_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, EParser.RULE_blob_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1407;
	        this.match(EParser.BLOB);
	        this.state = 1408;
	        this.match(EParser.FROM);
	        this.state = 1409;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructor_expression() {
	    let localctx = new Constructor_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, EParser.RULE_constructor_expression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1432;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ConstructorFromContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1411;
	            localctx.typ = this.mutable_category_type();
	            this.state = 1412;
	            this.match(EParser.FROM);
	            this.state = 1413;
	            localctx.copyExp = this.expression(0);
	            this.state = 1422;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
	            if(la_===1) {
	                this.state = 1415;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===EParser.COMMA) {
	                    this.state = 1414;
	                    this.match(EParser.COMMA);
	                }

	                this.state = 1417;
	                localctx.args = this.with_argument_assignment_list(0);
	                this.state = 1420;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	                if(la_===1) {
	                    this.state = 1418;
	                    this.match(EParser.AND);
	                    this.state = 1419;
	                    localctx.arg = this.argument_assignment();

	                }

	            }
	            break;

	        case 2:
	            localctx = new ConstructorNoFromContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1424;
	            localctx.typ = this.mutable_category_type();
	            this.state = 1430;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	            if(la_===1) {
	                this.state = 1425;
	                localctx.args = this.with_argument_assignment_list(0);
	                this.state = 1428;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	                if(la_===1) {
	                    this.state = 1426;
	                    this.match(EParser.AND);
	                    this.state = 1427;
	                    localctx.arg = this.argument_assignment();

	                }

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	write_statement() {
	    let localctx = new Write_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, EParser.RULE_write_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1434;
	        this.match(EParser.WRITE);
	        this.state = 1435;
	        localctx.what = this.expression(0);
	        this.state = 1436;
	        this.match(EParser.TO);
	        this.state = 1437;
	        localctx.target = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambiguous_expression() {
	    let localctx = new Ambiguous_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, EParser.RULE_ambiguous_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1439;
	        localctx.method = this.unresolved_expression(0);
	        this.state = 1440;
	        this.match(EParser.MINUS);
	        this.state = 1441;
	        localctx.exp = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filtered_list_suffix() {
	    let localctx = new Filtered_list_suffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, EParser.RULE_filtered_list_suffix);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1443;
	        this.match(EParser.FILTERED);
	        this.state = 1446;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.WITH) {
	            this.state = 1444;
	            this.match(EParser.WITH);
	            this.state = 1445;
	            localctx.name = this.variable_identifier();
	        }

	        this.state = 1448;
	        this.match(EParser.WHERE);
	        this.state = 1449;
	        localctx.predicate = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fetch_expression() {
	    let localctx = new Fetch_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, EParser.RULE_fetch_expression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1487;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new FetchOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1451;
	            this.match(EParser.FETCH);
	            this.state = 1452;
	            this.match(EParser.ONE);

	            this.state = 1454;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===EParser.MUTABLE || _la===EParser.TYPE_IDENTIFIER) {
	                this.state = 1453;
	                localctx.typ = this.mutable_category_type();
	            }

	            this.state = 1456;
	            this.match(EParser.WHERE);
	            this.state = 1457;
	            localctx.predicate = this.expression(0);
	            break;

	        case 2:
	            localctx = new FetchManyContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1458;
	            this.match(EParser.FETCH);
	            this.state = 1476;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case EParser.ALL:
	                this.state = 1459;
	                this.match(EParser.ALL);
	                this.state = 1461;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	                if(la_===1) {
	                    this.state = 1460;
	                    localctx.typ = this.mutable_category_type();

	                }
	                break;
	            case EParser.MUTABLE:
	            case EParser.TYPE_IDENTIFIER:
	                this.state = 1463;
	                localctx.typ = this.mutable_category_type();
	                this.state = 1465;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===EParser.ROWS) {
	                    this.state = 1464;
	                    this.match(EParser.ROWS);
	                }

	                this.state = 1467;
	                localctx.xstart = this.expression(0);
	                this.state = 1468;
	                this.match(EParser.TO);
	                this.state = 1469;
	                localctx.xstop = this.expression(0);
	                break;
	            case EParser.ROWS:
	                this.state = 1471;
	                this.match(EParser.ROWS);
	                this.state = 1472;
	                localctx.xstart = this.expression(0);
	                this.state = 1473;
	                this.match(EParser.TO);
	                this.state = 1474;
	                localctx.xstop = this.expression(0);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1480;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	            if(la_===1) {
	                this.state = 1478;
	                this.match(EParser.WHERE);
	                this.state = 1479;
	                localctx.predicate = this.expression(0);

	            }
	            this.state = 1485;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	            if(la_===1) {
	                this.state = 1482;
	                this.match(EParser.ORDER);
	                this.state = 1483;
	                this.match(EParser.BY);
	                this.state = 1484;
	                localctx.orderby = this.order_by_list();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fetch_statement() {
	    let localctx = new Fetch_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, EParser.RULE_fetch_statement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1541;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new FetchOneAsyncContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1489;
	            this.match(EParser.FETCH);
	            this.state = 1490;
	            this.match(EParser.ONE);

	            this.state = 1492;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===EParser.MUTABLE || _la===EParser.TYPE_IDENTIFIER) {
	                this.state = 1491;
	                localctx.typ = this.mutable_category_type();
	            }

	            this.state = 1494;
	            this.match(EParser.WHERE);
	            this.state = 1495;
	            localctx.predicate = this.expression(0);
	            this.state = 1496;
	            this.match(EParser.THEN);
	            this.state = 1497;
	            this.match(EParser.WITH);
	            this.state = 1498;
	            localctx.name = this.variable_identifier();
	            this.state = 1499;
	            this.match(EParser.COLON);
	            this.state = 1500;
	            this.indent();
	            this.state = 1501;
	            localctx.stmts = this.statement_list();
	            this.state = 1502;
	            this.dedent();
	            break;

	        case 2:
	            localctx = new FetchManyAsyncContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1504;
	            this.match(EParser.FETCH);
	            this.state = 1522;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case EParser.ALL:
	                this.state = 1505;
	                this.match(EParser.ALL);
	                this.state = 1507;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===EParser.MUTABLE || _la===EParser.TYPE_IDENTIFIER) {
	                    this.state = 1506;
	                    localctx.typ = this.mutable_category_type();
	                }

	                break;
	            case EParser.MUTABLE:
	            case EParser.TYPE_IDENTIFIER:
	                this.state = 1509;
	                localctx.typ = this.mutable_category_type();
	                this.state = 1511;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===EParser.ROWS) {
	                    this.state = 1510;
	                    this.match(EParser.ROWS);
	                }

	                this.state = 1513;
	                localctx.xstart = this.expression(0);
	                this.state = 1514;
	                this.match(EParser.TO);
	                this.state = 1515;
	                localctx.xstop = this.expression(0);
	                break;
	            case EParser.ROWS:
	                this.state = 1517;
	                this.match(EParser.ROWS);
	                this.state = 1518;
	                localctx.xstart = this.expression(0);
	                this.state = 1519;
	                this.match(EParser.TO);
	                this.state = 1520;
	                localctx.xstop = this.expression(0);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1526;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===EParser.WHERE) {
	                this.state = 1524;
	                this.match(EParser.WHERE);
	                this.state = 1525;
	                localctx.predicate = this.expression(0);
	            }

	            this.state = 1531;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===EParser.ORDER) {
	                this.state = 1528;
	                this.match(EParser.ORDER);
	                this.state = 1529;
	                this.match(EParser.BY);
	                this.state = 1530;
	                localctx.orderby = this.order_by_list();
	            }

	            this.state = 1533;
	            this.match(EParser.THEN);
	            this.state = 1534;
	            this.match(EParser.WITH);
	            this.state = 1535;
	            localctx.name = this.variable_identifier();
	            this.state = 1536;
	            this.match(EParser.COLON);
	            this.state = 1537;
	            this.indent();
	            this.state = 1538;
	            localctx.stmts = this.statement_list();
	            this.state = 1539;
	            this.dedent();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	read_statement() {
	    let localctx = new Read_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, EParser.RULE_read_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1543;
	        this.match(EParser.READ);
	        this.state = 1544;
	        this.match(EParser.ALL);
	        this.state = 1545;
	        this.match(EParser.FROM);
	        this.state = 1546;
	        localctx.source = this.expression(0);
	        this.state = 1547;
	        this.match(EParser.THEN);
	        this.state = 1548;
	        this.match(EParser.WITH);
	        this.state = 1549;
	        localctx.name = this.variable_identifier();
	        this.state = 1550;
	        this.match(EParser.COLON);
	        this.state = 1551;
	        this.indent();
	        this.state = 1552;
	        localctx.stmts = this.statement_list();
	        this.state = 1553;
	        this.dedent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sorted_expression() {
	    let localctx = new Sorted_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, EParser.RULE_sorted_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1555;
	        this.match(EParser.SORTED);
	        this.state = 1557;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.DESC) {
	            this.state = 1556;
	            this.match(EParser.DESC);
	        }

	        this.state = 1559;
	        localctx.source = this.instance_expression(0);
	        this.state = 1565;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	        if(la_===1) {
	            this.state = 1560;
	            this.match(EParser.WITH);
	            this.state = 1561;
	            localctx.key = this.sorted_key();
	            this.state = 1562;
	            this.match(EParser.AS);
	            this.state = 1563;
	            this.key_token();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument_assignment_list() {
	    let localctx = new Argument_assignment_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, EParser.RULE_argument_assignment_list);
	    try {
	        this.state = 1581;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ArgumentAssignmentListExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1567;
	            if (!( this.was(EParser.WS))) {
	                throw new antlr4.error.FailedPredicateException(this, "$parser.was(EParser.WS)");
	            }
	            this.state = 1568;
	            localctx.exp = this.expression(0);
	            this.state = 1574;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	            if(la_===1) {
	                this.state = 1569;
	                localctx.items = this.with_argument_assignment_list(0);
	                this.state = 1572;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	                if(la_===1) {
	                    this.state = 1570;
	                    this.match(EParser.AND);
	                    this.state = 1571;
	                    localctx.item = this.argument_assignment();

	                }

	            }
	            break;

	        case 2:
	            localctx = new ArgumentAssignmentListNoExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1576;
	            localctx.items = this.with_argument_assignment_list(0);
	            this.state = 1579;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	            if(la_===1) {
	                this.state = 1577;
	                this.match(EParser.AND);
	                this.state = 1578;
	                localctx.item = this.argument_assignment();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	with_argument_assignment_list(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new With_argument_assignment_listContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 132;
	    this.enterRecursionRule(localctx, 132, EParser.RULE_with_argument_assignment_list, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new ArgumentAssignmentListContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 1584;
	        this.match(EParser.WITH);
	        this.state = 1585;
	        localctx.item = this.argument_assignment();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1592;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,109,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ArgumentAssignmentListItemContext(this, new With_argument_assignment_listContext(this, _parentctx, _parentState));
	                localctx.items = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_with_argument_assignment_list);
	                this.state = 1587;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1588;
	                this.match(EParser.COMMA);
	                this.state = 1589;
	                localctx.item = this.argument_assignment(); 
	            }
	            this.state = 1594;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,109,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	argument_assignment() {
	    let localctx = new Argument_assignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, EParser.RULE_argument_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1598;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	        if(la_===1) {
	            this.state = 1595;
	            localctx.exp = this.expression(0);
	            this.state = 1596;
	            this.match(EParser.AS);

	        }
	        this.state = 1600;
	        localctx.name = this.variable_identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assign_instance_statement() {
	    let localctx = new Assign_instance_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, EParser.RULE_assign_instance_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1602;
	        localctx.inst = this.assignable_instance(0);
	        this.state = 1603;
	        this.assign();
	        this.state = 1604;
	        localctx.exp = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	child_instance() {
	    let localctx = new Child_instanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, EParser.RULE_child_instance);
	    try {
	        this.state = 1614;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new MemberInstanceContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1606;
	            if (!( this.wasNot(EParser.WS))) {
	                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
	            }
	            this.state = 1607;
	            this.match(EParser.DOT);
	            this.state = 1608;
	            localctx.name = this.variable_identifier();
	            break;

	        case 2:
	            localctx = new ItemInstanceContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1609;
	            if (!( this.wasNot(EParser.WS))) {
	                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
	            }
	            this.state = 1610;
	            this.match(EParser.LBRAK);
	            this.state = 1611;
	            localctx.exp = this.expression(0);
	            this.state = 1612;
	            this.match(EParser.RBRAK);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assign_tuple_statement() {
	    let localctx = new Assign_tuple_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, EParser.RULE_assign_tuple_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1616;
	        localctx.items = this.variable_identifier_list();
	        this.state = 1617;
	        this.assign();
	        this.state = 1618;
	        localctx.exp = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lfs() {
	    let localctx = new LfsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, EParser.RULE_lfs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1623;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,112,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1620;
	                this.match(EParser.LF); 
	            }
	            this.state = 1625;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,112,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lfp() {
	    let localctx = new LfpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, EParser.RULE_lfp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1627; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1626;
	            this.match(EParser.LF);
	            this.state = 1629; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===EParser.LF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ws_plus() {
	    let localctx = new Ws_plusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, EParser.RULE_ws_plus);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1634;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,114,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1631;
	                _la = this._input.LA(1);
	                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << EParser.INDENT) | (1 << EParser.LF) | (1 << EParser.TAB) | (1 << EParser.WS))) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                } 
	            }
	            this.state = 1636;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,114,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indent() {
	    let localctx = new IndentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, EParser.RULE_indent);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1638; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1637;
	            this.match(EParser.LF);
	            this.state = 1640; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===EParser.LF);
	        this.state = 1642;
	        this.match(EParser.INDENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dedent() {
	    let localctx = new DedentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, EParser.RULE_dedent);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1647;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===EParser.LF) {
	            this.state = 1644;
	            this.match(EParser.LF);
	            this.state = 1649;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1650;
	        this.match(EParser.DEDENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_literal() {
	    let localctx = new Type_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, EParser.RULE_type_literal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1652;
	        this.match(EParser.TYPE);
	        this.state = 1653;
	        this.match(EParser.COLON);
	        this.state = 1654;
	        this.category_or_any_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	null_literal() {
	    let localctx = new Null_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, EParser.RULE_null_literal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1656;
	        this.match(EParser.NOTHING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repl() {
	    let localctx = new ReplContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, EParser.RULE_repl);
	    try {
	        this.state = 1661;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1658;
	            this.declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1659;
	            this.statement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1660;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration_list() {
	    let localctx = new Declaration_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, EParser.RULE_declaration_list);
	    var _la = 0; // Token type
	    try {
	        localctx = new FullDeclarationListContext(this, localctx);
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1664;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.COMMENT || _la===EParser.DEFINE || _la===EParser.ARONDBASE_IDENTIFIER) {
	            this.state = 1663;
	            this.declarations();
	        }

	        this.state = 1666;
	        this.lfs();
	        this.state = 1667;
	        this.match(EParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarations() {
	    let localctx = new DeclarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, EParser.RULE_declarations);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1669;
	        this.declaration();
	        this.state = 1675;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,119,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1670;
	                this.lfp();
	                this.state = 1671;
	                this.declaration(); 
	            }
	            this.state = 1677;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,119,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, EParser.RULE_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1683;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===EParser.COMMENT) {
	            this.state = 1678;
	            this.comment_statement();
	            this.state = 1679;
	            this.lfp();
	            this.state = 1685;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1691;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===EParser.ARONDBASE_IDENTIFIER) {
	            this.state = 1686;
	            this.annotation_constructor();
	            this.state = 1687;
	            this.lfp();
	            this.state = 1693;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1700;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1694;
	            this.attribute_declaration();
	            break;

	        case 2:
	            this.state = 1695;
	            this.category_declaration();
	            break;

	        case 3:
	            this.state = 1696;
	            this.resource_declaration();
	            break;

	        case 4:
	            this.state = 1697;
	            this.enum_declaration();
	            break;

	        case 5:
	            this.state = 1698;
	            this.widget_declaration();
	            break;

	        case 6:
	            this.state = 1699;
	            this.method_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_constructor() {
	    let localctx = new Annotation_constructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, EParser.RULE_annotation_constructor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1702;
	        localctx.name = this.annotation_identifier();
	        this.state = 1717;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.LPAR) {
	            this.state = 1703;
	            this.match(EParser.LPAR);
	            this.state = 1713;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case EParser.LPAR:
	            case EParser.LBRAK:
	            case EParser.LCURL:
	            case EParser.MINUS:
	            case EParser.LT:
	            case EParser.LTCOLONGT:
	            case EParser.BOOLEAN:
	            case EParser.CSS:
	            case EParser.CHARACTER:
	            case EParser.TEXT:
	            case EParser.INTEGER:
	            case EParser.DECIMAL:
	            case EParser.DATE:
	            case EParser.TIME:
	            case EParser.DATETIME:
	            case EParser.PERIOD:
	            case EParser.VERSION:
	            case EParser.CODE:
	            case EParser.DOCUMENT:
	            case EParser.BLOB:
	            case EParser.IMAGE:
	            case EParser.UUID:
	            case EParser.HTML:
	            case EParser.TYPE:
	            case EParser.MUTABLE:
	            case EParser.NOTHING:
	            case EParser.BOOLEAN_LITERAL:
	            case EParser.CHAR_LITERAL:
	            case EParser.MIN_INTEGER:
	            case EParser.MAX_INTEGER:
	            case EParser.SYMBOL_IDENTIFIER:
	            case EParser.TYPE_IDENTIFIER:
	            case EParser.TEXT_LITERAL:
	            case EParser.UUID_LITERAL:
	            case EParser.INTEGER_LITERAL:
	            case EParser.HEXA_LITERAL:
	            case EParser.DECIMAL_LITERAL:
	            case EParser.DATETIME_LITERAL:
	            case EParser.TIME_LITERAL:
	            case EParser.DATE_LITERAL:
	            case EParser.PERIOD_LITERAL:
	            case EParser.VERSION_LITERAL:
	                this.state = 1704;
	                localctx.exp = this.annotation_argument_value();
	                break;
	            case EParser.GETTER:
	            case EParser.SETTER:
	            case EParser.VARIABLE_IDENTIFIER:
	                this.state = 1705;
	                this.annotation_argument();
	                this.state = 1710;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===EParser.COMMA) {
	                    this.state = 1706;
	                    this.match(EParser.COMMA);
	                    this.state = 1707;
	                    this.annotation_argument();
	                    this.state = 1712;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1715;
	            this.match(EParser.RPAR);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_identifier() {
	    let localctx = new Annotation_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, EParser.RULE_annotation_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1719;
	        this.match(EParser.ARONDBASE_IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_argument() {
	    let localctx = new Annotation_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, EParser.RULE_annotation_argument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1721;
	        localctx.name = this.annotation_argument_name();
	        this.state = 1722;
	        this.match(EParser.EQ);
	        this.state = 1723;
	        localctx.exp = this.annotation_argument_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_argument_name() {
	    let localctx = new Annotation_argument_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, EParser.RULE_annotation_argument_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1725;
	        _la = this._input.LA(1);
	        if(!(_la===EParser.GETTER || _la===EParser.SETTER || _la===EParser.VARIABLE_IDENTIFIER)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation_argument_value() {
	    let localctx = new Annotation_argument_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, EParser.RULE_annotation_argument_value);
	    try {
	        this.state = 1729;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.LPAR:
	        case EParser.LBRAK:
	        case EParser.LCURL:
	        case EParser.MINUS:
	        case EParser.LT:
	        case EParser.LTCOLONGT:
	        case EParser.TYPE:
	        case EParser.MUTABLE:
	        case EParser.NOTHING:
	        case EParser.BOOLEAN_LITERAL:
	        case EParser.CHAR_LITERAL:
	        case EParser.MIN_INTEGER:
	        case EParser.MAX_INTEGER:
	        case EParser.SYMBOL_IDENTIFIER:
	        case EParser.TEXT_LITERAL:
	        case EParser.UUID_LITERAL:
	        case EParser.INTEGER_LITERAL:
	        case EParser.HEXA_LITERAL:
	        case EParser.DECIMAL_LITERAL:
	        case EParser.DATETIME_LITERAL:
	        case EParser.TIME_LITERAL:
	        case EParser.DATE_LITERAL:
	        case EParser.PERIOD_LITERAL:
	        case EParser.VERSION_LITERAL:
	            localctx = new AnnotationLiteralValueContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1727;
	            localctx.exp = this.literal_expression();
	            break;
	        case EParser.BOOLEAN:
	        case EParser.CSS:
	        case EParser.CHARACTER:
	        case EParser.TEXT:
	        case EParser.INTEGER:
	        case EParser.DECIMAL:
	        case EParser.DATE:
	        case EParser.TIME:
	        case EParser.DATETIME:
	        case EParser.PERIOD:
	        case EParser.VERSION:
	        case EParser.CODE:
	        case EParser.DOCUMENT:
	        case EParser.BLOB:
	        case EParser.IMAGE:
	        case EParser.UUID:
	        case EParser.HTML:
	        case EParser.TYPE_IDENTIFIER:
	            localctx = new AnnotationTypeValueContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1728;
	            localctx.typ = this.primary_type();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resource_declaration() {
	    let localctx = new Resource_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, EParser.RULE_resource_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1731;
	        this.native_resource_declaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_declaration() {
	    let localctx = new Enum_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, EParser.RULE_enum_declaration);
	    try {
	        this.state = 1735;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1733;
	            this.enum_category_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1734;
	            this.enum_native_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_symbol_list() {
	    let localctx = new Native_symbol_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, EParser.RULE_native_symbol_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1737;
	        this.native_symbol();
	        this.state = 1743;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,128,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1738;
	                this.lfp();
	                this.state = 1739;
	                this.native_symbol(); 
	            }
	            this.state = 1745;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,128,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	category_symbol_list() {
	    let localctx = new Category_symbol_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, EParser.RULE_category_symbol_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1746;
	        this.category_symbol();
	        this.state = 1752;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,129,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1747;
	                this.lfp();
	                this.state = 1748;
	                this.category_symbol(); 
	            }
	            this.state = 1754;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,129,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbol_list() {
	    let localctx = new Symbol_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, EParser.RULE_symbol_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1755;
	        this.symbol_identifier();
	        this.state = 1760;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===EParser.COMMA) {
	            this.state = 1756;
	            this.match(EParser.COMMA);
	            this.state = 1757;
	            this.symbol_identifier();
	            this.state = 1762;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_constraint() {
	    let localctx = new Attribute_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, EParser.RULE_attribute_constraint);
	    try {
	        this.state = 1773;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new MatchingListContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1763;
	            this.match(EParser.IN);
	            this.state = 1764;
	            localctx.source = this.list_literal();
	            break;

	        case 2:
	            localctx = new MatchingSetContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1765;
	            this.match(EParser.IN);
	            this.state = 1766;
	            localctx.source = this.set_literal();
	            break;

	        case 3:
	            localctx = new MatchingRangeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1767;
	            this.match(EParser.IN);
	            this.state = 1768;
	            localctx.source = this.range_literal();
	            break;

	        case 4:
	            localctx = new MatchingPatternContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1769;
	            this.match(EParser.MATCHING);
	            this.state = 1770;
	            localctx.text = this.match(EParser.TEXT_LITERAL);
	            break;

	        case 5:
	            localctx = new MatchingExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1771;
	            this.match(EParser.MATCHING);
	            this.state = 1772;
	            localctx.exp = this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	list_literal() {
	    let localctx = new List_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, EParser.RULE_list_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1776;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.MUTABLE) {
	            this.state = 1775;
	            this.match(EParser.MUTABLE);
	        }

	        this.state = 1778;
	        this.match(EParser.LBRAK);
	        this.state = 1780;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (EParser.LPAR - 20)) | (1 << (EParser.LBRAK - 20)) | (1 << (EParser.LCURL - 20)) | (1 << (EParser.MINUS - 20)) | (1 << (EParser.LT - 20)) | (1 << (EParser.LTGT - 20)) | (1 << (EParser.LTCOLONGT - 20)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (EParser.METHOD_COLON - 64)) | (1 << (EParser.CODE - 64)) | (1 << (EParser.DOCUMENT - 64)) | (1 << (EParser.BLOB - 64)) | (1 << (EParser.TYPE - 64)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (EParser.EXECUTE - 104)) | (1 << (EParser.FETCH - 104)) | (1 << (EParser.INVOKE_COLON - 104)) | (1 << (EParser.MUTABLE - 104)) | (1 << (EParser.NOT - 104)) | (1 << (EParser.NOTHING - 104)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (EParser.READ - 138)) | (1 << (EParser.SELF - 138)) | (1 << (EParser.SORTED - 138)) | (1 << (EParser.SUPER - 138)) | (1 << (EParser.THIS - 138)) | (1 << (EParser.BOOLEAN_LITERAL - 138)) | (1 << (EParser.CHAR_LITERAL - 138)) | (1 << (EParser.MIN_INTEGER - 138)) | (1 << (EParser.MAX_INTEGER - 138)) | (1 << (EParser.SYMBOL_IDENTIFIER - 138)))) !== 0) || ((((_la - 170)) & ~0x1f) == 0 && ((1 << (_la - 170)) & ((1 << (EParser.TYPE_IDENTIFIER - 170)) | (1 << (EParser.VARIABLE_IDENTIFIER - 170)) | (1 << (EParser.TEXT_LITERAL - 170)) | (1 << (EParser.UUID_LITERAL - 170)) | (1 << (EParser.INTEGER_LITERAL - 170)) | (1 << (EParser.HEXA_LITERAL - 170)) | (1 << (EParser.DECIMAL_LITERAL - 170)) | (1 << (EParser.DATETIME_LITERAL - 170)) | (1 << (EParser.TIME_LITERAL - 170)) | (1 << (EParser.DATE_LITERAL - 170)) | (1 << (EParser.PERIOD_LITERAL - 170)) | (1 << (EParser.VERSION_LITERAL - 170)))) !== 0)) {
	            this.state = 1779;
	            this.expression_list();
	        }

	        this.state = 1782;
	        this.match(EParser.RBRAK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_literal() {
	    let localctx = new Set_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, EParser.RULE_set_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1785;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.MUTABLE) {
	            this.state = 1784;
	            this.match(EParser.MUTABLE);
	        }

	        this.state = 1787;
	        this.match(EParser.LT);
	        this.state = 1789;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (EParser.LPAR - 20)) | (1 << (EParser.LBRAK - 20)) | (1 << (EParser.LCURL - 20)) | (1 << (EParser.MINUS - 20)) | (1 << (EParser.LT - 20)) | (1 << (EParser.LTGT - 20)) | (1 << (EParser.LTCOLONGT - 20)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (EParser.METHOD_COLON - 64)) | (1 << (EParser.CODE - 64)) | (1 << (EParser.DOCUMENT - 64)) | (1 << (EParser.BLOB - 64)) | (1 << (EParser.TYPE - 64)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (EParser.EXECUTE - 104)) | (1 << (EParser.FETCH - 104)) | (1 << (EParser.INVOKE_COLON - 104)) | (1 << (EParser.MUTABLE - 104)) | (1 << (EParser.NOT - 104)) | (1 << (EParser.NOTHING - 104)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (EParser.READ - 138)) | (1 << (EParser.SELF - 138)) | (1 << (EParser.SORTED - 138)) | (1 << (EParser.SUPER - 138)) | (1 << (EParser.THIS - 138)) | (1 << (EParser.BOOLEAN_LITERAL - 138)) | (1 << (EParser.CHAR_LITERAL - 138)) | (1 << (EParser.MIN_INTEGER - 138)) | (1 << (EParser.MAX_INTEGER - 138)) | (1 << (EParser.SYMBOL_IDENTIFIER - 138)))) !== 0) || ((((_la - 170)) & ~0x1f) == 0 && ((1 << (_la - 170)) & ((1 << (EParser.TYPE_IDENTIFIER - 170)) | (1 << (EParser.VARIABLE_IDENTIFIER - 170)) | (1 << (EParser.TEXT_LITERAL - 170)) | (1 << (EParser.UUID_LITERAL - 170)) | (1 << (EParser.INTEGER_LITERAL - 170)) | (1 << (EParser.HEXA_LITERAL - 170)) | (1 << (EParser.DECIMAL_LITERAL - 170)) | (1 << (EParser.DATETIME_LITERAL - 170)) | (1 << (EParser.TIME_LITERAL - 170)) | (1 << (EParser.DATE_LITERAL - 170)) | (1 << (EParser.PERIOD_LITERAL - 170)) | (1 << (EParser.VERSION_LITERAL - 170)))) !== 0)) {
	            this.state = 1788;
	            this.expression_list();
	        }

	        this.state = 1791;
	        this.match(EParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression_list() {
	    let localctx = new Expression_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, EParser.RULE_expression_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1793;
	        this.expression(0);
	        this.state = 1798;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===EParser.COMMA) {
	            this.state = 1794;
	            this.match(EParser.COMMA);
	            this.state = 1795;
	            this.expression(0);
	            this.state = 1800;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	range_literal() {
	    let localctx = new Range_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, EParser.RULE_range_literal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1801;
	        this.match(EParser.LBRAK);
	        this.state = 1802;
	        localctx.low = this.expression(0);
	        this.state = 1803;
	        this.match(EParser.RANGE);
	        this.state = 1804;
	        localctx.high = this.expression(0);
	        this.state = 1805;
	        this.match(EParser.RBRAK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	typedef(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new TypedefContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 194;
	    this.enterRecursionRule(localctx, 194, EParser.RULE_typedef, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1819;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.BOOLEAN:
	        case EParser.CSS:
	        case EParser.CHARACTER:
	        case EParser.TEXT:
	        case EParser.INTEGER:
	        case EParser.DECIMAL:
	        case EParser.DATE:
	        case EParser.TIME:
	        case EParser.DATETIME:
	        case EParser.PERIOD:
	        case EParser.VERSION:
	        case EParser.CODE:
	        case EParser.DOCUMENT:
	        case EParser.BLOB:
	        case EParser.IMAGE:
	        case EParser.UUID:
	        case EParser.HTML:
	        case EParser.TYPE_IDENTIFIER:
	            localctx = new PrimaryTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1808;
	            localctx.p = this.primary_type();
	            break;
	        case EParser.CURSOR:
	            localctx = new CursorTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1809;
	            this.match(EParser.CURSOR);
	            this.state = 1810;
	            this.match(EParser.LT);
	            this.state = 1811;
	            localctx.c = this.typedef(0);
	            this.state = 1812;
	            this.match(EParser.GT);
	            break;
	        case EParser.ITERATOR:
	            localctx = new IteratorTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1814;
	            this.match(EParser.ITERATOR);
	            this.state = 1815;
	            this.match(EParser.LT);
	            this.state = 1816;
	            localctx.i = this.typedef(0);
	            this.state = 1817;
	            this.match(EParser.GT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1830;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,139,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1828;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new SetTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
	                    localctx.s = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_typedef);
	                    this.state = 1821;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 1822;
	                    this.match(EParser.LTGT);
	                    break;

	                case 2:
	                    localctx = new ListTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
	                    localctx.l = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_typedef);
	                    this.state = 1823;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 1824;
	                    this.match(EParser.LBRAK);
	                    this.state = 1825;
	                    this.match(EParser.RBRAK);
	                    break;

	                case 3:
	                    localctx = new DictTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
	                    localctx.d = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_typedef);
	                    this.state = 1826;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 1827;
	                    this.match(EParser.LTCOLONGT);
	                    break;

	                } 
	            }
	            this.state = 1832;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,139,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	primary_type() {
	    let localctx = new Primary_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, EParser.RULE_primary_type);
	    try {
	        this.state = 1835;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.BOOLEAN:
	        case EParser.CSS:
	        case EParser.CHARACTER:
	        case EParser.TEXT:
	        case EParser.INTEGER:
	        case EParser.DECIMAL:
	        case EParser.DATE:
	        case EParser.TIME:
	        case EParser.DATETIME:
	        case EParser.PERIOD:
	        case EParser.VERSION:
	        case EParser.CODE:
	        case EParser.DOCUMENT:
	        case EParser.BLOB:
	        case EParser.IMAGE:
	        case EParser.UUID:
	        case EParser.HTML:
	            localctx = new NativeTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1833;
	            localctx.n = this.native_type();
	            break;
	        case EParser.TYPE_IDENTIFIER:
	            localctx = new CategoryTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1834;
	            localctx.c = this.category_type();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_type() {
	    let localctx = new Native_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, EParser.RULE_native_type);
	    try {
	        this.state = 1854;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.BOOLEAN:
	            localctx = new BooleanTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1837;
	            this.match(EParser.BOOLEAN);
	            break;
	        case EParser.CSS:
	            localctx = new CssTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1838;
	            this.match(EParser.CSS);
	            break;
	        case EParser.CHARACTER:
	            localctx = new CharacterTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1839;
	            this.match(EParser.CHARACTER);
	            break;
	        case EParser.TEXT:
	            localctx = new TextTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1840;
	            this.match(EParser.TEXT);
	            break;
	        case EParser.IMAGE:
	            localctx = new ImageTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1841;
	            this.match(EParser.IMAGE);
	            break;
	        case EParser.INTEGER:
	            localctx = new IntegerTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1842;
	            this.match(EParser.INTEGER);
	            break;
	        case EParser.DECIMAL:
	            localctx = new DecimalTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1843;
	            this.match(EParser.DECIMAL);
	            break;
	        case EParser.DOCUMENT:
	            localctx = new DocumentTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1844;
	            this.match(EParser.DOCUMENT);
	            break;
	        case EParser.DATE:
	            localctx = new DateTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1845;
	            this.match(EParser.DATE);
	            break;
	        case EParser.DATETIME:
	            localctx = new DateTimeTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1846;
	            this.match(EParser.DATETIME);
	            break;
	        case EParser.TIME:
	            localctx = new TimeTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1847;
	            this.match(EParser.TIME);
	            break;
	        case EParser.PERIOD:
	            localctx = new PeriodTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1848;
	            this.match(EParser.PERIOD);
	            break;
	        case EParser.VERSION:
	            localctx = new VersionTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1849;
	            this.match(EParser.VERSION);
	            break;
	        case EParser.CODE:
	            localctx = new CodeTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1850;
	            this.match(EParser.CODE);
	            break;
	        case EParser.BLOB:
	            localctx = new BlobTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1851;
	            this.match(EParser.BLOB);
	            break;
	        case EParser.UUID:
	            localctx = new UUIDTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1852;
	            this.match(EParser.UUID);
	            break;
	        case EParser.HTML:
	            localctx = new HtmlTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1853;
	            this.match(EParser.HTML);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	category_type() {
	    let localctx = new Category_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, EParser.RULE_category_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1856;
	        localctx.t1 = this.match(EParser.TYPE_IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mutable_category_type() {
	    let localctx = new Mutable_category_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, EParser.RULE_mutable_category_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1859;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.MUTABLE) {
	            this.state = 1858;
	            this.match(EParser.MUTABLE);
	        }

	        this.state = 1861;
	        this.category_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	code_type() {
	    let localctx = new Code_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, EParser.RULE_code_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1863;
	        localctx.t1 = this.match(EParser.CODE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	category_declaration() {
	    let localctx = new Category_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, EParser.RULE_category_declaration);
	    try {
	        this.state = 1868;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ConcreteCategoryDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1865;
	            localctx.decl = this.concrete_category_declaration();
	            break;

	        case 2:
	            localctx = new NativeCategoryDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1866;
	            localctx.decl = this.native_category_declaration();
	            break;

	        case 3:
	            localctx = new SingletonCategoryDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1867;
	            localctx.decl = this.singleton_category_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	widget_declaration() {
	    let localctx = new Widget_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, EParser.RULE_widget_declaration);
	    try {
	        this.state = 1872;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ConcreteWidgetDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1870;
	            localctx.decl = this.concrete_widget_declaration();
	            break;

	        case 2:
	            localctx = new NativeWidgetDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1871;
	            localctx.decl = this.native_widget_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_identifier_list() {
	    let localctx = new Type_identifier_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, EParser.RULE_type_identifier_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1874;
	        this.type_identifier();
	        this.state = 1879;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===EParser.COMMA) {
	            this.state = 1875;
	            this.match(EParser.COMMA);
	            this.state = 1876;
	            this.type_identifier();
	            this.state = 1881;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	method_identifier() {
	    let localctx = new Method_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, EParser.RULE_method_identifier);
	    try {
	        this.state = 1884;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.VARIABLE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1882;
	            this.variable_identifier();
	            break;
	        case EParser.TYPE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1883;
	            this.type_identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier_or_keyword() {
	    let localctx = new Identifier_or_keywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, EParser.RULE_identifier_or_keyword);
	    try {
	        this.state = 1888;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.SYMBOL_IDENTIFIER:
	        case EParser.TYPE_IDENTIFIER:
	        case EParser.VARIABLE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1886;
	            this.identifier();
	            break;
	        case EParser.JAVA:
	        case EParser.CSHARP:
	        case EParser.PYTHON2:
	        case EParser.PYTHON3:
	        case EParser.JAVASCRIPT:
	        case EParser.SWIFT:
	        case EParser.BOOLEAN:
	        case EParser.CHARACTER:
	        case EParser.TEXT:
	        case EParser.INTEGER:
	        case EParser.DECIMAL:
	        case EParser.DATE:
	        case EParser.TIME:
	        case EParser.DATETIME:
	        case EParser.PERIOD:
	        case EParser.VERSION:
	        case EParser.CODE:
	        case EParser.DOCUMENT:
	        case EParser.BLOB:
	        case EParser.IMAGE:
	        case EParser.UUID:
	        case EParser.ITERATOR:
	        case EParser.CURSOR:
	        case EParser.HTML:
	        case EParser.ABSTRACT:
	        case EParser.ALL:
	        case EParser.ALWAYS:
	        case EParser.AND:
	        case EParser.ANY:
	        case EParser.AS:
	        case EParser.ASC:
	        case EParser.ATTR:
	        case EParser.ATTRIBUTE:
	        case EParser.ATTRIBUTES:
	        case EParser.BINDINGS:
	        case EParser.BREAK:
	        case EParser.BY:
	        case EParser.CASE:
	        case EParser.CATCH:
	        case EParser.CATEGORY:
	        case EParser.CLASS:
	        case EParser.CONTAINS:
	        case EParser.DEF:
	        case EParser.DEFAULT:
	        case EParser.DEFINE:
	        case EParser.DELETE:
	        case EParser.DESC:
	        case EParser.DO:
	        case EParser.DOING:
	        case EParser.EACH:
	        case EParser.ELSE:
	        case EParser.ENUM:
	        case EParser.ENUMERATED:
	        case EParser.EXCEPT:
	        case EParser.EXECUTE:
	        case EParser.EXPECTING:
	        case EParser.EXTENDS:
	        case EParser.FETCH:
	        case EParser.FILTERED:
	        case EParser.FINALLY:
	        case EParser.FLUSH:
	        case EParser.FOR:
	        case EParser.FROM:
	        case EParser.GETTER:
	        case EParser.HAS:
	        case EParser.IF:
	        case EParser.IN:
	        case EParser.INDEX:
	        case EParser.IS:
	        case EParser.MATCHING:
	        case EParser.METHOD:
	        case EParser.METHODS:
	        case EParser.MODULO:
	        case EParser.MUTABLE:
	        case EParser.NATIVE:
	        case EParser.NONE:
	        case EParser.NOT:
	        case EParser.NOTHING:
	        case EParser.NULL:
	        case EParser.ON:
	        case EParser.ONE:
	        case EParser.OPERATOR:
	        case EParser.OR:
	        case EParser.ORDER:
	        case EParser.OTHERWISE:
	        case EParser.PASS:
	        case EParser.RAISE:
	        case EParser.READ:
	        case EParser.RECEIVING:
	        case EParser.RESOURCE:
	        case EParser.RETURN:
	        case EParser.RETURNING:
	        case EParser.ROWS:
	        case EParser.SELF:
	        case EParser.SETTER:
	        case EParser.SINGLETON:
	        case EParser.SORTED:
	        case EParser.STORABLE:
	        case EParser.STORE:
	        case EParser.SUPER:
	        case EParser.SWITCH:
	        case EParser.TEST:
	        case EParser.THIS:
	        case EParser.THROW:
	        case EParser.TO:
	        case EParser.TRY:
	        case EParser.VERIFYING:
	        case EParser.WIDGET:
	        case EParser.WITH:
	        case EParser.WHEN:
	        case EParser.WHERE:
	        case EParser.WHILE:
	        case EParser.WRITE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1887;
	            this.keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nospace_hyphen_identifier_or_keyword() {
	    let localctx = new Nospace_hyphen_identifier_or_keywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, EParser.RULE_nospace_hyphen_identifier_or_keyword);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1890;
	        if (!( this.wasNotWhiteSpace())) {
	            throw new antlr4.error.FailedPredicateException(this, "$parser.wasNotWhiteSpace()");
	        }
	        this.state = 1891;
	        this.match(EParser.MINUS);
	        this.state = 1892;
	        this.nospace_identifier_or_keyword();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nospace_identifier_or_keyword() {
	    let localctx = new Nospace_identifier_or_keywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, EParser.RULE_nospace_identifier_or_keyword);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1894;
	        if (!( this.wasNotWhiteSpace())) {
	            throw new antlr4.error.FailedPredicateException(this, "$parser.wasNotWhiteSpace()");
	        }
	        this.state = 1895;
	        this.identifier_or_keyword();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, EParser.RULE_identifier);
	    try {
	        this.state = 1900;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.VARIABLE_IDENTIFIER:
	            localctx = new VariableIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1897;
	            this.variable_identifier();
	            break;
	        case EParser.TYPE_IDENTIFIER:
	            localctx = new TypeIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1898;
	            this.type_identifier();
	            break;
	        case EParser.SYMBOL_IDENTIFIER:
	            localctx = new SymbolIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1899;
	            this.symbol_identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_identifier() {
	    let localctx = new Member_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, EParser.RULE_member_identifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1902;
	        _la = this._input.LA(1);
	        if(!(_la===EParser.CATEGORY || _la===EParser.VARIABLE_IDENTIFIER)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_identifier() {
	    let localctx = new Variable_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, EParser.RULE_variable_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1904;
	        this.match(EParser.VARIABLE_IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_identifier() {
	    let localctx = new Attribute_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, EParser.RULE_attribute_identifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1906;
	        _la = this._input.LA(1);
	        if(!(_la===EParser.STORABLE || _la===EParser.VARIABLE_IDENTIFIER)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_identifier() {
	    let localctx = new Type_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, EParser.RULE_type_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1908;
	        this.match(EParser.TYPE_IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbol_identifier() {
	    let localctx = new Symbol_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, EParser.RULE_symbol_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1910;
	        this.match(EParser.SYMBOL_IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument_list() {
	    let localctx = new Argument_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, EParser.RULE_argument_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1912;
	        this.argument();
	        this.state = 1917;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===EParser.COMMA) {
	            this.state = 1913;
	            this.match(EParser.COMMA);
	            this.state = 1914;
	            this.argument();
	            this.state = 1919;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, EParser.RULE_argument);
	    var _la = 0; // Token type
	    try {
	        this.state = 1925;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CodeArgumentContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1920;
	            localctx.arg = this.code_argument();
	            break;

	        case 2:
	            localctx = new OperatorArgumentContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1922;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===EParser.MUTABLE) {
	                this.state = 1921;
	                this.match(EParser.MUTABLE);
	            }

	            this.state = 1924;
	            localctx.arg = this.operator_argument();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator_argument() {
	    let localctx = new Operator_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, EParser.RULE_operator_argument);
	    try {
	        this.state = 1929;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.VARIABLE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1927;
	            this.named_argument();
	            break;
	        case EParser.BOOLEAN:
	        case EParser.CSS:
	        case EParser.CHARACTER:
	        case EParser.TEXT:
	        case EParser.INTEGER:
	        case EParser.DECIMAL:
	        case EParser.DATE:
	        case EParser.TIME:
	        case EParser.DATETIME:
	        case EParser.PERIOD:
	        case EParser.VERSION:
	        case EParser.CODE:
	        case EParser.DOCUMENT:
	        case EParser.BLOB:
	        case EParser.IMAGE:
	        case EParser.UUID:
	        case EParser.ITERATOR:
	        case EParser.CURSOR:
	        case EParser.HTML:
	        case EParser.ANY:
	        case EParser.TYPE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1928;
	            this.typed_argument();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_argument() {
	    let localctx = new Named_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, EParser.RULE_named_argument);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1931;
	        this.variable_identifier();
	        this.state = 1934;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.EQ) {
	            this.state = 1932;
	            this.match(EParser.EQ);
	            this.state = 1933;
	            this.literal_expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	code_argument() {
	    let localctx = new Code_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, EParser.RULE_code_argument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1936;
	        this.code_type();
	        this.state = 1937;
	        localctx.name = this.variable_identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	category_or_any_type() {
	    let localctx = new Category_or_any_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, EParser.RULE_category_or_any_type);
	    try {
	        this.state = 1941;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.BOOLEAN:
	        case EParser.CSS:
	        case EParser.CHARACTER:
	        case EParser.TEXT:
	        case EParser.INTEGER:
	        case EParser.DECIMAL:
	        case EParser.DATE:
	        case EParser.TIME:
	        case EParser.DATETIME:
	        case EParser.PERIOD:
	        case EParser.VERSION:
	        case EParser.CODE:
	        case EParser.DOCUMENT:
	        case EParser.BLOB:
	        case EParser.IMAGE:
	        case EParser.UUID:
	        case EParser.ITERATOR:
	        case EParser.CURSOR:
	        case EParser.HTML:
	        case EParser.TYPE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1939;
	            this.typedef(0);
	            break;
	        case EParser.ANY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1940;
	            this.any_type(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	any_type(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Any_typeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 244;
	    this.enterRecursionRule(localctx, 244, EParser.RULE_any_type, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new AnyTypeContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 1944;
	        this.match(EParser.ANY);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1954;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,156,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1952;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new AnyListTypeContext(this, new Any_typeContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_any_type);
	                    this.state = 1946;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1947;
	                    this.match(EParser.LBRAK);
	                    this.state = 1948;
	                    this.match(EParser.RBRAK);
	                    break;

	                case 2:
	                    localctx = new AnyDictTypeContext(this, new Any_typeContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_any_type);
	                    this.state = 1949;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 1950;
	                    this.match(EParser.LCURL);
	                    this.state = 1951;
	                    this.match(EParser.RCURL);
	                    break;

	                } 
	            }
	            this.state = 1956;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,156,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	member_method_declaration_list() {
	    let localctx = new Member_method_declaration_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, EParser.RULE_member_method_declaration_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1957;
	        this.member_method_declaration();
	        this.state = 1963;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,157,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1958;
	                this.lfp();
	                this.state = 1959;
	                this.member_method_declaration(); 
	            }
	            this.state = 1965;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,157,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_method_declaration() {
	    let localctx = new Member_method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, EParser.RULE_member_method_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1971;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===EParser.COMMENT) {
	            this.state = 1966;
	            this.comment_statement();
	            this.state = 1967;
	            this.lfp();
	            this.state = 1973;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1979;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===EParser.ARONDBASE_IDENTIFIER) {
	            this.state = 1974;
	            this.annotation_constructor();
	            this.state = 1975;
	            this.lfp();
	            this.state = 1981;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1987;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1982;
	            this.setter_method_declaration();
	            break;

	        case 2:
	            this.state = 1983;
	            this.getter_method_declaration();
	            break;

	        case 3:
	            this.state = 1984;
	            this.concrete_method_declaration();
	            break;

	        case 4:
	            this.state = 1985;
	            this.abstract_method_declaration();
	            break;

	        case 5:
	            this.state = 1986;
	            this.operator_method_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_member_method_declaration_list() {
	    let localctx = new Native_member_method_declaration_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, EParser.RULE_native_member_method_declaration_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1989;
	        this.native_member_method_declaration();
	        this.state = 1995;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,161,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1990;
	                this.lfp();
	                this.state = 1991;
	                this.native_member_method_declaration(); 
	            }
	            this.state = 1997;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,161,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_member_method_declaration() {
	    let localctx = new Native_member_method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, EParser.RULE_native_member_method_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2003;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===EParser.COMMENT) {
	            this.state = 1998;
	            this.comment_statement();
	            this.state = 1999;
	            this.lfp();
	            this.state = 2005;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2011;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===EParser.ARONDBASE_IDENTIFIER) {
	            this.state = 2006;
	            this.annotation_constructor();
	            this.state = 2007;
	            this.lfp();
	            this.state = 2013;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2017;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2014;
	            this.native_getter_declaration();
	            break;

	        case 2:
	            this.state = 2015;
	            this.native_setter_declaration();
	            break;

	        case 3:
	            this.state = 2016;
	            this.native_method_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_category_binding() {
	    let localctx = new Native_category_bindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, EParser.RULE_native_category_binding);
	    try {
	        this.state = 2029;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.JAVA:
	            localctx = new JavaCategoryBindingContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2019;
	            this.match(EParser.JAVA);
	            this.state = 2020;
	            localctx.binding = this.java_class_identifier_expression(0);
	            break;
	        case EParser.CSHARP:
	            localctx = new CSharpCategoryBindingContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2021;
	            this.match(EParser.CSHARP);
	            this.state = 2022;
	            localctx.binding = this.csharp_identifier_expression(0);
	            break;
	        case EParser.PYTHON2:
	            localctx = new Python2CategoryBindingContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2023;
	            this.match(EParser.PYTHON2);
	            this.state = 2024;
	            localctx.binding = this.python_category_binding();
	            break;
	        case EParser.PYTHON3:
	            localctx = new Python3CategoryBindingContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2025;
	            this.match(EParser.PYTHON3);
	            this.state = 2026;
	            localctx.binding = this.python_category_binding();
	            break;
	        case EParser.JAVASCRIPT:
	            localctx = new JavaScriptCategoryBindingContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2027;
	            this.match(EParser.JAVASCRIPT);
	            this.state = 2028;
	            localctx.binding = this.javascript_category_binding();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	python_category_binding() {
	    let localctx = new Python_category_bindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, EParser.RULE_python_category_binding);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2031;
	        this.identifier();
	        this.state = 2033;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
	        if(la_===1) {
	            this.state = 2032;
	            this.python_module();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	python_module() {
	    let localctx = new Python_moduleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, EParser.RULE_python_module);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2035;
	        this.match(EParser.FROM);
	        this.state = 2036;
	        this.module_token();
	        this.state = 2037;
	        this.match(EParser.COLON);
	        this.state = 2038;
	        this.python_identifier();
	        this.state = 2043;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,167,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2039;
	                this.match(EParser.DOT);
	                this.state = 2040;
	                this.python_identifier(); 
	            }
	            this.state = 2045;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,167,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_category_binding() {
	    let localctx = new Javascript_category_bindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, EParser.RULE_javascript_category_binding);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2046;
	        this.javascript_identifier();
	        this.state = 2051;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,168,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2047;
	                this.match(EParser.DOT);
	                this.state = 2048;
	                this.javascript_identifier(); 
	            }
	            this.state = 2053;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,168,this._ctx);
	        }

	        this.state = 2055;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
	        if(la_===1) {
	            this.state = 2054;
	            this.javascript_module();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_module() {
	    let localctx = new Javascript_moduleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, EParser.RULE_javascript_module);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2057;
	        this.match(EParser.FROM);
	        this.state = 2058;
	        this.module_token();
	        this.state = 2059;
	        this.match(EParser.COLON);
	        this.state = 2061;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.SLASH) {
	            this.state = 2060;
	            this.match(EParser.SLASH);
	        }

	        this.state = 2063;
	        this.javascript_identifier();
	        this.state = 2068;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,171,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2064;
	                this.match(EParser.SLASH);
	                this.state = 2065;
	                this.javascript_identifier(); 
	            }
	            this.state = 2070;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,171,this._ctx);
	        }

	        this.state = 2073;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
	        if(la_===1) {
	            this.state = 2071;
	            this.match(EParser.DOT);
	            this.state = 2072;
	            this.javascript_identifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_identifier_list() {
	    let localctx = new Variable_identifier_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, EParser.RULE_variable_identifier_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2075;
	        this.variable_identifier();
	        this.state = 2080;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===EParser.COMMA) {
	            this.state = 2076;
	            this.match(EParser.COMMA);
	            this.state = 2077;
	            this.variable_identifier();
	            this.state = 2082;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_identifier_list() {
	    let localctx = new Attribute_identifier_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, EParser.RULE_attribute_identifier_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2083;
	        this.attribute_identifier();
	        this.state = 2088;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,174,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2084;
	                this.match(EParser.COMMA);
	                this.state = 2085;
	                this.attribute_identifier(); 
	            }
	            this.state = 2090;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,174,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	method_declaration() {
	    let localctx = new Method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, EParser.RULE_method_declaration);
	    try {
	        this.state = 2095;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2091;
	            this.abstract_method_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2092;
	            this.concrete_method_declaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2093;
	            this.native_method_declaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2094;
	            this.test_method_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comment_statement() {
	    let localctx = new Comment_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, EParser.RULE_comment_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2097;
	        this.match(EParser.COMMENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_statement_list() {
	    let localctx = new Native_statement_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, EParser.RULE_native_statement_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2099;
	        this.native_statement();
	        this.state = 2105;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,176,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2100;
	                this.lfp();
	                this.state = 2101;
	                this.native_statement(); 
	            }
	            this.state = 2107;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,176,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	native_statement() {
	    let localctx = new Native_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, EParser.RULE_native_statement);
	    try {
	        this.state = 2118;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.JAVA:
	            localctx = new JavaNativeStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2108;
	            this.match(EParser.JAVA);
	            this.state = 2109;
	            this.java_statement();
	            break;
	        case EParser.CSHARP:
	            localctx = new CSharpNativeStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2110;
	            this.match(EParser.CSHARP);
	            this.state = 2111;
	            this.csharp_statement();
	            break;
	        case EParser.PYTHON2:
	            localctx = new Python2NativeStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2112;
	            this.match(EParser.PYTHON2);
	            this.state = 2113;
	            this.python_native_statement();
	            break;
	        case EParser.PYTHON3:
	            localctx = new Python3NativeStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2114;
	            this.match(EParser.PYTHON3);
	            this.state = 2115;
	            this.python_native_statement();
	            break;
	        case EParser.JAVASCRIPT:
	            localctx = new JavaScriptNativeStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2116;
	            this.match(EParser.JAVASCRIPT);
	            this.state = 2117;
	            this.javascript_native_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	python_native_statement() {
	    let localctx = new Python_native_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, EParser.RULE_python_native_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2120;
	        this.python_statement();
	        this.state = 2122;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.SEMI) {
	            this.state = 2121;
	            this.match(EParser.SEMI);
	        }

	        this.state = 2125;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.FROM) {
	            this.state = 2124;
	            this.python_module();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_native_statement() {
	    let localctx = new Javascript_native_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, EParser.RULE_javascript_native_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2127;
	        this.javascript_statement();
	        this.state = 2129;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.SEMI) {
	            this.state = 2128;
	            this.match(EParser.SEMI);
	        }

	        this.state = 2132;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.FROM) {
	            this.state = 2131;
	            this.javascript_module();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement_list() {
	    let localctx = new Statement_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, EParser.RULE_statement_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2134;
	        this.statement();
	        this.state = 2140;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,182,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2135;
	                this.lfp();
	                this.state = 2136;
	                this.statement(); 
	            }
	            this.state = 2142;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,182,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertion_list() {
	    let localctx = new Assertion_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, EParser.RULE_assertion_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2143;
	        this.assertion();
	        this.state = 2149;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,183,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2144;
	                this.lfp();
	                this.state = 2145;
	                this.assertion(); 
	            }
	            this.state = 2151;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,183,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_case_statement_list() {
	    let localctx = new Switch_case_statement_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, EParser.RULE_switch_case_statement_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2152;
	        this.switch_case_statement();
	        this.state = 2158;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,184,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2153;
	                this.lfp();
	                this.state = 2154;
	                this.switch_case_statement(); 
	            }
	            this.state = 2160;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,184,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catch_statement_list() {
	    let localctx = new Catch_statement_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, EParser.RULE_catch_statement_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2161;
	        this.catch_statement();
	        this.state = 2167;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,185,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2162;
	                this.lfp();
	                this.state = 2163;
	                this.catch_statement(); 
	            }
	            this.state = 2169;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,185,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal_collection() {
	    let localctx = new Literal_collectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, EParser.RULE_literal_collection);
	    try {
	        this.state = 2184;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new LiteralRangeLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2170;
	            this.match(EParser.LBRAK);
	            this.state = 2171;
	            localctx.low = this.atomic_literal();
	            this.state = 2172;
	            this.match(EParser.RANGE);
	            this.state = 2173;
	            localctx.high = this.atomic_literal();
	            this.state = 2174;
	            this.match(EParser.RBRAK);
	            break;

	        case 2:
	            localctx = new LiteralListLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2176;
	            this.match(EParser.LBRAK);
	            this.state = 2177;
	            this.literal_list_literal();
	            this.state = 2178;
	            this.match(EParser.RBRAK);
	            break;

	        case 3:
	            localctx = new LiteralSetLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2180;
	            this.match(EParser.LT);
	            this.state = 2181;
	            this.literal_list_literal();
	            this.state = 2182;
	            this.match(EParser.GT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomic_literal() {
	    let localctx = new Atomic_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, EParser.RULE_atomic_literal);
	    var _la = 0; // Token type
	    try {
	        this.state = 2209;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new MinIntegerLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2186;
	            this.match(EParser.MIN_INTEGER);
	            break;

	        case 2:
	            localctx = new MaxIntegerLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2187;
	            this.match(EParser.MAX_INTEGER);
	            break;

	        case 3:
	            localctx = new IntegerLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2189;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===EParser.MINUS) {
	                this.state = 2188;
	                this.match(EParser.MINUS);
	            }

	            this.state = 2191;
	            this.match(EParser.INTEGER_LITERAL);
	            break;

	        case 4:
	            localctx = new HexadecimalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2192;
	            this.match(EParser.HEXA_LITERAL);
	            break;

	        case 5:
	            localctx = new CharacterLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2193;
	            this.match(EParser.CHAR_LITERAL);
	            break;

	        case 6:
	            localctx = new DateLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2194;
	            this.match(EParser.DATE_LITERAL);
	            break;

	        case 7:
	            localctx = new TimeLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2195;
	            this.match(EParser.TIME_LITERAL);
	            break;

	        case 8:
	            localctx = new TextLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2196;
	            this.match(EParser.TEXT_LITERAL);
	            break;

	        case 9:
	            localctx = new DecimalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2198;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===EParser.MINUS) {
	                this.state = 2197;
	                this.match(EParser.MINUS);
	            }

	            this.state = 2200;
	            this.match(EParser.DECIMAL_LITERAL);
	            break;

	        case 10:
	            localctx = new DateTimeLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2201;
	            this.match(EParser.DATETIME_LITERAL);
	            break;

	        case 11:
	            localctx = new BooleanLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2202;
	            this.match(EParser.BOOLEAN_LITERAL);
	            break;

	        case 12:
	            localctx = new PeriodLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2203;
	            this.match(EParser.PERIOD_LITERAL);
	            break;

	        case 13:
	            localctx = new VersionLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2204;
	            this.match(EParser.VERSION_LITERAL);
	            break;

	        case 14:
	            localctx = new UUIDLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2205;
	            this.match(EParser.UUID_LITERAL);
	            break;

	        case 15:
	            localctx = new SymbolLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2206;
	            this.symbol_identifier();
	            break;

	        case 16:
	            localctx = new TypeLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2207;
	            this.type_literal();
	            break;

	        case 17:
	            localctx = new NullLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2208;
	            this.null_literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal_list_literal() {
	    let localctx = new Literal_list_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, EParser.RULE_literal_list_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2211;
	        this.atomic_literal();
	        this.state = 2216;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===EParser.COMMA) {
	            this.state = 2212;
	            this.match(EParser.COMMA);
	            this.state = 2213;
	            this.atomic_literal();
	            this.state = 2218;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	this_expression() {
	    let localctx = new This_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, EParser.RULE_this_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2219;
	        _la = this._input.LA(1);
	        if(!(_la===EParser.SELF || _la===EParser.THIS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	super_expression() {
	    let localctx = new Super_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, EParser.RULE_super_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2224;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.TYPE_IDENTIFIER) {
	            this.state = 2221;
	            this.category_type();
	            this.state = 2222;
	            this.match(EParser.DOT);
	        }

	        this.state = 2226;
	        this.match(EParser.SUPER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesis_expression() {
	    let localctx = new Parenthesis_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, EParser.RULE_parenthesis_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2228;
	        this.match(EParser.LPAR);
	        this.state = 2229;
	        this.expression(0);
	        this.state = 2230;
	        this.match(EParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal_expression() {
	    let localctx = new Literal_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, EParser.RULE_literal_expression);
	    try {
	        this.state = 2234;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.MINUS:
	        case EParser.TYPE:
	        case EParser.NOTHING:
	        case EParser.BOOLEAN_LITERAL:
	        case EParser.CHAR_LITERAL:
	        case EParser.MIN_INTEGER:
	        case EParser.MAX_INTEGER:
	        case EParser.SYMBOL_IDENTIFIER:
	        case EParser.TEXT_LITERAL:
	        case EParser.UUID_LITERAL:
	        case EParser.INTEGER_LITERAL:
	        case EParser.HEXA_LITERAL:
	        case EParser.DECIMAL_LITERAL:
	        case EParser.DATETIME_LITERAL:
	        case EParser.TIME_LITERAL:
	        case EParser.DATE_LITERAL:
	        case EParser.PERIOD_LITERAL:
	        case EParser.VERSION_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2232;
	            this.atomic_literal();
	            break;
	        case EParser.LPAR:
	        case EParser.LBRAK:
	        case EParser.LCURL:
	        case EParser.LT:
	        case EParser.LTCOLONGT:
	        case EParser.MUTABLE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2233;
	            this.collection_literal();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collection_literal() {
	    let localctx = new Collection_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, EParser.RULE_collection_literal);
	    try {
	        this.state = 2242;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2236;
	            this.range_literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2237;
	            this.list_literal();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2238;
	            this.set_literal();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2239;
	            this.dict_literal();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2240;
	            this.document_literal();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2241;
	            this.tuple_literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuple_literal() {
	    let localctx = new Tuple_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, EParser.RULE_tuple_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2245;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.MUTABLE) {
	            this.state = 2244;
	            this.match(EParser.MUTABLE);
	        }

	        this.state = 2247;
	        this.match(EParser.LPAR);
	        this.state = 2249;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (EParser.LPAR - 20)) | (1 << (EParser.LBRAK - 20)) | (1 << (EParser.LCURL - 20)) | (1 << (EParser.MINUS - 20)) | (1 << (EParser.LT - 20)) | (1 << (EParser.LTGT - 20)) | (1 << (EParser.LTCOLONGT - 20)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (EParser.METHOD_COLON - 64)) | (1 << (EParser.CODE - 64)) | (1 << (EParser.DOCUMENT - 64)) | (1 << (EParser.BLOB - 64)) | (1 << (EParser.TYPE - 64)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (EParser.EXECUTE - 104)) | (1 << (EParser.FETCH - 104)) | (1 << (EParser.INVOKE_COLON - 104)) | (1 << (EParser.MUTABLE - 104)) | (1 << (EParser.NOT - 104)) | (1 << (EParser.NOTHING - 104)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (EParser.READ - 138)) | (1 << (EParser.SELF - 138)) | (1 << (EParser.SORTED - 138)) | (1 << (EParser.SUPER - 138)) | (1 << (EParser.THIS - 138)) | (1 << (EParser.BOOLEAN_LITERAL - 138)) | (1 << (EParser.CHAR_LITERAL - 138)) | (1 << (EParser.MIN_INTEGER - 138)) | (1 << (EParser.MAX_INTEGER - 138)) | (1 << (EParser.SYMBOL_IDENTIFIER - 138)))) !== 0) || ((((_la - 170)) & ~0x1f) == 0 && ((1 << (_la - 170)) & ((1 << (EParser.TYPE_IDENTIFIER - 170)) | (1 << (EParser.VARIABLE_IDENTIFIER - 170)) | (1 << (EParser.TEXT_LITERAL - 170)) | (1 << (EParser.UUID_LITERAL - 170)) | (1 << (EParser.INTEGER_LITERAL - 170)) | (1 << (EParser.HEXA_LITERAL - 170)) | (1 << (EParser.DECIMAL_LITERAL - 170)) | (1 << (EParser.DATETIME_LITERAL - 170)) | (1 << (EParser.TIME_LITERAL - 170)) | (1 << (EParser.DATE_LITERAL - 170)) | (1 << (EParser.PERIOD_LITERAL - 170)) | (1 << (EParser.VERSION_LITERAL - 170)))) !== 0)) {
	            this.state = 2248;
	            this.expression_tuple();
	        }

	        this.state = 2251;
	        this.match(EParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dict_literal() {
	    let localctx = new Dict_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, EParser.RULE_dict_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2254;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.MUTABLE) {
	            this.state = 2253;
	            this.match(EParser.MUTABLE);
	        }

	        this.state = 2264;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2256;
	            this.match(EParser.LT);
	            this.state = 2257;
	            this.dict_entry_list();
	            this.state = 2258;
	            this.match(EParser.GT);
	            break;

	        case 2:
	            this.state = 2260;
	            this.match(EParser.LTCOLONGT);
	            break;

	        case 3:
	            this.state = 2261;
	            this.match(EParser.LT);
	            this.state = 2262;
	            this.match(EParser.COLON);
	            this.state = 2263;
	            this.match(EParser.GT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	document_literal() {
	    let localctx = new Document_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, EParser.RULE_document_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2266;
	        this.match(EParser.LCURL);
	        this.state = 2268;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << EParser.JAVA) | (1 << EParser.CSHARP) | (1 << EParser.PYTHON2) | (1 << EParser.PYTHON3) | (1 << EParser.JAVASCRIPT) | (1 << EParser.SWIFT))) !== 0) || ((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (EParser.BOOLEAN - 53)) | (1 << (EParser.CHARACTER - 53)) | (1 << (EParser.TEXT - 53)) | (1 << (EParser.INTEGER - 53)) | (1 << (EParser.DECIMAL - 53)) | (1 << (EParser.DATE - 53)) | (1 << (EParser.TIME - 53)) | (1 << (EParser.DATETIME - 53)) | (1 << (EParser.PERIOD - 53)) | (1 << (EParser.VERSION - 53)) | (1 << (EParser.CODE - 53)) | (1 << (EParser.DOCUMENT - 53)) | (1 << (EParser.BLOB - 53)) | (1 << (EParser.IMAGE - 53)) | (1 << (EParser.UUID - 53)) | (1 << (EParser.ITERATOR - 53)) | (1 << (EParser.CURSOR - 53)) | (1 << (EParser.HTML - 53)) | (1 << (EParser.ABSTRACT - 53)) | (1 << (EParser.ALL - 53)) | (1 << (EParser.ALWAYS - 53)) | (1 << (EParser.AND - 53)) | (1 << (EParser.ANY - 53)) | (1 << (EParser.AS - 53)) | (1 << (EParser.ASC - 53)) | (1 << (EParser.ATTR - 53)) | (1 << (EParser.ATTRIBUTE - 53)) | (1 << (EParser.ATTRIBUTES - 53)) | (1 << (EParser.BINDINGS - 53)))) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (EParser.BREAK - 85)) | (1 << (EParser.BY - 85)) | (1 << (EParser.CASE - 85)) | (1 << (EParser.CATCH - 85)) | (1 << (EParser.CATEGORY - 85)) | (1 << (EParser.CLASS - 85)) | (1 << (EParser.CONTAINS - 85)) | (1 << (EParser.DEF - 85)) | (1 << (EParser.DEFAULT - 85)) | (1 << (EParser.DEFINE - 85)) | (1 << (EParser.DELETE - 85)) | (1 << (EParser.DESC - 85)) | (1 << (EParser.DO - 85)) | (1 << (EParser.DOING - 85)) | (1 << (EParser.EACH - 85)) | (1 << (EParser.ELSE - 85)) | (1 << (EParser.ENUM - 85)) | (1 << (EParser.ENUMERATED - 85)) | (1 << (EParser.EXCEPT - 85)) | (1 << (EParser.EXECUTE - 85)) | (1 << (EParser.EXPECTING - 85)) | (1 << (EParser.EXTENDS - 85)) | (1 << (EParser.FETCH - 85)) | (1 << (EParser.FILTERED - 85)) | (1 << (EParser.FINALLY - 85)) | (1 << (EParser.FLUSH - 85)) | (1 << (EParser.FOR - 85)) | (1 << (EParser.FROM - 85)) | (1 << (EParser.GETTER - 85)) | (1 << (EParser.HAS - 85)) | (1 << (EParser.IF - 85)) | (1 << (EParser.IN - 85)))) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & ((1 << (EParser.INDEX - 117)) | (1 << (EParser.IS - 117)) | (1 << (EParser.MATCHING - 117)) | (1 << (EParser.METHOD - 117)) | (1 << (EParser.METHODS - 117)) | (1 << (EParser.MODULO - 117)) | (1 << (EParser.MUTABLE - 117)) | (1 << (EParser.NATIVE - 117)) | (1 << (EParser.NONE - 117)) | (1 << (EParser.NOT - 117)) | (1 << (EParser.NOTHING - 117)) | (1 << (EParser.NULL - 117)) | (1 << (EParser.ON - 117)) | (1 << (EParser.ONE - 117)) | (1 << (EParser.OPERATOR - 117)) | (1 << (EParser.OR - 117)) | (1 << (EParser.ORDER - 117)) | (1 << (EParser.OTHERWISE - 117)) | (1 << (EParser.PASS - 117)) | (1 << (EParser.RAISE - 117)) | (1 << (EParser.READ - 117)) | (1 << (EParser.RECEIVING - 117)) | (1 << (EParser.RESOURCE - 117)) | (1 << (EParser.RETURN - 117)) | (1 << (EParser.RETURNING - 117)) | (1 << (EParser.ROWS - 117)) | (1 << (EParser.SELF - 117)) | (1 << (EParser.SETTER - 117)) | (1 << (EParser.SINGLETON - 117)) | (1 << (EParser.SORTED - 117)) | (1 << (EParser.STORABLE - 117)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (EParser.STORE - 149)) | (1 << (EParser.SUPER - 149)) | (1 << (EParser.SWITCH - 149)) | (1 << (EParser.TEST - 149)) | (1 << (EParser.THIS - 149)) | (1 << (EParser.THROW - 149)) | (1 << (EParser.TO - 149)) | (1 << (EParser.TRY - 149)) | (1 << (EParser.VERIFYING - 149)) | (1 << (EParser.WIDGET - 149)) | (1 << (EParser.WITH - 149)) | (1 << (EParser.WHEN - 149)) | (1 << (EParser.WHERE - 149)) | (1 << (EParser.WHILE - 149)) | (1 << (EParser.WRITE - 149)) | (1 << (EParser.SYMBOL_IDENTIFIER - 149)) | (1 << (EParser.TYPE_IDENTIFIER - 149)) | (1 << (EParser.VARIABLE_IDENTIFIER - 149)) | (1 << (EParser.TEXT_LITERAL - 149)))) !== 0)) {
	            this.state = 2267;
	            this.doc_entry_list();
	        }

	        this.state = 2270;
	        this.match(EParser.RCURL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression_tuple() {
	    let localctx = new Expression_tupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, EParser.RULE_expression_tuple);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2272;
	        this.expression(0);
	        this.state = 2273;
	        this.match(EParser.COMMA);
	        this.state = 2282;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (EParser.LPAR - 20)) | (1 << (EParser.LBRAK - 20)) | (1 << (EParser.LCURL - 20)) | (1 << (EParser.MINUS - 20)) | (1 << (EParser.LT - 20)) | (1 << (EParser.LTGT - 20)) | (1 << (EParser.LTCOLONGT - 20)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (EParser.METHOD_COLON - 64)) | (1 << (EParser.CODE - 64)) | (1 << (EParser.DOCUMENT - 64)) | (1 << (EParser.BLOB - 64)) | (1 << (EParser.TYPE - 64)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (EParser.EXECUTE - 104)) | (1 << (EParser.FETCH - 104)) | (1 << (EParser.INVOKE_COLON - 104)) | (1 << (EParser.MUTABLE - 104)) | (1 << (EParser.NOT - 104)) | (1 << (EParser.NOTHING - 104)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (EParser.READ - 138)) | (1 << (EParser.SELF - 138)) | (1 << (EParser.SORTED - 138)) | (1 << (EParser.SUPER - 138)) | (1 << (EParser.THIS - 138)) | (1 << (EParser.BOOLEAN_LITERAL - 138)) | (1 << (EParser.CHAR_LITERAL - 138)) | (1 << (EParser.MIN_INTEGER - 138)) | (1 << (EParser.MAX_INTEGER - 138)) | (1 << (EParser.SYMBOL_IDENTIFIER - 138)))) !== 0) || ((((_la - 170)) & ~0x1f) == 0 && ((1 << (_la - 170)) & ((1 << (EParser.TYPE_IDENTIFIER - 170)) | (1 << (EParser.VARIABLE_IDENTIFIER - 170)) | (1 << (EParser.TEXT_LITERAL - 170)) | (1 << (EParser.UUID_LITERAL - 170)) | (1 << (EParser.INTEGER_LITERAL - 170)) | (1 << (EParser.HEXA_LITERAL - 170)) | (1 << (EParser.DECIMAL_LITERAL - 170)) | (1 << (EParser.DATETIME_LITERAL - 170)) | (1 << (EParser.TIME_LITERAL - 170)) | (1 << (EParser.DATE_LITERAL - 170)) | (1 << (EParser.PERIOD_LITERAL - 170)) | (1 << (EParser.VERSION_LITERAL - 170)))) !== 0)) {
	            this.state = 2274;
	            this.expression(0);
	            this.state = 2279;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===EParser.COMMA) {
	                this.state = 2275;
	                this.match(EParser.COMMA);
	                this.state = 2276;
	                this.expression(0);
	                this.state = 2281;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doc_entry_list() {
	    let localctx = new Doc_entry_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, EParser.RULE_doc_entry_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2284;
	        this.doc_entry();
	        this.state = 2289;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===EParser.COMMA) {
	            this.state = 2285;
	            this.match(EParser.COMMA);
	            this.state = 2286;
	            this.doc_entry();
	            this.state = 2291;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doc_entry() {
	    let localctx = new Doc_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, EParser.RULE_doc_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2292;
	        localctx.key = this.doc_key();
	        this.state = 2293;
	        this.match(EParser.COLON);
	        this.state = 2294;
	        localctx.value = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doc_key() {
	    let localctx = new Doc_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, EParser.RULE_doc_key);
	    try {
	        this.state = 2298;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.JAVA:
	        case EParser.CSHARP:
	        case EParser.PYTHON2:
	        case EParser.PYTHON3:
	        case EParser.JAVASCRIPT:
	        case EParser.SWIFT:
	        case EParser.BOOLEAN:
	        case EParser.CHARACTER:
	        case EParser.TEXT:
	        case EParser.INTEGER:
	        case EParser.DECIMAL:
	        case EParser.DATE:
	        case EParser.TIME:
	        case EParser.DATETIME:
	        case EParser.PERIOD:
	        case EParser.VERSION:
	        case EParser.CODE:
	        case EParser.DOCUMENT:
	        case EParser.BLOB:
	        case EParser.IMAGE:
	        case EParser.UUID:
	        case EParser.ITERATOR:
	        case EParser.CURSOR:
	        case EParser.HTML:
	        case EParser.ABSTRACT:
	        case EParser.ALL:
	        case EParser.ALWAYS:
	        case EParser.AND:
	        case EParser.ANY:
	        case EParser.AS:
	        case EParser.ASC:
	        case EParser.ATTR:
	        case EParser.ATTRIBUTE:
	        case EParser.ATTRIBUTES:
	        case EParser.BINDINGS:
	        case EParser.BREAK:
	        case EParser.BY:
	        case EParser.CASE:
	        case EParser.CATCH:
	        case EParser.CATEGORY:
	        case EParser.CLASS:
	        case EParser.CONTAINS:
	        case EParser.DEF:
	        case EParser.DEFAULT:
	        case EParser.DEFINE:
	        case EParser.DELETE:
	        case EParser.DESC:
	        case EParser.DO:
	        case EParser.DOING:
	        case EParser.EACH:
	        case EParser.ELSE:
	        case EParser.ENUM:
	        case EParser.ENUMERATED:
	        case EParser.EXCEPT:
	        case EParser.EXECUTE:
	        case EParser.EXPECTING:
	        case EParser.EXTENDS:
	        case EParser.FETCH:
	        case EParser.FILTERED:
	        case EParser.FINALLY:
	        case EParser.FLUSH:
	        case EParser.FOR:
	        case EParser.FROM:
	        case EParser.GETTER:
	        case EParser.HAS:
	        case EParser.IF:
	        case EParser.IN:
	        case EParser.INDEX:
	        case EParser.IS:
	        case EParser.MATCHING:
	        case EParser.METHOD:
	        case EParser.METHODS:
	        case EParser.MODULO:
	        case EParser.MUTABLE:
	        case EParser.NATIVE:
	        case EParser.NONE:
	        case EParser.NOT:
	        case EParser.NOTHING:
	        case EParser.NULL:
	        case EParser.ON:
	        case EParser.ONE:
	        case EParser.OPERATOR:
	        case EParser.OR:
	        case EParser.ORDER:
	        case EParser.OTHERWISE:
	        case EParser.PASS:
	        case EParser.RAISE:
	        case EParser.READ:
	        case EParser.RECEIVING:
	        case EParser.RESOURCE:
	        case EParser.RETURN:
	        case EParser.RETURNING:
	        case EParser.ROWS:
	        case EParser.SELF:
	        case EParser.SETTER:
	        case EParser.SINGLETON:
	        case EParser.SORTED:
	        case EParser.STORABLE:
	        case EParser.STORE:
	        case EParser.SUPER:
	        case EParser.SWITCH:
	        case EParser.TEST:
	        case EParser.THIS:
	        case EParser.THROW:
	        case EParser.TO:
	        case EParser.TRY:
	        case EParser.VERIFYING:
	        case EParser.WIDGET:
	        case EParser.WITH:
	        case EParser.WHEN:
	        case EParser.WHERE:
	        case EParser.WHILE:
	        case EParser.WRITE:
	        case EParser.SYMBOL_IDENTIFIER:
	        case EParser.TYPE_IDENTIFIER:
	        case EParser.VARIABLE_IDENTIFIER:
	            localctx = new DocKeyIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2296;
	            localctx.name = this.identifier_or_keyword();
	            break;
	        case EParser.TEXT_LITERAL:
	            localctx = new DocKeyTextContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2297;
	            localctx.name = this.match(EParser.TEXT_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dict_entry_list() {
	    let localctx = new Dict_entry_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, EParser.RULE_dict_entry_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2300;
	        this.dict_entry();
	        this.state = 2305;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===EParser.COMMA) {
	            this.state = 2301;
	            this.match(EParser.COMMA);
	            this.state = 2302;
	            this.dict_entry();
	            this.state = 2307;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dict_entry() {
	    let localctx = new Dict_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, EParser.RULE_dict_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2308;
	        localctx.key = this.dict_key();
	        this.state = 2309;
	        this.match(EParser.COLON);
	        this.state = 2310;
	        localctx.value = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dict_key() {
	    let localctx = new Dict_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, EParser.RULE_dict_key);
	    try {
	        this.state = 2314;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.JAVA:
	        case EParser.CSHARP:
	        case EParser.PYTHON2:
	        case EParser.PYTHON3:
	        case EParser.JAVASCRIPT:
	        case EParser.SWIFT:
	        case EParser.BOOLEAN:
	        case EParser.CHARACTER:
	        case EParser.TEXT:
	        case EParser.INTEGER:
	        case EParser.DECIMAL:
	        case EParser.DATE:
	        case EParser.TIME:
	        case EParser.DATETIME:
	        case EParser.PERIOD:
	        case EParser.VERSION:
	        case EParser.CODE:
	        case EParser.DOCUMENT:
	        case EParser.BLOB:
	        case EParser.IMAGE:
	        case EParser.UUID:
	        case EParser.ITERATOR:
	        case EParser.CURSOR:
	        case EParser.HTML:
	        case EParser.ABSTRACT:
	        case EParser.ALL:
	        case EParser.ALWAYS:
	        case EParser.AND:
	        case EParser.ANY:
	        case EParser.AS:
	        case EParser.ASC:
	        case EParser.ATTR:
	        case EParser.ATTRIBUTE:
	        case EParser.ATTRIBUTES:
	        case EParser.BINDINGS:
	        case EParser.BREAK:
	        case EParser.BY:
	        case EParser.CASE:
	        case EParser.CATCH:
	        case EParser.CATEGORY:
	        case EParser.CLASS:
	        case EParser.CONTAINS:
	        case EParser.DEF:
	        case EParser.DEFAULT:
	        case EParser.DEFINE:
	        case EParser.DELETE:
	        case EParser.DESC:
	        case EParser.DO:
	        case EParser.DOING:
	        case EParser.EACH:
	        case EParser.ELSE:
	        case EParser.ENUM:
	        case EParser.ENUMERATED:
	        case EParser.EXCEPT:
	        case EParser.EXECUTE:
	        case EParser.EXPECTING:
	        case EParser.EXTENDS:
	        case EParser.FETCH:
	        case EParser.FILTERED:
	        case EParser.FINALLY:
	        case EParser.FLUSH:
	        case EParser.FOR:
	        case EParser.FROM:
	        case EParser.GETTER:
	        case EParser.HAS:
	        case EParser.IF:
	        case EParser.IN:
	        case EParser.INDEX:
	        case EParser.IS:
	        case EParser.MATCHING:
	        case EParser.METHOD:
	        case EParser.METHODS:
	        case EParser.MODULO:
	        case EParser.MUTABLE:
	        case EParser.NATIVE:
	        case EParser.NONE:
	        case EParser.NOT:
	        case EParser.NOTHING:
	        case EParser.NULL:
	        case EParser.ON:
	        case EParser.ONE:
	        case EParser.OPERATOR:
	        case EParser.OR:
	        case EParser.ORDER:
	        case EParser.OTHERWISE:
	        case EParser.PASS:
	        case EParser.RAISE:
	        case EParser.READ:
	        case EParser.RECEIVING:
	        case EParser.RESOURCE:
	        case EParser.RETURN:
	        case EParser.RETURNING:
	        case EParser.ROWS:
	        case EParser.SELF:
	        case EParser.SETTER:
	        case EParser.SINGLETON:
	        case EParser.SORTED:
	        case EParser.STORABLE:
	        case EParser.STORE:
	        case EParser.SUPER:
	        case EParser.SWITCH:
	        case EParser.TEST:
	        case EParser.THIS:
	        case EParser.THROW:
	        case EParser.TO:
	        case EParser.TRY:
	        case EParser.VERIFYING:
	        case EParser.WIDGET:
	        case EParser.WITH:
	        case EParser.WHEN:
	        case EParser.WHERE:
	        case EParser.WHILE:
	        case EParser.WRITE:
	        case EParser.SYMBOL_IDENTIFIER:
	        case EParser.TYPE_IDENTIFIER:
	        case EParser.VARIABLE_IDENTIFIER:
	            localctx = new DictKeyIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2312;
	            localctx.name = this.identifier_or_keyword();
	            break;
	        case EParser.TEXT_LITERAL:
	            localctx = new DictKeyTextContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2313;
	            localctx.name = this.match(EParser.TEXT_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	slice_arguments() {
	    let localctx = new Slice_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, EParser.RULE_slice_arguments);
	    try {
	        this.state = 2325;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SliceFirstAndLastContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2316;
	            localctx.first = this.expression(0);
	            this.state = 2317;
	            this.match(EParser.COLON);
	            this.state = 2318;
	            localctx.last = this.expression(0);
	            break;

	        case 2:
	            localctx = new SliceFirstOnlyContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2320;
	            localctx.first = this.expression(0);
	            this.state = 2321;
	            this.match(EParser.COLON);
	            break;

	        case 3:
	            localctx = new SliceLastOnlyContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2323;
	            this.match(EParser.COLON);
	            this.state = 2324;
	            localctx.last = this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assign_variable_statement() {
	    let localctx = new Assign_variable_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, EParser.RULE_assign_variable_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2327;
	        this.variable_identifier();
	        this.state = 2328;
	        this.assign();
	        this.state = 2329;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	assignable_instance(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Assignable_instanceContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 328;
	    this.enterRecursionRule(localctx, 328, EParser.RULE_assignable_instance, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new RootInstanceContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2332;
	        this.variable_identifier();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2338;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,206,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ChildInstanceContext(this, new Assignable_instanceContext(this, _parentctx, _parentState));
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_assignable_instance);
	                this.state = 2334;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2335;
	                this.child_instance(); 
	            }
	            this.state = 2340;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,206,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	is_expression() {
	    let localctx = new Is_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, EParser.RULE_is_expression);
	    try {
	        this.state = 2345;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new IsATypeExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2341;
	            if (!( this.willBeAOrAn())) {
	                throw new antlr4.error.FailedPredicateException(this, "$parser.willBeAOrAn()");
	            }
	            this.state = 2342;
	            this.match(EParser.VARIABLE_IDENTIFIER);
	            this.state = 2343;
	            this.category_or_any_type();
	            break;

	        case 2:
	            localctx = new IsOtherExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2344;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrow_expression() {
	    let localctx = new Arrow_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, EParser.RULE_arrow_expression);
	    try {
	        this.state = 2355;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ArrowExpressionBodyContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2347;
	            this.arrow_prefix();
	            this.state = 2348;
	            this.expression(0);
	            break;

	        case 2:
	            localctx = new ArrowStatementsBodyContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2350;
	            this.arrow_prefix();
	            this.state = 2351;
	            this.match(EParser.LCURL);
	            this.state = 2352;
	            this.statement_list();
	            this.state = 2353;
	            this.match(EParser.RCURL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrow_prefix() {
	    let localctx = new Arrow_prefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, EParser.RULE_arrow_prefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2357;
	        this.arrow_args();
	        this.state = 2358;
	        localctx.s1 = this.ws_plus();
	        this.state = 2359;
	        this.match(EParser.EGT);
	        this.state = 2360;
	        localctx.s2 = this.ws_plus();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrow_args() {
	    let localctx = new Arrow_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, EParser.RULE_arrow_args);
	    var _la = 0; // Token type
	    try {
	        this.state = 2368;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.VARIABLE_IDENTIFIER:
	            localctx = new ArrowSingleArgContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2362;
	            this.variable_identifier();
	            break;
	        case EParser.LPAR:
	            localctx = new ArrowListArgContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2363;
	            this.match(EParser.LPAR);
	            this.state = 2365;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===EParser.VARIABLE_IDENTIFIER) {
	                this.state = 2364;
	                this.variable_identifier_list();
	            }

	            this.state = 2367;
	            this.match(EParser.RPAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sorted_key() {
	    let localctx = new Sorted_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, EParser.RULE_sorted_key);
	    try {
	        this.state = 2372;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2370;
	            this.instance_expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2371;
	            this.arrow_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	read_blob_expression() {
	    let localctx = new Read_blob_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, EParser.RULE_read_blob_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2374;
	        this.match(EParser.READ);
	        this.state = 2375;
	        this.match(EParser.BLOB);
	        this.state = 2376;
	        this.match(EParser.FROM);
	        this.state = 2377;
	        localctx.source = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	read_all_expression() {
	    let localctx = new Read_all_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, EParser.RULE_read_all_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2379;
	        this.match(EParser.READ);
	        this.state = 2380;
	        this.match(EParser.ALL);
	        this.state = 2381;
	        this.match(EParser.FROM);
	        this.state = 2382;
	        localctx.source = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	read_one_expression() {
	    let localctx = new Read_one_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, EParser.RULE_read_one_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2384;
	        this.match(EParser.READ);
	        this.state = 2385;
	        this.match(EParser.ONE);
	        this.state = 2386;
	        this.match(EParser.FROM);
	        this.state = 2387;
	        localctx.source = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	order_by_list() {
	    let localctx = new Order_by_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, EParser.RULE_order_by_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2389;
	        this.order_by();
	        this.state = 2394;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,212,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2390;
	                this.match(EParser.COMMA);
	                this.state = 2391;
	                this.order_by(); 
	            }
	            this.state = 2396;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,212,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	order_by() {
	    let localctx = new Order_byContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, EParser.RULE_order_by);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2397;
	        this.variable_identifier();
	        this.state = 2402;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,213,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2398;
	                this.match(EParser.DOT);
	                this.state = 2399;
	                this.variable_identifier(); 
	            }
	            this.state = 2404;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,213,this._ctx);
	        }

	        this.state = 2406;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
	        if(la_===1) {
	            this.state = 2405;
	            _la = this._input.LA(1);
	            if(!(_la===EParser.ASC || _la===EParser.DESC)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator() {
	    let localctx = new OperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, EParser.RULE_operator);
	    try {
	        this.state = 2414;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.PLUS:
	            localctx = new OperatorPlusContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2408;
	            this.match(EParser.PLUS);
	            break;
	        case EParser.MINUS:
	            localctx = new OperatorMinusContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2409;
	            this.match(EParser.MINUS);
	            break;
	        case EParser.STAR:
	            localctx = new OperatorMultiplyContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2410;
	            this.multiply();
	            break;
	        case EParser.SLASH:
	            localctx = new OperatorDivideContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2411;
	            this.divide();
	            break;
	        case EParser.BSLASH:
	            localctx = new OperatorIDivideContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2412;
	            this.idivide();
	            break;
	        case EParser.PERCENT:
	        case EParser.MODULO:
	            localctx = new OperatorModuloContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2413;
	            this.modulo();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, EParser.RULE_keyword);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2416;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << EParser.JAVA) | (1 << EParser.CSHARP) | (1 << EParser.PYTHON2) | (1 << EParser.PYTHON3) | (1 << EParser.JAVASCRIPT) | (1 << EParser.SWIFT))) !== 0) || ((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (EParser.BOOLEAN - 53)) | (1 << (EParser.CHARACTER - 53)) | (1 << (EParser.TEXT - 53)) | (1 << (EParser.INTEGER - 53)) | (1 << (EParser.DECIMAL - 53)) | (1 << (EParser.DATE - 53)) | (1 << (EParser.TIME - 53)) | (1 << (EParser.DATETIME - 53)) | (1 << (EParser.PERIOD - 53)) | (1 << (EParser.VERSION - 53)) | (1 << (EParser.CODE - 53)) | (1 << (EParser.DOCUMENT - 53)) | (1 << (EParser.BLOB - 53)) | (1 << (EParser.IMAGE - 53)) | (1 << (EParser.UUID - 53)) | (1 << (EParser.ITERATOR - 53)) | (1 << (EParser.CURSOR - 53)) | (1 << (EParser.HTML - 53)) | (1 << (EParser.ABSTRACT - 53)) | (1 << (EParser.ALL - 53)) | (1 << (EParser.ALWAYS - 53)) | (1 << (EParser.AND - 53)) | (1 << (EParser.ANY - 53)) | (1 << (EParser.AS - 53)) | (1 << (EParser.ASC - 53)) | (1 << (EParser.ATTR - 53)) | (1 << (EParser.ATTRIBUTE - 53)) | (1 << (EParser.ATTRIBUTES - 53)) | (1 << (EParser.BINDINGS - 53)))) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (EParser.BREAK - 85)) | (1 << (EParser.BY - 85)) | (1 << (EParser.CASE - 85)) | (1 << (EParser.CATCH - 85)) | (1 << (EParser.CATEGORY - 85)) | (1 << (EParser.CLASS - 85)) | (1 << (EParser.CONTAINS - 85)) | (1 << (EParser.DEF - 85)) | (1 << (EParser.DEFAULT - 85)) | (1 << (EParser.DEFINE - 85)) | (1 << (EParser.DELETE - 85)) | (1 << (EParser.DESC - 85)) | (1 << (EParser.DO - 85)) | (1 << (EParser.DOING - 85)) | (1 << (EParser.EACH - 85)) | (1 << (EParser.ELSE - 85)) | (1 << (EParser.ENUM - 85)) | (1 << (EParser.ENUMERATED - 85)) | (1 << (EParser.EXCEPT - 85)) | (1 << (EParser.EXECUTE - 85)) | (1 << (EParser.EXPECTING - 85)) | (1 << (EParser.EXTENDS - 85)) | (1 << (EParser.FETCH - 85)) | (1 << (EParser.FILTERED - 85)) | (1 << (EParser.FINALLY - 85)) | (1 << (EParser.FLUSH - 85)) | (1 << (EParser.FOR - 85)) | (1 << (EParser.FROM - 85)) | (1 << (EParser.GETTER - 85)) | (1 << (EParser.HAS - 85)) | (1 << (EParser.IF - 85)) | (1 << (EParser.IN - 85)))) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & ((1 << (EParser.INDEX - 117)) | (1 << (EParser.IS - 117)) | (1 << (EParser.MATCHING - 117)) | (1 << (EParser.METHOD - 117)) | (1 << (EParser.METHODS - 117)) | (1 << (EParser.MODULO - 117)) | (1 << (EParser.MUTABLE - 117)) | (1 << (EParser.NATIVE - 117)) | (1 << (EParser.NONE - 117)) | (1 << (EParser.NOT - 117)) | (1 << (EParser.NOTHING - 117)) | (1 << (EParser.NULL - 117)) | (1 << (EParser.ON - 117)) | (1 << (EParser.ONE - 117)) | (1 << (EParser.OPERATOR - 117)) | (1 << (EParser.OR - 117)) | (1 << (EParser.ORDER - 117)) | (1 << (EParser.OTHERWISE - 117)) | (1 << (EParser.PASS - 117)) | (1 << (EParser.RAISE - 117)) | (1 << (EParser.READ - 117)) | (1 << (EParser.RECEIVING - 117)) | (1 << (EParser.RESOURCE - 117)) | (1 << (EParser.RETURN - 117)) | (1 << (EParser.RETURNING - 117)) | (1 << (EParser.ROWS - 117)) | (1 << (EParser.SELF - 117)) | (1 << (EParser.SETTER - 117)) | (1 << (EParser.SINGLETON - 117)) | (1 << (EParser.SORTED - 117)) | (1 << (EParser.STORABLE - 117)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (EParser.STORE - 149)) | (1 << (EParser.SUPER - 149)) | (1 << (EParser.SWITCH - 149)) | (1 << (EParser.TEST - 149)) | (1 << (EParser.THIS - 149)) | (1 << (EParser.THROW - 149)) | (1 << (EParser.TO - 149)) | (1 << (EParser.TRY - 149)) | (1 << (EParser.VERIFYING - 149)) | (1 << (EParser.WIDGET - 149)) | (1 << (EParser.WITH - 149)) | (1 << (EParser.WHEN - 149)) | (1 << (EParser.WHERE - 149)) | (1 << (EParser.WHILE - 149)) | (1 << (EParser.WRITE - 149)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	new_token() {
	    let localctx = new New_tokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, EParser.RULE_new_token);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2418;
	        localctx.i1 = this.match(EParser.VARIABLE_IDENTIFIER);
	        this.state = 2419;
	        if (!( this.isText(localctx.i1,"new"))) {
	            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"new\")");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_token() {
	    let localctx = new Key_tokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, EParser.RULE_key_token);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2421;
	        localctx.i1 = this.match(EParser.VARIABLE_IDENTIFIER);
	        this.state = 2422;
	        if (!( this.isText(localctx.i1,"key"))) {
	            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"key\")");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module_token() {
	    let localctx = new Module_tokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, EParser.RULE_module_token);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2424;
	        localctx.i1 = this.match(EParser.VARIABLE_IDENTIFIER);
	        this.state = 2425;
	        if (!( this.isText(localctx.i1,"module"))) {
	            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"module\")");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_token() {
	    let localctx = new Value_tokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, EParser.RULE_value_token);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2427;
	        localctx.i1 = this.match(EParser.VARIABLE_IDENTIFIER);
	        this.state = 2428;
	        if (!( this.isText(localctx.i1,"value"))) {
	            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"value\")");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbols_token() {
	    let localctx = new Symbols_tokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, EParser.RULE_symbols_token);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2430;
	        localctx.i1 = this.match(EParser.VARIABLE_IDENTIFIER);
	        this.state = 2431;
	        if (!( this.isText(localctx.i1,"symbols"))) {
	            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"symbols\")");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assign() {
	    let localctx = new AssignContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, EParser.RULE_assign);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2433;
	        this.match(EParser.EQ);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiply() {
	    let localctx = new MultiplyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, EParser.RULE_multiply);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2435;
	        this.match(EParser.STAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	divide() {
	    let localctx = new DivideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, EParser.RULE_divide);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2437;
	        this.match(EParser.SLASH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	idivide() {
	    let localctx = new IdivideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, EParser.RULE_idivide);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2439;
	        this.match(EParser.BSLASH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modulo() {
	    let localctx = new ModuloContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, EParser.RULE_modulo);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2441;
	        _la = this._input.LA(1);
	        if(!(_la===EParser.PERCENT || _la===EParser.MODULO)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_statement() {
	    let localctx = new Javascript_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, EParser.RULE_javascript_statement);
	    try {
	        this.state = 2450;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new JavascriptReturnStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2443;
	            this.match(EParser.RETURN);
	            this.state = 2444;
	            localctx.exp = this.javascript_expression(0);
	            this.state = 2445;
	            this.match(EParser.SEMI);
	            break;

	        case 2:
	            localctx = new JavascriptStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2447;
	            localctx.exp = this.javascript_expression(0);
	            this.state = 2448;
	            this.match(EParser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	javascript_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Javascript_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 376;
	    this.enterRecursionRule(localctx, 376, EParser.RULE_javascript_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new JavascriptPrimaryExpressionContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2453;
	        localctx.exp = this.javascript_primary_expression();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2459;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,217,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new JavascriptSelectorExpressionContext(this, new Javascript_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_javascript_expression);
	                this.state = 2455;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2456;
	                localctx.child = this.javascript_selector_expression(); 
	            }
	            this.state = 2461;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,217,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	javascript_primary_expression() {
	    let localctx = new Javascript_primary_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, EParser.RULE_javascript_primary_expression);
	    try {
	        this.state = 2469;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,218,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2462;
	            this.javascript_this_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2463;
	            this.javascript_new_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2464;
	            this.javascript_parenthesis_expression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2465;
	            this.javascript_identifier_expression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2466;
	            this.javascript_literal_expression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2467;
	            this.javascript_method_expression();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2468;
	            this.javascript_item_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_this_expression() {
	    let localctx = new Javascript_this_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, EParser.RULE_javascript_this_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2471;
	        this.this_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_new_expression() {
	    let localctx = new Javascript_new_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, EParser.RULE_javascript_new_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2473;
	        this.new_token();
	        this.state = 2474;
	        this.javascript_method_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_selector_expression() {
	    let localctx = new Javascript_selector_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, EParser.RULE_javascript_selector_expression);
	    try {
	        this.state = 2481;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new JavaScriptMethodExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2476;
	            this.match(EParser.DOT);
	            this.state = 2477;
	            localctx.method = this.javascript_method_expression();
	            break;

	        case 2:
	            localctx = new JavaScriptMemberExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2478;
	            this.match(EParser.DOT);
	            this.state = 2479;
	            localctx.name = this.javascript_identifier();
	            break;

	        case 3:
	            localctx = new JavaScriptItemExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2480;
	            localctx.exp = this.javascript_item_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_method_expression() {
	    let localctx = new Javascript_method_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, EParser.RULE_javascript_method_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2483;
	        localctx.name = this.javascript_identifier();
	        this.state = 2484;
	        this.match(EParser.LPAR);
	        this.state = 2486;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << EParser.JAVA) | (1 << EParser.CSHARP) | (1 << EParser.PYTHON2) | (1 << EParser.PYTHON3) | (1 << EParser.JAVASCRIPT) | (1 << EParser.SWIFT) | (1 << EParser.LPAR) | (1 << EParser.LBRAK))) !== 0) || ((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (EParser.BOOLEAN - 53)) | (1 << (EParser.CHARACTER - 53)) | (1 << (EParser.TEXT - 53)) | (1 << (EParser.INTEGER - 53)) | (1 << (EParser.DECIMAL - 53)) | (1 << (EParser.DATE - 53)) | (1 << (EParser.TIME - 53)) | (1 << (EParser.DATETIME - 53)) | (1 << (EParser.PERIOD - 53)) | (1 << (EParser.VERSION - 53)) | (1 << (EParser.CODE - 53)) | (1 << (EParser.DOCUMENT - 53)) | (1 << (EParser.BLOB - 53)) | (1 << (EParser.IMAGE - 53)) | (1 << (EParser.UUID - 53)) | (1 << (EParser.ITERATOR - 53)) | (1 << (EParser.CURSOR - 53)) | (1 << (EParser.HTML - 53)) | (1 << (EParser.ABSTRACT - 53)) | (1 << (EParser.ALL - 53)) | (1 << (EParser.ALWAYS - 53)) | (1 << (EParser.AND - 53)) | (1 << (EParser.ANY - 53)) | (1 << (EParser.AS - 53)) | (1 << (EParser.ASC - 53)) | (1 << (EParser.ATTR - 53)) | (1 << (EParser.ATTRIBUTE - 53)) | (1 << (EParser.ATTRIBUTES - 53)) | (1 << (EParser.BINDINGS - 53)))) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (EParser.BREAK - 85)) | (1 << (EParser.BY - 85)) | (1 << (EParser.CASE - 85)) | (1 << (EParser.CATCH - 85)) | (1 << (EParser.CATEGORY - 85)) | (1 << (EParser.CLASS - 85)) | (1 << (EParser.CONTAINS - 85)) | (1 << (EParser.DEF - 85)) | (1 << (EParser.DEFAULT - 85)) | (1 << (EParser.DEFINE - 85)) | (1 << (EParser.DELETE - 85)) | (1 << (EParser.DESC - 85)) | (1 << (EParser.DO - 85)) | (1 << (EParser.DOING - 85)) | (1 << (EParser.EACH - 85)) | (1 << (EParser.ELSE - 85)) | (1 << (EParser.ENUM - 85)) | (1 << (EParser.ENUMERATED - 85)) | (1 << (EParser.EXCEPT - 85)) | (1 << (EParser.EXECUTE - 85)) | (1 << (EParser.EXPECTING - 85)) | (1 << (EParser.EXTENDS - 85)) | (1 << (EParser.FETCH - 85)) | (1 << (EParser.FILTERED - 85)) | (1 << (EParser.FINALLY - 85)) | (1 << (EParser.FLUSH - 85)) | (1 << (EParser.FOR - 85)) | (1 << (EParser.FROM - 85)) | (1 << (EParser.GETTER - 85)) | (1 << (EParser.HAS - 85)) | (1 << (EParser.IF - 85)) | (1 << (EParser.IN - 85)))) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & ((1 << (EParser.INDEX - 117)) | (1 << (EParser.IS - 117)) | (1 << (EParser.MATCHING - 117)) | (1 << (EParser.METHOD - 117)) | (1 << (EParser.METHODS - 117)) | (1 << (EParser.MODULO - 117)) | (1 << (EParser.MUTABLE - 117)) | (1 << (EParser.NATIVE - 117)) | (1 << (EParser.NONE - 117)) | (1 << (EParser.NOT - 117)) | (1 << (EParser.NOTHING - 117)) | (1 << (EParser.NULL - 117)) | (1 << (EParser.ON - 117)) | (1 << (EParser.ONE - 117)) | (1 << (EParser.OPERATOR - 117)) | (1 << (EParser.OR - 117)) | (1 << (EParser.ORDER - 117)) | (1 << (EParser.OTHERWISE - 117)) | (1 << (EParser.PASS - 117)) | (1 << (EParser.RAISE - 117)) | (1 << (EParser.READ - 117)) | (1 << (EParser.RECEIVING - 117)) | (1 << (EParser.RESOURCE - 117)) | (1 << (EParser.RETURN - 117)) | (1 << (EParser.RETURNING - 117)) | (1 << (EParser.ROWS - 117)) | (1 << (EParser.SELF - 117)) | (1 << (EParser.SETTER - 117)) | (1 << (EParser.SINGLETON - 117)) | (1 << (EParser.SORTED - 117)) | (1 << (EParser.STORABLE - 117)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (EParser.STORE - 149)) | (1 << (EParser.SUPER - 149)) | (1 << (EParser.SWITCH - 149)) | (1 << (EParser.TEST - 149)) | (1 << (EParser.THIS - 149)) | (1 << (EParser.THROW - 149)) | (1 << (EParser.TO - 149)) | (1 << (EParser.TRY - 149)) | (1 << (EParser.VERIFYING - 149)) | (1 << (EParser.WIDGET - 149)) | (1 << (EParser.WITH - 149)) | (1 << (EParser.WHEN - 149)) | (1 << (EParser.WHERE - 149)) | (1 << (EParser.WHILE - 149)) | (1 << (EParser.WRITE - 149)) | (1 << (EParser.BOOLEAN_LITERAL - 149)) | (1 << (EParser.CHAR_LITERAL - 149)) | (1 << (EParser.SYMBOL_IDENTIFIER - 149)) | (1 << (EParser.TYPE_IDENTIFIER - 149)) | (1 << (EParser.VARIABLE_IDENTIFIER - 149)) | (1 << (EParser.DOLLAR_IDENTIFIER - 149)) | (1 << (EParser.TEXT_LITERAL - 149)) | (1 << (EParser.INTEGER_LITERAL - 149)) | (1 << (EParser.DECIMAL_LITERAL - 149)))) !== 0)) {
	            this.state = 2485;
	            localctx.args = this.javascript_arguments(0);
	        }

	        this.state = 2488;
	        this.match(EParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	javascript_arguments(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Javascript_argumentsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 388;
	    this.enterRecursionRule(localctx, 388, EParser.RULE_javascript_arguments, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new JavascriptArgumentListContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2491;
	        localctx.item = this.javascript_expression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2498;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,221,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new JavascriptArgumentListItemContext(this, new Javascript_argumentsContext(this, _parentctx, _parentState));
	                localctx.items = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_javascript_arguments);
	                this.state = 2493;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2494;
	                this.match(EParser.COMMA);
	                this.state = 2495;
	                localctx.item = this.javascript_expression(0); 
	            }
	            this.state = 2500;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,221,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	javascript_item_expression() {
	    let localctx = new Javascript_item_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, EParser.RULE_javascript_item_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2501;
	        this.match(EParser.LBRAK);
	        this.state = 2502;
	        localctx.exp = this.javascript_expression(0);
	        this.state = 2503;
	        this.match(EParser.RBRAK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_parenthesis_expression() {
	    let localctx = new Javascript_parenthesis_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, EParser.RULE_javascript_parenthesis_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2505;
	        this.match(EParser.LPAR);
	        this.state = 2506;
	        localctx.exp = this.javascript_expression(0);
	        this.state = 2507;
	        this.match(EParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_identifier_expression() {
	    let localctx = new Javascript_identifier_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, EParser.RULE_javascript_identifier_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2509;
	        localctx.name = this.javascript_identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_literal_expression() {
	    let localctx = new Javascript_literal_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, EParser.RULE_javascript_literal_expression);
	    try {
	        this.state = 2516;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.INTEGER_LITERAL:
	            localctx = new JavascriptIntegerLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2511;
	            localctx.t = this.match(EParser.INTEGER_LITERAL);
	            break;
	        case EParser.DECIMAL_LITERAL:
	            localctx = new JavascriptDecimalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2512;
	            localctx.t = this.match(EParser.DECIMAL_LITERAL);
	            break;
	        case EParser.TEXT_LITERAL:
	            localctx = new JavascriptTextLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2513;
	            localctx.t = this.match(EParser.TEXT_LITERAL);
	            break;
	        case EParser.BOOLEAN_LITERAL:
	            localctx = new JavascriptBooleanLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2514;
	            localctx.t = this.match(EParser.BOOLEAN_LITERAL);
	            break;
	        case EParser.CHAR_LITERAL:
	            localctx = new JavascriptCharacterLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2515;
	            localctx.t = this.match(EParser.CHAR_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	javascript_identifier() {
	    let localctx = new Javascript_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, EParser.RULE_javascript_identifier);
	    try {
	        this.state = 2523;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.VARIABLE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2518;
	            this.match(EParser.VARIABLE_IDENTIFIER);
	            break;
	        case EParser.SYMBOL_IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2519;
	            this.match(EParser.SYMBOL_IDENTIFIER);
	            break;
	        case EParser.DOLLAR_IDENTIFIER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2520;
	            this.match(EParser.DOLLAR_IDENTIFIER);
	            break;
	        case EParser.TYPE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2521;
	            this.match(EParser.TYPE_IDENTIFIER);
	            break;
	        case EParser.JAVA:
	        case EParser.CSHARP:
	        case EParser.PYTHON2:
	        case EParser.PYTHON3:
	        case EParser.JAVASCRIPT:
	        case EParser.SWIFT:
	        case EParser.BOOLEAN:
	        case EParser.CHARACTER:
	        case EParser.TEXT:
	        case EParser.INTEGER:
	        case EParser.DECIMAL:
	        case EParser.DATE:
	        case EParser.TIME:
	        case EParser.DATETIME:
	        case EParser.PERIOD:
	        case EParser.VERSION:
	        case EParser.CODE:
	        case EParser.DOCUMENT:
	        case EParser.BLOB:
	        case EParser.IMAGE:
	        case EParser.UUID:
	        case EParser.ITERATOR:
	        case EParser.CURSOR:
	        case EParser.HTML:
	        case EParser.ABSTRACT:
	        case EParser.ALL:
	        case EParser.ALWAYS:
	        case EParser.AND:
	        case EParser.ANY:
	        case EParser.AS:
	        case EParser.ASC:
	        case EParser.ATTR:
	        case EParser.ATTRIBUTE:
	        case EParser.ATTRIBUTES:
	        case EParser.BINDINGS:
	        case EParser.BREAK:
	        case EParser.BY:
	        case EParser.CASE:
	        case EParser.CATCH:
	        case EParser.CATEGORY:
	        case EParser.CLASS:
	        case EParser.CONTAINS:
	        case EParser.DEF:
	        case EParser.DEFAULT:
	        case EParser.DEFINE:
	        case EParser.DELETE:
	        case EParser.DESC:
	        case EParser.DO:
	        case EParser.DOING:
	        case EParser.EACH:
	        case EParser.ELSE:
	        case EParser.ENUM:
	        case EParser.ENUMERATED:
	        case EParser.EXCEPT:
	        case EParser.EXECUTE:
	        case EParser.EXPECTING:
	        case EParser.EXTENDS:
	        case EParser.FETCH:
	        case EParser.FILTERED:
	        case EParser.FINALLY:
	        case EParser.FLUSH:
	        case EParser.FOR:
	        case EParser.FROM:
	        case EParser.GETTER:
	        case EParser.HAS:
	        case EParser.IF:
	        case EParser.IN:
	        case EParser.INDEX:
	        case EParser.IS:
	        case EParser.MATCHING:
	        case EParser.METHOD:
	        case EParser.METHODS:
	        case EParser.MODULO:
	        case EParser.MUTABLE:
	        case EParser.NATIVE:
	        case EParser.NONE:
	        case EParser.NOT:
	        case EParser.NOTHING:
	        case EParser.NULL:
	        case EParser.ON:
	        case EParser.ONE:
	        case EParser.OPERATOR:
	        case EParser.OR:
	        case EParser.ORDER:
	        case EParser.OTHERWISE:
	        case EParser.PASS:
	        case EParser.RAISE:
	        case EParser.READ:
	        case EParser.RECEIVING:
	        case EParser.RESOURCE:
	        case EParser.RETURN:
	        case EParser.RETURNING:
	        case EParser.ROWS:
	        case EParser.SELF:
	        case EParser.SETTER:
	        case EParser.SINGLETON:
	        case EParser.SORTED:
	        case EParser.STORABLE:
	        case EParser.STORE:
	        case EParser.SUPER:
	        case EParser.SWITCH:
	        case EParser.TEST:
	        case EParser.THIS:
	        case EParser.THROW:
	        case EParser.TO:
	        case EParser.TRY:
	        case EParser.VERIFYING:
	        case EParser.WIDGET:
	        case EParser.WITH:
	        case EParser.WHEN:
	        case EParser.WHERE:
	        case EParser.WHILE:
	        case EParser.WRITE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2522;
	            this.keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	python_statement() {
	    let localctx = new Python_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, EParser.RULE_python_statement);
	    try {
	        this.state = 2528;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PythonReturnStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2525;
	            this.match(EParser.RETURN);
	            this.state = 2526;
	            localctx.exp = this.python_expression(0);
	            break;

	        case 2:
	            localctx = new PythonStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2527;
	            localctx.exp = this.python_expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	python_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Python_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 402;
	    this.enterRecursionRule(localctx, 402, EParser.RULE_python_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new PythonPrimaryExpressionContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2531;
	        localctx.exp = this.python_primary_expression();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2537;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,225,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new PythonSelectorExpressionContext(this, new Python_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_python_expression);
	                this.state = 2533;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2534;
	                localctx.child = this.python_selector_expression(); 
	            }
	            this.state = 2539;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,225,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	python_primary_expression() {
	    let localctx = new Python_primary_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, EParser.RULE_python_primary_expression);
	    try {
	        this.state = 2545;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PythonSelfExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2540;
	            localctx.exp = this.python_self_expression();
	            break;

	        case 2:
	            localctx = new PythonParenthesisExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2541;
	            localctx.exp = this.python_parenthesis_expression();
	            break;

	        case 3:
	            localctx = new PythonIdentifierExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2542;
	            localctx.exp = this.python_identifier_expression(0);
	            break;

	        case 4:
	            localctx = new PythonLiteralExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2543;
	            localctx.exp = this.python_literal_expression();
	            break;

	        case 5:
	            localctx = new PythonGlobalMethodExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2544;
	            localctx.exp = this.python_method_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	python_self_expression() {
	    let localctx = new Python_self_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, EParser.RULE_python_self_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2547;
	        this.this_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	python_selector_expression() {
	    let localctx = new Python_selector_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, EParser.RULE_python_selector_expression);
	    try {
	        this.state = 2555;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.DOT:
	            localctx = new PythonMethodExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2549;
	            this.match(EParser.DOT);
	            this.state = 2550;
	            localctx.exp = this.python_method_expression();
	            break;
	        case EParser.LBRAK:
	            localctx = new PythonItemExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2551;
	            this.match(EParser.LBRAK);
	            this.state = 2552;
	            localctx.exp = this.python_expression(0);
	            this.state = 2553;
	            this.match(EParser.RBRAK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	python_method_expression() {
	    let localctx = new Python_method_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, EParser.RULE_python_method_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2557;
	        localctx.name = this.python_identifier();
	        this.state = 2558;
	        this.match(EParser.LPAR);
	        this.state = 2560;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << EParser.JAVA) | (1 << EParser.CSHARP) | (1 << EParser.PYTHON2) | (1 << EParser.PYTHON3) | (1 << EParser.JAVASCRIPT) | (1 << EParser.SWIFT) | (1 << EParser.LPAR))) !== 0) || ((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (EParser.BOOLEAN - 53)) | (1 << (EParser.CHARACTER - 53)) | (1 << (EParser.TEXT - 53)) | (1 << (EParser.INTEGER - 53)) | (1 << (EParser.DECIMAL - 53)) | (1 << (EParser.DATE - 53)) | (1 << (EParser.TIME - 53)) | (1 << (EParser.DATETIME - 53)) | (1 << (EParser.PERIOD - 53)) | (1 << (EParser.VERSION - 53)) | (1 << (EParser.CODE - 53)) | (1 << (EParser.DOCUMENT - 53)) | (1 << (EParser.BLOB - 53)) | (1 << (EParser.IMAGE - 53)) | (1 << (EParser.UUID - 53)) | (1 << (EParser.ITERATOR - 53)) | (1 << (EParser.CURSOR - 53)) | (1 << (EParser.HTML - 53)) | (1 << (EParser.ABSTRACT - 53)) | (1 << (EParser.ALL - 53)) | (1 << (EParser.ALWAYS - 53)) | (1 << (EParser.AND - 53)) | (1 << (EParser.ANY - 53)) | (1 << (EParser.AS - 53)) | (1 << (EParser.ASC - 53)) | (1 << (EParser.ATTR - 53)) | (1 << (EParser.ATTRIBUTE - 53)) | (1 << (EParser.ATTRIBUTES - 53)) | (1 << (EParser.BINDINGS - 53)))) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (EParser.BREAK - 85)) | (1 << (EParser.BY - 85)) | (1 << (EParser.CASE - 85)) | (1 << (EParser.CATCH - 85)) | (1 << (EParser.CATEGORY - 85)) | (1 << (EParser.CLASS - 85)) | (1 << (EParser.CONTAINS - 85)) | (1 << (EParser.DEF - 85)) | (1 << (EParser.DEFAULT - 85)) | (1 << (EParser.DEFINE - 85)) | (1 << (EParser.DELETE - 85)) | (1 << (EParser.DESC - 85)) | (1 << (EParser.DO - 85)) | (1 << (EParser.DOING - 85)) | (1 << (EParser.EACH - 85)) | (1 << (EParser.ELSE - 85)) | (1 << (EParser.ENUM - 85)) | (1 << (EParser.ENUMERATED - 85)) | (1 << (EParser.EXCEPT - 85)) | (1 << (EParser.EXECUTE - 85)) | (1 << (EParser.EXPECTING - 85)) | (1 << (EParser.EXTENDS - 85)) | (1 << (EParser.FETCH - 85)) | (1 << (EParser.FILTERED - 85)) | (1 << (EParser.FINALLY - 85)) | (1 << (EParser.FLUSH - 85)) | (1 << (EParser.FOR - 85)) | (1 << (EParser.FROM - 85)) | (1 << (EParser.GETTER - 85)) | (1 << (EParser.HAS - 85)) | (1 << (EParser.IF - 85)) | (1 << (EParser.IN - 85)))) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & ((1 << (EParser.INDEX - 117)) | (1 << (EParser.IS - 117)) | (1 << (EParser.MATCHING - 117)) | (1 << (EParser.METHOD - 117)) | (1 << (EParser.METHODS - 117)) | (1 << (EParser.MODULO - 117)) | (1 << (EParser.MUTABLE - 117)) | (1 << (EParser.NATIVE - 117)) | (1 << (EParser.NONE - 117)) | (1 << (EParser.NOT - 117)) | (1 << (EParser.NOTHING - 117)) | (1 << (EParser.NULL - 117)) | (1 << (EParser.ON - 117)) | (1 << (EParser.ONE - 117)) | (1 << (EParser.OPERATOR - 117)) | (1 << (EParser.OR - 117)) | (1 << (EParser.ORDER - 117)) | (1 << (EParser.OTHERWISE - 117)) | (1 << (EParser.PASS - 117)) | (1 << (EParser.RAISE - 117)) | (1 << (EParser.READ - 117)) | (1 << (EParser.RECEIVING - 117)) | (1 << (EParser.RESOURCE - 117)) | (1 << (EParser.RETURN - 117)) | (1 << (EParser.RETURNING - 117)) | (1 << (EParser.ROWS - 117)) | (1 << (EParser.SELF - 117)) | (1 << (EParser.SETTER - 117)) | (1 << (EParser.SINGLETON - 117)) | (1 << (EParser.SORTED - 117)) | (1 << (EParser.STORABLE - 117)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (EParser.STORE - 149)) | (1 << (EParser.SUPER - 149)) | (1 << (EParser.SWITCH - 149)) | (1 << (EParser.TEST - 149)) | (1 << (EParser.THIS - 149)) | (1 << (EParser.THROW - 149)) | (1 << (EParser.TO - 149)) | (1 << (EParser.TRY - 149)) | (1 << (EParser.VERIFYING - 149)) | (1 << (EParser.WIDGET - 149)) | (1 << (EParser.WITH - 149)) | (1 << (EParser.WHEN - 149)) | (1 << (EParser.WHERE - 149)) | (1 << (EParser.WHILE - 149)) | (1 << (EParser.WRITE - 149)) | (1 << (EParser.BOOLEAN_LITERAL - 149)) | (1 << (EParser.CHAR_LITERAL - 149)) | (1 << (EParser.SYMBOL_IDENTIFIER - 149)) | (1 << (EParser.TYPE_IDENTIFIER - 149)) | (1 << (EParser.VARIABLE_IDENTIFIER - 149)) | (1 << (EParser.DOLLAR_IDENTIFIER - 149)) | (1 << (EParser.TEXT_LITERAL - 149)) | (1 << (EParser.INTEGER_LITERAL - 149)) | (1 << (EParser.DECIMAL_LITERAL - 149)))) !== 0)) {
	            this.state = 2559;
	            localctx.args = this.python_argument_list();
	        }

	        this.state = 2562;
	        this.match(EParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	python_argument_list() {
	    let localctx = new Python_argument_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, EParser.RULE_python_argument_list);
	    try {
	        this.state = 2570;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PythonOrdinalOnlyArgumentListContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2564;
	            localctx.ordinal = this.python_ordinal_argument_list(0);
	            break;

	        case 2:
	            localctx = new PythonNamedOnlyArgumentListContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2565;
	            localctx.named = this.python_named_argument_list(0);
	            break;

	        case 3:
	            localctx = new PythonArgumentListContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2566;
	            localctx.ordinal = this.python_ordinal_argument_list(0);
	            this.state = 2567;
	            this.match(EParser.COMMA);
	            this.state = 2568;
	            localctx.named = this.python_named_argument_list(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	python_ordinal_argument_list(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Python_ordinal_argument_listContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 414;
	    this.enterRecursionRule(localctx, 414, EParser.RULE_python_ordinal_argument_list, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new PythonOrdinalArgumentListContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2573;
	        localctx.item = this.python_expression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2580;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,230,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new PythonOrdinalArgumentListItemContext(this, new Python_ordinal_argument_listContext(this, _parentctx, _parentState));
	                localctx.items = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_python_ordinal_argument_list);
	                this.state = 2575;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2576;
	                this.match(EParser.COMMA);
	                this.state = 2577;
	                localctx.item = this.python_expression(0); 
	            }
	            this.state = 2582;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,230,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	python_named_argument_list(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Python_named_argument_listContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 416;
	    this.enterRecursionRule(localctx, 416, EParser.RULE_python_named_argument_list, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new PythonNamedArgumentListContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2584;
	        localctx.name = this.python_identifier();
	        this.state = 2585;
	        this.match(EParser.EQ);
	        this.state = 2586;
	        localctx.exp = this.python_expression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2596;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,231,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new PythonNamedArgumentListItemContext(this, new Python_named_argument_listContext(this, _parentctx, _parentState));
	                localctx.items = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_python_named_argument_list);
	                this.state = 2588;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2589;
	                this.match(EParser.COMMA);
	                this.state = 2590;
	                localctx.name = this.python_identifier();
	                this.state = 2591;
	                this.match(EParser.EQ);
	                this.state = 2592;
	                localctx.exp = this.python_expression(0); 
	            }
	            this.state = 2598;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,231,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	python_parenthesis_expression() {
	    let localctx = new Python_parenthesis_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, EParser.RULE_python_parenthesis_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2599;
	        this.match(EParser.LPAR);
	        this.state = 2600;
	        localctx.exp = this.python_expression(0);
	        this.state = 2601;
	        this.match(EParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	python_identifier_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Python_identifier_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 420;
	    this.enterRecursionRule(localctx, 420, EParser.RULE_python_identifier_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2606;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PythonPromptoIdentifierContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 2604;
	            this.match(EParser.DOLLAR_IDENTIFIER);
	            break;

	        case 2:
	            localctx = new PythonIdentifierContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2605;
	            localctx.name = this.python_identifier();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2613;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,233,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new PythonChildIdentifierContext(this, new Python_identifier_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_python_identifier_expression);
	                this.state = 2608;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2609;
	                this.match(EParser.DOT);
	                this.state = 2610;
	                localctx.name = this.python_identifier(); 
	            }
	            this.state = 2615;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,233,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	python_literal_expression() {
	    let localctx = new Python_literal_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, EParser.RULE_python_literal_expression);
	    try {
	        this.state = 2621;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.INTEGER_LITERAL:
	            localctx = new PythonIntegerLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2616;
	            localctx.t = this.match(EParser.INTEGER_LITERAL);
	            break;
	        case EParser.DECIMAL_LITERAL:
	            localctx = new PythonDecimalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2617;
	            localctx.t = this.match(EParser.DECIMAL_LITERAL);
	            break;
	        case EParser.TEXT_LITERAL:
	            localctx = new PythonTextLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2618;
	            localctx.t = this.match(EParser.TEXT_LITERAL);
	            break;
	        case EParser.BOOLEAN_LITERAL:
	            localctx = new PythonBooleanLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2619;
	            localctx.t = this.match(EParser.BOOLEAN_LITERAL);
	            break;
	        case EParser.CHAR_LITERAL:
	            localctx = new PythonCharacterLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2620;
	            localctx.t = this.match(EParser.CHAR_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	python_identifier() {
	    let localctx = new Python_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, EParser.RULE_python_identifier);
	    try {
	        this.state = 2628;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.VARIABLE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2623;
	            this.match(EParser.VARIABLE_IDENTIFIER);
	            break;
	        case EParser.SYMBOL_IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2624;
	            this.match(EParser.SYMBOL_IDENTIFIER);
	            break;
	        case EParser.DOLLAR_IDENTIFIER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2625;
	            this.match(EParser.DOLLAR_IDENTIFIER);
	            break;
	        case EParser.TYPE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2626;
	            this.match(EParser.TYPE_IDENTIFIER);
	            break;
	        case EParser.JAVA:
	        case EParser.CSHARP:
	        case EParser.PYTHON2:
	        case EParser.PYTHON3:
	        case EParser.JAVASCRIPT:
	        case EParser.SWIFT:
	        case EParser.BOOLEAN:
	        case EParser.CHARACTER:
	        case EParser.TEXT:
	        case EParser.INTEGER:
	        case EParser.DECIMAL:
	        case EParser.DATE:
	        case EParser.TIME:
	        case EParser.DATETIME:
	        case EParser.PERIOD:
	        case EParser.VERSION:
	        case EParser.CODE:
	        case EParser.DOCUMENT:
	        case EParser.BLOB:
	        case EParser.IMAGE:
	        case EParser.UUID:
	        case EParser.ITERATOR:
	        case EParser.CURSOR:
	        case EParser.HTML:
	        case EParser.ABSTRACT:
	        case EParser.ALL:
	        case EParser.ALWAYS:
	        case EParser.AND:
	        case EParser.ANY:
	        case EParser.AS:
	        case EParser.ASC:
	        case EParser.ATTR:
	        case EParser.ATTRIBUTE:
	        case EParser.ATTRIBUTES:
	        case EParser.BINDINGS:
	        case EParser.BREAK:
	        case EParser.BY:
	        case EParser.CASE:
	        case EParser.CATCH:
	        case EParser.CATEGORY:
	        case EParser.CLASS:
	        case EParser.CONTAINS:
	        case EParser.DEF:
	        case EParser.DEFAULT:
	        case EParser.DEFINE:
	        case EParser.DELETE:
	        case EParser.DESC:
	        case EParser.DO:
	        case EParser.DOING:
	        case EParser.EACH:
	        case EParser.ELSE:
	        case EParser.ENUM:
	        case EParser.ENUMERATED:
	        case EParser.EXCEPT:
	        case EParser.EXECUTE:
	        case EParser.EXPECTING:
	        case EParser.EXTENDS:
	        case EParser.FETCH:
	        case EParser.FILTERED:
	        case EParser.FINALLY:
	        case EParser.FLUSH:
	        case EParser.FOR:
	        case EParser.FROM:
	        case EParser.GETTER:
	        case EParser.HAS:
	        case EParser.IF:
	        case EParser.IN:
	        case EParser.INDEX:
	        case EParser.IS:
	        case EParser.MATCHING:
	        case EParser.METHOD:
	        case EParser.METHODS:
	        case EParser.MODULO:
	        case EParser.MUTABLE:
	        case EParser.NATIVE:
	        case EParser.NONE:
	        case EParser.NOT:
	        case EParser.NOTHING:
	        case EParser.NULL:
	        case EParser.ON:
	        case EParser.ONE:
	        case EParser.OPERATOR:
	        case EParser.OR:
	        case EParser.ORDER:
	        case EParser.OTHERWISE:
	        case EParser.PASS:
	        case EParser.RAISE:
	        case EParser.READ:
	        case EParser.RECEIVING:
	        case EParser.RESOURCE:
	        case EParser.RETURN:
	        case EParser.RETURNING:
	        case EParser.ROWS:
	        case EParser.SELF:
	        case EParser.SETTER:
	        case EParser.SINGLETON:
	        case EParser.SORTED:
	        case EParser.STORABLE:
	        case EParser.STORE:
	        case EParser.SUPER:
	        case EParser.SWITCH:
	        case EParser.TEST:
	        case EParser.THIS:
	        case EParser.THROW:
	        case EParser.TO:
	        case EParser.TRY:
	        case EParser.VERIFYING:
	        case EParser.WIDGET:
	        case EParser.WITH:
	        case EParser.WHEN:
	        case EParser.WHERE:
	        case EParser.WHILE:
	        case EParser.WRITE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2627;
	            this.keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	java_statement() {
	    let localctx = new Java_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, EParser.RULE_java_statement);
	    try {
	        this.state = 2637;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new JavaReturnStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2630;
	            this.match(EParser.RETURN);
	            this.state = 2631;
	            localctx.exp = this.java_expression(0);
	            this.state = 2632;
	            this.match(EParser.SEMI);
	            break;

	        case 2:
	            localctx = new JavaStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2634;
	            localctx.exp = this.java_expression(0);
	            this.state = 2635;
	            this.match(EParser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	java_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Java_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 428;
	    this.enterRecursionRule(localctx, 428, EParser.RULE_java_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new JavaPrimaryExpressionContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2640;
	        localctx.exp = this.java_primary_expression();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2646;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,237,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new JavaSelectorExpressionContext(this, new Java_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_java_expression);
	                this.state = 2642;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2643;
	                localctx.child = this.java_selector_expression(); 
	            }
	            this.state = 2648;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,237,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	java_primary_expression() {
	    let localctx = new Java_primary_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, EParser.RULE_java_primary_expression);
	    try {
	        this.state = 2654;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2649;
	            this.java_this_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2650;
	            this.java_new_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2651;
	            this.java_parenthesis_expression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2652;
	            this.java_identifier_expression(0);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2653;
	            this.java_literal_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	java_this_expression() {
	    let localctx = new Java_this_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, EParser.RULE_java_this_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2656;
	        this.this_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	java_new_expression() {
	    let localctx = new Java_new_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, EParser.RULE_java_new_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2658;
	        this.new_token();
	        this.state = 2659;
	        this.java_method_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	java_selector_expression() {
	    let localctx = new Java_selector_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, EParser.RULE_java_selector_expression);
	    try {
	        this.state = 2664;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.DOT:
	            localctx = new JavaMethodExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2661;
	            this.match(EParser.DOT);
	            this.state = 2662;
	            localctx.exp = this.java_method_expression();
	            break;
	        case EParser.LBRAK:
	            localctx = new JavaItemExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2663;
	            localctx.exp = this.java_item_expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	java_method_expression() {
	    let localctx = new Java_method_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, EParser.RULE_java_method_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2666;
	        localctx.name = this.java_identifier();
	        this.state = 2667;
	        this.match(EParser.LPAR);
	        this.state = 2669;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << EParser.JAVA) | (1 << EParser.CSHARP) | (1 << EParser.PYTHON2) | (1 << EParser.PYTHON3) | (1 << EParser.JAVASCRIPT) | (1 << EParser.SWIFT) | (1 << EParser.LPAR))) !== 0) || ((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (EParser.BOOLEAN - 53)) | (1 << (EParser.CHARACTER - 53)) | (1 << (EParser.TEXT - 53)) | (1 << (EParser.INTEGER - 53)) | (1 << (EParser.DECIMAL - 53)) | (1 << (EParser.DATE - 53)) | (1 << (EParser.TIME - 53)) | (1 << (EParser.DATETIME - 53)) | (1 << (EParser.PERIOD - 53)) | (1 << (EParser.VERSION - 53)) | (1 << (EParser.CODE - 53)) | (1 << (EParser.DOCUMENT - 53)) | (1 << (EParser.BLOB - 53)) | (1 << (EParser.IMAGE - 53)) | (1 << (EParser.UUID - 53)) | (1 << (EParser.ITERATOR - 53)) | (1 << (EParser.CURSOR - 53)) | (1 << (EParser.HTML - 53)) | (1 << (EParser.ABSTRACT - 53)) | (1 << (EParser.ALL - 53)) | (1 << (EParser.ALWAYS - 53)) | (1 << (EParser.AND - 53)) | (1 << (EParser.ANY - 53)) | (1 << (EParser.AS - 53)) | (1 << (EParser.ASC - 53)) | (1 << (EParser.ATTR - 53)) | (1 << (EParser.ATTRIBUTE - 53)) | (1 << (EParser.ATTRIBUTES - 53)) | (1 << (EParser.BINDINGS - 53)))) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (EParser.BREAK - 85)) | (1 << (EParser.BY - 85)) | (1 << (EParser.CASE - 85)) | (1 << (EParser.CATCH - 85)) | (1 << (EParser.CATEGORY - 85)) | (1 << (EParser.CLASS - 85)) | (1 << (EParser.CONTAINS - 85)) | (1 << (EParser.DEF - 85)) | (1 << (EParser.DEFAULT - 85)) | (1 << (EParser.DEFINE - 85)) | (1 << (EParser.DELETE - 85)) | (1 << (EParser.DESC - 85)) | (1 << (EParser.DO - 85)) | (1 << (EParser.DOING - 85)) | (1 << (EParser.EACH - 85)) | (1 << (EParser.ELSE - 85)) | (1 << (EParser.ENUM - 85)) | (1 << (EParser.ENUMERATED - 85)) | (1 << (EParser.EXCEPT - 85)) | (1 << (EParser.EXECUTE - 85)) | (1 << (EParser.EXPECTING - 85)) | (1 << (EParser.EXTENDS - 85)) | (1 << (EParser.FETCH - 85)) | (1 << (EParser.FILTERED - 85)) | (1 << (EParser.FINALLY - 85)) | (1 << (EParser.FLUSH - 85)) | (1 << (EParser.FOR - 85)) | (1 << (EParser.FROM - 85)) | (1 << (EParser.GETTER - 85)) | (1 << (EParser.HAS - 85)) | (1 << (EParser.IF - 85)) | (1 << (EParser.IN - 85)))) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & ((1 << (EParser.INDEX - 117)) | (1 << (EParser.IS - 117)) | (1 << (EParser.MATCHING - 117)) | (1 << (EParser.METHOD - 117)) | (1 << (EParser.METHODS - 117)) | (1 << (EParser.MODULO - 117)) | (1 << (EParser.MUTABLE - 117)) | (1 << (EParser.NATIVE - 117)) | (1 << (EParser.NONE - 117)) | (1 << (EParser.NOT - 117)) | (1 << (EParser.NOTHING - 117)) | (1 << (EParser.NULL - 117)) | (1 << (EParser.ON - 117)) | (1 << (EParser.ONE - 117)) | (1 << (EParser.OPERATOR - 117)) | (1 << (EParser.OR - 117)) | (1 << (EParser.ORDER - 117)) | (1 << (EParser.OTHERWISE - 117)) | (1 << (EParser.PASS - 117)) | (1 << (EParser.RAISE - 117)) | (1 << (EParser.READ - 117)) | (1 << (EParser.RECEIVING - 117)) | (1 << (EParser.RESOURCE - 117)) | (1 << (EParser.RETURN - 117)) | (1 << (EParser.RETURNING - 117)) | (1 << (EParser.ROWS - 117)) | (1 << (EParser.SELF - 117)) | (1 << (EParser.SETTER - 117)) | (1 << (EParser.SINGLETON - 117)) | (1 << (EParser.SORTED - 117)) | (1 << (EParser.STORABLE - 117)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (EParser.STORE - 149)) | (1 << (EParser.SUPER - 149)) | (1 << (EParser.SWITCH - 149)) | (1 << (EParser.TEST - 149)) | (1 << (EParser.THIS - 149)) | (1 << (EParser.THROW - 149)) | (1 << (EParser.TO - 149)) | (1 << (EParser.TRY - 149)) | (1 << (EParser.VERIFYING - 149)) | (1 << (EParser.WIDGET - 149)) | (1 << (EParser.WITH - 149)) | (1 << (EParser.WHEN - 149)) | (1 << (EParser.WHERE - 149)) | (1 << (EParser.WHILE - 149)) | (1 << (EParser.WRITE - 149)) | (1 << (EParser.BOOLEAN_LITERAL - 149)) | (1 << (EParser.CHAR_LITERAL - 149)) | (1 << (EParser.SYMBOL_IDENTIFIER - 149)) | (1 << (EParser.TYPE_IDENTIFIER - 149)) | (1 << (EParser.VARIABLE_IDENTIFIER - 149)) | (1 << (EParser.DOLLAR_IDENTIFIER - 149)) | (1 << (EParser.TEXT_LITERAL - 149)) | (1 << (EParser.INTEGER_LITERAL - 149)) | (1 << (EParser.DECIMAL_LITERAL - 149)))) !== 0)) {
	            this.state = 2668;
	            localctx.args = this.java_arguments(0);
	        }

	        this.state = 2671;
	        this.match(EParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	java_arguments(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Java_argumentsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 440;
	    this.enterRecursionRule(localctx, 440, EParser.RULE_java_arguments, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new JavaArgumentListContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2674;
	        localctx.item = this.java_expression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2681;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,241,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new JavaArgumentListItemContext(this, new Java_argumentsContext(this, _parentctx, _parentState));
	                localctx.items = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_java_arguments);
	                this.state = 2676;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2677;
	                this.match(EParser.COMMA);
	                this.state = 2678;
	                localctx.item = this.java_expression(0); 
	            }
	            this.state = 2683;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,241,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	java_item_expression() {
	    let localctx = new Java_item_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, EParser.RULE_java_item_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2684;
	        this.match(EParser.LBRAK);
	        this.state = 2685;
	        localctx.exp = this.java_expression(0);
	        this.state = 2686;
	        this.match(EParser.RBRAK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	java_parenthesis_expression() {
	    let localctx = new Java_parenthesis_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, EParser.RULE_java_parenthesis_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2688;
	        this.match(EParser.LPAR);
	        this.state = 2689;
	        localctx.exp = this.java_expression(0);
	        this.state = 2690;
	        this.match(EParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	java_identifier_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Java_identifier_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 446;
	    this.enterRecursionRule(localctx, 446, EParser.RULE_java_identifier_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new JavaIdentifierContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2693;
	        localctx.name = this.java_identifier();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2700;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,242,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new JavaChildIdentifierContext(this, new Java_identifier_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_java_identifier_expression);
	                this.state = 2695;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2696;
	                this.match(EParser.DOT);
	                this.state = 2697;
	                localctx.name = this.java_identifier(); 
	            }
	            this.state = 2702;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,242,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	java_class_identifier_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Java_class_identifier_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 448;
	    this.enterRecursionRule(localctx, 448, EParser.RULE_java_class_identifier_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new JavaClassIdentifierContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2704;
	        localctx.klass = this.java_identifier_expression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2710;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,243,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new JavaChildClassIdentifierContext(this, new Java_class_identifier_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_java_class_identifier_expression);
	                this.state = 2706;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2707;
	                localctx.name = this.match(EParser.DOLLAR_IDENTIFIER); 
	            }
	            this.state = 2712;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,243,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	java_literal_expression() {
	    let localctx = new Java_literal_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, EParser.RULE_java_literal_expression);
	    try {
	        this.state = 2718;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.INTEGER_LITERAL:
	            localctx = new JavaIntegerLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2713;
	            localctx.t = this.match(EParser.INTEGER_LITERAL);
	            break;
	        case EParser.DECIMAL_LITERAL:
	            localctx = new JavaDecimalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2714;
	            localctx.t = this.match(EParser.DECIMAL_LITERAL);
	            break;
	        case EParser.TEXT_LITERAL:
	            localctx = new JavaTextLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2715;
	            localctx.t = this.match(EParser.TEXT_LITERAL);
	            break;
	        case EParser.BOOLEAN_LITERAL:
	            localctx = new JavaBooleanLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2716;
	            localctx.t = this.match(EParser.BOOLEAN_LITERAL);
	            break;
	        case EParser.CHAR_LITERAL:
	            localctx = new JavaCharacterLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2717;
	            localctx.t = this.match(EParser.CHAR_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	java_identifier() {
	    let localctx = new Java_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, EParser.RULE_java_identifier);
	    try {
	        this.state = 2725;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.VARIABLE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2720;
	            this.match(EParser.VARIABLE_IDENTIFIER);
	            break;
	        case EParser.SYMBOL_IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2721;
	            this.match(EParser.SYMBOL_IDENTIFIER);
	            break;
	        case EParser.DOLLAR_IDENTIFIER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2722;
	            this.match(EParser.DOLLAR_IDENTIFIER);
	            break;
	        case EParser.TYPE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2723;
	            this.match(EParser.TYPE_IDENTIFIER);
	            break;
	        case EParser.JAVA:
	        case EParser.CSHARP:
	        case EParser.PYTHON2:
	        case EParser.PYTHON3:
	        case EParser.JAVASCRIPT:
	        case EParser.SWIFT:
	        case EParser.BOOLEAN:
	        case EParser.CHARACTER:
	        case EParser.TEXT:
	        case EParser.INTEGER:
	        case EParser.DECIMAL:
	        case EParser.DATE:
	        case EParser.TIME:
	        case EParser.DATETIME:
	        case EParser.PERIOD:
	        case EParser.VERSION:
	        case EParser.CODE:
	        case EParser.DOCUMENT:
	        case EParser.BLOB:
	        case EParser.IMAGE:
	        case EParser.UUID:
	        case EParser.ITERATOR:
	        case EParser.CURSOR:
	        case EParser.HTML:
	        case EParser.ABSTRACT:
	        case EParser.ALL:
	        case EParser.ALWAYS:
	        case EParser.AND:
	        case EParser.ANY:
	        case EParser.AS:
	        case EParser.ASC:
	        case EParser.ATTR:
	        case EParser.ATTRIBUTE:
	        case EParser.ATTRIBUTES:
	        case EParser.BINDINGS:
	        case EParser.BREAK:
	        case EParser.BY:
	        case EParser.CASE:
	        case EParser.CATCH:
	        case EParser.CATEGORY:
	        case EParser.CLASS:
	        case EParser.CONTAINS:
	        case EParser.DEF:
	        case EParser.DEFAULT:
	        case EParser.DEFINE:
	        case EParser.DELETE:
	        case EParser.DESC:
	        case EParser.DO:
	        case EParser.DOING:
	        case EParser.EACH:
	        case EParser.ELSE:
	        case EParser.ENUM:
	        case EParser.ENUMERATED:
	        case EParser.EXCEPT:
	        case EParser.EXECUTE:
	        case EParser.EXPECTING:
	        case EParser.EXTENDS:
	        case EParser.FETCH:
	        case EParser.FILTERED:
	        case EParser.FINALLY:
	        case EParser.FLUSH:
	        case EParser.FOR:
	        case EParser.FROM:
	        case EParser.GETTER:
	        case EParser.HAS:
	        case EParser.IF:
	        case EParser.IN:
	        case EParser.INDEX:
	        case EParser.IS:
	        case EParser.MATCHING:
	        case EParser.METHOD:
	        case EParser.METHODS:
	        case EParser.MODULO:
	        case EParser.MUTABLE:
	        case EParser.NATIVE:
	        case EParser.NONE:
	        case EParser.NOT:
	        case EParser.NOTHING:
	        case EParser.NULL:
	        case EParser.ON:
	        case EParser.ONE:
	        case EParser.OPERATOR:
	        case EParser.OR:
	        case EParser.ORDER:
	        case EParser.OTHERWISE:
	        case EParser.PASS:
	        case EParser.RAISE:
	        case EParser.READ:
	        case EParser.RECEIVING:
	        case EParser.RESOURCE:
	        case EParser.RETURN:
	        case EParser.RETURNING:
	        case EParser.ROWS:
	        case EParser.SELF:
	        case EParser.SETTER:
	        case EParser.SINGLETON:
	        case EParser.SORTED:
	        case EParser.STORABLE:
	        case EParser.STORE:
	        case EParser.SUPER:
	        case EParser.SWITCH:
	        case EParser.TEST:
	        case EParser.THIS:
	        case EParser.THROW:
	        case EParser.TO:
	        case EParser.TRY:
	        case EParser.VERIFYING:
	        case EParser.WIDGET:
	        case EParser.WITH:
	        case EParser.WHEN:
	        case EParser.WHERE:
	        case EParser.WHILE:
	        case EParser.WRITE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2724;
	            this.keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csharp_statement() {
	    let localctx = new Csharp_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, EParser.RULE_csharp_statement);
	    try {
	        this.state = 2734;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,246,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CSharpReturnStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2727;
	            this.match(EParser.RETURN);
	            this.state = 2728;
	            localctx.exp = this.csharp_expression(0);
	            this.state = 2729;
	            this.match(EParser.SEMI);
	            break;

	        case 2:
	            localctx = new CSharpStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2731;
	            localctx.exp = this.csharp_expression(0);
	            this.state = 2732;
	            this.match(EParser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	csharp_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Csharp_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 456;
	    this.enterRecursionRule(localctx, 456, EParser.RULE_csharp_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new CSharpPrimaryExpressionContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2737;
	        localctx.exp = this.csharp_primary_expression();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2743;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,247,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new CSharpSelectorExpressionContext(this, new Csharp_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_csharp_expression);
	                this.state = 2739;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2740;
	                localctx.child = this.csharp_selector_expression(); 
	            }
	            this.state = 2745;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,247,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	csharp_primary_expression() {
	    let localctx = new Csharp_primary_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, EParser.RULE_csharp_primary_expression);
	    try {
	        this.state = 2751;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,248,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2746;
	            this.csharp_this_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2747;
	            this.csharp_new_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2748;
	            this.csharp_parenthesis_expression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2749;
	            this.csharp_identifier_expression(0);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2750;
	            this.csharp_literal_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csharp_this_expression() {
	    let localctx = new Csharp_this_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, EParser.RULE_csharp_this_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2753;
	        this.this_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csharp_new_expression() {
	    let localctx = new Csharp_new_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, EParser.RULE_csharp_new_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2755;
	        this.new_token();
	        this.state = 2756;
	        this.csharp_method_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csharp_selector_expression() {
	    let localctx = new Csharp_selector_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, EParser.RULE_csharp_selector_expression);
	    try {
	        this.state = 2761;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.DOT:
	            localctx = new CSharpMethodExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2758;
	            this.match(EParser.DOT);
	            this.state = 2759;
	            localctx.exp = this.csharp_method_expression();
	            break;
	        case EParser.LBRAK:
	            localctx = new CSharpItemExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2760;
	            localctx.exp = this.csharp_item_expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csharp_method_expression() {
	    let localctx = new Csharp_method_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, EParser.RULE_csharp_method_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2763;
	        localctx.name = this.csharp_identifier();
	        this.state = 2764;
	        this.match(EParser.LPAR);
	        this.state = 2766;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << EParser.JAVA) | (1 << EParser.CSHARP) | (1 << EParser.PYTHON2) | (1 << EParser.PYTHON3) | (1 << EParser.JAVASCRIPT) | (1 << EParser.SWIFT) | (1 << EParser.LPAR))) !== 0) || ((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (EParser.BOOLEAN - 53)) | (1 << (EParser.CHARACTER - 53)) | (1 << (EParser.TEXT - 53)) | (1 << (EParser.INTEGER - 53)) | (1 << (EParser.DECIMAL - 53)) | (1 << (EParser.DATE - 53)) | (1 << (EParser.TIME - 53)) | (1 << (EParser.DATETIME - 53)) | (1 << (EParser.PERIOD - 53)) | (1 << (EParser.VERSION - 53)) | (1 << (EParser.CODE - 53)) | (1 << (EParser.DOCUMENT - 53)) | (1 << (EParser.BLOB - 53)) | (1 << (EParser.IMAGE - 53)) | (1 << (EParser.UUID - 53)) | (1 << (EParser.ITERATOR - 53)) | (1 << (EParser.CURSOR - 53)) | (1 << (EParser.HTML - 53)) | (1 << (EParser.ABSTRACT - 53)) | (1 << (EParser.ALL - 53)) | (1 << (EParser.ALWAYS - 53)) | (1 << (EParser.AND - 53)) | (1 << (EParser.ANY - 53)) | (1 << (EParser.AS - 53)) | (1 << (EParser.ASC - 53)) | (1 << (EParser.ATTR - 53)) | (1 << (EParser.ATTRIBUTE - 53)) | (1 << (EParser.ATTRIBUTES - 53)) | (1 << (EParser.BINDINGS - 53)))) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (EParser.BREAK - 85)) | (1 << (EParser.BY - 85)) | (1 << (EParser.CASE - 85)) | (1 << (EParser.CATCH - 85)) | (1 << (EParser.CATEGORY - 85)) | (1 << (EParser.CLASS - 85)) | (1 << (EParser.CONTAINS - 85)) | (1 << (EParser.DEF - 85)) | (1 << (EParser.DEFAULT - 85)) | (1 << (EParser.DEFINE - 85)) | (1 << (EParser.DELETE - 85)) | (1 << (EParser.DESC - 85)) | (1 << (EParser.DO - 85)) | (1 << (EParser.DOING - 85)) | (1 << (EParser.EACH - 85)) | (1 << (EParser.ELSE - 85)) | (1 << (EParser.ENUM - 85)) | (1 << (EParser.ENUMERATED - 85)) | (1 << (EParser.EXCEPT - 85)) | (1 << (EParser.EXECUTE - 85)) | (1 << (EParser.EXPECTING - 85)) | (1 << (EParser.EXTENDS - 85)) | (1 << (EParser.FETCH - 85)) | (1 << (EParser.FILTERED - 85)) | (1 << (EParser.FINALLY - 85)) | (1 << (EParser.FLUSH - 85)) | (1 << (EParser.FOR - 85)) | (1 << (EParser.FROM - 85)) | (1 << (EParser.GETTER - 85)) | (1 << (EParser.HAS - 85)) | (1 << (EParser.IF - 85)) | (1 << (EParser.IN - 85)))) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & ((1 << (EParser.INDEX - 117)) | (1 << (EParser.IS - 117)) | (1 << (EParser.MATCHING - 117)) | (1 << (EParser.METHOD - 117)) | (1 << (EParser.METHODS - 117)) | (1 << (EParser.MODULO - 117)) | (1 << (EParser.MUTABLE - 117)) | (1 << (EParser.NATIVE - 117)) | (1 << (EParser.NONE - 117)) | (1 << (EParser.NOT - 117)) | (1 << (EParser.NOTHING - 117)) | (1 << (EParser.NULL - 117)) | (1 << (EParser.ON - 117)) | (1 << (EParser.ONE - 117)) | (1 << (EParser.OPERATOR - 117)) | (1 << (EParser.OR - 117)) | (1 << (EParser.ORDER - 117)) | (1 << (EParser.OTHERWISE - 117)) | (1 << (EParser.PASS - 117)) | (1 << (EParser.RAISE - 117)) | (1 << (EParser.READ - 117)) | (1 << (EParser.RECEIVING - 117)) | (1 << (EParser.RESOURCE - 117)) | (1 << (EParser.RETURN - 117)) | (1 << (EParser.RETURNING - 117)) | (1 << (EParser.ROWS - 117)) | (1 << (EParser.SELF - 117)) | (1 << (EParser.SETTER - 117)) | (1 << (EParser.SINGLETON - 117)) | (1 << (EParser.SORTED - 117)) | (1 << (EParser.STORABLE - 117)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (EParser.STORE - 149)) | (1 << (EParser.SUPER - 149)) | (1 << (EParser.SWITCH - 149)) | (1 << (EParser.TEST - 149)) | (1 << (EParser.THIS - 149)) | (1 << (EParser.THROW - 149)) | (1 << (EParser.TO - 149)) | (1 << (EParser.TRY - 149)) | (1 << (EParser.VERIFYING - 149)) | (1 << (EParser.WIDGET - 149)) | (1 << (EParser.WITH - 149)) | (1 << (EParser.WHEN - 149)) | (1 << (EParser.WHERE - 149)) | (1 << (EParser.WHILE - 149)) | (1 << (EParser.WRITE - 149)) | (1 << (EParser.BOOLEAN_LITERAL - 149)) | (1 << (EParser.CHAR_LITERAL - 149)) | (1 << (EParser.SYMBOL_IDENTIFIER - 149)) | (1 << (EParser.TYPE_IDENTIFIER - 149)) | (1 << (EParser.VARIABLE_IDENTIFIER - 149)) | (1 << (EParser.DOLLAR_IDENTIFIER - 149)) | (1 << (EParser.TEXT_LITERAL - 149)) | (1 << (EParser.INTEGER_LITERAL - 149)) | (1 << (EParser.DECIMAL_LITERAL - 149)))) !== 0)) {
	            this.state = 2765;
	            localctx.args = this.csharp_arguments(0);
	        }

	        this.state = 2768;
	        this.match(EParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	csharp_arguments(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Csharp_argumentsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 468;
	    this.enterRecursionRule(localctx, 468, EParser.RULE_csharp_arguments, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new CSharpArgumentListContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2771;
	        localctx.item = this.csharp_expression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2778;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,251,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new CSharpArgumentListItemContext(this, new Csharp_argumentsContext(this, _parentctx, _parentState));
	                localctx.items = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_csharp_arguments);
	                this.state = 2773;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2774;
	                this.match(EParser.COMMA);
	                this.state = 2775;
	                localctx.item = this.csharp_expression(0); 
	            }
	            this.state = 2780;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,251,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	csharp_item_expression() {
	    let localctx = new Csharp_item_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, EParser.RULE_csharp_item_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2781;
	        this.match(EParser.LBRAK);
	        this.state = 2782;
	        localctx.exp = this.csharp_expression(0);
	        this.state = 2783;
	        this.match(EParser.RBRAK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csharp_parenthesis_expression() {
	    let localctx = new Csharp_parenthesis_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, EParser.RULE_csharp_parenthesis_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2785;
	        this.match(EParser.LPAR);
	        this.state = 2786;
	        localctx.exp = this.csharp_expression(0);
	        this.state = 2787;
	        this.match(EParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	csharp_identifier_expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Csharp_identifier_expressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 474;
	    this.enterRecursionRule(localctx, 474, EParser.RULE_csharp_identifier_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2792;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CSharpPromptoIdentifierContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 2790;
	            this.match(EParser.DOLLAR_IDENTIFIER);
	            break;

	        case 2:
	            localctx = new CSharpIdentifierContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2791;
	            localctx.name = this.csharp_identifier();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2799;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,253,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new CSharpChildIdentifierContext(this, new Csharp_identifier_expressionContext(this, _parentctx, _parentState));
	                localctx.parent = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_csharp_identifier_expression);
	                this.state = 2794;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2795;
	                this.match(EParser.DOT);
	                this.state = 2796;
	                localctx.name = this.csharp_identifier(); 
	            }
	            this.state = 2801;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,253,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	csharp_literal_expression() {
	    let localctx = new Csharp_literal_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, EParser.RULE_csharp_literal_expression);
	    try {
	        this.state = 2807;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.INTEGER_LITERAL:
	            localctx = new CSharpIntegerLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2802;
	            this.match(EParser.INTEGER_LITERAL);
	            break;
	        case EParser.DECIMAL_LITERAL:
	            localctx = new CSharpDecimalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2803;
	            this.match(EParser.DECIMAL_LITERAL);
	            break;
	        case EParser.TEXT_LITERAL:
	            localctx = new CSharpTextLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2804;
	            this.match(EParser.TEXT_LITERAL);
	            break;
	        case EParser.BOOLEAN_LITERAL:
	            localctx = new CSharpBooleanLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2805;
	            this.match(EParser.BOOLEAN_LITERAL);
	            break;
	        case EParser.CHAR_LITERAL:
	            localctx = new CSharpCharacterLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2806;
	            this.match(EParser.CHAR_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csharp_identifier() {
	    let localctx = new Csharp_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, EParser.RULE_csharp_identifier);
	    try {
	        this.state = 2814;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.VARIABLE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2809;
	            this.match(EParser.VARIABLE_IDENTIFIER);
	            break;
	        case EParser.SYMBOL_IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2810;
	            this.match(EParser.SYMBOL_IDENTIFIER);
	            break;
	        case EParser.DOLLAR_IDENTIFIER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2811;
	            this.match(EParser.DOLLAR_IDENTIFIER);
	            break;
	        case EParser.TYPE_IDENTIFIER:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2812;
	            this.match(EParser.TYPE_IDENTIFIER);
	            break;
	        case EParser.JAVA:
	        case EParser.CSHARP:
	        case EParser.PYTHON2:
	        case EParser.PYTHON3:
	        case EParser.JAVASCRIPT:
	        case EParser.SWIFT:
	        case EParser.BOOLEAN:
	        case EParser.CHARACTER:
	        case EParser.TEXT:
	        case EParser.INTEGER:
	        case EParser.DECIMAL:
	        case EParser.DATE:
	        case EParser.TIME:
	        case EParser.DATETIME:
	        case EParser.PERIOD:
	        case EParser.VERSION:
	        case EParser.CODE:
	        case EParser.DOCUMENT:
	        case EParser.BLOB:
	        case EParser.IMAGE:
	        case EParser.UUID:
	        case EParser.ITERATOR:
	        case EParser.CURSOR:
	        case EParser.HTML:
	        case EParser.ABSTRACT:
	        case EParser.ALL:
	        case EParser.ALWAYS:
	        case EParser.AND:
	        case EParser.ANY:
	        case EParser.AS:
	        case EParser.ASC:
	        case EParser.ATTR:
	        case EParser.ATTRIBUTE:
	        case EParser.ATTRIBUTES:
	        case EParser.BINDINGS:
	        case EParser.BREAK:
	        case EParser.BY:
	        case EParser.CASE:
	        case EParser.CATCH:
	        case EParser.CATEGORY:
	        case EParser.CLASS:
	        case EParser.CONTAINS:
	        case EParser.DEF:
	        case EParser.DEFAULT:
	        case EParser.DEFINE:
	        case EParser.DELETE:
	        case EParser.DESC:
	        case EParser.DO:
	        case EParser.DOING:
	        case EParser.EACH:
	        case EParser.ELSE:
	        case EParser.ENUM:
	        case EParser.ENUMERATED:
	        case EParser.EXCEPT:
	        case EParser.EXECUTE:
	        case EParser.EXPECTING:
	        case EParser.EXTENDS:
	        case EParser.FETCH:
	        case EParser.FILTERED:
	        case EParser.FINALLY:
	        case EParser.FLUSH:
	        case EParser.FOR:
	        case EParser.FROM:
	        case EParser.GETTER:
	        case EParser.HAS:
	        case EParser.IF:
	        case EParser.IN:
	        case EParser.INDEX:
	        case EParser.IS:
	        case EParser.MATCHING:
	        case EParser.METHOD:
	        case EParser.METHODS:
	        case EParser.MODULO:
	        case EParser.MUTABLE:
	        case EParser.NATIVE:
	        case EParser.NONE:
	        case EParser.NOT:
	        case EParser.NOTHING:
	        case EParser.NULL:
	        case EParser.ON:
	        case EParser.ONE:
	        case EParser.OPERATOR:
	        case EParser.OR:
	        case EParser.ORDER:
	        case EParser.OTHERWISE:
	        case EParser.PASS:
	        case EParser.RAISE:
	        case EParser.READ:
	        case EParser.RECEIVING:
	        case EParser.RESOURCE:
	        case EParser.RETURN:
	        case EParser.RETURNING:
	        case EParser.ROWS:
	        case EParser.SELF:
	        case EParser.SETTER:
	        case EParser.SINGLETON:
	        case EParser.SORTED:
	        case EParser.STORABLE:
	        case EParser.STORE:
	        case EParser.SUPER:
	        case EParser.SWITCH:
	        case EParser.TEST:
	        case EParser.THIS:
	        case EParser.THROW:
	        case EParser.TO:
	        case EParser.TRY:
	        case EParser.VERIFYING:
	        case EParser.WIDGET:
	        case EParser.WITH:
	        case EParser.WHEN:
	        case EParser.WHERE:
	        case EParser.WHILE:
	        case EParser.WRITE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2813;
	            this.keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_expression() {
	    let localctx = new Jsx_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, EParser.RULE_jsx_expression);
	    try {
	        this.state = 2818;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2816;
	            this.jsx_element();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2817;
	            this.jsx_fragment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_element() {
	    let localctx = new Jsx_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, EParser.RULE_jsx_element);
	    try {
	        this.state = 2827;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,258,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new JsxSelfClosingContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2820;
	            localctx.jsx = this.jsx_self_closing();
	            break;

	        case 2:
	            localctx = new JsxElementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2821;
	            localctx.opening = this.jsx_opening();
	            this.state = 2823;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,257,this._ctx);
	            if(la_===1) {
	                this.state = 2822;
	                localctx.children_ = this.jsx_children();

	            }
	            this.state = 2825;
	            localctx.closing = this.jsx_closing();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_fragment() {
	    let localctx = new Jsx_fragmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, EParser.RULE_jsx_fragment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2829;
	        this.jsx_fragment_start();
	        this.state = 2830;
	        this.ws_plus();
	        this.state = 2832;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,259,this._ctx);
	        if(la_===1) {
	            this.state = 2831;
	            localctx.children_ = this.jsx_children();

	        }
	        this.state = 2834;
	        this.ws_plus();
	        this.state = 2835;
	        this.jsx_fragment_end();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_fragment_start() {
	    let localctx = new Jsx_fragment_startContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, EParser.RULE_jsx_fragment_start);
	    try {
	        this.state = 2840;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.LT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2837;
	            this.match(EParser.LT);
	            this.state = 2838;
	            this.match(EParser.GT);
	            break;
	        case EParser.LTGT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2839;
	            this.match(EParser.LTGT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_fragment_end() {
	    let localctx = new Jsx_fragment_endContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, EParser.RULE_jsx_fragment_end);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2842;
	        this.match(EParser.LT);
	        this.state = 2843;
	        this.match(EParser.SLASH);
	        this.state = 2844;
	        this.match(EParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_self_closing() {
	    let localctx = new Jsx_self_closingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, EParser.RULE_jsx_self_closing);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2846;
	        this.match(EParser.LT);
	        this.state = 2847;
	        localctx.name = this.jsx_element_name();
	        this.state = 2848;
	        this.ws_plus();
	        this.state = 2852;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << EParser.JAVA) | (1 << EParser.CSHARP) | (1 << EParser.PYTHON2) | (1 << EParser.PYTHON3) | (1 << EParser.JAVASCRIPT) | (1 << EParser.SWIFT))) !== 0) || ((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (EParser.BOOLEAN - 53)) | (1 << (EParser.CHARACTER - 53)) | (1 << (EParser.TEXT - 53)) | (1 << (EParser.INTEGER - 53)) | (1 << (EParser.DECIMAL - 53)) | (1 << (EParser.DATE - 53)) | (1 << (EParser.TIME - 53)) | (1 << (EParser.DATETIME - 53)) | (1 << (EParser.PERIOD - 53)) | (1 << (EParser.VERSION - 53)) | (1 << (EParser.CODE - 53)) | (1 << (EParser.DOCUMENT - 53)) | (1 << (EParser.BLOB - 53)) | (1 << (EParser.IMAGE - 53)) | (1 << (EParser.UUID - 53)) | (1 << (EParser.ITERATOR - 53)) | (1 << (EParser.CURSOR - 53)) | (1 << (EParser.HTML - 53)) | (1 << (EParser.ABSTRACT - 53)) | (1 << (EParser.ALL - 53)) | (1 << (EParser.ALWAYS - 53)) | (1 << (EParser.AND - 53)) | (1 << (EParser.ANY - 53)) | (1 << (EParser.AS - 53)) | (1 << (EParser.ASC - 53)) | (1 << (EParser.ATTR - 53)) | (1 << (EParser.ATTRIBUTE - 53)) | (1 << (EParser.ATTRIBUTES - 53)) | (1 << (EParser.BINDINGS - 53)))) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (EParser.BREAK - 85)) | (1 << (EParser.BY - 85)) | (1 << (EParser.CASE - 85)) | (1 << (EParser.CATCH - 85)) | (1 << (EParser.CATEGORY - 85)) | (1 << (EParser.CLASS - 85)) | (1 << (EParser.CONTAINS - 85)) | (1 << (EParser.DEF - 85)) | (1 << (EParser.DEFAULT - 85)) | (1 << (EParser.DEFINE - 85)) | (1 << (EParser.DELETE - 85)) | (1 << (EParser.DESC - 85)) | (1 << (EParser.DO - 85)) | (1 << (EParser.DOING - 85)) | (1 << (EParser.EACH - 85)) | (1 << (EParser.ELSE - 85)) | (1 << (EParser.ENUM - 85)) | (1 << (EParser.ENUMERATED - 85)) | (1 << (EParser.EXCEPT - 85)) | (1 << (EParser.EXECUTE - 85)) | (1 << (EParser.EXPECTING - 85)) | (1 << (EParser.EXTENDS - 85)) | (1 << (EParser.FETCH - 85)) | (1 << (EParser.FILTERED - 85)) | (1 << (EParser.FINALLY - 85)) | (1 << (EParser.FLUSH - 85)) | (1 << (EParser.FOR - 85)) | (1 << (EParser.FROM - 85)) | (1 << (EParser.GETTER - 85)) | (1 << (EParser.HAS - 85)) | (1 << (EParser.IF - 85)) | (1 << (EParser.IN - 85)))) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & ((1 << (EParser.INDEX - 117)) | (1 << (EParser.IS - 117)) | (1 << (EParser.MATCHING - 117)) | (1 << (EParser.METHOD - 117)) | (1 << (EParser.METHODS - 117)) | (1 << (EParser.MODULO - 117)) | (1 << (EParser.MUTABLE - 117)) | (1 << (EParser.NATIVE - 117)) | (1 << (EParser.NONE - 117)) | (1 << (EParser.NOT - 117)) | (1 << (EParser.NOTHING - 117)) | (1 << (EParser.NULL - 117)) | (1 << (EParser.ON - 117)) | (1 << (EParser.ONE - 117)) | (1 << (EParser.OPERATOR - 117)) | (1 << (EParser.OR - 117)) | (1 << (EParser.ORDER - 117)) | (1 << (EParser.OTHERWISE - 117)) | (1 << (EParser.PASS - 117)) | (1 << (EParser.RAISE - 117)) | (1 << (EParser.READ - 117)) | (1 << (EParser.RECEIVING - 117)) | (1 << (EParser.RESOURCE - 117)) | (1 << (EParser.RETURN - 117)) | (1 << (EParser.RETURNING - 117)) | (1 << (EParser.ROWS - 117)) | (1 << (EParser.SELF - 117)) | (1 << (EParser.SETTER - 117)) | (1 << (EParser.SINGLETON - 117)) | (1 << (EParser.SORTED - 117)) | (1 << (EParser.STORABLE - 117)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (EParser.STORE - 149)) | (1 << (EParser.SUPER - 149)) | (1 << (EParser.SWITCH - 149)) | (1 << (EParser.TEST - 149)) | (1 << (EParser.THIS - 149)) | (1 << (EParser.THROW - 149)) | (1 << (EParser.TO - 149)) | (1 << (EParser.TRY - 149)) | (1 << (EParser.VERIFYING - 149)) | (1 << (EParser.WIDGET - 149)) | (1 << (EParser.WITH - 149)) | (1 << (EParser.WHEN - 149)) | (1 << (EParser.WHERE - 149)) | (1 << (EParser.WHILE - 149)) | (1 << (EParser.WRITE - 149)) | (1 << (EParser.SYMBOL_IDENTIFIER - 149)) | (1 << (EParser.TYPE_IDENTIFIER - 149)) | (1 << (EParser.VARIABLE_IDENTIFIER - 149)))) !== 0)) {
	            this.state = 2849;
	            localctx.attributes = this.jsx_attribute();
	            this.state = 2854;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2855;
	        this.match(EParser.SLASH);
	        this.state = 2856;
	        this.match(EParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_opening() {
	    let localctx = new Jsx_openingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, EParser.RULE_jsx_opening);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2858;
	        this.match(EParser.LT);
	        this.state = 2859;
	        localctx.name = this.jsx_element_name();
	        this.state = 2860;
	        this.ws_plus();
	        this.state = 2864;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << EParser.JAVA) | (1 << EParser.CSHARP) | (1 << EParser.PYTHON2) | (1 << EParser.PYTHON3) | (1 << EParser.JAVASCRIPT) | (1 << EParser.SWIFT))) !== 0) || ((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (EParser.BOOLEAN - 53)) | (1 << (EParser.CHARACTER - 53)) | (1 << (EParser.TEXT - 53)) | (1 << (EParser.INTEGER - 53)) | (1 << (EParser.DECIMAL - 53)) | (1 << (EParser.DATE - 53)) | (1 << (EParser.TIME - 53)) | (1 << (EParser.DATETIME - 53)) | (1 << (EParser.PERIOD - 53)) | (1 << (EParser.VERSION - 53)) | (1 << (EParser.CODE - 53)) | (1 << (EParser.DOCUMENT - 53)) | (1 << (EParser.BLOB - 53)) | (1 << (EParser.IMAGE - 53)) | (1 << (EParser.UUID - 53)) | (1 << (EParser.ITERATOR - 53)) | (1 << (EParser.CURSOR - 53)) | (1 << (EParser.HTML - 53)) | (1 << (EParser.ABSTRACT - 53)) | (1 << (EParser.ALL - 53)) | (1 << (EParser.ALWAYS - 53)) | (1 << (EParser.AND - 53)) | (1 << (EParser.ANY - 53)) | (1 << (EParser.AS - 53)) | (1 << (EParser.ASC - 53)) | (1 << (EParser.ATTR - 53)) | (1 << (EParser.ATTRIBUTE - 53)) | (1 << (EParser.ATTRIBUTES - 53)) | (1 << (EParser.BINDINGS - 53)))) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (EParser.BREAK - 85)) | (1 << (EParser.BY - 85)) | (1 << (EParser.CASE - 85)) | (1 << (EParser.CATCH - 85)) | (1 << (EParser.CATEGORY - 85)) | (1 << (EParser.CLASS - 85)) | (1 << (EParser.CONTAINS - 85)) | (1 << (EParser.DEF - 85)) | (1 << (EParser.DEFAULT - 85)) | (1 << (EParser.DEFINE - 85)) | (1 << (EParser.DELETE - 85)) | (1 << (EParser.DESC - 85)) | (1 << (EParser.DO - 85)) | (1 << (EParser.DOING - 85)) | (1 << (EParser.EACH - 85)) | (1 << (EParser.ELSE - 85)) | (1 << (EParser.ENUM - 85)) | (1 << (EParser.ENUMERATED - 85)) | (1 << (EParser.EXCEPT - 85)) | (1 << (EParser.EXECUTE - 85)) | (1 << (EParser.EXPECTING - 85)) | (1 << (EParser.EXTENDS - 85)) | (1 << (EParser.FETCH - 85)) | (1 << (EParser.FILTERED - 85)) | (1 << (EParser.FINALLY - 85)) | (1 << (EParser.FLUSH - 85)) | (1 << (EParser.FOR - 85)) | (1 << (EParser.FROM - 85)) | (1 << (EParser.GETTER - 85)) | (1 << (EParser.HAS - 85)) | (1 << (EParser.IF - 85)) | (1 << (EParser.IN - 85)))) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & ((1 << (EParser.INDEX - 117)) | (1 << (EParser.IS - 117)) | (1 << (EParser.MATCHING - 117)) | (1 << (EParser.METHOD - 117)) | (1 << (EParser.METHODS - 117)) | (1 << (EParser.MODULO - 117)) | (1 << (EParser.MUTABLE - 117)) | (1 << (EParser.NATIVE - 117)) | (1 << (EParser.NONE - 117)) | (1 << (EParser.NOT - 117)) | (1 << (EParser.NOTHING - 117)) | (1 << (EParser.NULL - 117)) | (1 << (EParser.ON - 117)) | (1 << (EParser.ONE - 117)) | (1 << (EParser.OPERATOR - 117)) | (1 << (EParser.OR - 117)) | (1 << (EParser.ORDER - 117)) | (1 << (EParser.OTHERWISE - 117)) | (1 << (EParser.PASS - 117)) | (1 << (EParser.RAISE - 117)) | (1 << (EParser.READ - 117)) | (1 << (EParser.RECEIVING - 117)) | (1 << (EParser.RESOURCE - 117)) | (1 << (EParser.RETURN - 117)) | (1 << (EParser.RETURNING - 117)) | (1 << (EParser.ROWS - 117)) | (1 << (EParser.SELF - 117)) | (1 << (EParser.SETTER - 117)) | (1 << (EParser.SINGLETON - 117)) | (1 << (EParser.SORTED - 117)) | (1 << (EParser.STORABLE - 117)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (EParser.STORE - 149)) | (1 << (EParser.SUPER - 149)) | (1 << (EParser.SWITCH - 149)) | (1 << (EParser.TEST - 149)) | (1 << (EParser.THIS - 149)) | (1 << (EParser.THROW - 149)) | (1 << (EParser.TO - 149)) | (1 << (EParser.TRY - 149)) | (1 << (EParser.VERIFYING - 149)) | (1 << (EParser.WIDGET - 149)) | (1 << (EParser.WITH - 149)) | (1 << (EParser.WHEN - 149)) | (1 << (EParser.WHERE - 149)) | (1 << (EParser.WHILE - 149)) | (1 << (EParser.WRITE - 149)) | (1 << (EParser.SYMBOL_IDENTIFIER - 149)) | (1 << (EParser.TYPE_IDENTIFIER - 149)) | (1 << (EParser.VARIABLE_IDENTIFIER - 149)))) !== 0)) {
	            this.state = 2861;
	            localctx.attributes = this.jsx_attribute();
	            this.state = 2866;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2867;
	        this.match(EParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_closing() {
	    let localctx = new Jsx_closingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, EParser.RULE_jsx_closing);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2869;
	        this.match(EParser.LT);
	        this.state = 2870;
	        this.match(EParser.SLASH);
	        this.state = 2871;
	        localctx.name = this.jsx_element_name();
	        this.state = 2872;
	        this.match(EParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_element_name() {
	    let localctx = new Jsx_element_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, EParser.RULE_jsx_element_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2874;
	        this.jsx_identifier();
	        this.state = 2879;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===EParser.DOT) {
	            this.state = 2875;
	            this.match(EParser.DOT);
	            this.state = 2876;
	            this.jsx_identifier();
	            this.state = 2881;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_identifier() {
	    let localctx = new Jsx_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, EParser.RULE_jsx_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2882;
	        this.identifier_or_keyword();
	        this.state = 2886;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,264,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2883;
	                this.nospace_hyphen_identifier_or_keyword(); 
	            }
	            this.state = 2888;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,264,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_attribute() {
	    let localctx = new Jsx_attributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, EParser.RULE_jsx_attribute);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2889;
	        localctx.name = this.jsx_identifier();
	        this.state = 2892;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===EParser.EQ) {
	            this.state = 2890;
	            this.match(EParser.EQ);
	            this.state = 2891;
	            localctx.value = this.jsx_attribute_value();
	        }

	        this.state = 2894;
	        this.ws_plus();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_attribute_value() {
	    let localctx = new Jsx_attribute_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, EParser.RULE_jsx_attribute_value);
	    try {
	        this.state = 2901;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.TEXT_LITERAL:
	            localctx = new JsxLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2896;
	            this.match(EParser.TEXT_LITERAL);
	            break;
	        case EParser.LCURL:
	            localctx = new JsxValueContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2897;
	            this.match(EParser.LCURL);
	            this.state = 2898;
	            localctx.exp = this.expression(0);
	            this.state = 2899;
	            this.match(EParser.RCURL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_children() {
	    let localctx = new Jsx_childrenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, EParser.RULE_jsx_children);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2904; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2903;
	        		this.jsx_child();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2906; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,267, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_child() {
	    let localctx = new Jsx_childContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, EParser.RULE_jsx_child);
	    var _la = 0; // Token type
	    try {
	        this.state = 2915;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.INDENT:
	        case EParser.DEDENT:
	        case EParser.LF_TAB:
	        case EParser.LF_MORE:
	        case EParser.LF:
	        case EParser.TAB:
	        case EParser.WS:
	        case EParser.COMMENT:
	        case EParser.JAVA:
	        case EParser.CSHARP:
	        case EParser.PYTHON2:
	        case EParser.PYTHON3:
	        case EParser.JAVASCRIPT:
	        case EParser.SWIFT:
	        case EParser.COLON:
	        case EParser.SEMI:
	        case EParser.COMMA:
	        case EParser.RANGE:
	        case EParser.DOT:
	        case EParser.LPAR:
	        case EParser.RPAR:
	        case EParser.LBRAK:
	        case EParser.RBRAK:
	        case EParser.QMARK:
	        case EParser.XMARK:
	        case EParser.AMP:
	        case EParser.AMP2:
	        case EParser.PIPE:
	        case EParser.PIPE2:
	        case EParser.PLUS:
	        case EParser.MINUS:
	        case EParser.STAR:
	        case EParser.SLASH:
	        case EParser.BSLASH:
	        case EParser.PERCENT:
	        case EParser.SHARP:
	        case EParser.GTE:
	        case EParser.LTE:
	        case EParser.LTGT:
	        case EParser.LTCOLONGT:
	        case EParser.EQ:
	        case EParser.XEQ:
	        case EParser.EQ2:
	        case EParser.TEQ:
	        case EParser.TILDE:
	        case EParser.LARROW:
	        case EParser.RARROW:
	        case EParser.EGT:
	        case EParser.BOOLEAN:
	        case EParser.CSS:
	        case EParser.CHARACTER:
	        case EParser.TEXT:
	        case EParser.INTEGER:
	        case EParser.DECIMAL:
	        case EParser.DATE:
	        case EParser.TIME:
	        case EParser.DATETIME:
	        case EParser.PERIOD:
	        case EParser.VERSION:
	        case EParser.METHOD_COLON:
	        case EParser.CODE:
	        case EParser.DOCUMENT:
	        case EParser.BLOB:
	        case EParser.IMAGE:
	        case EParser.UUID:
	        case EParser.ITERATOR:
	        case EParser.CURSOR:
	        case EParser.HTML:
	        case EParser.TYPE:
	        case EParser.ABSTRACT:
	        case EParser.ALL:
	        case EParser.ALWAYS:
	        case EParser.AND:
	        case EParser.ANY:
	        case EParser.AS:
	        case EParser.ASC:
	        case EParser.ATTR:
	        case EParser.ATTRIBUTE:
	        case EParser.ATTRIBUTES:
	        case EParser.BINDINGS:
	        case EParser.BREAK:
	        case EParser.BY:
	        case EParser.CASE:
	        case EParser.CATCH:
	        case EParser.CATEGORY:
	        case EParser.CLASS:
	        case EParser.CONTAINS:
	        case EParser.DEF:
	        case EParser.DEFAULT:
	        case EParser.DEFINE:
	        case EParser.DELETE:
	        case EParser.DESC:
	        case EParser.DO:
	        case EParser.DOING:
	        case EParser.EACH:
	        case EParser.ELSE:
	        case EParser.ENUM:
	        case EParser.ENUMERATED:
	        case EParser.EXCEPT:
	        case EParser.EXECUTE:
	        case EParser.EXPECTING:
	        case EParser.EXTENDS:
	        case EParser.FETCH:
	        case EParser.FILTERED:
	        case EParser.FINALLY:
	        case EParser.FLUSH:
	        case EParser.FOR:
	        case EParser.FROM:
	        case EParser.GETTER:
	        case EParser.HAS:
	        case EParser.IF:
	        case EParser.IN:
	        case EParser.INDEX:
	        case EParser.INVOKE_COLON:
	        case EParser.IS:
	        case EParser.MATCHING:
	        case EParser.METHOD:
	        case EParser.METHODS:
	        case EParser.MODULO:
	        case EParser.MUTABLE:
	        case EParser.NATIVE:
	        case EParser.NONE:
	        case EParser.NOT:
	        case EParser.NOTHING:
	        case EParser.NULL:
	        case EParser.ON:
	        case EParser.ONE:
	        case EParser.OPERATOR:
	        case EParser.OR:
	        case EParser.ORDER:
	        case EParser.OTHERWISE:
	        case EParser.PASS:
	        case EParser.RAISE:
	        case EParser.READ:
	        case EParser.RECEIVING:
	        case EParser.RESOURCE:
	        case EParser.RETURN:
	        case EParser.RETURNING:
	        case EParser.ROWS:
	        case EParser.SELF:
	        case EParser.SETTER:
	        case EParser.SINGLETON:
	        case EParser.SORTED:
	        case EParser.STORABLE:
	        case EParser.STORE:
	        case EParser.SUPER:
	        case EParser.SWITCH:
	        case EParser.TEST:
	        case EParser.THEN:
	        case EParser.THIS:
	        case EParser.THROW:
	        case EParser.TO:
	        case EParser.TRY:
	        case EParser.VERIFYING:
	        case EParser.WIDGET:
	        case EParser.WITH:
	        case EParser.WHEN:
	        case EParser.WHERE:
	        case EParser.WHILE:
	        case EParser.WRITE:
	        case EParser.BOOLEAN_LITERAL:
	        case EParser.CHAR_LITERAL:
	        case EParser.MIN_INTEGER:
	        case EParser.MAX_INTEGER:
	        case EParser.SYMBOL_IDENTIFIER:
	        case EParser.TYPE_IDENTIFIER:
	        case EParser.VARIABLE_IDENTIFIER:
	        case EParser.NATIVE_IDENTIFIER:
	        case EParser.DOLLAR_IDENTIFIER:
	        case EParser.ARONDBASE_IDENTIFIER:
	        case EParser.TEXT_LITERAL:
	        case EParser.UUID_LITERAL:
	        case EParser.INTEGER_LITERAL:
	        case EParser.HEXA_LITERAL:
	        case EParser.DECIMAL_LITERAL:
	        case EParser.DATETIME_LITERAL:
	        case EParser.TIME_LITERAL:
	        case EParser.DATE_LITERAL:
	        case EParser.PERIOD_LITERAL:
	        case EParser.VERSION_LITERAL:
	        case EParser.JSX_TEXT:
	            localctx = new JsxTextContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2908;
	            localctx.text = this.jsx_text();
	            break;
	        case EParser.LT:
	            localctx = new JsxChildContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2909;
	            localctx.jsx = this.jsx_element();
	            break;
	        case EParser.LCURL:
	            localctx = new JsxCodeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2910;
	            this.match(EParser.LCURL);
	            this.state = 2912;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (EParser.LPAR - 20)) | (1 << (EParser.LBRAK - 20)) | (1 << (EParser.LCURL - 20)) | (1 << (EParser.MINUS - 20)) | (1 << (EParser.LT - 20)) | (1 << (EParser.LTGT - 20)) | (1 << (EParser.LTCOLONGT - 20)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (EParser.METHOD_COLON - 64)) | (1 << (EParser.CODE - 64)) | (1 << (EParser.DOCUMENT - 64)) | (1 << (EParser.BLOB - 64)) | (1 << (EParser.TYPE - 64)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (EParser.EXECUTE - 104)) | (1 << (EParser.FETCH - 104)) | (1 << (EParser.INVOKE_COLON - 104)) | (1 << (EParser.MUTABLE - 104)) | (1 << (EParser.NOT - 104)) | (1 << (EParser.NOTHING - 104)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (EParser.READ - 138)) | (1 << (EParser.SELF - 138)) | (1 << (EParser.SORTED - 138)) | (1 << (EParser.SUPER - 138)) | (1 << (EParser.THIS - 138)) | (1 << (EParser.BOOLEAN_LITERAL - 138)) | (1 << (EParser.CHAR_LITERAL - 138)) | (1 << (EParser.MIN_INTEGER - 138)) | (1 << (EParser.MAX_INTEGER - 138)) | (1 << (EParser.SYMBOL_IDENTIFIER - 138)))) !== 0) || ((((_la - 170)) & ~0x1f) == 0 && ((1 << (_la - 170)) & ((1 << (EParser.TYPE_IDENTIFIER - 170)) | (1 << (EParser.VARIABLE_IDENTIFIER - 170)) | (1 << (EParser.TEXT_LITERAL - 170)) | (1 << (EParser.UUID_LITERAL - 170)) | (1 << (EParser.INTEGER_LITERAL - 170)) | (1 << (EParser.HEXA_LITERAL - 170)) | (1 << (EParser.DECIMAL_LITERAL - 170)) | (1 << (EParser.DATETIME_LITERAL - 170)) | (1 << (EParser.TIME_LITERAL - 170)) | (1 << (EParser.DATE_LITERAL - 170)) | (1 << (EParser.PERIOD_LITERAL - 170)) | (1 << (EParser.VERSION_LITERAL - 170)))) !== 0)) {
	                this.state = 2911;
	                localctx.exp = this.expression(0);
	            }

	            this.state = 2914;
	            this.match(EParser.RCURL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_text() {
	    let localctx = new Jsx_textContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, EParser.RULE_jsx_text);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2918; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2917;
	        		this.jsx_char();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2920; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,270, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsx_char() {
	    let localctx = new Jsx_charContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, EParser.RULE_jsx_char);
	    var _la = 0; // Token type
	    try {
	        this.state = 2924;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,271,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2922;
	            _la = this._input.LA(1);
	            if(_la<=0 || ((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (EParser.LCURL - 24)) | (1 << (EParser.RCURL - 24)) | (1 << (EParser.GT - 24)) | (1 << (EParser.LT - 24)))) !== 0)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2923;
	            this.match(EParser.JSX_TEXT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	css_expression() {
	    let localctx = new Css_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, EParser.RULE_css_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2926;
	        this.match(EParser.LCURL);
	        this.state = 2928; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2927;
	            localctx.field = this.css_field();
	            this.state = 2930; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 9)) & ~0x1f) == 0 && ((1 << (_la - 9)) & ((1 << (EParser.JAVA - 9)) | (1 << (EParser.CSHARP - 9)) | (1 << (EParser.PYTHON2 - 9)) | (1 << (EParser.PYTHON3 - 9)) | (1 << (EParser.JAVASCRIPT - 9)) | (1 << (EParser.SWIFT - 9)) | (1 << (EParser.MINUS - 9)))) !== 0) || ((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (EParser.BOOLEAN - 53)) | (1 << (EParser.CHARACTER - 53)) | (1 << (EParser.TEXT - 53)) | (1 << (EParser.INTEGER - 53)) | (1 << (EParser.DECIMAL - 53)) | (1 << (EParser.DATE - 53)) | (1 << (EParser.TIME - 53)) | (1 << (EParser.DATETIME - 53)) | (1 << (EParser.PERIOD - 53)) | (1 << (EParser.VERSION - 53)) | (1 << (EParser.CODE - 53)) | (1 << (EParser.DOCUMENT - 53)) | (1 << (EParser.BLOB - 53)) | (1 << (EParser.IMAGE - 53)) | (1 << (EParser.UUID - 53)) | (1 << (EParser.ITERATOR - 53)) | (1 << (EParser.CURSOR - 53)) | (1 << (EParser.HTML - 53)) | (1 << (EParser.ABSTRACT - 53)) | (1 << (EParser.ALL - 53)) | (1 << (EParser.ALWAYS - 53)) | (1 << (EParser.AND - 53)) | (1 << (EParser.ANY - 53)) | (1 << (EParser.AS - 53)) | (1 << (EParser.ASC - 53)) | (1 << (EParser.ATTR - 53)) | (1 << (EParser.ATTRIBUTE - 53)) | (1 << (EParser.ATTRIBUTES - 53)) | (1 << (EParser.BINDINGS - 53)))) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (EParser.BREAK - 85)) | (1 << (EParser.BY - 85)) | (1 << (EParser.CASE - 85)) | (1 << (EParser.CATCH - 85)) | (1 << (EParser.CATEGORY - 85)) | (1 << (EParser.CLASS - 85)) | (1 << (EParser.CONTAINS - 85)) | (1 << (EParser.DEF - 85)) | (1 << (EParser.DEFAULT - 85)) | (1 << (EParser.DEFINE - 85)) | (1 << (EParser.DELETE - 85)) | (1 << (EParser.DESC - 85)) | (1 << (EParser.DO - 85)) | (1 << (EParser.DOING - 85)) | (1 << (EParser.EACH - 85)) | (1 << (EParser.ELSE - 85)) | (1 << (EParser.ENUM - 85)) | (1 << (EParser.ENUMERATED - 85)) | (1 << (EParser.EXCEPT - 85)) | (1 << (EParser.EXECUTE - 85)) | (1 << (EParser.EXPECTING - 85)) | (1 << (EParser.EXTENDS - 85)) | (1 << (EParser.FETCH - 85)) | (1 << (EParser.FILTERED - 85)) | (1 << (EParser.FINALLY - 85)) | (1 << (EParser.FLUSH - 85)) | (1 << (EParser.FOR - 85)) | (1 << (EParser.FROM - 85)) | (1 << (EParser.GETTER - 85)) | (1 << (EParser.HAS - 85)) | (1 << (EParser.IF - 85)) | (1 << (EParser.IN - 85)))) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & ((1 << (EParser.INDEX - 117)) | (1 << (EParser.IS - 117)) | (1 << (EParser.MATCHING - 117)) | (1 << (EParser.METHOD - 117)) | (1 << (EParser.METHODS - 117)) | (1 << (EParser.MODULO - 117)) | (1 << (EParser.MUTABLE - 117)) | (1 << (EParser.NATIVE - 117)) | (1 << (EParser.NONE - 117)) | (1 << (EParser.NOT - 117)) | (1 << (EParser.NOTHING - 117)) | (1 << (EParser.NULL - 117)) | (1 << (EParser.ON - 117)) | (1 << (EParser.ONE - 117)) | (1 << (EParser.OPERATOR - 117)) | (1 << (EParser.OR - 117)) | (1 << (EParser.ORDER - 117)) | (1 << (EParser.OTHERWISE - 117)) | (1 << (EParser.PASS - 117)) | (1 << (EParser.RAISE - 117)) | (1 << (EParser.READ - 117)) | (1 << (EParser.RECEIVING - 117)) | (1 << (EParser.RESOURCE - 117)) | (1 << (EParser.RETURN - 117)) | (1 << (EParser.RETURNING - 117)) | (1 << (EParser.ROWS - 117)) | (1 << (EParser.SELF - 117)) | (1 << (EParser.SETTER - 117)) | (1 << (EParser.SINGLETON - 117)) | (1 << (EParser.SORTED - 117)) | (1 << (EParser.STORABLE - 117)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (EParser.STORE - 149)) | (1 << (EParser.SUPER - 149)) | (1 << (EParser.SWITCH - 149)) | (1 << (EParser.TEST - 149)) | (1 << (EParser.THIS - 149)) | (1 << (EParser.THROW - 149)) | (1 << (EParser.TO - 149)) | (1 << (EParser.TRY - 149)) | (1 << (EParser.VERIFYING - 149)) | (1 << (EParser.WIDGET - 149)) | (1 << (EParser.WITH - 149)) | (1 << (EParser.WHEN - 149)) | (1 << (EParser.WHERE - 149)) | (1 << (EParser.WHILE - 149)) | (1 << (EParser.WRITE - 149)) | (1 << (EParser.SYMBOL_IDENTIFIER - 149)) | (1 << (EParser.TYPE_IDENTIFIER - 149)) | (1 << (EParser.VARIABLE_IDENTIFIER - 149)))) !== 0));
	        this.state = 2932;
	        this.match(EParser.RCURL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	css_field() {
	    let localctx = new Css_fieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, EParser.RULE_css_field);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2934;
	        localctx.name = this.css_identifier(0);
	        this.state = 2935;
	        this.match(EParser.COLON);
	        this.state = 2936;
	        localctx.value = this.css_value();
	        this.state = 2937;
	        this.match(EParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	css_identifier(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Css_identifierContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 516;
	    this.enterRecursionRule(localctx, 516, EParser.RULE_css_identifier, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2943;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EParser.JAVA:
	        case EParser.CSHARP:
	        case EParser.PYTHON2:
	        case EParser.PYTHON3:
	        case EParser.JAVASCRIPT:
	        case EParser.SWIFT:
	        case EParser.BOOLEAN:
	        case EParser.CHARACTER:
	        case EParser.TEXT:
	        case EParser.INTEGER:
	        case EParser.DECIMAL:
	        case EParser.DATE:
	        case EParser.TIME:
	        case EParser.DATETIME:
	        case EParser.PERIOD:
	        case EParser.VERSION:
	        case EParser.CODE:
	        case EParser.DOCUMENT:
	        case EParser.BLOB:
	        case EParser.IMAGE:
	        case EParser.UUID:
	        case EParser.ITERATOR:
	        case EParser.CURSOR:
	        case EParser.HTML:
	        case EParser.ABSTRACT:
	        case EParser.ALL:
	        case EParser.ALWAYS:
	        case EParser.AND:
	        case EParser.ANY:
	        case EParser.AS:
	        case EParser.ASC:
	        case EParser.ATTR:
	        case EParser.ATTRIBUTE:
	        case EParser.ATTRIBUTES:
	        case EParser.BINDINGS:
	        case EParser.BREAK:
	        case EParser.BY:
	        case EParser.CASE:
	        case EParser.CATCH:
	        case EParser.CATEGORY:
	        case EParser.CLASS:
	        case EParser.CONTAINS:
	        case EParser.DEF:
	        case EParser.DEFAULT:
	        case EParser.DEFINE:
	        case EParser.DELETE:
	        case EParser.DESC:
	        case EParser.DO:
	        case EParser.DOING:
	        case EParser.EACH:
	        case EParser.ELSE:
	        case EParser.ENUM:
	        case EParser.ENUMERATED:
	        case EParser.EXCEPT:
	        case EParser.EXECUTE:
	        case EParser.EXPECTING:
	        case EParser.EXTENDS:
	        case EParser.FETCH:
	        case EParser.FILTERED:
	        case EParser.FINALLY:
	        case EParser.FLUSH:
	        case EParser.FOR:
	        case EParser.FROM:
	        case EParser.GETTER:
	        case EParser.HAS:
	        case EParser.IF:
	        case EParser.IN:
	        case EParser.INDEX:
	        case EParser.IS:
	        case EParser.MATCHING:
	        case EParser.METHOD:
	        case EParser.METHODS:
	        case EParser.MODULO:
	        case EParser.MUTABLE:
	        case EParser.NATIVE:
	        case EParser.NONE:
	        case EParser.NOT:
	        case EParser.NOTHING:
	        case EParser.NULL:
	        case EParser.ON:
	        case EParser.ONE:
	        case EParser.OPERATOR:
	        case EParser.OR:
	        case EParser.ORDER:
	        case EParser.OTHERWISE:
	        case EParser.PASS:
	        case EParser.RAISE:
	        case EParser.READ:
	        case EParser.RECEIVING:
	        case EParser.RESOURCE:
	        case EParser.RETURN:
	        case EParser.RETURNING:
	        case EParser.ROWS:
	        case EParser.SELF:
	        case EParser.SETTER:
	        case EParser.SINGLETON:
	        case EParser.SORTED:
	        case EParser.STORABLE:
	        case EParser.STORE:
	        case EParser.SUPER:
	        case EParser.SWITCH:
	        case EParser.TEST:
	        case EParser.THIS:
	        case EParser.THROW:
	        case EParser.TO:
	        case EParser.TRY:
	        case EParser.VERIFYING:
	        case EParser.WIDGET:
	        case EParser.WITH:
	        case EParser.WHEN:
	        case EParser.WHERE:
	        case EParser.WHILE:
	        case EParser.WRITE:
	        case EParser.SYMBOL_IDENTIFIER:
	        case EParser.TYPE_IDENTIFIER:
	        case EParser.VARIABLE_IDENTIFIER:
	            this.state = 2940;
	            this.identifier_or_keyword();
	            break;
	        case EParser.MINUS:
	            this.state = 2941;
	            this.match(EParser.MINUS);
	            this.state = 2942;
	            this.nospace_identifier_or_keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2953;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,275,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Css_identifierContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_css_identifier);
	                this.state = 2945;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2947; 
	                this._errHandler.sync(this);
	                let _alt = 1;
	                do {
	                	switch (_alt) {
	                	case 1:
	                		this.state = 2946;
	                		this.nospace_hyphen_identifier_or_keyword();
	                		break;
	                	default:
	                		throw new antlr4.error.NoViableAltException(this);
	                	}
	                	this.state = 2949; 
	                	this._errHandler.sync(this);
	                	_alt = this._interp.adaptivePredict(this._input,274, this._ctx);
	                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER ); 
	            }
	            this.state = 2955;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,275,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	css_value() {
	    let localctx = new Css_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, EParser.RULE_css_value);
	    try {
	        this.state = 2961;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,276,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CssValueContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2956;
	            this.match(EParser.LCURL);
	            this.state = 2957;
	            localctx.exp = this.expression(0);
	            this.state = 2958;
	            this.match(EParser.RCURL);
	            break;

	        case 2:
	            localctx = new CssTextContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2960;
	            localctx.text = this.css_text();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	css_text() {
	    let localctx = new Css_textContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, EParser.RULE_css_text);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2964; 
	        this._errHandler.sync(this);
	        let _alt = 1+1;
	        do {
	        	switch (_alt) {
	        	case 1+1:
	        		this.state = 2963;
	        		_la = this._input.LA(1);
	        		if(_la<=0 || _la===EParser.SEMI) {
	        		this._errHandler.recoverInline(this);
	        		}
	        		else {
	        			this._errHandler.reportMatch(this);
	        		    this.consume();
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2966; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,277, this._ctx);
	        } while ( _alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

EParser.EOF = antlr4.Token.EOF;
EParser.INDENT = 1;
EParser.DEDENT = 2;
EParser.LF_TAB = 3;
EParser.LF_MORE = 4;
EParser.LF = 5;
EParser.TAB = 6;
EParser.WS = 7;
EParser.COMMENT = 8;
EParser.JAVA = 9;
EParser.CSHARP = 10;
EParser.PYTHON2 = 11;
EParser.PYTHON3 = 12;
EParser.JAVASCRIPT = 13;
EParser.SWIFT = 14;
EParser.COLON = 15;
EParser.SEMI = 16;
EParser.COMMA = 17;
EParser.RANGE = 18;
EParser.DOT = 19;
EParser.LPAR = 20;
EParser.RPAR = 21;
EParser.LBRAK = 22;
EParser.RBRAK = 23;
EParser.LCURL = 24;
EParser.RCURL = 25;
EParser.QMARK = 26;
EParser.XMARK = 27;
EParser.AMP = 28;
EParser.AMP2 = 29;
EParser.PIPE = 30;
EParser.PIPE2 = 31;
EParser.PLUS = 32;
EParser.MINUS = 33;
EParser.STAR = 34;
EParser.SLASH = 35;
EParser.BSLASH = 36;
EParser.PERCENT = 37;
EParser.SHARP = 38;
EParser.GT = 39;
EParser.GTE = 40;
EParser.LT = 41;
EParser.LTE = 42;
EParser.LTGT = 43;
EParser.LTCOLONGT = 44;
EParser.EQ = 45;
EParser.XEQ = 46;
EParser.EQ2 = 47;
EParser.TEQ = 48;
EParser.TILDE = 49;
EParser.LARROW = 50;
EParser.RARROW = 51;
EParser.EGT = 52;
EParser.BOOLEAN = 53;
EParser.CSS = 54;
EParser.CHARACTER = 55;
EParser.TEXT = 56;
EParser.INTEGER = 57;
EParser.DECIMAL = 58;
EParser.DATE = 59;
EParser.TIME = 60;
EParser.DATETIME = 61;
EParser.PERIOD = 62;
EParser.VERSION = 63;
EParser.METHOD_COLON = 64;
EParser.CODE = 65;
EParser.DOCUMENT = 66;
EParser.BLOB = 67;
EParser.IMAGE = 68;
EParser.UUID = 69;
EParser.ITERATOR = 70;
EParser.CURSOR = 71;
EParser.HTML = 72;
EParser.TYPE = 73;
EParser.ABSTRACT = 74;
EParser.ALL = 75;
EParser.ALWAYS = 76;
EParser.AND = 77;
EParser.ANY = 78;
EParser.AS = 79;
EParser.ASC = 80;
EParser.ATTR = 81;
EParser.ATTRIBUTE = 82;
EParser.ATTRIBUTES = 83;
EParser.BINDINGS = 84;
EParser.BREAK = 85;
EParser.BY = 86;
EParser.CASE = 87;
EParser.CATCH = 88;
EParser.CATEGORY = 89;
EParser.CLASS = 90;
EParser.CONTAINS = 91;
EParser.DEF = 92;
EParser.DEFAULT = 93;
EParser.DEFINE = 94;
EParser.DELETE = 95;
EParser.DESC = 96;
EParser.DO = 97;
EParser.DOING = 98;
EParser.EACH = 99;
EParser.ELSE = 100;
EParser.ENUM = 101;
EParser.ENUMERATED = 102;
EParser.EXCEPT = 103;
EParser.EXECUTE = 104;
EParser.EXPECTING = 105;
EParser.EXTENDS = 106;
EParser.FETCH = 107;
EParser.FILTERED = 108;
EParser.FINALLY = 109;
EParser.FLUSH = 110;
EParser.FOR = 111;
EParser.FROM = 112;
EParser.GETTER = 113;
EParser.HAS = 114;
EParser.IF = 115;
EParser.IN = 116;
EParser.INDEX = 117;
EParser.INVOKE_COLON = 118;
EParser.IS = 119;
EParser.MATCHING = 120;
EParser.METHOD = 121;
EParser.METHODS = 122;
EParser.MODULO = 123;
EParser.MUTABLE = 124;
EParser.NATIVE = 125;
EParser.NONE = 126;
EParser.NOT = 127;
EParser.NOTHING = 128;
EParser.NULL = 129;
EParser.ON = 130;
EParser.ONE = 131;
EParser.OPERATOR = 132;
EParser.OR = 133;
EParser.ORDER = 134;
EParser.OTHERWISE = 135;
EParser.PASS = 136;
EParser.RAISE = 137;
EParser.READ = 138;
EParser.RECEIVING = 139;
EParser.RESOURCE = 140;
EParser.RETURN = 141;
EParser.RETURNING = 142;
EParser.ROWS = 143;
EParser.SELF = 144;
EParser.SETTER = 145;
EParser.SINGLETON = 146;
EParser.SORTED = 147;
EParser.STORABLE = 148;
EParser.STORE = 149;
EParser.SUPER = 150;
EParser.SWITCH = 151;
EParser.TEST = 152;
EParser.THEN = 153;
EParser.THIS = 154;
EParser.THROW = 155;
EParser.TO = 156;
EParser.TRY = 157;
EParser.VERIFYING = 158;
EParser.WIDGET = 159;
EParser.WITH = 160;
EParser.WHEN = 161;
EParser.WHERE = 162;
EParser.WHILE = 163;
EParser.WRITE = 164;
EParser.BOOLEAN_LITERAL = 165;
EParser.CHAR_LITERAL = 166;
EParser.MIN_INTEGER = 167;
EParser.MAX_INTEGER = 168;
EParser.SYMBOL_IDENTIFIER = 169;
EParser.TYPE_IDENTIFIER = 170;
EParser.VARIABLE_IDENTIFIER = 171;
EParser.NATIVE_IDENTIFIER = 172;
EParser.DOLLAR_IDENTIFIER = 173;
EParser.ARONDBASE_IDENTIFIER = 174;
EParser.TEXT_LITERAL = 175;
EParser.UUID_LITERAL = 176;
EParser.INTEGER_LITERAL = 177;
EParser.HEXA_LITERAL = 178;
EParser.DECIMAL_LITERAL = 179;
EParser.DATETIME_LITERAL = 180;
EParser.TIME_LITERAL = 181;
EParser.DATE_LITERAL = 182;
EParser.PERIOD_LITERAL = 183;
EParser.VERSION_LITERAL = 184;
EParser.JSX_TEXT = 185;

EParser.RULE_enum_category_declaration = 0;
EParser.RULE_enum_native_declaration = 1;
EParser.RULE_native_symbol = 2;
EParser.RULE_category_symbol = 3;
EParser.RULE_attribute_declaration = 4;
EParser.RULE_concrete_widget_declaration = 5;
EParser.RULE_native_widget_declaration = 6;
EParser.RULE_concrete_category_declaration = 7;
EParser.RULE_singleton_category_declaration = 8;
EParser.RULE_derived_list = 9;
EParser.RULE_operator_method_declaration = 10;
EParser.RULE_setter_method_declaration = 11;
EParser.RULE_native_setter_declaration = 12;
EParser.RULE_getter_method_declaration = 13;
EParser.RULE_native_getter_declaration = 14;
EParser.RULE_native_category_declaration = 15;
EParser.RULE_native_resource_declaration = 16;
EParser.RULE_native_category_bindings = 17;
EParser.RULE_native_category_binding_list = 18;
EParser.RULE_attribute_list = 19;
EParser.RULE_abstract_method_declaration = 20;
EParser.RULE_concrete_method_declaration = 21;
EParser.RULE_native_method_declaration = 22;
EParser.RULE_test_method_declaration = 23;
EParser.RULE_assertion = 24;
EParser.RULE_full_argument_list = 25;
EParser.RULE_typed_argument = 26;
EParser.RULE_statement = 27;
EParser.RULE_flush_statement = 28;
EParser.RULE_store_statement = 29;
EParser.RULE_method_call_statement = 30;
EParser.RULE_with_resource_statement = 31;
EParser.RULE_with_singleton_statement = 32;
EParser.RULE_switch_statement = 33;
EParser.RULE_switch_case_statement = 34;
EParser.RULE_for_each_statement = 35;
EParser.RULE_do_while_statement = 36;
EParser.RULE_while_statement = 37;
EParser.RULE_if_statement = 38;
EParser.RULE_else_if_statement_list = 39;
EParser.RULE_raise_statement = 40;
EParser.RULE_try_statement = 41;
EParser.RULE_catch_statement = 42;
EParser.RULE_break_statement = 43;
EParser.RULE_return_statement = 44;
EParser.RULE_expression = 45;
EParser.RULE_filter_expression = 46;
EParser.RULE_unresolved_expression = 47;
EParser.RULE_unresolved_selector = 48;
EParser.RULE_invocation_expression = 49;
EParser.RULE_invocation_trailer = 50;
EParser.RULE_selectable_expression = 51;
EParser.RULE_instance_expression = 52;
EParser.RULE_instance_selector = 53;
EParser.RULE_mutable_instance_expression = 54;
EParser.RULE_document_expression = 55;
EParser.RULE_blob_expression = 56;
EParser.RULE_constructor_expression = 57;
EParser.RULE_write_statement = 58;
EParser.RULE_ambiguous_expression = 59;
EParser.RULE_filtered_list_suffix = 60;
EParser.RULE_fetch_expression = 61;
EParser.RULE_fetch_statement = 62;
EParser.RULE_read_statement = 63;
EParser.RULE_sorted_expression = 64;
EParser.RULE_argument_assignment_list = 65;
EParser.RULE_with_argument_assignment_list = 66;
EParser.RULE_argument_assignment = 67;
EParser.RULE_assign_instance_statement = 68;
EParser.RULE_child_instance = 69;
EParser.RULE_assign_tuple_statement = 70;
EParser.RULE_lfs = 71;
EParser.RULE_lfp = 72;
EParser.RULE_ws_plus = 73;
EParser.RULE_indent = 74;
EParser.RULE_dedent = 75;
EParser.RULE_type_literal = 76;
EParser.RULE_null_literal = 77;
EParser.RULE_repl = 78;
EParser.RULE_declaration_list = 79;
EParser.RULE_declarations = 80;
EParser.RULE_declaration = 81;
EParser.RULE_annotation_constructor = 82;
EParser.RULE_annotation_identifier = 83;
EParser.RULE_annotation_argument = 84;
EParser.RULE_annotation_argument_name = 85;
EParser.RULE_annotation_argument_value = 86;
EParser.RULE_resource_declaration = 87;
EParser.RULE_enum_declaration = 88;
EParser.RULE_native_symbol_list = 89;
EParser.RULE_category_symbol_list = 90;
EParser.RULE_symbol_list = 91;
EParser.RULE_attribute_constraint = 92;
EParser.RULE_list_literal = 93;
EParser.RULE_set_literal = 94;
EParser.RULE_expression_list = 95;
EParser.RULE_range_literal = 96;
EParser.RULE_typedef = 97;
EParser.RULE_primary_type = 98;
EParser.RULE_native_type = 99;
EParser.RULE_category_type = 100;
EParser.RULE_mutable_category_type = 101;
EParser.RULE_code_type = 102;
EParser.RULE_category_declaration = 103;
EParser.RULE_widget_declaration = 104;
EParser.RULE_type_identifier_list = 105;
EParser.RULE_method_identifier = 106;
EParser.RULE_identifier_or_keyword = 107;
EParser.RULE_nospace_hyphen_identifier_or_keyword = 108;
EParser.RULE_nospace_identifier_or_keyword = 109;
EParser.RULE_identifier = 110;
EParser.RULE_member_identifier = 111;
EParser.RULE_variable_identifier = 112;
EParser.RULE_attribute_identifier = 113;
EParser.RULE_type_identifier = 114;
EParser.RULE_symbol_identifier = 115;
EParser.RULE_argument_list = 116;
EParser.RULE_argument = 117;
EParser.RULE_operator_argument = 118;
EParser.RULE_named_argument = 119;
EParser.RULE_code_argument = 120;
EParser.RULE_category_or_any_type = 121;
EParser.RULE_any_type = 122;
EParser.RULE_member_method_declaration_list = 123;
EParser.RULE_member_method_declaration = 124;
EParser.RULE_native_member_method_declaration_list = 125;
EParser.RULE_native_member_method_declaration = 126;
EParser.RULE_native_category_binding = 127;
EParser.RULE_python_category_binding = 128;
EParser.RULE_python_module = 129;
EParser.RULE_javascript_category_binding = 130;
EParser.RULE_javascript_module = 131;
EParser.RULE_variable_identifier_list = 132;
EParser.RULE_attribute_identifier_list = 133;
EParser.RULE_method_declaration = 134;
EParser.RULE_comment_statement = 135;
EParser.RULE_native_statement_list = 136;
EParser.RULE_native_statement = 137;
EParser.RULE_python_native_statement = 138;
EParser.RULE_javascript_native_statement = 139;
EParser.RULE_statement_list = 140;
EParser.RULE_assertion_list = 141;
EParser.RULE_switch_case_statement_list = 142;
EParser.RULE_catch_statement_list = 143;
EParser.RULE_literal_collection = 144;
EParser.RULE_atomic_literal = 145;
EParser.RULE_literal_list_literal = 146;
EParser.RULE_this_expression = 147;
EParser.RULE_super_expression = 148;
EParser.RULE_parenthesis_expression = 149;
EParser.RULE_literal_expression = 150;
EParser.RULE_collection_literal = 151;
EParser.RULE_tuple_literal = 152;
EParser.RULE_dict_literal = 153;
EParser.RULE_document_literal = 154;
EParser.RULE_expression_tuple = 155;
EParser.RULE_doc_entry_list = 156;
EParser.RULE_doc_entry = 157;
EParser.RULE_doc_key = 158;
EParser.RULE_dict_entry_list = 159;
EParser.RULE_dict_entry = 160;
EParser.RULE_dict_key = 161;
EParser.RULE_slice_arguments = 162;
EParser.RULE_assign_variable_statement = 163;
EParser.RULE_assignable_instance = 164;
EParser.RULE_is_expression = 165;
EParser.RULE_arrow_expression = 166;
EParser.RULE_arrow_prefix = 167;
EParser.RULE_arrow_args = 168;
EParser.RULE_sorted_key = 169;
EParser.RULE_read_blob_expression = 170;
EParser.RULE_read_all_expression = 171;
EParser.RULE_read_one_expression = 172;
EParser.RULE_order_by_list = 173;
EParser.RULE_order_by = 174;
EParser.RULE_operator = 175;
EParser.RULE_keyword = 176;
EParser.RULE_new_token = 177;
EParser.RULE_key_token = 178;
EParser.RULE_module_token = 179;
EParser.RULE_value_token = 180;
EParser.RULE_symbols_token = 181;
EParser.RULE_assign = 182;
EParser.RULE_multiply = 183;
EParser.RULE_divide = 184;
EParser.RULE_idivide = 185;
EParser.RULE_modulo = 186;
EParser.RULE_javascript_statement = 187;
EParser.RULE_javascript_expression = 188;
EParser.RULE_javascript_primary_expression = 189;
EParser.RULE_javascript_this_expression = 190;
EParser.RULE_javascript_new_expression = 191;
EParser.RULE_javascript_selector_expression = 192;
EParser.RULE_javascript_method_expression = 193;
EParser.RULE_javascript_arguments = 194;
EParser.RULE_javascript_item_expression = 195;
EParser.RULE_javascript_parenthesis_expression = 196;
EParser.RULE_javascript_identifier_expression = 197;
EParser.RULE_javascript_literal_expression = 198;
EParser.RULE_javascript_identifier = 199;
EParser.RULE_python_statement = 200;
EParser.RULE_python_expression = 201;
EParser.RULE_python_primary_expression = 202;
EParser.RULE_python_self_expression = 203;
EParser.RULE_python_selector_expression = 204;
EParser.RULE_python_method_expression = 205;
EParser.RULE_python_argument_list = 206;
EParser.RULE_python_ordinal_argument_list = 207;
EParser.RULE_python_named_argument_list = 208;
EParser.RULE_python_parenthesis_expression = 209;
EParser.RULE_python_identifier_expression = 210;
EParser.RULE_python_literal_expression = 211;
EParser.RULE_python_identifier = 212;
EParser.RULE_java_statement = 213;
EParser.RULE_java_expression = 214;
EParser.RULE_java_primary_expression = 215;
EParser.RULE_java_this_expression = 216;
EParser.RULE_java_new_expression = 217;
EParser.RULE_java_selector_expression = 218;
EParser.RULE_java_method_expression = 219;
EParser.RULE_java_arguments = 220;
EParser.RULE_java_item_expression = 221;
EParser.RULE_java_parenthesis_expression = 222;
EParser.RULE_java_identifier_expression = 223;
EParser.RULE_java_class_identifier_expression = 224;
EParser.RULE_java_literal_expression = 225;
EParser.RULE_java_identifier = 226;
EParser.RULE_csharp_statement = 227;
EParser.RULE_csharp_expression = 228;
EParser.RULE_csharp_primary_expression = 229;
EParser.RULE_csharp_this_expression = 230;
EParser.RULE_csharp_new_expression = 231;
EParser.RULE_csharp_selector_expression = 232;
EParser.RULE_csharp_method_expression = 233;
EParser.RULE_csharp_arguments = 234;
EParser.RULE_csharp_item_expression = 235;
EParser.RULE_csharp_parenthesis_expression = 236;
EParser.RULE_csharp_identifier_expression = 237;
EParser.RULE_csharp_literal_expression = 238;
EParser.RULE_csharp_identifier = 239;
EParser.RULE_jsx_expression = 240;
EParser.RULE_jsx_element = 241;
EParser.RULE_jsx_fragment = 242;
EParser.RULE_jsx_fragment_start = 243;
EParser.RULE_jsx_fragment_end = 244;
EParser.RULE_jsx_self_closing = 245;
EParser.RULE_jsx_opening = 246;
EParser.RULE_jsx_closing = 247;
EParser.RULE_jsx_element_name = 248;
EParser.RULE_jsx_identifier = 249;
EParser.RULE_jsx_attribute = 250;
EParser.RULE_jsx_attribute_value = 251;
EParser.RULE_jsx_children = 252;
EParser.RULE_jsx_child = 253;
EParser.RULE_jsx_text = 254;
EParser.RULE_jsx_char = 255;
EParser.RULE_css_expression = 256;
EParser.RULE_css_field = 257;
EParser.RULE_css_identifier = 258;
EParser.RULE_css_value = 259;
EParser.RULE_css_text = 260;

class Enum_category_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_enum_category_declaration;
        this.name = null; // Type_identifierContext
        this.derived = null; // Type_identifierContext
        this.attrs = null; // Attribute_listContext
        this.symbols = null; // Category_symbol_listContext
    }

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	ENUMERATED() {
	    return this.getToken(EParser.ENUMERATED, 0);
	};

	symbols_token() {
	    return this.getTypedRuleContext(Symbols_tokenContext,0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	type_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Type_identifierContext,i);
	    }
	};

	category_symbol_list() {
	    return this.getTypedRuleContext(Category_symbol_listContext,0);
	};

	CATEGORY() {
	    return this.getToken(EParser.CATEGORY, 0);
	};

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	COMMA() {
	    return this.getToken(EParser.COMMA, 0);
	};

	AND() {
	    return this.getToken(EParser.AND, 0);
	};

	attribute_list() {
	    return this.getTypedRuleContext(Attribute_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterEnum_category_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitEnum_category_declaration(this);
		}
	}


}



class Enum_native_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_enum_native_declaration;
        this.name = null; // Type_identifierContext
        this.typ = null; // Native_typeContext
        this.symbols = null; // Native_symbol_listContext
    }

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	ENUMERATED() {
	    return this.getToken(EParser.ENUMERATED, 0);
	};

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	symbols_token() {
	    return this.getTypedRuleContext(Symbols_tokenContext,0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	native_type() {
	    return this.getTypedRuleContext(Native_typeContext,0);
	};

	native_symbol_list() {
	    return this.getTypedRuleContext(Native_symbol_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterEnum_native_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitEnum_native_declaration(this);
		}
	}


}



class Native_symbolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_native_symbol;
        this.name = null; // Symbol_identifierContext
        this.exp = null; // ExpressionContext
    }

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	value_token() {
	    return this.getTypedRuleContext(Value_tokenContext,0);
	};

	symbol_identifier() {
	    return this.getTypedRuleContext(Symbol_identifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNative_symbol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNative_symbol(this);
		}
	}


}



class Category_symbolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_category_symbol;
        this.name = null; // Symbol_identifierContext
        this.args = null; // With_argument_assignment_listContext
        this.arg = null; // Argument_assignmentContext
    }

	symbol_identifier() {
	    return this.getTypedRuleContext(Symbol_identifierContext,0);
	};

	with_argument_assignment_list() {
	    return this.getTypedRuleContext(With_argument_assignment_listContext,0);
	};

	AND() {
	    return this.getToken(EParser.AND, 0);
	};

	argument_assignment() {
	    return this.getTypedRuleContext(Argument_assignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCategory_symbol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCategory_symbol(this);
		}
	}


}



class Attribute_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_attribute_declaration;
        this.name = null; // Attribute_identifierContext
        this.typ = null; // TypedefContext
        this.match = null; // Attribute_constraintContext
        this.indices = null; // Variable_identifier_listContext
        this.index = null; // Variable_identifierContext
    }

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	ATTRIBUTE() {
	    return this.getToken(EParser.ATTRIBUTE, 0);
	};

	attribute_identifier() {
	    return this.getTypedRuleContext(Attribute_identifierContext,0);
	};

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	STORABLE() {
	    return this.getToken(EParser.STORABLE, 0);
	};

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	INDEX() {
	    return this.getToken(EParser.INDEX, 0);
	};

	attribute_constraint() {
	    return this.getTypedRuleContext(Attribute_constraintContext,0);
	};

	variable_identifier_list() {
	    return this.getTypedRuleContext(Variable_identifier_listContext,0);
	};

	AND() {
	    return this.getToken(EParser.AND, 0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAttribute_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAttribute_declaration(this);
		}
	}


}



class Concrete_widget_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_concrete_widget_declaration;
        this.name = null; // Type_identifierContext
        this.derived = null; // Type_identifierContext
        this.methods = null; // Member_method_declaration_listContext
    }

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	type_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Type_identifierContext,i);
	    }
	};

	WIDGET() {
	    return this.getToken(EParser.WIDGET, 0);
	};

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	METHODS() {
	    return this.getToken(EParser.METHODS, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	member_method_declaration_list() {
	    return this.getTypedRuleContext(Member_method_declaration_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterConcrete_widget_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitConcrete_widget_declaration(this);
		}
	}


}



class Native_widget_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_native_widget_declaration;
        this.name = null; // Type_identifierContext
        this.bindings = null; // Native_category_bindingsContext
        this.methods = null; // Native_member_method_declaration_listContext
    }

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	NATIVE() {
	    return this.getToken(EParser.NATIVE, 0);
	};

	WIDGET() {
	    return this.getToken(EParser.WIDGET, 0);
	};

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	BINDINGS() {
	    return this.getToken(EParser.BINDINGS, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.COLON);
	    } else {
	        return this.getToken(EParser.COLON, i);
	    }
	};


	indent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndentContext);
	    } else {
	        return this.getTypedRuleContext(IndentContext,i);
	    }
	};

	dedent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DedentContext);
	    } else {
	        return this.getTypedRuleContext(DedentContext,i);
	    }
	};

	lfp() {
	    return this.getTypedRuleContext(LfpContext,0);
	};

	AND() {
	    return this.getToken(EParser.AND, 0);
	};

	METHODS() {
	    return this.getToken(EParser.METHODS, 0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	native_category_bindings() {
	    return this.getTypedRuleContext(Native_category_bindingsContext,0);
	};

	native_member_method_declaration_list() {
	    return this.getTypedRuleContext(Native_member_method_declaration_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNative_widget_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNative_widget_declaration(this);
		}
	}


}



class Concrete_category_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_concrete_category_declaration;
        this.name = null; // Type_identifierContext
        this.derived = null; // Derived_listContext
        this.attrs = null; // Attribute_listContext
        this.methods = null; // Member_method_declaration_listContext
    }

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	CATEGORY() {
	    return this.getToken(EParser.CATEGORY, 0);
	};

	STORABLE() {
	    return this.getToken(EParser.STORABLE, 0);
	};

	derived_list() {
	    return this.getTypedRuleContext(Derived_listContext,0);
	};

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	METHODS() {
	    return this.getToken(EParser.METHODS, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	attribute_list() {
	    return this.getTypedRuleContext(Attribute_listContext,0);
	};

	member_method_declaration_list() {
	    return this.getTypedRuleContext(Member_method_declaration_listContext,0);
	};

	COMMA() {
	    return this.getToken(EParser.COMMA, 0);
	};

	AND() {
	    return this.getToken(EParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterConcrete_category_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitConcrete_category_declaration(this);
		}
	}


}



class Singleton_category_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_singleton_category_declaration;
        this.name = null; // Type_identifierContext
        this.attrs = null; // Attribute_listContext
        this.methods = null; // Member_method_declaration_listContext
    }

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	SINGLETON() {
	    return this.getToken(EParser.SINGLETON, 0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	METHODS() {
	    return this.getToken(EParser.METHODS, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	attribute_list() {
	    return this.getTypedRuleContext(Attribute_listContext,0);
	};

	member_method_declaration_list() {
	    return this.getTypedRuleContext(Member_method_declaration_listContext,0);
	};

	COMMA() {
	    return this.getToken(EParser.COMMA, 0);
	};

	AND() {
	    return this.getToken(EParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSingleton_category_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSingleton_category_declaration(this);
		}
	}


}



class Derived_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_derived_list;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DerivedListItemContext extends Derived_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // Type_identifier_listContext;
        this.item = null; // Type_identifierContext;
        super.copyFrom(ctx);
    }

	AND() {
	    return this.getToken(EParser.AND, 0);
	};

	type_identifier_list() {
	    return this.getTypedRuleContext(Type_identifier_listContext,0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDerivedListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDerivedListItem(this);
		}
	}


}

EParser.DerivedListItemContext = DerivedListItemContext;

class DerivedListContext extends Derived_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // Type_identifier_listContext;
        super.copyFrom(ctx);
    }

	type_identifier_list() {
	    return this.getTypedRuleContext(Type_identifier_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDerivedList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDerivedList(this);
		}
	}


}

EParser.DerivedListContext = DerivedListContext;

class Operator_method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_operator_method_declaration;
        this.op = null; // OperatorContext
        this.arg = null; // Operator_argumentContext
        this.typ = null; // TypedefContext
        this.stmts = null; // Statement_listContext
    }

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	OPERATOR() {
	    return this.getToken(EParser.OPERATOR, 0);
	};

	RECEIVING() {
	    return this.getToken(EParser.RECEIVING, 0);
	};

	DOING() {
	    return this.getToken(EParser.DOING, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	operator() {
	    return this.getTypedRuleContext(OperatorContext,0);
	};

	operator_argument() {
	    return this.getTypedRuleContext(Operator_argumentContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	RETURNING() {
	    return this.getToken(EParser.RETURNING, 0);
	};

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterOperator_method_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitOperator_method_declaration(this);
		}
	}


}



class Setter_method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_setter_method_declaration;
        this.name = null; // Variable_identifierContext
        this.stmts = null; // Statement_listContext
    }

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	SETTER() {
	    return this.getToken(EParser.SETTER, 0);
	};

	DOING() {
	    return this.getToken(EParser.DOING, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSetter_method_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSetter_method_declaration(this);
		}
	}


}



class Native_setter_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_native_setter_declaration;
        this.name = null; // Variable_identifierContext
        this.stmts = null; // Native_statement_listContext
    }

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	SETTER() {
	    return this.getToken(EParser.SETTER, 0);
	};

	DOING() {
	    return this.getToken(EParser.DOING, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	native_statement_list() {
	    return this.getTypedRuleContext(Native_statement_listContext,0);
	};

	NATIVE() {
	    return this.getToken(EParser.NATIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNative_setter_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNative_setter_declaration(this);
		}
	}


}



class Getter_method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_getter_method_declaration;
        this.name = null; // Variable_identifierContext
        this.stmts = null; // Statement_listContext
    }

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	GETTER() {
	    return this.getToken(EParser.GETTER, 0);
	};

	DOING() {
	    return this.getToken(EParser.DOING, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterGetter_method_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitGetter_method_declaration(this);
		}
	}


}



class Native_getter_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_native_getter_declaration;
        this.name = null; // Variable_identifierContext
        this.stmts = null; // Native_statement_listContext
    }

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	GETTER() {
	    return this.getToken(EParser.GETTER, 0);
	};

	DOING() {
	    return this.getToken(EParser.DOING, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	native_statement_list() {
	    return this.getTypedRuleContext(Native_statement_listContext,0);
	};

	NATIVE() {
	    return this.getToken(EParser.NATIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNative_getter_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNative_getter_declaration(this);
		}
	}


}



class Native_category_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_native_category_declaration;
        this.name = null; // Type_identifierContext
        this.attrs = null; // Attribute_listContext
        this.bindings = null; // Native_category_bindingsContext
        this.methods = null; // Native_member_method_declaration_listContext
    }

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	NATIVE() {
	    return this.getToken(EParser.NATIVE, 0);
	};

	CATEGORY() {
	    return this.getToken(EParser.CATEGORY, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.COLON);
	    } else {
	        return this.getToken(EParser.COLON, i);
	    }
	};


	indent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndentContext);
	    } else {
	        return this.getTypedRuleContext(IndentContext,i);
	    }
	};

	dedent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DedentContext);
	    } else {
	        return this.getTypedRuleContext(DedentContext,i);
	    }
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	native_category_bindings() {
	    return this.getTypedRuleContext(Native_category_bindingsContext,0);
	};

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	BINDINGS() {
	    return this.getToken(EParser.BINDINGS, 0);
	};

	STORABLE() {
	    return this.getToken(EParser.STORABLE, 0);
	};

	lfp() {
	    return this.getTypedRuleContext(LfpContext,0);
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.AND);
	    } else {
	        return this.getToken(EParser.AND, i);
	    }
	};


	METHODS() {
	    return this.getToken(EParser.METHODS, 0);
	};

	COMMA() {
	    return this.getToken(EParser.COMMA, 0);
	};

	native_member_method_declaration_list() {
	    return this.getTypedRuleContext(Native_member_method_declaration_listContext,0);
	};

	attribute_list() {
	    return this.getTypedRuleContext(Attribute_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNative_category_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNative_category_declaration(this);
		}
	}


}



class Native_resource_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_native_resource_declaration;
        this.name = null; // Type_identifierContext
        this.attrs = null; // Attribute_listContext
        this.bindings = null; // Native_category_bindingsContext
        this.methods = null; // Native_member_method_declaration_listContext
    }

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	NATIVE() {
	    return this.getToken(EParser.NATIVE, 0);
	};

	RESOURCE() {
	    return this.getToken(EParser.RESOURCE, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.COLON);
	    } else {
	        return this.getToken(EParser.COLON, i);
	    }
	};


	indent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndentContext);
	    } else {
	        return this.getTypedRuleContext(IndentContext,i);
	    }
	};

	dedent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DedentContext);
	    } else {
	        return this.getTypedRuleContext(DedentContext,i);
	    }
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	native_category_bindings() {
	    return this.getTypedRuleContext(Native_category_bindingsContext,0);
	};

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	BINDINGS() {
	    return this.getToken(EParser.BINDINGS, 0);
	};

	STORABLE() {
	    return this.getToken(EParser.STORABLE, 0);
	};

	lfp() {
	    return this.getTypedRuleContext(LfpContext,0);
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.AND);
	    } else {
	        return this.getToken(EParser.AND, i);
	    }
	};


	METHODS() {
	    return this.getToken(EParser.METHODS, 0);
	};

	COMMA() {
	    return this.getToken(EParser.COMMA, 0);
	};

	native_member_method_declaration_list() {
	    return this.getTypedRuleContext(Native_member_method_declaration_listContext,0);
	};

	attribute_list() {
	    return this.getTypedRuleContext(Attribute_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNative_resource_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNative_resource_declaration(this);
		}
	}


}



class Native_category_bindingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_native_category_bindings;
        this.items = null; // Native_category_binding_listContext
    }

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	CATEGORY() {
	    return this.getToken(EParser.CATEGORY, 0);
	};

	BINDINGS() {
	    return this.getToken(EParser.BINDINGS, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	native_category_binding_list() {
	    return this.getTypedRuleContext(Native_category_binding_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNative_category_bindings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNative_category_bindings(this);
		}
	}


}



class Native_category_binding_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_native_category_binding_list;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class NativeCategoryBindingListItemContext extends Native_category_binding_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // Native_category_binding_listContext;
        this.item = null; // Native_category_bindingContext;
        super.copyFrom(ctx);
    }

	lfp() {
	    return this.getTypedRuleContext(LfpContext,0);
	};

	native_category_binding_list() {
	    return this.getTypedRuleContext(Native_category_binding_listContext,0);
	};

	native_category_binding() {
	    return this.getTypedRuleContext(Native_category_bindingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNativeCategoryBindingListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNativeCategoryBindingListItem(this);
		}
	}


}

EParser.NativeCategoryBindingListItemContext = NativeCategoryBindingListItemContext;

class NativeCategoryBindingListContext extends Native_category_binding_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.item = null; // Native_category_bindingContext;
        super.copyFrom(ctx);
    }

	native_category_binding() {
	    return this.getTypedRuleContext(Native_category_bindingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNativeCategoryBindingList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNativeCategoryBindingList(this);
		}
	}


}

EParser.NativeCategoryBindingListContext = NativeCategoryBindingListContext;

class Attribute_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_attribute_list;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AttributeListContext extends Attribute_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.item = null; // Attribute_identifierContext;
        super.copyFrom(ctx);
    }

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	ATTRIBUTE() {
	    return this.getToken(EParser.ATTRIBUTE, 0);
	};

	attribute_identifier() {
	    return this.getTypedRuleContext(Attribute_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAttributeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAttributeList(this);
		}
	}


}

EParser.AttributeListContext = AttributeListContext;

class AttributeListItemContext extends Attribute_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // Attribute_identifier_listContext;
        this.item = null; // Attribute_identifierContext;
        super.copyFrom(ctx);
    }

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	ATTRIBUTES() {
	    return this.getToken(EParser.ATTRIBUTES, 0);
	};

	attribute_identifier_list() {
	    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
	};

	AND() {
	    return this.getToken(EParser.AND, 0);
	};

	attribute_identifier() {
	    return this.getTypedRuleContext(Attribute_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAttributeListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAttributeListItem(this);
		}
	}


}

EParser.AttributeListItemContext = AttributeListItemContext;

class Abstract_method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_abstract_method_declaration;
        this.name = null; // Method_identifierContext
        this.args = null; // Full_argument_listContext
        this.typ = null; // TypedefContext
    }

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	ABSTRACT() {
	    return this.getToken(EParser.ABSTRACT, 0);
	};

	METHOD() {
	    return this.getToken(EParser.METHOD, 0);
	};

	method_identifier() {
	    return this.getTypedRuleContext(Method_identifierContext,0);
	};

	RECEIVING() {
	    return this.getToken(EParser.RECEIVING, 0);
	};

	RETURNING() {
	    return this.getToken(EParser.RETURNING, 0);
	};

	full_argument_list() {
	    return this.getTypedRuleContext(Full_argument_listContext,0);
	};

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	MUTABLE() {
	    return this.getToken(EParser.MUTABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAbstract_method_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAbstract_method_declaration(this);
		}
	}


}



class Concrete_method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_concrete_method_declaration;
        this.name = null; // Method_identifierContext
        this.args = null; // Full_argument_listContext
        this.typ = null; // TypedefContext
        this.stmts = null; // Statement_listContext
    }

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	METHOD() {
	    return this.getToken(EParser.METHOD, 0);
	};

	DOING() {
	    return this.getToken(EParser.DOING, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	method_identifier() {
	    return this.getTypedRuleContext(Method_identifierContext,0);
	};

	PASS() {
	    return this.getToken(EParser.PASS, 0);
	};

	RECEIVING() {
	    return this.getToken(EParser.RECEIVING, 0);
	};

	RETURNING() {
	    return this.getToken(EParser.RETURNING, 0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	full_argument_list() {
	    return this.getTypedRuleContext(Full_argument_listContext,0);
	};

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	MUTABLE() {
	    return this.getToken(EParser.MUTABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterConcrete_method_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitConcrete_method_declaration(this);
		}
	}


}



class Native_method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_native_method_declaration;
        this.name = null; // Method_identifierContext
        this.args = null; // Full_argument_listContext
        this.typ = null; // Category_or_any_typeContext
        this.stmts = null; // Native_statement_listContext
    }

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	METHOD() {
	    return this.getToken(EParser.METHOD, 0);
	};

	DOING() {
	    return this.getToken(EParser.DOING, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	method_identifier() {
	    return this.getTypedRuleContext(Method_identifierContext,0);
	};

	native_statement_list() {
	    return this.getTypedRuleContext(Native_statement_listContext,0);
	};

	NATIVE() {
	    return this.getToken(EParser.NATIVE, 0);
	};

	RECEIVING() {
	    return this.getToken(EParser.RECEIVING, 0);
	};

	RETURNING() {
	    return this.getToken(EParser.RETURNING, 0);
	};

	full_argument_list() {
	    return this.getTypedRuleContext(Full_argument_listContext,0);
	};

	category_or_any_type() {
	    return this.getTypedRuleContext(Category_or_any_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNative_method_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNative_method_declaration(this);
		}
	}


}



class Test_method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_test_method_declaration;
        this.name = null; // Token
        this.stmts = null; // Statement_listContext
        this.exps = null; // Assertion_listContext
        this.error = null; // Symbol_identifierContext
    }

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	TEST() {
	    return this.getToken(EParser.TEST, 0);
	};

	METHOD() {
	    return this.getToken(EParser.METHOD, 0);
	};

	DOING() {
	    return this.getToken(EParser.DOING, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.COLON);
	    } else {
	        return this.getToken(EParser.COLON, i);
	    }
	};


	indent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndentContext);
	    } else {
	        return this.getTypedRuleContext(IndentContext,i);
	    }
	};

	dedent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DedentContext);
	    } else {
	        return this.getTypedRuleContext(DedentContext,i);
	    }
	};

	lfp() {
	    return this.getTypedRuleContext(LfpContext,0);
	};

	AND() {
	    return this.getToken(EParser.AND, 0);
	};

	VERIFYING() {
	    return this.getToken(EParser.VERIFYING, 0);
	};

	TEXT_LITERAL() {
	    return this.getToken(EParser.TEXT_LITERAL, 0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	symbol_identifier() {
	    return this.getTypedRuleContext(Symbol_identifierContext,0);
	};

	assertion_list() {
	    return this.getTypedRuleContext(Assertion_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterTest_method_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitTest_method_declaration(this);
		}
	}


}



class AssertionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_assertion;
        this.exp = null; // ExpressionContext
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAssertion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAssertion(this);
		}
	}


}



class Full_argument_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_full_argument_list;
        this.items = null; // Argument_listContext
        this.item = null; // ArgumentContext
    }

	argument_list() {
	    return this.getTypedRuleContext(Argument_listContext,0);
	};

	AND() {
	    return this.getToken(EParser.AND, 0);
	};

	argument() {
	    return this.getTypedRuleContext(ArgumentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterFull_argument_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitFull_argument_list(this);
		}
	}


}



class Typed_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_typed_argument;
        this.typ = null; // Category_or_any_typeContext
        this.name = null; // Variable_identifierContext
        this.attrs = null; // Attribute_listContext
        this.value = null; // Literal_expressionContext
    }

	category_or_any_type() {
	    return this.getTypedRuleContext(Category_or_any_typeContext,0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	EQ() {
	    return this.getToken(EParser.EQ, 0);
	};

	attribute_list() {
	    return this.getTypedRuleContext(Attribute_listContext,0);
	};

	literal_expression() {
	    return this.getTypedRuleContext(Literal_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterTyped_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitTyped_argument(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CommentStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.decl = null; // Comment_statementContext;
        super.copyFrom(ctx);
    }

	comment_statement() {
	    return this.getTypedRuleContext(Comment_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCommentStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCommentStatement(this);
		}
	}


}

EParser.CommentStatementContext = CommentStatementContext;

class StoreStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Store_statementContext;
        super.copyFrom(ctx);
    }

	store_statement() {
	    return this.getTypedRuleContext(Store_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterStoreStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitStoreStatement(this);
		}
	}


}

EParser.StoreStatementContext = StoreStatementContext;

class WithSingletonStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // With_singleton_statementContext;
        super.copyFrom(ctx);
    }

	with_singleton_statement() {
	    return this.getTypedRuleContext(With_singleton_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterWithSingletonStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitWithSingletonStatement(this);
		}
	}


}

EParser.WithSingletonStatementContext = WithSingletonStatementContext;

class WriteStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Write_statementContext;
        super.copyFrom(ctx);
    }

	write_statement() {
	    return this.getTypedRuleContext(Write_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterWriteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitWriteStatement(this);
		}
	}


}

EParser.WriteStatementContext = WriteStatementContext;

class WhileStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // While_statementContext;
        super.copyFrom(ctx);
    }

	while_statement() {
	    return this.getTypedRuleContext(While_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitWhileStatement(this);
		}
	}


}

EParser.WhileStatementContext = WhileStatementContext;

class WithResourceStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // With_resource_statementContext;
        super.copyFrom(ctx);
    }

	with_resource_statement() {
	    return this.getTypedRuleContext(With_resource_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterWithResourceStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitWithResourceStatement(this);
		}
	}


}

EParser.WithResourceStatementContext = WithResourceStatementContext;

class RaiseStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Raise_statementContext;
        super.copyFrom(ctx);
    }

	raise_statement() {
	    return this.getTypedRuleContext(Raise_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterRaiseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitRaiseStatement(this);
		}
	}


}

EParser.RaiseStatementContext = RaiseStatementContext;

class FetchStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Fetch_statementContext;
        super.copyFrom(ctx);
    }

	fetch_statement() {
	    return this.getTypedRuleContext(Fetch_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterFetchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitFetchStatement(this);
		}
	}


}

EParser.FetchStatementContext = FetchStatementContext;

class BreakStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Break_statementContext;
        super.copyFrom(ctx);
    }

	break_statement() {
	    return this.getTypedRuleContext(Break_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterBreakStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitBreakStatement(this);
		}
	}


}

EParser.BreakStatementContext = BreakStatementContext;

class AssignInstanceStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Assign_instance_statementContext;
        super.copyFrom(ctx);
    }

	assign_instance_statement() {
	    return this.getTypedRuleContext(Assign_instance_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAssignInstanceStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAssignInstanceStatement(this);
		}
	}


}

EParser.AssignInstanceStatementContext = AssignInstanceStatementContext;

class IfStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // If_statementContext;
        super.copyFrom(ctx);
    }

	if_statement() {
	    return this.getTypedRuleContext(If_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitIfStatement(this);
		}
	}


}

EParser.IfStatementContext = IfStatementContext;

class SwitchStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Switch_statementContext;
        super.copyFrom(ctx);
    }

	switch_statement() {
	    return this.getTypedRuleContext(Switch_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSwitchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSwitchStatement(this);
		}
	}


}

EParser.SwitchStatementContext = SwitchStatementContext;

class TryStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Try_statementContext;
        super.copyFrom(ctx);
    }

	try_statement() {
	    return this.getTypedRuleContext(Try_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterTryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitTryStatement(this);
		}
	}


}

EParser.TryStatementContext = TryStatementContext;

class ReadStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Read_statementContext;
        super.copyFrom(ctx);
    }

	read_statement() {
	    return this.getTypedRuleContext(Read_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterReadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitReadStatement(this);
		}
	}


}

EParser.ReadStatementContext = ReadStatementContext;

class MethodCallStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Method_call_statementContext;
        super.copyFrom(ctx);
    }

	method_call_statement() {
	    return this.getTypedRuleContext(Method_call_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMethodCallStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMethodCallStatement(this);
		}
	}


}

EParser.MethodCallStatementContext = MethodCallStatementContext;

class ReturnStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Return_statementContext;
        super.copyFrom(ctx);
    }

	return_statement() {
	    return this.getTypedRuleContext(Return_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitReturnStatement(this);
		}
	}


}

EParser.ReturnStatementContext = ReturnStatementContext;

class AssignTupleStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Assign_tuple_statementContext;
        super.copyFrom(ctx);
    }

	assign_tuple_statement() {
	    return this.getTypedRuleContext(Assign_tuple_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAssignTupleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAssignTupleStatement(this);
		}
	}


}

EParser.AssignTupleStatementContext = AssignTupleStatementContext;

class ClosureStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.decl = null; // Concrete_method_declarationContext;
        super.copyFrom(ctx);
    }

	concrete_method_declaration() {
	    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterClosureStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitClosureStatement(this);
		}
	}


}

EParser.ClosureStatementContext = ClosureStatementContext;

class FlushStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Flush_statementContext;
        super.copyFrom(ctx);
    }

	flush_statement() {
	    return this.getTypedRuleContext(Flush_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterFlushStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitFlushStatement(this);
		}
	}


}

EParser.FlushStatementContext = FlushStatementContext;

class DoWhileStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // Do_while_statementContext;
        super.copyFrom(ctx);
    }

	do_while_statement() {
	    return this.getTypedRuleContext(Do_while_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDoWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDoWhileStatement(this);
		}
	}


}

EParser.DoWhileStatementContext = DoWhileStatementContext;

class ForEachStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.stmt = null; // For_each_statementContext;
        super.copyFrom(ctx);
    }

	for_each_statement() {
	    return this.getTypedRuleContext(For_each_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterForEachStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitForEachStatement(this);
		}
	}


}

EParser.ForEachStatementContext = ForEachStatementContext;

class Flush_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_flush_statement;
    }

	FLUSH() {
	    return this.getToken(EParser.FLUSH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterFlush_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitFlush_statement(this);
		}
	}


}



class Store_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_store_statement;
        this.to_del = null; // Expression_listContext
        this.to_add = null; // Expression_listContext
        this.stmts = null; // Statement_listContext
    }

	DELETE() {
	    return this.getToken(EParser.DELETE, 0);
	};

	STORE() {
	    return this.getToken(EParser.STORE, 0);
	};

	expression_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression_listContext);
	    } else {
	        return this.getTypedRuleContext(Expression_listContext,i);
	    }
	};

	THEN() {
	    return this.getToken(EParser.THEN, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	AND() {
	    return this.getToken(EParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterStore_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitStore_statement(this);
		}
	}


}



class Method_call_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_method_call_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class InvokeStatementContext extends Method_call_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Invocation_expressionContext;
        super.copyFrom(ctx);
    }

	invocation_expression() {
	    return this.getTypedRuleContext(Invocation_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterInvokeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitInvokeStatement(this);
		}
	}


}

EParser.InvokeStatementContext = InvokeStatementContext;

class UnresolvedWithArgsStatementContext extends Method_call_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp1 = null; // Instance_expressionContext;
        this.exp2 = null; // Unresolved_expressionContext;
        this.args = null; // Argument_assignment_listContext;
        this.name = null; // Variable_identifierContext;
        this.stmts = null; // Statement_listContext;
        super.copyFrom(ctx);
    }

	instance_expression() {
	    return this.getTypedRuleContext(Instance_expressionContext,0);
	};

	unresolved_expression() {
	    return this.getTypedRuleContext(Unresolved_expressionContext,0);
	};

	THEN() {
	    return this.getToken(EParser.THEN, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	argument_assignment_list() {
	    return this.getTypedRuleContext(Argument_assignment_listContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterUnresolvedWithArgsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitUnresolvedWithArgsStatement(this);
		}
	}


}

EParser.UnresolvedWithArgsStatementContext = UnresolvedWithArgsStatementContext;

class With_resource_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_with_resource_statement;
        this.stmt = null; // Assign_variable_statementContext
        this.stmts = null; // Statement_listContext
    }

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	COMMA() {
	    return this.getToken(EParser.COMMA, 0);
	};

	DO() {
	    return this.getToken(EParser.DO, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	assign_variable_statement() {
	    return this.getTypedRuleContext(Assign_variable_statementContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterWith_resource_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitWith_resource_statement(this);
		}
	}


}



class With_singleton_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_with_singleton_statement;
        this.typ = null; // Type_identifierContext
        this.stmts = null; // Statement_listContext
    }

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	COMMA() {
	    return this.getToken(EParser.COMMA, 0);
	};

	DO() {
	    return this.getToken(EParser.DO, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterWith_singleton_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitWith_singleton_statement(this);
		}
	}


}



class Switch_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_switch_statement;
        this.exp = null; // ExpressionContext
        this.cases = null; // Switch_case_statement_listContext
        this.stmts = null; // Statement_listContext
    }

	SWITCH() {
	    return this.getToken(EParser.SWITCH, 0);
	};

	ON() {
	    return this.getToken(EParser.ON, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.COLON);
	    } else {
	        return this.getToken(EParser.COLON, i);
	    }
	};


	indent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndentContext);
	    } else {
	        return this.getTypedRuleContext(IndentContext,i);
	    }
	};

	dedent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DedentContext);
	    } else {
	        return this.getTypedRuleContext(DedentContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	switch_case_statement_list() {
	    return this.getTypedRuleContext(Switch_case_statement_listContext,0);
	};

	lfp() {
	    return this.getTypedRuleContext(LfpContext,0);
	};

	OTHERWISE() {
	    return this.getToken(EParser.OTHERWISE, 0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSwitch_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSwitch_statement(this);
		}
	}


}



class Switch_case_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_switch_case_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AtomicSwitchCaseContext extends Switch_case_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Atomic_literalContext;
        this.stmts = null; // Statement_listContext;
        super.copyFrom(ctx);
    }

	WHEN() {
	    return this.getToken(EParser.WHEN, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	atomic_literal() {
	    return this.getTypedRuleContext(Atomic_literalContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAtomicSwitchCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAtomicSwitchCase(this);
		}
	}


}

EParser.AtomicSwitchCaseContext = AtomicSwitchCaseContext;

class CollectionSwitchCaseContext extends Switch_case_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Literal_collectionContext;
        this.stmts = null; // Statement_listContext;
        super.copyFrom(ctx);
    }

	WHEN() {
	    return this.getToken(EParser.WHEN, 0);
	};

	IN() {
	    return this.getToken(EParser.IN, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	literal_collection() {
	    return this.getTypedRuleContext(Literal_collectionContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCollectionSwitchCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCollectionSwitchCase(this);
		}
	}


}

EParser.CollectionSwitchCaseContext = CollectionSwitchCaseContext;

class For_each_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_for_each_statement;
        this.name1 = null; // Variable_identifierContext
        this.name2 = null; // Variable_identifierContext
        this.source = null; // ExpressionContext
        this.stmts = null; // Statement_listContext
    }

	FOR() {
	    return this.getToken(EParser.FOR, 0);
	};

	EACH() {
	    return this.getToken(EParser.EACH, 0);
	};

	IN() {
	    return this.getToken(EParser.IN, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	variable_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Variable_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Variable_identifierContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	COMMA() {
	    return this.getToken(EParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterFor_each_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitFor_each_statement(this);
		}
	}


}



class Do_while_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_do_while_statement;
        this.stmts = null; // Statement_listContext
        this.exp = null; // ExpressionContext
    }

	DO() {
	    return this.getToken(EParser.DO, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	lfp() {
	    return this.getTypedRuleContext(LfpContext,0);
	};

	WHILE() {
	    return this.getToken(EParser.WHILE, 0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDo_while_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDo_while_statement(this);
		}
	}


}



class While_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_while_statement;
        this.exp = null; // ExpressionContext
        this.stmts = null; // Statement_listContext
    }

	WHILE() {
	    return this.getToken(EParser.WHILE, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterWhile_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitWhile_statement(this);
		}
	}


}



class If_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_if_statement;
        this.exp = null; // ExpressionContext
        this.stmts = null; // Statement_listContext
        this.elseIfs = null; // Else_if_statement_listContext
        this.elseStmts = null; // Statement_listContext
    }

	IF() {
	    return this.getToken(EParser.IF, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.COLON);
	    } else {
	        return this.getToken(EParser.COLON, i);
	    }
	};


	indent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndentContext);
	    } else {
	        return this.getTypedRuleContext(IndentContext,i);
	    }
	};

	dedent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DedentContext);
	    } else {
	        return this.getTypedRuleContext(DedentContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Statement_listContext);
	    } else {
	        return this.getTypedRuleContext(Statement_listContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(EParser.ELSE, 0);
	};

	else_if_statement_list() {
	    return this.getTypedRuleContext(Else_if_statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterIf_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitIf_statement(this);
		}
	}


}



class Else_if_statement_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_else_if_statement_list;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ElseIfStatementListContext extends Else_if_statement_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        this.stmts = null; // Statement_listContext;
        super.copyFrom(ctx);
    }

	ELSE() {
	    return this.getToken(EParser.ELSE, 0);
	};

	IF() {
	    return this.getToken(EParser.IF, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterElseIfStatementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitElseIfStatementList(this);
		}
	}


}

EParser.ElseIfStatementListContext = ElseIfStatementListContext;

class ElseIfStatementListItemContext extends Else_if_statement_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // Else_if_statement_listContext;
        this.exp = null; // ExpressionContext;
        this.stmts = null; // Statement_listContext;
        super.copyFrom(ctx);
    }

	lfp() {
	    return this.getTypedRuleContext(LfpContext,0);
	};

	ELSE() {
	    return this.getToken(EParser.ELSE, 0);
	};

	IF() {
	    return this.getToken(EParser.IF, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	else_if_statement_list() {
	    return this.getTypedRuleContext(Else_if_statement_listContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterElseIfStatementListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitElseIfStatementListItem(this);
		}
	}


}

EParser.ElseIfStatementListItemContext = ElseIfStatementListItemContext;

class Raise_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_raise_statement;
        this.exp = null; // ExpressionContext
    }

	RAISE() {
	    return this.getToken(EParser.RAISE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterRaise_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitRaise_statement(this);
		}
	}


}



class Try_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_try_statement;
        this.name = null; // Variable_identifierContext
        this.stmts = null; // Statement_listContext
        this.handlers = null; // Catch_statement_listContext
        this.anyStmts = null; // Statement_listContext
        this.finalStmts = null; // Statement_listContext
    }

	SWITCH() {
	    return this.getToken(EParser.SWITCH, 0);
	};

	ON() {
	    return this.getToken(EParser.ON, 0);
	};

	DOING() {
	    return this.getToken(EParser.DOING, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.COLON);
	    } else {
	        return this.getToken(EParser.COLON, i);
	    }
	};


	indent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndentContext);
	    } else {
	        return this.getTypedRuleContext(IndentContext,i);
	    }
	};

	dedent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DedentContext);
	    } else {
	        return this.getTypedRuleContext(DedentContext,i);
	    }
	};

	lfs = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfsContext);
	    } else {
	        return this.getTypedRuleContext(LfsContext,i);
	    }
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	statement_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Statement_listContext);
	    } else {
	        return this.getTypedRuleContext(Statement_listContext,i);
	    }
	};

	ALWAYS() {
	    return this.getToken(EParser.ALWAYS, 0);
	};

	catch_statement_list() {
	    return this.getTypedRuleContext(Catch_statement_listContext,0);
	};

	OTHERWISE() {
	    return this.getToken(EParser.OTHERWISE, 0);
	};

	WHEN() {
	    return this.getToken(EParser.WHEN, 0);
	};

	ANY() {
	    return this.getToken(EParser.ANY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterTry_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitTry_statement(this);
		}
	}


}



class Catch_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_catch_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CatchAtomicStatementContext extends Catch_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Symbol_identifierContext;
        this.stmts = null; // Statement_listContext;
        super.copyFrom(ctx);
    }

	WHEN() {
	    return this.getToken(EParser.WHEN, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	lfs() {
	    return this.getTypedRuleContext(LfsContext,0);
	};

	symbol_identifier() {
	    return this.getTypedRuleContext(Symbol_identifierContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCatchAtomicStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCatchAtomicStatement(this);
		}
	}


}

EParser.CatchAtomicStatementContext = CatchAtomicStatementContext;

class CatchCollectionStatementContext extends Catch_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Symbol_listContext;
        this.stmts = null; // Statement_listContext;
        super.copyFrom(ctx);
    }

	WHEN() {
	    return this.getToken(EParser.WHEN, 0);
	};

	IN() {
	    return this.getToken(EParser.IN, 0);
	};

	LBRAK() {
	    return this.getToken(EParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(EParser.RBRAK, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	lfs() {
	    return this.getTypedRuleContext(LfsContext,0);
	};

	symbol_list() {
	    return this.getTypedRuleContext(Symbol_listContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCatchCollectionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCatchCollectionStatement(this);
		}
	}


}

EParser.CatchCollectionStatementContext = CatchCollectionStatementContext;

class Break_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_break_statement;
    }

	BREAK() {
	    return this.getToken(EParser.BREAK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterBreak_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitBreak_statement(this);
		}
	}


}



class Return_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_return_statement;
        this.exp = null; // ExpressionContext
    }

	RETURN() {
	    return this.getToken(EParser.RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterReturn_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitReturn_statement(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class IntDivideExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	idivide() {
	    return this.getTypedRuleContext(IdivideContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterIntDivideExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitIntDivideExpression(this);
		}
	}


}

EParser.IntDivideExpressionContext = IntDivideExpressionContext;

class HasAnyExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // Filter_expressionContext;
        super.copyFrom(ctx);
    }

	HAS() {
	    return this.getToken(EParser.HAS, 0);
	};

	ANY() {
	    return this.getToken(EParser.ANY, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	filter_expression() {
	    return this.getTypedRuleContext(Filter_expressionContext,0);
	};

	NOT() {
	    return this.getToken(EParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterHasAnyExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitHasAnyExpression(this);
		}
	}


}

EParser.HasAnyExpressionContext = HasAnyExpressionContext;

class HasExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	HAS() {
	    return this.getToken(EParser.HAS, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	NOT() {
	    return this.getToken(EParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterHasExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitHasExpression(this);
		}
	}


}

EParser.HasExpressionContext = HasExpressionContext;

class TernaryExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.ifTrue = null; // ExpressionContext;
        this.test = null; // ExpressionContext;
        this.ifFalse = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	IF() {
	    return this.getToken(EParser.IF, 0);
	};

	ELSE() {
	    return this.getToken(EParser.ELSE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterTernaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitTernaryExpression(this);
		}
	}


}

EParser.TernaryExpressionContext = TernaryExpressionContext;

class InExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	IN() {
	    return this.getToken(EParser.IN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	NOT() {
	    return this.getToken(EParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterInExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitInExpression(this);
		}
	}


}

EParser.InExpressionContext = InExpressionContext;

class DocumentExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Document_expressionContext;
        super.copyFrom(ctx);
    }

	document_expression() {
	    return this.getTypedRuleContext(Document_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDocumentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDocumentExpression(this);
		}
	}


}

EParser.DocumentExpressionContext = DocumentExpressionContext;

class JsxExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Jsx_expressionContext;
        super.copyFrom(ctx);
    }

	jsx_expression() {
	    return this.getTypedRuleContext(Jsx_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsxExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsxExpression(this);
		}
	}


}

EParser.JsxExpressionContext = JsxExpressionContext;

class NotExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(EParser.NOT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNotExpression(this);
		}
	}


}

EParser.NotExpressionContext = NotExpressionContext;

class InvocationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Invocation_expressionContext;
        super.copyFrom(ctx);
    }

	invocation_expression() {
	    return this.getTypedRuleContext(Invocation_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterInvocationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitInvocationExpression(this);
		}
	}


}

EParser.InvocationExpressionContext = InvocationExpressionContext;

class CompareExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.op = null; // Token;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	LT() {
	    return this.getToken(EParser.LT, 0);
	};

	LTE() {
	    return this.getToken(EParser.LTE, 0);
	};

	GT() {
	    return this.getToken(EParser.GT, 0);
	};

	GTE() {
	    return this.getToken(EParser.GTE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCompareExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCompareExpression(this);
		}
	}


}

EParser.CompareExpressionContext = CompareExpressionContext;

class OrExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	OR() {
	    return this.getToken(EParser.OR, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitOrExpression(this);
		}
	}


}

EParser.OrExpressionContext = OrExpressionContext;

class CodeExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	CODE() {
	    return this.getToken(EParser.CODE, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCodeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCodeExpression(this);
		}
	}


}

EParser.CodeExpressionContext = CodeExpressionContext;

class AmbiguousExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Ambiguous_expressionContext;
        super.copyFrom(ctx);
    }

	ambiguous_expression() {
	    return this.getTypedRuleContext(Ambiguous_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAmbiguousExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAmbiguousExpression(this);
		}
	}


}

EParser.AmbiguousExpressionContext = AmbiguousExpressionContext;

class ReadOneExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Read_one_expressionContext;
        super.copyFrom(ctx);
    }

	read_one_expression() {
	    return this.getTypedRuleContext(Read_one_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterReadOneExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitReadOneExpression(this);
		}
	}


}

EParser.ReadOneExpressionContext = ReadOneExpressionContext;

class AndExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	AND() {
	    return this.getToken(EParser.AND, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAndExpression(this);
		}
	}


}

EParser.AndExpressionContext = AndExpressionContext;

class ArrowExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Arrow_expressionContext;
        super.copyFrom(ctx);
    }

	arrow_expression() {
	    return this.getTypedRuleContext(Arrow_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterArrowExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitArrowExpression(this);
		}
	}


}

EParser.ArrowExpressionContext = ArrowExpressionContext;

class MethodCallExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp1 = null; // Instance_expressionContext;
        this.exp2 = null; // Unresolved_expressionContext;
        this.args = null; // Argument_assignment_listContext;
        super.copyFrom(ctx);
    }

	argument_assignment_list() {
	    return this.getTypedRuleContext(Argument_assignment_listContext,0);
	};

	instance_expression() {
	    return this.getTypedRuleContext(Instance_expressionContext,0);
	};

	unresolved_expression() {
	    return this.getTypedRuleContext(Unresolved_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMethodCallExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMethodCallExpression(this);
		}
	}


}

EParser.MethodCallExpressionContext = MethodCallExpressionContext;

class FetchExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Fetch_expressionContext;
        super.copyFrom(ctx);
    }

	fetch_expression() {
	    return this.getTypedRuleContext(Fetch_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterFetchExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitFetchExpression(this);
		}
	}


}

EParser.FetchExpressionContext = FetchExpressionContext;

class ClosureExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Method_identifierContext;
        super.copyFrom(ctx);
    }

	METHOD_COLON() {
	    return this.getToken(EParser.METHOD_COLON, 0);
	};

	method_identifier() {
	    return this.getTypedRuleContext(Method_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterClosureExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitClosureExpression(this);
		}
	}


}

EParser.ClosureExpressionContext = ClosureExpressionContext;

class SortedExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Sorted_expressionContext;
        super.copyFrom(ctx);
    }

	sorted_expression() {
	    return this.getTypedRuleContext(Sorted_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSortedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSortedExpression(this);
		}
	}


}

EParser.SortedExpressionContext = SortedExpressionContext;

class BlobExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Blob_expressionContext;
        super.copyFrom(ctx);
    }

	blob_expression() {
	    return this.getTypedRuleContext(Blob_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterBlobExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitBlobExpression(this);
		}
	}


}

EParser.BlobExpressionContext = BlobExpressionContext;

class ContainsExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	CONTAINS() {
	    return this.getToken(EParser.CONTAINS, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	NOT() {
	    return this.getToken(EParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterContainsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitContainsExpression(this);
		}
	}


}

EParser.ContainsExpressionContext = ContainsExpressionContext;

class FilteredListExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.src = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	filtered_list_suffix() {
	    return this.getTypedRuleContext(Filtered_list_suffixContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterFilteredListExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitFilteredListExpression(this);
		}
	}


}

EParser.FilteredListExpressionContext = FilteredListExpressionContext;

class ConstructorExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Constructor_expressionContext;
        super.copyFrom(ctx);
    }

	constructor_expression() {
	    return this.getTypedRuleContext(Constructor_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterConstructorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitConstructorExpression(this);
		}
	}


}

EParser.ConstructorExpressionContext = ConstructorExpressionContext;

class ReadBlobExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Read_blob_expressionContext;
        super.copyFrom(ctx);
    }

	read_blob_expression() {
	    return this.getTypedRuleContext(Read_blob_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterReadBlobExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitReadBlobExpression(this);
		}
	}


}

EParser.ReadBlobExpressionContext = ReadBlobExpressionContext;

class MultiplyExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	multiply() {
	    return this.getTypedRuleContext(MultiplyContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMultiplyExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMultiplyExpression(this);
		}
	}


}

EParser.MultiplyExpressionContext = MultiplyExpressionContext;

class ExecuteExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Variable_identifierContext;
        super.copyFrom(ctx);
    }

	EXECUTE() {
	    return this.getToken(EParser.EXECUTE, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterExecuteExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitExecuteExpression(this);
		}
	}


}

EParser.ExecuteExpressionContext = ExecuteExpressionContext;

class IteratorExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        this.name = null; // Variable_identifierContext;
        this.source = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	FOR() {
	    return this.getToken(EParser.FOR, 0);
	};

	EACH() {
	    return this.getToken(EParser.EACH, 0);
	};

	IN() {
	    return this.getToken(EParser.IN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterIteratorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitIteratorExpression(this);
		}
	}


}

EParser.IteratorExpressionContext = IteratorExpressionContext;

class UnresolvedExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Unresolved_expressionContext;
        super.copyFrom(ctx);
    }

	unresolved_expression() {
	    return this.getTypedRuleContext(Unresolved_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterUnresolvedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitUnresolvedExpression(this);
		}
	}


}

EParser.UnresolvedExpressionContext = UnresolvedExpressionContext;

class DivideExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	divide() {
	    return this.getTypedRuleContext(DivideContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDivideExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDivideExpression(this);
		}
	}


}

EParser.DivideExpressionContext = DivideExpressionContext;

class IsExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // Is_expressionContext;
        super.copyFrom(ctx);
    }

	IS() {
	    return this.getToken(EParser.IS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	is_expression() {
	    return this.getTypedRuleContext(Is_expressionContext,0);
	};

	NOT() {
	    return this.getToken(EParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterIsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitIsExpression(this);
		}
	}


}

EParser.IsExpressionContext = IsExpressionContext;

class MinusExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	MINUS() {
	    return this.getToken(EParser.MINUS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMinusExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMinusExpression(this);
		}
	}


}

EParser.MinusExpressionContext = MinusExpressionContext;

class AddExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.op = null; // Token;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	PLUS() {
	    return this.getToken(EParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(EParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAddExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAddExpression(this);
		}
	}


}

EParser.AddExpressionContext = AddExpressionContext;

class HasAllExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // Filter_expressionContext;
        super.copyFrom(ctx);
    }

	HAS() {
	    return this.getToken(EParser.HAS, 0);
	};

	ALL() {
	    return this.getToken(EParser.ALL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	filter_expression() {
	    return this.getTypedRuleContext(Filter_expressionContext,0);
	};

	NOT() {
	    return this.getToken(EParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterHasAllExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitHasAllExpression(this);
		}
	}


}

EParser.HasAllExpressionContext = HasAllExpressionContext;

class InstanceExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Instance_expressionContext;
        super.copyFrom(ctx);
    }

	instance_expression() {
	    return this.getTypedRuleContext(Instance_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterInstanceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitInstanceExpression(this);
		}
	}


}

EParser.InstanceExpressionContext = InstanceExpressionContext;

class MutableInstanceExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Mutable_instance_expressionContext;
        super.copyFrom(ctx);
    }

	mutable_instance_expression() {
	    return this.getTypedRuleContext(Mutable_instance_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMutableInstanceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMutableInstanceExpression(this);
		}
	}


}

EParser.MutableInstanceExpressionContext = MutableInstanceExpressionContext;

class ReadAllExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Read_all_expressionContext;
        super.copyFrom(ctx);
    }

	read_all_expression() {
	    return this.getTypedRuleContext(Read_all_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterReadAllExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitReadAllExpression(this);
		}
	}


}

EParser.ReadAllExpressionContext = ReadAllExpressionContext;

class CssExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Css_expressionContext;
        super.copyFrom(ctx);
    }

	css_expression() {
	    return this.getTypedRuleContext(Css_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCssExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCssExpression(this);
		}
	}


}

EParser.CssExpressionContext = CssExpressionContext;

class CastExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // Category_or_any_typeContext;
        super.copyFrom(ctx);
    }

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	category_or_any_type() {
	    return this.getTypedRuleContext(Category_or_any_typeContext,0);
	};

	MUTABLE() {
	    return this.getToken(EParser.MUTABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCastExpression(this);
		}
	}


}

EParser.CastExpressionContext = CastExpressionContext;

class ModuloExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	modulo() {
	    return this.getTypedRuleContext(ModuloContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterModuloExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitModuloExpression(this);
		}
	}


}

EParser.ModuloExpressionContext = ModuloExpressionContext;

class EqualsExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ExpressionContext;
        this.op = null; // Token;
        this.right = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	EQ() {
	    return this.getToken(EParser.EQ, 0);
	};

	LTGT() {
	    return this.getToken(EParser.LTGT, 0);
	};

	TILDE() {
	    return this.getToken(EParser.TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterEqualsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitEqualsExpression(this);
		}
	}


}

EParser.EqualsExpressionContext = EqualsExpressionContext;

class Filter_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_filter_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExplicitFilterExpressionContext extends Filter_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	WHERE() {
	    return this.getToken(EParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterExplicitFilterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitExplicitFilterExpression(this);
		}
	}


}

EParser.ExplicitFilterExpressionContext = ExplicitFilterExpressionContext;

class OtherFilterExpressionContext extends Filter_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterOtherFilterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitOtherFilterExpression(this);
		}
	}


}

EParser.OtherFilterExpressionContext = OtherFilterExpressionContext;

class ArrowFilterExpressionContext extends Filter_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	WHERE() {
	    return this.getToken(EParser.WHERE, 0);
	};

	arrow_expression() {
	    return this.getTypedRuleContext(Arrow_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterArrowFilterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitArrowFilterExpression(this);
		}
	}


}

EParser.ArrowFilterExpressionContext = ArrowFilterExpressionContext;

class Unresolved_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_unresolved_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UnresolvedSelectorContext extends Unresolved_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Unresolved_expressionContext;
        this.selector = null; // Unresolved_selectorContext;
        super.copyFrom(ctx);
    }

	unresolved_expression() {
	    return this.getTypedRuleContext(Unresolved_expressionContext,0);
	};

	unresolved_selector() {
	    return this.getTypedRuleContext(Unresolved_selectorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterUnresolvedSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitUnresolvedSelector(this);
		}
	}


}

EParser.UnresolvedSelectorContext = UnresolvedSelectorContext;

class UnresolvedIdentifierContext extends Unresolved_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterUnresolvedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitUnresolvedIdentifier(this);
		}
	}


}

EParser.UnresolvedIdentifierContext = UnresolvedIdentifierContext;

class Unresolved_selectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_unresolved_selector;
        this.name = null; // IdentifierContext
    }

	DOT() {
	    return this.getToken(EParser.DOT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterUnresolved_selector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitUnresolved_selector(this);
		}
	}


}



class Invocation_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_invocation_expression;
        this.name = null; // Variable_identifierContext
    }

	INVOKE_COLON() {
	    return this.getToken(EParser.INVOKE_COLON, 0);
	};

	invocation_trailer() {
	    return this.getTypedRuleContext(Invocation_trailerContext,0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterInvocation_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitInvocation_expression(this);
		}
	}


}



class Invocation_trailerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_invocation_trailer;
    }


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterInvocation_trailer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitInvocation_trailer(this);
		}
	}


}



class Selectable_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_selectable_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ThisExpressionContext extends Selectable_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // This_expressionContext;
        super.copyFrom(ctx);
    }

	this_expression() {
	    return this.getTypedRuleContext(This_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterThisExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitThisExpression(this);
		}
	}


}

EParser.ThisExpressionContext = ThisExpressionContext;

class ParenthesisExpressionContext extends Selectable_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Parenthesis_expressionContext;
        super.copyFrom(ctx);
    }

	parenthesis_expression() {
	    return this.getTypedRuleContext(Parenthesis_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterParenthesisExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitParenthesisExpression(this);
		}
	}


}

EParser.ParenthesisExpressionContext = ParenthesisExpressionContext;

class LiteralExpressionContext extends Selectable_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Literal_expressionContext;
        super.copyFrom(ctx);
    }

	literal_expression() {
	    return this.getTypedRuleContext(Literal_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitLiteralExpression(this);
		}
	}


}

EParser.LiteralExpressionContext = LiteralExpressionContext;

class SuperExpressionContext extends Selectable_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Super_expressionContext;
        super.copyFrom(ctx);
    }

	super_expression() {
	    return this.getTypedRuleContext(Super_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSuperExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSuperExpression(this);
		}
	}


}

EParser.SuperExpressionContext = SuperExpressionContext;

class IdentifierExpressionContext extends Selectable_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterIdentifierExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitIdentifierExpression(this);
		}
	}


}

EParser.IdentifierExpressionContext = IdentifierExpressionContext;

class Instance_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_instance_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SelectorExpressionContext extends Instance_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Instance_expressionContext;
        this.selector = null; // Instance_selectorContext;
        super.copyFrom(ctx);
    }

	instance_expression() {
	    return this.getTypedRuleContext(Instance_expressionContext,0);
	};

	instance_selector() {
	    return this.getTypedRuleContext(Instance_selectorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSelectorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSelectorExpression(this);
		}
	}


}

EParser.SelectorExpressionContext = SelectorExpressionContext;

class SelectableExpressionContext extends Instance_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Selectable_expressionContext;
        super.copyFrom(ctx);
    }

	selectable_expression() {
	    return this.getTypedRuleContext(Selectable_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSelectableExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSelectableExpression(this);
		}
	}


}

EParser.SelectableExpressionContext = SelectableExpressionContext;

class Instance_selectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_instance_selector;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SliceSelectorContext extends Instance_selectorContext {

    constructor(parser, ctx) {
        super(parser);
        this.xslice = null; // Slice_argumentsContext;
        super.copyFrom(ctx);
    }

	LBRAK() {
	    return this.getToken(EParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(EParser.RBRAK, 0);
	};

	slice_arguments() {
	    return this.getTypedRuleContext(Slice_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSliceSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSliceSelector(this);
		}
	}


}

EParser.SliceSelectorContext = SliceSelectorContext;

class MemberSelectorContext extends Instance_selectorContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Member_identifierContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(EParser.DOT, 0);
	};

	member_identifier() {
	    return this.getTypedRuleContext(Member_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMemberSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMemberSelector(this);
		}
	}


}

EParser.MemberSelectorContext = MemberSelectorContext;

class ItemSelectorContext extends Instance_selectorContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	LBRAK() {
	    return this.getToken(EParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(EParser.RBRAK, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterItemSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitItemSelector(this);
		}
	}


}

EParser.ItemSelectorContext = ItemSelectorContext;

class Mutable_instance_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_mutable_instance_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class MutableSelectableExpressionContext extends Mutable_instance_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	MUTABLE() {
	    return this.getToken(EParser.MUTABLE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMutableSelectableExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMutableSelectableExpression(this);
		}
	}


}

EParser.MutableSelectableExpressionContext = MutableSelectableExpressionContext;

class MutableSelectorExpressionContext extends Mutable_instance_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Mutable_instance_expressionContext;
        this.selector = null; // Instance_selectorContext;
        super.copyFrom(ctx);
    }

	mutable_instance_expression() {
	    return this.getTypedRuleContext(Mutable_instance_expressionContext,0);
	};

	instance_selector() {
	    return this.getTypedRuleContext(Instance_selectorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMutableSelectorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMutableSelectorExpression(this);
		}
	}


}

EParser.MutableSelectorExpressionContext = MutableSelectorExpressionContext;

class Document_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_document_expression;
        this.exp = null; // ExpressionContext
    }

	DOCUMENT() {
	    return this.getToken(EParser.DOCUMENT, 0);
	};

	FROM() {
	    return this.getToken(EParser.FROM, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDocument_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDocument_expression(this);
		}
	}


}



class Blob_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_blob_expression;
    }

	BLOB() {
	    return this.getToken(EParser.BLOB, 0);
	};

	FROM() {
	    return this.getToken(EParser.FROM, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterBlob_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitBlob_expression(this);
		}
	}


}



class Constructor_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_constructor_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ConstructorFromContext extends Constructor_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.typ = null; // Mutable_category_typeContext;
        this.copyExp = null; // ExpressionContext;
        this.args = null; // With_argument_assignment_listContext;
        this.arg = null; // Argument_assignmentContext;
        super.copyFrom(ctx);
    }

	FROM() {
	    return this.getToken(EParser.FROM, 0);
	};

	mutable_category_type() {
	    return this.getTypedRuleContext(Mutable_category_typeContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	with_argument_assignment_list() {
	    return this.getTypedRuleContext(With_argument_assignment_listContext,0);
	};

	COMMA() {
	    return this.getToken(EParser.COMMA, 0);
	};

	AND() {
	    return this.getToken(EParser.AND, 0);
	};

	argument_assignment() {
	    return this.getTypedRuleContext(Argument_assignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterConstructorFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitConstructorFrom(this);
		}
	}


}

EParser.ConstructorFromContext = ConstructorFromContext;

class ConstructorNoFromContext extends Constructor_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.typ = null; // Mutable_category_typeContext;
        this.args = null; // With_argument_assignment_listContext;
        this.arg = null; // Argument_assignmentContext;
        super.copyFrom(ctx);
    }

	mutable_category_type() {
	    return this.getTypedRuleContext(Mutable_category_typeContext,0);
	};

	with_argument_assignment_list() {
	    return this.getTypedRuleContext(With_argument_assignment_listContext,0);
	};

	AND() {
	    return this.getToken(EParser.AND, 0);
	};

	argument_assignment() {
	    return this.getTypedRuleContext(Argument_assignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterConstructorNoFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitConstructorNoFrom(this);
		}
	}


}

EParser.ConstructorNoFromContext = ConstructorNoFromContext;

class Write_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_write_statement;
        this.what = null; // ExpressionContext
        this.target = null; // ExpressionContext
    }

	WRITE() {
	    return this.getToken(EParser.WRITE, 0);
	};

	TO() {
	    return this.getToken(EParser.TO, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterWrite_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitWrite_statement(this);
		}
	}


}



class Ambiguous_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_ambiguous_expression;
        this.method = null; // Unresolved_expressionContext
        this.exp = null; // ExpressionContext
    }

	MINUS() {
	    return this.getToken(EParser.MINUS, 0);
	};

	unresolved_expression() {
	    return this.getTypedRuleContext(Unresolved_expressionContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAmbiguous_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAmbiguous_expression(this);
		}
	}


}



class Filtered_list_suffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_filtered_list_suffix;
        this.name = null; // Variable_identifierContext
        this.predicate = null; // ExpressionContext
    }

	FILTERED() {
	    return this.getToken(EParser.FILTERED, 0);
	};

	WHERE() {
	    return this.getToken(EParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterFiltered_list_suffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitFiltered_list_suffix(this);
		}
	}


}



class Fetch_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_fetch_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class FetchOneContext extends Fetch_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.typ = null; // Mutable_category_typeContext;
        this.predicate = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(EParser.FETCH, 0);
	};

	ONE() {
	    return this.getToken(EParser.ONE, 0);
	};

	WHERE() {
	    return this.getToken(EParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	mutable_category_type() {
	    return this.getTypedRuleContext(Mutable_category_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterFetchOne(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitFetchOne(this);
		}
	}


}

EParser.FetchOneContext = FetchOneContext;

class FetchManyContext extends Fetch_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.typ = null; // Mutable_category_typeContext;
        this.xstart = null; // ExpressionContext;
        this.xstop = null; // ExpressionContext;
        this.predicate = null; // ExpressionContext;
        this.orderby = null; // Order_by_listContext;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(EParser.FETCH, 0);
	};

	WHERE() {
	    return this.getToken(EParser.WHERE, 0);
	};

	ORDER() {
	    return this.getToken(EParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(EParser.BY, 0);
	};

	ALL() {
	    return this.getToken(EParser.ALL, 0);
	};

	TO() {
	    return this.getToken(EParser.TO, 0);
	};

	ROWS() {
	    return this.getToken(EParser.ROWS, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	order_by_list() {
	    return this.getTypedRuleContext(Order_by_listContext,0);
	};

	mutable_category_type() {
	    return this.getTypedRuleContext(Mutable_category_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterFetchMany(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitFetchMany(this);
		}
	}


}

EParser.FetchManyContext = FetchManyContext;

class Fetch_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_fetch_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class FetchManyAsyncContext extends Fetch_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.typ = null; // Mutable_category_typeContext;
        this.xstart = null; // ExpressionContext;
        this.xstop = null; // ExpressionContext;
        this.predicate = null; // ExpressionContext;
        this.orderby = null; // Order_by_listContext;
        this.name = null; // Variable_identifierContext;
        this.stmts = null; // Statement_listContext;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(EParser.FETCH, 0);
	};

	THEN() {
	    return this.getToken(EParser.THEN, 0);
	};

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	WHERE() {
	    return this.getToken(EParser.WHERE, 0);
	};

	ORDER() {
	    return this.getToken(EParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(EParser.BY, 0);
	};

	ALL() {
	    return this.getToken(EParser.ALL, 0);
	};

	TO() {
	    return this.getToken(EParser.TO, 0);
	};

	ROWS() {
	    return this.getToken(EParser.ROWS, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	order_by_list() {
	    return this.getTypedRuleContext(Order_by_listContext,0);
	};

	mutable_category_type() {
	    return this.getTypedRuleContext(Mutable_category_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterFetchManyAsync(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitFetchManyAsync(this);
		}
	}


}

EParser.FetchManyAsyncContext = FetchManyAsyncContext;

class FetchOneAsyncContext extends Fetch_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.typ = null; // Mutable_category_typeContext;
        this.predicate = null; // ExpressionContext;
        this.name = null; // Variable_identifierContext;
        this.stmts = null; // Statement_listContext;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(EParser.FETCH, 0);
	};

	ONE() {
	    return this.getToken(EParser.ONE, 0);
	};

	WHERE() {
	    return this.getToken(EParser.WHERE, 0);
	};

	THEN() {
	    return this.getToken(EParser.THEN, 0);
	};

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	mutable_category_type() {
	    return this.getTypedRuleContext(Mutable_category_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterFetchOneAsync(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitFetchOneAsync(this);
		}
	}


}

EParser.FetchOneAsyncContext = FetchOneAsyncContext;

class Read_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_read_statement;
        this.source = null; // ExpressionContext
        this.name = null; // Variable_identifierContext
        this.stmts = null; // Statement_listContext
    }

	READ() {
	    return this.getToken(EParser.READ, 0);
	};

	ALL() {
	    return this.getToken(EParser.ALL, 0);
	};

	FROM() {
	    return this.getToken(EParser.FROM, 0);
	};

	THEN() {
	    return this.getToken(EParser.THEN, 0);
	};

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	indent() {
	    return this.getTypedRuleContext(IndentContext,0);
	};

	dedent() {
	    return this.getTypedRuleContext(DedentContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterRead_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitRead_statement(this);
		}
	}


}



class Sorted_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_sorted_expression;
        this.source = null; // Instance_expressionContext
        this.key = null; // Sorted_keyContext
    }

	SORTED() {
	    return this.getToken(EParser.SORTED, 0);
	};

	instance_expression() {
	    return this.getTypedRuleContext(Instance_expressionContext,0);
	};

	DESC() {
	    return this.getToken(EParser.DESC, 0);
	};

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	key_token() {
	    return this.getTypedRuleContext(Key_tokenContext,0);
	};

	sorted_key() {
	    return this.getTypedRuleContext(Sorted_keyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSorted_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSorted_expression(this);
		}
	}


}



class Argument_assignment_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_argument_assignment_list;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ArgumentAssignmentListExpressionContext extends Argument_assignment_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        this.items = null; // With_argument_assignment_listContext;
        this.item = null; // Argument_assignmentContext;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	with_argument_assignment_list() {
	    return this.getTypedRuleContext(With_argument_assignment_listContext,0);
	};

	AND() {
	    return this.getToken(EParser.AND, 0);
	};

	argument_assignment() {
	    return this.getTypedRuleContext(Argument_assignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterArgumentAssignmentListExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitArgumentAssignmentListExpression(this);
		}
	}


}

EParser.ArgumentAssignmentListExpressionContext = ArgumentAssignmentListExpressionContext;

class ArgumentAssignmentListNoExpressionContext extends Argument_assignment_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // With_argument_assignment_listContext;
        this.item = null; // Argument_assignmentContext;
        super.copyFrom(ctx);
    }

	with_argument_assignment_list() {
	    return this.getTypedRuleContext(With_argument_assignment_listContext,0);
	};

	AND() {
	    return this.getToken(EParser.AND, 0);
	};

	argument_assignment() {
	    return this.getTypedRuleContext(Argument_assignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterArgumentAssignmentListNoExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitArgumentAssignmentListNoExpression(this);
		}
	}


}

EParser.ArgumentAssignmentListNoExpressionContext = ArgumentAssignmentListNoExpressionContext;

class With_argument_assignment_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_with_argument_assignment_list;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ArgumentAssignmentListContext extends With_argument_assignment_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.item = null; // Argument_assignmentContext;
        super.copyFrom(ctx);
    }

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	argument_assignment() {
	    return this.getTypedRuleContext(Argument_assignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterArgumentAssignmentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitArgumentAssignmentList(this);
		}
	}


}

EParser.ArgumentAssignmentListContext = ArgumentAssignmentListContext;

class ArgumentAssignmentListItemContext extends With_argument_assignment_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // With_argument_assignment_listContext;
        this.item = null; // Argument_assignmentContext;
        super.copyFrom(ctx);
    }

	COMMA() {
	    return this.getToken(EParser.COMMA, 0);
	};

	with_argument_assignment_list() {
	    return this.getTypedRuleContext(With_argument_assignment_listContext,0);
	};

	argument_assignment() {
	    return this.getTypedRuleContext(Argument_assignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterArgumentAssignmentListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitArgumentAssignmentListItem(this);
		}
	}


}

EParser.ArgumentAssignmentListItemContext = ArgumentAssignmentListItemContext;

class Argument_assignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_argument_assignment;
        this.exp = null; // ExpressionContext
        this.name = null; // Variable_identifierContext
    }

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterArgument_assignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitArgument_assignment(this);
		}
	}


}



class Assign_instance_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_assign_instance_statement;
        this.inst = null; // Assignable_instanceContext
        this.exp = null; // ExpressionContext
    }

	assign() {
	    return this.getTypedRuleContext(AssignContext,0);
	};

	assignable_instance() {
	    return this.getTypedRuleContext(Assignable_instanceContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAssign_instance_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAssign_instance_statement(this);
		}
	}


}



class Child_instanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_child_instance;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class MemberInstanceContext extends Child_instanceContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Variable_identifierContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(EParser.DOT, 0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMemberInstance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMemberInstance(this);
		}
	}


}

EParser.MemberInstanceContext = MemberInstanceContext;

class ItemInstanceContext extends Child_instanceContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	LBRAK() {
	    return this.getToken(EParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(EParser.RBRAK, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterItemInstance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitItemInstance(this);
		}
	}


}

EParser.ItemInstanceContext = ItemInstanceContext;

class Assign_tuple_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_assign_tuple_statement;
        this.items = null; // Variable_identifier_listContext
        this.exp = null; // ExpressionContext
    }

	assign() {
	    return this.getTypedRuleContext(AssignContext,0);
	};

	variable_identifier_list() {
	    return this.getTypedRuleContext(Variable_identifier_listContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAssign_tuple_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAssign_tuple_statement(this);
		}
	}


}



class LfsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_lfs;
    }

	LF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.LF);
	    } else {
	        return this.getToken(EParser.LF, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterLfs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitLfs(this);
		}
	}


}



class LfpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_lfp;
    }

	LF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.LF);
	    } else {
	        return this.getToken(EParser.LF, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterLfp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitLfp(this);
		}
	}


}



class Ws_plusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_ws_plus;
    }

	LF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.LF);
	    } else {
	        return this.getToken(EParser.LF, i);
	    }
	};


	TAB = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.TAB);
	    } else {
	        return this.getToken(EParser.TAB, i);
	    }
	};


	WS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.WS);
	    } else {
	        return this.getToken(EParser.WS, i);
	    }
	};


	INDENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.INDENT);
	    } else {
	        return this.getToken(EParser.INDENT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterWs_plus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitWs_plus(this);
		}
	}


}



class IndentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_indent;
    }

	INDENT() {
	    return this.getToken(EParser.INDENT, 0);
	};

	LF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.LF);
	    } else {
	        return this.getToken(EParser.LF, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterIndent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitIndent(this);
		}
	}


}



class DedentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_dedent;
    }

	DEDENT() {
	    return this.getToken(EParser.DEDENT, 0);
	};

	LF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.LF);
	    } else {
	        return this.getToken(EParser.LF, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDedent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDedent(this);
		}
	}


}



class Type_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_type_literal;
    }

	TYPE() {
	    return this.getToken(EParser.TYPE, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	category_or_any_type() {
	    return this.getTypedRuleContext(Category_or_any_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterType_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitType_literal(this);
		}
	}


}



class Null_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_null_literal;
    }

	NOTHING() {
	    return this.getToken(EParser.NOTHING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNull_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNull_literal(this);
		}
	}


}



class ReplContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_repl;
    }

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterRepl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitRepl(this);
		}
	}


}



class Declaration_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_declaration_list;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class FullDeclarationListContext extends Declaration_listContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	lfs() {
	    return this.getTypedRuleContext(LfsContext,0);
	};

	EOF() {
	    return this.getToken(EParser.EOF, 0);
	};

	declarations() {
	    return this.getTypedRuleContext(DeclarationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterFullDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitFullDeclarationList(this);
		}
	}


}

EParser.FullDeclarationListContext = FullDeclarationListContext;

class DeclarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_declarations;
    }

	declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDeclarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDeclarations(this);
		}
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_declaration;
    }

	attribute_declaration() {
	    return this.getTypedRuleContext(Attribute_declarationContext,0);
	};

	category_declaration() {
	    return this.getTypedRuleContext(Category_declarationContext,0);
	};

	resource_declaration() {
	    return this.getTypedRuleContext(Resource_declarationContext,0);
	};

	enum_declaration() {
	    return this.getTypedRuleContext(Enum_declarationContext,0);
	};

	widget_declaration() {
	    return this.getTypedRuleContext(Widget_declarationContext,0);
	};

	method_declaration() {
	    return this.getTypedRuleContext(Method_declarationContext,0);
	};

	comment_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Comment_statementContext);
	    } else {
	        return this.getTypedRuleContext(Comment_statementContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	annotation_constructor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Annotation_constructorContext);
	    } else {
	        return this.getTypedRuleContext(Annotation_constructorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDeclaration(this);
		}
	}


}



class Annotation_constructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_annotation_constructor;
        this.name = null; // Annotation_identifierContext
        this.exp = null; // Annotation_argument_valueContext
    }

	annotation_identifier() {
	    return this.getTypedRuleContext(Annotation_identifierContext,0);
	};

	LPAR() {
	    return this.getToken(EParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(EParser.RPAR, 0);
	};

	annotation_argument_value() {
	    return this.getTypedRuleContext(Annotation_argument_valueContext,0);
	};

	annotation_argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Annotation_argumentContext);
	    } else {
	        return this.getTypedRuleContext(Annotation_argumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.COMMA);
	    } else {
	        return this.getToken(EParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAnnotation_constructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAnnotation_constructor(this);
		}
	}


}



class Annotation_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_annotation_identifier;
    }

	ARONDBASE_IDENTIFIER() {
	    return this.getToken(EParser.ARONDBASE_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAnnotation_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAnnotation_identifier(this);
		}
	}


}



class Annotation_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_annotation_argument;
        this.name = null; // Annotation_argument_nameContext
        this.exp = null; // Annotation_argument_valueContext
    }

	EQ() {
	    return this.getToken(EParser.EQ, 0);
	};

	annotation_argument_name() {
	    return this.getTypedRuleContext(Annotation_argument_nameContext,0);
	};

	annotation_argument_value() {
	    return this.getTypedRuleContext(Annotation_argument_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAnnotation_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAnnotation_argument(this);
		}
	}


}



class Annotation_argument_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_annotation_argument_name;
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	};

	GETTER() {
	    return this.getToken(EParser.GETTER, 0);
	};

	SETTER() {
	    return this.getToken(EParser.SETTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAnnotation_argument_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAnnotation_argument_name(this);
		}
	}


}



class Annotation_argument_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_annotation_argument_value;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AnnotationLiteralValueContext extends Annotation_argument_valueContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Literal_expressionContext;
        super.copyFrom(ctx);
    }

	literal_expression() {
	    return this.getTypedRuleContext(Literal_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAnnotationLiteralValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAnnotationLiteralValue(this);
		}
	}


}

EParser.AnnotationLiteralValueContext = AnnotationLiteralValueContext;

class AnnotationTypeValueContext extends Annotation_argument_valueContext {

    constructor(parser, ctx) {
        super(parser);
        this.typ = null; // Primary_typeContext;
        super.copyFrom(ctx);
    }

	primary_type() {
	    return this.getTypedRuleContext(Primary_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAnnotationTypeValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAnnotationTypeValue(this);
		}
	}


}

EParser.AnnotationTypeValueContext = AnnotationTypeValueContext;

class Resource_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_resource_declaration;
    }

	native_resource_declaration() {
	    return this.getTypedRuleContext(Native_resource_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterResource_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitResource_declaration(this);
		}
	}


}



class Enum_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_enum_declaration;
    }

	enum_category_declaration() {
	    return this.getTypedRuleContext(Enum_category_declarationContext,0);
	};

	enum_native_declaration() {
	    return this.getTypedRuleContext(Enum_native_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterEnum_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitEnum_declaration(this);
		}
	}


}



class Native_symbol_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_native_symbol_list;
    }

	native_symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Native_symbolContext);
	    } else {
	        return this.getTypedRuleContext(Native_symbolContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNative_symbol_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNative_symbol_list(this);
		}
	}


}



class Category_symbol_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_category_symbol_list;
    }

	category_symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Category_symbolContext);
	    } else {
	        return this.getTypedRuleContext(Category_symbolContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCategory_symbol_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCategory_symbol_list(this);
		}
	}


}



class Symbol_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_symbol_list;
    }

	symbol_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Symbol_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Symbol_identifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.COMMA);
	    } else {
	        return this.getToken(EParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSymbol_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSymbol_list(this);
		}
	}


}



class Attribute_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_attribute_constraint;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class MatchingSetContext extends Attribute_constraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.source = null; // Set_literalContext;
        super.copyFrom(ctx);
    }

	IN() {
	    return this.getToken(EParser.IN, 0);
	};

	set_literal() {
	    return this.getTypedRuleContext(Set_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMatchingSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMatchingSet(this);
		}
	}


}

EParser.MatchingSetContext = MatchingSetContext;

class MatchingPatternContext extends Attribute_constraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.text = null; // Token;
        super.copyFrom(ctx);
    }

	MATCHING() {
	    return this.getToken(EParser.MATCHING, 0);
	};

	TEXT_LITERAL() {
	    return this.getToken(EParser.TEXT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMatchingPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMatchingPattern(this);
		}
	}


}

EParser.MatchingPatternContext = MatchingPatternContext;

class MatchingListContext extends Attribute_constraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.source = null; // List_literalContext;
        super.copyFrom(ctx);
    }

	IN() {
	    return this.getToken(EParser.IN, 0);
	};

	list_literal() {
	    return this.getTypedRuleContext(List_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMatchingList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMatchingList(this);
		}
	}


}

EParser.MatchingListContext = MatchingListContext;

class MatchingRangeContext extends Attribute_constraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.source = null; // Range_literalContext;
        super.copyFrom(ctx);
    }

	IN() {
	    return this.getToken(EParser.IN, 0);
	};

	range_literal() {
	    return this.getTypedRuleContext(Range_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMatchingRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMatchingRange(this);
		}
	}


}

EParser.MatchingRangeContext = MatchingRangeContext;

class MatchingExpressionContext extends Attribute_constraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	MATCHING() {
	    return this.getToken(EParser.MATCHING, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMatchingExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMatchingExpression(this);
		}
	}


}

EParser.MatchingExpressionContext = MatchingExpressionContext;

class List_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_list_literal;
    }

	LBRAK() {
	    return this.getToken(EParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(EParser.RBRAK, 0);
	};

	MUTABLE() {
	    return this.getToken(EParser.MUTABLE, 0);
	};

	expression_list() {
	    return this.getTypedRuleContext(Expression_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterList_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitList_literal(this);
		}
	}


}



class Set_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_set_literal;
    }

	LT() {
	    return this.getToken(EParser.LT, 0);
	};

	GT() {
	    return this.getToken(EParser.GT, 0);
	};

	MUTABLE() {
	    return this.getToken(EParser.MUTABLE, 0);
	};

	expression_list() {
	    return this.getTypedRuleContext(Expression_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSet_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSet_literal(this);
		}
	}


}



class Expression_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_expression_list;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.COMMA);
	    } else {
	        return this.getToken(EParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterExpression_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitExpression_list(this);
		}
	}


}



class Range_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_range_literal;
        this.low = null; // ExpressionContext
        this.high = null; // ExpressionContext
    }

	LBRAK() {
	    return this.getToken(EParser.LBRAK, 0);
	};

	RANGE() {
	    return this.getToken(EParser.RANGE, 0);
	};

	RBRAK() {
	    return this.getToken(EParser.RBRAK, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterRange_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitRange_literal(this);
		}
	}


}



class TypedefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_typedef;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class IteratorTypeContext extends TypedefContext {

    constructor(parser, ctx) {
        super(parser);
        this.i = null; // TypedefContext;
        super.copyFrom(ctx);
    }

	ITERATOR() {
	    return this.getToken(EParser.ITERATOR, 0);
	};

	LT() {
	    return this.getToken(EParser.LT, 0);
	};

	GT() {
	    return this.getToken(EParser.GT, 0);
	};

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterIteratorType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitIteratorType(this);
		}
	}


}

EParser.IteratorTypeContext = IteratorTypeContext;

class SetTypeContext extends TypedefContext {

    constructor(parser, ctx) {
        super(parser);
        this.s = null; // TypedefContext;
        super.copyFrom(ctx);
    }

	LTGT() {
	    return this.getToken(EParser.LTGT, 0);
	};

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSetType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSetType(this);
		}
	}


}

EParser.SetTypeContext = SetTypeContext;

class ListTypeContext extends TypedefContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // TypedefContext;
        super.copyFrom(ctx);
    }

	LBRAK() {
	    return this.getToken(EParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(EParser.RBRAK, 0);
	};

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterListType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitListType(this);
		}
	}


}

EParser.ListTypeContext = ListTypeContext;

class DictTypeContext extends TypedefContext {

    constructor(parser, ctx) {
        super(parser);
        this.d = null; // TypedefContext;
        super.copyFrom(ctx);
    }

	LTCOLONGT() {
	    return this.getToken(EParser.LTCOLONGT, 0);
	};

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDictType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDictType(this);
		}
	}


}

EParser.DictTypeContext = DictTypeContext;

class CursorTypeContext extends TypedefContext {

    constructor(parser, ctx) {
        super(parser);
        this.c = null; // TypedefContext;
        super.copyFrom(ctx);
    }

	CURSOR() {
	    return this.getToken(EParser.CURSOR, 0);
	};

	LT() {
	    return this.getToken(EParser.LT, 0);
	};

	GT() {
	    return this.getToken(EParser.GT, 0);
	};

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCursorType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCursorType(this);
		}
	}


}

EParser.CursorTypeContext = CursorTypeContext;

class PrimaryTypeContext extends TypedefContext {

    constructor(parser, ctx) {
        super(parser);
        this.p = null; // Primary_typeContext;
        super.copyFrom(ctx);
    }

	primary_type() {
	    return this.getTypedRuleContext(Primary_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPrimaryType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPrimaryType(this);
		}
	}


}

EParser.PrimaryTypeContext = PrimaryTypeContext;

class Primary_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_primary_type;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class NativeTypeContext extends Primary_typeContext {

    constructor(parser, ctx) {
        super(parser);
        this.n = null; // Native_typeContext;
        super.copyFrom(ctx);
    }

	native_type() {
	    return this.getTypedRuleContext(Native_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNativeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNativeType(this);
		}
	}


}

EParser.NativeTypeContext = NativeTypeContext;

class CategoryTypeContext extends Primary_typeContext {

    constructor(parser, ctx) {
        super(parser);
        this.c = null; // Category_typeContext;
        super.copyFrom(ctx);
    }

	category_type() {
	    return this.getTypedRuleContext(Category_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCategoryType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCategoryType(this);
		}
	}


}

EParser.CategoryTypeContext = CategoryTypeContext;

class Native_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_native_type;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PeriodTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PERIOD() {
	    return this.getToken(EParser.PERIOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPeriodType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPeriodType(this);
		}
	}


}

EParser.PeriodTypeContext = PeriodTypeContext;

class HtmlTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	HTML() {
	    return this.getToken(EParser.HTML, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterHtmlType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitHtmlType(this);
		}
	}


}

EParser.HtmlTypeContext = HtmlTypeContext;

class CssTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CSS() {
	    return this.getToken(EParser.CSS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCssType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCssType(this);
		}
	}


}

EParser.CssTypeContext = CssTypeContext;

class BooleanTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BOOLEAN() {
	    return this.getToken(EParser.BOOLEAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterBooleanType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitBooleanType(this);
		}
	}


}

EParser.BooleanTypeContext = BooleanTypeContext;

class DocumentTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DOCUMENT() {
	    return this.getToken(EParser.DOCUMENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDocumentType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDocumentType(this);
		}
	}


}

EParser.DocumentTypeContext = DocumentTypeContext;

class CharacterTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHARACTER() {
	    return this.getToken(EParser.CHARACTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCharacterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCharacterType(this);
		}
	}


}

EParser.CharacterTypeContext = CharacterTypeContext;

class VersionTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VERSION() {
	    return this.getToken(EParser.VERSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterVersionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitVersionType(this);
		}
	}


}

EParser.VersionTypeContext = VersionTypeContext;

class TextTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TEXT() {
	    return this.getToken(EParser.TEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterTextType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitTextType(this);
		}
	}


}

EParser.TextTypeContext = TextTypeContext;

class ImageTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IMAGE() {
	    return this.getToken(EParser.IMAGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterImageType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitImageType(this);
		}
	}


}

EParser.ImageTypeContext = ImageTypeContext;

class TimeTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TIME() {
	    return this.getToken(EParser.TIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterTimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitTimeType(this);
		}
	}


}

EParser.TimeTypeContext = TimeTypeContext;

class IntegerTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTEGER() {
	    return this.getToken(EParser.INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterIntegerType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitIntegerType(this);
		}
	}


}

EParser.IntegerTypeContext = IntegerTypeContext;

class DateTimeTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DATETIME() {
	    return this.getToken(EParser.DATETIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDateTimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDateTimeType(this);
		}
	}


}

EParser.DateTimeTypeContext = DateTimeTypeContext;

class BlobTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BLOB() {
	    return this.getToken(EParser.BLOB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterBlobType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitBlobType(this);
		}
	}


}

EParser.BlobTypeContext = BlobTypeContext;

class UUIDTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UUID() {
	    return this.getToken(EParser.UUID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterUUIDType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitUUIDType(this);
		}
	}


}

EParser.UUIDTypeContext = UUIDTypeContext;

class DecimalTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DECIMAL() {
	    return this.getToken(EParser.DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDecimalType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDecimalType(this);
		}
	}


}

EParser.DecimalTypeContext = DecimalTypeContext;

class CodeTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CODE() {
	    return this.getToken(EParser.CODE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCodeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCodeType(this);
		}
	}


}

EParser.CodeTypeContext = CodeTypeContext;

class DateTypeContext extends Native_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DATE() {
	    return this.getToken(EParser.DATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDateType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDateType(this);
		}
	}


}

EParser.DateTypeContext = DateTypeContext;

class Category_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_category_type;
        this.t1 = null; // Token
    }

	TYPE_IDENTIFIER() {
	    return this.getToken(EParser.TYPE_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCategory_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCategory_type(this);
		}
	}


}



class Mutable_category_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_mutable_category_type;
    }

	category_type() {
	    return this.getTypedRuleContext(Category_typeContext,0);
	};

	MUTABLE() {
	    return this.getToken(EParser.MUTABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMutable_category_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMutable_category_type(this);
		}
	}


}



class Code_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_code_type;
        this.t1 = null; // Token
    }

	CODE() {
	    return this.getToken(EParser.CODE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCode_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCode_type(this);
		}
	}


}



class Category_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_category_declaration;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ConcreteCategoryDeclarationContext extends Category_declarationContext {

    constructor(parser, ctx) {
        super(parser);
        this.decl = null; // Concrete_category_declarationContext;
        super.copyFrom(ctx);
    }

	concrete_category_declaration() {
	    return this.getTypedRuleContext(Concrete_category_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterConcreteCategoryDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitConcreteCategoryDeclaration(this);
		}
	}


}

EParser.ConcreteCategoryDeclarationContext = ConcreteCategoryDeclarationContext;

class NativeCategoryDeclarationContext extends Category_declarationContext {

    constructor(parser, ctx) {
        super(parser);
        this.decl = null; // Native_category_declarationContext;
        super.copyFrom(ctx);
    }

	native_category_declaration() {
	    return this.getTypedRuleContext(Native_category_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNativeCategoryDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNativeCategoryDeclaration(this);
		}
	}


}

EParser.NativeCategoryDeclarationContext = NativeCategoryDeclarationContext;

class SingletonCategoryDeclarationContext extends Category_declarationContext {

    constructor(parser, ctx) {
        super(parser);
        this.decl = null; // Singleton_category_declarationContext;
        super.copyFrom(ctx);
    }

	singleton_category_declaration() {
	    return this.getTypedRuleContext(Singleton_category_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSingletonCategoryDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSingletonCategoryDeclaration(this);
		}
	}


}

EParser.SingletonCategoryDeclarationContext = SingletonCategoryDeclarationContext;

class Widget_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_widget_declaration;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ConcreteWidgetDeclarationContext extends Widget_declarationContext {

    constructor(parser, ctx) {
        super(parser);
        this.decl = null; // Concrete_widget_declarationContext;
        super.copyFrom(ctx);
    }

	concrete_widget_declaration() {
	    return this.getTypedRuleContext(Concrete_widget_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterConcreteWidgetDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitConcreteWidgetDeclaration(this);
		}
	}


}

EParser.ConcreteWidgetDeclarationContext = ConcreteWidgetDeclarationContext;

class NativeWidgetDeclarationContext extends Widget_declarationContext {

    constructor(parser, ctx) {
        super(parser);
        this.decl = null; // Native_widget_declarationContext;
        super.copyFrom(ctx);
    }

	native_widget_declaration() {
	    return this.getTypedRuleContext(Native_widget_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNativeWidgetDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNativeWidgetDeclaration(this);
		}
	}


}

EParser.NativeWidgetDeclarationContext = NativeWidgetDeclarationContext;

class Type_identifier_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_type_identifier_list;
    }

	type_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Type_identifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.COMMA);
	    } else {
	        return this.getToken(EParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterType_identifier_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitType_identifier_list(this);
		}
	}


}



class Method_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_method_identifier;
    }

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMethod_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMethod_identifier(this);
		}
	}


}



class Identifier_or_keywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_identifier_or_keyword;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterIdentifier_or_keyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitIdentifier_or_keyword(this);
		}
	}


}



class Nospace_hyphen_identifier_or_keywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_nospace_hyphen_identifier_or_keyword;
    }

	MINUS() {
	    return this.getToken(EParser.MINUS, 0);
	};

	nospace_identifier_or_keyword() {
	    return this.getTypedRuleContext(Nospace_identifier_or_keywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNospace_hyphen_identifier_or_keyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNospace_hyphen_identifier_or_keyword(this);
		}
	}


}



class Nospace_identifier_or_keywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_nospace_identifier_or_keyword;
    }

	identifier_or_keyword() {
	    return this.getTypedRuleContext(Identifier_or_keywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNospace_identifier_or_keyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNospace_identifier_or_keyword(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_identifier;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TypeIdentifierContext extends IdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterTypeIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitTypeIdentifier(this);
		}
	}


}

EParser.TypeIdentifierContext = TypeIdentifierContext;

class SymbolIdentifierContext extends IdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	symbol_identifier() {
	    return this.getTypedRuleContext(Symbol_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSymbolIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSymbolIdentifier(this);
		}
	}


}

EParser.SymbolIdentifierContext = SymbolIdentifierContext;

class VariableIdentifierContext extends IdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterVariableIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitVariableIdentifier(this);
		}
	}


}

EParser.VariableIdentifierContext = VariableIdentifierContext;

class Member_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_member_identifier;
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	};

	CATEGORY() {
	    return this.getToken(EParser.CATEGORY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMember_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMember_identifier(this);
		}
	}


}



class Variable_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_variable_identifier;
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterVariable_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitVariable_identifier(this);
		}
	}


}



class Attribute_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_attribute_identifier;
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	};

	STORABLE() {
	    return this.getToken(EParser.STORABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAttribute_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAttribute_identifier(this);
		}
	}


}



class Type_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_type_identifier;
    }

	TYPE_IDENTIFIER() {
	    return this.getToken(EParser.TYPE_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterType_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitType_identifier(this);
		}
	}


}



class Symbol_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_symbol_identifier;
    }

	SYMBOL_IDENTIFIER() {
	    return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSymbol_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSymbol_identifier(this);
		}
	}


}



class Argument_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_argument_list;
    }

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.COMMA);
	    } else {
	        return this.getToken(EParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterArgument_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitArgument_list(this);
		}
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_argument;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class OperatorArgumentContext extends ArgumentContext {

    constructor(parser, ctx) {
        super(parser);
        this.arg = null; // Operator_argumentContext;
        super.copyFrom(ctx);
    }

	operator_argument() {
	    return this.getTypedRuleContext(Operator_argumentContext,0);
	};

	MUTABLE() {
	    return this.getToken(EParser.MUTABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterOperatorArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitOperatorArgument(this);
		}
	}


}

EParser.OperatorArgumentContext = OperatorArgumentContext;

class CodeArgumentContext extends ArgumentContext {

    constructor(parser, ctx) {
        super(parser);
        this.arg = null; // Code_argumentContext;
        super.copyFrom(ctx);
    }

	code_argument() {
	    return this.getTypedRuleContext(Code_argumentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCodeArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCodeArgument(this);
		}
	}


}

EParser.CodeArgumentContext = CodeArgumentContext;

class Operator_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_operator_argument;
    }

	named_argument() {
	    return this.getTypedRuleContext(Named_argumentContext,0);
	};

	typed_argument() {
	    return this.getTypedRuleContext(Typed_argumentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterOperator_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitOperator_argument(this);
		}
	}


}



class Named_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_named_argument;
    }

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	EQ() {
	    return this.getToken(EParser.EQ, 0);
	};

	literal_expression() {
	    return this.getTypedRuleContext(Literal_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNamed_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNamed_argument(this);
		}
	}


}



class Code_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_code_argument;
        this.name = null; // Variable_identifierContext
    }

	code_type() {
	    return this.getTypedRuleContext(Code_typeContext,0);
	};

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCode_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCode_argument(this);
		}
	}


}



class Category_or_any_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_category_or_any_type;
    }

	typedef() {
	    return this.getTypedRuleContext(TypedefContext,0);
	};

	any_type() {
	    return this.getTypedRuleContext(Any_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCategory_or_any_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCategory_or_any_type(this);
		}
	}


}



class Any_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_any_type;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AnyListTypeContext extends Any_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	any_type() {
	    return this.getTypedRuleContext(Any_typeContext,0);
	};

	LBRAK() {
	    return this.getToken(EParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(EParser.RBRAK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAnyListType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAnyListType(this);
		}
	}


}

EParser.AnyListTypeContext = AnyListTypeContext;

class AnyTypeContext extends Any_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ANY() {
	    return this.getToken(EParser.ANY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAnyType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAnyType(this);
		}
	}


}

EParser.AnyTypeContext = AnyTypeContext;

class AnyDictTypeContext extends Any_typeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	any_type() {
	    return this.getTypedRuleContext(Any_typeContext,0);
	};

	LCURL() {
	    return this.getToken(EParser.LCURL, 0);
	};

	RCURL() {
	    return this.getToken(EParser.RCURL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAnyDictType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAnyDictType(this);
		}
	}


}

EParser.AnyDictTypeContext = AnyDictTypeContext;

class Member_method_declaration_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_member_method_declaration_list;
    }

	member_method_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Member_method_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Member_method_declarationContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMember_method_declaration_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMember_method_declaration_list(this);
		}
	}


}



class Member_method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_member_method_declaration;
    }

	setter_method_declaration() {
	    return this.getTypedRuleContext(Setter_method_declarationContext,0);
	};

	getter_method_declaration() {
	    return this.getTypedRuleContext(Getter_method_declarationContext,0);
	};

	concrete_method_declaration() {
	    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
	};

	abstract_method_declaration() {
	    return this.getTypedRuleContext(Abstract_method_declarationContext,0);
	};

	operator_method_declaration() {
	    return this.getTypedRuleContext(Operator_method_declarationContext,0);
	};

	comment_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Comment_statementContext);
	    } else {
	        return this.getTypedRuleContext(Comment_statementContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	annotation_constructor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Annotation_constructorContext);
	    } else {
	        return this.getTypedRuleContext(Annotation_constructorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMember_method_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMember_method_declaration(this);
		}
	}


}



class Native_member_method_declaration_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_native_member_method_declaration_list;
    }

	native_member_method_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Native_member_method_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Native_member_method_declarationContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNative_member_method_declaration_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNative_member_method_declaration_list(this);
		}
	}


}



class Native_member_method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_native_member_method_declaration;
    }

	native_getter_declaration() {
	    return this.getTypedRuleContext(Native_getter_declarationContext,0);
	};

	native_setter_declaration() {
	    return this.getTypedRuleContext(Native_setter_declarationContext,0);
	};

	native_method_declaration() {
	    return this.getTypedRuleContext(Native_method_declarationContext,0);
	};

	comment_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Comment_statementContext);
	    } else {
	        return this.getTypedRuleContext(Comment_statementContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	annotation_constructor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Annotation_constructorContext);
	    } else {
	        return this.getTypedRuleContext(Annotation_constructorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNative_member_method_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNative_member_method_declaration(this);
		}
	}


}



class Native_category_bindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_native_category_binding;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Python2CategoryBindingContext extends Native_category_bindingContext {

    constructor(parser, ctx) {
        super(parser);
        this.binding = null; // Python_category_bindingContext;
        super.copyFrom(ctx);
    }

	PYTHON2() {
	    return this.getToken(EParser.PYTHON2, 0);
	};

	python_category_binding() {
	    return this.getTypedRuleContext(Python_category_bindingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPython2CategoryBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPython2CategoryBinding(this);
		}
	}


}

EParser.Python2CategoryBindingContext = Python2CategoryBindingContext;

class Python3CategoryBindingContext extends Native_category_bindingContext {

    constructor(parser, ctx) {
        super(parser);
        this.binding = null; // Python_category_bindingContext;
        super.copyFrom(ctx);
    }

	PYTHON3() {
	    return this.getToken(EParser.PYTHON3, 0);
	};

	python_category_binding() {
	    return this.getTypedRuleContext(Python_category_bindingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPython3CategoryBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPython3CategoryBinding(this);
		}
	}


}

EParser.Python3CategoryBindingContext = Python3CategoryBindingContext;

class JavaCategoryBindingContext extends Native_category_bindingContext {

    constructor(parser, ctx) {
        super(parser);
        this.binding = null; // Java_class_identifier_expressionContext;
        super.copyFrom(ctx);
    }

	JAVA() {
	    return this.getToken(EParser.JAVA, 0);
	};

	java_class_identifier_expression() {
	    return this.getTypedRuleContext(Java_class_identifier_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaCategoryBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaCategoryBinding(this);
		}
	}


}

EParser.JavaCategoryBindingContext = JavaCategoryBindingContext;

class CSharpCategoryBindingContext extends Native_category_bindingContext {

    constructor(parser, ctx) {
        super(parser);
        this.binding = null; // Csharp_identifier_expressionContext;
        super.copyFrom(ctx);
    }

	CSHARP() {
	    return this.getToken(EParser.CSHARP, 0);
	};

	csharp_identifier_expression() {
	    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCSharpCategoryBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCSharpCategoryBinding(this);
		}
	}


}

EParser.CSharpCategoryBindingContext = CSharpCategoryBindingContext;

class JavaScriptCategoryBindingContext extends Native_category_bindingContext {

    constructor(parser, ctx) {
        super(parser);
        this.binding = null; // Javascript_category_bindingContext;
        super.copyFrom(ctx);
    }

	JAVASCRIPT() {
	    return this.getToken(EParser.JAVASCRIPT, 0);
	};

	javascript_category_binding() {
	    return this.getTypedRuleContext(Javascript_category_bindingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaScriptCategoryBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaScriptCategoryBinding(this);
		}
	}


}

EParser.JavaScriptCategoryBindingContext = JavaScriptCategoryBindingContext;

class Python_category_bindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_python_category_binding;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	python_module() {
	    return this.getTypedRuleContext(Python_moduleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPython_category_binding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPython_category_binding(this);
		}
	}


}



class Python_moduleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_python_module;
    }

	FROM() {
	    return this.getToken(EParser.FROM, 0);
	};

	module_token() {
	    return this.getTypedRuleContext(Module_tokenContext,0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	python_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Python_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Python_identifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.DOT);
	    } else {
	        return this.getToken(EParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPython_module(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPython_module(this);
		}
	}


}



class Javascript_category_bindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_javascript_category_binding;
    }

	javascript_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Javascript_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Javascript_identifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.DOT);
	    } else {
	        return this.getToken(EParser.DOT, i);
	    }
	};


	javascript_module() {
	    return this.getTypedRuleContext(Javascript_moduleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascript_category_binding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascript_category_binding(this);
		}
	}


}



class Javascript_moduleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_javascript_module;
    }

	FROM() {
	    return this.getToken(EParser.FROM, 0);
	};

	module_token() {
	    return this.getTypedRuleContext(Module_tokenContext,0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	javascript_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Javascript_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Javascript_identifierContext,i);
	    }
	};

	SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.SLASH);
	    } else {
	        return this.getToken(EParser.SLASH, i);
	    }
	};


	DOT() {
	    return this.getToken(EParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascript_module(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascript_module(this);
		}
	}


}



class Variable_identifier_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_variable_identifier_list;
    }

	variable_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Variable_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Variable_identifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.COMMA);
	    } else {
	        return this.getToken(EParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterVariable_identifier_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitVariable_identifier_list(this);
		}
	}


}



class Attribute_identifier_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_attribute_identifier_list;
    }

	attribute_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Attribute_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Attribute_identifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.COMMA);
	    } else {
	        return this.getToken(EParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAttribute_identifier_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAttribute_identifier_list(this);
		}
	}


}



class Method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_method_declaration;
    }

	abstract_method_declaration() {
	    return this.getTypedRuleContext(Abstract_method_declarationContext,0);
	};

	concrete_method_declaration() {
	    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
	};

	native_method_declaration() {
	    return this.getTypedRuleContext(Native_method_declarationContext,0);
	};

	test_method_declaration() {
	    return this.getTypedRuleContext(Test_method_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMethod_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMethod_declaration(this);
		}
	}


}



class Comment_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_comment_statement;
    }

	COMMENT() {
	    return this.getToken(EParser.COMMENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterComment_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitComment_statement(this);
		}
	}


}



class Native_statement_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_native_statement_list;
    }

	native_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Native_statementContext);
	    } else {
	        return this.getTypedRuleContext(Native_statementContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNative_statement_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNative_statement_list(this);
		}
	}


}



class Native_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_native_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CSharpNativeStatementContext extends Native_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CSHARP() {
	    return this.getToken(EParser.CSHARP, 0);
	};

	csharp_statement() {
	    return this.getTypedRuleContext(Csharp_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCSharpNativeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCSharpNativeStatement(this);
		}
	}


}

EParser.CSharpNativeStatementContext = CSharpNativeStatementContext;

class JavaNativeStatementContext extends Native_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	JAVA() {
	    return this.getToken(EParser.JAVA, 0);
	};

	java_statement() {
	    return this.getTypedRuleContext(Java_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaNativeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaNativeStatement(this);
		}
	}


}

EParser.JavaNativeStatementContext = JavaNativeStatementContext;

class JavaScriptNativeStatementContext extends Native_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	JAVASCRIPT() {
	    return this.getToken(EParser.JAVASCRIPT, 0);
	};

	javascript_native_statement() {
	    return this.getTypedRuleContext(Javascript_native_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaScriptNativeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaScriptNativeStatement(this);
		}
	}


}

EParser.JavaScriptNativeStatementContext = JavaScriptNativeStatementContext;

class Python2NativeStatementContext extends Native_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PYTHON2() {
	    return this.getToken(EParser.PYTHON2, 0);
	};

	python_native_statement() {
	    return this.getTypedRuleContext(Python_native_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPython2NativeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPython2NativeStatement(this);
		}
	}


}

EParser.Python2NativeStatementContext = Python2NativeStatementContext;

class Python3NativeStatementContext extends Native_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PYTHON3() {
	    return this.getToken(EParser.PYTHON3, 0);
	};

	python_native_statement() {
	    return this.getTypedRuleContext(Python_native_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPython3NativeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPython3NativeStatement(this);
		}
	}


}

EParser.Python3NativeStatementContext = Python3NativeStatementContext;

class Python_native_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_python_native_statement;
    }

	python_statement() {
	    return this.getTypedRuleContext(Python_statementContext,0);
	};

	SEMI() {
	    return this.getToken(EParser.SEMI, 0);
	};

	python_module() {
	    return this.getTypedRuleContext(Python_moduleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPython_native_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPython_native_statement(this);
		}
	}


}



class Javascript_native_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_javascript_native_statement;
    }

	javascript_statement() {
	    return this.getTypedRuleContext(Javascript_statementContext,0);
	};

	SEMI() {
	    return this.getToken(EParser.SEMI, 0);
	};

	javascript_module() {
	    return this.getTypedRuleContext(Javascript_moduleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascript_native_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascript_native_statement(this);
		}
	}


}



class Statement_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_statement_list;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterStatement_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitStatement_list(this);
		}
	}


}



class Assertion_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_assertion_list;
    }

	assertion = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssertionContext);
	    } else {
	        return this.getTypedRuleContext(AssertionContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAssertion_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAssertion_list(this);
		}
	}


}



class Switch_case_statement_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_switch_case_statement_list;
    }

	switch_case_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Switch_case_statementContext);
	    } else {
	        return this.getTypedRuleContext(Switch_case_statementContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSwitch_case_statement_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSwitch_case_statement_list(this);
		}
	}


}



class Catch_statement_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_catch_statement_list;
    }

	catch_statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Catch_statementContext);
	    } else {
	        return this.getTypedRuleContext(Catch_statementContext,i);
	    }
	};

	lfp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfpContext);
	    } else {
	        return this.getTypedRuleContext(LfpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCatch_statement_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCatch_statement_list(this);
		}
	}


}



class Literal_collectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_literal_collection;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class LiteralListLiteralContext extends Literal_collectionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LBRAK() {
	    return this.getToken(EParser.LBRAK, 0);
	};

	literal_list_literal() {
	    return this.getTypedRuleContext(Literal_list_literalContext,0);
	};

	RBRAK() {
	    return this.getToken(EParser.RBRAK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterLiteralListLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitLiteralListLiteral(this);
		}
	}


}

EParser.LiteralListLiteralContext = LiteralListLiteralContext;

class LiteralRangeLiteralContext extends Literal_collectionContext {

    constructor(parser, ctx) {
        super(parser);
        this.low = null; // Atomic_literalContext;
        this.high = null; // Atomic_literalContext;
        super.copyFrom(ctx);
    }

	LBRAK() {
	    return this.getToken(EParser.LBRAK, 0);
	};

	RANGE() {
	    return this.getToken(EParser.RANGE, 0);
	};

	RBRAK() {
	    return this.getToken(EParser.RBRAK, 0);
	};

	atomic_literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Atomic_literalContext);
	    } else {
	        return this.getTypedRuleContext(Atomic_literalContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterLiteralRangeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitLiteralRangeLiteral(this);
		}
	}


}

EParser.LiteralRangeLiteralContext = LiteralRangeLiteralContext;

class LiteralSetLiteralContext extends Literal_collectionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LT() {
	    return this.getToken(EParser.LT, 0);
	};

	literal_list_literal() {
	    return this.getTypedRuleContext(Literal_list_literalContext,0);
	};

	GT() {
	    return this.getToken(EParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterLiteralSetLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitLiteralSetLiteral(this);
		}
	}


}

EParser.LiteralSetLiteralContext = LiteralSetLiteralContext;

class Atomic_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_atomic_literal;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class MinIntegerLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MIN_INTEGER() {
	    return this.getToken(EParser.MIN_INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMinIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMinIntegerLiteral(this);
		}
	}


}

EParser.MinIntegerLiteralContext = MinIntegerLiteralContext;

class DateLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DATE_LITERAL() {
	    return this.getToken(EParser.DATE_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDateLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDateLiteral(this);
		}
	}


}

EParser.DateLiteralContext = DateLiteralContext;

class SymbolLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	symbol_identifier() {
	    return this.getTypedRuleContext(Symbol_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSymbolLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSymbolLiteral(this);
		}
	}


}

EParser.SymbolLiteralContext = SymbolLiteralContext;

class BooleanLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BOOLEAN_LITERAL() {
	    return this.getToken(EParser.BOOLEAN_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}

EParser.BooleanLiteralContext = BooleanLiteralContext;

class VersionLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VERSION_LITERAL() {
	    return this.getToken(EParser.VERSION_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterVersionLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitVersionLiteral(this);
		}
	}


}

EParser.VersionLiteralContext = VersionLiteralContext;

class HexadecimalLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	HEXA_LITERAL() {
	    return this.getToken(EParser.HEXA_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterHexadecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitHexadecimalLiteral(this);
		}
	}


}

EParser.HexadecimalLiteralContext = HexadecimalLiteralContext;

class UUIDLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UUID_LITERAL() {
	    return this.getToken(EParser.UUID_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterUUIDLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitUUIDLiteral(this);
		}
	}


}

EParser.UUIDLiteralContext = UUIDLiteralContext;

class MaxIntegerLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MAX_INTEGER() {
	    return this.getToken(EParser.MAX_INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMaxIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMaxIntegerLiteral(this);
		}
	}


}

EParser.MaxIntegerLiteralContext = MaxIntegerLiteralContext;

class TypeLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	type_literal() {
	    return this.getTypedRuleContext(Type_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterTypeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitTypeLiteral(this);
		}
	}


}

EParser.TypeLiteralContext = TypeLiteralContext;

class DateTimeLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DATETIME_LITERAL() {
	    return this.getToken(EParser.DATETIME_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDateTimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDateTimeLiteral(this);
		}
	}


}

EParser.DateTimeLiteralContext = DateTimeLiteralContext;

class PeriodLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PERIOD_LITERAL() {
	    return this.getToken(EParser.PERIOD_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPeriodLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPeriodLiteral(this);
		}
	}


}

EParser.PeriodLiteralContext = PeriodLiteralContext;

class DecimalLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DECIMAL_LITERAL() {
	    return this.getToken(EParser.DECIMAL_LITERAL, 0);
	};

	MINUS() {
	    return this.getToken(EParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDecimalLiteral(this);
		}
	}


}

EParser.DecimalLiteralContext = DecimalLiteralContext;

class TextLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TEXT_LITERAL() {
	    return this.getToken(EParser.TEXT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterTextLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitTextLiteral(this);
		}
	}


}

EParser.TextLiteralContext = TextLiteralContext;

class NullLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	null_literal() {
	    return this.getTypedRuleContext(Null_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNullLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNullLiteral(this);
		}
	}


}

EParser.NullLiteralContext = NullLiteralContext;

class IntegerLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTEGER_LITERAL() {
	    return this.getToken(EParser.INTEGER_LITERAL, 0);
	};

	MINUS() {
	    return this.getToken(EParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitIntegerLiteral(this);
		}
	}


}

EParser.IntegerLiteralContext = IntegerLiteralContext;

class TimeLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TIME_LITERAL() {
	    return this.getToken(EParser.TIME_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterTimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitTimeLiteral(this);
		}
	}


}

EParser.TimeLiteralContext = TimeLiteralContext;

class CharacterLiteralContext extends Atomic_literalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHAR_LITERAL() {
	    return this.getToken(EParser.CHAR_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCharacterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCharacterLiteral(this);
		}
	}


}

EParser.CharacterLiteralContext = CharacterLiteralContext;

class Literal_list_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_literal_list_literal;
    }

	atomic_literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Atomic_literalContext);
	    } else {
	        return this.getTypedRuleContext(Atomic_literalContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.COMMA);
	    } else {
	        return this.getToken(EParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterLiteral_list_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitLiteral_list_literal(this);
		}
	}


}



class This_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_this_expression;
    }

	SELF() {
	    return this.getToken(EParser.SELF, 0);
	};

	THIS() {
	    return this.getToken(EParser.THIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterThis_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitThis_expression(this);
		}
	}


}



class Super_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_super_expression;
    }

	SUPER() {
	    return this.getToken(EParser.SUPER, 0);
	};

	category_type() {
	    return this.getTypedRuleContext(Category_typeContext,0);
	};

	DOT() {
	    return this.getToken(EParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSuper_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSuper_expression(this);
		}
	}


}



class Parenthesis_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_parenthesis_expression;
    }

	LPAR() {
	    return this.getToken(EParser.LPAR, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAR() {
	    return this.getToken(EParser.RPAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterParenthesis_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitParenthesis_expression(this);
		}
	}


}



class Literal_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_literal_expression;
    }

	atomic_literal() {
	    return this.getTypedRuleContext(Atomic_literalContext,0);
	};

	collection_literal() {
	    return this.getTypedRuleContext(Collection_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterLiteral_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitLiteral_expression(this);
		}
	}


}



class Collection_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_collection_literal;
    }

	range_literal() {
	    return this.getTypedRuleContext(Range_literalContext,0);
	};

	list_literal() {
	    return this.getTypedRuleContext(List_literalContext,0);
	};

	set_literal() {
	    return this.getTypedRuleContext(Set_literalContext,0);
	};

	dict_literal() {
	    return this.getTypedRuleContext(Dict_literalContext,0);
	};

	document_literal() {
	    return this.getTypedRuleContext(Document_literalContext,0);
	};

	tuple_literal() {
	    return this.getTypedRuleContext(Tuple_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCollection_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCollection_literal(this);
		}
	}


}



class Tuple_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_tuple_literal;
    }

	LPAR() {
	    return this.getToken(EParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(EParser.RPAR, 0);
	};

	MUTABLE() {
	    return this.getToken(EParser.MUTABLE, 0);
	};

	expression_tuple() {
	    return this.getTypedRuleContext(Expression_tupleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterTuple_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitTuple_literal(this);
		}
	}


}



class Dict_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_dict_literal;
    }

	LTCOLONGT() {
	    return this.getToken(EParser.LTCOLONGT, 0);
	};

	MUTABLE() {
	    return this.getToken(EParser.MUTABLE, 0);
	};

	LT() {
	    return this.getToken(EParser.LT, 0);
	};

	dict_entry_list() {
	    return this.getTypedRuleContext(Dict_entry_listContext,0);
	};

	GT() {
	    return this.getToken(EParser.GT, 0);
	};

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDict_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDict_literal(this);
		}
	}


}



class Document_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_document_literal;
    }

	LCURL() {
	    return this.getToken(EParser.LCURL, 0);
	};

	RCURL() {
	    return this.getToken(EParser.RCURL, 0);
	};

	doc_entry_list() {
	    return this.getTypedRuleContext(Doc_entry_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDocument_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDocument_literal(this);
		}
	}


}



class Expression_tupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_expression_tuple;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.COMMA);
	    } else {
	        return this.getToken(EParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterExpression_tuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitExpression_tuple(this);
		}
	}


}



class Doc_entry_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_doc_entry_list;
    }

	doc_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Doc_entryContext);
	    } else {
	        return this.getTypedRuleContext(Doc_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.COMMA);
	    } else {
	        return this.getToken(EParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDoc_entry_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDoc_entry_list(this);
		}
	}


}



class Doc_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_doc_entry;
        this.key = null; // Doc_keyContext
        this.value = null; // ExpressionContext
    }

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	doc_key() {
	    return this.getTypedRuleContext(Doc_keyContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDoc_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDoc_entry(this);
		}
	}


}



class Doc_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_doc_key;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DocKeyIdentifierContext extends Doc_keyContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Identifier_or_keywordContext;
        super.copyFrom(ctx);
    }

	identifier_or_keyword() {
	    return this.getTypedRuleContext(Identifier_or_keywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDocKeyIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDocKeyIdentifier(this);
		}
	}


}

EParser.DocKeyIdentifierContext = DocKeyIdentifierContext;

class DocKeyTextContext extends Doc_keyContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Token;
        super.copyFrom(ctx);
    }

	TEXT_LITERAL() {
	    return this.getToken(EParser.TEXT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDocKeyText(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDocKeyText(this);
		}
	}


}

EParser.DocKeyTextContext = DocKeyTextContext;

class Dict_entry_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_dict_entry_list;
    }

	dict_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Dict_entryContext);
	    } else {
	        return this.getTypedRuleContext(Dict_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.COMMA);
	    } else {
	        return this.getToken(EParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDict_entry_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDict_entry_list(this);
		}
	}


}



class Dict_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_dict_entry;
        this.key = null; // Dict_keyContext
        this.value = null; // ExpressionContext
    }

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	dict_key() {
	    return this.getTypedRuleContext(Dict_keyContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDict_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDict_entry(this);
		}
	}


}



class Dict_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_dict_key;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DictKeyIdentifierContext extends Dict_keyContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Identifier_or_keywordContext;
        super.copyFrom(ctx);
    }

	identifier_or_keyword() {
	    return this.getTypedRuleContext(Identifier_or_keywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDictKeyIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDictKeyIdentifier(this);
		}
	}


}

EParser.DictKeyIdentifierContext = DictKeyIdentifierContext;

class DictKeyTextContext extends Dict_keyContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Token;
        super.copyFrom(ctx);
    }

	TEXT_LITERAL() {
	    return this.getToken(EParser.TEXT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDictKeyText(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDictKeyText(this);
		}
	}


}

EParser.DictKeyTextContext = DictKeyTextContext;

class Slice_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_slice_arguments;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SliceFirstAndLastContext extends Slice_argumentsContext {

    constructor(parser, ctx) {
        super(parser);
        this.first = null; // ExpressionContext;
        this.last = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSliceFirstAndLast(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSliceFirstAndLast(this);
		}
	}


}

EParser.SliceFirstAndLastContext = SliceFirstAndLastContext;

class SliceLastOnlyContext extends Slice_argumentsContext {

    constructor(parser, ctx) {
        super(parser);
        this.last = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSliceLastOnly(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSliceLastOnly(this);
		}
	}


}

EParser.SliceLastOnlyContext = SliceLastOnlyContext;

class SliceFirstOnlyContext extends Slice_argumentsContext {

    constructor(parser, ctx) {
        super(parser);
        this.first = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSliceFirstOnly(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSliceFirstOnly(this);
		}
	}


}

EParser.SliceFirstOnlyContext = SliceFirstOnlyContext;

class Assign_variable_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_assign_variable_statement;
    }

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	assign() {
	    return this.getTypedRuleContext(AssignContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAssign_variable_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAssign_variable_statement(this);
		}
	}


}



class Assignable_instanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_assignable_instance;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ChildInstanceContext extends Assignable_instanceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	assignable_instance() {
	    return this.getTypedRuleContext(Assignable_instanceContext,0);
	};

	child_instance() {
	    return this.getTypedRuleContext(Child_instanceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterChildInstance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitChildInstance(this);
		}
	}


}

EParser.ChildInstanceContext = ChildInstanceContext;

class RootInstanceContext extends Assignable_instanceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterRootInstance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitRootInstance(this);
		}
	}


}

EParser.RootInstanceContext = RootInstanceContext;

class Is_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_is_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class IsATypeExpressionContext extends Is_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	};

	category_or_any_type() {
	    return this.getTypedRuleContext(Category_or_any_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterIsATypeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitIsATypeExpression(this);
		}
	}


}

EParser.IsATypeExpressionContext = IsATypeExpressionContext;

class IsOtherExpressionContext extends Is_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterIsOtherExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitIsOtherExpression(this);
		}
	}


}

EParser.IsOtherExpressionContext = IsOtherExpressionContext;

class Arrow_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_arrow_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ArrowExpressionBodyContext extends Arrow_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	arrow_prefix() {
	    return this.getTypedRuleContext(Arrow_prefixContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterArrowExpressionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitArrowExpressionBody(this);
		}
	}


}

EParser.ArrowExpressionBodyContext = ArrowExpressionBodyContext;

class ArrowStatementsBodyContext extends Arrow_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	arrow_prefix() {
	    return this.getTypedRuleContext(Arrow_prefixContext,0);
	};

	LCURL() {
	    return this.getToken(EParser.LCURL, 0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	RCURL() {
	    return this.getToken(EParser.RCURL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterArrowStatementsBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitArrowStatementsBody(this);
		}
	}


}

EParser.ArrowStatementsBodyContext = ArrowStatementsBodyContext;

class Arrow_prefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_arrow_prefix;
        this.s1 = null; // Ws_plusContext
        this.s2 = null; // Ws_plusContext
    }

	arrow_args() {
	    return this.getTypedRuleContext(Arrow_argsContext,0);
	};

	EGT() {
	    return this.getToken(EParser.EGT, 0);
	};

	ws_plus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ws_plusContext);
	    } else {
	        return this.getTypedRuleContext(Ws_plusContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterArrow_prefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitArrow_prefix(this);
		}
	}


}



class Arrow_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_arrow_args;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ArrowListArgContext extends Arrow_argsContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAR() {
	    return this.getToken(EParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(EParser.RPAR, 0);
	};

	variable_identifier_list() {
	    return this.getTypedRuleContext(Variable_identifier_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterArrowListArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitArrowListArg(this);
		}
	}


}

EParser.ArrowListArgContext = ArrowListArgContext;

class ArrowSingleArgContext extends Arrow_argsContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	variable_identifier() {
	    return this.getTypedRuleContext(Variable_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterArrowSingleArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitArrowSingleArg(this);
		}
	}


}

EParser.ArrowSingleArgContext = ArrowSingleArgContext;

class Sorted_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_sorted_key;
    }

	instance_expression() {
	    return this.getTypedRuleContext(Instance_expressionContext,0);
	};

	arrow_expression() {
	    return this.getTypedRuleContext(Arrow_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSorted_key(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSorted_key(this);
		}
	}


}



class Read_blob_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_read_blob_expression;
        this.source = null; // ExpressionContext
    }

	READ() {
	    return this.getToken(EParser.READ, 0);
	};

	BLOB() {
	    return this.getToken(EParser.BLOB, 0);
	};

	FROM() {
	    return this.getToken(EParser.FROM, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterRead_blob_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitRead_blob_expression(this);
		}
	}


}



class Read_all_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_read_all_expression;
        this.source = null; // ExpressionContext
    }

	READ() {
	    return this.getToken(EParser.READ, 0);
	};

	ALL() {
	    return this.getToken(EParser.ALL, 0);
	};

	FROM() {
	    return this.getToken(EParser.FROM, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterRead_all_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitRead_all_expression(this);
		}
	}


}



class Read_one_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_read_one_expression;
        this.source = null; // ExpressionContext
    }

	READ() {
	    return this.getToken(EParser.READ, 0);
	};

	ONE() {
	    return this.getToken(EParser.ONE, 0);
	};

	FROM() {
	    return this.getToken(EParser.FROM, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterRead_one_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitRead_one_expression(this);
		}
	}


}



class Order_by_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_order_by_list;
    }

	order_by = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Order_byContext);
	    } else {
	        return this.getTypedRuleContext(Order_byContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.COMMA);
	    } else {
	        return this.getToken(EParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterOrder_by_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitOrder_by_list(this);
		}
	}


}



class Order_byContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_order_by;
    }

	variable_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Variable_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Variable_identifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.DOT);
	    } else {
	        return this.getToken(EParser.DOT, i);
	    }
	};


	ASC() {
	    return this.getToken(EParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(EParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterOrder_by(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitOrder_by(this);
		}
	}


}



class OperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_operator;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class OperatorPlusContext extends OperatorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PLUS() {
	    return this.getToken(EParser.PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterOperatorPlus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitOperatorPlus(this);
		}
	}


}

EParser.OperatorPlusContext = OperatorPlusContext;

class OperatorDivideContext extends OperatorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	divide() {
	    return this.getTypedRuleContext(DivideContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterOperatorDivide(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitOperatorDivide(this);
		}
	}


}

EParser.OperatorDivideContext = OperatorDivideContext;

class OperatorIDivideContext extends OperatorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	idivide() {
	    return this.getTypedRuleContext(IdivideContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterOperatorIDivide(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitOperatorIDivide(this);
		}
	}


}

EParser.OperatorIDivideContext = OperatorIDivideContext;

class OperatorMultiplyContext extends OperatorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	multiply() {
	    return this.getTypedRuleContext(MultiplyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterOperatorMultiply(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitOperatorMultiply(this);
		}
	}


}

EParser.OperatorMultiplyContext = OperatorMultiplyContext;

class OperatorMinusContext extends OperatorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MINUS() {
	    return this.getToken(EParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterOperatorMinus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitOperatorMinus(this);
		}
	}


}

EParser.OperatorMinusContext = OperatorMinusContext;

class OperatorModuloContext extends OperatorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	modulo() {
	    return this.getTypedRuleContext(ModuloContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterOperatorModulo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitOperatorModulo(this);
		}
	}


}

EParser.OperatorModuloContext = OperatorModuloContext;

class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_keyword;
    }

	JAVA() {
	    return this.getToken(EParser.JAVA, 0);
	};

	CSHARP() {
	    return this.getToken(EParser.CSHARP, 0);
	};

	PYTHON2() {
	    return this.getToken(EParser.PYTHON2, 0);
	};

	PYTHON3() {
	    return this.getToken(EParser.PYTHON3, 0);
	};

	JAVASCRIPT() {
	    return this.getToken(EParser.JAVASCRIPT, 0);
	};

	SWIFT() {
	    return this.getToken(EParser.SWIFT, 0);
	};

	BOOLEAN() {
	    return this.getToken(EParser.BOOLEAN, 0);
	};

	CHARACTER() {
	    return this.getToken(EParser.CHARACTER, 0);
	};

	TEXT() {
	    return this.getToken(EParser.TEXT, 0);
	};

	INTEGER() {
	    return this.getToken(EParser.INTEGER, 0);
	};

	DECIMAL() {
	    return this.getToken(EParser.DECIMAL, 0);
	};

	DATE() {
	    return this.getToken(EParser.DATE, 0);
	};

	TIME() {
	    return this.getToken(EParser.TIME, 0);
	};

	DATETIME() {
	    return this.getToken(EParser.DATETIME, 0);
	};

	PERIOD() {
	    return this.getToken(EParser.PERIOD, 0);
	};

	VERSION() {
	    return this.getToken(EParser.VERSION, 0);
	};

	CODE() {
	    return this.getToken(EParser.CODE, 0);
	};

	DOCUMENT() {
	    return this.getToken(EParser.DOCUMENT, 0);
	};

	BLOB() {
	    return this.getToken(EParser.BLOB, 0);
	};

	IMAGE() {
	    return this.getToken(EParser.IMAGE, 0);
	};

	UUID() {
	    return this.getToken(EParser.UUID, 0);
	};

	ITERATOR() {
	    return this.getToken(EParser.ITERATOR, 0);
	};

	CURSOR() {
	    return this.getToken(EParser.CURSOR, 0);
	};

	HTML() {
	    return this.getToken(EParser.HTML, 0);
	};

	ABSTRACT() {
	    return this.getToken(EParser.ABSTRACT, 0);
	};

	ALL() {
	    return this.getToken(EParser.ALL, 0);
	};

	ALWAYS() {
	    return this.getToken(EParser.ALWAYS, 0);
	};

	AND() {
	    return this.getToken(EParser.AND, 0);
	};

	ANY() {
	    return this.getToken(EParser.ANY, 0);
	};

	AS() {
	    return this.getToken(EParser.AS, 0);
	};

	ASC() {
	    return this.getToken(EParser.ASC, 0);
	};

	ATTR() {
	    return this.getToken(EParser.ATTR, 0);
	};

	ATTRIBUTE() {
	    return this.getToken(EParser.ATTRIBUTE, 0);
	};

	ATTRIBUTES() {
	    return this.getToken(EParser.ATTRIBUTES, 0);
	};

	BINDINGS() {
	    return this.getToken(EParser.BINDINGS, 0);
	};

	BREAK() {
	    return this.getToken(EParser.BREAK, 0);
	};

	BY() {
	    return this.getToken(EParser.BY, 0);
	};

	CASE() {
	    return this.getToken(EParser.CASE, 0);
	};

	CATCH() {
	    return this.getToken(EParser.CATCH, 0);
	};

	CATEGORY() {
	    return this.getToken(EParser.CATEGORY, 0);
	};

	CLASS() {
	    return this.getToken(EParser.CLASS, 0);
	};

	CONTAINS() {
	    return this.getToken(EParser.CONTAINS, 0);
	};

	DEF() {
	    return this.getToken(EParser.DEF, 0);
	};

	DEFAULT() {
	    return this.getToken(EParser.DEFAULT, 0);
	};

	DEFINE() {
	    return this.getToken(EParser.DEFINE, 0);
	};

	DELETE() {
	    return this.getToken(EParser.DELETE, 0);
	};

	DESC() {
	    return this.getToken(EParser.DESC, 0);
	};

	DO() {
	    return this.getToken(EParser.DO, 0);
	};

	DOING() {
	    return this.getToken(EParser.DOING, 0);
	};

	EACH() {
	    return this.getToken(EParser.EACH, 0);
	};

	ELSE() {
	    return this.getToken(EParser.ELSE, 0);
	};

	ENUM() {
	    return this.getToken(EParser.ENUM, 0);
	};

	ENUMERATED() {
	    return this.getToken(EParser.ENUMERATED, 0);
	};

	EXCEPT() {
	    return this.getToken(EParser.EXCEPT, 0);
	};

	EXECUTE() {
	    return this.getToken(EParser.EXECUTE, 0);
	};

	EXPECTING() {
	    return this.getToken(EParser.EXPECTING, 0);
	};

	EXTENDS() {
	    return this.getToken(EParser.EXTENDS, 0);
	};

	FETCH() {
	    return this.getToken(EParser.FETCH, 0);
	};

	FILTERED() {
	    return this.getToken(EParser.FILTERED, 0);
	};

	FINALLY() {
	    return this.getToken(EParser.FINALLY, 0);
	};

	FLUSH() {
	    return this.getToken(EParser.FLUSH, 0);
	};

	FOR() {
	    return this.getToken(EParser.FOR, 0);
	};

	FROM() {
	    return this.getToken(EParser.FROM, 0);
	};

	GETTER() {
	    return this.getToken(EParser.GETTER, 0);
	};

	HAS() {
	    return this.getToken(EParser.HAS, 0);
	};

	IF() {
	    return this.getToken(EParser.IF, 0);
	};

	IN() {
	    return this.getToken(EParser.IN, 0);
	};

	INDEX() {
	    return this.getToken(EParser.INDEX, 0);
	};

	IS() {
	    return this.getToken(EParser.IS, 0);
	};

	MATCHING() {
	    return this.getToken(EParser.MATCHING, 0);
	};

	METHOD() {
	    return this.getToken(EParser.METHOD, 0);
	};

	METHODS() {
	    return this.getToken(EParser.METHODS, 0);
	};

	MODULO() {
	    return this.getToken(EParser.MODULO, 0);
	};

	MUTABLE() {
	    return this.getToken(EParser.MUTABLE, 0);
	};

	NATIVE() {
	    return this.getToken(EParser.NATIVE, 0);
	};

	NONE() {
	    return this.getToken(EParser.NONE, 0);
	};

	NOT() {
	    return this.getToken(EParser.NOT, 0);
	};

	NOTHING() {
	    return this.getToken(EParser.NOTHING, 0);
	};

	NULL() {
	    return this.getToken(EParser.NULL, 0);
	};

	ON() {
	    return this.getToken(EParser.ON, 0);
	};

	ONE() {
	    return this.getToken(EParser.ONE, 0);
	};

	OPERATOR() {
	    return this.getToken(EParser.OPERATOR, 0);
	};

	OR() {
	    return this.getToken(EParser.OR, 0);
	};

	ORDER() {
	    return this.getToken(EParser.ORDER, 0);
	};

	OTHERWISE() {
	    return this.getToken(EParser.OTHERWISE, 0);
	};

	PASS() {
	    return this.getToken(EParser.PASS, 0);
	};

	RAISE() {
	    return this.getToken(EParser.RAISE, 0);
	};

	READ() {
	    return this.getToken(EParser.READ, 0);
	};

	RECEIVING() {
	    return this.getToken(EParser.RECEIVING, 0);
	};

	RESOURCE() {
	    return this.getToken(EParser.RESOURCE, 0);
	};

	RETURN() {
	    return this.getToken(EParser.RETURN, 0);
	};

	RETURNING() {
	    return this.getToken(EParser.RETURNING, 0);
	};

	ROWS() {
	    return this.getToken(EParser.ROWS, 0);
	};

	SELF() {
	    return this.getToken(EParser.SELF, 0);
	};

	SETTER() {
	    return this.getToken(EParser.SETTER, 0);
	};

	SINGLETON() {
	    return this.getToken(EParser.SINGLETON, 0);
	};

	SORTED() {
	    return this.getToken(EParser.SORTED, 0);
	};

	SUPER() {
	    return this.getToken(EParser.SUPER, 0);
	};

	STORABLE() {
	    return this.getToken(EParser.STORABLE, 0);
	};

	STORE() {
	    return this.getToken(EParser.STORE, 0);
	};

	SWITCH() {
	    return this.getToken(EParser.SWITCH, 0);
	};

	TEST() {
	    return this.getToken(EParser.TEST, 0);
	};

	THIS() {
	    return this.getToken(EParser.THIS, 0);
	};

	THROW() {
	    return this.getToken(EParser.THROW, 0);
	};

	TO() {
	    return this.getToken(EParser.TO, 0);
	};

	TRY() {
	    return this.getToken(EParser.TRY, 0);
	};

	VERIFYING() {
	    return this.getToken(EParser.VERIFYING, 0);
	};

	WIDGET() {
	    return this.getToken(EParser.WIDGET, 0);
	};

	WITH() {
	    return this.getToken(EParser.WITH, 0);
	};

	WHEN() {
	    return this.getToken(EParser.WHEN, 0);
	};

	WHERE() {
	    return this.getToken(EParser.WHERE, 0);
	};

	WHILE() {
	    return this.getToken(EParser.WHILE, 0);
	};

	WRITE() {
	    return this.getToken(EParser.WRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitKeyword(this);
		}
	}


}



class New_tokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_new_token;
        this.i1 = null; // Token
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterNew_token(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitNew_token(this);
		}
	}


}



class Key_tokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_key_token;
        this.i1 = null; // Token
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterKey_token(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitKey_token(this);
		}
	}


}



class Module_tokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_module_token;
        this.i1 = null; // Token
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterModule_token(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitModule_token(this);
		}
	}


}



class Value_tokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_value_token;
        this.i1 = null; // Token
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterValue_token(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitValue_token(this);
		}
	}


}



class Symbols_tokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_symbols_token;
        this.i1 = null; // Token
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterSymbols_token(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitSymbols_token(this);
		}
	}


}



class AssignContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_assign;
    }

	EQ() {
	    return this.getToken(EParser.EQ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterAssign(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitAssign(this);
		}
	}


}



class MultiplyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_multiply;
    }

	STAR() {
	    return this.getToken(EParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterMultiply(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitMultiply(this);
		}
	}


}



class DivideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_divide;
    }

	SLASH() {
	    return this.getToken(EParser.SLASH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterDivide(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitDivide(this);
		}
	}


}



class IdivideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_idivide;
    }

	BSLASH() {
	    return this.getToken(EParser.BSLASH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterIdivide(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitIdivide(this);
		}
	}


}



class ModuloContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_modulo;
    }

	PERCENT() {
	    return this.getToken(EParser.PERCENT, 0);
	};

	MODULO() {
	    return this.getToken(EParser.MODULO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterModulo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitModulo(this);
		}
	}


}



class Javascript_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_javascript_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavascriptStatementContext extends Javascript_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Javascript_expressionContext;
        super.copyFrom(ctx);
    }

	SEMI() {
	    return this.getToken(EParser.SEMI, 0);
	};

	javascript_expression() {
	    return this.getTypedRuleContext(Javascript_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascriptStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascriptStatement(this);
		}
	}


}

EParser.JavascriptStatementContext = JavascriptStatementContext;

class JavascriptReturnStatementContext extends Javascript_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Javascript_expressionContext;
        super.copyFrom(ctx);
    }

	RETURN() {
	    return this.getToken(EParser.RETURN, 0);
	};

	SEMI() {
	    return this.getToken(EParser.SEMI, 0);
	};

	javascript_expression() {
	    return this.getTypedRuleContext(Javascript_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascriptReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascriptReturnStatement(this);
		}
	}


}

EParser.JavascriptReturnStatementContext = JavascriptReturnStatementContext;

class Javascript_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_javascript_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavascriptSelectorExpressionContext extends Javascript_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Javascript_expressionContext;
        this.child = null; // Javascript_selector_expressionContext;
        super.copyFrom(ctx);
    }

	javascript_expression() {
	    return this.getTypedRuleContext(Javascript_expressionContext,0);
	};

	javascript_selector_expression() {
	    return this.getTypedRuleContext(Javascript_selector_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascriptSelectorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascriptSelectorExpression(this);
		}
	}


}

EParser.JavascriptSelectorExpressionContext = JavascriptSelectorExpressionContext;

class JavascriptPrimaryExpressionContext extends Javascript_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Javascript_primary_expressionContext;
        super.copyFrom(ctx);
    }

	javascript_primary_expression() {
	    return this.getTypedRuleContext(Javascript_primary_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascriptPrimaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascriptPrimaryExpression(this);
		}
	}


}

EParser.JavascriptPrimaryExpressionContext = JavascriptPrimaryExpressionContext;

class Javascript_primary_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_javascript_primary_expression;
    }

	javascript_this_expression() {
	    return this.getTypedRuleContext(Javascript_this_expressionContext,0);
	};

	javascript_new_expression() {
	    return this.getTypedRuleContext(Javascript_new_expressionContext,0);
	};

	javascript_parenthesis_expression() {
	    return this.getTypedRuleContext(Javascript_parenthesis_expressionContext,0);
	};

	javascript_identifier_expression() {
	    return this.getTypedRuleContext(Javascript_identifier_expressionContext,0);
	};

	javascript_literal_expression() {
	    return this.getTypedRuleContext(Javascript_literal_expressionContext,0);
	};

	javascript_method_expression() {
	    return this.getTypedRuleContext(Javascript_method_expressionContext,0);
	};

	javascript_item_expression() {
	    return this.getTypedRuleContext(Javascript_item_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascript_primary_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascript_primary_expression(this);
		}
	}


}



class Javascript_this_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_javascript_this_expression;
    }

	this_expression() {
	    return this.getTypedRuleContext(This_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascript_this_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascript_this_expression(this);
		}
	}


}



class Javascript_new_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_javascript_new_expression;
    }

	new_token() {
	    return this.getTypedRuleContext(New_tokenContext,0);
	};

	javascript_method_expression() {
	    return this.getTypedRuleContext(Javascript_method_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascript_new_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascript_new_expression(this);
		}
	}


}



class Javascript_selector_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_javascript_selector_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavaScriptMemberExpressionContext extends Javascript_selector_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Javascript_identifierContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(EParser.DOT, 0);
	};

	javascript_identifier() {
	    return this.getTypedRuleContext(Javascript_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaScriptMemberExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaScriptMemberExpression(this);
		}
	}


}

EParser.JavaScriptMemberExpressionContext = JavaScriptMemberExpressionContext;

class JavaScriptItemExpressionContext extends Javascript_selector_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Javascript_item_expressionContext;
        super.copyFrom(ctx);
    }

	javascript_item_expression() {
	    return this.getTypedRuleContext(Javascript_item_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaScriptItemExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaScriptItemExpression(this);
		}
	}


}

EParser.JavaScriptItemExpressionContext = JavaScriptItemExpressionContext;

class JavaScriptMethodExpressionContext extends Javascript_selector_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.method = null; // Javascript_method_expressionContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(EParser.DOT, 0);
	};

	javascript_method_expression() {
	    return this.getTypedRuleContext(Javascript_method_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaScriptMethodExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaScriptMethodExpression(this);
		}
	}


}

EParser.JavaScriptMethodExpressionContext = JavaScriptMethodExpressionContext;

class Javascript_method_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_javascript_method_expression;
        this.name = null; // Javascript_identifierContext
        this.args = null; // Javascript_argumentsContext
    }

	LPAR() {
	    return this.getToken(EParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(EParser.RPAR, 0);
	};

	javascript_identifier() {
	    return this.getTypedRuleContext(Javascript_identifierContext,0);
	};

	javascript_arguments() {
	    return this.getTypedRuleContext(Javascript_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascript_method_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascript_method_expression(this);
		}
	}


}



class Javascript_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_javascript_arguments;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavascriptArgumentListContext extends Javascript_argumentsContext {

    constructor(parser, ctx) {
        super(parser);
        this.item = null; // Javascript_expressionContext;
        super.copyFrom(ctx);
    }

	javascript_expression() {
	    return this.getTypedRuleContext(Javascript_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascriptArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascriptArgumentList(this);
		}
	}


}

EParser.JavascriptArgumentListContext = JavascriptArgumentListContext;

class JavascriptArgumentListItemContext extends Javascript_argumentsContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // Javascript_argumentsContext;
        this.item = null; // Javascript_expressionContext;
        super.copyFrom(ctx);
    }

	COMMA() {
	    return this.getToken(EParser.COMMA, 0);
	};

	javascript_arguments() {
	    return this.getTypedRuleContext(Javascript_argumentsContext,0);
	};

	javascript_expression() {
	    return this.getTypedRuleContext(Javascript_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascriptArgumentListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascriptArgumentListItem(this);
		}
	}


}

EParser.JavascriptArgumentListItemContext = JavascriptArgumentListItemContext;

class Javascript_item_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_javascript_item_expression;
        this.exp = null; // Javascript_expressionContext
    }

	LBRAK() {
	    return this.getToken(EParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(EParser.RBRAK, 0);
	};

	javascript_expression() {
	    return this.getTypedRuleContext(Javascript_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascript_item_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascript_item_expression(this);
		}
	}


}



class Javascript_parenthesis_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_javascript_parenthesis_expression;
        this.exp = null; // Javascript_expressionContext
    }

	LPAR() {
	    return this.getToken(EParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(EParser.RPAR, 0);
	};

	javascript_expression() {
	    return this.getTypedRuleContext(Javascript_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascript_parenthesis_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascript_parenthesis_expression(this);
		}
	}


}



class Javascript_identifier_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_javascript_identifier_expression;
        this.name = null; // Javascript_identifierContext
    }

	javascript_identifier() {
	    return this.getTypedRuleContext(Javascript_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascript_identifier_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascript_identifier_expression(this);
		}
	}


}



class Javascript_literal_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_javascript_literal_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavascriptIntegerLiteralContext extends Javascript_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	INTEGER_LITERAL() {
	    return this.getToken(EParser.INTEGER_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascriptIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascriptIntegerLiteral(this);
		}
	}


}

EParser.JavascriptIntegerLiteralContext = JavascriptIntegerLiteralContext;

class JavascriptBooleanLiteralContext extends Javascript_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	BOOLEAN_LITERAL() {
	    return this.getToken(EParser.BOOLEAN_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascriptBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascriptBooleanLiteral(this);
		}
	}


}

EParser.JavascriptBooleanLiteralContext = JavascriptBooleanLiteralContext;

class JavascriptCharacterLiteralContext extends Javascript_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	CHAR_LITERAL() {
	    return this.getToken(EParser.CHAR_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascriptCharacterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascriptCharacterLiteral(this);
		}
	}


}

EParser.JavascriptCharacterLiteralContext = JavascriptCharacterLiteralContext;

class JavascriptTextLiteralContext extends Javascript_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	TEXT_LITERAL() {
	    return this.getToken(EParser.TEXT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascriptTextLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascriptTextLiteral(this);
		}
	}


}

EParser.JavascriptTextLiteralContext = JavascriptTextLiteralContext;

class JavascriptDecimalLiteralContext extends Javascript_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	DECIMAL_LITERAL() {
	    return this.getToken(EParser.DECIMAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascriptDecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascriptDecimalLiteral(this);
		}
	}


}

EParser.JavascriptDecimalLiteralContext = JavascriptDecimalLiteralContext;

class Javascript_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_javascript_identifier;
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	};

	SYMBOL_IDENTIFIER() {
	    return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
	};

	DOLLAR_IDENTIFIER() {
	    return this.getToken(EParser.DOLLAR_IDENTIFIER, 0);
	};

	TYPE_IDENTIFIER() {
	    return this.getToken(EParser.TYPE_IDENTIFIER, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavascript_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavascript_identifier(this);
		}
	}


}



class Python_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_python_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PythonStatementContext extends Python_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_expressionContext;
        super.copyFrom(ctx);
    }

	python_expression() {
	    return this.getTypedRuleContext(Python_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonStatement(this);
		}
	}


}

EParser.PythonStatementContext = PythonStatementContext;

class PythonReturnStatementContext extends Python_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_expressionContext;
        super.copyFrom(ctx);
    }

	RETURN() {
	    return this.getToken(EParser.RETURN, 0);
	};

	python_expression() {
	    return this.getTypedRuleContext(Python_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonReturnStatement(this);
		}
	}


}

EParser.PythonReturnStatementContext = PythonReturnStatementContext;

class Python_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_python_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PythonSelectorExpressionContext extends Python_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Python_expressionContext;
        this.child = null; // Python_selector_expressionContext;
        super.copyFrom(ctx);
    }

	python_expression() {
	    return this.getTypedRuleContext(Python_expressionContext,0);
	};

	python_selector_expression() {
	    return this.getTypedRuleContext(Python_selector_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonSelectorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonSelectorExpression(this);
		}
	}


}

EParser.PythonSelectorExpressionContext = PythonSelectorExpressionContext;

class PythonPrimaryExpressionContext extends Python_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_primary_expressionContext;
        super.copyFrom(ctx);
    }

	python_primary_expression() {
	    return this.getTypedRuleContext(Python_primary_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonPrimaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonPrimaryExpression(this);
		}
	}


}

EParser.PythonPrimaryExpressionContext = PythonPrimaryExpressionContext;

class Python_primary_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_python_primary_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PythonParenthesisExpressionContext extends Python_primary_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_parenthesis_expressionContext;
        super.copyFrom(ctx);
    }

	python_parenthesis_expression() {
	    return this.getTypedRuleContext(Python_parenthesis_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonParenthesisExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonParenthesisExpression(this);
		}
	}


}

EParser.PythonParenthesisExpressionContext = PythonParenthesisExpressionContext;

class PythonIdentifierExpressionContext extends Python_primary_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_identifier_expressionContext;
        super.copyFrom(ctx);
    }

	python_identifier_expression() {
	    return this.getTypedRuleContext(Python_identifier_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonIdentifierExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonIdentifierExpression(this);
		}
	}


}

EParser.PythonIdentifierExpressionContext = PythonIdentifierExpressionContext;

class PythonSelfExpressionContext extends Python_primary_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_self_expressionContext;
        super.copyFrom(ctx);
    }

	python_self_expression() {
	    return this.getTypedRuleContext(Python_self_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonSelfExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonSelfExpression(this);
		}
	}


}

EParser.PythonSelfExpressionContext = PythonSelfExpressionContext;

class PythonLiteralExpressionContext extends Python_primary_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_literal_expressionContext;
        super.copyFrom(ctx);
    }

	python_literal_expression() {
	    return this.getTypedRuleContext(Python_literal_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonLiteralExpression(this);
		}
	}


}

EParser.PythonLiteralExpressionContext = PythonLiteralExpressionContext;

class PythonGlobalMethodExpressionContext extends Python_primary_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_method_expressionContext;
        super.copyFrom(ctx);
    }

	python_method_expression() {
	    return this.getTypedRuleContext(Python_method_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonGlobalMethodExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonGlobalMethodExpression(this);
		}
	}


}

EParser.PythonGlobalMethodExpressionContext = PythonGlobalMethodExpressionContext;

class Python_self_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_python_self_expression;
    }

	this_expression() {
	    return this.getTypedRuleContext(This_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPython_self_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPython_self_expression(this);
		}
	}


}



class Python_selector_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_python_selector_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PythonMethodExpressionContext extends Python_selector_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_method_expressionContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(EParser.DOT, 0);
	};

	python_method_expression() {
	    return this.getTypedRuleContext(Python_method_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonMethodExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonMethodExpression(this);
		}
	}


}

EParser.PythonMethodExpressionContext = PythonMethodExpressionContext;

class PythonItemExpressionContext extends Python_selector_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Python_expressionContext;
        super.copyFrom(ctx);
    }

	LBRAK() {
	    return this.getToken(EParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(EParser.RBRAK, 0);
	};

	python_expression() {
	    return this.getTypedRuleContext(Python_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonItemExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonItemExpression(this);
		}
	}


}

EParser.PythonItemExpressionContext = PythonItemExpressionContext;

class Python_method_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_python_method_expression;
        this.name = null; // Python_identifierContext
        this.args = null; // Python_argument_listContext
    }

	LPAR() {
	    return this.getToken(EParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(EParser.RPAR, 0);
	};

	python_identifier() {
	    return this.getTypedRuleContext(Python_identifierContext,0);
	};

	python_argument_list() {
	    return this.getTypedRuleContext(Python_argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPython_method_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPython_method_expression(this);
		}
	}


}



class Python_argument_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_python_argument_list;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PythonOrdinalOnlyArgumentListContext extends Python_argument_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.ordinal = null; // Python_ordinal_argument_listContext;
        super.copyFrom(ctx);
    }

	python_ordinal_argument_list() {
	    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonOrdinalOnlyArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonOrdinalOnlyArgumentList(this);
		}
	}


}

EParser.PythonOrdinalOnlyArgumentListContext = PythonOrdinalOnlyArgumentListContext;

class PythonNamedOnlyArgumentListContext extends Python_argument_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.named = null; // Python_named_argument_listContext;
        super.copyFrom(ctx);
    }

	python_named_argument_list() {
	    return this.getTypedRuleContext(Python_named_argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonNamedOnlyArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonNamedOnlyArgumentList(this);
		}
	}


}

EParser.PythonNamedOnlyArgumentListContext = PythonNamedOnlyArgumentListContext;

class PythonArgumentListContext extends Python_argument_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.ordinal = null; // Python_ordinal_argument_listContext;
        this.named = null; // Python_named_argument_listContext;
        super.copyFrom(ctx);
    }

	COMMA() {
	    return this.getToken(EParser.COMMA, 0);
	};

	python_ordinal_argument_list() {
	    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
	};

	python_named_argument_list() {
	    return this.getTypedRuleContext(Python_named_argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonArgumentList(this);
		}
	}


}

EParser.PythonArgumentListContext = PythonArgumentListContext;

class Python_ordinal_argument_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_python_ordinal_argument_list;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PythonOrdinalArgumentListContext extends Python_ordinal_argument_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.item = null; // Python_expressionContext;
        super.copyFrom(ctx);
    }

	python_expression() {
	    return this.getTypedRuleContext(Python_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonOrdinalArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonOrdinalArgumentList(this);
		}
	}


}

EParser.PythonOrdinalArgumentListContext = PythonOrdinalArgumentListContext;

class PythonOrdinalArgumentListItemContext extends Python_ordinal_argument_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // Python_ordinal_argument_listContext;
        this.item = null; // Python_expressionContext;
        super.copyFrom(ctx);
    }

	COMMA() {
	    return this.getToken(EParser.COMMA, 0);
	};

	python_ordinal_argument_list() {
	    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
	};

	python_expression() {
	    return this.getTypedRuleContext(Python_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonOrdinalArgumentListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonOrdinalArgumentListItem(this);
		}
	}


}

EParser.PythonOrdinalArgumentListItemContext = PythonOrdinalArgumentListItemContext;

class Python_named_argument_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_python_named_argument_list;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PythonNamedArgumentListContext extends Python_named_argument_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Python_identifierContext;
        this.exp = null; // Python_expressionContext;
        super.copyFrom(ctx);
    }

	EQ() {
	    return this.getToken(EParser.EQ, 0);
	};

	python_identifier() {
	    return this.getTypedRuleContext(Python_identifierContext,0);
	};

	python_expression() {
	    return this.getTypedRuleContext(Python_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonNamedArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonNamedArgumentList(this);
		}
	}


}

EParser.PythonNamedArgumentListContext = PythonNamedArgumentListContext;

class PythonNamedArgumentListItemContext extends Python_named_argument_listContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // Python_named_argument_listContext;
        this.name = null; // Python_identifierContext;
        this.exp = null; // Python_expressionContext;
        super.copyFrom(ctx);
    }

	COMMA() {
	    return this.getToken(EParser.COMMA, 0);
	};

	EQ() {
	    return this.getToken(EParser.EQ, 0);
	};

	python_named_argument_list() {
	    return this.getTypedRuleContext(Python_named_argument_listContext,0);
	};

	python_identifier() {
	    return this.getTypedRuleContext(Python_identifierContext,0);
	};

	python_expression() {
	    return this.getTypedRuleContext(Python_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonNamedArgumentListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonNamedArgumentListItem(this);
		}
	}


}

EParser.PythonNamedArgumentListItemContext = PythonNamedArgumentListItemContext;

class Python_parenthesis_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_python_parenthesis_expression;
        this.exp = null; // Python_expressionContext
    }

	LPAR() {
	    return this.getToken(EParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(EParser.RPAR, 0);
	};

	python_expression() {
	    return this.getTypedRuleContext(Python_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPython_parenthesis_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPython_parenthesis_expression(this);
		}
	}


}



class Python_identifier_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_python_identifier_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PythonChildIdentifierContext extends Python_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Python_identifier_expressionContext;
        this.name = null; // Python_identifierContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(EParser.DOT, 0);
	};

	python_identifier_expression() {
	    return this.getTypedRuleContext(Python_identifier_expressionContext,0);
	};

	python_identifier() {
	    return this.getTypedRuleContext(Python_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonChildIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonChildIdentifier(this);
		}
	}


}

EParser.PythonChildIdentifierContext = PythonChildIdentifierContext;

class PythonPromptoIdentifierContext extends Python_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DOLLAR_IDENTIFIER() {
	    return this.getToken(EParser.DOLLAR_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonPromptoIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonPromptoIdentifier(this);
		}
	}


}

EParser.PythonPromptoIdentifierContext = PythonPromptoIdentifierContext;

class PythonIdentifierContext extends Python_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Python_identifierContext;
        super.copyFrom(ctx);
    }

	python_identifier() {
	    return this.getTypedRuleContext(Python_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonIdentifier(this);
		}
	}


}

EParser.PythonIdentifierContext = PythonIdentifierContext;

class Python_literal_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_python_literal_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PythonIntegerLiteralContext extends Python_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	INTEGER_LITERAL() {
	    return this.getToken(EParser.INTEGER_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonIntegerLiteral(this);
		}
	}


}

EParser.PythonIntegerLiteralContext = PythonIntegerLiteralContext;

class PythonBooleanLiteralContext extends Python_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	BOOLEAN_LITERAL() {
	    return this.getToken(EParser.BOOLEAN_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonBooleanLiteral(this);
		}
	}


}

EParser.PythonBooleanLiteralContext = PythonBooleanLiteralContext;

class PythonCharacterLiteralContext extends Python_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	CHAR_LITERAL() {
	    return this.getToken(EParser.CHAR_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonCharacterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonCharacterLiteral(this);
		}
	}


}

EParser.PythonCharacterLiteralContext = PythonCharacterLiteralContext;

class PythonTextLiteralContext extends Python_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	TEXT_LITERAL() {
	    return this.getToken(EParser.TEXT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonTextLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonTextLiteral(this);
		}
	}


}

EParser.PythonTextLiteralContext = PythonTextLiteralContext;

class PythonDecimalLiteralContext extends Python_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	DECIMAL_LITERAL() {
	    return this.getToken(EParser.DECIMAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPythonDecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPythonDecimalLiteral(this);
		}
	}


}

EParser.PythonDecimalLiteralContext = PythonDecimalLiteralContext;

class Python_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_python_identifier;
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	};

	SYMBOL_IDENTIFIER() {
	    return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
	};

	DOLLAR_IDENTIFIER() {
	    return this.getToken(EParser.DOLLAR_IDENTIFIER, 0);
	};

	TYPE_IDENTIFIER() {
	    return this.getToken(EParser.TYPE_IDENTIFIER, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterPython_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitPython_identifier(this);
		}
	}


}



class Java_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_java_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavaReturnStatementContext extends Java_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Java_expressionContext;
        super.copyFrom(ctx);
    }

	RETURN() {
	    return this.getToken(EParser.RETURN, 0);
	};

	SEMI() {
	    return this.getToken(EParser.SEMI, 0);
	};

	java_expression() {
	    return this.getTypedRuleContext(Java_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaReturnStatement(this);
		}
	}


}

EParser.JavaReturnStatementContext = JavaReturnStatementContext;

class JavaStatementContext extends Java_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Java_expressionContext;
        super.copyFrom(ctx);
    }

	SEMI() {
	    return this.getToken(EParser.SEMI, 0);
	};

	java_expression() {
	    return this.getTypedRuleContext(Java_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaStatement(this);
		}
	}


}

EParser.JavaStatementContext = JavaStatementContext;

class Java_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_java_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavaSelectorExpressionContext extends Java_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Java_expressionContext;
        this.child = null; // Java_selector_expressionContext;
        super.copyFrom(ctx);
    }

	java_expression() {
	    return this.getTypedRuleContext(Java_expressionContext,0);
	};

	java_selector_expression() {
	    return this.getTypedRuleContext(Java_selector_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaSelectorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaSelectorExpression(this);
		}
	}


}

EParser.JavaSelectorExpressionContext = JavaSelectorExpressionContext;

class JavaPrimaryExpressionContext extends Java_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Java_primary_expressionContext;
        super.copyFrom(ctx);
    }

	java_primary_expression() {
	    return this.getTypedRuleContext(Java_primary_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaPrimaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaPrimaryExpression(this);
		}
	}


}

EParser.JavaPrimaryExpressionContext = JavaPrimaryExpressionContext;

class Java_primary_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_java_primary_expression;
    }

	java_this_expression() {
	    return this.getTypedRuleContext(Java_this_expressionContext,0);
	};

	java_new_expression() {
	    return this.getTypedRuleContext(Java_new_expressionContext,0);
	};

	java_parenthesis_expression() {
	    return this.getTypedRuleContext(Java_parenthesis_expressionContext,0);
	};

	java_identifier_expression() {
	    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
	};

	java_literal_expression() {
	    return this.getTypedRuleContext(Java_literal_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJava_primary_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJava_primary_expression(this);
		}
	}


}



class Java_this_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_java_this_expression;
    }

	this_expression() {
	    return this.getTypedRuleContext(This_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJava_this_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJava_this_expression(this);
		}
	}


}



class Java_new_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_java_new_expression;
    }

	new_token() {
	    return this.getTypedRuleContext(New_tokenContext,0);
	};

	java_method_expression() {
	    return this.getTypedRuleContext(Java_method_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJava_new_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJava_new_expression(this);
		}
	}


}



class Java_selector_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_java_selector_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavaItemExpressionContext extends Java_selector_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Java_item_expressionContext;
        super.copyFrom(ctx);
    }

	java_item_expression() {
	    return this.getTypedRuleContext(Java_item_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaItemExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaItemExpression(this);
		}
	}


}

EParser.JavaItemExpressionContext = JavaItemExpressionContext;

class JavaMethodExpressionContext extends Java_selector_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Java_method_expressionContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(EParser.DOT, 0);
	};

	java_method_expression() {
	    return this.getTypedRuleContext(Java_method_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaMethodExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaMethodExpression(this);
		}
	}


}

EParser.JavaMethodExpressionContext = JavaMethodExpressionContext;

class Java_method_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_java_method_expression;
        this.name = null; // Java_identifierContext
        this.args = null; // Java_argumentsContext
    }

	LPAR() {
	    return this.getToken(EParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(EParser.RPAR, 0);
	};

	java_identifier() {
	    return this.getTypedRuleContext(Java_identifierContext,0);
	};

	java_arguments() {
	    return this.getTypedRuleContext(Java_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJava_method_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJava_method_expression(this);
		}
	}


}



class Java_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_java_arguments;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavaArgumentListItemContext extends Java_argumentsContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // Java_argumentsContext;
        this.item = null; // Java_expressionContext;
        super.copyFrom(ctx);
    }

	COMMA() {
	    return this.getToken(EParser.COMMA, 0);
	};

	java_arguments() {
	    return this.getTypedRuleContext(Java_argumentsContext,0);
	};

	java_expression() {
	    return this.getTypedRuleContext(Java_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaArgumentListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaArgumentListItem(this);
		}
	}


}

EParser.JavaArgumentListItemContext = JavaArgumentListItemContext;

class JavaArgumentListContext extends Java_argumentsContext {

    constructor(parser, ctx) {
        super(parser);
        this.item = null; // Java_expressionContext;
        super.copyFrom(ctx);
    }

	java_expression() {
	    return this.getTypedRuleContext(Java_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaArgumentList(this);
		}
	}


}

EParser.JavaArgumentListContext = JavaArgumentListContext;

class Java_item_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_java_item_expression;
        this.exp = null; // Java_expressionContext
    }

	LBRAK() {
	    return this.getToken(EParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(EParser.RBRAK, 0);
	};

	java_expression() {
	    return this.getTypedRuleContext(Java_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJava_item_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJava_item_expression(this);
		}
	}


}



class Java_parenthesis_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_java_parenthesis_expression;
        this.exp = null; // Java_expressionContext
    }

	LPAR() {
	    return this.getToken(EParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(EParser.RPAR, 0);
	};

	java_expression() {
	    return this.getTypedRuleContext(Java_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJava_parenthesis_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJava_parenthesis_expression(this);
		}
	}


}



class Java_identifier_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_java_identifier_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavaIdentifierContext extends Java_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Java_identifierContext;
        super.copyFrom(ctx);
    }

	java_identifier() {
	    return this.getTypedRuleContext(Java_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaIdentifier(this);
		}
	}


}

EParser.JavaIdentifierContext = JavaIdentifierContext;

class JavaChildIdentifierContext extends Java_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Java_identifier_expressionContext;
        this.name = null; // Java_identifierContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(EParser.DOT, 0);
	};

	java_identifier_expression() {
	    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
	};

	java_identifier() {
	    return this.getTypedRuleContext(Java_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaChildIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaChildIdentifier(this);
		}
	}


}

EParser.JavaChildIdentifierContext = JavaChildIdentifierContext;

class Java_class_identifier_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_java_class_identifier_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavaClassIdentifierContext extends Java_class_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.klass = null; // Java_identifier_expressionContext;
        super.copyFrom(ctx);
    }

	java_identifier_expression() {
	    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaClassIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaClassIdentifier(this);
		}
	}


}

EParser.JavaClassIdentifierContext = JavaClassIdentifierContext;

class JavaChildClassIdentifierContext extends Java_class_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Java_class_identifier_expressionContext;
        this.name = null; // Token;
        super.copyFrom(ctx);
    }

	java_class_identifier_expression() {
	    return this.getTypedRuleContext(Java_class_identifier_expressionContext,0);
	};

	DOLLAR_IDENTIFIER() {
	    return this.getToken(EParser.DOLLAR_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaChildClassIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaChildClassIdentifier(this);
		}
	}


}

EParser.JavaChildClassIdentifierContext = JavaChildClassIdentifierContext;

class Java_literal_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_java_literal_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JavaBooleanLiteralContext extends Java_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	BOOLEAN_LITERAL() {
	    return this.getToken(EParser.BOOLEAN_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaBooleanLiteral(this);
		}
	}


}

EParser.JavaBooleanLiteralContext = JavaBooleanLiteralContext;

class JavaCharacterLiteralContext extends Java_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	CHAR_LITERAL() {
	    return this.getToken(EParser.CHAR_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaCharacterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaCharacterLiteral(this);
		}
	}


}

EParser.JavaCharacterLiteralContext = JavaCharacterLiteralContext;

class JavaIntegerLiteralContext extends Java_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	INTEGER_LITERAL() {
	    return this.getToken(EParser.INTEGER_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaIntegerLiteral(this);
		}
	}


}

EParser.JavaIntegerLiteralContext = JavaIntegerLiteralContext;

class JavaTextLiteralContext extends Java_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	TEXT_LITERAL() {
	    return this.getToken(EParser.TEXT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaTextLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaTextLiteral(this);
		}
	}


}

EParser.JavaTextLiteralContext = JavaTextLiteralContext;

class JavaDecimalLiteralContext extends Java_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	DECIMAL_LITERAL() {
	    return this.getToken(EParser.DECIMAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJavaDecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJavaDecimalLiteral(this);
		}
	}


}

EParser.JavaDecimalLiteralContext = JavaDecimalLiteralContext;

class Java_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_java_identifier;
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	};

	SYMBOL_IDENTIFIER() {
	    return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
	};

	DOLLAR_IDENTIFIER() {
	    return this.getToken(EParser.DOLLAR_IDENTIFIER, 0);
	};

	TYPE_IDENTIFIER() {
	    return this.getToken(EParser.TYPE_IDENTIFIER, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJava_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJava_identifier(this);
		}
	}


}



class Csharp_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_csharp_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CSharpReturnStatementContext extends Csharp_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Csharp_expressionContext;
        super.copyFrom(ctx);
    }

	RETURN() {
	    return this.getToken(EParser.RETURN, 0);
	};

	SEMI() {
	    return this.getToken(EParser.SEMI, 0);
	};

	csharp_expression() {
	    return this.getTypedRuleContext(Csharp_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCSharpReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCSharpReturnStatement(this);
		}
	}


}

EParser.CSharpReturnStatementContext = CSharpReturnStatementContext;

class CSharpStatementContext extends Csharp_statementContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Csharp_expressionContext;
        super.copyFrom(ctx);
    }

	SEMI() {
	    return this.getToken(EParser.SEMI, 0);
	};

	csharp_expression() {
	    return this.getTypedRuleContext(Csharp_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCSharpStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCSharpStatement(this);
		}
	}


}

EParser.CSharpStatementContext = CSharpStatementContext;

class Csharp_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_csharp_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CSharpSelectorExpressionContext extends Csharp_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Csharp_expressionContext;
        this.child = null; // Csharp_selector_expressionContext;
        super.copyFrom(ctx);
    }

	csharp_expression() {
	    return this.getTypedRuleContext(Csharp_expressionContext,0);
	};

	csharp_selector_expression() {
	    return this.getTypedRuleContext(Csharp_selector_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCSharpSelectorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCSharpSelectorExpression(this);
		}
	}


}

EParser.CSharpSelectorExpressionContext = CSharpSelectorExpressionContext;

class CSharpPrimaryExpressionContext extends Csharp_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Csharp_primary_expressionContext;
        super.copyFrom(ctx);
    }

	csharp_primary_expression() {
	    return this.getTypedRuleContext(Csharp_primary_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCSharpPrimaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCSharpPrimaryExpression(this);
		}
	}


}

EParser.CSharpPrimaryExpressionContext = CSharpPrimaryExpressionContext;

class Csharp_primary_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_csharp_primary_expression;
    }

	csharp_this_expression() {
	    return this.getTypedRuleContext(Csharp_this_expressionContext,0);
	};

	csharp_new_expression() {
	    return this.getTypedRuleContext(Csharp_new_expressionContext,0);
	};

	csharp_parenthesis_expression() {
	    return this.getTypedRuleContext(Csharp_parenthesis_expressionContext,0);
	};

	csharp_identifier_expression() {
	    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
	};

	csharp_literal_expression() {
	    return this.getTypedRuleContext(Csharp_literal_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCsharp_primary_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCsharp_primary_expression(this);
		}
	}


}



class Csharp_this_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_csharp_this_expression;
    }

	this_expression() {
	    return this.getTypedRuleContext(This_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCsharp_this_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCsharp_this_expression(this);
		}
	}


}



class Csharp_new_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_csharp_new_expression;
    }

	new_token() {
	    return this.getTypedRuleContext(New_tokenContext,0);
	};

	csharp_method_expression() {
	    return this.getTypedRuleContext(Csharp_method_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCsharp_new_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCsharp_new_expression(this);
		}
	}


}



class Csharp_selector_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_csharp_selector_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CSharpMethodExpressionContext extends Csharp_selector_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Csharp_method_expressionContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(EParser.DOT, 0);
	};

	csharp_method_expression() {
	    return this.getTypedRuleContext(Csharp_method_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCSharpMethodExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCSharpMethodExpression(this);
		}
	}


}

EParser.CSharpMethodExpressionContext = CSharpMethodExpressionContext;

class CSharpItemExpressionContext extends Csharp_selector_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // Csharp_item_expressionContext;
        super.copyFrom(ctx);
    }

	csharp_item_expression() {
	    return this.getTypedRuleContext(Csharp_item_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCSharpItemExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCSharpItemExpression(this);
		}
	}


}

EParser.CSharpItemExpressionContext = CSharpItemExpressionContext;

class Csharp_method_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_csharp_method_expression;
        this.name = null; // Csharp_identifierContext
        this.args = null; // Csharp_argumentsContext
    }

	LPAR() {
	    return this.getToken(EParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(EParser.RPAR, 0);
	};

	csharp_identifier() {
	    return this.getTypedRuleContext(Csharp_identifierContext,0);
	};

	csharp_arguments() {
	    return this.getTypedRuleContext(Csharp_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCsharp_method_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCsharp_method_expression(this);
		}
	}


}



class Csharp_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_csharp_arguments;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CSharpArgumentListContext extends Csharp_argumentsContext {

    constructor(parser, ctx) {
        super(parser);
        this.item = null; // Csharp_expressionContext;
        super.copyFrom(ctx);
    }

	csharp_expression() {
	    return this.getTypedRuleContext(Csharp_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCSharpArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCSharpArgumentList(this);
		}
	}


}

EParser.CSharpArgumentListContext = CSharpArgumentListContext;

class CSharpArgumentListItemContext extends Csharp_argumentsContext {

    constructor(parser, ctx) {
        super(parser);
        this.items = null; // Csharp_argumentsContext;
        this.item = null; // Csharp_expressionContext;
        super.copyFrom(ctx);
    }

	COMMA() {
	    return this.getToken(EParser.COMMA, 0);
	};

	csharp_arguments() {
	    return this.getTypedRuleContext(Csharp_argumentsContext,0);
	};

	csharp_expression() {
	    return this.getTypedRuleContext(Csharp_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCSharpArgumentListItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCSharpArgumentListItem(this);
		}
	}


}

EParser.CSharpArgumentListItemContext = CSharpArgumentListItemContext;

class Csharp_item_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_csharp_item_expression;
        this.exp = null; // Csharp_expressionContext
    }

	LBRAK() {
	    return this.getToken(EParser.LBRAK, 0);
	};

	RBRAK() {
	    return this.getToken(EParser.RBRAK, 0);
	};

	csharp_expression() {
	    return this.getTypedRuleContext(Csharp_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCsharp_item_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCsharp_item_expression(this);
		}
	}


}



class Csharp_parenthesis_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_csharp_parenthesis_expression;
        this.exp = null; // Csharp_expressionContext
    }

	LPAR() {
	    return this.getToken(EParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(EParser.RPAR, 0);
	};

	csharp_expression() {
	    return this.getTypedRuleContext(Csharp_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCsharp_parenthesis_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCsharp_parenthesis_expression(this);
		}
	}


}



class Csharp_identifier_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_csharp_identifier_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CSharpIdentifierContext extends Csharp_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Csharp_identifierContext;
        super.copyFrom(ctx);
    }

	csharp_identifier() {
	    return this.getTypedRuleContext(Csharp_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCSharpIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCSharpIdentifier(this);
		}
	}


}

EParser.CSharpIdentifierContext = CSharpIdentifierContext;

class CSharpChildIdentifierContext extends Csharp_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.parent = null; // Csharp_identifier_expressionContext;
        this.name = null; // Csharp_identifierContext;
        super.copyFrom(ctx);
    }

	DOT() {
	    return this.getToken(EParser.DOT, 0);
	};

	csharp_identifier_expression() {
	    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
	};

	csharp_identifier() {
	    return this.getTypedRuleContext(Csharp_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCSharpChildIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCSharpChildIdentifier(this);
		}
	}


}

EParser.CSharpChildIdentifierContext = CSharpChildIdentifierContext;

class CSharpPromptoIdentifierContext extends Csharp_identifier_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DOLLAR_IDENTIFIER() {
	    return this.getToken(EParser.DOLLAR_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCSharpPromptoIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCSharpPromptoIdentifier(this);
		}
	}


}

EParser.CSharpPromptoIdentifierContext = CSharpPromptoIdentifierContext;

class Csharp_literal_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_csharp_literal_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CSharpBooleanLiteralContext extends Csharp_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BOOLEAN_LITERAL() {
	    return this.getToken(EParser.BOOLEAN_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCSharpBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCSharpBooleanLiteral(this);
		}
	}


}

EParser.CSharpBooleanLiteralContext = CSharpBooleanLiteralContext;

class CSharpIntegerLiteralContext extends Csharp_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTEGER_LITERAL() {
	    return this.getToken(EParser.INTEGER_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCSharpIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCSharpIntegerLiteral(this);
		}
	}


}

EParser.CSharpIntegerLiteralContext = CSharpIntegerLiteralContext;

class CSharpDecimalLiteralContext extends Csharp_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DECIMAL_LITERAL() {
	    return this.getToken(EParser.DECIMAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCSharpDecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCSharpDecimalLiteral(this);
		}
	}


}

EParser.CSharpDecimalLiteralContext = CSharpDecimalLiteralContext;

class CSharpCharacterLiteralContext extends Csharp_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHAR_LITERAL() {
	    return this.getToken(EParser.CHAR_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCSharpCharacterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCSharpCharacterLiteral(this);
		}
	}


}

EParser.CSharpCharacterLiteralContext = CSharpCharacterLiteralContext;

class CSharpTextLiteralContext extends Csharp_literal_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TEXT_LITERAL() {
	    return this.getToken(EParser.TEXT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCSharpTextLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCSharpTextLiteral(this);
		}
	}


}

EParser.CSharpTextLiteralContext = CSharpTextLiteralContext;

class Csharp_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_csharp_identifier;
    }

	VARIABLE_IDENTIFIER() {
	    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	};

	SYMBOL_IDENTIFIER() {
	    return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
	};

	DOLLAR_IDENTIFIER() {
	    return this.getToken(EParser.DOLLAR_IDENTIFIER, 0);
	};

	TYPE_IDENTIFIER() {
	    return this.getToken(EParser.TYPE_IDENTIFIER, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCsharp_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCsharp_identifier(this);
		}
	}


}



class Jsx_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_jsx_expression;
    }

	jsx_element() {
	    return this.getTypedRuleContext(Jsx_elementContext,0);
	};

	jsx_fragment() {
	    return this.getTypedRuleContext(Jsx_fragmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsx_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsx_expression(this);
		}
	}


}



class Jsx_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_jsx_element;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JsxSelfClosingContext extends Jsx_elementContext {

    constructor(parser, ctx) {
        super(parser);
        this.jsx = null; // Jsx_self_closingContext;
        super.copyFrom(ctx);
    }

	jsx_self_closing() {
	    return this.getTypedRuleContext(Jsx_self_closingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsxSelfClosing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsxSelfClosing(this);
		}
	}


}

EParser.JsxSelfClosingContext = JsxSelfClosingContext;

class JsxElementContext extends Jsx_elementContext {

    constructor(parser, ctx) {
        super(parser);
        this.opening = null; // Jsx_openingContext;
        this.children_ = null; // Jsx_childrenContext;
        this.closing = null; // Jsx_closingContext;
        super.copyFrom(ctx);
    }

	jsx_opening() {
	    return this.getTypedRuleContext(Jsx_openingContext,0);
	};

	jsx_closing() {
	    return this.getTypedRuleContext(Jsx_closingContext,0);
	};

	jsx_children() {
	    return this.getTypedRuleContext(Jsx_childrenContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsxElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsxElement(this);
		}
	}


}

EParser.JsxElementContext = JsxElementContext;

class Jsx_fragmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_jsx_fragment;
        this.children_ = null; // Jsx_childrenContext
    }

	jsx_fragment_start() {
	    return this.getTypedRuleContext(Jsx_fragment_startContext,0);
	};

	ws_plus = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ws_plusContext);
	    } else {
	        return this.getTypedRuleContext(Ws_plusContext,i);
	    }
	};

	jsx_fragment_end() {
	    return this.getTypedRuleContext(Jsx_fragment_endContext,0);
	};

	jsx_children() {
	    return this.getTypedRuleContext(Jsx_childrenContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsx_fragment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsx_fragment(this);
		}
	}


}



class Jsx_fragment_startContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_jsx_fragment_start;
    }

	LT() {
	    return this.getToken(EParser.LT, 0);
	};

	GT() {
	    return this.getToken(EParser.GT, 0);
	};

	LTGT() {
	    return this.getToken(EParser.LTGT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsx_fragment_start(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsx_fragment_start(this);
		}
	}


}



class Jsx_fragment_endContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_jsx_fragment_end;
    }

	LT() {
	    return this.getToken(EParser.LT, 0);
	};

	SLASH() {
	    return this.getToken(EParser.SLASH, 0);
	};

	GT() {
	    return this.getToken(EParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsx_fragment_end(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsx_fragment_end(this);
		}
	}


}



class Jsx_self_closingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_jsx_self_closing;
        this.name = null; // Jsx_element_nameContext
        this.attributes = null; // Jsx_attributeContext
    }

	LT() {
	    return this.getToken(EParser.LT, 0);
	};

	ws_plus() {
	    return this.getTypedRuleContext(Ws_plusContext,0);
	};

	SLASH() {
	    return this.getToken(EParser.SLASH, 0);
	};

	GT() {
	    return this.getToken(EParser.GT, 0);
	};

	jsx_element_name() {
	    return this.getTypedRuleContext(Jsx_element_nameContext,0);
	};

	jsx_attribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Jsx_attributeContext);
	    } else {
	        return this.getTypedRuleContext(Jsx_attributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsx_self_closing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsx_self_closing(this);
		}
	}


}



class Jsx_openingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_jsx_opening;
        this.name = null; // Jsx_element_nameContext
        this.attributes = null; // Jsx_attributeContext
    }

	LT() {
	    return this.getToken(EParser.LT, 0);
	};

	ws_plus() {
	    return this.getTypedRuleContext(Ws_plusContext,0);
	};

	GT() {
	    return this.getToken(EParser.GT, 0);
	};

	jsx_element_name() {
	    return this.getTypedRuleContext(Jsx_element_nameContext,0);
	};

	jsx_attribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Jsx_attributeContext);
	    } else {
	        return this.getTypedRuleContext(Jsx_attributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsx_opening(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsx_opening(this);
		}
	}


}



class Jsx_closingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_jsx_closing;
        this.name = null; // Jsx_element_nameContext
    }

	LT() {
	    return this.getToken(EParser.LT, 0);
	};

	SLASH() {
	    return this.getToken(EParser.SLASH, 0);
	};

	GT() {
	    return this.getToken(EParser.GT, 0);
	};

	jsx_element_name() {
	    return this.getTypedRuleContext(Jsx_element_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsx_closing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsx_closing(this);
		}
	}


}



class Jsx_element_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_jsx_element_name;
    }

	jsx_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Jsx_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Jsx_identifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.DOT);
	    } else {
	        return this.getToken(EParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsx_element_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsx_element_name(this);
		}
	}


}



class Jsx_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_jsx_identifier;
    }

	identifier_or_keyword() {
	    return this.getTypedRuleContext(Identifier_or_keywordContext,0);
	};

	nospace_hyphen_identifier_or_keyword = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Nospace_hyphen_identifier_or_keywordContext);
	    } else {
	        return this.getTypedRuleContext(Nospace_hyphen_identifier_or_keywordContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsx_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsx_identifier(this);
		}
	}


}



class Jsx_attributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_jsx_attribute;
        this.name = null; // Jsx_identifierContext
        this.value = null; // Jsx_attribute_valueContext
    }

	ws_plus() {
	    return this.getTypedRuleContext(Ws_plusContext,0);
	};

	jsx_identifier() {
	    return this.getTypedRuleContext(Jsx_identifierContext,0);
	};

	EQ() {
	    return this.getToken(EParser.EQ, 0);
	};

	jsx_attribute_value() {
	    return this.getTypedRuleContext(Jsx_attribute_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsx_attribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsx_attribute(this);
		}
	}


}



class Jsx_attribute_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_jsx_attribute_value;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JsxValueContext extends Jsx_attribute_valueContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	LCURL() {
	    return this.getToken(EParser.LCURL, 0);
	};

	RCURL() {
	    return this.getToken(EParser.RCURL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsxValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsxValue(this);
		}
	}


}

EParser.JsxValueContext = JsxValueContext;

class JsxLiteralContext extends Jsx_attribute_valueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TEXT_LITERAL() {
	    return this.getToken(EParser.TEXT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsxLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsxLiteral(this);
		}
	}


}

EParser.JsxLiteralContext = JsxLiteralContext;

class Jsx_childrenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_jsx_children;
    }

	jsx_child = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Jsx_childContext);
	    } else {
	        return this.getTypedRuleContext(Jsx_childContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsx_children(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsx_children(this);
		}
	}


}



class Jsx_childContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_jsx_child;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JsxTextContext extends Jsx_childContext {

    constructor(parser, ctx) {
        super(parser);
        this.text = null; // Jsx_textContext;
        super.copyFrom(ctx);
    }

	jsx_text() {
	    return this.getTypedRuleContext(Jsx_textContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsxText(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsxText(this);
		}
	}


}

EParser.JsxTextContext = JsxTextContext;

class JsxChildContext extends Jsx_childContext {

    constructor(parser, ctx) {
        super(parser);
        this.jsx = null; // Jsx_elementContext;
        super.copyFrom(ctx);
    }

	jsx_element() {
	    return this.getTypedRuleContext(Jsx_elementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsxChild(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsxChild(this);
		}
	}


}

EParser.JsxChildContext = JsxChildContext;

class JsxCodeContext extends Jsx_childContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	LCURL() {
	    return this.getToken(EParser.LCURL, 0);
	};

	RCURL() {
	    return this.getToken(EParser.RCURL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsxCode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsxCode(this);
		}
	}


}

EParser.JsxCodeContext = JsxCodeContext;

class Jsx_textContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_jsx_text;
    }

	jsx_char = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Jsx_charContext);
	    } else {
	        return this.getTypedRuleContext(Jsx_charContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsx_text(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsx_text(this);
		}
	}


}



class Jsx_charContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_jsx_char;
    }

	LCURL() {
	    return this.getToken(EParser.LCURL, 0);
	};

	RCURL() {
	    return this.getToken(EParser.RCURL, 0);
	};

	LT() {
	    return this.getToken(EParser.LT, 0);
	};

	GT() {
	    return this.getToken(EParser.GT, 0);
	};

	JSX_TEXT() {
	    return this.getToken(EParser.JSX_TEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterJsx_char(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitJsx_char(this);
		}
	}


}



class Css_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_css_expression;
        this.field = null; // Css_fieldContext
    }

	LCURL() {
	    return this.getToken(EParser.LCURL, 0);
	};

	RCURL() {
	    return this.getToken(EParser.RCURL, 0);
	};

	css_field = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Css_fieldContext);
	    } else {
	        return this.getTypedRuleContext(Css_fieldContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCss_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCss_expression(this);
		}
	}


}



class Css_fieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_css_field;
        this.name = null; // Css_identifierContext
        this.value = null; // Css_valueContext
    }

	COLON() {
	    return this.getToken(EParser.COLON, 0);
	};

	SEMI() {
	    return this.getToken(EParser.SEMI, 0);
	};

	css_identifier() {
	    return this.getTypedRuleContext(Css_identifierContext,0);
	};

	css_value() {
	    return this.getTypedRuleContext(Css_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCss_field(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCss_field(this);
		}
	}


}



class Css_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_css_identifier;
    }

	identifier_or_keyword() {
	    return this.getTypedRuleContext(Identifier_or_keywordContext,0);
	};

	MINUS() {
	    return this.getToken(EParser.MINUS, 0);
	};

	nospace_identifier_or_keyword() {
	    return this.getTypedRuleContext(Nospace_identifier_or_keywordContext,0);
	};

	css_identifier() {
	    return this.getTypedRuleContext(Css_identifierContext,0);
	};

	nospace_hyphen_identifier_or_keyword = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Nospace_hyphen_identifier_or_keywordContext);
	    } else {
	        return this.getTypedRuleContext(Nospace_hyphen_identifier_or_keywordContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCss_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCss_identifier(this);
		}
	}


}



class Css_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_css_value;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CssTextContext extends Css_valueContext {

    constructor(parser, ctx) {
        super(parser);
        this.text = null; // Css_textContext;
        super.copyFrom(ctx);
    }

	css_text() {
	    return this.getTypedRuleContext(Css_textContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCssText(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCssText(this);
		}
	}


}

EParser.CssTextContext = CssTextContext;

class CssValueContext extends Css_valueContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	LCURL() {
	    return this.getToken(EParser.LCURL, 0);
	};

	RCURL() {
	    return this.getToken(EParser.RCURL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCssValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCssValue(this);
		}
	}


}

EParser.CssValueContext = CssValueContext;

class Css_textContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EParser.RULE_css_text;
    }

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EParser.SEMI);
	    } else {
	        return this.getToken(EParser.SEMI, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.enterCss_text(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EParserListener ) {
	        listener.exitCss_text(this);
		}
	}


}




EParser.Enum_category_declarationContext = Enum_category_declarationContext; 
EParser.Enum_native_declarationContext = Enum_native_declarationContext; 
EParser.Native_symbolContext = Native_symbolContext; 
EParser.Category_symbolContext = Category_symbolContext; 
EParser.Attribute_declarationContext = Attribute_declarationContext; 
EParser.Concrete_widget_declarationContext = Concrete_widget_declarationContext; 
EParser.Native_widget_declarationContext = Native_widget_declarationContext; 
EParser.Concrete_category_declarationContext = Concrete_category_declarationContext; 
EParser.Singleton_category_declarationContext = Singleton_category_declarationContext; 
EParser.Derived_listContext = Derived_listContext; 
EParser.Operator_method_declarationContext = Operator_method_declarationContext; 
EParser.Setter_method_declarationContext = Setter_method_declarationContext; 
EParser.Native_setter_declarationContext = Native_setter_declarationContext; 
EParser.Getter_method_declarationContext = Getter_method_declarationContext; 
EParser.Native_getter_declarationContext = Native_getter_declarationContext; 
EParser.Native_category_declarationContext = Native_category_declarationContext; 
EParser.Native_resource_declarationContext = Native_resource_declarationContext; 
EParser.Native_category_bindingsContext = Native_category_bindingsContext; 
EParser.Native_category_binding_listContext = Native_category_binding_listContext; 
EParser.Attribute_listContext = Attribute_listContext; 
EParser.Abstract_method_declarationContext = Abstract_method_declarationContext; 
EParser.Concrete_method_declarationContext = Concrete_method_declarationContext; 
EParser.Native_method_declarationContext = Native_method_declarationContext; 
EParser.Test_method_declarationContext = Test_method_declarationContext; 
EParser.AssertionContext = AssertionContext; 
EParser.Full_argument_listContext = Full_argument_listContext; 
EParser.Typed_argumentContext = Typed_argumentContext; 
EParser.StatementContext = StatementContext; 
EParser.Flush_statementContext = Flush_statementContext; 
EParser.Store_statementContext = Store_statementContext; 
EParser.Method_call_statementContext = Method_call_statementContext; 
EParser.With_resource_statementContext = With_resource_statementContext; 
EParser.With_singleton_statementContext = With_singleton_statementContext; 
EParser.Switch_statementContext = Switch_statementContext; 
EParser.Switch_case_statementContext = Switch_case_statementContext; 
EParser.For_each_statementContext = For_each_statementContext; 
EParser.Do_while_statementContext = Do_while_statementContext; 
EParser.While_statementContext = While_statementContext; 
EParser.If_statementContext = If_statementContext; 
EParser.Else_if_statement_listContext = Else_if_statement_listContext; 
EParser.Raise_statementContext = Raise_statementContext; 
EParser.Try_statementContext = Try_statementContext; 
EParser.Catch_statementContext = Catch_statementContext; 
EParser.Break_statementContext = Break_statementContext; 
EParser.Return_statementContext = Return_statementContext; 
EParser.ExpressionContext = ExpressionContext; 
EParser.Filter_expressionContext = Filter_expressionContext; 
EParser.Unresolved_expressionContext = Unresolved_expressionContext; 
EParser.Unresolved_selectorContext = Unresolved_selectorContext; 
EParser.Invocation_expressionContext = Invocation_expressionContext; 
EParser.Invocation_trailerContext = Invocation_trailerContext; 
EParser.Selectable_expressionContext = Selectable_expressionContext; 
EParser.Instance_expressionContext = Instance_expressionContext; 
EParser.Instance_selectorContext = Instance_selectorContext; 
EParser.Mutable_instance_expressionContext = Mutable_instance_expressionContext; 
EParser.Document_expressionContext = Document_expressionContext; 
EParser.Blob_expressionContext = Blob_expressionContext; 
EParser.Constructor_expressionContext = Constructor_expressionContext; 
EParser.Write_statementContext = Write_statementContext; 
EParser.Ambiguous_expressionContext = Ambiguous_expressionContext; 
EParser.Filtered_list_suffixContext = Filtered_list_suffixContext; 
EParser.Fetch_expressionContext = Fetch_expressionContext; 
EParser.Fetch_statementContext = Fetch_statementContext; 
EParser.Read_statementContext = Read_statementContext; 
EParser.Sorted_expressionContext = Sorted_expressionContext; 
EParser.Argument_assignment_listContext = Argument_assignment_listContext; 
EParser.With_argument_assignment_listContext = With_argument_assignment_listContext; 
EParser.Argument_assignmentContext = Argument_assignmentContext; 
EParser.Assign_instance_statementContext = Assign_instance_statementContext; 
EParser.Child_instanceContext = Child_instanceContext; 
EParser.Assign_tuple_statementContext = Assign_tuple_statementContext; 
EParser.LfsContext = LfsContext; 
EParser.LfpContext = LfpContext; 
EParser.Ws_plusContext = Ws_plusContext; 
EParser.IndentContext = IndentContext; 
EParser.DedentContext = DedentContext; 
EParser.Type_literalContext = Type_literalContext; 
EParser.Null_literalContext = Null_literalContext; 
EParser.ReplContext = ReplContext; 
EParser.Declaration_listContext = Declaration_listContext; 
EParser.DeclarationsContext = DeclarationsContext; 
EParser.DeclarationContext = DeclarationContext; 
EParser.Annotation_constructorContext = Annotation_constructorContext; 
EParser.Annotation_identifierContext = Annotation_identifierContext; 
EParser.Annotation_argumentContext = Annotation_argumentContext; 
EParser.Annotation_argument_nameContext = Annotation_argument_nameContext; 
EParser.Annotation_argument_valueContext = Annotation_argument_valueContext; 
EParser.Resource_declarationContext = Resource_declarationContext; 
EParser.Enum_declarationContext = Enum_declarationContext; 
EParser.Native_symbol_listContext = Native_symbol_listContext; 
EParser.Category_symbol_listContext = Category_symbol_listContext; 
EParser.Symbol_listContext = Symbol_listContext; 
EParser.Attribute_constraintContext = Attribute_constraintContext; 
EParser.List_literalContext = List_literalContext; 
EParser.Set_literalContext = Set_literalContext; 
EParser.Expression_listContext = Expression_listContext; 
EParser.Range_literalContext = Range_literalContext; 
EParser.TypedefContext = TypedefContext; 
EParser.Primary_typeContext = Primary_typeContext; 
EParser.Native_typeContext = Native_typeContext; 
EParser.Category_typeContext = Category_typeContext; 
EParser.Mutable_category_typeContext = Mutable_category_typeContext; 
EParser.Code_typeContext = Code_typeContext; 
EParser.Category_declarationContext = Category_declarationContext; 
EParser.Widget_declarationContext = Widget_declarationContext; 
EParser.Type_identifier_listContext = Type_identifier_listContext; 
EParser.Method_identifierContext = Method_identifierContext; 
EParser.Identifier_or_keywordContext = Identifier_or_keywordContext; 
EParser.Nospace_hyphen_identifier_or_keywordContext = Nospace_hyphen_identifier_or_keywordContext; 
EParser.Nospace_identifier_or_keywordContext = Nospace_identifier_or_keywordContext; 
EParser.IdentifierContext = IdentifierContext; 
EParser.Member_identifierContext = Member_identifierContext; 
EParser.Variable_identifierContext = Variable_identifierContext; 
EParser.Attribute_identifierContext = Attribute_identifierContext; 
EParser.Type_identifierContext = Type_identifierContext; 
EParser.Symbol_identifierContext = Symbol_identifierContext; 
EParser.Argument_listContext = Argument_listContext; 
EParser.ArgumentContext = ArgumentContext; 
EParser.Operator_argumentContext = Operator_argumentContext; 
EParser.Named_argumentContext = Named_argumentContext; 
EParser.Code_argumentContext = Code_argumentContext; 
EParser.Category_or_any_typeContext = Category_or_any_typeContext; 
EParser.Any_typeContext = Any_typeContext; 
EParser.Member_method_declaration_listContext = Member_method_declaration_listContext; 
EParser.Member_method_declarationContext = Member_method_declarationContext; 
EParser.Native_member_method_declaration_listContext = Native_member_method_declaration_listContext; 
EParser.Native_member_method_declarationContext = Native_member_method_declarationContext; 
EParser.Native_category_bindingContext = Native_category_bindingContext; 
EParser.Python_category_bindingContext = Python_category_bindingContext; 
EParser.Python_moduleContext = Python_moduleContext; 
EParser.Javascript_category_bindingContext = Javascript_category_bindingContext; 
EParser.Javascript_moduleContext = Javascript_moduleContext; 
EParser.Variable_identifier_listContext = Variable_identifier_listContext; 
EParser.Attribute_identifier_listContext = Attribute_identifier_listContext; 
EParser.Method_declarationContext = Method_declarationContext; 
EParser.Comment_statementContext = Comment_statementContext; 
EParser.Native_statement_listContext = Native_statement_listContext; 
EParser.Native_statementContext = Native_statementContext; 
EParser.Python_native_statementContext = Python_native_statementContext; 
EParser.Javascript_native_statementContext = Javascript_native_statementContext; 
EParser.Statement_listContext = Statement_listContext; 
EParser.Assertion_listContext = Assertion_listContext; 
EParser.Switch_case_statement_listContext = Switch_case_statement_listContext; 
EParser.Catch_statement_listContext = Catch_statement_listContext; 
EParser.Literal_collectionContext = Literal_collectionContext; 
EParser.Atomic_literalContext = Atomic_literalContext; 
EParser.Literal_list_literalContext = Literal_list_literalContext; 
EParser.This_expressionContext = This_expressionContext; 
EParser.Super_expressionContext = Super_expressionContext; 
EParser.Parenthesis_expressionContext = Parenthesis_expressionContext; 
EParser.Literal_expressionContext = Literal_expressionContext; 
EParser.Collection_literalContext = Collection_literalContext; 
EParser.Tuple_literalContext = Tuple_literalContext; 
EParser.Dict_literalContext = Dict_literalContext; 
EParser.Document_literalContext = Document_literalContext; 
EParser.Expression_tupleContext = Expression_tupleContext; 
EParser.Doc_entry_listContext = Doc_entry_listContext; 
EParser.Doc_entryContext = Doc_entryContext; 
EParser.Doc_keyContext = Doc_keyContext; 
EParser.Dict_entry_listContext = Dict_entry_listContext; 
EParser.Dict_entryContext = Dict_entryContext; 
EParser.Dict_keyContext = Dict_keyContext; 
EParser.Slice_argumentsContext = Slice_argumentsContext; 
EParser.Assign_variable_statementContext = Assign_variable_statementContext; 
EParser.Assignable_instanceContext = Assignable_instanceContext; 
EParser.Is_expressionContext = Is_expressionContext; 
EParser.Arrow_expressionContext = Arrow_expressionContext; 
EParser.Arrow_prefixContext = Arrow_prefixContext; 
EParser.Arrow_argsContext = Arrow_argsContext; 
EParser.Sorted_keyContext = Sorted_keyContext; 
EParser.Read_blob_expressionContext = Read_blob_expressionContext; 
EParser.Read_all_expressionContext = Read_all_expressionContext; 
EParser.Read_one_expressionContext = Read_one_expressionContext; 
EParser.Order_by_listContext = Order_by_listContext; 
EParser.Order_byContext = Order_byContext; 
EParser.OperatorContext = OperatorContext; 
EParser.KeywordContext = KeywordContext; 
EParser.New_tokenContext = New_tokenContext; 
EParser.Key_tokenContext = Key_tokenContext; 
EParser.Module_tokenContext = Module_tokenContext; 
EParser.Value_tokenContext = Value_tokenContext; 
EParser.Symbols_tokenContext = Symbols_tokenContext; 
EParser.AssignContext = AssignContext; 
EParser.MultiplyContext = MultiplyContext; 
EParser.DivideContext = DivideContext; 
EParser.IdivideContext = IdivideContext; 
EParser.ModuloContext = ModuloContext; 
EParser.Javascript_statementContext = Javascript_statementContext; 
EParser.Javascript_expressionContext = Javascript_expressionContext; 
EParser.Javascript_primary_expressionContext = Javascript_primary_expressionContext; 
EParser.Javascript_this_expressionContext = Javascript_this_expressionContext; 
EParser.Javascript_new_expressionContext = Javascript_new_expressionContext; 
EParser.Javascript_selector_expressionContext = Javascript_selector_expressionContext; 
EParser.Javascript_method_expressionContext = Javascript_method_expressionContext; 
EParser.Javascript_argumentsContext = Javascript_argumentsContext; 
EParser.Javascript_item_expressionContext = Javascript_item_expressionContext; 
EParser.Javascript_parenthesis_expressionContext = Javascript_parenthesis_expressionContext; 
EParser.Javascript_identifier_expressionContext = Javascript_identifier_expressionContext; 
EParser.Javascript_literal_expressionContext = Javascript_literal_expressionContext; 
EParser.Javascript_identifierContext = Javascript_identifierContext; 
EParser.Python_statementContext = Python_statementContext; 
EParser.Python_expressionContext = Python_expressionContext; 
EParser.Python_primary_expressionContext = Python_primary_expressionContext; 
EParser.Python_self_expressionContext = Python_self_expressionContext; 
EParser.Python_selector_expressionContext = Python_selector_expressionContext; 
EParser.Python_method_expressionContext = Python_method_expressionContext; 
EParser.Python_argument_listContext = Python_argument_listContext; 
EParser.Python_ordinal_argument_listContext = Python_ordinal_argument_listContext; 
EParser.Python_named_argument_listContext = Python_named_argument_listContext; 
EParser.Python_parenthesis_expressionContext = Python_parenthesis_expressionContext; 
EParser.Python_identifier_expressionContext = Python_identifier_expressionContext; 
EParser.Python_literal_expressionContext = Python_literal_expressionContext; 
EParser.Python_identifierContext = Python_identifierContext; 
EParser.Java_statementContext = Java_statementContext; 
EParser.Java_expressionContext = Java_expressionContext; 
EParser.Java_primary_expressionContext = Java_primary_expressionContext; 
EParser.Java_this_expressionContext = Java_this_expressionContext; 
EParser.Java_new_expressionContext = Java_new_expressionContext; 
EParser.Java_selector_expressionContext = Java_selector_expressionContext; 
EParser.Java_method_expressionContext = Java_method_expressionContext; 
EParser.Java_argumentsContext = Java_argumentsContext; 
EParser.Java_item_expressionContext = Java_item_expressionContext; 
EParser.Java_parenthesis_expressionContext = Java_parenthesis_expressionContext; 
EParser.Java_identifier_expressionContext = Java_identifier_expressionContext; 
EParser.Java_class_identifier_expressionContext = Java_class_identifier_expressionContext; 
EParser.Java_literal_expressionContext = Java_literal_expressionContext; 
EParser.Java_identifierContext = Java_identifierContext; 
EParser.Csharp_statementContext = Csharp_statementContext; 
EParser.Csharp_expressionContext = Csharp_expressionContext; 
EParser.Csharp_primary_expressionContext = Csharp_primary_expressionContext; 
EParser.Csharp_this_expressionContext = Csharp_this_expressionContext; 
EParser.Csharp_new_expressionContext = Csharp_new_expressionContext; 
EParser.Csharp_selector_expressionContext = Csharp_selector_expressionContext; 
EParser.Csharp_method_expressionContext = Csharp_method_expressionContext; 
EParser.Csharp_argumentsContext = Csharp_argumentsContext; 
EParser.Csharp_item_expressionContext = Csharp_item_expressionContext; 
EParser.Csharp_parenthesis_expressionContext = Csharp_parenthesis_expressionContext; 
EParser.Csharp_identifier_expressionContext = Csharp_identifier_expressionContext; 
EParser.Csharp_literal_expressionContext = Csharp_literal_expressionContext; 
EParser.Csharp_identifierContext = Csharp_identifierContext; 
EParser.Jsx_expressionContext = Jsx_expressionContext; 
EParser.Jsx_elementContext = Jsx_elementContext; 
EParser.Jsx_fragmentContext = Jsx_fragmentContext; 
EParser.Jsx_fragment_startContext = Jsx_fragment_startContext; 
EParser.Jsx_fragment_endContext = Jsx_fragment_endContext; 
EParser.Jsx_self_closingContext = Jsx_self_closingContext; 
EParser.Jsx_openingContext = Jsx_openingContext; 
EParser.Jsx_closingContext = Jsx_closingContext; 
EParser.Jsx_element_nameContext = Jsx_element_nameContext; 
EParser.Jsx_identifierContext = Jsx_identifierContext; 
EParser.Jsx_attributeContext = Jsx_attributeContext; 
EParser.Jsx_attribute_valueContext = Jsx_attribute_valueContext; 
EParser.Jsx_childrenContext = Jsx_childrenContext; 
EParser.Jsx_childContext = Jsx_childContext; 
EParser.Jsx_textContext = Jsx_textContext; 
EParser.Jsx_charContext = Jsx_charContext; 
EParser.Css_expressionContext = Css_expressionContext; 
EParser.Css_fieldContext = Css_fieldContext; 
EParser.Css_identifierContext = Css_identifierContext; 
EParser.Css_valueContext = Css_valueContext; 
EParser.Css_textContext = Css_textContext; 
