// Generated from EParser.g4 by ANTLR 4.11.2-SNAPSHOT

import antlr4 from 'antlr4';
import EParserListener from "./EParserListener";
// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;

import AbstractParser from './AbstractParser';

export default class EParser extends AbstractParser {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly LF_TAB = 3;
	public static readonly LF_MORE = 4;
	public static readonly LF = 5;
	public static readonly TAB = 6;
	public static readonly WS = 7;
	public static readonly COMMENT = 8;
	public static readonly JAVA = 9;
	public static readonly CSHARP = 10;
	public static readonly PYTHON2 = 11;
	public static readonly PYTHON3 = 12;
	public static readonly JAVASCRIPT = 13;
	public static readonly SWIFT = 14;
	public static readonly COLON = 15;
	public static readonly SEMI = 16;
	public static readonly COMMA = 17;
	public static readonly RANGE = 18;
	public static readonly DOT = 19;
	public static readonly LPAR = 20;
	public static readonly RPAR = 21;
	public static readonly LBRAK = 22;
	public static readonly RBRAK = 23;
	public static readonly LCURL = 24;
	public static readonly RCURL = 25;
	public static readonly QMARK = 26;
	public static readonly XMARK = 27;
	public static readonly AMP = 28;
	public static readonly AMP2 = 29;
	public static readonly PIPE = 30;
	public static readonly PIPE2 = 31;
	public static readonly PLUS = 32;
	public static readonly MINUS = 33;
	public static readonly STAR = 34;
	public static readonly SLASH = 35;
	public static readonly BSLASH = 36;
	public static readonly PERCENT = 37;
	public static readonly SHARP = 38;
	public static readonly GT = 39;
	public static readonly GTE = 40;
	public static readonly LT = 41;
	public static readonly LTE = 42;
	public static readonly LTGT = 43;
	public static readonly LTCOLONGT = 44;
	public static readonly EQ = 45;
	public static readonly XEQ = 46;
	public static readonly EQ2 = 47;
	public static readonly TEQ = 48;
	public static readonly TILDE = 49;
	public static readonly LARROW = 50;
	public static readonly RARROW = 51;
	public static readonly EGT = 52;
	public static readonly BOOLEAN = 53;
	public static readonly CSS = 54;
	public static readonly CHARACTER = 55;
	public static readonly TEXT = 56;
	public static readonly INTEGER = 57;
	public static readonly DECIMAL = 58;
	public static readonly DATE = 59;
	public static readonly TIME = 60;
	public static readonly DATETIME = 61;
	public static readonly PERIOD = 62;
	public static readonly VERSION = 63;
	public static readonly METHOD_COLON = 64;
	public static readonly CODE = 65;
	public static readonly DOCUMENT = 66;
	public static readonly BLOB = 67;
	public static readonly IMAGE = 68;
	public static readonly UUID = 69;
	public static readonly DBID = 70;
	public static readonly ITERATOR = 71;
	public static readonly CURSOR = 72;
	public static readonly HTML = 73;
	public static readonly TYPE = 74;
	public static readonly ABSTRACT = 75;
	public static readonly ALL = 76;
	public static readonly ALWAYS = 77;
	public static readonly AND = 78;
	public static readonly ANY = 79;
	public static readonly AS = 80;
	public static readonly ASC = 81;
	public static readonly ATTR = 82;
	public static readonly ATTRIBUTE = 83;
	public static readonly ATTRIBUTES = 84;
	public static readonly BINDINGS = 85;
	public static readonly BREAK = 86;
	public static readonly BY = 87;
	public static readonly CASE = 88;
	public static readonly CATCH = 89;
	public static readonly CATEGORY = 90;
	public static readonly CLASS = 91;
	public static readonly CONTAINS = 92;
	public static readonly DEF = 93;
	public static readonly DEFAULT = 94;
	public static readonly DEFINE = 95;
	public static readonly DELETE = 96;
	public static readonly DESC = 97;
	public static readonly DO = 98;
	public static readonly DOING = 99;
	public static readonly EACH = 100;
	public static readonly ELSE = 101;
	public static readonly ENUM = 102;
	public static readonly ENUMERATED = 103;
	public static readonly EXCEPT = 104;
	public static readonly EXECUTE = 105;
	public static readonly EXPECTING = 106;
	public static readonly EXTENDS = 107;
	public static readonly FETCH = 108;
	public static readonly FILTERED = 109;
	public static readonly FINALLY = 110;
	public static readonly FLUSH = 111;
	public static readonly FOR = 112;
	public static readonly FROM = 113;
	public static readonly GETTER = 114;
	public static readonly HAS = 115;
	public static readonly IF = 116;
	public static readonly IN = 117;
	public static readonly INCLUDE = 118;
	public static readonly INDEX = 119;
	public static readonly INVOKE_COLON = 120;
	public static readonly IS = 121;
	public static readonly MATCHING = 122;
	public static readonly METHOD = 123;
	public static readonly METHODS = 124;
	public static readonly MODULO = 125;
	public static readonly MUTABLE = 126;
	public static readonly NATIVE = 127;
	public static readonly NONE = 128;
	public static readonly NOT = 129;
	public static readonly NOTHING = 130;
	public static readonly NULL = 131;
	public static readonly ON = 132;
	public static readonly ONE = 133;
	public static readonly OPERATOR = 134;
	public static readonly OR = 135;
	public static readonly ORDER = 136;
	public static readonly OTHERWISE = 137;
	public static readonly PASS = 138;
	public static readonly RAISE = 139;
	public static readonly READ = 140;
	public static readonly RECEIVING = 141;
	public static readonly RESOURCE = 142;
	public static readonly RETURN = 143;
	public static readonly RETURNING = 144;
	public static readonly ROWS = 145;
	public static readonly SELF = 146;
	public static readonly SETTER = 147;
	public static readonly SINGLETON = 148;
	public static readonly SORTED = 149;
	public static readonly STORABLE = 150;
	public static readonly STORE = 151;
	public static readonly SUPER = 152;
	public static readonly SWITCH = 153;
	public static readonly TEST = 154;
	public static readonly THEN = 155;
	public static readonly THIS = 156;
	public static readonly THROW = 157;
	public static readonly TO = 158;
	public static readonly TRY = 159;
	public static readonly VERIFYING = 160;
	public static readonly WIDGET = 161;
	public static readonly WITH = 162;
	public static readonly WHEN = 163;
	public static readonly WHERE = 164;
	public static readonly WHILE = 165;
	public static readonly WRITE = 166;
	public static readonly BOOLEAN_LITERAL = 167;
	public static readonly CHAR_LITERAL = 168;
	public static readonly MIN_INTEGER = 169;
	public static readonly MAX_INTEGER = 170;
	public static readonly SYMBOL_IDENTIFIER = 171;
	public static readonly TYPE_IDENTIFIER = 172;
	public static readonly VARIABLE_IDENTIFIER = 173;
	public static readonly NATIVE_IDENTIFIER = 174;
	public static readonly DOLLAR_IDENTIFIER = 175;
	public static readonly ARONDBASE_IDENTIFIER = 176;
	public static readonly TEXT_LITERAL = 177;
	public static readonly UUID_LITERAL = 178;
	public static readonly VERSION_LITERAL = 179;
	public static readonly INTEGER_LITERAL = 180;
	public static readonly HEXA_LITERAL = 181;
	public static readonly DECIMAL_LITERAL = 182;
	public static readonly DATETIME_LITERAL = 183;
	public static readonly TIME_LITERAL = 184;
	public static readonly DATE_LITERAL = 185;
	public static readonly PERIOD_LITERAL = 186;
	public static readonly JSX_TEXT = 187;
	public static readonly EOF = antlr4.Token.EOF;
	public static readonly RULE_enum_category_declaration = 0;
	public static readonly RULE_enum_native_declaration = 1;
	public static readonly RULE_native_symbol = 2;
	public static readonly RULE_category_symbol = 3;
	public static readonly RULE_attribute_declaration = 4;
	public static readonly RULE_concrete_widget_declaration = 5;
	public static readonly RULE_native_widget_declaration = 6;
	public static readonly RULE_concrete_category_declaration = 7;
	public static readonly RULE_singleton_category_declaration = 8;
	public static readonly RULE_derived_list = 9;
	public static readonly RULE_operator_method_declaration = 10;
	public static readonly RULE_setter_method_declaration = 11;
	public static readonly RULE_native_setter_declaration = 12;
	public static readonly RULE_getter_method_declaration = 13;
	public static readonly RULE_native_getter_declaration = 14;
	public static readonly RULE_native_category_declaration = 15;
	public static readonly RULE_native_resource_declaration = 16;
	public static readonly RULE_native_category_bindings = 17;
	public static readonly RULE_native_category_binding_list = 18;
	public static readonly RULE_attribute_list = 19;
	public static readonly RULE_abstract_global_method_declaration = 20;
	public static readonly RULE_abstract_member_method_declaration = 21;
	public static readonly RULE_concrete_method_declaration = 22;
	public static readonly RULE_native_method_declaration = 23;
	public static readonly RULE_test_method_declaration = 24;
	public static readonly RULE_assertion = 25;
	public static readonly RULE_full_argument_list = 26;
	public static readonly RULE_typed_argument = 27;
	public static readonly RULE_statement = 28;
	public static readonly RULE_flush_statement = 29;
	public static readonly RULE_store_statement = 30;
	public static readonly RULE_method_call_statement = 31;
	public static readonly RULE_with_resource_statement = 32;
	public static readonly RULE_with_singleton_statement = 33;
	public static readonly RULE_switch_statement = 34;
	public static readonly RULE_switch_case_statement = 35;
	public static readonly RULE_for_each_statement = 36;
	public static readonly RULE_do_while_statement = 37;
	public static readonly RULE_while_statement = 38;
	public static readonly RULE_if_statement = 39;
	public static readonly RULE_else_if_statement_list = 40;
	public static readonly RULE_raise_statement = 41;
	public static readonly RULE_try_statement = 42;
	public static readonly RULE_catch_statement = 43;
	public static readonly RULE_break_statement = 44;
	public static readonly RULE_return_statement = 45;
	public static readonly RULE_expression = 46;
	public static readonly RULE_filter_expression = 47;
	public static readonly RULE_unresolved_expression = 48;
	public static readonly RULE_unresolved_selector = 49;
	public static readonly RULE_invocation_expression = 50;
	public static readonly RULE_invocation_trailer = 51;
	public static readonly RULE_selectable_expression = 52;
	public static readonly RULE_instance_expression = 53;
	public static readonly RULE_instance_selector = 54;
	public static readonly RULE_mutable_instance_expression = 55;
	public static readonly RULE_document_expression = 56;
	public static readonly RULE_blob_expression = 57;
	public static readonly RULE_constructor_expression = 58;
	public static readonly RULE_write_statement = 59;
	public static readonly RULE_ambiguous_expression = 60;
	public static readonly RULE_filtered_list_suffix = 61;
	public static readonly RULE_fetch_expression = 62;
	public static readonly RULE_fetch_statement = 63;
	public static readonly RULE_include_list = 64;
	public static readonly RULE_then = 65;
	public static readonly RULE_read_statement = 66;
	public static readonly RULE_sorted_expression = 67;
	public static readonly RULE_argument_assignment_list = 68;
	public static readonly RULE_with_argument_assignment_list = 69;
	public static readonly RULE_argument_assignment = 70;
	public static readonly RULE_assign_instance_statement = 71;
	public static readonly RULE_child_instance = 72;
	public static readonly RULE_assign_tuple_statement = 73;
	public static readonly RULE_lfs = 74;
	public static readonly RULE_lfp = 75;
	public static readonly RULE_ws_plus = 76;
	public static readonly RULE_indent = 77;
	public static readonly RULE_dedent = 78;
	public static readonly RULE_type_literal = 79;
	public static readonly RULE_null_literal = 80;
	public static readonly RULE_repl = 81;
	public static readonly RULE_declaration_list = 82;
	public static readonly RULE_declarations = 83;
	public static readonly RULE_declaration = 84;
	public static readonly RULE_annotation_constructor = 85;
	public static readonly RULE_annotation_identifier = 86;
	public static readonly RULE_annotation_argument = 87;
	public static readonly RULE_annotation_argument_name = 88;
	public static readonly RULE_annotation_argument_value = 89;
	public static readonly RULE_resource_declaration = 90;
	public static readonly RULE_enum_declaration = 91;
	public static readonly RULE_native_symbol_list = 92;
	public static readonly RULE_category_symbol_list = 93;
	public static readonly RULE_symbol_list = 94;
	public static readonly RULE_attribute_constraint = 95;
	public static readonly RULE_list_literal = 96;
	public static readonly RULE_set_literal = 97;
	public static readonly RULE_expression_list = 98;
	public static readonly RULE_range_literal = 99;
	public static readonly RULE_typedef = 100;
	public static readonly RULE_primary_type = 101;
	public static readonly RULE_native_type = 102;
	public static readonly RULE_category_type = 103;
	public static readonly RULE_mutable_category_type = 104;
	public static readonly RULE_code_type = 105;
	public static readonly RULE_category_declaration = 106;
	public static readonly RULE_widget_declaration = 107;
	public static readonly RULE_type_identifier_list = 108;
	public static readonly RULE_method_identifier = 109;
	public static readonly RULE_identifier_or_keyword = 110;
	public static readonly RULE_nospace_hyphen_identifier_or_keyword = 111;
	public static readonly RULE_nospace_identifier_or_keyword = 112;
	public static readonly RULE_identifier = 113;
	public static readonly RULE_member_identifier = 114;
	public static readonly RULE_variable_identifier = 115;
	public static readonly RULE_attribute_identifier = 116;
	public static readonly RULE_type_identifier = 117;
	public static readonly RULE_symbol_identifier = 118;
	public static readonly RULE_argument_list = 119;
	public static readonly RULE_argument = 120;
	public static readonly RULE_operator_argument = 121;
	public static readonly RULE_named_argument = 122;
	public static readonly RULE_code_argument = 123;
	public static readonly RULE_category_or_any_type = 124;
	public static readonly RULE_any_type = 125;
	public static readonly RULE_member_method_declaration_list = 126;
	public static readonly RULE_member_method_declaration = 127;
	public static readonly RULE_native_member_method_declaration_list = 128;
	public static readonly RULE_native_member_method_declaration = 129;
	public static readonly RULE_native_category_binding = 130;
	public static readonly RULE_python_category_binding = 131;
	public static readonly RULE_python_module = 132;
	public static readonly RULE_javascript_category_binding = 133;
	public static readonly RULE_javascript_module = 134;
	public static readonly RULE_variable_identifier_list = 135;
	public static readonly RULE_attribute_identifier_list = 136;
	public static readonly RULE_method_declaration = 137;
	public static readonly RULE_comment_statement = 138;
	public static readonly RULE_native_statement_list = 139;
	public static readonly RULE_native_statement = 140;
	public static readonly RULE_python_native_statement = 141;
	public static readonly RULE_javascript_native_statement = 142;
	public static readonly RULE_statement_list = 143;
	public static readonly RULE_assertion_list = 144;
	public static readonly RULE_switch_case_statement_list = 145;
	public static readonly RULE_catch_statement_list = 146;
	public static readonly RULE_literal_collection = 147;
	public static readonly RULE_atomic_literal = 148;
	public static readonly RULE_literal_list_literal = 149;
	public static readonly RULE_this_expression = 150;
	public static readonly RULE_super_expression = 151;
	public static readonly RULE_parenthesis_expression = 152;
	public static readonly RULE_literal_expression = 153;
	public static readonly RULE_collection_literal = 154;
	public static readonly RULE_tuple_literal = 155;
	public static readonly RULE_dict_literal = 156;
	public static readonly RULE_document_literal = 157;
	public static readonly RULE_expression_tuple = 158;
	public static readonly RULE_doc_entry_list = 159;
	public static readonly RULE_doc_entry = 160;
	public static readonly RULE_doc_key = 161;
	public static readonly RULE_dict_entry_list = 162;
	public static readonly RULE_dict_entry = 163;
	public static readonly RULE_dict_key = 164;
	public static readonly RULE_slice_arguments = 165;
	public static readonly RULE_assign_variable_statement = 166;
	public static readonly RULE_assignable_instance = 167;
	public static readonly RULE_is_expression = 168;
	public static readonly RULE_metadata = 169;
	public static readonly RULE_arrow_expression = 170;
	public static readonly RULE_arrow_prefix = 171;
	public static readonly RULE_arrow_args = 172;
	public static readonly RULE_sorted_key = 173;
	public static readonly RULE_read_blob_expression = 174;
	public static readonly RULE_read_all_expression = 175;
	public static readonly RULE_read_one_expression = 176;
	public static readonly RULE_order_by_list = 177;
	public static readonly RULE_order_by = 178;
	public static readonly RULE_operator = 179;
	public static readonly RULE_keyword = 180;
	public static readonly RULE_new_token = 181;
	public static readonly RULE_key_token = 182;
	public static readonly RULE_module_token = 183;
	public static readonly RULE_value_token = 184;
	public static readonly RULE_symbols_token = 185;
	public static readonly RULE_assign = 186;
	public static readonly RULE_multiply = 187;
	public static readonly RULE_divide = 188;
	public static readonly RULE_idivide = 189;
	public static readonly RULE_modulo = 190;
	public static readonly RULE_javascript_statement = 191;
	public static readonly RULE_javascript_expression = 192;
	public static readonly RULE_javascript_primary_expression = 193;
	public static readonly RULE_javascript_this_expression = 194;
	public static readonly RULE_javascript_new_expression = 195;
	public static readonly RULE_javascript_selector_expression = 196;
	public static readonly RULE_javascript_method_expression = 197;
	public static readonly RULE_javascript_arguments = 198;
	public static readonly RULE_javascript_item_expression = 199;
	public static readonly RULE_javascript_parenthesis_expression = 200;
	public static readonly RULE_javascript_identifier_expression = 201;
	public static readonly RULE_javascript_literal_expression = 202;
	public static readonly RULE_javascript_identifier = 203;
	public static readonly RULE_python_statement = 204;
	public static readonly RULE_python_expression = 205;
	public static readonly RULE_python_primary_expression = 206;
	public static readonly RULE_python_self_expression = 207;
	public static readonly RULE_python_selector_expression = 208;
	public static readonly RULE_python_method_expression = 209;
	public static readonly RULE_python_argument_list = 210;
	public static readonly RULE_python_ordinal_argument_list = 211;
	public static readonly RULE_python_named_argument_list = 212;
	public static readonly RULE_python_parenthesis_expression = 213;
	public static readonly RULE_python_identifier_expression = 214;
	public static readonly RULE_python_literal_expression = 215;
	public static readonly RULE_python_identifier = 216;
	public static readonly RULE_java_statement = 217;
	public static readonly RULE_java_expression = 218;
	public static readonly RULE_java_primary_expression = 219;
	public static readonly RULE_java_this_expression = 220;
	public static readonly RULE_java_new_expression = 221;
	public static readonly RULE_java_selector_expression = 222;
	public static readonly RULE_java_method_expression = 223;
	public static readonly RULE_java_arguments = 224;
	public static readonly RULE_java_item_expression = 225;
	public static readonly RULE_java_parenthesis_expression = 226;
	public static readonly RULE_java_identifier_expression = 227;
	public static readonly RULE_java_class_identifier_expression = 228;
	public static readonly RULE_java_literal_expression = 229;
	public static readonly RULE_java_identifier = 230;
	public static readonly RULE_csharp_statement = 231;
	public static readonly RULE_csharp_expression = 232;
	public static readonly RULE_csharp_primary_expression = 233;
	public static readonly RULE_csharp_this_expression = 234;
	public static readonly RULE_csharp_new_expression = 235;
	public static readonly RULE_csharp_selector_expression = 236;
	public static readonly RULE_csharp_method_expression = 237;
	public static readonly RULE_csharp_arguments = 238;
	public static readonly RULE_csharp_item_expression = 239;
	public static readonly RULE_csharp_parenthesis_expression = 240;
	public static readonly RULE_csharp_identifier_expression = 241;
	public static readonly RULE_csharp_literal_expression = 242;
	public static readonly RULE_csharp_identifier = 243;
	public static readonly RULE_jsx_expression = 244;
	public static readonly RULE_jsx_element = 245;
	public static readonly RULE_jsx_fragment = 246;
	public static readonly RULE_jsx_fragment_start = 247;
	public static readonly RULE_jsx_fragment_end = 248;
	public static readonly RULE_jsx_self_closing = 249;
	public static readonly RULE_jsx_opening = 250;
	public static readonly RULE_jsx_closing = 251;
	public static readonly RULE_jsx_element_name = 252;
	public static readonly RULE_jsx_identifier = 253;
	public static readonly RULE_jsx_attribute = 254;
	public static readonly RULE_jsx_attribute_value = 255;
	public static readonly RULE_jsx_children = 256;
	public static readonly RULE_jsx_child = 257;
	public static readonly RULE_jsx_text = 258;
	public static readonly RULE_jsx_char = 259;
	public static readonly RULE_css_expression = 260;
	public static readonly RULE_css_field = 261;
	public static readonly RULE_css_identifier = 262;
	public static readonly RULE_css_value = 263;
	public static readonly RULE_css_text = 264;
	public static readonly literalNames = [ null, null, null, null, null, null, 
                                         "'\\t'", "' '", null, "'Java:'", 
                                         "'C#:'", "'Python2:'", "'Python3:'", 
                                         "'JavaScript:'", "'Swift:'", "':'", 
                                         "';'", null, "'..'", null, null, 
                                         null, null, null, null, null, null, 
                                         "'!'", "'&'", "'&&'", "'|'", "'||'", 
                                         null, "'-'", "'*'", "'/'", "'\\'", 
                                         "'%'", "'#'", "'>'", "'>='", "'<'", 
                                         "'<='", "'<>'", "'<:>'", "'='", 
                                         "'!='", "'=='", "'~='", "'~'", 
                                         "'<-'", "'->'", "'=>'", "'Boolean'", 
                                         "'Css'", "'Character'", "'Text'", 
                                         "'Integer'", "'Decimal'", "'Date'", 
                                         "'Time'", "'DateTime'", "'Period'", 
                                         "'Version'", "'Method:'", "'Code'", 
                                         "'Document'", "'Blob'", "'Image'", 
                                         "'Uuid'", "'DbId'", "'Iterator'", 
                                         "'Cursor'", "'Html'", "'Type'", 
                                         "'abstract'", "'all'", "'always'", 
                                         "'and'", "'any'", "'as'", null, 
                                         "'attr'", "'attribute'", "'attributes'", 
                                         "'bindings'", "'break'", "'by'", 
                                         "'case'", "'catch'", "'category'", 
                                         "'class'", "'contains'", "'def'", 
                                         "'default'", "'define'", "'delete'", 
                                         null, "'do'", "'doing'", "'each'", 
                                         "'else'", "'enum'", "'enumerated'", 
                                         "'except'", "'execute'", "'expecting'", 
                                         "'extends'", "'fetch'", "'filtered'", 
                                         "'finally'", "'flush'", "'for'", 
                                         "'from'", "'getter'", "'has'", 
                                         "'if'", "'in'", "'include'", "'index'", 
                                         "'invoke:'", "'is'", "'matching'", 
                                         "'method'", "'methods'", "'modulo'", 
                                         "'mutable'", "'native'", "'None'", 
                                         "'not'", null, "'null'", "'on'", 
                                         "'one'", "'operator'", "'or'", 
                                         "'order'", "'otherwise'", "'pass'", 
                                         "'raise'", "'read'", "'receiving'", 
                                         "'resource'", "'return'", "'returning'", 
                                         "'rows'", "'self'", "'setter'", 
                                         "'singleton'", "'sorted'", "'storable'", 
                                         "'store'", "'super'", "'switch'", 
                                         "'test'", "'then'", "'this'", "'throw'", 
                                         "'to'", "'try'", "'verifying'", 
                                         "'widget'", "'with'", "'when'", 
                                         "'where'", "'while'", "'write'", 
                                         null, null, "'MIN_INTEGER'", "'MAX_INTEGER'" ];
	public static readonly symbolicNames = [ null, "INDENT", "DEDENT", "LF_TAB", 
                                          "LF_MORE", "LF", "TAB", "WS", 
                                          "COMMENT", "JAVA", "CSHARP", "PYTHON2", 
                                          "PYTHON3", "JAVASCRIPT", "SWIFT", 
                                          "COLON", "SEMI", "COMMA", "RANGE", 
                                          "DOT", "LPAR", "RPAR", "LBRAK", 
                                          "RBRAK", "LCURL", "RCURL", "QMARK", 
                                          "XMARK", "AMP", "AMP2", "PIPE", 
                                          "PIPE2", "PLUS", "MINUS", "STAR", 
                                          "SLASH", "BSLASH", "PERCENT", 
                                          "SHARP", "GT", "GTE", "LT", "LTE", 
                                          "LTGT", "LTCOLONGT", "EQ", "XEQ", 
                                          "EQ2", "TEQ", "TILDE", "LARROW", 
                                          "RARROW", "EGT", "BOOLEAN", "CSS", 
                                          "CHARACTER", "TEXT", "INTEGER", 
                                          "DECIMAL", "DATE", "TIME", "DATETIME", 
                                          "PERIOD", "VERSION", "METHOD_COLON", 
                                          "CODE", "DOCUMENT", "BLOB", "IMAGE", 
                                          "UUID", "DBID", "ITERATOR", "CURSOR", 
                                          "HTML", "TYPE", "ABSTRACT", "ALL", 
                                          "ALWAYS", "AND", "ANY", "AS", 
                                          "ASC", "ATTR", "ATTRIBUTE", "ATTRIBUTES", 
                                          "BINDINGS", "BREAK", "BY", "CASE", 
                                          "CATCH", "CATEGORY", "CLASS", 
                                          "CONTAINS", "DEF", "DEFAULT", 
                                          "DEFINE", "DELETE", "DESC", "DO", 
                                          "DOING", "EACH", "ELSE", "ENUM", 
                                          "ENUMERATED", "EXCEPT", "EXECUTE", 
                                          "EXPECTING", "EXTENDS", "FETCH", 
                                          "FILTERED", "FINALLY", "FLUSH", 
                                          "FOR", "FROM", "GETTER", "HAS", 
                                          "IF", "IN", "INCLUDE", "INDEX", 
                                          "INVOKE_COLON", "IS", "MATCHING", 
                                          "METHOD", "METHODS", "MODULO", 
                                          "MUTABLE", "NATIVE", "NONE", "NOT", 
                                          "NOTHING", "NULL", "ON", "ONE", 
                                          "OPERATOR", "OR", "ORDER", "OTHERWISE", 
                                          "PASS", "RAISE", "READ", "RECEIVING", 
                                          "RESOURCE", "RETURN", "RETURNING", 
                                          "ROWS", "SELF", "SETTER", "SINGLETON", 
                                          "SORTED", "STORABLE", "STORE", 
                                          "SUPER", "SWITCH", "TEST", "THEN", 
                                          "THIS", "THROW", "TO", "TRY", 
                                          "VERIFYING", "WIDGET", "WITH", 
                                          "WHEN", "WHERE", "WHILE", "WRITE", 
                                          "BOOLEAN_LITERAL", "CHAR_LITERAL", 
                                          "MIN_INTEGER", "MAX_INTEGER", 
                                          "SYMBOL_IDENTIFIER", "TYPE_IDENTIFIER", 
                                          "VARIABLE_IDENTIFIER", "NATIVE_IDENTIFIER", 
                                          "DOLLAR_IDENTIFIER", "ARONDBASE_IDENTIFIER", 
                                          "TEXT_LITERAL", "UUID_LITERAL", 
                                          "VERSION_LITERAL", "INTEGER_LITERAL", 
                                          "HEXA_LITERAL", "DECIMAL_LITERAL", 
                                          "DATETIME_LITERAL", "TIME_LITERAL", 
                                          "DATE_LITERAL", "PERIOD_LITERAL", 
                                          "JSX_TEXT" ];
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"enum_category_declaration", "enum_native_declaration", "native_symbol", 
		"category_symbol", "attribute_declaration", "concrete_widget_declaration", 
		"native_widget_declaration", "concrete_category_declaration", "singleton_category_declaration", 
		"derived_list", "operator_method_declaration", "setter_method_declaration", 
		"native_setter_declaration", "getter_method_declaration", "native_getter_declaration", 
		"native_category_declaration", "native_resource_declaration", "native_category_bindings", 
		"native_category_binding_list", "attribute_list", "abstract_global_method_declaration", 
		"abstract_member_method_declaration", "concrete_method_declaration", "native_method_declaration", 
		"test_method_declaration", "assertion", "full_argument_list", "typed_argument", 
		"statement", "flush_statement", "store_statement", "method_call_statement", 
		"with_resource_statement", "with_singleton_statement", "switch_statement", 
		"switch_case_statement", "for_each_statement", "do_while_statement", "while_statement", 
		"if_statement", "else_if_statement_list", "raise_statement", "try_statement", 
		"catch_statement", "break_statement", "return_statement", "expression", 
		"filter_expression", "unresolved_expression", "unresolved_selector", "invocation_expression", 
		"invocation_trailer", "selectable_expression", "instance_expression", 
		"instance_selector", "mutable_instance_expression", "document_expression", 
		"blob_expression", "constructor_expression", "write_statement", "ambiguous_expression", 
		"filtered_list_suffix", "fetch_expression", "fetch_statement", "include_list", 
		"then", "read_statement", "sorted_expression", "argument_assignment_list", 
		"with_argument_assignment_list", "argument_assignment", "assign_instance_statement", 
		"child_instance", "assign_tuple_statement", "lfs", "lfp", "ws_plus", "indent", 
		"dedent", "type_literal", "null_literal", "repl", "declaration_list", 
		"declarations", "declaration", "annotation_constructor", "annotation_identifier", 
		"annotation_argument", "annotation_argument_name", "annotation_argument_value", 
		"resource_declaration", "enum_declaration", "native_symbol_list", "category_symbol_list", 
		"symbol_list", "attribute_constraint", "list_literal", "set_literal", 
		"expression_list", "range_literal", "typedef", "primary_type", "native_type", 
		"category_type", "mutable_category_type", "code_type", "category_declaration", 
		"widget_declaration", "type_identifier_list", "method_identifier", "identifier_or_keyword", 
		"nospace_hyphen_identifier_or_keyword", "nospace_identifier_or_keyword", 
		"identifier", "member_identifier", "variable_identifier", "attribute_identifier", 
		"type_identifier", "symbol_identifier", "argument_list", "argument", "operator_argument", 
		"named_argument", "code_argument", "category_or_any_type", "any_type", 
		"member_method_declaration_list", "member_method_declaration", "native_member_method_declaration_list", 
		"native_member_method_declaration", "native_category_binding", "python_category_binding", 
		"python_module", "javascript_category_binding", "javascript_module", "variable_identifier_list", 
		"attribute_identifier_list", "method_declaration", "comment_statement", 
		"native_statement_list", "native_statement", "python_native_statement", 
		"javascript_native_statement", "statement_list", "assertion_list", "switch_case_statement_list", 
		"catch_statement_list", "literal_collection", "atomic_literal", "literal_list_literal", 
		"this_expression", "super_expression", "parenthesis_expression", "literal_expression", 
		"collection_literal", "tuple_literal", "dict_literal", "document_literal", 
		"expression_tuple", "doc_entry_list", "doc_entry", "doc_key", "dict_entry_list", 
		"dict_entry", "dict_key", "slice_arguments", "assign_variable_statement", 
		"assignable_instance", "is_expression", "metadata", "arrow_expression", 
		"arrow_prefix", "arrow_args", "sorted_key", "read_blob_expression", "read_all_expression", 
		"read_one_expression", "order_by_list", "order_by", "operator", "keyword", 
		"new_token", "key_token", "module_token", "value_token", "symbols_token", 
		"assign", "multiply", "divide", "idivide", "modulo", "javascript_statement", 
		"javascript_expression", "javascript_primary_expression", "javascript_this_expression", 
		"javascript_new_expression", "javascript_selector_expression", "javascript_method_expression", 
		"javascript_arguments", "javascript_item_expression", "javascript_parenthesis_expression", 
		"javascript_identifier_expression", "javascript_literal_expression", "javascript_identifier", 
		"python_statement", "python_expression", "python_primary_expression", 
		"python_self_expression", "python_selector_expression", "python_method_expression", 
		"python_argument_list", "python_ordinal_argument_list", "python_named_argument_list", 
		"python_parenthesis_expression", "python_identifier_expression", "python_literal_expression", 
		"python_identifier", "java_statement", "java_expression", "java_primary_expression", 
		"java_this_expression", "java_new_expression", "java_selector_expression", 
		"java_method_expression", "java_arguments", "java_item_expression", "java_parenthesis_expression", 
		"java_identifier_expression", "java_class_identifier_expression", "java_literal_expression", 
		"java_identifier", "csharp_statement", "csharp_expression", "csharp_primary_expression", 
		"csharp_this_expression", "csharp_new_expression", "csharp_selector_expression", 
		"csharp_method_expression", "csharp_arguments", "csharp_item_expression", 
		"csharp_parenthesis_expression", "csharp_identifier_expression", "csharp_literal_expression", 
		"csharp_identifier", "jsx_expression", "jsx_element", "jsx_fragment", 
		"jsx_fragment_start", "jsx_fragment_end", "jsx_self_closing", "jsx_opening", 
		"jsx_closing", "jsx_element_name", "jsx_identifier", "jsx_attribute", 
		"jsx_attribute_value", "jsx_children", "jsx_child", "jsx_text", "jsx_char", 
		"css_expression", "css_field", "css_identifier", "css_value", "css_text",
	];
	public get grammarFileName(): string { return "EParser.g4"; }
	public get literalNames(): (string | null)[] { return EParser.literalNames; }
	public get symbolicNames(): (string | null)[] { return EParser.symbolicNames; }
	public get ruleNames(): string[] { return EParser.ruleNames; }
	public get serializedATN(): number[] { return EParser._serializedATN; }

	protected createFailedPredicateException(predicate?: string, message?: string): antlr4.error.FailedPredicateException {
		return new antlr4.error.FailedPredicateException(this, predicate, message);
	}

	constructor(input: antlr4.TokenStream) {
		super(input);
		this._interp = new antlr4.atn.ParserATNSimulator(this, EParser._ATN, EParser.DecisionsToDFA, new antlr4.atn.PredictionContextCache());
	}
	// @RuleVersion(0)
	public enum_category_declaration(): Enum_category_declarationContext {
		let localctx: Enum_category_declarationContext = new Enum_category_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 0, EParser.RULE_enum_category_declaration);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 530;
			this.match(EParser.DEFINE);
			this.state = 531;
			localctx._name = this.type_identifier();
			this.state = 532;
			this.match(EParser.AS);
			this.state = 533;
			this.match(EParser.ENUMERATED);
			this.state = 536;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 90:
				{
				this.state = 534;
				this.match(EParser.CATEGORY);
				}
				break;
			case 172:
				{
				this.state = 535;
				localctx._derived = this.type_identifier();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 543;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1, this._ctx) ) {
			case 1:
				{
				{
				this.state = 538;
				localctx._attrs = this.attribute_list();
				this.state = 539;
				this.match(EParser.COMMA);
				this.state = 540;
				this.match(EParser.AND);
				}
				}
				break;
			case 2:
				{
				this.state = 542;
				this.match(EParser.WITH);
				}
				break;
			}
			this.state = 545;
			this.symbols_token();
			this.state = 546;
			this.match(EParser.COLON);
			this.state = 547;
			this.indent();
			this.state = 548;
			localctx._symbols = this.category_symbol_list();
			this.state = 549;
			this.dedent();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public enum_native_declaration(): Enum_native_declarationContext {
		let localctx: Enum_native_declarationContext = new Enum_native_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 2, EParser.RULE_enum_native_declaration);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 551;
			this.match(EParser.DEFINE);
			this.state = 552;
			localctx._name = this.type_identifier();
			this.state = 553;
			this.match(EParser.AS);
			this.state = 554;
			this.match(EParser.ENUMERATED);
			this.state = 555;
			localctx._typ = this.native_type();
			this.state = 556;
			this.match(EParser.WITH);
			this.state = 557;
			this.symbols_token();
			this.state = 558;
			this.match(EParser.COLON);
			this.state = 559;
			this.indent();
			this.state = 560;
			localctx._symbols = this.native_symbol_list();
			this.state = 561;
			this.dedent();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public native_symbol(): Native_symbolContext {
		let localctx: Native_symbolContext = new Native_symbolContext(this, this._ctx, this.state);
		this.enterRule(localctx, 4, EParser.RULE_native_symbol);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 563;
			localctx._name = this.symbol_identifier();
			this.state = 564;
			this.match(EParser.WITH);
			this.state = 565;
			localctx._exp = this.expression(0);
			this.state = 566;
			this.match(EParser.AS);
			this.state = 567;
			this.value_token();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public category_symbol(): Category_symbolContext {
		let localctx: Category_symbolContext = new Category_symbolContext(this, this._ctx, this.state);
		this.enterRule(localctx, 6, EParser.RULE_category_symbol);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 569;
			localctx._name = this.symbol_identifier();
			this.state = 570;
			localctx._args = this.with_argument_assignment_list(0);
			this.state = 573;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==78) {
				{
				this.state = 571;
				this.match(EParser.AND);
				this.state = 572;
				localctx._arg = this.argument_assignment();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public attribute_declaration(): Attribute_declarationContext {
		let localctx: Attribute_declarationContext = new Attribute_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 8, EParser.RULE_attribute_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 575;
			this.match(EParser.DEFINE);
			this.state = 576;
			localctx._name = this.attribute_identifier();
			this.state = 577;
			this.match(EParser.AS);
			this.state = 579;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==150) {
				{
				this.state = 578;
				this.match(EParser.STORABLE);
				}
			}

			this.state = 581;
			localctx._typ = this.typedef(0);
			this.state = 582;
			this.match(EParser.ATTRIBUTE);
			this.state = 584;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==117 || _la==122) {
				{
				this.state = 583;
				localctx._match = this.attribute_constraint();
				}
			}

			this.state = 595;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==162) {
				{
				this.state = 586;
				this.match(EParser.WITH);
				this.state = 592;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la==90 || _la==142 || _la==173) {
					{
					this.state = 587;
					localctx._indices = this.variable_identifier_list();
					this.state = 590;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la==78) {
						{
						this.state = 588;
						this.match(EParser.AND);
						this.state = 589;
						localctx._index = this.variable_identifier();
						}
					}

					}
				}

				this.state = 594;
				this.match(EParser.INDEX);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public concrete_widget_declaration(): Concrete_widget_declarationContext {
		let localctx: Concrete_widget_declarationContext = new Concrete_widget_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 10, EParser.RULE_concrete_widget_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 597;
			this.match(EParser.DEFINE);
			this.state = 598;
			localctx._name = this.type_identifier();
			this.state = 599;
			this.match(EParser.AS);
			this.state = 602;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 161:
				{
				this.state = 600;
				this.match(EParser.WIDGET);
				}
				break;
			case 172:
				{
				this.state = 601;
				localctx._derived = this.type_identifier();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 611;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==162) {
				{
				this.state = 604;
				this.match(EParser.WITH);
				this.state = 605;
				this.match(EParser.METHODS);
				this.state = 606;
				this.match(EParser.COLON);
				this.state = 607;
				this.indent();
				this.state = 608;
				localctx._methods = this.member_method_declaration_list();
				this.state = 609;
				this.dedent();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public native_widget_declaration(): Native_widget_declarationContext {
		let localctx: Native_widget_declarationContext = new Native_widget_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 12, EParser.RULE_native_widget_declaration);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 613;
			this.match(EParser.DEFINE);
			this.state = 614;
			localctx._name = this.type_identifier();
			this.state = 615;
			this.match(EParser.AS);
			this.state = 616;
			this.match(EParser.NATIVE);
			this.state = 617;
			this.match(EParser.WIDGET);
			this.state = 618;
			this.match(EParser.WITH);
			this.state = 619;
			this.match(EParser.BINDINGS);
			this.state = 620;
			this.match(EParser.COLON);
			this.state = 621;
			this.indent();
			this.state = 622;
			localctx._bindings = this.native_category_bindings();
			this.state = 623;
			this.dedent();
			this.state = 624;
			this.lfp();
			this.state = 625;
			this.match(EParser.AND);
			this.state = 626;
			this.match(EParser.METHODS);
			this.state = 627;
			this.match(EParser.COLON);
			this.state = 628;
			this.indent();
			this.state = 629;
			localctx._methods = this.native_member_method_declaration_list();
			this.state = 630;
			this.dedent();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public concrete_category_declaration(): Concrete_category_declarationContext {
		let localctx: Concrete_category_declarationContext = new Concrete_category_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 14, EParser.RULE_concrete_category_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 632;
			this.match(EParser.DEFINE);
			this.state = 633;
			localctx._name = this.type_identifier();
			this.state = 634;
			this.match(EParser.AS);
			this.state = 636;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==150) {
				{
				this.state = 635;
				this.match(EParser.STORABLE);
				}
			}

			this.state = 640;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 90:
				{
				this.state = 638;
				this.match(EParser.CATEGORY);
				}
				break;
			case 172:
				{
				this.state = 639;
				localctx._derived = this.derived_list();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 660;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 13, this._ctx) ) {
			case 1:
				{
				{
				this.state = 642;
				localctx._attrs = this.attribute_list();
				this.state = 651;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la==17) {
					{
					this.state = 643;
					this.match(EParser.COMMA);
					this.state = 644;
					this.match(EParser.AND);
					this.state = 645;
					this.match(EParser.METHODS);
					this.state = 646;
					this.match(EParser.COLON);
					this.state = 647;
					this.indent();
					this.state = 648;
					localctx._methods = this.member_method_declaration_list();
					this.state = 649;
					this.dedent();
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				this.state = 653;
				this.match(EParser.WITH);
				this.state = 654;
				this.match(EParser.METHODS);
				this.state = 655;
				this.match(EParser.COLON);
				this.state = 656;
				this.indent();
				this.state = 657;
				localctx._methods = this.member_method_declaration_list();
				this.state = 658;
				this.dedent();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public singleton_category_declaration(): Singleton_category_declarationContext {
		let localctx: Singleton_category_declarationContext = new Singleton_category_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 16, EParser.RULE_singleton_category_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 662;
			this.match(EParser.DEFINE);
			this.state = 663;
			localctx._name = this.type_identifier();
			this.state = 664;
			this.match(EParser.AS);
			this.state = 665;
			this.match(EParser.SINGLETON);
			this.state = 684;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 15, this._ctx) ) {
			case 1:
				{
				{
				this.state = 666;
				localctx._attrs = this.attribute_list();
				this.state = 675;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la==17) {
					{
					this.state = 667;
					this.match(EParser.COMMA);
					this.state = 668;
					this.match(EParser.AND);
					this.state = 669;
					this.match(EParser.METHODS);
					this.state = 670;
					this.match(EParser.COLON);
					this.state = 671;
					this.indent();
					this.state = 672;
					localctx._methods = this.member_method_declaration_list();
					this.state = 673;
					this.dedent();
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				this.state = 677;
				this.match(EParser.WITH);
				this.state = 678;
				this.match(EParser.METHODS);
				this.state = 679;
				this.match(EParser.COLON);
				this.state = 680;
				this.indent();
				this.state = 681;
				localctx._methods = this.member_method_declaration_list();
				this.state = 682;
				this.dedent();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public derived_list(): Derived_listContext {
		let localctx: Derived_listContext = new Derived_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 18, EParser.RULE_derived_list);
		try {
			this.state = 691;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 16, this._ctx) ) {
			case 1:
				localctx = new DerivedListContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 686;
				(localctx as DerivedListContext)._items = this.type_identifier_list();
				}
				break;
			case 2:
				localctx = new DerivedListItemContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 687;
				(localctx as DerivedListItemContext)._items = this.type_identifier_list();
				this.state = 688;
				this.match(EParser.AND);
				this.state = 689;
				(localctx as DerivedListItemContext)._item = this.type_identifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public operator_method_declaration(): Operator_method_declarationContext {
		let localctx: Operator_method_declarationContext = new Operator_method_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 20, EParser.RULE_operator_method_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 693;
			this.match(EParser.DEFINE);
			this.state = 694;
			localctx._op = this.operator();
			this.state = 695;
			this.match(EParser.AS);
			this.state = 696;
			this.match(EParser.OPERATOR);
			this.state = 697;
			this.match(EParser.RECEIVING);
			this.state = 698;
			localctx._arg = this.operator_argument();
			this.state = 701;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==144) {
				{
				this.state = 699;
				this.match(EParser.RETURNING);
				this.state = 700;
				localctx._typ = this.typedef(0);
				}
			}

			this.state = 703;
			this.match(EParser.DOING);
			this.state = 704;
			this.match(EParser.COLON);
			this.state = 705;
			this.indent();
			this.state = 706;
			localctx._stmts = this.statement_list();
			this.state = 707;
			this.dedent();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setter_method_declaration(): Setter_method_declarationContext {
		let localctx: Setter_method_declarationContext = new Setter_method_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 22, EParser.RULE_setter_method_declaration);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 709;
			this.match(EParser.DEFINE);
			this.state = 710;
			localctx._name = this.variable_identifier();
			this.state = 711;
			this.match(EParser.AS);
			this.state = 712;
			this.match(EParser.SETTER);
			this.state = 713;
			this.match(EParser.DOING);
			this.state = 714;
			this.match(EParser.COLON);
			this.state = 715;
			this.indent();
			this.state = 716;
			localctx._stmts = this.statement_list();
			this.state = 717;
			this.dedent();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public native_setter_declaration(): Native_setter_declarationContext {
		let localctx: Native_setter_declarationContext = new Native_setter_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 24, EParser.RULE_native_setter_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 719;
			this.match(EParser.DEFINE);
			this.state = 720;
			localctx._name = this.variable_identifier();
			this.state = 721;
			this.match(EParser.AS);
			this.state = 723;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==127) {
				{
				this.state = 722;
				this.match(EParser.NATIVE);
				}
			}

			this.state = 725;
			this.match(EParser.SETTER);
			this.state = 726;
			this.match(EParser.DOING);
			this.state = 727;
			this.match(EParser.COLON);
			this.state = 728;
			this.indent();
			this.state = 729;
			localctx._stmts = this.native_statement_list();
			this.state = 730;
			this.dedent();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public getter_method_declaration(): Getter_method_declarationContext {
		let localctx: Getter_method_declarationContext = new Getter_method_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 26, EParser.RULE_getter_method_declaration);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 732;
			this.match(EParser.DEFINE);
			this.state = 733;
			localctx._name = this.variable_identifier();
			this.state = 734;
			this.match(EParser.AS);
			this.state = 735;
			this.match(EParser.GETTER);
			this.state = 736;
			this.match(EParser.DOING);
			this.state = 737;
			this.match(EParser.COLON);
			this.state = 738;
			this.indent();
			this.state = 739;
			localctx._stmts = this.statement_list();
			this.state = 740;
			this.dedent();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public native_getter_declaration(): Native_getter_declarationContext {
		let localctx: Native_getter_declarationContext = new Native_getter_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 28, EParser.RULE_native_getter_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 742;
			this.match(EParser.DEFINE);
			this.state = 743;
			localctx._name = this.variable_identifier();
			this.state = 744;
			this.match(EParser.AS);
			this.state = 746;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==127) {
				{
				this.state = 745;
				this.match(EParser.NATIVE);
				}
			}

			this.state = 748;
			this.match(EParser.GETTER);
			this.state = 749;
			this.match(EParser.DOING);
			this.state = 750;
			this.match(EParser.COLON);
			this.state = 751;
			this.indent();
			this.state = 752;
			localctx._stmts = this.native_statement_list();
			this.state = 753;
			this.dedent();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public native_category_declaration(): Native_category_declarationContext {
		let localctx: Native_category_declarationContext = new Native_category_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 30, EParser.RULE_native_category_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 755;
			this.match(EParser.DEFINE);
			this.state = 756;
			localctx._name = this.type_identifier();
			this.state = 757;
			this.match(EParser.AS);
			this.state = 759;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==150) {
				{
				this.state = 758;
				this.match(EParser.STORABLE);
				}
			}

			this.state = 761;
			this.match(EParser.NATIVE);
			this.state = 762;
			this.match(EParser.CATEGORY);
			this.state = 770;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 21, this._ctx) ) {
			case 1:
				{
				{
				this.state = 763;
				localctx._attrs = this.attribute_list();
				this.state = 764;
				this.match(EParser.COMMA);
				this.state = 765;
				this.match(EParser.AND);
				this.state = 766;
				this.match(EParser.BINDINGS);
				}
				}
				break;
			case 2:
				{
				this.state = 768;
				this.match(EParser.WITH);
				this.state = 769;
				this.match(EParser.BINDINGS);
				}
				break;
			}
			this.state = 772;
			this.match(EParser.COLON);
			this.state = 773;
			this.indent();
			this.state = 774;
			localctx._bindings = this.native_category_bindings();
			this.state = 775;
			this.dedent();
			this.state = 784;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 22, this._ctx) ) {
			case 1:
				{
				this.state = 776;
				this.lfp();
				this.state = 777;
				this.match(EParser.AND);
				this.state = 778;
				this.match(EParser.METHODS);
				this.state = 779;
				this.match(EParser.COLON);
				this.state = 780;
				this.indent();
				this.state = 781;
				localctx._methods = this.native_member_method_declaration_list();
				this.state = 782;
				this.dedent();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public native_resource_declaration(): Native_resource_declarationContext {
		let localctx: Native_resource_declarationContext = new Native_resource_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 32, EParser.RULE_native_resource_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 786;
			this.match(EParser.DEFINE);
			this.state = 787;
			localctx._name = this.type_identifier();
			this.state = 788;
			this.match(EParser.AS);
			this.state = 790;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==150) {
				{
				this.state = 789;
				this.match(EParser.STORABLE);
				}
			}

			this.state = 792;
			this.match(EParser.NATIVE);
			this.state = 793;
			this.match(EParser.RESOURCE);
			this.state = 801;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 24, this._ctx) ) {
			case 1:
				{
				{
				this.state = 794;
				localctx._attrs = this.attribute_list();
				this.state = 795;
				this.match(EParser.COMMA);
				this.state = 796;
				this.match(EParser.AND);
				this.state = 797;
				this.match(EParser.BINDINGS);
				}
				}
				break;
			case 2:
				{
				this.state = 799;
				this.match(EParser.WITH);
				this.state = 800;
				this.match(EParser.BINDINGS);
				}
				break;
			}
			this.state = 803;
			this.match(EParser.COLON);
			this.state = 804;
			this.indent();
			this.state = 805;
			localctx._bindings = this.native_category_bindings();
			this.state = 806;
			this.dedent();
			this.state = 815;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 25, this._ctx) ) {
			case 1:
				{
				this.state = 807;
				this.lfp();
				this.state = 808;
				this.match(EParser.AND);
				this.state = 809;
				this.match(EParser.METHODS);
				this.state = 810;
				this.match(EParser.COLON);
				this.state = 811;
				this.indent();
				this.state = 812;
				localctx._methods = this.native_member_method_declaration_list();
				this.state = 813;
				this.dedent();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public native_category_bindings(): Native_category_bindingsContext {
		let localctx: Native_category_bindingsContext = new Native_category_bindingsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 34, EParser.RULE_native_category_bindings);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 817;
			this.match(EParser.DEFINE);
			this.state = 818;
			this.match(EParser.CATEGORY);
			this.state = 819;
			this.match(EParser.BINDINGS);
			this.state = 820;
			this.match(EParser.AS);
			this.state = 821;
			this.match(EParser.COLON);
			this.state = 822;
			this.indent();
			this.state = 823;
			localctx._items = this.native_category_binding_list(0);
			this.state = 824;
			this.dedent();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public native_category_binding_list(): Native_category_binding_listContext;
	public native_category_binding_list(_p: number): Native_category_binding_listContext;
	// @RuleVersion(0)
	public native_category_binding_list(_p?: number): Native_category_binding_listContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Native_category_binding_listContext = new Native_category_binding_listContext(this, this._ctx, _parentState);
		let _prevctx: Native_category_binding_listContext = localctx;
		let _startState: number = 36;
		this.enterRecursionRule(localctx, 36, EParser.RULE_native_category_binding_list, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new NativeCategoryBindingListContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 827;
			(localctx as NativeCategoryBindingListContext)._item = this.native_category_binding();
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 835;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 26, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new NativeCategoryBindingListItemContext(this, new Native_category_binding_listContext(this, _parentctx, _parentState));
					(localctx as NativeCategoryBindingListItemContext)._items = _prevctx;
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_native_category_binding_list);
					this.state = 829;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 830;
					this.lfp();
					this.state = 831;
					(localctx as NativeCategoryBindingListItemContext)._item = this.native_category_binding();
					}
					}
				}
				this.state = 837;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 26, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public attribute_list(): Attribute_listContext {
		let localctx: Attribute_listContext = new Attribute_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 38, EParser.RULE_attribute_list);
		try {
			this.state = 848;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 28, this._ctx) ) {
			case 1:
				localctx = new AttributeListContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 838;
				this.match(EParser.WITH);
				this.state = 839;
				this.match(EParser.ATTRIBUTE);
				this.state = 840;
				(localctx as AttributeListContext)._item = this.attribute_identifier();
				}
				break;
			case 2:
				localctx = new AttributeListItemContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 841;
				this.match(EParser.WITH);
				this.state = 842;
				this.match(EParser.ATTRIBUTES);
				this.state = 843;
				(localctx as AttributeListItemContext)._items = this.attribute_identifier_list();
				this.state = 846;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 27, this._ctx) ) {
				case 1:
					{
					this.state = 844;
					this.match(EParser.AND);
					this.state = 845;
					(localctx as AttributeListItemContext)._item = this.attribute_identifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public abstract_global_method_declaration(): Abstract_global_method_declarationContext {
		let localctx: Abstract_global_method_declarationContext = new Abstract_global_method_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 40, EParser.RULE_abstract_global_method_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 850;
			this.match(EParser.DEFINE);
			this.state = 851;
			localctx._name = this.type_identifier();
			this.state = 852;
			this.match(EParser.AS);
			this.state = 853;
			this.match(EParser.ABSTRACT);
			this.state = 854;
			this.match(EParser.METHOD);
			this.state = 857;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==141) {
				{
				this.state = 855;
				this.match(EParser.RECEIVING);
				this.state = 856;
				localctx._args = this.full_argument_list();
				}
			}

			this.state = 864;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==144) {
				{
				this.state = 859;
				this.match(EParser.RETURNING);
				this.state = 861;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la==126) {
					{
					this.state = 860;
					this.match(EParser.MUTABLE);
					}
				}

				this.state = 863;
				localctx._typ = this.typedef(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public abstract_member_method_declaration(): Abstract_member_method_declarationContext {
		let localctx: Abstract_member_method_declarationContext = new Abstract_member_method_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 42, EParser.RULE_abstract_member_method_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 866;
			this.match(EParser.DEFINE);
			this.state = 867;
			localctx._name = this.method_identifier();
			this.state = 868;
			this.match(EParser.AS);
			this.state = 869;
			this.match(EParser.ABSTRACT);
			this.state = 870;
			this.match(EParser.METHOD);
			this.state = 873;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==141) {
				{
				this.state = 871;
				this.match(EParser.RECEIVING);
				this.state = 872;
				localctx._args = this.full_argument_list();
				}
			}

			this.state = 880;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==144) {
				{
				this.state = 875;
				this.match(EParser.RETURNING);
				this.state = 877;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la==126) {
					{
					this.state = 876;
					this.match(EParser.MUTABLE);
					}
				}

				this.state = 879;
				localctx._typ = this.typedef(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public concrete_method_declaration(): Concrete_method_declarationContext {
		let localctx: Concrete_method_declarationContext = new Concrete_method_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 44, EParser.RULE_concrete_method_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 882;
			this.match(EParser.DEFINE);
			this.state = 883;
			localctx._name = this.method_identifier();
			this.state = 884;
			this.match(EParser.AS);
			this.state = 885;
			this.match(EParser.METHOD);
			this.state = 888;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==141) {
				{
				this.state = 886;
				this.match(EParser.RECEIVING);
				this.state = 887;
				localctx._args = this.full_argument_list();
				}
			}

			this.state = 895;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==144) {
				{
				this.state = 890;
				this.match(EParser.RETURNING);
				this.state = 892;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la==126) {
					{
					this.state = 891;
					this.match(EParser.MUTABLE);
					}
				}

				this.state = 894;
				localctx._typ = this.typedef(0);
				}
			}

			this.state = 897;
			this.match(EParser.DOING);
			this.state = 898;
			this.match(EParser.COLON);
			this.state = 899;
			this.indent();
			this.state = 902;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 8:
			case 20:
			case 22:
			case 24:
			case 33:
			case 41:
			case 44:
			case 74:
			case 86:
			case 90:
			case 95:
			case 96:
			case 98:
			case 108:
			case 111:
			case 112:
			case 116:
			case 120:
			case 126:
			case 130:
			case 139:
			case 140:
			case 142:
			case 143:
			case 146:
			case 151:
			case 152:
			case 153:
			case 156:
			case 162:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 171:
			case 172:
			case 173:
			case 177:
			case 178:
			case 179:
			case 180:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 186:
				{
				this.state = 900;
				localctx._stmts = this.statement_list();
				}
				break;
			case 138:
				{
				this.state = 901;
				this.match(EParser.PASS);
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 904;
			this.dedent();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public native_method_declaration(): Native_method_declarationContext {
		let localctx: Native_method_declarationContext = new Native_method_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 46, EParser.RULE_native_method_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 906;
			this.match(EParser.DEFINE);
			this.state = 907;
			localctx._name = this.method_identifier();
			this.state = 908;
			this.match(EParser.AS);
			this.state = 910;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==127) {
				{
				this.state = 909;
				this.match(EParser.NATIVE);
				}
			}

			this.state = 912;
			this.match(EParser.METHOD);
			this.state = 915;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==141) {
				{
				this.state = 913;
				this.match(EParser.RECEIVING);
				this.state = 914;
				localctx._args = this.full_argument_list();
				}
			}

			this.state = 919;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==144) {
				{
				this.state = 917;
				this.match(EParser.RETURNING);
				this.state = 918;
				localctx._typ = this.category_or_any_type();
				}
			}

			this.state = 921;
			this.match(EParser.DOING);
			this.state = 922;
			this.match(EParser.COLON);
			this.state = 923;
			this.indent();
			this.state = 924;
			localctx._stmts = this.native_statement_list();
			this.state = 925;
			this.dedent();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public test_method_declaration(): Test_method_declarationContext {
		let localctx: Test_method_declarationContext = new Test_method_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 48, EParser.RULE_test_method_declaration);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 927;
			this.match(EParser.DEFINE);
			this.state = 928;
			localctx._name = this.match(EParser.TEXT_LITERAL);
			this.state = 929;
			this.match(EParser.AS);
			this.state = 930;
			this.match(EParser.TEST);
			this.state = 931;
			this.match(EParser.METHOD);
			this.state = 932;
			this.match(EParser.DOING);
			this.state = 933;
			this.match(EParser.COLON);
			this.state = 934;
			this.indent();
			this.state = 935;
			localctx._stmts = this.statement_list();
			this.state = 936;
			this.dedent();
			this.state = 937;
			this.lfp();
			this.state = 938;
			this.match(EParser.AND);
			this.state = 939;
			this.match(EParser.VERIFYING);
			this.state = 946;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 15:
				{
				{
				this.state = 940;
				this.match(EParser.COLON);
				this.state = 941;
				this.indent();
				this.state = 942;
				localctx._exps = this.assertion_list();
				this.state = 943;
				this.dedent();
				}
				}
				break;
			case 171:
				{
				this.state = 945;
				localctx._error = this.symbol_identifier();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public assertion(): AssertionContext {
		let localctx: AssertionContext = new AssertionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 50, EParser.RULE_assertion);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 948;
			localctx._exp = this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public full_argument_list(): Full_argument_listContext {
		let localctx: Full_argument_listContext = new Full_argument_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 52, EParser.RULE_full_argument_list);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 950;
			localctx._items = this.argument_list();
			this.state = 953;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==78) {
				{
				this.state = 951;
				this.match(EParser.AND);
				this.state = 952;
				localctx._item = this.argument();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public typed_argument(): Typed_argumentContext {
		let localctx: Typed_argumentContext = new Typed_argumentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 54, EParser.RULE_typed_argument);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 955;
			localctx._typ = this.category_or_any_type();
			this.state = 956;
			localctx._name = this.variable_identifier();
			this.state = 958;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==162) {
				{
				this.state = 957;
				localctx._attrs = this.attribute_list();
				}
			}

			this.state = 962;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==45) {
				{
				this.state = 960;
				this.match(EParser.EQ);
				this.state = 961;
				localctx._value = this.literal_expression();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public statement(): StatementContext {
		let localctx: StatementContext = new StatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 56, EParser.RULE_statement);
		try {
			this.state = 985;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 46, this._ctx) ) {
			case 1:
				localctx = new AssignInstanceStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 964;
				(localctx as AssignInstanceStatementContext)._stmt = this.assign_instance_statement();
				}
				break;
			case 2:
				localctx = new MethodCallStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 965;
				(localctx as MethodCallStatementContext)._stmt = this.method_call_statement();
				}
				break;
			case 3:
				localctx = new AssignTupleStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 966;
				(localctx as AssignTupleStatementContext)._stmt = this.assign_tuple_statement();
				}
				break;
			case 4:
				localctx = new StoreStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 967;
				(localctx as StoreStatementContext)._stmt = this.store_statement();
				}
				break;
			case 5:
				localctx = new FetchStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 968;
				(localctx as FetchStatementContext)._stmt = this.fetch_statement();
				}
				break;
			case 6:
				localctx = new ReadStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 969;
				(localctx as ReadStatementContext)._stmt = this.read_statement();
				}
				break;
			case 7:
				localctx = new FlushStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 970;
				(localctx as FlushStatementContext)._stmt = this.flush_statement();
				}
				break;
			case 8:
				localctx = new BreakStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 971;
				(localctx as BreakStatementContext)._stmt = this.break_statement();
				}
				break;
			case 9:
				localctx = new ReturnStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 972;
				(localctx as ReturnStatementContext)._stmt = this.return_statement();
				}
				break;
			case 10:
				localctx = new IfStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 973;
				(localctx as IfStatementContext)._stmt = this.if_statement();
				}
				break;
			case 11:
				localctx = new SwitchStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 974;
				(localctx as SwitchStatementContext)._stmt = this.switch_statement();
				}
				break;
			case 12:
				localctx = new ForEachStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 975;
				(localctx as ForEachStatementContext)._stmt = this.for_each_statement();
				}
				break;
			case 13:
				localctx = new WhileStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 976;
				(localctx as WhileStatementContext)._stmt = this.while_statement();
				}
				break;
			case 14:
				localctx = new DoWhileStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 977;
				(localctx as DoWhileStatementContext)._stmt = this.do_while_statement();
				}
				break;
			case 15:
				localctx = new RaiseStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 978;
				(localctx as RaiseStatementContext)._stmt = this.raise_statement();
				}
				break;
			case 16:
				localctx = new TryStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 979;
				(localctx as TryStatementContext)._stmt = this.try_statement();
				}
				break;
			case 17:
				localctx = new WriteStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 980;
				(localctx as WriteStatementContext)._stmt = this.write_statement();
				}
				break;
			case 18:
				localctx = new WithResourceStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 18);
				{
				this.state = 981;
				(localctx as WithResourceStatementContext)._stmt = this.with_resource_statement();
				}
				break;
			case 19:
				localctx = new WithSingletonStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 19);
				{
				this.state = 982;
				(localctx as WithSingletonStatementContext)._stmt = this.with_singleton_statement();
				}
				break;
			case 20:
				localctx = new ClosureStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 20);
				{
				this.state = 983;
				(localctx as ClosureStatementContext)._decl = this.concrete_method_declaration();
				}
				break;
			case 21:
				localctx = new CommentStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 21);
				{
				this.state = 984;
				(localctx as CommentStatementContext)._decl = this.comment_statement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public flush_statement(): Flush_statementContext {
		let localctx: Flush_statementContext = new Flush_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 58, EParser.RULE_flush_statement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 987;
			this.match(EParser.FLUSH);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public store_statement(): Store_statementContext {
		let localctx: Store_statementContext = new Store_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 60, EParser.RULE_store_statement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 998;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 96:
				{
				this.state = 989;
				this.match(EParser.DELETE);
				this.state = 990;
				localctx._to_del = this.expression_list();
				this.state = 994;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la==78) {
					{
					this.state = 991;
					this.match(EParser.AND);
					this.state = 992;
					this.match(EParser.STORE);
					this.state = 993;
					localctx._to_add = this.expression_list();
					}
				}

				}
				break;
			case 151:
				{
				this.state = 996;
				this.match(EParser.STORE);
				this.state = 997;
				localctx._to_add = this.expression_list();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 1005;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==162) {
				{
				this.state = 1000;
				this.match(EParser.WITH);
				this.state = 1001;
				localctx._with_meta = this.expression(0);
				this.state = 1002;
				this.match(EParser.AS);
				this.state = 1003;
				this.metadata();
				}
			}

			this.state = 1013;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==155) {
				{
				this.state = 1007;
				this.match(EParser.THEN);
				this.state = 1008;
				this.match(EParser.COLON);
				this.state = 1009;
				this.indent();
				this.state = 1010;
				localctx._stmts = this.statement_list();
				this.state = 1011;
				this.dedent();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public method_call_statement(): Method_call_statementContext {
		let localctx: Method_call_statementContext = new Method_call_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 62, EParser.RULE_method_call_statement);
		let _la: number;
		try {
			this.state = 1035;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 20:
			case 22:
			case 24:
			case 33:
			case 41:
			case 44:
			case 74:
			case 90:
			case 126:
			case 130:
			case 142:
			case 146:
			case 152:
			case 156:
			case 167:
			case 168:
			case 169:
			case 170:
			case 171:
			case 172:
			case 173:
			case 177:
			case 178:
			case 179:
			case 180:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 186:
				localctx = new UnresolvedWithArgsStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1017;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 51, this._ctx) ) {
				case 1:
					{
					this.state = 1015;
					(localctx as UnresolvedWithArgsStatementContext)._exp1 = this.instance_expression(0);
					}
					break;
				case 2:
					{
					this.state = 1016;
					(localctx as UnresolvedWithArgsStatementContext)._exp2 = this.unresolved_expression(0);
					}
					break;
				}
				this.state = 1020;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 52, this._ctx) ) {
				case 1:
					{
					this.state = 1019;
					(localctx as UnresolvedWithArgsStatementContext)._args = this.argument_assignment_list();
					}
					break;
				}
				this.state = 1032;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la==155) {
					{
					this.state = 1022;
					this.match(EParser.THEN);
					this.state = 1025;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la==162) {
						{
						this.state = 1023;
						this.match(EParser.WITH);
						this.state = 1024;
						(localctx as UnresolvedWithArgsStatementContext)._name = this.variable_identifier();
						}
					}

					this.state = 1027;
					this.match(EParser.COLON);
					this.state = 1028;
					this.indent();
					this.state = 1029;
					(localctx as UnresolvedWithArgsStatementContext)._stmts = this.statement_list();
					this.state = 1030;
					this.dedent();
					}
				}

				}
				break;
			case 120:
				localctx = new InvokeStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1034;
				(localctx as InvokeStatementContext)._exp = this.invocation_expression();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public with_resource_statement(): With_resource_statementContext {
		let localctx: With_resource_statementContext = new With_resource_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 64, EParser.RULE_with_resource_statement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1037;
			this.match(EParser.WITH);
			this.state = 1038;
			localctx._stmt = this.assign_variable_statement();
			this.state = 1039;
			this.match(EParser.COMMA);
			this.state = 1040;
			this.match(EParser.DO);
			this.state = 1041;
			this.match(EParser.COLON);
			this.state = 1042;
			this.indent();
			this.state = 1043;
			localctx._stmts = this.statement_list();
			this.state = 1044;
			this.dedent();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public with_singleton_statement(): With_singleton_statementContext {
		let localctx: With_singleton_statementContext = new With_singleton_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 66, EParser.RULE_with_singleton_statement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1046;
			this.match(EParser.WITH);
			this.state = 1047;
			localctx._typ = this.type_identifier();
			this.state = 1048;
			this.match(EParser.COMMA);
			this.state = 1049;
			this.match(EParser.DO);
			this.state = 1050;
			this.match(EParser.COLON);
			this.state = 1051;
			this.indent();
			this.state = 1052;
			localctx._stmts = this.statement_list();
			this.state = 1053;
			this.dedent();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public switch_statement(): Switch_statementContext {
		let localctx: Switch_statementContext = new Switch_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 68, EParser.RULE_switch_statement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1055;
			this.match(EParser.SWITCH);
			this.state = 1056;
			this.match(EParser.ON);
			this.state = 1057;
			localctx._exp = this.expression(0);
			this.state = 1058;
			this.match(EParser.COLON);
			this.state = 1059;
			this.indent();
			this.state = 1060;
			localctx._cases = this.switch_case_statement_list();
			this.state = 1068;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 56, this._ctx) ) {
			case 1:
				{
				this.state = 1061;
				this.lfp();
				this.state = 1062;
				this.match(EParser.OTHERWISE);
				this.state = 1063;
				this.match(EParser.COLON);
				this.state = 1064;
				this.indent();
				this.state = 1065;
				localctx._stmts = this.statement_list();
				this.state = 1066;
				this.dedent();
				}
				break;
			}
			this.state = 1070;
			this.dedent();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public switch_case_statement(): Switch_case_statementContext {
		let localctx: Switch_case_statementContext = new Switch_case_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 70, EParser.RULE_switch_case_statement);
		try {
			this.state = 1087;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 57, this._ctx) ) {
			case 1:
				localctx = new AtomicSwitchCaseContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1072;
				this.match(EParser.WHEN);
				this.state = 1073;
				(localctx as AtomicSwitchCaseContext)._exp = this.atomic_literal();
				this.state = 1074;
				this.match(EParser.COLON);
				this.state = 1075;
				this.indent();
				this.state = 1076;
				(localctx as AtomicSwitchCaseContext)._stmts = this.statement_list();
				this.state = 1077;
				this.dedent();
				}
				break;
			case 2:
				localctx = new CollectionSwitchCaseContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1079;
				this.match(EParser.WHEN);
				this.state = 1080;
				this.match(EParser.IN);
				this.state = 1081;
				(localctx as CollectionSwitchCaseContext)._exp = this.literal_collection();
				this.state = 1082;
				this.match(EParser.COLON);
				this.state = 1083;
				this.indent();
				this.state = 1084;
				(localctx as CollectionSwitchCaseContext)._stmts = this.statement_list();
				this.state = 1085;
				this.dedent();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public for_each_statement(): For_each_statementContext {
		let localctx: For_each_statementContext = new For_each_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 72, EParser.RULE_for_each_statement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1089;
			this.match(EParser.FOR);
			this.state = 1090;
			this.match(EParser.EACH);
			this.state = 1091;
			localctx._name1 = this.variable_identifier();
			this.state = 1094;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==17) {
				{
				this.state = 1092;
				this.match(EParser.COMMA);
				this.state = 1093;
				localctx._name2 = this.variable_identifier();
				}
			}

			this.state = 1096;
			this.match(EParser.IN);
			this.state = 1097;
			localctx._source = this.expression(0);
			this.state = 1098;
			this.match(EParser.COLON);
			this.state = 1099;
			this.indent();
			this.state = 1100;
			localctx._stmts = this.statement_list();
			this.state = 1101;
			this.dedent();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public do_while_statement(): Do_while_statementContext {
		let localctx: Do_while_statementContext = new Do_while_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 74, EParser.RULE_do_while_statement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1103;
			this.match(EParser.DO);
			this.state = 1104;
			this.match(EParser.COLON);
			this.state = 1105;
			this.indent();
			this.state = 1106;
			localctx._stmts = this.statement_list();
			this.state = 1107;
			this.dedent();
			this.state = 1108;
			this.lfp();
			this.state = 1109;
			this.match(EParser.WHILE);
			this.state = 1110;
			localctx._exp = this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public while_statement(): While_statementContext {
		let localctx: While_statementContext = new While_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 76, EParser.RULE_while_statement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1112;
			this.match(EParser.WHILE);
			this.state = 1113;
			localctx._exp = this.expression(0);
			this.state = 1114;
			this.match(EParser.COLON);
			this.state = 1115;
			this.indent();
			this.state = 1116;
			localctx._stmts = this.statement_list();
			this.state = 1117;
			this.dedent();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public if_statement(): If_statementContext {
		let localctx: If_statementContext = new If_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 78, EParser.RULE_if_statement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1119;
			this.match(EParser.IF);
			this.state = 1120;
			localctx._exp = this.expression(0);
			this.state = 1121;
			this.match(EParser.COLON);
			this.state = 1122;
			this.indent();
			this.state = 1123;
			localctx._stmts = this.statement_list();
			this.state = 1124;
			this.dedent();
			this.state = 1128;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 59, this._ctx) ) {
			case 1:
				{
				this.state = 1125;
				this.lfp();
				this.state = 1126;
				localctx._elseIfs = this.else_if_statement_list(0);
				}
				break;
			}
			this.state = 1137;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 60, this._ctx) ) {
			case 1:
				{
				this.state = 1130;
				this.lfp();
				this.state = 1131;
				this.match(EParser.ELSE);
				this.state = 1132;
				this.match(EParser.COLON);
				this.state = 1133;
				this.indent();
				this.state = 1134;
				localctx._elseStmts = this.statement_list();
				this.state = 1135;
				this.dedent();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public else_if_statement_list(): Else_if_statement_listContext;
	public else_if_statement_list(_p: number): Else_if_statement_listContext;
	// @RuleVersion(0)
	public else_if_statement_list(_p?: number): Else_if_statement_listContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Else_if_statement_listContext = new Else_if_statement_listContext(this, this._ctx, _parentState);
		let _prevctx: Else_if_statement_listContext = localctx;
		let _startState: number = 80;
		this.enterRecursionRule(localctx, 80, EParser.RULE_else_if_statement_list, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new ElseIfStatementListContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 1140;
			this.match(EParser.ELSE);
			this.state = 1141;
			this.match(EParser.IF);
			this.state = 1142;
			(localctx as ElseIfStatementListContext)._exp = this.expression(0);
			this.state = 1143;
			this.match(EParser.COLON);
			this.state = 1144;
			this.indent();
			this.state = 1145;
			(localctx as ElseIfStatementListContext)._stmts = this.statement_list();
			this.state = 1146;
			this.dedent();
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 1160;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 61, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new ElseIfStatementListItemContext(this, new Else_if_statement_listContext(this, _parentctx, _parentState));
					(localctx as ElseIfStatementListItemContext)._items = _prevctx;
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_else_if_statement_list);
					this.state = 1148;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 1149;
					this.lfp();
					this.state = 1150;
					this.match(EParser.ELSE);
					this.state = 1151;
					this.match(EParser.IF);
					this.state = 1152;
					(localctx as ElseIfStatementListItemContext)._exp = this.expression(0);
					this.state = 1153;
					this.match(EParser.COLON);
					this.state = 1154;
					this.indent();
					this.state = 1155;
					(localctx as ElseIfStatementListItemContext)._stmts = this.statement_list();
					this.state = 1156;
					this.dedent();
					}
					}
				}
				this.state = 1162;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 61, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public raise_statement(): Raise_statementContext {
		let localctx: Raise_statementContext = new Raise_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 82, EParser.RULE_raise_statement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1163;
			this.match(EParser.RAISE);
			this.state = 1164;
			localctx._exp = this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public try_statement(): Try_statementContext {
		let localctx: Try_statementContext = new Try_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 84, EParser.RULE_try_statement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1166;
			this.match(EParser.SWITCH);
			this.state = 1167;
			this.match(EParser.ON);
			this.state = 1168;
			localctx._name = this.variable_identifier();
			this.state = 1169;
			this.match(EParser.DOING);
			this.state = 1170;
			this.match(EParser.COLON);
			this.state = 1171;
			this.indent();
			this.state = 1172;
			localctx._stmts = this.statement_list();
			this.state = 1173;
			this.dedent();
			this.state = 1174;
			this.lfs();
			this.state = 1176;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 62, this._ctx) ) {
			case 1:
				{
				this.state = 1175;
				localctx._handlers = this.catch_statement_list();
				}
				break;
			}
			this.state = 1189;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==137 || _la==163) {
				{
				this.state = 1181;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 137:
					{
					this.state = 1178;
					this.match(EParser.OTHERWISE);
					}
					break;
				case 163:
					{
					{
					this.state = 1179;
					this.match(EParser.WHEN);
					this.state = 1180;
					this.match(EParser.ANY);
					}
					}
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
				}
				this.state = 1183;
				this.match(EParser.COLON);
				this.state = 1184;
				this.indent();
				this.state = 1185;
				localctx._anyStmts = this.statement_list();
				this.state = 1186;
				this.dedent();
				this.state = 1187;
				this.lfs();
				}
			}

			this.state = 1198;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==77) {
				{
				this.state = 1191;
				this.match(EParser.ALWAYS);
				this.state = 1192;
				this.match(EParser.COLON);
				this.state = 1193;
				this.indent();
				this.state = 1194;
				localctx._finalStmts = this.statement_list();
				this.state = 1195;
				this.dedent();
				this.state = 1196;
				this.lfs();
				}
			}

			this.state = 1200;
			this.lfs();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public catch_statement(): Catch_statementContext {
		let localctx: Catch_statementContext = new Catch_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 86, EParser.RULE_catch_statement);
		try {
			this.state = 1221;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 66, this._ctx) ) {
			case 1:
				localctx = new CatchAtomicStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1202;
				this.match(EParser.WHEN);
				this.state = 1203;
				(localctx as CatchAtomicStatementContext)._name = this.symbol_identifier();
				this.state = 1204;
				this.match(EParser.COLON);
				this.state = 1205;
				this.indent();
				this.state = 1206;
				(localctx as CatchAtomicStatementContext)._stmts = this.statement_list();
				this.state = 1207;
				this.dedent();
				this.state = 1208;
				this.lfs();
				}
				break;
			case 2:
				localctx = new CatchCollectionStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1210;
				this.match(EParser.WHEN);
				this.state = 1211;
				this.match(EParser.IN);
				this.state = 1212;
				this.match(EParser.LBRAK);
				this.state = 1213;
				(localctx as CatchCollectionStatementContext)._exp = this.symbol_list();
				this.state = 1214;
				this.match(EParser.RBRAK);
				this.state = 1215;
				this.match(EParser.COLON);
				this.state = 1216;
				this.indent();
				this.state = 1217;
				(localctx as CatchCollectionStatementContext)._stmts = this.statement_list();
				this.state = 1218;
				this.dedent();
				this.state = 1219;
				this.lfs();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public break_statement(): Break_statementContext {
		let localctx: Break_statementContext = new Break_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 88, EParser.RULE_break_statement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1223;
			this.match(EParser.BREAK);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public return_statement(): Return_statementContext {
		let localctx: Return_statementContext = new Return_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 90, EParser.RULE_return_statement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1225;
			this.match(EParser.RETURN);
			this.state = 1227;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 20)) & ~0x1F) == 0 && ((1 << (_la - 20)) & 27271189) != 0) || ((((_la - 64)) & ~0x1F) == 0 && ((1 << (_la - 64)) & 67109903) != 0) || ((((_la - 105)) & ~0x1F) == 0 && ((1 << (_la - 105)) & 52461577) != 0) || ((((_la - 140)) & ~0x1F) == 0 && ((1 << (_la - 140)) & 4160819781) != 0) || ((((_la - 172)) & ~0x1F) == 0 && ((1 << (_la - 172)) & 32739) != 0)) {
				{
				this.state = 1226;
				localctx._exp = this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public expression(): ExpressionContext;
	public expression(_p: number): ExpressionContext;
	// @RuleVersion(0)
	public expression(_p?: number): ExpressionContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: ExpressionContext = new ExpressionContext(this, this._ctx, _parentState);
		let _prevctx: ExpressionContext = localctx;
		let _startState: number = 92;
		this.enterRecursionRule(localctx, 92, EParser.RULE_expression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1264;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 69, this._ctx) ) {
			case 1:
				{
				localctx = new CssExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;

				this.state = 1230;
				(localctx as CssExpressionContext)._exp = this.css_expression();
				}
				break;
			case 2:
				{
				localctx = new JsxExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1231;
				(localctx as JsxExpressionContext)._exp = this.jsx_expression();
				}
				break;
			case 3:
				{
				localctx = new InstanceExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1232;
				(localctx as InstanceExpressionContext)._exp = this.instance_expression(0);
				}
				break;
			case 4:
				{
				localctx = new ArrowExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1233;
				(localctx as ArrowExpressionContext)._exp = this.arrow_expression();
				}
				break;
			case 5:
				{
				localctx = new UnresolvedExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1234;
				(localctx as UnresolvedExpressionContext)._exp = this.unresolved_expression(0);
				}
				break;
			case 6:
				{
				localctx = new MethodCallExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1237;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 68, this._ctx) ) {
				case 1:
					{
					this.state = 1235;
					(localctx as MethodCallExpressionContext)._exp1 = this.instance_expression(0);
					}
					break;
				case 2:
					{
					this.state = 1236;
					(localctx as MethodCallExpressionContext)._exp2 = this.unresolved_expression(0);
					}
					break;
				}
				this.state = 1239;
				(localctx as MethodCallExpressionContext)._args = this.argument_assignment_list();
				}
				break;
			case 7:
				{
				localctx = new ConstructorExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1241;
				(localctx as ConstructorExpressionContext)._exp = this.constructor_expression();
				}
				break;
			case 8:
				{
				localctx = new MinusExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1242;
				this.match(EParser.MINUS);
				this.state = 1243;
				(localctx as MinusExpressionContext)._exp = this.expression(34);
				}
				break;
			case 9:
				{
				localctx = new NotExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1244;
				this.match(EParser.NOT);
				this.state = 1245;
				(localctx as NotExpressionContext)._exp = this.expression(33);
				}
				break;
			case 10:
				{
				localctx = new CodeExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1246;
				this.match(EParser.CODE);
				this.state = 1247;
				this.match(EParser.COLON);
				this.state = 1248;
				(localctx as CodeExpressionContext)._exp = this.expression(15);
				}
				break;
			case 11:
				{
				localctx = new ExecuteExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1249;
				this.match(EParser.EXECUTE);
				this.state = 1250;
				this.match(EParser.COLON);
				this.state = 1251;
				(localctx as ExecuteExpressionContext)._name = this.variable_identifier();
				}
				break;
			case 12:
				{
				localctx = new ClosureExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1252;
				this.match(EParser.METHOD_COLON);
				this.state = 1253;
				(localctx as ClosureExpressionContext)._exp = this.instance_expression(0);
				}
				break;
			case 13:
				{
				localctx = new BlobExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1254;
				(localctx as BlobExpressionContext)._exp = this.blob_expression();
				}
				break;
			case 14:
				{
				localctx = new DocumentExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1255;
				(localctx as DocumentExpressionContext)._exp = this.document_expression();
				}
				break;
			case 15:
				{
				localctx = new MutableInstanceExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1256;
				(localctx as MutableInstanceExpressionContext)._exp = this.mutable_instance_expression(0);
				}
				break;
			case 16:
				{
				localctx = new FetchExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1257;
				(localctx as FetchExpressionContext)._exp = this.fetch_expression();
				}
				break;
			case 17:
				{
				localctx = new ReadBlobExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1258;
				(localctx as ReadBlobExpressionContext)._exp = this.read_blob_expression();
				}
				break;
			case 18:
				{
				localctx = new ReadAllExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1259;
				(localctx as ReadAllExpressionContext)._exp = this.read_all_expression();
				}
				break;
			case 19:
				{
				localctx = new ReadOneExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1260;
				(localctx as ReadOneExpressionContext)._exp = this.read_one_expression();
				}
				break;
			case 20:
				{
				localctx = new SortedExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1261;
				(localctx as SortedExpressionContext)._exp = this.sorted_expression();
				}
				break;
			case 21:
				{
				localctx = new AmbiguousExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1262;
				(localctx as AmbiguousExpressionContext)._exp = this.ambiguous_expression();
				}
				break;
			case 22:
				{
				localctx = new InvocationExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1263;
				(localctx as InvocationExpressionContext)._exp = this.invocation_expression();
				}
				break;
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 1358;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 78, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					this.state = 1356;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 77, this._ctx) ) {
					case 1:
						{
						localctx = new MultiplyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
						(localctx as MultiplyExpressionContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
						this.state = 1266;
						if (!(this.precpred(this._ctx, 31))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 31)");
						}
						this.state = 1267;
						this.multiply();
						this.state = 1268;
						(localctx as MultiplyExpressionContext)._right = this.expression(32);
						}
						break;
					case 2:
						{
						localctx = new DivideExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
						(localctx as DivideExpressionContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
						this.state = 1270;
						if (!(this.precpred(this._ctx, 30))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 30)");
						}
						this.state = 1271;
						this.divide();
						this.state = 1272;
						(localctx as DivideExpressionContext)._right = this.expression(31);
						}
						break;
					case 3:
						{
						localctx = new ModuloExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
						(localctx as ModuloExpressionContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
						this.state = 1274;
						if (!(this.precpred(this._ctx, 29))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 29)");
						}
						this.state = 1275;
						this.modulo();
						this.state = 1276;
						(localctx as ModuloExpressionContext)._right = this.expression(30);
						}
						break;
					case 4:
						{
						localctx = new IntDivideExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
						(localctx as IntDivideExpressionContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
						this.state = 1278;
						if (!(this.precpred(this._ctx, 28))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 28)");
						}
						this.state = 1279;
						this.idivide();
						this.state = 1280;
						(localctx as IntDivideExpressionContext)._right = this.expression(29);
						}
						break;
					case 5:
						{
						localctx = new AddExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
						(localctx as AddExpressionContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
						this.state = 1282;
						if (!(this.precpred(this._ctx, 27))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 27)");
						}
						this.state = 1283;
						(localctx as AddExpressionContext)._op = this._input.LT(1);
						_la = this._input.LA(1);
						if(!(_la==32 || _la==33)) {
						    (localctx as AddExpressionContext)._op = this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						this.state = 1284;
						(localctx as AddExpressionContext)._right = this.expression(28);
						}
						break;
					case 6:
						{
						localctx = new CompareExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
						(localctx as CompareExpressionContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
						this.state = 1285;
						if (!(this.precpred(this._ctx, 26))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 26)");
						}
						this.state = 1286;
						(localctx as CompareExpressionContext)._op = this._input.LT(1);
						_la = this._input.LA(1);
						if(!(((((_la - 39)) & ~0x1F) == 0 && ((1 << (_la - 39)) & 15) != 0))) {
						    (localctx as CompareExpressionContext)._op = this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						this.state = 1287;
						(localctx as CompareExpressionContext)._right = this.expression(27);
						}
						break;
					case 7:
						{
						localctx = new EqualsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
						(localctx as EqualsExpressionContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
						this.state = 1288;
						if (!(this.precpred(this._ctx, 24))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 24)");
						}
						this.state = 1289;
						(localctx as EqualsExpressionContext)._op = this._input.LT(1);
						_la = this._input.LA(1);
						if(!(((((_la - 43)) & ~0x1F) == 0 && ((1 << (_la - 43)) & 69) != 0))) {
						    (localctx as EqualsExpressionContext)._op = this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						this.state = 1290;
						(localctx as EqualsExpressionContext)._right = this.expression(25);
						}
						break;
					case 8:
						{
						localctx = new ContainsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
						(localctx as ContainsExpressionContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
						this.state = 1291;
						if (!(this.precpred(this._ctx, 23))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 23)");
						}
						this.state = 1293;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la==129) {
							{
							this.state = 1292;
							this.match(EParser.NOT);
							}
						}

						this.state = 1295;
						this.match(EParser.CONTAINS);
						this.state = 1296;
						(localctx as ContainsExpressionContext)._right = this.expression(24);
						}
						break;
					case 9:
						{
						localctx = new InExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
						(localctx as InExpressionContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
						this.state = 1297;
						if (!(this.precpred(this._ctx, 22))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 22)");
						}
						this.state = 1299;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la==129) {
							{
							this.state = 1298;
							this.match(EParser.NOT);
							}
						}

						this.state = 1301;
						this.match(EParser.IN);
						this.state = 1302;
						(localctx as InExpressionContext)._right = this.expression(23);
						}
						break;
					case 10:
						{
						localctx = new HasExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
						(localctx as HasExpressionContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
						this.state = 1303;
						if (!(this.precpred(this._ctx, 21))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 21)");
						}
						this.state = 1305;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la==129) {
							{
							this.state = 1304;
							this.match(EParser.NOT);
							}
						}

						this.state = 1307;
						this.match(EParser.HAS);
						this.state = 1308;
						(localctx as HasExpressionContext)._right = this.expression(22);
						}
						break;
					case 11:
						{
						localctx = new OrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
						(localctx as OrExpressionContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
						this.state = 1309;
						if (!(this.precpred(this._ctx, 18))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 18)");
						}
						this.state = 1310;
						this.match(EParser.OR);
						this.state = 1311;
						(localctx as OrExpressionContext)._right = this.expression(19);
						}
						break;
					case 12:
						{
						localctx = new AndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
						(localctx as AndExpressionContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
						this.state = 1312;
						if (!(this.precpred(this._ctx, 17))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 17)");
						}
						this.state = 1313;
						this.match(EParser.AND);
						this.state = 1314;
						(localctx as AndExpressionContext)._right = this.expression(18);
						}
						break;
					case 13:
						{
						localctx = new TernaryExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
						(localctx as TernaryExpressionContext)._ifTrue = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
						this.state = 1315;
						if (!(this.precpred(this._ctx, 16))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 16)");
						}
						this.state = 1316;
						this.match(EParser.IF);
						this.state = 1317;
						(localctx as TernaryExpressionContext)._test = this.expression(0);
						this.state = 1318;
						this.match(EParser.ELSE);
						this.state = 1319;
						(localctx as TernaryExpressionContext)._ifFalse = this.expression(17);
						}
						break;
					case 14:
						{
						localctx = new IteratorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
						(localctx as IteratorExpressionContext)._exp = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
						this.state = 1321;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 1322;
						this.match(EParser.FOR);
						this.state = 1323;
						this.match(EParser.EACH);
						this.state = 1324;
						(localctx as IteratorExpressionContext)._name = this.variable_identifier();
						this.state = 1325;
						this.match(EParser.IN);
						this.state = 1326;
						(localctx as IteratorExpressionContext)._source = this.expression(2);
						}
						break;
					case 15:
						{
						localctx = new CastExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
						(localctx as CastExpressionContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
						this.state = 1328;
						if (!(this.precpred(this._ctx, 32))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 32)");
						}
						this.state = 1329;
						this.match(EParser.AS);
						this.state = 1331;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la==126) {
							{
							this.state = 1330;
							this.match(EParser.MUTABLE);
							}
						}

						this.state = 1333;
						(localctx as CastExpressionContext)._right = this.category_or_any_type();
						}
						break;
					case 16:
						{
						localctx = new IsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
						(localctx as IsExpressionContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
						this.state = 1334;
						if (!(this.precpred(this._ctx, 25))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 25)");
						}
						this.state = 1335;
						this.match(EParser.IS);
						this.state = 1337;
						this._errHandler.sync(this);
						switch ( this._interp.adaptivePredict(this._input, 74, this._ctx) ) {
						case 1:
							{
							this.state = 1336;
							this.match(EParser.NOT);
							}
							break;
						}
						this.state = 1339;
						(localctx as IsExpressionContext)._right = this.is_expression();
						}
						break;
					case 17:
						{
						localctx = new HasAllExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
						(localctx as HasAllExpressionContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
						this.state = 1340;
						if (!(this.precpred(this._ctx, 20))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 20)");
						}
						this.state = 1342;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la==129) {
							{
							this.state = 1341;
							this.match(EParser.NOT);
							}
						}

						this.state = 1344;
						this.match(EParser.HAS);
						this.state = 1345;
						this.match(EParser.ALL);
						this.state = 1346;
						(localctx as HasAllExpressionContext)._right = this.filter_expression();
						}
						break;
					case 18:
						{
						localctx = new HasAnyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
						(localctx as HasAnyExpressionContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
						this.state = 1347;
						if (!(this.precpred(this._ctx, 19))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 19)");
						}
						this.state = 1349;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la==129) {
							{
							this.state = 1348;
							this.match(EParser.NOT);
							}
						}

						this.state = 1351;
						this.match(EParser.HAS);
						this.state = 1352;
						this.match(EParser.ANY);
						this.state = 1353;
						(localctx as HasAnyExpressionContext)._right = this.filter_expression();
						}
						break;
					case 19:
						{
						localctx = new FilteredListExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
						(localctx as FilteredListExpressionContext)._src = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
						this.state = 1354;
						if (!(this.precpred(this._ctx, 9))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 9)");
						}
						this.state = 1355;
						this.filtered_list_suffix();
						}
						break;
					}
					}
				}
				this.state = 1360;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 78, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public filter_expression(): Filter_expressionContext {
		let localctx: Filter_expressionContext = new Filter_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 94, EParser.RULE_filter_expression);
		try {
			this.state = 1368;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 79, this._ctx) ) {
			case 1:
				localctx = new ArrowFilterExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1361;
				this.match(EParser.WHERE);
				this.state = 1362;
				this.arrow_expression();
				}
				break;
			case 2:
				localctx = new ExplicitFilterExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1363;
				this.variable_identifier();
				this.state = 1364;
				this.match(EParser.WHERE);
				this.state = 1365;
				this.expression(0);
				}
				break;
			case 3:
				localctx = new OtherFilterExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1367;
				this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public unresolved_expression(): Unresolved_expressionContext;
	public unresolved_expression(_p: number): Unresolved_expressionContext;
	// @RuleVersion(0)
	public unresolved_expression(_p?: number): Unresolved_expressionContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Unresolved_expressionContext = new Unresolved_expressionContext(this, this._ctx, _parentState);
		let _prevctx: Unresolved_expressionContext = localctx;
		let _startState: number = 96;
		this.enterRecursionRule(localctx, 96, EParser.RULE_unresolved_expression, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new UnresolvedIdentifierContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 1371;
			(localctx as UnresolvedIdentifierContext)._name = this.identifier();
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 1377;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 80, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new UnresolvedSelectorContext(this, new Unresolved_expressionContext(this, _parentctx, _parentState));
					(localctx as UnresolvedSelectorContext)._parent = _prevctx;
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_unresolved_expression);
					this.state = 1373;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 1374;
					(localctx as UnresolvedSelectorContext)._selector = this.unresolved_selector();
					}
					}
				}
				this.state = 1379;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 80, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unresolved_selector(): Unresolved_selectorContext {
		let localctx: Unresolved_selectorContext = new Unresolved_selectorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 98, EParser.RULE_unresolved_selector);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1380;
			if (!(this.wasNot(EParser.WS))) {
				throw this.createFailedPredicateException("$parser.wasNot(EParser.WS)");
			}
			this.state = 1381;
			this.match(EParser.DOT);
			this.state = 1382;
			localctx._name = this.identifier();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public invocation_expression(): Invocation_expressionContext {
		let localctx: Invocation_expressionContext = new Invocation_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 100, EParser.RULE_invocation_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1384;
			this.match(EParser.INVOKE_COLON);
			this.state = 1385;
			localctx._exp = this.unresolved_expression(0);
			this.state = 1386;
			this.invocation_trailer();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public invocation_trailer(): Invocation_trailerContext {
		let localctx: Invocation_trailerContext = new Invocation_trailerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 102, EParser.RULE_invocation_trailer);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1388;
			if (!(this.willBeIn(EParser.LF, EParser.DEDENT))) {
				throw this.createFailedPredicateException("$parser.willBeIn(EParser.LF, EParser.DEDENT)");
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectable_expression(): Selectable_expressionContext {
		let localctx: Selectable_expressionContext = new Selectable_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 104, EParser.RULE_selectable_expression);
		try {
			this.state = 1395;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 81, this._ctx) ) {
			case 1:
				localctx = new ParenthesisExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1390;
				(localctx as ParenthesisExpressionContext)._exp = this.parenthesis_expression();
				}
				break;
			case 2:
				localctx = new LiteralExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1391;
				(localctx as LiteralExpressionContext)._exp = this.literal_expression();
				}
				break;
			case 3:
				localctx = new IdentifierExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1392;
				(localctx as IdentifierExpressionContext)._exp = this.identifier();
				}
				break;
			case 4:
				localctx = new ThisExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1393;
				(localctx as ThisExpressionContext)._exp = this.this_expression();
				}
				break;
			case 5:
				localctx = new SuperExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1394;
				(localctx as SuperExpressionContext)._exp = this.super_expression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public instance_expression(): Instance_expressionContext;
	public instance_expression(_p: number): Instance_expressionContext;
	// @RuleVersion(0)
	public instance_expression(_p?: number): Instance_expressionContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Instance_expressionContext = new Instance_expressionContext(this, this._ctx, _parentState);
		let _prevctx: Instance_expressionContext = localctx;
		let _startState: number = 106;
		this.enterRecursionRule(localctx, 106, EParser.RULE_instance_expression, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new SelectableExpressionContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 1398;
			(localctx as SelectableExpressionContext)._parent = this.selectable_expression();
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 1404;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 82, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new SelectorExpressionContext(this, new Instance_expressionContext(this, _parentctx, _parentState));
					(localctx as SelectorExpressionContext)._parent = _prevctx;
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_instance_expression);
					this.state = 1400;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 1401;
					(localctx as SelectorExpressionContext)._selector = this.instance_selector();
					}
					}
				}
				this.state = 1406;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 82, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public instance_selector(): Instance_selectorContext {
		let localctx: Instance_selectorContext = new Instance_selectorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 108, EParser.RULE_instance_selector);
		try {
			this.state = 1420;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 83, this._ctx) ) {
			case 1:
				localctx = new MemberSelectorContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1407;
				if (!(this.wasNot(EParser.WS))) {
					throw this.createFailedPredicateException("$parser.wasNot(EParser.WS)");
				}
				this.state = 1408;
				this.match(EParser.DOT);
				this.state = 1409;
				(localctx as MemberSelectorContext)._name = this.member_identifier();
				}
				break;
			case 2:
				localctx = new SliceSelectorContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1410;
				if (!(this.wasNot(EParser.WS))) {
					throw this.createFailedPredicateException("$parser.wasNot(EParser.WS)");
				}
				this.state = 1411;
				this.match(EParser.LBRAK);
				this.state = 1412;
				(localctx as SliceSelectorContext)._xslice = this.slice_arguments();
				this.state = 1413;
				this.match(EParser.RBRAK);
				}
				break;
			case 3:
				localctx = new ItemSelectorContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1415;
				if (!(this.wasNot(EParser.WS))) {
					throw this.createFailedPredicateException("$parser.wasNot(EParser.WS)");
				}
				this.state = 1416;
				this.match(EParser.LBRAK);
				this.state = 1417;
				(localctx as ItemSelectorContext)._exp = this.expression(0);
				this.state = 1418;
				this.match(EParser.RBRAK);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public mutable_instance_expression(): Mutable_instance_expressionContext;
	public mutable_instance_expression(_p: number): Mutable_instance_expressionContext;
	// @RuleVersion(0)
	public mutable_instance_expression(_p?: number): Mutable_instance_expressionContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Mutable_instance_expressionContext = new Mutable_instance_expressionContext(this, this._ctx, _parentState);
		let _prevctx: Mutable_instance_expressionContext = localctx;
		let _startState: number = 110;
		this.enterRecursionRule(localctx, 110, EParser.RULE_mutable_instance_expression, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new MutableSelectableExpressionContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 1423;
			this.match(EParser.MUTABLE);
			this.state = 1424;
			(localctx as MutableSelectableExpressionContext)._exp = this.identifier();
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 1430;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 84, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new MutableSelectorExpressionContext(this, new Mutable_instance_expressionContext(this, _parentctx, _parentState));
					(localctx as MutableSelectorExpressionContext)._parent = _prevctx;
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_mutable_instance_expression);
					this.state = 1426;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 1427;
					(localctx as MutableSelectorExpressionContext)._selector = this.instance_selector();
					}
					}
				}
				this.state = 1432;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 84, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public document_expression(): Document_expressionContext {
		let localctx: Document_expressionContext = new Document_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 112, EParser.RULE_document_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1433;
			this.match(EParser.DOCUMENT);
			this.state = 1436;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 85, this._ctx) ) {
			case 1:
				{
				this.state = 1434;
				this.match(EParser.FROM);
				this.state = 1435;
				localctx._exp = this.expression(0);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public blob_expression(): Blob_expressionContext {
		let localctx: Blob_expressionContext = new Blob_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 114, EParser.RULE_blob_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1438;
			this.match(EParser.BLOB);
			this.state = 1439;
			this.match(EParser.FROM);
			this.state = 1440;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public constructor_expression(): Constructor_expressionContext {
		let localctx: Constructor_expressionContext = new Constructor_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 116, EParser.RULE_constructor_expression);
		let _la: number;
		try {
			this.state = 1463;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 91, this._ctx) ) {
			case 1:
				localctx = new ConstructorFromContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1442;
				(localctx as ConstructorFromContext)._typ = this.mutable_category_type();
				this.state = 1443;
				this.match(EParser.FROM);
				this.state = 1444;
				(localctx as ConstructorFromContext)._copyExp = this.expression(0);
				this.state = 1453;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 88, this._ctx) ) {
				case 1:
					{
					this.state = 1446;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la==17) {
						{
						this.state = 1445;
						this.match(EParser.COMMA);
						}
					}

					this.state = 1448;
					(localctx as ConstructorFromContext)._args = this.with_argument_assignment_list(0);
					this.state = 1451;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 87, this._ctx) ) {
					case 1:
						{
						this.state = 1449;
						this.match(EParser.AND);
						this.state = 1450;
						(localctx as ConstructorFromContext)._arg = this.argument_assignment();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				localctx = new ConstructorNoFromContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1455;
				(localctx as ConstructorNoFromContext)._typ = this.mutable_category_type();
				this.state = 1461;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 90, this._ctx) ) {
				case 1:
					{
					this.state = 1456;
					(localctx as ConstructorNoFromContext)._args = this.with_argument_assignment_list(0);
					this.state = 1459;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 89, this._ctx) ) {
					case 1:
						{
						this.state = 1457;
						this.match(EParser.AND);
						this.state = 1458;
						(localctx as ConstructorNoFromContext)._arg = this.argument_assignment();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public write_statement(): Write_statementContext {
		let localctx: Write_statementContext = new Write_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 118, EParser.RULE_write_statement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1465;
			this.match(EParser.WRITE);
			this.state = 1466;
			localctx._what = this.expression(0);
			this.state = 1467;
			this.match(EParser.TO);
			this.state = 1468;
			localctx._target = this.expression(0);
			this.state = 1470;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==155) {
				{
				this.state = 1469;
				this.then();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ambiguous_expression(): Ambiguous_expressionContext {
		let localctx: Ambiguous_expressionContext = new Ambiguous_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 120, EParser.RULE_ambiguous_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1472;
			localctx._method = this.unresolved_expression(0);
			this.state = 1473;
			this.match(EParser.MINUS);
			this.state = 1474;
			localctx._exp = this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public filtered_list_suffix(): Filtered_list_suffixContext {
		let localctx: Filtered_list_suffixContext = new Filtered_list_suffixContext(this, this._ctx, this.state);
		this.enterRule(localctx, 122, EParser.RULE_filtered_list_suffix);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1476;
			this.match(EParser.FILTERED);
			this.state = 1479;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==162) {
				{
				this.state = 1477;
				this.match(EParser.WITH);
				this.state = 1478;
				localctx._name = this.variable_identifier();
				}
			}

			this.state = 1481;
			this.match(EParser.WHERE);
			this.state = 1482;
			localctx._predicate = this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fetch_expression(): Fetch_expressionContext {
		let localctx: Fetch_expressionContext = new Fetch_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 124, EParser.RULE_fetch_expression);
		let _la: number;
		try {
			this.state = 1528;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 102, this._ctx) ) {
			case 1:
				localctx = new FetchOneContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1484;
				this.match(EParser.FETCH);
				this.state = 1485;
				this.match(EParser.ONE);
				{
				this.state = 1487;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la==126 || _la==172) {
					{
					this.state = 1486;
					(localctx as FetchOneContext)._typ = this.mutable_category_type();
					}
				}

				}
				this.state = 1489;
				this.match(EParser.WHERE);
				this.state = 1490;
				(localctx as FetchOneContext)._predicate = this.expression(0);
				this.state = 1493;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 95, this._ctx) ) {
				case 1:
					{
					this.state = 1491;
					this.match(EParser.INCLUDE);
					this.state = 1492;
					(localctx as FetchOneContext)._include = this.include_list();
					}
					break;
				}
				}
				break;
			case 2:
				localctx = new FetchManyContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1495;
				this.match(EParser.FETCH);
				this.state = 1513;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 76:
					{
					{
					this.state = 1496;
					this.match(EParser.ALL);
					this.state = 1498;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 96, this._ctx) ) {
					case 1:
						{
						this.state = 1497;
						(localctx as FetchManyContext)._typ = this.mutable_category_type();
						}
						break;
					}
					}
					}
					break;
				case 126:
				case 172:
					{
					{
					this.state = 1500;
					(localctx as FetchManyContext)._typ = this.mutable_category_type();
					this.state = 1502;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la==145) {
						{
						this.state = 1501;
						this.match(EParser.ROWS);
						}
					}

					this.state = 1504;
					(localctx as FetchManyContext)._xstart = this.expression(0);
					this.state = 1505;
					this.match(EParser.TO);
					this.state = 1506;
					(localctx as FetchManyContext)._xstop = this.expression(0);
					}
					}
					break;
				case 145:
					{
					{
					this.state = 1508;
					this.match(EParser.ROWS);
					this.state = 1509;
					(localctx as FetchManyContext)._xstart = this.expression(0);
					this.state = 1510;
					this.match(EParser.TO);
					this.state = 1511;
					(localctx as FetchManyContext)._xstop = this.expression(0);
					}
					}
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
				}
				this.state = 1517;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 99, this._ctx) ) {
				case 1:
					{
					this.state = 1515;
					this.match(EParser.WHERE);
					this.state = 1516;
					(localctx as FetchManyContext)._predicate = this.expression(0);
					}
					break;
				}
				this.state = 1521;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 100, this._ctx) ) {
				case 1:
					{
					this.state = 1519;
					this.match(EParser.INCLUDE);
					this.state = 1520;
					(localctx as FetchManyContext)._include = this.include_list();
					}
					break;
				}
				this.state = 1526;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 101, this._ctx) ) {
				case 1:
					{
					this.state = 1523;
					this.match(EParser.ORDER);
					this.state = 1524;
					this.match(EParser.BY);
					this.state = 1525;
					(localctx as FetchManyContext)._orderby = this.order_by_list();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fetch_statement(): Fetch_statementContext {
		let localctx: Fetch_statementContext = new Fetch_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 126, EParser.RULE_fetch_statement);
		let _la: number;
		try {
			this.state = 1577;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 111, this._ctx) ) {
			case 1:
				localctx = new FetchOneAsyncContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1530;
				this.match(EParser.FETCH);
				this.state = 1531;
				this.match(EParser.ONE);
				{
				this.state = 1533;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la==126 || _la==172) {
					{
					this.state = 1532;
					(localctx as FetchOneAsyncContext)._typ = this.mutable_category_type();
					}
				}

				}
				this.state = 1535;
				this.match(EParser.WHERE);
				this.state = 1536;
				(localctx as FetchOneAsyncContext)._predicate = this.expression(0);
				this.state = 1539;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la==118) {
					{
					this.state = 1537;
					this.match(EParser.INCLUDE);
					this.state = 1538;
					(localctx as FetchOneAsyncContext)._include = this.include_list();
					}
				}

				this.state = 1541;
				this.then();
				}
				break;
			case 2:
				localctx = new FetchManyAsyncContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1543;
				this.match(EParser.FETCH);
				this.state = 1561;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 76:
					{
					{
					this.state = 1544;
					this.match(EParser.ALL);
					this.state = 1546;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la==126 || _la==172) {
						{
						this.state = 1545;
						(localctx as FetchManyAsyncContext)._typ = this.mutable_category_type();
						}
					}

					}
					}
					break;
				case 126:
				case 172:
					{
					{
					this.state = 1548;
					(localctx as FetchManyAsyncContext)._typ = this.mutable_category_type();
					this.state = 1550;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la==145) {
						{
						this.state = 1549;
						this.match(EParser.ROWS);
						}
					}

					this.state = 1552;
					(localctx as FetchManyAsyncContext)._xstart = this.expression(0);
					this.state = 1553;
					this.match(EParser.TO);
					this.state = 1554;
					(localctx as FetchManyAsyncContext)._xstop = this.expression(0);
					}
					}
					break;
				case 145:
					{
					{
					this.state = 1556;
					this.match(EParser.ROWS);
					this.state = 1557;
					(localctx as FetchManyAsyncContext)._xstart = this.expression(0);
					this.state = 1558;
					this.match(EParser.TO);
					this.state = 1559;
					(localctx as FetchManyAsyncContext)._xstop = this.expression(0);
					}
					}
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
				}
				this.state = 1565;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la==164) {
					{
					this.state = 1563;
					this.match(EParser.WHERE);
					this.state = 1564;
					(localctx as FetchManyAsyncContext)._predicate = this.expression(0);
					}
				}

				this.state = 1569;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la==118) {
					{
					this.state = 1567;
					this.match(EParser.INCLUDE);
					this.state = 1568;
					(localctx as FetchManyAsyncContext)._include = this.include_list();
					}
				}

				this.state = 1574;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la==136) {
					{
					this.state = 1571;
					this.match(EParser.ORDER);
					this.state = 1572;
					this.match(EParser.BY);
					this.state = 1573;
					(localctx as FetchManyAsyncContext)._orderby = this.order_by_list();
					}
				}

				this.state = 1576;
				this.then();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public include_list(): Include_listContext {
		let localctx: Include_listContext = new Include_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 128, EParser.RULE_include_list);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1579;
			this.variable_identifier();
			this.state = 1584;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 112, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 1580;
					this.match(EParser.COMMA);
					this.state = 1581;
					this.variable_identifier();
					}
					}
				}
				this.state = 1586;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 112, this._ctx);
			}
			this.state = 1589;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 113, this._ctx) ) {
			case 1:
				{
				this.state = 1587;
				this.match(EParser.AND);
				this.state = 1588;
				this.variable_identifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public then(): ThenContext {
		let localctx: ThenContext = new ThenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 130, EParser.RULE_then);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1591;
			this.match(EParser.THEN);
			this.state = 1592;
			this.match(EParser.WITH);
			this.state = 1593;
			localctx._name = this.variable_identifier();
			this.state = 1594;
			this.match(EParser.COLON);
			this.state = 1595;
			this.indent();
			this.state = 1596;
			localctx._stmts = this.statement_list();
			this.state = 1597;
			this.dedent();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public read_statement(): Read_statementContext {
		let localctx: Read_statementContext = new Read_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 132, EParser.RULE_read_statement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1599;
			this.match(EParser.READ);
			this.state = 1600;
			this.match(EParser.ALL);
			this.state = 1601;
			this.match(EParser.FROM);
			this.state = 1602;
			localctx._source = this.expression(0);
			this.state = 1603;
			this.then();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sorted_expression(): Sorted_expressionContext {
		let localctx: Sorted_expressionContext = new Sorted_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 134, EParser.RULE_sorted_expression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1605;
			this.match(EParser.SORTED);
			this.state = 1607;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==97) {
				{
				this.state = 1606;
				this.match(EParser.DESC);
				}
			}

			this.state = 1609;
			localctx._source = this.instance_expression(0);
			this.state = 1615;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 115, this._ctx) ) {
			case 1:
				{
				this.state = 1610;
				this.match(EParser.WITH);
				this.state = 1611;
				localctx._key = this.sorted_key();
				this.state = 1612;
				this.match(EParser.AS);
				this.state = 1613;
				this.key_token();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public argument_assignment_list(): Argument_assignment_listContext {
		let localctx: Argument_assignment_listContext = new Argument_assignment_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 136, EParser.RULE_argument_assignment_list);
		try {
			this.state = 1631;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 119, this._ctx) ) {
			case 1:
				localctx = new ArgumentAssignmentListExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1617;
				if (!(this.was(EParser.WS))) {
					throw this.createFailedPredicateException("$parser.was(EParser.WS)");
				}
				this.state = 1618;
				(localctx as ArgumentAssignmentListExpressionContext)._exp = this.expression(0);
				this.state = 1624;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 117, this._ctx) ) {
				case 1:
					{
					this.state = 1619;
					(localctx as ArgumentAssignmentListExpressionContext)._items = this.with_argument_assignment_list(0);
					this.state = 1622;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 116, this._ctx) ) {
					case 1:
						{
						this.state = 1620;
						this.match(EParser.AND);
						this.state = 1621;
						(localctx as ArgumentAssignmentListExpressionContext)._item = this.argument_assignment();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				localctx = new ArgumentAssignmentListNoExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1626;
				(localctx as ArgumentAssignmentListNoExpressionContext)._items = this.with_argument_assignment_list(0);
				this.state = 1629;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 118, this._ctx) ) {
				case 1:
					{
					this.state = 1627;
					this.match(EParser.AND);
					this.state = 1628;
					(localctx as ArgumentAssignmentListNoExpressionContext)._item = this.argument_assignment();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public with_argument_assignment_list(): With_argument_assignment_listContext;
	public with_argument_assignment_list(_p: number): With_argument_assignment_listContext;
	// @RuleVersion(0)
	public with_argument_assignment_list(_p?: number): With_argument_assignment_listContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: With_argument_assignment_listContext = new With_argument_assignment_listContext(this, this._ctx, _parentState);
		let _prevctx: With_argument_assignment_listContext = localctx;
		let _startState: number = 138;
		this.enterRecursionRule(localctx, 138, EParser.RULE_with_argument_assignment_list, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new ArgumentAssignmentListContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 1634;
			this.match(EParser.WITH);
			this.state = 1635;
			(localctx as ArgumentAssignmentListContext)._item = this.argument_assignment();
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 1642;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 120, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new ArgumentAssignmentListItemContext(this, new With_argument_assignment_listContext(this, _parentctx, _parentState));
					(localctx as ArgumentAssignmentListItemContext)._items = _prevctx;
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_with_argument_assignment_list);
					this.state = 1637;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 1638;
					this.match(EParser.COMMA);
					this.state = 1639;
					(localctx as ArgumentAssignmentListItemContext)._item = this.argument_assignment();
					}
					}
				}
				this.state = 1644;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 120, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public argument_assignment(): Argument_assignmentContext {
		let localctx: Argument_assignmentContext = new Argument_assignmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 140, EParser.RULE_argument_assignment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1648;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 121, this._ctx) ) {
			case 1:
				{
				this.state = 1645;
				localctx._exp = this.expression(0);
				this.state = 1646;
				this.match(EParser.AS);
				}
				break;
			}
			this.state = 1650;
			localctx._name = this.variable_identifier();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public assign_instance_statement(): Assign_instance_statementContext {
		let localctx: Assign_instance_statementContext = new Assign_instance_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 142, EParser.RULE_assign_instance_statement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1652;
			localctx._inst = this.assignable_instance(0);
			this.state = 1653;
			this.assign();
			this.state = 1654;
			localctx._exp = this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public child_instance(): Child_instanceContext {
		let localctx: Child_instanceContext = new Child_instanceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 144, EParser.RULE_child_instance);
		try {
			this.state = 1664;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 122, this._ctx) ) {
			case 1:
				localctx = new MemberInstanceContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1656;
				if (!(this.wasNot(EParser.WS))) {
					throw this.createFailedPredicateException("$parser.wasNot(EParser.WS)");
				}
				this.state = 1657;
				this.match(EParser.DOT);
				this.state = 1658;
				(localctx as MemberInstanceContext)._name = this.variable_identifier();
				}
				break;
			case 2:
				localctx = new ItemInstanceContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1659;
				if (!(this.wasNot(EParser.WS))) {
					throw this.createFailedPredicateException("$parser.wasNot(EParser.WS)");
				}
				this.state = 1660;
				this.match(EParser.LBRAK);
				this.state = 1661;
				(localctx as ItemInstanceContext)._exp = this.expression(0);
				this.state = 1662;
				this.match(EParser.RBRAK);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public assign_tuple_statement(): Assign_tuple_statementContext {
		let localctx: Assign_tuple_statementContext = new Assign_tuple_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 146, EParser.RULE_assign_tuple_statement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1666;
			localctx._items = this.variable_identifier_list();
			this.state = 1667;
			this.assign();
			this.state = 1668;
			localctx._exp = this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lfs(): LfsContext {
		let localctx: LfsContext = new LfsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 148, EParser.RULE_lfs);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1673;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 123, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 1670;
					this.match(EParser.LF);
					}
					}
				}
				this.state = 1675;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 123, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lfp(): LfpContext {
		let localctx: LfpContext = new LfpContext(this, this._ctx, this.state);
		this.enterRule(localctx, 150, EParser.RULE_lfp);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1677;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1676;
				this.match(EParser.LF);
				}
				}
				this.state = 1679;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la==5);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ws_plus(): Ws_plusContext {
		let localctx: Ws_plusContext = new Ws_plusContext(this, this._ctx, this.state);
		this.enterRule(localctx, 152, EParser.RULE_ws_plus);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1684;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 125, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 1681;
					_la = this._input.LA(1);
					if(!((((_la) & ~0x1F) == 0 && ((1 << _la) & 226) != 0))) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
					}
				}
				this.state = 1686;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 125, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indent(): IndentContext {
		let localctx: IndentContext = new IndentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 154, EParser.RULE_indent);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1688;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1687;
				this.match(EParser.LF);
				}
				}
				this.state = 1690;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la==5);
			this.state = 1692;
			this.match(EParser.INDENT);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dedent(): DedentContext {
		let localctx: DedentContext = new DedentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 156, EParser.RULE_dedent);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1697;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la==5) {
				{
				{
				this.state = 1694;
				this.match(EParser.LF);
				}
				}
				this.state = 1699;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1700;
			this.match(EParser.DEDENT);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public type_literal(): Type_literalContext {
		let localctx: Type_literalContext = new Type_literalContext(this, this._ctx, this.state);
		this.enterRule(localctx, 158, EParser.RULE_type_literal);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1702;
			this.match(EParser.TYPE);
			this.state = 1703;
			this.match(EParser.COLON);
			this.state = 1704;
			this.category_or_any_type();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public null_literal(): Null_literalContext {
		let localctx: Null_literalContext = new Null_literalContext(this, this._ctx, this.state);
		this.enterRule(localctx, 160, EParser.RULE_null_literal);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1706;
			this.match(EParser.NOTHING);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public repl(): ReplContext {
		let localctx: ReplContext = new ReplContext(this, this._ctx, this.state);
		this.enterRule(localctx, 162, EParser.RULE_repl);
		try {
			this.state = 1711;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 128, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1708;
				this.declaration();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1709;
				this.statement();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1710;
				this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public declaration_list(): Declaration_listContext {
		let localctx: Declaration_listContext = new Declaration_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 164, EParser.RULE_declaration_list);
		let _la: number;
		try {
			localctx = new FullDeclarationListContext(this, localctx);
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1713;
			this.lfs();
			this.state = 1715;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==8 || _la==95 || _la==176) {
				{
				this.state = 1714;
				this.declarations();
				}
			}

			this.state = 1717;
			this.lfs();
			this.state = 1718;
			this.match(EParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public declarations(): DeclarationsContext {
		let localctx: DeclarationsContext = new DeclarationsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 166, EParser.RULE_declarations);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1720;
			this.declaration();
			this.state = 1726;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 130, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 1721;
					this.lfp();
					this.state = 1722;
					this.declaration();
					}
					}
				}
				this.state = 1728;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 130, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public declaration(): DeclarationContext {
		let localctx: DeclarationContext = new DeclarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 168, EParser.RULE_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1734;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la==8) {
				{
				{
				this.state = 1729;
				this.comment_statement();
				this.state = 1730;
				this.lfp();
				}
				}
				this.state = 1736;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1742;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la==176) {
				{
				{
				this.state = 1737;
				this.annotation_constructor();
				this.state = 1738;
				this.lfp();
				}
				}
				this.state = 1744;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1751;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 133, this._ctx) ) {
			case 1:
				{
				this.state = 1745;
				this.attribute_declaration();
				}
				break;
			case 2:
				{
				this.state = 1746;
				this.category_declaration();
				}
				break;
			case 3:
				{
				this.state = 1747;
				this.resource_declaration();
				}
				break;
			case 4:
				{
				this.state = 1748;
				this.enum_declaration();
				}
				break;
			case 5:
				{
				this.state = 1749;
				this.widget_declaration();
				}
				break;
			case 6:
				{
				this.state = 1750;
				this.method_declaration();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public annotation_constructor(): Annotation_constructorContext {
		let localctx: Annotation_constructorContext = new Annotation_constructorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 170, EParser.RULE_annotation_constructor);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1753;
			localctx._name = this.annotation_identifier();
			this.state = 1768;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==20) {
				{
				this.state = 1754;
				this.match(EParser.LPAR);
				this.state = 1764;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 20:
				case 22:
				case 24:
				case 33:
				case 41:
				case 44:
				case 53:
				case 54:
				case 55:
				case 56:
				case 57:
				case 58:
				case 59:
				case 60:
				case 61:
				case 62:
				case 63:
				case 65:
				case 66:
				case 67:
				case 68:
				case 69:
				case 70:
				case 73:
				case 74:
				case 126:
				case 130:
				case 167:
				case 168:
				case 169:
				case 170:
				case 171:
				case 172:
				case 177:
				case 178:
				case 179:
				case 180:
				case 181:
				case 182:
				case 183:
				case 184:
				case 185:
				case 186:
					{
					this.state = 1755;
					localctx._exp = this.annotation_argument_value();
					}
					break;
				case 114:
				case 147:
				case 173:
					{
					{
					this.state = 1756;
					this.annotation_argument();
					this.state = 1761;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la==17) {
						{
						{
						this.state = 1757;
						this.match(EParser.COMMA);
						this.state = 1758;
						this.annotation_argument();
						}
						}
						this.state = 1763;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
				}
				this.state = 1766;
				this.match(EParser.RPAR);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public annotation_identifier(): Annotation_identifierContext {
		let localctx: Annotation_identifierContext = new Annotation_identifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 172, EParser.RULE_annotation_identifier);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1770;
			this.match(EParser.ARONDBASE_IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public annotation_argument(): Annotation_argumentContext {
		let localctx: Annotation_argumentContext = new Annotation_argumentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 174, EParser.RULE_annotation_argument);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1772;
			localctx._name = this.annotation_argument_name();
			this.state = 1773;
			this.match(EParser.EQ);
			this.state = 1774;
			localctx._exp = this.annotation_argument_value();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public annotation_argument_name(): Annotation_argument_nameContext {
		let localctx: Annotation_argument_nameContext = new Annotation_argument_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 176, EParser.RULE_annotation_argument_name);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1776;
			_la = this._input.LA(1);
			if(!(_la==114 || _la==147 || _la==173)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public annotation_argument_value(): Annotation_argument_valueContext {
		let localctx: Annotation_argument_valueContext = new Annotation_argument_valueContext(this, this._ctx, this.state);
		this.enterRule(localctx, 178, EParser.RULE_annotation_argument_value);
		try {
			this.state = 1780;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 20:
			case 22:
			case 24:
			case 33:
			case 41:
			case 44:
			case 74:
			case 126:
			case 130:
			case 167:
			case 168:
			case 169:
			case 170:
			case 171:
			case 177:
			case 178:
			case 179:
			case 180:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 186:
				localctx = new AnnotationLiteralValueContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1778;
				(localctx as AnnotationLiteralValueContext)._exp = this.literal_expression();
				}
				break;
			case 53:
			case 54:
			case 55:
			case 56:
			case 57:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 63:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 73:
			case 172:
				localctx = new AnnotationTypeValueContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1779;
				(localctx as AnnotationTypeValueContext)._typ = this.primary_type();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public resource_declaration(): Resource_declarationContext {
		let localctx: Resource_declarationContext = new Resource_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 180, EParser.RULE_resource_declaration);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1782;
			this.native_resource_declaration();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public enum_declaration(): Enum_declarationContext {
		let localctx: Enum_declarationContext = new Enum_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 182, EParser.RULE_enum_declaration);
		try {
			this.state = 1786;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 138, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1784;
				this.enum_category_declaration();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1785;
				this.enum_native_declaration();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public native_symbol_list(): Native_symbol_listContext {
		let localctx: Native_symbol_listContext = new Native_symbol_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 184, EParser.RULE_native_symbol_list);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1788;
			this.native_symbol();
			this.state = 1794;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 139, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 1789;
					this.lfp();
					this.state = 1790;
					this.native_symbol();
					}
					}
				}
				this.state = 1796;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 139, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public category_symbol_list(): Category_symbol_listContext {
		let localctx: Category_symbol_listContext = new Category_symbol_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 186, EParser.RULE_category_symbol_list);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1797;
			this.category_symbol();
			this.state = 1803;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 140, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 1798;
					this.lfp();
					this.state = 1799;
					this.category_symbol();
					}
					}
				}
				this.state = 1805;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 140, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public symbol_list(): Symbol_listContext {
		let localctx: Symbol_listContext = new Symbol_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 188, EParser.RULE_symbol_list);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1806;
			this.symbol_identifier();
			this.state = 1811;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la==17) {
				{
				{
				this.state = 1807;
				this.match(EParser.COMMA);
				this.state = 1808;
				this.symbol_identifier();
				}
				}
				this.state = 1813;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public attribute_constraint(): Attribute_constraintContext {
		let localctx: Attribute_constraintContext = new Attribute_constraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 190, EParser.RULE_attribute_constraint);
		try {
			this.state = 1824;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 142, this._ctx) ) {
			case 1:
				localctx = new MatchingListContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1814;
				this.match(EParser.IN);
				this.state = 1815;
				(localctx as MatchingListContext)._source = this.list_literal();
				}
				break;
			case 2:
				localctx = new MatchingSetContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1816;
				this.match(EParser.IN);
				this.state = 1817;
				(localctx as MatchingSetContext)._source = this.set_literal();
				}
				break;
			case 3:
				localctx = new MatchingRangeContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1818;
				this.match(EParser.IN);
				this.state = 1819;
				(localctx as MatchingRangeContext)._source = this.range_literal();
				}
				break;
			case 4:
				localctx = new MatchingPatternContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1820;
				this.match(EParser.MATCHING);
				this.state = 1821;
				(localctx as MatchingPatternContext)._text = this.match(EParser.TEXT_LITERAL);
				}
				break;
			case 5:
				localctx = new MatchingExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1822;
				this.match(EParser.MATCHING);
				this.state = 1823;
				(localctx as MatchingExpressionContext)._exp = this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public list_literal(): List_literalContext {
		let localctx: List_literalContext = new List_literalContext(this, this._ctx, this.state);
		this.enterRule(localctx, 192, EParser.RULE_list_literal);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1827;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==126) {
				{
				this.state = 1826;
				this.match(EParser.MUTABLE);
				}
			}

			this.state = 1829;
			this.match(EParser.LBRAK);
			this.state = 1831;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 20)) & ~0x1F) == 0 && ((1 << (_la - 20)) & 27271189) != 0) || ((((_la - 64)) & ~0x1F) == 0 && ((1 << (_la - 64)) & 67109903) != 0) || ((((_la - 105)) & ~0x1F) == 0 && ((1 << (_la - 105)) & 52461577) != 0) || ((((_la - 140)) & ~0x1F) == 0 && ((1 << (_la - 140)) & 4160819781) != 0) || ((((_la - 172)) & ~0x1F) == 0 && ((1 << (_la - 172)) & 32739) != 0)) {
				{
				this.state = 1830;
				this.expression_list();
				}
			}

			this.state = 1833;
			this.match(EParser.RBRAK);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public set_literal(): Set_literalContext {
		let localctx: Set_literalContext = new Set_literalContext(this, this._ctx, this.state);
		this.enterRule(localctx, 194, EParser.RULE_set_literal);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1836;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==126) {
				{
				this.state = 1835;
				this.match(EParser.MUTABLE);
				}
			}

			this.state = 1838;
			this.match(EParser.LT);
			this.state = 1840;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 20)) & ~0x1F) == 0 && ((1 << (_la - 20)) & 27271189) != 0) || ((((_la - 64)) & ~0x1F) == 0 && ((1 << (_la - 64)) & 67109903) != 0) || ((((_la - 105)) & ~0x1F) == 0 && ((1 << (_la - 105)) & 52461577) != 0) || ((((_la - 140)) & ~0x1F) == 0 && ((1 << (_la - 140)) & 4160819781) != 0) || ((((_la - 172)) & ~0x1F) == 0 && ((1 << (_la - 172)) & 32739) != 0)) {
				{
				this.state = 1839;
				this.expression_list();
				}
			}

			this.state = 1842;
			this.match(EParser.GT);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public expression_list(): Expression_listContext {
		let localctx: Expression_listContext = new Expression_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 196, EParser.RULE_expression_list);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1844;
			this.expression(0);
			this.state = 1849;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la==17) {
				{
				{
				this.state = 1845;
				this.match(EParser.COMMA);
				this.state = 1846;
				this.expression(0);
				}
				}
				this.state = 1851;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public range_literal(): Range_literalContext {
		let localctx: Range_literalContext = new Range_literalContext(this, this._ctx, this.state);
		this.enterRule(localctx, 198, EParser.RULE_range_literal);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1852;
			this.match(EParser.LBRAK);
			this.state = 1853;
			localctx._low = this.expression(0);
			this.state = 1854;
			this.match(EParser.RANGE);
			this.state = 1855;
			localctx._high = this.expression(0);
			this.state = 1856;
			this.match(EParser.RBRAK);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public typedef(): TypedefContext;
	public typedef(_p: number): TypedefContext;
	// @RuleVersion(0)
	public typedef(_p?: number): TypedefContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: TypedefContext = new TypedefContext(this, this._ctx, _parentState);
		let _prevctx: TypedefContext = localctx;
		let _startState: number = 200;
		this.enterRecursionRule(localctx, 200, EParser.RULE_typedef, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1875;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 53:
			case 54:
			case 55:
			case 56:
			case 57:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 63:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 73:
			case 172:
				{
				localctx = new PrimaryTypeContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;

				this.state = 1859;
				(localctx as PrimaryTypeContext)._p = this.primary_type();
				}
				break;
			case 72:
				{
				localctx = new CursorTypeContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1860;
				this.match(EParser.CURSOR);
				this.state = 1861;
				this.match(EParser.LT);
				this.state = 1862;
				(localctx as CursorTypeContext)._c = this.typedef(0);
				this.state = 1863;
				this.match(EParser.GT);
				}
				break;
			case 71:
				{
				localctx = new IteratorTypeContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1865;
				this.match(EParser.ITERATOR);
				this.state = 1866;
				this.match(EParser.LT);
				this.state = 1867;
				(localctx as IteratorTypeContext)._i = this.typedef(0);
				this.state = 1868;
				this.match(EParser.GT);
				}
				break;
			case 74:
				{
				localctx = new TypeTypeContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 1870;
				this.match(EParser.TYPE);
				this.state = 1871;
				this.match(EParser.LT);
				this.state = 1872;
				(localctx as TypeTypeContext)._t = this.typedef(0);
				this.state = 1873;
				this.match(EParser.GT);
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 1886;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 150, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					this.state = 1884;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 149, this._ctx) ) {
					case 1:
						{
						localctx = new SetTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
						(localctx as SetTypeContext)._s = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_typedef);
						this.state = 1877;
						if (!(this.precpred(this._ctx, 6))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
						}
						this.state = 1878;
						this.match(EParser.LTGT);
						}
						break;
					case 2:
						{
						localctx = new ListTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
						(localctx as ListTypeContext)._l = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_typedef);
						this.state = 1879;
						if (!(this.precpred(this._ctx, 5))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
						}
						this.state = 1880;
						this.match(EParser.LBRAK);
						this.state = 1881;
						this.match(EParser.RBRAK);
						}
						break;
					case 3:
						{
						localctx = new DictTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
						(localctx as DictTypeContext)._d = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_typedef);
						this.state = 1882;
						if (!(this.precpred(this._ctx, 4))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
						}
						this.state = 1883;
						this.match(EParser.LTCOLONGT);
						}
						break;
					}
					}
				}
				this.state = 1888;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 150, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public primary_type(): Primary_typeContext {
		let localctx: Primary_typeContext = new Primary_typeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 202, EParser.RULE_primary_type);
		try {
			this.state = 1891;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 53:
			case 54:
			case 55:
			case 56:
			case 57:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 63:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 73:
				localctx = new NativeTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1889;
				(localctx as NativeTypeContext)._n = this.native_type();
				}
				break;
			case 172:
				localctx = new CategoryTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1890;
				(localctx as CategoryTypeContext)._c = this.category_type();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public native_type(): Native_typeContext {
		let localctx: Native_typeContext = new Native_typeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 204, EParser.RULE_native_type);
		try {
			this.state = 1911;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 53:
				localctx = new BooleanTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1893;
				this.match(EParser.BOOLEAN);
				}
				break;
			case 54:
				localctx = new CssTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1894;
				this.match(EParser.CSS);
				}
				break;
			case 55:
				localctx = new CharacterTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1895;
				this.match(EParser.CHARACTER);
				}
				break;
			case 56:
				localctx = new TextTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1896;
				this.match(EParser.TEXT);
				}
				break;
			case 68:
				localctx = new ImageTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1897;
				this.match(EParser.IMAGE);
				}
				break;
			case 57:
				localctx = new IntegerTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 1898;
				this.match(EParser.INTEGER);
				}
				break;
			case 58:
				localctx = new DecimalTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 1899;
				this.match(EParser.DECIMAL);
				}
				break;
			case 66:
				localctx = new DocumentTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 1900;
				this.match(EParser.DOCUMENT);
				}
				break;
			case 59:
				localctx = new DateTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 1901;
				this.match(EParser.DATE);
				}
				break;
			case 61:
				localctx = new DateTimeTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 1902;
				this.match(EParser.DATETIME);
				}
				break;
			case 60:
				localctx = new TimeTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 1903;
				this.match(EParser.TIME);
				}
				break;
			case 62:
				localctx = new PeriodTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 1904;
				this.match(EParser.PERIOD);
				}
				break;
			case 63:
				localctx = new VersionTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 1905;
				this.match(EParser.VERSION);
				}
				break;
			case 65:
				localctx = new CodeTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 1906;
				this.match(EParser.CODE);
				}
				break;
			case 67:
				localctx = new BlobTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 1907;
				this.match(EParser.BLOB);
				}
				break;
			case 69:
				localctx = new UUIDTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 1908;
				this.match(EParser.UUID);
				}
				break;
			case 70:
				localctx = new DbIdTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 1909;
				this.match(EParser.DBID);
				}
				break;
			case 73:
				localctx = new HtmlTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 18);
				{
				this.state = 1910;
				this.match(EParser.HTML);
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public category_type(): Category_typeContext {
		let localctx: Category_typeContext = new Category_typeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 206, EParser.RULE_category_type);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1913;
			localctx._t1 = this.match(EParser.TYPE_IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public mutable_category_type(): Mutable_category_typeContext {
		let localctx: Mutable_category_typeContext = new Mutable_category_typeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 208, EParser.RULE_mutable_category_type);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1916;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==126) {
				{
				this.state = 1915;
				this.match(EParser.MUTABLE);
				}
			}

			this.state = 1918;
			this.category_type();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public code_type(): Code_typeContext {
		let localctx: Code_typeContext = new Code_typeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 210, EParser.RULE_code_type);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1920;
			localctx._t1 = this.match(EParser.CODE);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public category_declaration(): Category_declarationContext {
		let localctx: Category_declarationContext = new Category_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 212, EParser.RULE_category_declaration);
		try {
			this.state = 1925;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 154, this._ctx) ) {
			case 1:
				localctx = new ConcreteCategoryDeclarationContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1922;
				(localctx as ConcreteCategoryDeclarationContext)._decl = this.concrete_category_declaration();
				}
				break;
			case 2:
				localctx = new NativeCategoryDeclarationContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1923;
				(localctx as NativeCategoryDeclarationContext)._decl = this.native_category_declaration();
				}
				break;
			case 3:
				localctx = new SingletonCategoryDeclarationContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1924;
				(localctx as SingletonCategoryDeclarationContext)._decl = this.singleton_category_declaration();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public widget_declaration(): Widget_declarationContext {
		let localctx: Widget_declarationContext = new Widget_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 214, EParser.RULE_widget_declaration);
		try {
			this.state = 1929;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 155, this._ctx) ) {
			case 1:
				localctx = new ConcreteWidgetDeclarationContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1927;
				(localctx as ConcreteWidgetDeclarationContext)._decl = this.concrete_widget_declaration();
				}
				break;
			case 2:
				localctx = new NativeWidgetDeclarationContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1928;
				(localctx as NativeWidgetDeclarationContext)._decl = this.native_widget_declaration();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public type_identifier_list(): Type_identifier_listContext {
		let localctx: Type_identifier_listContext = new Type_identifier_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 216, EParser.RULE_type_identifier_list);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1931;
			this.type_identifier();
			this.state = 1936;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la==17) {
				{
				{
				this.state = 1932;
				this.match(EParser.COMMA);
				this.state = 1933;
				this.type_identifier();
				}
				}
				this.state = 1938;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public method_identifier(): Method_identifierContext {
		let localctx: Method_identifierContext = new Method_identifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 218, EParser.RULE_method_identifier);
		try {
			this.state = 1941;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 90:
			case 142:
			case 173:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1939;
				this.variable_identifier();
				}
				break;
			case 172:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1940;
				this.type_identifier();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public identifier_or_keyword(): Identifier_or_keywordContext {
		let localctx: Identifier_or_keywordContext = new Identifier_or_keywordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 220, EParser.RULE_identifier_or_keyword);
		try {
			this.state = 1945;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 158, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1943;
				this.identifier();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1944;
				this.keyword();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nospace_hyphen_identifier_or_keyword(): Nospace_hyphen_identifier_or_keywordContext {
		let localctx: Nospace_hyphen_identifier_or_keywordContext = new Nospace_hyphen_identifier_or_keywordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 222, EParser.RULE_nospace_hyphen_identifier_or_keyword);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1947;
			if (!(this.wasNotWhiteSpace())) {
				throw this.createFailedPredicateException("$parser.wasNotWhiteSpace()");
			}
			this.state = 1948;
			this.match(EParser.MINUS);
			this.state = 1949;
			this.nospace_identifier_or_keyword();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nospace_identifier_or_keyword(): Nospace_identifier_or_keywordContext {
		let localctx: Nospace_identifier_or_keywordContext = new Nospace_identifier_or_keywordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 224, EParser.RULE_nospace_identifier_or_keyword);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1951;
			if (!(this.wasNotWhiteSpace())) {
				throw this.createFailedPredicateException("$parser.wasNotWhiteSpace()");
			}
			this.state = 1952;
			this.identifier_or_keyword();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public identifier(): IdentifierContext {
		let localctx: IdentifierContext = new IdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 226, EParser.RULE_identifier);
		try {
			this.state = 1957;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 90:
			case 142:
			case 173:
				localctx = new VariableIdentifierContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1954;
				this.variable_identifier();
				}
				break;
			case 172:
				localctx = new TypeIdentifierContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1955;
				this.type_identifier();
				}
				break;
			case 171:
				localctx = new SymbolIdentifierContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1956;
				this.symbol_identifier();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public member_identifier(): Member_identifierContext {
		let localctx: Member_identifierContext = new Member_identifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 228, EParser.RULE_member_identifier);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1959;
			_la = this._input.LA(1);
			if(!(_la==90 || ((((_la - 126)) & ~0x1F) == 0 && ((1 << (_la - 126)) & 16842753) != 0) || _la==173)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public variable_identifier(): Variable_identifierContext {
		let localctx: Variable_identifierContext = new Variable_identifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 230, EParser.RULE_variable_identifier);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1961;
			_la = this._input.LA(1);
			if(!(_la==90 || _la==142 || _la==173)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public attribute_identifier(): Attribute_identifierContext {
		let localctx: Attribute_identifierContext = new Attribute_identifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 232, EParser.RULE_attribute_identifier);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1963;
			_la = this._input.LA(1);
			if(!(((((_la - 142)) & ~0x1F) == 0 && ((1 << (_la - 142)) & 2147483905) != 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public type_identifier(): Type_identifierContext {
		let localctx: Type_identifierContext = new Type_identifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 234, EParser.RULE_type_identifier);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1965;
			this.match(EParser.TYPE_IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public symbol_identifier(): Symbol_identifierContext {
		let localctx: Symbol_identifierContext = new Symbol_identifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 236, EParser.RULE_symbol_identifier);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1967;
			this.match(EParser.SYMBOL_IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public argument_list(): Argument_listContext {
		let localctx: Argument_listContext = new Argument_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 238, EParser.RULE_argument_list);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1969;
			this.argument();
			this.state = 1974;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la==17) {
				{
				{
				this.state = 1970;
				this.match(EParser.COMMA);
				this.state = 1971;
				this.argument();
				}
				}
				this.state = 1976;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public argument(): ArgumentContext {
		let localctx: ArgumentContext = new ArgumentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 240, EParser.RULE_argument);
		let _la: number;
		try {
			this.state = 1982;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 162, this._ctx) ) {
			case 1:
				localctx = new CodeArgumentContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1977;
				(localctx as CodeArgumentContext)._arg = this.code_argument();
				}
				break;
			case 2:
				localctx = new OperatorArgumentContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1979;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la==126) {
					{
					this.state = 1978;
					this.match(EParser.MUTABLE);
					}
				}

				this.state = 1981;
				(localctx as OperatorArgumentContext)._arg = this.operator_argument();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public operator_argument(): Operator_argumentContext {
		let localctx: Operator_argumentContext = new Operator_argumentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 242, EParser.RULE_operator_argument);
		try {
			this.state = 1986;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 90:
			case 142:
			case 173:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1984;
				this.named_argument();
				}
				break;
			case 53:
			case 54:
			case 55:
			case 56:
			case 57:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 63:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 71:
			case 72:
			case 73:
			case 74:
			case 79:
			case 172:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1985;
				this.typed_argument();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public named_argument(): Named_argumentContext {
		let localctx: Named_argumentContext = new Named_argumentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 244, EParser.RULE_named_argument);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1988;
			this.variable_identifier();
			this.state = 1991;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==45) {
				{
				this.state = 1989;
				this.match(EParser.EQ);
				this.state = 1990;
				this.literal_expression();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public code_argument(): Code_argumentContext {
		let localctx: Code_argumentContext = new Code_argumentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 246, EParser.RULE_code_argument);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1993;
			this.code_type();
			this.state = 1994;
			localctx._name = this.variable_identifier();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public category_or_any_type(): Category_or_any_typeContext {
		let localctx: Category_or_any_typeContext = new Category_or_any_typeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 248, EParser.RULE_category_or_any_type);
		try {
			this.state = 1998;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 53:
			case 54:
			case 55:
			case 56:
			case 57:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 63:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 71:
			case 72:
			case 73:
			case 74:
			case 172:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1996;
				this.typedef(0);
				}
				break;
			case 79:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1997;
				this.any_type(0);
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public any_type(): Any_typeContext;
	public any_type(_p: number): Any_typeContext;
	// @RuleVersion(0)
	public any_type(_p?: number): Any_typeContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Any_typeContext = new Any_typeContext(this, this._ctx, _parentState);
		let _prevctx: Any_typeContext = localctx;
		let _startState: number = 250;
		this.enterRecursionRule(localctx, 250, EParser.RULE_any_type, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new AnyTypeContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 2001;
			this.match(EParser.ANY);
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 2011;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 167, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					this.state = 2009;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 166, this._ctx) ) {
					case 1:
						{
						localctx = new AnyListTypeContext(this, new Any_typeContext(this, _parentctx, _parentState));
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_any_type);
						this.state = 2003;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 2004;
						this.match(EParser.LBRAK);
						this.state = 2005;
						this.match(EParser.RBRAK);
						}
						break;
					case 2:
						{
						localctx = new AnyDictTypeContext(this, new Any_typeContext(this, _parentctx, _parentState));
						this.pushNewRecursionContext(localctx, _startState, EParser.RULE_any_type);
						this.state = 2006;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 2007;
						this.match(EParser.LCURL);
						this.state = 2008;
						this.match(EParser.RCURL);
						}
						break;
					}
					}
				}
				this.state = 2013;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 167, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public member_method_declaration_list(): Member_method_declaration_listContext {
		let localctx: Member_method_declaration_listContext = new Member_method_declaration_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 252, EParser.RULE_member_method_declaration_list);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2014;
			this.member_method_declaration();
			this.state = 2020;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 168, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 2015;
					this.lfp();
					this.state = 2016;
					this.member_method_declaration();
					}
					}
				}
				this.state = 2022;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 168, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public member_method_declaration(): Member_method_declarationContext {
		let localctx: Member_method_declarationContext = new Member_method_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 254, EParser.RULE_member_method_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2028;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la==8) {
				{
				{
				this.state = 2023;
				this.comment_statement();
				this.state = 2024;
				this.lfp();
				}
				}
				this.state = 2030;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2036;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la==176) {
				{
				{
				this.state = 2031;
				this.annotation_constructor();
				this.state = 2032;
				this.lfp();
				}
				}
				this.state = 2038;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2044;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 171, this._ctx) ) {
			case 1:
				{
				this.state = 2039;
				this.setter_method_declaration();
				}
				break;
			case 2:
				{
				this.state = 2040;
				this.getter_method_declaration();
				}
				break;
			case 3:
				{
				this.state = 2041;
				this.concrete_method_declaration();
				}
				break;
			case 4:
				{
				this.state = 2042;
				this.abstract_member_method_declaration();
				}
				break;
			case 5:
				{
				this.state = 2043;
				this.operator_method_declaration();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public native_member_method_declaration_list(): Native_member_method_declaration_listContext {
		let localctx: Native_member_method_declaration_listContext = new Native_member_method_declaration_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 256, EParser.RULE_native_member_method_declaration_list);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2046;
			this.native_member_method_declaration();
			this.state = 2052;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 172, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 2047;
					this.lfp();
					this.state = 2048;
					this.native_member_method_declaration();
					}
					}
				}
				this.state = 2054;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 172, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public native_member_method_declaration(): Native_member_method_declarationContext {
		let localctx: Native_member_method_declarationContext = new Native_member_method_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 258, EParser.RULE_native_member_method_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2060;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la==8) {
				{
				{
				this.state = 2055;
				this.comment_statement();
				this.state = 2056;
				this.lfp();
				}
				}
				this.state = 2062;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2068;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la==176) {
				{
				{
				this.state = 2063;
				this.annotation_constructor();
				this.state = 2064;
				this.lfp();
				}
				}
				this.state = 2070;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2074;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 175, this._ctx) ) {
			case 1:
				{
				this.state = 2071;
				this.native_getter_declaration();
				}
				break;
			case 2:
				{
				this.state = 2072;
				this.native_setter_declaration();
				}
				break;
			case 3:
				{
				this.state = 2073;
				this.native_method_declaration();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public native_category_binding(): Native_category_bindingContext {
		let localctx: Native_category_bindingContext = new Native_category_bindingContext(this, this._ctx, this.state);
		this.enterRule(localctx, 260, EParser.RULE_native_category_binding);
		try {
			this.state = 2086;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 9:
				localctx = new JavaCategoryBindingContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2076;
				this.match(EParser.JAVA);
				this.state = 2077;
				(localctx as JavaCategoryBindingContext)._binding = this.java_class_identifier_expression(0);
				}
				break;
			case 10:
				localctx = new CSharpCategoryBindingContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2078;
				this.match(EParser.CSHARP);
				this.state = 2079;
				(localctx as CSharpCategoryBindingContext)._binding = this.csharp_identifier_expression(0);
				}
				break;
			case 11:
				localctx = new Python2CategoryBindingContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2080;
				this.match(EParser.PYTHON2);
				this.state = 2081;
				(localctx as Python2CategoryBindingContext)._binding = this.python_category_binding();
				}
				break;
			case 12:
				localctx = new Python3CategoryBindingContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2082;
				this.match(EParser.PYTHON3);
				this.state = 2083;
				(localctx as Python3CategoryBindingContext)._binding = this.python_category_binding();
				}
				break;
			case 13:
				localctx = new JavascriptCategoryBindingContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2084;
				this.match(EParser.JAVASCRIPT);
				this.state = 2085;
				(localctx as JavascriptCategoryBindingContext)._binding = this.javascript_category_binding();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public python_category_binding(): Python_category_bindingContext {
		let localctx: Python_category_bindingContext = new Python_category_bindingContext(this, this._ctx, this.state);
		this.enterRule(localctx, 262, EParser.RULE_python_category_binding);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2088;
			this.identifier();
			this.state = 2090;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 177, this._ctx) ) {
			case 1:
				{
				this.state = 2089;
				this.python_module();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public python_module(): Python_moduleContext {
		let localctx: Python_moduleContext = new Python_moduleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 264, EParser.RULE_python_module);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2092;
			this.match(EParser.FROM);
			this.state = 2093;
			this.module_token();
			this.state = 2094;
			this.match(EParser.COLON);
			this.state = 2095;
			this.python_identifier();
			this.state = 2100;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 178, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 2096;
					this.match(EParser.DOT);
					this.state = 2097;
					this.python_identifier();
					}
					}
				}
				this.state = 2102;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 178, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public javascript_category_binding(): Javascript_category_bindingContext {
		let localctx: Javascript_category_bindingContext = new Javascript_category_bindingContext(this, this._ctx, this.state);
		this.enterRule(localctx, 266, EParser.RULE_javascript_category_binding);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2103;
			this.javascript_identifier();
			this.state = 2108;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 179, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 2104;
					this.match(EParser.DOT);
					this.state = 2105;
					this.javascript_identifier();
					}
					}
				}
				this.state = 2110;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 179, this._ctx);
			}
			this.state = 2112;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 180, this._ctx) ) {
			case 1:
				{
				this.state = 2111;
				this.javascript_module();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public javascript_module(): Javascript_moduleContext {
		let localctx: Javascript_moduleContext = new Javascript_moduleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 268, EParser.RULE_javascript_module);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2114;
			this.match(EParser.FROM);
			this.state = 2115;
			this.module_token();
			this.state = 2116;
			this.match(EParser.COLON);
			this.state = 2118;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==35) {
				{
				this.state = 2117;
				this.match(EParser.SLASH);
				}
			}

			this.state = 2120;
			this.javascript_identifier();
			this.state = 2125;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 182, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 2121;
					this.match(EParser.SLASH);
					this.state = 2122;
					this.javascript_identifier();
					}
					}
				}
				this.state = 2127;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 182, this._ctx);
			}
			this.state = 2130;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 183, this._ctx) ) {
			case 1:
				{
				this.state = 2128;
				this.match(EParser.DOT);
				this.state = 2129;
				this.javascript_identifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public variable_identifier_list(): Variable_identifier_listContext {
		let localctx: Variable_identifier_listContext = new Variable_identifier_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 270, EParser.RULE_variable_identifier_list);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2132;
			this.variable_identifier();
			this.state = 2137;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la==17) {
				{
				{
				this.state = 2133;
				this.match(EParser.COMMA);
				this.state = 2134;
				this.variable_identifier();
				}
				}
				this.state = 2139;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public attribute_identifier_list(): Attribute_identifier_listContext {
		let localctx: Attribute_identifier_listContext = new Attribute_identifier_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 272, EParser.RULE_attribute_identifier_list);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2140;
			this.attribute_identifier();
			this.state = 2145;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 185, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 2141;
					this.match(EParser.COMMA);
					this.state = 2142;
					this.attribute_identifier();
					}
					}
				}
				this.state = 2147;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 185, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public method_declaration(): Method_declarationContext {
		let localctx: Method_declarationContext = new Method_declarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 274, EParser.RULE_method_declaration);
		try {
			this.state = 2152;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 186, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2148;
				this.abstract_global_method_declaration();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2149;
				this.concrete_method_declaration();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2150;
				this.native_method_declaration();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2151;
				this.test_method_declaration();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public comment_statement(): Comment_statementContext {
		let localctx: Comment_statementContext = new Comment_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 276, EParser.RULE_comment_statement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2154;
			this.match(EParser.COMMENT);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public native_statement_list(): Native_statement_listContext {
		let localctx: Native_statement_listContext = new Native_statement_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 278, EParser.RULE_native_statement_list);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2156;
			this.native_statement();
			this.state = 2162;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 187, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 2157;
					this.lfp();
					this.state = 2158;
					this.native_statement();
					}
					}
				}
				this.state = 2164;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 187, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public native_statement(): Native_statementContext {
		let localctx: Native_statementContext = new Native_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 280, EParser.RULE_native_statement);
		try {
			this.state = 2175;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 9:
				localctx = new JavaNativeStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2165;
				this.match(EParser.JAVA);
				this.state = 2166;
				this.java_statement();
				}
				break;
			case 10:
				localctx = new CSharpNativeStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2167;
				this.match(EParser.CSHARP);
				this.state = 2168;
				this.csharp_statement();
				}
				break;
			case 11:
				localctx = new Python2NativeStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2169;
				this.match(EParser.PYTHON2);
				this.state = 2170;
				this.python_native_statement();
				}
				break;
			case 12:
				localctx = new Python3NativeStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2171;
				this.match(EParser.PYTHON3);
				this.state = 2172;
				this.python_native_statement();
				}
				break;
			case 13:
				localctx = new JavascriptNativeStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2173;
				this.match(EParser.JAVASCRIPT);
				this.state = 2174;
				this.javascript_native_statement();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public python_native_statement(): Python_native_statementContext {
		let localctx: Python_native_statementContext = new Python_native_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 282, EParser.RULE_python_native_statement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2177;
			this.python_statement();
			this.state = 2179;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==16) {
				{
				this.state = 2178;
				this.match(EParser.SEMI);
				}
			}

			this.state = 2182;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==113) {
				{
				this.state = 2181;
				this.python_module();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public javascript_native_statement(): Javascript_native_statementContext {
		let localctx: Javascript_native_statementContext = new Javascript_native_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 284, EParser.RULE_javascript_native_statement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2184;
			this.javascript_statement();
			this.state = 2186;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==16) {
				{
				this.state = 2185;
				this.match(EParser.SEMI);
				}
			}

			this.state = 2189;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==113) {
				{
				this.state = 2188;
				this.javascript_module();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public statement_list(): Statement_listContext {
		let localctx: Statement_listContext = new Statement_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 286, EParser.RULE_statement_list);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2191;
			this.statement();
			this.state = 2197;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 193, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 2192;
					this.lfp();
					this.state = 2193;
					this.statement();
					}
					}
				}
				this.state = 2199;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 193, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public assertion_list(): Assertion_listContext {
		let localctx: Assertion_listContext = new Assertion_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 288, EParser.RULE_assertion_list);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2200;
			this.assertion();
			this.state = 2206;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 194, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 2201;
					this.lfp();
					this.state = 2202;
					this.assertion();
					}
					}
				}
				this.state = 2208;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 194, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public switch_case_statement_list(): Switch_case_statement_listContext {
		let localctx: Switch_case_statement_listContext = new Switch_case_statement_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 290, EParser.RULE_switch_case_statement_list);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2209;
			this.switch_case_statement();
			this.state = 2215;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 195, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 2210;
					this.lfp();
					this.state = 2211;
					this.switch_case_statement();
					}
					}
				}
				this.state = 2217;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 195, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public catch_statement_list(): Catch_statement_listContext {
		let localctx: Catch_statement_listContext = new Catch_statement_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 292, EParser.RULE_catch_statement_list);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2218;
			this.catch_statement();
			this.state = 2224;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 196, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 2219;
					this.lfp();
					this.state = 2220;
					this.catch_statement();
					}
					}
				}
				this.state = 2226;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 196, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public literal_collection(): Literal_collectionContext {
		let localctx: Literal_collectionContext = new Literal_collectionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 294, EParser.RULE_literal_collection);
		try {
			this.state = 2241;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 197, this._ctx) ) {
			case 1:
				localctx = new LiteralRangeLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2227;
				this.match(EParser.LBRAK);
				this.state = 2228;
				(localctx as LiteralRangeLiteralContext)._low = this.atomic_literal();
				this.state = 2229;
				this.match(EParser.RANGE);
				this.state = 2230;
				(localctx as LiteralRangeLiteralContext)._high = this.atomic_literal();
				this.state = 2231;
				this.match(EParser.RBRAK);
				}
				break;
			case 2:
				localctx = new LiteralListLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2233;
				this.match(EParser.LBRAK);
				this.state = 2234;
				this.literal_list_literal();
				this.state = 2235;
				this.match(EParser.RBRAK);
				}
				break;
			case 3:
				localctx = new LiteralSetLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2237;
				this.match(EParser.LT);
				this.state = 2238;
				this.literal_list_literal();
				this.state = 2239;
				this.match(EParser.GT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public atomic_literal(): Atomic_literalContext {
		let localctx: Atomic_literalContext = new Atomic_literalContext(this, this._ctx, this.state);
		this.enterRule(localctx, 296, EParser.RULE_atomic_literal);
		let _la: number;
		try {
			this.state = 2266;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 200, this._ctx) ) {
			case 1:
				localctx = new MinIntegerLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2243;
				this.match(EParser.MIN_INTEGER);
				}
				break;
			case 2:
				localctx = new MaxIntegerLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2244;
				this.match(EParser.MAX_INTEGER);
				}
				break;
			case 3:
				localctx = new IntegerLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2246;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la==33) {
					{
					this.state = 2245;
					this.match(EParser.MINUS);
					}
				}

				this.state = 2248;
				this.match(EParser.INTEGER_LITERAL);
				}
				break;
			case 4:
				localctx = new HexadecimalLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2249;
				this.match(EParser.HEXA_LITERAL);
				}
				break;
			case 5:
				localctx = new CharacterLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2250;
				this.match(EParser.CHAR_LITERAL);
				}
				break;
			case 6:
				localctx = new DateLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 2251;
				this.match(EParser.DATE_LITERAL);
				}
				break;
			case 7:
				localctx = new TimeLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 2252;
				this.match(EParser.TIME_LITERAL);
				}
				break;
			case 8:
				localctx = new TextLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 2253;
				this.match(EParser.TEXT_LITERAL);
				}
				break;
			case 9:
				localctx = new DecimalLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 2255;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la==33) {
					{
					this.state = 2254;
					this.match(EParser.MINUS);
					}
				}

				this.state = 2257;
				this.match(EParser.DECIMAL_LITERAL);
				}
				break;
			case 10:
				localctx = new DateTimeLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 2258;
				this.match(EParser.DATETIME_LITERAL);
				}
				break;
			case 11:
				localctx = new BooleanLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 2259;
				this.match(EParser.BOOLEAN_LITERAL);
				}
				break;
			case 12:
				localctx = new PeriodLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 2260;
				this.match(EParser.PERIOD_LITERAL);
				}
				break;
			case 13:
				localctx = new VersionLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 2261;
				this.match(EParser.VERSION_LITERAL);
				}
				break;
			case 14:
				localctx = new UUIDLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 2262;
				this.match(EParser.UUID_LITERAL);
				}
				break;
			case 15:
				localctx = new SymbolLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 2263;
				this.symbol_identifier();
				}
				break;
			case 16:
				localctx = new TypeLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 2264;
				this.type_literal();
				}
				break;
			case 17:
				localctx = new NullLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 2265;
				this.null_literal();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public literal_list_literal(): Literal_list_literalContext {
		let localctx: Literal_list_literalContext = new Literal_list_literalContext(this, this._ctx, this.state);
		this.enterRule(localctx, 298, EParser.RULE_literal_list_literal);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2268;
			this.atomic_literal();
			this.state = 2273;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la==17) {
				{
				{
				this.state = 2269;
				this.match(EParser.COMMA);
				this.state = 2270;
				this.atomic_literal();
				}
				}
				this.state = 2275;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public this_expression(): This_expressionContext {
		let localctx: This_expressionContext = new This_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 300, EParser.RULE_this_expression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2276;
			_la = this._input.LA(1);
			if(!(_la==146 || _la==156)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public super_expression(): Super_expressionContext {
		let localctx: Super_expressionContext = new Super_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 302, EParser.RULE_super_expression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2281;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==172) {
				{
				this.state = 2278;
				this.category_type();
				this.state = 2279;
				this.match(EParser.DOT);
				}
			}

			this.state = 2283;
			this.match(EParser.SUPER);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public parenthesis_expression(): Parenthesis_expressionContext {
		let localctx: Parenthesis_expressionContext = new Parenthesis_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 304, EParser.RULE_parenthesis_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2285;
			this.match(EParser.LPAR);
			this.state = 2286;
			this.expression(0);
			this.state = 2287;
			this.match(EParser.RPAR);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public literal_expression(): Literal_expressionContext {
		let localctx: Literal_expressionContext = new Literal_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 306, EParser.RULE_literal_expression);
		try {
			this.state = 2291;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 33:
			case 74:
			case 130:
			case 167:
			case 168:
			case 169:
			case 170:
			case 171:
			case 177:
			case 178:
			case 179:
			case 180:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 186:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2289;
				this.atomic_literal();
				}
				break;
			case 20:
			case 22:
			case 24:
			case 41:
			case 44:
			case 126:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2290;
				this.collection_literal();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public collection_literal(): Collection_literalContext {
		let localctx: Collection_literalContext = new Collection_literalContext(this, this._ctx, this.state);
		this.enterRule(localctx, 308, EParser.RULE_collection_literal);
		try {
			this.state = 2299;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 204, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2293;
				this.range_literal();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2294;
				this.list_literal();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2295;
				this.set_literal();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2296;
				this.dict_literal();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2297;
				this.document_literal();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 2298;
				this.tuple_literal();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tuple_literal(): Tuple_literalContext {
		let localctx: Tuple_literalContext = new Tuple_literalContext(this, this._ctx, this.state);
		this.enterRule(localctx, 310, EParser.RULE_tuple_literal);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2302;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==126) {
				{
				this.state = 2301;
				this.match(EParser.MUTABLE);
				}
			}

			this.state = 2304;
			this.match(EParser.LPAR);
			this.state = 2306;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 20)) & ~0x1F) == 0 && ((1 << (_la - 20)) & 27271189) != 0) || ((((_la - 64)) & ~0x1F) == 0 && ((1 << (_la - 64)) & 67109903) != 0) || ((((_la - 105)) & ~0x1F) == 0 && ((1 << (_la - 105)) & 52461577) != 0) || ((((_la - 140)) & ~0x1F) == 0 && ((1 << (_la - 140)) & 4160819781) != 0) || ((((_la - 172)) & ~0x1F) == 0 && ((1 << (_la - 172)) & 32739) != 0)) {
				{
				this.state = 2305;
				this.expression_tuple();
				}
			}

			this.state = 2308;
			this.match(EParser.RPAR);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dict_literal(): Dict_literalContext {
		let localctx: Dict_literalContext = new Dict_literalContext(this, this._ctx, this.state);
		this.enterRule(localctx, 312, EParser.RULE_dict_literal);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2311;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==126) {
				{
				this.state = 2310;
				this.match(EParser.MUTABLE);
				}
			}

			this.state = 2321;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 208, this._ctx) ) {
			case 1:
				{
				{
				this.state = 2313;
				this.match(EParser.LT);
				this.state = 2314;
				this.dict_entry_list();
				this.state = 2315;
				this.match(EParser.GT);
				}
				}
				break;
			case 2:
				{
				this.state = 2317;
				this.match(EParser.LTCOLONGT);
				}
				break;
			case 3:
				{
				{
				this.state = 2318;
				this.match(EParser.LT);
				this.state = 2319;
				this.match(EParser.COLON);
				this.state = 2320;
				this.match(EParser.GT);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public document_literal(): Document_literalContext {
		let localctx: Document_literalContext = new Document_literalContext(this, this._ctx, this.state);
		this.enterRule(localctx, 314, EParser.RULE_document_literal);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2323;
			this.match(EParser.LCURL);
			this.state = 2325;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) == 0 && ((1 << _la) & 32256) != 0) || ((((_la - 53)) & ~0x1F) == 0 && ((1 << (_la - 53)) & 4292868093) != 0) || ((((_la - 85)) & ~0x1F) == 0 && ((1 << (_la - 85)) & 4294967295) != 0) || ((((_la - 117)) & ~0x1F) == 0 && ((1 << (_la - 117)) & 4294967285) != 0) || ((((_la - 149)) & ~0x1F) == 0 && ((1 << (_la - 149)) & 298057663) != 0)) {
				{
				this.state = 2324;
				this.doc_entry_list();
				}
			}

			this.state = 2327;
			this.match(EParser.RCURL);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public expression_tuple(): Expression_tupleContext {
		let localctx: Expression_tupleContext = new Expression_tupleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 316, EParser.RULE_expression_tuple);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2329;
			this.expression(0);
			this.state = 2330;
			this.match(EParser.COMMA);
			this.state = 2339;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 20)) & ~0x1F) == 0 && ((1 << (_la - 20)) & 27271189) != 0) || ((((_la - 64)) & ~0x1F) == 0 && ((1 << (_la - 64)) & 67109903) != 0) || ((((_la - 105)) & ~0x1F) == 0 && ((1 << (_la - 105)) & 52461577) != 0) || ((((_la - 140)) & ~0x1F) == 0 && ((1 << (_la - 140)) & 4160819781) != 0) || ((((_la - 172)) & ~0x1F) == 0 && ((1 << (_la - 172)) & 32739) != 0)) {
				{
				this.state = 2331;
				this.expression(0);
				this.state = 2336;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la==17) {
					{
					{
					this.state = 2332;
					this.match(EParser.COMMA);
					this.state = 2333;
					this.expression(0);
					}
					}
					this.state = 2338;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public doc_entry_list(): Doc_entry_listContext {
		let localctx: Doc_entry_listContext = new Doc_entry_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 318, EParser.RULE_doc_entry_list);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2341;
			this.doc_entry();
			this.state = 2346;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la==17) {
				{
				{
				this.state = 2342;
				this.match(EParser.COMMA);
				this.state = 2343;
				this.doc_entry();
				}
				}
				this.state = 2348;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public doc_entry(): Doc_entryContext {
		let localctx: Doc_entryContext = new Doc_entryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 320, EParser.RULE_doc_entry);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2349;
			localctx._key = this.doc_key();
			this.state = 2350;
			this.match(EParser.COLON);
			this.state = 2351;
			localctx._value = this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public doc_key(): Doc_keyContext {
		let localctx: Doc_keyContext = new Doc_keyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 322, EParser.RULE_doc_key);
		try {
			this.state = 2355;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 9:
			case 10:
			case 11:
			case 12:
			case 13:
			case 14:
			case 53:
			case 55:
			case 56:
			case 57:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 63:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 71:
			case 72:
			case 73:
			case 75:
			case 76:
			case 77:
			case 78:
			case 79:
			case 80:
			case 81:
			case 82:
			case 83:
			case 84:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
			case 132:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:
			case 143:
			case 144:
			case 145:
			case 146:
			case 147:
			case 148:
			case 149:
			case 150:
			case 151:
			case 152:
			case 153:
			case 154:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 165:
			case 166:
			case 171:
			case 172:
			case 173:
				localctx = new DocKeyIdentifierContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2353;
				(localctx as DocKeyIdentifierContext)._name = this.identifier_or_keyword();
				}
				break;
			case 177:
				localctx = new DocKeyTextContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2354;
				(localctx as DocKeyTextContext)._name = this.match(EParser.TEXT_LITERAL);
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dict_entry_list(): Dict_entry_listContext {
		let localctx: Dict_entry_listContext = new Dict_entry_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 324, EParser.RULE_dict_entry_list);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2357;
			this.dict_entry();
			this.state = 2362;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la==17) {
				{
				{
				this.state = 2358;
				this.match(EParser.COMMA);
				this.state = 2359;
				this.dict_entry();
				}
				}
				this.state = 2364;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dict_entry(): Dict_entryContext {
		let localctx: Dict_entryContext = new Dict_entryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 326, EParser.RULE_dict_entry);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2365;
			localctx._key = this.dict_key();
			this.state = 2366;
			this.match(EParser.COLON);
			this.state = 2367;
			localctx._value = this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dict_key(): Dict_keyContext {
		let localctx: Dict_keyContext = new Dict_keyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 328, EParser.RULE_dict_key);
		try {
			this.state = 2371;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 9:
			case 10:
			case 11:
			case 12:
			case 13:
			case 14:
			case 53:
			case 55:
			case 56:
			case 57:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 63:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 71:
			case 72:
			case 73:
			case 75:
			case 76:
			case 77:
			case 78:
			case 79:
			case 80:
			case 81:
			case 82:
			case 83:
			case 84:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
			case 132:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:
			case 143:
			case 144:
			case 145:
			case 146:
			case 147:
			case 148:
			case 149:
			case 150:
			case 151:
			case 152:
			case 153:
			case 154:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 165:
			case 166:
			case 171:
			case 172:
			case 173:
				localctx = new DictKeyIdentifierContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2369;
				(localctx as DictKeyIdentifierContext)._name = this.identifier_or_keyword();
				}
				break;
			case 177:
				localctx = new DictKeyTextContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2370;
				(localctx as DictKeyTextContext)._name = this.match(EParser.TEXT_LITERAL);
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public slice_arguments(): Slice_argumentsContext {
		let localctx: Slice_argumentsContext = new Slice_argumentsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 330, EParser.RULE_slice_arguments);
		try {
			this.state = 2382;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 216, this._ctx) ) {
			case 1:
				localctx = new SliceFirstAndLastContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2373;
				(localctx as SliceFirstAndLastContext)._first = this.expression(0);
				this.state = 2374;
				this.match(EParser.COLON);
				this.state = 2375;
				(localctx as SliceFirstAndLastContext)._last = this.expression(0);
				}
				break;
			case 2:
				localctx = new SliceFirstOnlyContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2377;
				(localctx as SliceFirstOnlyContext)._first = this.expression(0);
				this.state = 2378;
				this.match(EParser.COLON);
				}
				break;
			case 3:
				localctx = new SliceLastOnlyContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2380;
				this.match(EParser.COLON);
				this.state = 2381;
				(localctx as SliceLastOnlyContext)._last = this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public assign_variable_statement(): Assign_variable_statementContext {
		let localctx: Assign_variable_statementContext = new Assign_variable_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 332, EParser.RULE_assign_variable_statement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2384;
			this.variable_identifier();
			this.state = 2385;
			this.assign();
			this.state = 2386;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public assignable_instance(): Assignable_instanceContext;
	public assignable_instance(_p: number): Assignable_instanceContext;
	// @RuleVersion(0)
	public assignable_instance(_p?: number): Assignable_instanceContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Assignable_instanceContext = new Assignable_instanceContext(this, this._ctx, _parentState);
		let _prevctx: Assignable_instanceContext = localctx;
		let _startState: number = 334;
		this.enterRecursionRule(localctx, 334, EParser.RULE_assignable_instance, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new RootInstanceContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 2389;
			this.variable_identifier();
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 2395;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 217, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new ChildInstanceContext(this, new Assignable_instanceContext(this, _parentctx, _parentState));
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_assignable_instance);
					this.state = 2391;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 2392;
					this.child_instance();
					}
					}
				}
				this.state = 2397;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 217, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public is_expression(): Is_expressionContext {
		let localctx: Is_expressionContext = new Is_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 336, EParser.RULE_is_expression);
		try {
			this.state = 2402;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 218, this._ctx) ) {
			case 1:
				localctx = new IsATypeExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2398;
				if (!(this.willBeAOrAn())) {
					throw this.createFailedPredicateException("$parser.willBeAOrAn()");
				}
				this.state = 2399;
				this.match(EParser.VARIABLE_IDENTIFIER);
				this.state = 2400;
				this.category_or_any_type();
				}
				break;
			case 2:
				localctx = new IsOtherExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2401;
				this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public metadata(): MetadataContext {
		let localctx: MetadataContext = new MetadataContext(this, this._ctx, this.state);
		this.enterRule(localctx, 338, EParser.RULE_metadata);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2404;
			if (!(this.willBeText("metadata"))) {
				throw this.createFailedPredicateException("$parser.willBeText(\"metadata\")");
			}
			this.state = 2405;
			this.match(EParser.VARIABLE_IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public arrow_expression(): Arrow_expressionContext {
		let localctx: Arrow_expressionContext = new Arrow_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 340, EParser.RULE_arrow_expression);
		try {
			this.state = 2415;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 219, this._ctx) ) {
			case 1:
				localctx = new ArrowExpressionBodyContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2407;
				this.arrow_prefix();
				this.state = 2408;
				this.expression(0);
				}
				break;
			case 2:
				localctx = new ArrowStatementsBodyContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2410;
				this.arrow_prefix();
				this.state = 2411;
				this.match(EParser.LCURL);
				this.state = 2412;
				this.statement_list();
				this.state = 2413;
				this.match(EParser.RCURL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public arrow_prefix(): Arrow_prefixContext {
		let localctx: Arrow_prefixContext = new Arrow_prefixContext(this, this._ctx, this.state);
		this.enterRule(localctx, 342, EParser.RULE_arrow_prefix);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2417;
			this.arrow_args();
			this.state = 2418;
			localctx._s1 = this.ws_plus();
			this.state = 2419;
			this.match(EParser.EGT);
			this.state = 2420;
			localctx._s2 = this.ws_plus();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public arrow_args(): Arrow_argsContext {
		let localctx: Arrow_argsContext = new Arrow_argsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 344, EParser.RULE_arrow_args);
		let _la: number;
		try {
			this.state = 2428;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 90:
			case 142:
			case 173:
				localctx = new ArrowSingleArgContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2422;
				this.variable_identifier();
				}
				break;
			case 20:
				localctx = new ArrowListArgContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2423;
				this.match(EParser.LPAR);
				this.state = 2425;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la==90 || _la==142 || _la==173) {
					{
					this.state = 2424;
					this.variable_identifier_list();
					}
				}

				this.state = 2427;
				this.match(EParser.RPAR);
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sorted_key(): Sorted_keyContext {
		let localctx: Sorted_keyContext = new Sorted_keyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 346, EParser.RULE_sorted_key);
		try {
			this.state = 2432;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 222, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2430;
				this.instance_expression(0);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2431;
				this.arrow_expression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public read_blob_expression(): Read_blob_expressionContext {
		let localctx: Read_blob_expressionContext = new Read_blob_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 348, EParser.RULE_read_blob_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2434;
			this.match(EParser.READ);
			this.state = 2435;
			this.match(EParser.BLOB);
			this.state = 2436;
			this.match(EParser.FROM);
			this.state = 2437;
			localctx._source = this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public read_all_expression(): Read_all_expressionContext {
		let localctx: Read_all_expressionContext = new Read_all_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 350, EParser.RULE_read_all_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2439;
			this.match(EParser.READ);
			this.state = 2440;
			this.match(EParser.ALL);
			this.state = 2441;
			this.match(EParser.FROM);
			this.state = 2442;
			localctx._source = this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public read_one_expression(): Read_one_expressionContext {
		let localctx: Read_one_expressionContext = new Read_one_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 352, EParser.RULE_read_one_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2444;
			this.match(EParser.READ);
			this.state = 2445;
			this.match(EParser.ONE);
			this.state = 2446;
			this.match(EParser.FROM);
			this.state = 2447;
			localctx._source = this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public order_by_list(): Order_by_listContext {
		let localctx: Order_by_listContext = new Order_by_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 354, EParser.RULE_order_by_list);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2449;
			this.order_by();
			this.state = 2454;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 223, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 2450;
					this.match(EParser.COMMA);
					this.state = 2451;
					this.order_by();
					}
					}
				}
				this.state = 2456;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 223, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public order_by(): Order_byContext {
		let localctx: Order_byContext = new Order_byContext(this, this._ctx, this.state);
		this.enterRule(localctx, 356, EParser.RULE_order_by);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2457;
			this.variable_identifier();
			this.state = 2462;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 224, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 2458;
					this.match(EParser.DOT);
					this.state = 2459;
					this.variable_identifier();
					}
					}
				}
				this.state = 2464;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 224, this._ctx);
			}
			this.state = 2466;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 225, this._ctx) ) {
			case 1:
				{
				this.state = 2465;
				_la = this._input.LA(1);
				if(!(_la==81 || _la==97)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public operator(): OperatorContext {
		let localctx: OperatorContext = new OperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 358, EParser.RULE_operator);
		try {
			this.state = 2474;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 32:
				localctx = new OperatorPlusContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2468;
				this.match(EParser.PLUS);
				}
				break;
			case 33:
				localctx = new OperatorMinusContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2469;
				this.match(EParser.MINUS);
				}
				break;
			case 34:
				localctx = new OperatorMultiplyContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2470;
				this.multiply();
				}
				break;
			case 35:
				localctx = new OperatorDivideContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2471;
				this.divide();
				}
				break;
			case 36:
				localctx = new OperatorIDivideContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2472;
				this.idivide();
				}
				break;
			case 37:
			case 125:
				localctx = new OperatorModuloContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 2473;
				this.modulo();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public keyword(): KeywordContext {
		let localctx: KeywordContext = new KeywordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 360, EParser.RULE_keyword);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2476;
			_la = this._input.LA(1);
			if(!((((_la) & ~0x1F) == 0 && ((1 << _la) & 32256) != 0) || ((((_la - 53)) & ~0x1F) == 0 && ((1 << (_la - 53)) & 4292868093) != 0) || ((((_la - 85)) & ~0x1F) == 0 && ((1 << (_la - 85)) & 4294967295) != 0) || ((((_la - 117)) & ~0x1F) == 0 && ((1 << (_la - 117)) & 4294967285) != 0) || ((((_la - 149)) & ~0x1F) == 0 && ((1 << (_la - 149)) & 262079) != 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public new_token(): New_tokenContext {
		let localctx: New_tokenContext = new New_tokenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 362, EParser.RULE_new_token);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2478;
			localctx._i1 = this.match(EParser.VARIABLE_IDENTIFIER);
			this.state = 2479;
			if (!(this.isText(localctx._i1,"new"))) {
				throw this.createFailedPredicateException("$parser.isText($i1,\"new\")");
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public key_token(): Key_tokenContext {
		let localctx: Key_tokenContext = new Key_tokenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 364, EParser.RULE_key_token);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2481;
			localctx._i1 = this.match(EParser.VARIABLE_IDENTIFIER);
			this.state = 2482;
			if (!(this.isText(localctx._i1,"key"))) {
				throw this.createFailedPredicateException("$parser.isText($i1,\"key\")");
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public module_token(): Module_tokenContext {
		let localctx: Module_tokenContext = new Module_tokenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 366, EParser.RULE_module_token);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2484;
			localctx._i1 = this.match(EParser.VARIABLE_IDENTIFIER);
			this.state = 2485;
			if (!(this.isText(localctx._i1,"module"))) {
				throw this.createFailedPredicateException("$parser.isText($i1,\"module\")");
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public value_token(): Value_tokenContext {
		let localctx: Value_tokenContext = new Value_tokenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 368, EParser.RULE_value_token);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2487;
			localctx._i1 = this.match(EParser.VARIABLE_IDENTIFIER);
			this.state = 2488;
			if (!(this.isText(localctx._i1,"value"))) {
				throw this.createFailedPredicateException("$parser.isText($i1,\"value\")");
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public symbols_token(): Symbols_tokenContext {
		let localctx: Symbols_tokenContext = new Symbols_tokenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 370, EParser.RULE_symbols_token);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2490;
			localctx._i1 = this.match(EParser.VARIABLE_IDENTIFIER);
			this.state = 2491;
			if (!(this.isText(localctx._i1,"symbols"))) {
				throw this.createFailedPredicateException("$parser.isText($i1,\"symbols\")");
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public assign(): AssignContext {
		let localctx: AssignContext = new AssignContext(this, this._ctx, this.state);
		this.enterRule(localctx, 372, EParser.RULE_assign);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2493;
			this.match(EParser.EQ);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public multiply(): MultiplyContext {
		let localctx: MultiplyContext = new MultiplyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 374, EParser.RULE_multiply);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2495;
			this.match(EParser.STAR);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public divide(): DivideContext {
		let localctx: DivideContext = new DivideContext(this, this._ctx, this.state);
		this.enterRule(localctx, 376, EParser.RULE_divide);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2497;
			this.match(EParser.SLASH);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public idivide(): IdivideContext {
		let localctx: IdivideContext = new IdivideContext(this, this._ctx, this.state);
		this.enterRule(localctx, 378, EParser.RULE_idivide);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2499;
			this.match(EParser.BSLASH);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public modulo(): ModuloContext {
		let localctx: ModuloContext = new ModuloContext(this, this._ctx, this.state);
		this.enterRule(localctx, 380, EParser.RULE_modulo);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2501;
			_la = this._input.LA(1);
			if(!(_la==37 || _la==125)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public javascript_statement(): Javascript_statementContext {
		let localctx: Javascript_statementContext = new Javascript_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 382, EParser.RULE_javascript_statement);
		try {
			this.state = 2510;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 227, this._ctx) ) {
			case 1:
				localctx = new JavascriptReturnStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2503;
				this.match(EParser.RETURN);
				this.state = 2504;
				(localctx as JavascriptReturnStatementContext)._exp = this.javascript_expression(0);
				this.state = 2505;
				this.match(EParser.SEMI);
				}
				break;
			case 2:
				localctx = new JavascriptStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2507;
				(localctx as JavascriptStatementContext)._exp = this.javascript_expression(0);
				this.state = 2508;
				this.match(EParser.SEMI);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public javascript_expression(): Javascript_expressionContext;
	public javascript_expression(_p: number): Javascript_expressionContext;
	// @RuleVersion(0)
	public javascript_expression(_p?: number): Javascript_expressionContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Javascript_expressionContext = new Javascript_expressionContext(this, this._ctx, _parentState);
		let _prevctx: Javascript_expressionContext = localctx;
		let _startState: number = 384;
		this.enterRecursionRule(localctx, 384, EParser.RULE_javascript_expression, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new JavascriptPrimaryExpressionContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 2513;
			(localctx as JavascriptPrimaryExpressionContext)._exp = this.javascript_primary_expression();
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 2519;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 228, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new JavascriptSelectorExpressionContext(this, new Javascript_expressionContext(this, _parentctx, _parentState));
					(localctx as JavascriptSelectorExpressionContext)._parent = _prevctx;
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_javascript_expression);
					this.state = 2515;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 2516;
					(localctx as JavascriptSelectorExpressionContext)._child = this.javascript_selector_expression();
					}
					}
				}
				this.state = 2521;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 228, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public javascript_primary_expression(): Javascript_primary_expressionContext {
		let localctx: Javascript_primary_expressionContext = new Javascript_primary_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 386, EParser.RULE_javascript_primary_expression);
		try {
			this.state = 2529;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 229, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2522;
				this.javascript_this_expression();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2523;
				this.javascript_new_expression();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2524;
				this.javascript_parenthesis_expression();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2525;
				this.javascript_identifier_expression();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2526;
				this.javascript_literal_expression();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 2527;
				this.javascript_method_expression();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 2528;
				this.javascript_item_expression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public javascript_this_expression(): Javascript_this_expressionContext {
		let localctx: Javascript_this_expressionContext = new Javascript_this_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 388, EParser.RULE_javascript_this_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2531;
			this.this_expression();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public javascript_new_expression(): Javascript_new_expressionContext {
		let localctx: Javascript_new_expressionContext = new Javascript_new_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 390, EParser.RULE_javascript_new_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2533;
			this.new_token();
			this.state = 2534;
			this.javascript_method_expression();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public javascript_selector_expression(): Javascript_selector_expressionContext {
		let localctx: Javascript_selector_expressionContext = new Javascript_selector_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 392, EParser.RULE_javascript_selector_expression);
		try {
			this.state = 2541;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 230, this._ctx) ) {
			case 1:
				localctx = new JavascriptMethodExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2536;
				this.match(EParser.DOT);
				this.state = 2537;
				(localctx as JavascriptMethodExpressionContext)._method = this.javascript_method_expression();
				}
				break;
			case 2:
				localctx = new JavascriptMemberExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2538;
				this.match(EParser.DOT);
				this.state = 2539;
				(localctx as JavascriptMemberExpressionContext)._name = this.javascript_identifier();
				}
				break;
			case 3:
				localctx = new JavascriptItemExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2540;
				(localctx as JavascriptItemExpressionContext)._exp = this.javascript_item_expression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public javascript_method_expression(): Javascript_method_expressionContext {
		let localctx: Javascript_method_expressionContext = new Javascript_method_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 394, EParser.RULE_javascript_method_expression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2543;
			localctx._name = this.javascript_identifier();
			this.state = 2544;
			this.match(EParser.LPAR);
			this.state = 2546;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) == 0 && ((1 << _la) & 5275136) != 0) || ((((_la - 53)) & ~0x1F) == 0 && ((1 << (_la - 53)) & 4292868093) != 0) || ((((_la - 85)) & ~0x1F) == 0 && ((1 << (_la - 85)) & 4294967295) != 0) || ((((_la - 117)) & ~0x1F) == 0 && ((1 << (_la - 117)) & 4294967285) != 0) || ((((_la - 149)) & ~0x1F) == 0 && ((1 << (_la - 149)) & 2513436607) != 0) || _la==182) {
				{
				this.state = 2545;
				localctx._args = this.javascript_arguments(0);
				}
			}

			this.state = 2548;
			this.match(EParser.RPAR);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public javascript_arguments(): Javascript_argumentsContext;
	public javascript_arguments(_p: number): Javascript_argumentsContext;
	// @RuleVersion(0)
	public javascript_arguments(_p?: number): Javascript_argumentsContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Javascript_argumentsContext = new Javascript_argumentsContext(this, this._ctx, _parentState);
		let _prevctx: Javascript_argumentsContext = localctx;
		let _startState: number = 396;
		this.enterRecursionRule(localctx, 396, EParser.RULE_javascript_arguments, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new JavascriptArgumentListContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 2551;
			(localctx as JavascriptArgumentListContext)._item = this.javascript_expression(0);
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 2558;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 232, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new JavascriptArgumentListItemContext(this, new Javascript_argumentsContext(this, _parentctx, _parentState));
					(localctx as JavascriptArgumentListItemContext)._items = _prevctx;
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_javascript_arguments);
					this.state = 2553;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 2554;
					this.match(EParser.COMMA);
					this.state = 2555;
					(localctx as JavascriptArgumentListItemContext)._item = this.javascript_expression(0);
					}
					}
				}
				this.state = 2560;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 232, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public javascript_item_expression(): Javascript_item_expressionContext {
		let localctx: Javascript_item_expressionContext = new Javascript_item_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 398, EParser.RULE_javascript_item_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2561;
			this.match(EParser.LBRAK);
			this.state = 2562;
			localctx._exp = this.javascript_expression(0);
			this.state = 2563;
			this.match(EParser.RBRAK);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public javascript_parenthesis_expression(): Javascript_parenthesis_expressionContext {
		let localctx: Javascript_parenthesis_expressionContext = new Javascript_parenthesis_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 400, EParser.RULE_javascript_parenthesis_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2565;
			this.match(EParser.LPAR);
			this.state = 2566;
			localctx._exp = this.javascript_expression(0);
			this.state = 2567;
			this.match(EParser.RPAR);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public javascript_identifier_expression(): Javascript_identifier_expressionContext {
		let localctx: Javascript_identifier_expressionContext = new Javascript_identifier_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 402, EParser.RULE_javascript_identifier_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2569;
			localctx._name = this.javascript_identifier();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public javascript_literal_expression(): Javascript_literal_expressionContext {
		let localctx: Javascript_literal_expressionContext = new Javascript_literal_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 404, EParser.RULE_javascript_literal_expression);
		try {
			this.state = 2576;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 180:
				localctx = new JavascriptIntegerLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2571;
				(localctx as JavascriptIntegerLiteralContext)._t = this.match(EParser.INTEGER_LITERAL);
				}
				break;
			case 182:
				localctx = new JavascriptDecimalLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2572;
				(localctx as JavascriptDecimalLiteralContext)._t = this.match(EParser.DECIMAL_LITERAL);
				}
				break;
			case 177:
				localctx = new JavascriptTextLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2573;
				(localctx as JavascriptTextLiteralContext)._t = this.match(EParser.TEXT_LITERAL);
				}
				break;
			case 167:
				localctx = new JavascriptBooleanLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2574;
				(localctx as JavascriptBooleanLiteralContext)._t = this.match(EParser.BOOLEAN_LITERAL);
				}
				break;
			case 168:
				localctx = new JavascriptCharacterLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2575;
				(localctx as JavascriptCharacterLiteralContext)._t = this.match(EParser.CHAR_LITERAL);
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public javascript_identifier(): Javascript_identifierContext {
		let localctx: Javascript_identifierContext = new Javascript_identifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 406, EParser.RULE_javascript_identifier);
		try {
			this.state = 2583;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 173:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2578;
				this.match(EParser.VARIABLE_IDENTIFIER);
				}
				break;
			case 171:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2579;
				this.match(EParser.SYMBOL_IDENTIFIER);
				}
				break;
			case 175:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2580;
				this.match(EParser.DOLLAR_IDENTIFIER);
				}
				break;
			case 172:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2581;
				this.match(EParser.TYPE_IDENTIFIER);
				}
				break;
			case 9:
			case 10:
			case 11:
			case 12:
			case 13:
			case 14:
			case 53:
			case 55:
			case 56:
			case 57:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 63:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 71:
			case 72:
			case 73:
			case 75:
			case 76:
			case 77:
			case 78:
			case 79:
			case 80:
			case 81:
			case 82:
			case 83:
			case 84:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
			case 132:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:
			case 143:
			case 144:
			case 145:
			case 146:
			case 147:
			case 148:
			case 149:
			case 150:
			case 151:
			case 152:
			case 153:
			case 154:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 165:
			case 166:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2582;
				this.keyword();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public python_statement(): Python_statementContext {
		let localctx: Python_statementContext = new Python_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 408, EParser.RULE_python_statement);
		try {
			this.state = 2588;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 235, this._ctx) ) {
			case 1:
				localctx = new PythonReturnStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2585;
				this.match(EParser.RETURN);
				this.state = 2586;
				(localctx as PythonReturnStatementContext)._exp = this.python_expression(0);
				}
				break;
			case 2:
				localctx = new PythonStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2587;
				(localctx as PythonStatementContext)._exp = this.python_expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public python_expression(): Python_expressionContext;
	public python_expression(_p: number): Python_expressionContext;
	// @RuleVersion(0)
	public python_expression(_p?: number): Python_expressionContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Python_expressionContext = new Python_expressionContext(this, this._ctx, _parentState);
		let _prevctx: Python_expressionContext = localctx;
		let _startState: number = 410;
		this.enterRecursionRule(localctx, 410, EParser.RULE_python_expression, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new PythonPrimaryExpressionContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 2591;
			(localctx as PythonPrimaryExpressionContext)._exp = this.python_primary_expression();
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 2597;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 236, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new PythonSelectorExpressionContext(this, new Python_expressionContext(this, _parentctx, _parentState));
					(localctx as PythonSelectorExpressionContext)._parent = _prevctx;
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_python_expression);
					this.state = 2593;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 2594;
					(localctx as PythonSelectorExpressionContext)._child = this.python_selector_expression();
					}
					}
				}
				this.state = 2599;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 236, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public python_primary_expression(): Python_primary_expressionContext {
		let localctx: Python_primary_expressionContext = new Python_primary_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 412, EParser.RULE_python_primary_expression);
		try {
			this.state = 2605;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 237, this._ctx) ) {
			case 1:
				localctx = new PythonSelfExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2600;
				(localctx as PythonSelfExpressionContext)._exp = this.python_self_expression();
				}
				break;
			case 2:
				localctx = new PythonParenthesisExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2601;
				(localctx as PythonParenthesisExpressionContext)._exp = this.python_parenthesis_expression();
				}
				break;
			case 3:
				localctx = new PythonIdentifierExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2602;
				(localctx as PythonIdentifierExpressionContext)._exp = this.python_identifier_expression(0);
				}
				break;
			case 4:
				localctx = new PythonLiteralExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2603;
				(localctx as PythonLiteralExpressionContext)._exp = this.python_literal_expression();
				}
				break;
			case 5:
				localctx = new PythonGlobalMethodExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2604;
				(localctx as PythonGlobalMethodExpressionContext)._exp = this.python_method_expression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public python_self_expression(): Python_self_expressionContext {
		let localctx: Python_self_expressionContext = new Python_self_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 414, EParser.RULE_python_self_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2607;
			this.this_expression();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public python_selector_expression(): Python_selector_expressionContext {
		let localctx: Python_selector_expressionContext = new Python_selector_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 416, EParser.RULE_python_selector_expression);
		try {
			this.state = 2615;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 19:
				localctx = new PythonMethodExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2609;
				this.match(EParser.DOT);
				this.state = 2610;
				(localctx as PythonMethodExpressionContext)._exp = this.python_method_expression();
				}
				break;
			case 22:
				localctx = new PythonItemExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2611;
				this.match(EParser.LBRAK);
				this.state = 2612;
				(localctx as PythonItemExpressionContext)._exp = this.python_expression(0);
				this.state = 2613;
				this.match(EParser.RBRAK);
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public python_method_expression(): Python_method_expressionContext {
		let localctx: Python_method_expressionContext = new Python_method_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 418, EParser.RULE_python_method_expression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2617;
			localctx._name = this.python_identifier();
			this.state = 2618;
			this.match(EParser.LPAR);
			this.state = 2620;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) == 0 && ((1 << _la) & 1080832) != 0) || ((((_la - 53)) & ~0x1F) == 0 && ((1 << (_la - 53)) & 4292868093) != 0) || ((((_la - 85)) & ~0x1F) == 0 && ((1 << (_la - 85)) & 4294967295) != 0) || ((((_la - 117)) & ~0x1F) == 0 && ((1 << (_la - 117)) & 4294967285) != 0) || ((((_la - 149)) & ~0x1F) == 0 && ((1 << (_la - 149)) & 2513436607) != 0) || _la==182) {
				{
				this.state = 2619;
				localctx._args = this.python_argument_list();
				}
			}

			this.state = 2622;
			this.match(EParser.RPAR);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public python_argument_list(): Python_argument_listContext {
		let localctx: Python_argument_listContext = new Python_argument_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 420, EParser.RULE_python_argument_list);
		try {
			this.state = 2630;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 240, this._ctx) ) {
			case 1:
				localctx = new PythonOrdinalOnlyArgumentListContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2624;
				(localctx as PythonOrdinalOnlyArgumentListContext)._ordinal = this.python_ordinal_argument_list(0);
				}
				break;
			case 2:
				localctx = new PythonNamedOnlyArgumentListContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2625;
				(localctx as PythonNamedOnlyArgumentListContext)._named = this.python_named_argument_list(0);
				}
				break;
			case 3:
				localctx = new PythonArgumentListContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2626;
				(localctx as PythonArgumentListContext)._ordinal = this.python_ordinal_argument_list(0);
				this.state = 2627;
				this.match(EParser.COMMA);
				this.state = 2628;
				(localctx as PythonArgumentListContext)._named = this.python_named_argument_list(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public python_ordinal_argument_list(): Python_ordinal_argument_listContext;
	public python_ordinal_argument_list(_p: number): Python_ordinal_argument_listContext;
	// @RuleVersion(0)
	public python_ordinal_argument_list(_p?: number): Python_ordinal_argument_listContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Python_ordinal_argument_listContext = new Python_ordinal_argument_listContext(this, this._ctx, _parentState);
		let _prevctx: Python_ordinal_argument_listContext = localctx;
		let _startState: number = 422;
		this.enterRecursionRule(localctx, 422, EParser.RULE_python_ordinal_argument_list, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new PythonOrdinalArgumentListContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 2633;
			(localctx as PythonOrdinalArgumentListContext)._item = this.python_expression(0);
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 2640;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 241, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new PythonOrdinalArgumentListItemContext(this, new Python_ordinal_argument_listContext(this, _parentctx, _parentState));
					(localctx as PythonOrdinalArgumentListItemContext)._items = _prevctx;
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_python_ordinal_argument_list);
					this.state = 2635;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 2636;
					this.match(EParser.COMMA);
					this.state = 2637;
					(localctx as PythonOrdinalArgumentListItemContext)._item = this.python_expression(0);
					}
					}
				}
				this.state = 2642;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 241, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}

	public python_named_argument_list(): Python_named_argument_listContext;
	public python_named_argument_list(_p: number): Python_named_argument_listContext;
	// @RuleVersion(0)
	public python_named_argument_list(_p?: number): Python_named_argument_listContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Python_named_argument_listContext = new Python_named_argument_listContext(this, this._ctx, _parentState);
		let _prevctx: Python_named_argument_listContext = localctx;
		let _startState: number = 424;
		this.enterRecursionRule(localctx, 424, EParser.RULE_python_named_argument_list, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new PythonNamedArgumentListContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 2644;
			(localctx as PythonNamedArgumentListContext)._name = this.python_identifier();
			this.state = 2645;
			this.match(EParser.EQ);
			this.state = 2646;
			(localctx as PythonNamedArgumentListContext)._exp = this.python_expression(0);
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 2656;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 242, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new PythonNamedArgumentListItemContext(this, new Python_named_argument_listContext(this, _parentctx, _parentState));
					(localctx as PythonNamedArgumentListItemContext)._items = _prevctx;
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_python_named_argument_list);
					this.state = 2648;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 2649;
					this.match(EParser.COMMA);
					this.state = 2650;
					(localctx as PythonNamedArgumentListItemContext)._name = this.python_identifier();
					this.state = 2651;
					this.match(EParser.EQ);
					this.state = 2652;
					(localctx as PythonNamedArgumentListItemContext)._exp = this.python_expression(0);
					}
					}
				}
				this.state = 2658;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 242, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public python_parenthesis_expression(): Python_parenthesis_expressionContext {
		let localctx: Python_parenthesis_expressionContext = new Python_parenthesis_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 426, EParser.RULE_python_parenthesis_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2659;
			this.match(EParser.LPAR);
			this.state = 2660;
			localctx._exp = this.python_expression(0);
			this.state = 2661;
			this.match(EParser.RPAR);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public python_identifier_expression(): Python_identifier_expressionContext;
	public python_identifier_expression(_p: number): Python_identifier_expressionContext;
	// @RuleVersion(0)
	public python_identifier_expression(_p?: number): Python_identifier_expressionContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Python_identifier_expressionContext = new Python_identifier_expressionContext(this, this._ctx, _parentState);
		let _prevctx: Python_identifier_expressionContext = localctx;
		let _startState: number = 428;
		this.enterRecursionRule(localctx, 428, EParser.RULE_python_identifier_expression, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2666;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 243, this._ctx) ) {
			case 1:
				{
				localctx = new PythonPromptoIdentifierContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;

				this.state = 2664;
				this.match(EParser.DOLLAR_IDENTIFIER);
				}
				break;
			case 2:
				{
				localctx = new PythonIdentifierContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 2665;
				(localctx as PythonIdentifierContext)._name = this.python_identifier();
				}
				break;
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 2673;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 244, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new PythonChildIdentifierContext(this, new Python_identifier_expressionContext(this, _parentctx, _parentState));
					(localctx as PythonChildIdentifierContext)._parent = _prevctx;
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_python_identifier_expression);
					this.state = 2668;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 2669;
					this.match(EParser.DOT);
					this.state = 2670;
					(localctx as PythonChildIdentifierContext)._name = this.python_identifier();
					}
					}
				}
				this.state = 2675;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 244, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public python_literal_expression(): Python_literal_expressionContext {
		let localctx: Python_literal_expressionContext = new Python_literal_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 430, EParser.RULE_python_literal_expression);
		try {
			this.state = 2681;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 180:
				localctx = new PythonIntegerLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2676;
				(localctx as PythonIntegerLiteralContext)._t = this.match(EParser.INTEGER_LITERAL);
				}
				break;
			case 182:
				localctx = new PythonDecimalLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2677;
				(localctx as PythonDecimalLiteralContext)._t = this.match(EParser.DECIMAL_LITERAL);
				}
				break;
			case 177:
				localctx = new PythonTextLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2678;
				(localctx as PythonTextLiteralContext)._t = this.match(EParser.TEXT_LITERAL);
				}
				break;
			case 167:
				localctx = new PythonBooleanLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2679;
				(localctx as PythonBooleanLiteralContext)._t = this.match(EParser.BOOLEAN_LITERAL);
				}
				break;
			case 168:
				localctx = new PythonCharacterLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2680;
				(localctx as PythonCharacterLiteralContext)._t = this.match(EParser.CHAR_LITERAL);
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public python_identifier(): Python_identifierContext {
		let localctx: Python_identifierContext = new Python_identifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 432, EParser.RULE_python_identifier);
		try {
			this.state = 2688;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 173:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2683;
				this.match(EParser.VARIABLE_IDENTIFIER);
				}
				break;
			case 171:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2684;
				this.match(EParser.SYMBOL_IDENTIFIER);
				}
				break;
			case 175:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2685;
				this.match(EParser.DOLLAR_IDENTIFIER);
				}
				break;
			case 172:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2686;
				this.match(EParser.TYPE_IDENTIFIER);
				}
				break;
			case 9:
			case 10:
			case 11:
			case 12:
			case 13:
			case 14:
			case 53:
			case 55:
			case 56:
			case 57:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 63:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 71:
			case 72:
			case 73:
			case 75:
			case 76:
			case 77:
			case 78:
			case 79:
			case 80:
			case 81:
			case 82:
			case 83:
			case 84:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
			case 132:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:
			case 143:
			case 144:
			case 145:
			case 146:
			case 147:
			case 148:
			case 149:
			case 150:
			case 151:
			case 152:
			case 153:
			case 154:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 165:
			case 166:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2687;
				this.keyword();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public java_statement(): Java_statementContext {
		let localctx: Java_statementContext = new Java_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 434, EParser.RULE_java_statement);
		try {
			this.state = 2697;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 247, this._ctx) ) {
			case 1:
				localctx = new JavaReturnStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2690;
				this.match(EParser.RETURN);
				this.state = 2691;
				(localctx as JavaReturnStatementContext)._exp = this.java_expression(0);
				this.state = 2692;
				this.match(EParser.SEMI);
				}
				break;
			case 2:
				localctx = new JavaStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2694;
				(localctx as JavaStatementContext)._exp = this.java_expression(0);
				this.state = 2695;
				this.match(EParser.SEMI);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public java_expression(): Java_expressionContext;
	public java_expression(_p: number): Java_expressionContext;
	// @RuleVersion(0)
	public java_expression(_p?: number): Java_expressionContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Java_expressionContext = new Java_expressionContext(this, this._ctx, _parentState);
		let _prevctx: Java_expressionContext = localctx;
		let _startState: number = 436;
		this.enterRecursionRule(localctx, 436, EParser.RULE_java_expression, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new JavaPrimaryExpressionContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 2700;
			(localctx as JavaPrimaryExpressionContext)._exp = this.java_primary_expression();
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 2706;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 248, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new JavaSelectorExpressionContext(this, new Java_expressionContext(this, _parentctx, _parentState));
					(localctx as JavaSelectorExpressionContext)._parent = _prevctx;
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_java_expression);
					this.state = 2702;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 2703;
					(localctx as JavaSelectorExpressionContext)._child = this.java_selector_expression();
					}
					}
				}
				this.state = 2708;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 248, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public java_primary_expression(): Java_primary_expressionContext {
		let localctx: Java_primary_expressionContext = new Java_primary_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 438, EParser.RULE_java_primary_expression);
		try {
			this.state = 2714;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 249, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2709;
				this.java_this_expression();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2710;
				this.java_new_expression();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2711;
				this.java_parenthesis_expression();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2712;
				this.java_identifier_expression(0);
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2713;
				this.java_literal_expression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public java_this_expression(): Java_this_expressionContext {
		let localctx: Java_this_expressionContext = new Java_this_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 440, EParser.RULE_java_this_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2716;
			this.this_expression();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public java_new_expression(): Java_new_expressionContext {
		let localctx: Java_new_expressionContext = new Java_new_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 442, EParser.RULE_java_new_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2718;
			this.new_token();
			this.state = 2719;
			this.java_method_expression();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public java_selector_expression(): Java_selector_expressionContext {
		let localctx: Java_selector_expressionContext = new Java_selector_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 444, EParser.RULE_java_selector_expression);
		try {
			this.state = 2724;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 19:
				localctx = new JavaMethodExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2721;
				this.match(EParser.DOT);
				this.state = 2722;
				(localctx as JavaMethodExpressionContext)._exp = this.java_method_expression();
				}
				break;
			case 22:
				localctx = new JavaItemExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2723;
				(localctx as JavaItemExpressionContext)._exp = this.java_item_expression();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public java_method_expression(): Java_method_expressionContext {
		let localctx: Java_method_expressionContext = new Java_method_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 446, EParser.RULE_java_method_expression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2726;
			localctx._name = this.java_identifier();
			this.state = 2727;
			this.match(EParser.LPAR);
			this.state = 2729;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) == 0 && ((1 << _la) & 1080832) != 0) || ((((_la - 53)) & ~0x1F) == 0 && ((1 << (_la - 53)) & 4292868093) != 0) || ((((_la - 85)) & ~0x1F) == 0 && ((1 << (_la - 85)) & 4294967295) != 0) || ((((_la - 117)) & ~0x1F) == 0 && ((1 << (_la - 117)) & 4294967285) != 0) || ((((_la - 149)) & ~0x1F) == 0 && ((1 << (_la - 149)) & 2513436607) != 0) || _la==182) {
				{
				this.state = 2728;
				localctx._args = this.java_arguments(0);
				}
			}

			this.state = 2731;
			this.match(EParser.RPAR);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public java_arguments(): Java_argumentsContext;
	public java_arguments(_p: number): Java_argumentsContext;
	// @RuleVersion(0)
	public java_arguments(_p?: number): Java_argumentsContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Java_argumentsContext = new Java_argumentsContext(this, this._ctx, _parentState);
		let _prevctx: Java_argumentsContext = localctx;
		let _startState: number = 448;
		this.enterRecursionRule(localctx, 448, EParser.RULE_java_arguments, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new JavaArgumentListContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 2734;
			(localctx as JavaArgumentListContext)._item = this.java_expression(0);
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 2741;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 252, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new JavaArgumentListItemContext(this, new Java_argumentsContext(this, _parentctx, _parentState));
					(localctx as JavaArgumentListItemContext)._items = _prevctx;
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_java_arguments);
					this.state = 2736;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 2737;
					this.match(EParser.COMMA);
					this.state = 2738;
					(localctx as JavaArgumentListItemContext)._item = this.java_expression(0);
					}
					}
				}
				this.state = 2743;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 252, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public java_item_expression(): Java_item_expressionContext {
		let localctx: Java_item_expressionContext = new Java_item_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 450, EParser.RULE_java_item_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2744;
			this.match(EParser.LBRAK);
			this.state = 2745;
			localctx._exp = this.java_expression(0);
			this.state = 2746;
			this.match(EParser.RBRAK);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public java_parenthesis_expression(): Java_parenthesis_expressionContext {
		let localctx: Java_parenthesis_expressionContext = new Java_parenthesis_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 452, EParser.RULE_java_parenthesis_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2748;
			this.match(EParser.LPAR);
			this.state = 2749;
			localctx._exp = this.java_expression(0);
			this.state = 2750;
			this.match(EParser.RPAR);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public java_identifier_expression(): Java_identifier_expressionContext;
	public java_identifier_expression(_p: number): Java_identifier_expressionContext;
	// @RuleVersion(0)
	public java_identifier_expression(_p?: number): Java_identifier_expressionContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Java_identifier_expressionContext = new Java_identifier_expressionContext(this, this._ctx, _parentState);
		let _prevctx: Java_identifier_expressionContext = localctx;
		let _startState: number = 454;
		this.enterRecursionRule(localctx, 454, EParser.RULE_java_identifier_expression, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new JavaIdentifierContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 2753;
			(localctx as JavaIdentifierContext)._name = this.java_identifier();
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 2760;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 253, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new JavaChildIdentifierContext(this, new Java_identifier_expressionContext(this, _parentctx, _parentState));
					(localctx as JavaChildIdentifierContext)._parent = _prevctx;
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_java_identifier_expression);
					this.state = 2755;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 2756;
					this.match(EParser.DOT);
					this.state = 2757;
					(localctx as JavaChildIdentifierContext)._name = this.java_identifier();
					}
					}
				}
				this.state = 2762;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 253, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}

	public java_class_identifier_expression(): Java_class_identifier_expressionContext;
	public java_class_identifier_expression(_p: number): Java_class_identifier_expressionContext;
	// @RuleVersion(0)
	public java_class_identifier_expression(_p?: number): Java_class_identifier_expressionContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Java_class_identifier_expressionContext = new Java_class_identifier_expressionContext(this, this._ctx, _parentState);
		let _prevctx: Java_class_identifier_expressionContext = localctx;
		let _startState: number = 456;
		this.enterRecursionRule(localctx, 456, EParser.RULE_java_class_identifier_expression, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new JavaClassIdentifierContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 2764;
			(localctx as JavaClassIdentifierContext)._klass = this.java_identifier_expression(0);
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 2770;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 254, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new JavaChildClassIdentifierContext(this, new Java_class_identifier_expressionContext(this, _parentctx, _parentState));
					(localctx as JavaChildClassIdentifierContext)._parent = _prevctx;
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_java_class_identifier_expression);
					this.state = 2766;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 2767;
					(localctx as JavaChildClassIdentifierContext)._name = this.match(EParser.DOLLAR_IDENTIFIER);
					}
					}
				}
				this.state = 2772;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 254, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public java_literal_expression(): Java_literal_expressionContext {
		let localctx: Java_literal_expressionContext = new Java_literal_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 458, EParser.RULE_java_literal_expression);
		try {
			this.state = 2778;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 180:
				localctx = new JavaIntegerLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2773;
				(localctx as JavaIntegerLiteralContext)._t = this.match(EParser.INTEGER_LITERAL);
				}
				break;
			case 182:
				localctx = new JavaDecimalLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2774;
				(localctx as JavaDecimalLiteralContext)._t = this.match(EParser.DECIMAL_LITERAL);
				}
				break;
			case 177:
				localctx = new JavaTextLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2775;
				(localctx as JavaTextLiteralContext)._t = this.match(EParser.TEXT_LITERAL);
				}
				break;
			case 167:
				localctx = new JavaBooleanLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2776;
				(localctx as JavaBooleanLiteralContext)._t = this.match(EParser.BOOLEAN_LITERAL);
				}
				break;
			case 168:
				localctx = new JavaCharacterLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2777;
				(localctx as JavaCharacterLiteralContext)._t = this.match(EParser.CHAR_LITERAL);
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public java_identifier(): Java_identifierContext {
		let localctx: Java_identifierContext = new Java_identifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 460, EParser.RULE_java_identifier);
		try {
			this.state = 2785;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 173:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2780;
				this.match(EParser.VARIABLE_IDENTIFIER);
				}
				break;
			case 171:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2781;
				this.match(EParser.SYMBOL_IDENTIFIER);
				}
				break;
			case 175:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2782;
				this.match(EParser.DOLLAR_IDENTIFIER);
				}
				break;
			case 172:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2783;
				this.match(EParser.TYPE_IDENTIFIER);
				}
				break;
			case 9:
			case 10:
			case 11:
			case 12:
			case 13:
			case 14:
			case 53:
			case 55:
			case 56:
			case 57:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 63:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 71:
			case 72:
			case 73:
			case 75:
			case 76:
			case 77:
			case 78:
			case 79:
			case 80:
			case 81:
			case 82:
			case 83:
			case 84:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
			case 132:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:
			case 143:
			case 144:
			case 145:
			case 146:
			case 147:
			case 148:
			case 149:
			case 150:
			case 151:
			case 152:
			case 153:
			case 154:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 165:
			case 166:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2784;
				this.keyword();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public csharp_statement(): Csharp_statementContext {
		let localctx: Csharp_statementContext = new Csharp_statementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 462, EParser.RULE_csharp_statement);
		try {
			this.state = 2794;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 257, this._ctx) ) {
			case 1:
				localctx = new CSharpReturnStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2787;
				this.match(EParser.RETURN);
				this.state = 2788;
				(localctx as CSharpReturnStatementContext)._exp = this.csharp_expression(0);
				this.state = 2789;
				this.match(EParser.SEMI);
				}
				break;
			case 2:
				localctx = new CSharpStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2791;
				(localctx as CSharpStatementContext)._exp = this.csharp_expression(0);
				this.state = 2792;
				this.match(EParser.SEMI);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public csharp_expression(): Csharp_expressionContext;
	public csharp_expression(_p: number): Csharp_expressionContext;
	// @RuleVersion(0)
	public csharp_expression(_p?: number): Csharp_expressionContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Csharp_expressionContext = new Csharp_expressionContext(this, this._ctx, _parentState);
		let _prevctx: Csharp_expressionContext = localctx;
		let _startState: number = 464;
		this.enterRecursionRule(localctx, 464, EParser.RULE_csharp_expression, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new CSharpPrimaryExpressionContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 2797;
			(localctx as CSharpPrimaryExpressionContext)._exp = this.csharp_primary_expression();
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 2803;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 258, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new CSharpSelectorExpressionContext(this, new Csharp_expressionContext(this, _parentctx, _parentState));
					(localctx as CSharpSelectorExpressionContext)._parent = _prevctx;
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_csharp_expression);
					this.state = 2799;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 2800;
					(localctx as CSharpSelectorExpressionContext)._child = this.csharp_selector_expression();
					}
					}
				}
				this.state = 2805;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 258, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public csharp_primary_expression(): Csharp_primary_expressionContext {
		let localctx: Csharp_primary_expressionContext = new Csharp_primary_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 466, EParser.RULE_csharp_primary_expression);
		try {
			this.state = 2811;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 259, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2806;
				this.csharp_this_expression();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2807;
				this.csharp_new_expression();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2808;
				this.csharp_parenthesis_expression();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2809;
				this.csharp_identifier_expression(0);
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2810;
				this.csharp_literal_expression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public csharp_this_expression(): Csharp_this_expressionContext {
		let localctx: Csharp_this_expressionContext = new Csharp_this_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 468, EParser.RULE_csharp_this_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2813;
			this.this_expression();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public csharp_new_expression(): Csharp_new_expressionContext {
		let localctx: Csharp_new_expressionContext = new Csharp_new_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 470, EParser.RULE_csharp_new_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2815;
			this.new_token();
			this.state = 2816;
			this.csharp_method_expression();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public csharp_selector_expression(): Csharp_selector_expressionContext {
		let localctx: Csharp_selector_expressionContext = new Csharp_selector_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 472, EParser.RULE_csharp_selector_expression);
		try {
			this.state = 2821;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 19:
				localctx = new CSharpMethodExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2818;
				this.match(EParser.DOT);
				this.state = 2819;
				(localctx as CSharpMethodExpressionContext)._exp = this.csharp_method_expression();
				}
				break;
			case 22:
				localctx = new CSharpItemExpressionContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2820;
				(localctx as CSharpItemExpressionContext)._exp = this.csharp_item_expression();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public csharp_method_expression(): Csharp_method_expressionContext {
		let localctx: Csharp_method_expressionContext = new Csharp_method_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 474, EParser.RULE_csharp_method_expression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2823;
			localctx._name = this.csharp_identifier();
			this.state = 2824;
			this.match(EParser.LPAR);
			this.state = 2826;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) == 0 && ((1 << _la) & 1080832) != 0) || ((((_la - 53)) & ~0x1F) == 0 && ((1 << (_la - 53)) & 4292868093) != 0) || ((((_la - 85)) & ~0x1F) == 0 && ((1 << (_la - 85)) & 4294967295) != 0) || ((((_la - 117)) & ~0x1F) == 0 && ((1 << (_la - 117)) & 4294967285) != 0) || ((((_la - 149)) & ~0x1F) == 0 && ((1 << (_la - 149)) & 2513436607) != 0) || _la==182) {
				{
				this.state = 2825;
				localctx._args = this.csharp_arguments(0);
				}
			}

			this.state = 2828;
			this.match(EParser.RPAR);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public csharp_arguments(): Csharp_argumentsContext;
	public csharp_arguments(_p: number): Csharp_argumentsContext;
	// @RuleVersion(0)
	public csharp_arguments(_p?: number): Csharp_argumentsContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Csharp_argumentsContext = new Csharp_argumentsContext(this, this._ctx, _parentState);
		let _prevctx: Csharp_argumentsContext = localctx;
		let _startState: number = 476;
		this.enterRecursionRule(localctx, 476, EParser.RULE_csharp_arguments, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new CSharpArgumentListContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 2831;
			(localctx as CSharpArgumentListContext)._item = this.csharp_expression(0);
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 2838;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 262, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new CSharpArgumentListItemContext(this, new Csharp_argumentsContext(this, _parentctx, _parentState));
					(localctx as CSharpArgumentListItemContext)._items = _prevctx;
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_csharp_arguments);
					this.state = 2833;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 2834;
					this.match(EParser.COMMA);
					this.state = 2835;
					(localctx as CSharpArgumentListItemContext)._item = this.csharp_expression(0);
					}
					}
				}
				this.state = 2840;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 262, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public csharp_item_expression(): Csharp_item_expressionContext {
		let localctx: Csharp_item_expressionContext = new Csharp_item_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 478, EParser.RULE_csharp_item_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2841;
			this.match(EParser.LBRAK);
			this.state = 2842;
			localctx._exp = this.csharp_expression(0);
			this.state = 2843;
			this.match(EParser.RBRAK);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public csharp_parenthesis_expression(): Csharp_parenthesis_expressionContext {
		let localctx: Csharp_parenthesis_expressionContext = new Csharp_parenthesis_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 480, EParser.RULE_csharp_parenthesis_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2845;
			this.match(EParser.LPAR);
			this.state = 2846;
			localctx._exp = this.csharp_expression(0);
			this.state = 2847;
			this.match(EParser.RPAR);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public csharp_identifier_expression(): Csharp_identifier_expressionContext;
	public csharp_identifier_expression(_p: number): Csharp_identifier_expressionContext;
	// @RuleVersion(0)
	public csharp_identifier_expression(_p?: number): Csharp_identifier_expressionContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Csharp_identifier_expressionContext = new Csharp_identifier_expressionContext(this, this._ctx, _parentState);
		let _prevctx: Csharp_identifier_expressionContext = localctx;
		let _startState: number = 482;
		this.enterRecursionRule(localctx, 482, EParser.RULE_csharp_identifier_expression, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2852;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 263, this._ctx) ) {
			case 1:
				{
				localctx = new CSharpPromptoIdentifierContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;

				this.state = 2850;
				this.match(EParser.DOLLAR_IDENTIFIER);
				}
				break;
			case 2:
				{
				localctx = new CSharpIdentifierContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 2851;
				(localctx as CSharpIdentifierContext)._name = this.csharp_identifier();
				}
				break;
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 2859;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 264, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new CSharpChildIdentifierContext(this, new Csharp_identifier_expressionContext(this, _parentctx, _parentState));
					(localctx as CSharpChildIdentifierContext)._parent = _prevctx;
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_csharp_identifier_expression);
					this.state = 2854;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 2855;
					this.match(EParser.DOT);
					this.state = 2856;
					(localctx as CSharpChildIdentifierContext)._name = this.csharp_identifier();
					}
					}
				}
				this.state = 2861;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 264, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public csharp_literal_expression(): Csharp_literal_expressionContext {
		let localctx: Csharp_literal_expressionContext = new Csharp_literal_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 484, EParser.RULE_csharp_literal_expression);
		try {
			this.state = 2867;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 180:
				localctx = new CSharpIntegerLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2862;
				this.match(EParser.INTEGER_LITERAL);
				}
				break;
			case 182:
				localctx = new CSharpDecimalLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2863;
				this.match(EParser.DECIMAL_LITERAL);
				}
				break;
			case 177:
				localctx = new CSharpTextLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2864;
				this.match(EParser.TEXT_LITERAL);
				}
				break;
			case 167:
				localctx = new CSharpBooleanLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2865;
				this.match(EParser.BOOLEAN_LITERAL);
				}
				break;
			case 168:
				localctx = new CSharpCharacterLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2866;
				this.match(EParser.CHAR_LITERAL);
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public csharp_identifier(): Csharp_identifierContext {
		let localctx: Csharp_identifierContext = new Csharp_identifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 486, EParser.RULE_csharp_identifier);
		try {
			this.state = 2874;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 173:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2869;
				this.match(EParser.VARIABLE_IDENTIFIER);
				}
				break;
			case 171:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2870;
				this.match(EParser.SYMBOL_IDENTIFIER);
				}
				break;
			case 175:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2871;
				this.match(EParser.DOLLAR_IDENTIFIER);
				}
				break;
			case 172:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2872;
				this.match(EParser.TYPE_IDENTIFIER);
				}
				break;
			case 9:
			case 10:
			case 11:
			case 12:
			case 13:
			case 14:
			case 53:
			case 55:
			case 56:
			case 57:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 63:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 71:
			case 72:
			case 73:
			case 75:
			case 76:
			case 77:
			case 78:
			case 79:
			case 80:
			case 81:
			case 82:
			case 83:
			case 84:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
			case 132:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:
			case 143:
			case 144:
			case 145:
			case 146:
			case 147:
			case 148:
			case 149:
			case 150:
			case 151:
			case 152:
			case 153:
			case 154:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 165:
			case 166:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2873;
				this.keyword();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsx_expression(): Jsx_expressionContext {
		let localctx: Jsx_expressionContext = new Jsx_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 488, EParser.RULE_jsx_expression);
		try {
			this.state = 2878;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 267, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2876;
				this.jsx_element();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2877;
				this.jsx_fragment();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsx_element(): Jsx_elementContext {
		let localctx: Jsx_elementContext = new Jsx_elementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 490, EParser.RULE_jsx_element);
		try {
			this.state = 2887;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 269, this._ctx) ) {
			case 1:
				localctx = new JsxSelfClosingContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2880;
				(localctx as JsxSelfClosingContext)._jsx = this.jsx_self_closing();
				}
				break;
			case 2:
				localctx = new JsxElementContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2881;
				(localctx as JsxElementContext)._opening = this.jsx_opening();
				this.state = 2883;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 268, this._ctx) ) {
				case 1:
					{
					this.state = 2882;
					(localctx as JsxElementContext)._children_ = this.jsx_children();
					}
					break;
				}
				this.state = 2885;
				(localctx as JsxElementContext)._closing = this.jsx_closing();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsx_fragment(): Jsx_fragmentContext {
		let localctx: Jsx_fragmentContext = new Jsx_fragmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 492, EParser.RULE_jsx_fragment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2889;
			this.jsx_fragment_start();
			this.state = 2890;
			this.ws_plus();
			this.state = 2892;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 270, this._ctx) ) {
			case 1:
				{
				this.state = 2891;
				localctx._children_ = this.jsx_children();
				}
				break;
			}
			this.state = 2894;
			this.ws_plus();
			this.state = 2895;
			this.jsx_fragment_end();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsx_fragment_start(): Jsx_fragment_startContext {
		let localctx: Jsx_fragment_startContext = new Jsx_fragment_startContext(this, this._ctx, this.state);
		this.enterRule(localctx, 494, EParser.RULE_jsx_fragment_start);
		try {
			this.state = 2900;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 41:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2897;
				this.match(EParser.LT);
				this.state = 2898;
				this.match(EParser.GT);
				}
				break;
			case 43:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2899;
				this.match(EParser.LTGT);
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsx_fragment_end(): Jsx_fragment_endContext {
		let localctx: Jsx_fragment_endContext = new Jsx_fragment_endContext(this, this._ctx, this.state);
		this.enterRule(localctx, 496, EParser.RULE_jsx_fragment_end);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2902;
			this.match(EParser.LT);
			this.state = 2903;
			this.match(EParser.SLASH);
			this.state = 2904;
			this.match(EParser.GT);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsx_self_closing(): Jsx_self_closingContext {
		let localctx: Jsx_self_closingContext = new Jsx_self_closingContext(this, this._ctx, this.state);
		this.enterRule(localctx, 498, EParser.RULE_jsx_self_closing);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2906;
			this.match(EParser.LT);
			this.state = 2907;
			localctx._name = this.jsx_element_name();
			this.state = 2908;
			this.ws_plus();
			this.state = 2912;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) == 0 && ((1 << _la) & 32256) != 0) || ((((_la - 53)) & ~0x1F) == 0 && ((1 << (_la - 53)) & 4292868093) != 0) || ((((_la - 85)) & ~0x1F) == 0 && ((1 << (_la - 85)) & 4294967295) != 0) || ((((_la - 117)) & ~0x1F) == 0 && ((1 << (_la - 117)) & 4294967285) != 0) || ((((_la - 149)) & ~0x1F) == 0 && ((1 << (_la - 149)) & 29622207) != 0)) {
				{
				{
				this.state = 2909;
				localctx._attributes = this.jsx_attribute();
				}
				}
				this.state = 2914;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2915;
			this.match(EParser.SLASH);
			this.state = 2916;
			this.match(EParser.GT);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsx_opening(): Jsx_openingContext {
		let localctx: Jsx_openingContext = new Jsx_openingContext(this, this._ctx, this.state);
		this.enterRule(localctx, 500, EParser.RULE_jsx_opening);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2918;
			this.match(EParser.LT);
			this.state = 2919;
			localctx._name = this.jsx_element_name();
			this.state = 2920;
			this.ws_plus();
			this.state = 2924;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) == 0 && ((1 << _la) & 32256) != 0) || ((((_la - 53)) & ~0x1F) == 0 && ((1 << (_la - 53)) & 4292868093) != 0) || ((((_la - 85)) & ~0x1F) == 0 && ((1 << (_la - 85)) & 4294967295) != 0) || ((((_la - 117)) & ~0x1F) == 0 && ((1 << (_la - 117)) & 4294967285) != 0) || ((((_la - 149)) & ~0x1F) == 0 && ((1 << (_la - 149)) & 29622207) != 0)) {
				{
				{
				this.state = 2921;
				localctx._attributes = this.jsx_attribute();
				}
				}
				this.state = 2926;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2927;
			this.match(EParser.GT);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsx_closing(): Jsx_closingContext {
		let localctx: Jsx_closingContext = new Jsx_closingContext(this, this._ctx, this.state);
		this.enterRule(localctx, 502, EParser.RULE_jsx_closing);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2929;
			this.match(EParser.LT);
			this.state = 2930;
			this.match(EParser.SLASH);
			this.state = 2931;
			localctx._name = this.jsx_element_name();
			this.state = 2932;
			this.match(EParser.GT);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsx_element_name(): Jsx_element_nameContext {
		let localctx: Jsx_element_nameContext = new Jsx_element_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 504, EParser.RULE_jsx_element_name);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2934;
			this.jsx_identifier();
			this.state = 2939;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la==19) {
				{
				{
				this.state = 2935;
				this.match(EParser.DOT);
				this.state = 2936;
				this.jsx_identifier();
				}
				}
				this.state = 2941;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsx_identifier(): Jsx_identifierContext {
		let localctx: Jsx_identifierContext = new Jsx_identifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 506, EParser.RULE_jsx_identifier);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2942;
			this.identifier_or_keyword();
			this.state = 2946;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 275, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					{
					{
					this.state = 2943;
					this.nospace_hyphen_identifier_or_keyword();
					}
					}
				}
				this.state = 2948;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 275, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsx_attribute(): Jsx_attributeContext {
		let localctx: Jsx_attributeContext = new Jsx_attributeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 508, EParser.RULE_jsx_attribute);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2949;
			localctx._name = this.jsx_identifier();
			this.state = 2952;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la==45) {
				{
				this.state = 2950;
				this.match(EParser.EQ);
				this.state = 2951;
				localctx._value = this.jsx_attribute_value();
				}
			}

			this.state = 2954;
			this.ws_plus();
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsx_attribute_value(): Jsx_attribute_valueContext {
		let localctx: Jsx_attribute_valueContext = new Jsx_attribute_valueContext(this, this._ctx, this.state);
		this.enterRule(localctx, 510, EParser.RULE_jsx_attribute_value);
		let _la: number;
		try {
			this.state = 2962;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 177:
				localctx = new JsxLiteralContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2956;
				this.match(EParser.TEXT_LITERAL);
				}
				break;
			case 24:
				localctx = new JsxValueContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2957;
				this.match(EParser.LCURL);
				this.state = 2959;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 20)) & ~0x1F) == 0 && ((1 << (_la - 20)) & 27271189) != 0) || ((((_la - 64)) & ~0x1F) == 0 && ((1 << (_la - 64)) & 67109903) != 0) || ((((_la - 105)) & ~0x1F) == 0 && ((1 << (_la - 105)) & 52461577) != 0) || ((((_la - 140)) & ~0x1F) == 0 && ((1 << (_la - 140)) & 4160819781) != 0) || ((((_la - 172)) & ~0x1F) == 0 && ((1 << (_la - 172)) & 32739) != 0)) {
					{
					this.state = 2958;
					(localctx as JsxValueContext)._exp = this.expression(0);
					}
				}

				this.state = 2961;
				this.match(EParser.RCURL);
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsx_children(): Jsx_childrenContext {
		let localctx: Jsx_childrenContext = new Jsx_childrenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 512, EParser.RULE_jsx_children);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2965;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2964;
					this.jsx_child();
					}
					}
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
				}
				this.state = 2967;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 279, this._ctx);
			} while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsx_child(): Jsx_childContext {
		let localctx: Jsx_childContext = new Jsx_childContext(this, this._ctx, this.state);
		this.enterRule(localctx, 514, EParser.RULE_jsx_child);
		let _la: number;
		try {
			this.state = 2976;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 7:
			case 8:
			case 9:
			case 10:
			case 11:
			case 12:
			case 13:
			case 14:
			case 15:
			case 16:
			case 17:
			case 18:
			case 19:
			case 20:
			case 21:
			case 22:
			case 23:
			case 26:
			case 27:
			case 28:
			case 29:
			case 30:
			case 31:
			case 32:
			case 33:
			case 34:
			case 35:
			case 36:
			case 37:
			case 38:
			case 40:
			case 42:
			case 43:
			case 44:
			case 45:
			case 46:
			case 47:
			case 48:
			case 49:
			case 50:
			case 51:
			case 52:
			case 53:
			case 54:
			case 55:
			case 56:
			case 57:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 63:
			case 64:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 71:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 77:
			case 78:
			case 79:
			case 80:
			case 81:
			case 82:
			case 83:
			case 84:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 117:
			case 118:
			case 119:
			case 120:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
			case 132:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:
			case 143:
			case 144:
			case 145:
			case 146:
			case 147:
			case 148:
			case 149:
			case 150:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 171:
			case 172:
			case 173:
			case 174:
			case 175:
			case 176:
			case 177:
			case 178:
			case 179:
			case 180:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
				localctx = new JsxTextContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2969;
				(localctx as JsxTextContext)._text = this.jsx_text();
				}
				break;
			case 41:
				localctx = new JsxChildContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2970;
				(localctx as JsxChildContext)._jsx = this.jsx_element();
				}
				break;
			case 24:
				localctx = new JsxCodeContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2971;
				this.match(EParser.LCURL);
				this.state = 2973;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 20)) & ~0x1F) == 0 && ((1 << (_la - 20)) & 27271189) != 0) || ((((_la - 64)) & ~0x1F) == 0 && ((1 << (_la - 64)) & 67109903) != 0) || ((((_la - 105)) & ~0x1F) == 0 && ((1 << (_la - 105)) & 52461577) != 0) || ((((_la - 140)) & ~0x1F) == 0 && ((1 << (_la - 140)) & 4160819781) != 0) || ((((_la - 172)) & ~0x1F) == 0 && ((1 << (_la - 172)) & 32739) != 0)) {
					{
					this.state = 2972;
					(localctx as JsxCodeContext)._exp = this.expression(0);
					}
				}

				this.state = 2975;
				this.match(EParser.RCURL);
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsx_text(): Jsx_textContext {
		let localctx: Jsx_textContext = new Jsx_textContext(this, this._ctx, this.state);
		this.enterRule(localctx, 516, EParser.RULE_jsx_text);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2979;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2978;
					this.jsx_char();
					}
					}
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
				}
				this.state = 2981;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 282, this._ctx);
			} while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsx_char(): Jsx_charContext {
		let localctx: Jsx_charContext = new Jsx_charContext(this, this._ctx, this.state);
		this.enterRule(localctx, 518, EParser.RULE_jsx_char);
		let _la: number;
		try {
			this.state = 2985;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 283, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2983;
				_la = this._input.LA(1);
				if(_la<=0 || ((((_la - 24)) & ~0x1F) == 0 && ((1 << (_la - 24)) & 163843) != 0)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2984;
				this.match(EParser.JSX_TEXT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public css_expression(): Css_expressionContext {
		let localctx: Css_expressionContext = new Css_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 520, EParser.RULE_css_expression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2987;
			this.match(EParser.LCURL);
			this.state = 2989;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2988;
				localctx._field = this.css_field();
				}
				}
				this.state = 2991;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 9)) & ~0x1F) == 0 && ((1 << (_la - 9)) & 16777279) != 0) || ((((_la - 53)) & ~0x1F) == 0 && ((1 << (_la - 53)) & 4292868093) != 0) || ((((_la - 85)) & ~0x1F) == 0 && ((1 << (_la - 85)) & 4294967295) != 0) || ((((_la - 117)) & ~0x1F) == 0 && ((1 << (_la - 117)) & 4294967285) != 0) || ((((_la - 149)) & ~0x1F) == 0 && ((1 << (_la - 149)) & 29622207) != 0));
			this.state = 2993;
			this.match(EParser.RCURL);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public css_field(): Css_fieldContext {
		let localctx: Css_fieldContext = new Css_fieldContext(this, this._ctx, this.state);
		this.enterRule(localctx, 522, EParser.RULE_css_field);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2995;
			localctx._name = this.css_identifier(0);
			this.state = 2996;
			this.match(EParser.COLON);
			this.state = 2998;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2997;
				localctx._values = this.css_value();
				}
				}
				this.state = 3000;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) == 0 && ((1 << _la) & 4261347326) != 0) || ((((_la - 32)) & ~0x1F) == 0 && ((1 << (_la - 32)) & 4294967295) != 0) || ((((_la - 64)) & ~0x1F) == 0 && ((1 << (_la - 64)) & 4294967295) != 0) || ((((_la - 96)) & ~0x1F) == 0 && ((1 << (_la - 96)) & 4294967295) != 0) || ((((_la - 128)) & ~0x1F) == 0 && ((1 << (_la - 128)) & 4294967295) != 0) || ((((_la - 160)) & ~0x1F) == 0 && ((1 << (_la - 160)) & 268435455) != 0));
			this.state = 3002;
			this.match(EParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public css_identifier(): Css_identifierContext;
	public css_identifier(_p: number): Css_identifierContext;
	// @RuleVersion(0)
	public css_identifier(_p?: number): Css_identifierContext {
		if (_p == undefined) {
			_p = 0;
		}

		let _parentctx: antlr4.context.ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: Css_identifierContext = new Css_identifierContext(this, this._ctx, _parentState);
		let _prevctx: Css_identifierContext = localctx;
		let _startState: number = 524;
		this.enterRecursionRule(localctx, 524, EParser.RULE_css_identifier, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3008;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 9:
			case 10:
			case 11:
			case 12:
			case 13:
			case 14:
			case 53:
			case 55:
			case 56:
			case 57:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 63:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 71:
			case 72:
			case 73:
			case 75:
			case 76:
			case 77:
			case 78:
			case 79:
			case 80:
			case 81:
			case 82:
			case 83:
			case 84:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
			case 132:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:
			case 143:
			case 144:
			case 145:
			case 146:
			case 147:
			case 148:
			case 149:
			case 150:
			case 151:
			case 152:
			case 153:
			case 154:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 165:
			case 166:
			case 171:
			case 172:
			case 173:
				{
				this.state = 3005;
				this.identifier_or_keyword();
				}
				break;
			case 33:
				{
				this.state = 3006;
				this.match(EParser.MINUS);
				this.state = 3007;
				this.nospace_identifier_or_keyword();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 3018;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 288, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt == 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new Css_identifierContext(this, _parentctx, _parentState);
					this.pushNewRecursionContext(localctx, _startState, EParser.RULE_css_identifier);
					this.state = 3010;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 3012;
					this._errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							this.state = 3011;
							this.nospace_hyphen_identifier_or_keyword();
							}
							}
							break;
						default:
							throw new antlr4.error.NoViableAltException(this);
						}
						this.state = 3014;
						this._errHandler.sync(this);
						_alt = this._interp.adaptivePredict(this._input, 287, this._ctx);
					} while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
					}
					}
				}
				this.state = 3020;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 288, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public css_value(): Css_valueContext {
		let localctx: Css_valueContext = new Css_valueContext(this, this._ctx, this.state);
		this.enterRule(localctx, 526, EParser.RULE_css_value);
		try {
			this.state = 3026;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 24:
				localctx = new CssValueContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3021;
				this.match(EParser.LCURL);
				this.state = 3022;
				(localctx as CssValueContext)._exp = this.expression(0);
				this.state = 3023;
				this.match(EParser.RCURL);
				}
				break;
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 7:
			case 8:
			case 9:
			case 10:
			case 11:
			case 12:
			case 13:
			case 14:
			case 15:
			case 17:
			case 18:
			case 19:
			case 20:
			case 21:
			case 22:
			case 23:
			case 26:
			case 27:
			case 28:
			case 29:
			case 30:
			case 31:
			case 32:
			case 33:
			case 34:
			case 35:
			case 36:
			case 37:
			case 38:
			case 39:
			case 40:
			case 41:
			case 42:
			case 43:
			case 44:
			case 45:
			case 46:
			case 47:
			case 48:
			case 49:
			case 50:
			case 51:
			case 52:
			case 53:
			case 54:
			case 55:
			case 56:
			case 57:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 63:
			case 64:
			case 65:
			case 66:
			case 67:
			case 68:
			case 69:
			case 70:
			case 71:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 77:
			case 78:
			case 79:
			case 80:
			case 81:
			case 82:
			case 83:
			case 84:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 117:
			case 118:
			case 119:
			case 120:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
			case 132:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:
			case 143:
			case 144:
			case 145:
			case 146:
			case 147:
			case 148:
			case 149:
			case 150:
			case 151:
			case 152:
			case 153:
			case 154:
			case 155:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 162:
			case 163:
			case 164:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 171:
			case 172:
			case 173:
			case 174:
			case 175:
			case 176:
			case 177:
			case 178:
			case 179:
			case 180:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
				localctx = new CssTextContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3025;
				(localctx as CssTextContext)._text = this.css_text();
				}
				break;
			default:
				throw new antlr4.error.NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public css_text(): Css_textContext {
		let localctx: Css_textContext = new Css_textContext(this, this._ctx, this.state);
		this.enterRule(localctx, 528, EParser.RULE_css_text);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3029;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3028;
					_la = this._input.LA(1);
					if(_la<=0 || (((_la) & ~0x1F) == 0 && ((1 << _la) & 50397184) != 0)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
					}
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
				}
				this.state = 3031;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 290, this._ctx);
			} while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public sempred(localctx: antlr4.context.RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 18:
			return this.native_category_binding_list_sempred(localctx as Native_category_binding_listContext, predIndex);
		case 40:
			return this.else_if_statement_list_sempred(localctx as Else_if_statement_listContext, predIndex);
		case 46:
			return this.expression_sempred(localctx as ExpressionContext, predIndex);
		case 48:
			return this.unresolved_expression_sempred(localctx as Unresolved_expressionContext, predIndex);
		case 49:
			return this.unresolved_selector_sempred(localctx as Unresolved_selectorContext, predIndex);
		case 51:
			return this.invocation_trailer_sempred(localctx as Invocation_trailerContext, predIndex);
		case 53:
			return this.instance_expression_sempred(localctx as Instance_expressionContext, predIndex);
		case 54:
			return this.instance_selector_sempred(localctx as Instance_selectorContext, predIndex);
		case 55:
			return this.mutable_instance_expression_sempred(localctx as Mutable_instance_expressionContext, predIndex);
		case 68:
			return this.argument_assignment_list_sempred(localctx as Argument_assignment_listContext, predIndex);
		case 69:
			return this.with_argument_assignment_list_sempred(localctx as With_argument_assignment_listContext, predIndex);
		case 72:
			return this.child_instance_sempred(localctx as Child_instanceContext, predIndex);
		case 100:
			return this.typedef_sempred(localctx as TypedefContext, predIndex);
		case 111:
			return this.nospace_hyphen_identifier_or_keyword_sempred(localctx as Nospace_hyphen_identifier_or_keywordContext, predIndex);
		case 112:
			return this.nospace_identifier_or_keyword_sempred(localctx as Nospace_identifier_or_keywordContext, predIndex);
		case 125:
			return this.any_type_sempred(localctx as Any_typeContext, predIndex);
		case 167:
			return this.assignable_instance_sempred(localctx as Assignable_instanceContext, predIndex);
		case 168:
			return this.is_expression_sempred(localctx as Is_expressionContext, predIndex);
		case 169:
			return this.metadata_sempred(localctx as MetadataContext, predIndex);
		case 181:
			return this.new_token_sempred(localctx as New_tokenContext, predIndex);
		case 182:
			return this.key_token_sempred(localctx as Key_tokenContext, predIndex);
		case 183:
			return this.module_token_sempred(localctx as Module_tokenContext, predIndex);
		case 184:
			return this.value_token_sempred(localctx as Value_tokenContext, predIndex);
		case 185:
			return this.symbols_token_sempred(localctx as Symbols_tokenContext, predIndex);
		case 192:
			return this.javascript_expression_sempred(localctx as Javascript_expressionContext, predIndex);
		case 198:
			return this.javascript_arguments_sempred(localctx as Javascript_argumentsContext, predIndex);
		case 205:
			return this.python_expression_sempred(localctx as Python_expressionContext, predIndex);
		case 211:
			return this.python_ordinal_argument_list_sempred(localctx as Python_ordinal_argument_listContext, predIndex);
		case 212:
			return this.python_named_argument_list_sempred(localctx as Python_named_argument_listContext, predIndex);
		case 214:
			return this.python_identifier_expression_sempred(localctx as Python_identifier_expressionContext, predIndex);
		case 218:
			return this.java_expression_sempred(localctx as Java_expressionContext, predIndex);
		case 224:
			return this.java_arguments_sempred(localctx as Java_argumentsContext, predIndex);
		case 227:
			return this.java_identifier_expression_sempred(localctx as Java_identifier_expressionContext, predIndex);
		case 228:
			return this.java_class_identifier_expression_sempred(localctx as Java_class_identifier_expressionContext, predIndex);
		case 232:
			return this.csharp_expression_sempred(localctx as Csharp_expressionContext, predIndex);
		case 238:
			return this.csharp_arguments_sempred(localctx as Csharp_argumentsContext, predIndex);
		case 241:
			return this.csharp_identifier_expression_sempred(localctx as Csharp_identifier_expressionContext, predIndex);
		case 262:
			return this.css_identifier_sempred(localctx as Css_identifierContext, predIndex);
		}
		return true;
	}
	private native_category_binding_list_sempred(localctx: Native_category_binding_listContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private else_if_statement_list_sempred(localctx: Else_if_statement_listContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private expression_sempred(localctx: ExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 2:
			return this.precpred(this._ctx, 31);
		case 3:
			return this.precpred(this._ctx, 30);
		case 4:
			return this.precpred(this._ctx, 29);
		case 5:
			return this.precpred(this._ctx, 28);
		case 6:
			return this.precpred(this._ctx, 27);
		case 7:
			return this.precpred(this._ctx, 26);
		case 8:
			return this.precpred(this._ctx, 24);
		case 9:
			return this.precpred(this._ctx, 23);
		case 10:
			return this.precpred(this._ctx, 22);
		case 11:
			return this.precpred(this._ctx, 21);
		case 12:
			return this.precpred(this._ctx, 18);
		case 13:
			return this.precpred(this._ctx, 17);
		case 14:
			return this.precpred(this._ctx, 16);
		case 15:
			return this.precpred(this._ctx, 1);
		case 16:
			return this.precpred(this._ctx, 32);
		case 17:
			return this.precpred(this._ctx, 25);
		case 18:
			return this.precpred(this._ctx, 20);
		case 19:
			return this.precpred(this._ctx, 19);
		case 20:
			return this.precpred(this._ctx, 9);
		}
		return true;
	}
	private unresolved_expression_sempred(localctx: Unresolved_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 21:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private unresolved_selector_sempred(localctx: Unresolved_selectorContext, predIndex: number): boolean {
		switch (predIndex) {
		case 22:
			return this.wasNot(EParser.WS);
		}
		return true;
	}
	private invocation_trailer_sempred(localctx: Invocation_trailerContext, predIndex: number): boolean {
		switch (predIndex) {
		case 23:
			return this.willBeIn(EParser.LF, EParser.DEDENT);
		}
		return true;
	}
	private instance_expression_sempred(localctx: Instance_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 24:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private instance_selector_sempred(localctx: Instance_selectorContext, predIndex: number): boolean {
		switch (predIndex) {
		case 25:
			return this.wasNot(EParser.WS);
		case 26:
			return this.wasNot(EParser.WS);
		case 27:
			return this.wasNot(EParser.WS);
		}
		return true;
	}
	private mutable_instance_expression_sempred(localctx: Mutable_instance_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 28:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private argument_assignment_list_sempred(localctx: Argument_assignment_listContext, predIndex: number): boolean {
		switch (predIndex) {
		case 29:
			return this.was(EParser.WS);
		}
		return true;
	}
	private with_argument_assignment_list_sempred(localctx: With_argument_assignment_listContext, predIndex: number): boolean {
		switch (predIndex) {
		case 30:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private child_instance_sempred(localctx: Child_instanceContext, predIndex: number): boolean {
		switch (predIndex) {
		case 31:
			return this.wasNot(EParser.WS);
		case 32:
			return this.wasNot(EParser.WS);
		}
		return true;
	}
	private typedef_sempred(localctx: TypedefContext, predIndex: number): boolean {
		switch (predIndex) {
		case 33:
			return this.precpred(this._ctx, 6);
		case 34:
			return this.precpred(this._ctx, 5);
		case 35:
			return this.precpred(this._ctx, 4);
		}
		return true;
	}
	private nospace_hyphen_identifier_or_keyword_sempred(localctx: Nospace_hyphen_identifier_or_keywordContext, predIndex: number): boolean {
		switch (predIndex) {
		case 36:
			return this.wasNotWhiteSpace();
		}
		return true;
	}
	private nospace_identifier_or_keyword_sempred(localctx: Nospace_identifier_or_keywordContext, predIndex: number): boolean {
		switch (predIndex) {
		case 37:
			return this.wasNotWhiteSpace();
		}
		return true;
	}
	private any_type_sempred(localctx: Any_typeContext, predIndex: number): boolean {
		switch (predIndex) {
		case 38:
			return this.precpred(this._ctx, 2);
		case 39:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private assignable_instance_sempred(localctx: Assignable_instanceContext, predIndex: number): boolean {
		switch (predIndex) {
		case 40:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private is_expression_sempred(localctx: Is_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 41:
			return this.willBeAOrAn();
		}
		return true;
	}
	private metadata_sempred(localctx: MetadataContext, predIndex: number): boolean {
		switch (predIndex) {
		case 42:
			return this.willBeText("metadata");
		}
		return true;
	}
	private new_token_sempred(localctx: New_tokenContext, predIndex: number): boolean {
		switch (predIndex) {
		case 43:
			return this.isText(localctx._i1,"new");
		}
		return true;
	}
	private key_token_sempred(localctx: Key_tokenContext, predIndex: number): boolean {
		switch (predIndex) {
		case 44:
			return this.isText(localctx._i1,"key");
		}
		return true;
	}
	private module_token_sempred(localctx: Module_tokenContext, predIndex: number): boolean {
		switch (predIndex) {
		case 45:
			return this.isText(localctx._i1,"module");
		}
		return true;
	}
	private value_token_sempred(localctx: Value_tokenContext, predIndex: number): boolean {
		switch (predIndex) {
		case 46:
			return this.isText(localctx._i1,"value");
		}
		return true;
	}
	private symbols_token_sempred(localctx: Symbols_tokenContext, predIndex: number): boolean {
		switch (predIndex) {
		case 47:
			return this.isText(localctx._i1,"symbols");
		}
		return true;
	}
	private javascript_expression_sempred(localctx: Javascript_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 48:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private javascript_arguments_sempred(localctx: Javascript_argumentsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 49:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private python_expression_sempred(localctx: Python_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 50:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private python_ordinal_argument_list_sempred(localctx: Python_ordinal_argument_listContext, predIndex: number): boolean {
		switch (predIndex) {
		case 51:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private python_named_argument_list_sempred(localctx: Python_named_argument_listContext, predIndex: number): boolean {
		switch (predIndex) {
		case 52:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private python_identifier_expression_sempred(localctx: Python_identifier_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 53:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private java_expression_sempred(localctx: Java_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 54:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private java_arguments_sempred(localctx: Java_argumentsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 55:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private java_identifier_expression_sempred(localctx: Java_identifier_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 56:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private java_class_identifier_expression_sempred(localctx: Java_class_identifier_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 57:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private csharp_expression_sempred(localctx: Csharp_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 58:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private csharp_arguments_sempred(localctx: Csharp_argumentsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 59:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private csharp_identifier_expression_sempred(localctx: Csharp_identifier_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 60:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private css_identifier_sempred(localctx: Css_identifierContext, predIndex: number): boolean {
		switch (predIndex) {
		case 61:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}

	public static readonly _serializedATN: number[] = [4,1,187,3034,2,0,7,0,
	2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,
	2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,
	17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,
	7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,
	31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,
	2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
	46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,
	7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,
	60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,
	2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,
	75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,
	7,82,2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,
	89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,
	2,97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,
	7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
	7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,
	7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,
	7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,
	7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,
	7,133,2,134,7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,
	7,139,2,140,7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,
	7,145,2,146,7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,
	7,151,2,152,7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,
	7,157,2,158,7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,
	7,163,2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,
	7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
	7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,
	7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,
	7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,
	7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,
	7,199,2,200,7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,
	7,205,2,206,7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,
	7,211,2,212,7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,
	7,217,2,218,7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,
	7,223,2,224,7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,
	7,229,2,230,7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,
	7,235,2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
	7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,
	7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,
	7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,
	7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,1,0,1,
	0,1,0,1,0,1,0,1,0,3,0,537,8,0,1,0,1,0,1,0,1,0,1,0,3,0,544,8,0,1,0,1,0,1,
	0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,
	2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,574,8,3,1,4,1,4,1,4,1,4,3,4,580,8,4,1,
	4,1,4,1,4,3,4,585,8,4,1,4,1,4,1,4,1,4,3,4,591,8,4,3,4,593,8,4,1,4,3,4,596,
	8,4,1,5,1,5,1,5,1,5,1,5,3,5,603,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,612,
	8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
	1,6,1,6,1,7,1,7,1,7,1,7,3,7,637,8,7,1,7,1,7,3,7,641,8,7,1,7,1,7,1,7,1,7,
	1,7,1,7,1,7,1,7,1,7,3,7,652,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,661,8,7,
	1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,676,8,8,1,8,1,8,
	1,8,1,8,1,8,1,8,1,8,3,8,685,8,8,1,9,1,9,1,9,1,9,1,9,3,9,692,8,9,1,10,1,
	10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,702,8,10,1,10,1,10,1,10,1,10,1,10,
	1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,
	12,3,12,724,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
	1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,3,14,747,8,14,1,14,1,
	14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,760,8,15,1,15,1,15,
	1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,771,8,15,1,15,1,15,1,15,1,15,1,
	15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,785,8,15,1,16,1,16,1,16,1,16,
	3,16,791,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,802,8,16,
	1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,816,8,
	16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
	1,18,1,18,5,18,834,8,18,10,18,12,18,837,9,18,1,19,1,19,1,19,1,19,1,19,1,
	19,1,19,1,19,3,19,847,8,19,3,19,849,8,19,1,20,1,20,1,20,1,20,1,20,1,20,
	1,20,3,20,858,8,20,1,20,1,20,3,20,862,8,20,1,20,3,20,865,8,20,1,21,1,21,
	1,21,1,21,1,21,1,21,1,21,3,21,874,8,21,1,21,1,21,3,21,878,8,21,1,21,3,21,
	881,8,21,1,22,1,22,1,22,1,22,1,22,1,22,3,22,889,8,22,1,22,1,22,3,22,893,
	8,22,1,22,3,22,896,8,22,1,22,1,22,1,22,1,22,1,22,3,22,903,8,22,1,22,1,22,
	1,23,1,23,1,23,1,23,3,23,911,8,23,1,23,1,23,1,23,3,23,916,8,23,1,23,1,23,
	3,23,920,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,
	24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,
	947,8,24,1,25,1,25,1,26,1,26,1,26,3,26,954,8,26,1,27,1,27,1,27,3,27,959,
	8,27,1,27,1,27,3,27,963,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
	28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,986,
	8,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,3,30,995,8,30,1,30,1,30,3,30,999,
	8,30,1,30,1,30,1,30,1,30,1,30,3,30,1006,8,30,1,30,1,30,1,30,1,30,1,30,1,
	30,3,30,1014,8,30,1,31,1,31,3,31,1018,8,31,1,31,3,31,1021,8,31,1,31,1,31,
	1,31,3,31,1026,8,31,1,31,1,31,1,31,1,31,1,31,3,31,1033,8,31,1,31,3,31,1036,
	8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,
	33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
	1,34,1,34,1,34,3,34,1069,8,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,
	35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1088,8,35,1,36,1,36,1,36,
	1,36,1,36,3,36,1095,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,
	37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,
	1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1129,8,39,1,39,1,39,1,39,1,
	39,1,39,1,39,1,39,3,39,1138,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
	1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,1159,8,40,10,
	40,12,40,1162,9,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
	42,1,42,1,42,3,42,1177,8,42,1,42,1,42,1,42,3,42,1182,8,42,1,42,1,42,1,42,
	1,42,1,42,1,42,3,42,1190,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1199,
	8,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
	43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,1222,8,43,1,44,1,44,1,45,1,45,
	3,45,1228,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1238,8,46,1,
	46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
	1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1265,8,46,1,46,1,
	46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
	1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1294,8,46,1,
	46,1,46,1,46,1,46,3,46,1300,8,46,1,46,1,46,1,46,1,46,3,46,1306,8,46,1,46,
	1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
	46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1332,8,46,1,46,1,46,1,46,
	1,46,3,46,1338,8,46,1,46,1,46,1,46,3,46,1343,8,46,1,46,1,46,1,46,1,46,1,
	46,3,46,1350,8,46,1,46,1,46,1,46,1,46,1,46,5,46,1357,8,46,10,46,12,46,1360,
	9,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1369,8,47,1,48,1,48,1,48,1,
	48,1,48,5,48,1376,8,48,10,48,12,48,1379,9,48,1,49,1,49,1,49,1,49,1,50,1,
	50,1,50,1,50,1,51,1,51,1,52,1,52,1,52,1,52,1,52,3,52,1396,8,52,1,53,1,53,
	1,53,1,53,1,53,5,53,1403,8,53,10,53,12,53,1406,9,53,1,54,1,54,1,54,1,54,
	1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1421,8,54,1,55,1,55,1,
	55,1,55,1,55,1,55,5,55,1429,8,55,10,55,12,55,1432,9,55,1,56,1,56,1,56,3,
	56,1437,8,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,3,58,1447,8,58,1,58,
	1,58,1,58,3,58,1452,8,58,3,58,1454,8,58,1,58,1,58,1,58,1,58,3,58,1460,8,
	58,3,58,1462,8,58,3,58,1464,8,58,1,59,1,59,1,59,1,59,1,59,3,59,1471,8,59,
	1,60,1,60,1,60,1,60,1,61,1,61,1,61,3,61,1480,8,61,1,61,1,61,1,61,1,62,1,
	62,1,62,3,62,1488,8,62,1,62,1,62,1,62,1,62,3,62,1494,8,62,1,62,1,62,1,62,
	3,62,1499,8,62,1,62,1,62,3,62,1503,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
	62,1,62,1,62,3,62,1514,8,62,1,62,1,62,3,62,1518,8,62,1,62,1,62,3,62,1522,
	8,62,1,62,1,62,1,62,3,62,1527,8,62,3,62,1529,8,62,1,63,1,63,1,63,3,63,1534,
	8,63,1,63,1,63,1,63,1,63,3,63,1540,8,63,1,63,1,63,1,63,1,63,1,63,3,63,1547,
	8,63,1,63,1,63,3,63,1551,8,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
	63,3,63,1562,8,63,1,63,1,63,3,63,1566,8,63,1,63,1,63,3,63,1570,8,63,1,63,
	1,63,1,63,3,63,1575,8,63,1,63,3,63,1578,8,63,1,64,1,64,1,64,5,64,1583,8,
	64,10,64,12,64,1586,9,64,1,64,1,64,3,64,1590,8,64,1,65,1,65,1,65,1,65,1,
	65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,3,67,1608,8,67,
	1,67,1,67,1,67,1,67,1,67,1,67,3,67,1616,8,67,1,68,1,68,1,68,1,68,1,68,3,
	68,1623,8,68,3,68,1625,8,68,1,68,1,68,1,68,3,68,1630,8,68,3,68,1632,8,68,
	1,69,1,69,1,69,1,69,1,69,1,69,1,69,5,69,1641,8,69,10,69,12,69,1644,9,69,
	1,70,1,70,1,70,3,70,1649,8,70,1,70,1,70,1,71,1,71,1,71,1,71,1,72,1,72,1,
	72,1,72,1,72,1,72,1,72,1,72,3,72,1665,8,72,1,73,1,73,1,73,1,73,1,74,5,74,
	1672,8,74,10,74,12,74,1675,9,74,1,75,4,75,1678,8,75,11,75,12,75,1679,1,
	76,5,76,1683,8,76,10,76,12,76,1686,9,76,1,77,4,77,1689,8,77,11,77,12,77,
	1690,1,77,1,77,1,78,5,78,1696,8,78,10,78,12,78,1699,9,78,1,78,1,78,1,79,
	1,79,1,79,1,79,1,80,1,80,1,81,1,81,1,81,3,81,1712,8,81,1,82,1,82,3,82,1716,
	8,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,5,83,1725,8,83,10,83,12,83,1728,
	9,83,1,84,1,84,1,84,5,84,1733,8,84,10,84,12,84,1736,9,84,1,84,1,84,1,84,
	5,84,1741,8,84,10,84,12,84,1744,9,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,
	1752,8,84,1,85,1,85,1,85,1,85,1,85,1,85,5,85,1760,8,85,10,85,12,85,1763,
	9,85,3,85,1765,8,85,1,85,1,85,3,85,1769,8,85,1,86,1,86,1,87,1,87,1,87,1,
	87,1,88,1,88,1,89,1,89,3,89,1781,8,89,1,90,1,90,1,91,1,91,3,91,1787,8,91,
	1,92,1,92,1,92,1,92,5,92,1793,8,92,10,92,12,92,1796,9,92,1,93,1,93,1,93,
	1,93,5,93,1802,8,93,10,93,12,93,1805,9,93,1,94,1,94,1,94,5,94,1810,8,94,
	10,94,12,94,1813,9,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,
	3,95,1825,8,95,1,96,3,96,1828,8,96,1,96,1,96,3,96,1832,8,96,1,96,1,96,1,
	97,3,97,1837,8,97,1,97,1,97,3,97,1841,8,97,1,97,1,97,1,98,1,98,1,98,5,98,
	1848,8,98,10,98,12,98,1851,9,98,1,99,1,99,1,99,1,99,1,99,1,99,1,100,1,100,
	1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
	1,100,1,100,1,100,3,100,1876,8,100,1,100,1,100,1,100,1,100,1,100,1,100,
	1,100,5,100,1885,8,100,10,100,12,100,1888,9,100,1,101,1,101,3,101,1892,
	8,101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
	1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1912,8,102,1,103,1,103,
	1,104,3,104,1917,8,104,1,104,1,104,1,105,1,105,1,106,1,106,1,106,3,106,
	1926,8,106,1,107,1,107,3,107,1930,8,107,1,108,1,108,1,108,5,108,1935,8,
	108,10,108,12,108,1938,9,108,1,109,1,109,3,109,1942,8,109,1,110,1,110,3,
	110,1946,8,110,1,111,1,111,1,111,1,111,1,112,1,112,1,112,1,113,1,113,1,
	113,3,113,1958,8,113,1,114,1,114,1,115,1,115,1,116,1,116,1,117,1,117,1,
	118,1,118,1,119,1,119,1,119,5,119,1973,8,119,10,119,12,119,1976,9,119,1,
	120,1,120,3,120,1980,8,120,1,120,3,120,1983,8,120,1,121,1,121,3,121,1987,
	8,121,1,122,1,122,1,122,3,122,1992,8,122,1,123,1,123,1,123,1,124,1,124,
	3,124,1999,8,124,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,
	5,125,2010,8,125,10,125,12,125,2013,9,125,1,126,1,126,1,126,1,126,5,126,
	2019,8,126,10,126,12,126,2022,9,126,1,127,1,127,1,127,5,127,2027,8,127,
	10,127,12,127,2030,9,127,1,127,1,127,1,127,5,127,2035,8,127,10,127,12,127,
	2038,9,127,1,127,1,127,1,127,1,127,1,127,3,127,2045,8,127,1,128,1,128,1,
	128,1,128,5,128,2051,8,128,10,128,12,128,2054,9,128,1,129,1,129,1,129,5,
	129,2059,8,129,10,129,12,129,2062,9,129,1,129,1,129,1,129,5,129,2067,8,
	129,10,129,12,129,2070,9,129,1,129,1,129,1,129,3,129,2075,8,129,1,130,1,
	130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,3,130,2087,8,130,1,
	131,1,131,3,131,2091,8,131,1,132,1,132,1,132,1,132,1,132,1,132,5,132,2099,
	8,132,10,132,12,132,2102,9,132,1,133,1,133,1,133,5,133,2107,8,133,10,133,
	12,133,2110,9,133,1,133,3,133,2113,8,133,1,134,1,134,1,134,1,134,3,134,
	2119,8,134,1,134,1,134,1,134,5,134,2124,8,134,10,134,12,134,2127,9,134,
	1,134,1,134,3,134,2131,8,134,1,135,1,135,1,135,5,135,2136,8,135,10,135,
	12,135,2139,9,135,1,136,1,136,1,136,5,136,2144,8,136,10,136,12,136,2147,
	9,136,1,137,1,137,1,137,1,137,3,137,2153,8,137,1,138,1,138,1,139,1,139,
	1,139,1,139,5,139,2161,8,139,10,139,12,139,2164,9,139,1,140,1,140,1,140,
	1,140,1,140,1,140,1,140,1,140,1,140,1,140,3,140,2176,8,140,1,141,1,141,
	3,141,2180,8,141,1,141,3,141,2183,8,141,1,142,1,142,3,142,2187,8,142,1,
	142,3,142,2190,8,142,1,143,1,143,1,143,1,143,5,143,2196,8,143,10,143,12,
	143,2199,9,143,1,144,1,144,1,144,1,144,5,144,2205,8,144,10,144,12,144,2208,
	9,144,1,145,1,145,1,145,1,145,5,145,2214,8,145,10,145,12,145,2217,9,145,
	1,146,1,146,1,146,1,146,5,146,2223,8,146,10,146,12,146,2226,9,146,1,147,
	1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
	1,147,3,147,2242,8,147,1,148,1,148,1,148,3,148,2247,8,148,1,148,1,148,1,
	148,1,148,1,148,1,148,1,148,3,148,2256,8,148,1,148,1,148,1,148,1,148,1,
	148,1,148,1,148,1,148,1,148,3,148,2267,8,148,1,149,1,149,1,149,5,149,2272,
	8,149,10,149,12,149,2275,9,149,1,150,1,150,1,151,1,151,1,151,3,151,2282,
	8,151,1,151,1,151,1,152,1,152,1,152,1,152,1,153,1,153,3,153,2292,8,153,
	1,154,1,154,1,154,1,154,1,154,1,154,3,154,2300,8,154,1,155,3,155,2303,8,
	155,1,155,1,155,3,155,2307,8,155,1,155,1,155,1,156,3,156,2312,8,156,1,156,
	1,156,1,156,1,156,1,156,1,156,1,156,1,156,3,156,2322,8,156,1,157,1,157,
	3,157,2326,8,157,1,157,1,157,1,158,1,158,1,158,1,158,1,158,5,158,2335,8,
	158,10,158,12,158,2338,9,158,3,158,2340,8,158,1,159,1,159,1,159,5,159,2345,
	8,159,10,159,12,159,2348,9,159,1,160,1,160,1,160,1,160,1,161,1,161,3,161,
	2356,8,161,1,162,1,162,1,162,5,162,2361,8,162,10,162,12,162,2364,9,162,
	1,163,1,163,1,163,1,163,1,164,1,164,3,164,2372,8,164,1,165,1,165,1,165,
	1,165,1,165,1,165,1,165,1,165,1,165,3,165,2383,8,165,1,166,1,166,1,166,
	1,166,1,167,1,167,1,167,1,167,1,167,5,167,2394,8,167,10,167,12,167,2397,
	9,167,1,168,1,168,1,168,1,168,3,168,2403,8,168,1,169,1,169,1,169,1,170,
	1,170,1,170,1,170,1,170,1,170,1,170,1,170,3,170,2416,8,170,1,171,1,171,
	1,171,1,171,1,171,1,172,1,172,1,172,3,172,2426,8,172,1,172,3,172,2429,8,
	172,1,173,1,173,3,173,2433,8,173,1,174,1,174,1,174,1,174,1,174,1,175,1,
	175,1,175,1,175,1,175,1,176,1,176,1,176,1,176,1,176,1,177,1,177,1,177,5,
	177,2453,8,177,10,177,12,177,2456,9,177,1,178,1,178,1,178,5,178,2461,8,
	178,10,178,12,178,2464,9,178,1,178,3,178,2467,8,178,1,179,1,179,1,179,1,
	179,1,179,1,179,3,179,2475,8,179,1,180,1,180,1,181,1,181,1,181,1,182,1,
	182,1,182,1,183,1,183,1,183,1,184,1,184,1,184,1,185,1,185,1,185,1,186,1,
	186,1,187,1,187,1,188,1,188,1,189,1,189,1,190,1,190,1,191,1,191,1,191,1,
	191,1,191,1,191,1,191,3,191,2511,8,191,1,192,1,192,1,192,1,192,1,192,5,
	192,2518,8,192,10,192,12,192,2521,9,192,1,193,1,193,1,193,1,193,1,193,1,
	193,1,193,3,193,2530,8,193,1,194,1,194,1,195,1,195,1,195,1,196,1,196,1,
	196,1,196,1,196,3,196,2542,8,196,1,197,1,197,1,197,3,197,2547,8,197,1,197,
	1,197,1,198,1,198,1,198,1,198,1,198,1,198,5,198,2557,8,198,10,198,12,198,
	2560,9,198,1,199,1,199,1,199,1,199,1,200,1,200,1,200,1,200,1,201,1,201,
	1,202,1,202,1,202,1,202,1,202,3,202,2577,8,202,1,203,1,203,1,203,1,203,
	1,203,3,203,2584,8,203,1,204,1,204,1,204,3,204,2589,8,204,1,205,1,205,1,
	205,1,205,1,205,5,205,2596,8,205,10,205,12,205,2599,9,205,1,206,1,206,1,
	206,1,206,1,206,3,206,2606,8,206,1,207,1,207,1,208,1,208,1,208,1,208,1,
	208,1,208,3,208,2616,8,208,1,209,1,209,1,209,3,209,2621,8,209,1,209,1,209,
	1,210,1,210,1,210,1,210,1,210,1,210,3,210,2631,8,210,1,211,1,211,1,211,
	1,211,1,211,1,211,5,211,2639,8,211,10,211,12,211,2642,9,211,1,212,1,212,
	1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,5,212,2655,8,212,
	10,212,12,212,2658,9,212,1,213,1,213,1,213,1,213,1,214,1,214,1,214,3,214,
	2667,8,214,1,214,1,214,1,214,5,214,2672,8,214,10,214,12,214,2675,9,214,
	1,215,1,215,1,215,1,215,1,215,3,215,2682,8,215,1,216,1,216,1,216,1,216,
	1,216,3,216,2689,8,216,1,217,1,217,1,217,1,217,1,217,1,217,1,217,3,217,
	2698,8,217,1,218,1,218,1,218,1,218,1,218,5,218,2705,8,218,10,218,12,218,
	2708,9,218,1,219,1,219,1,219,1,219,1,219,3,219,2715,8,219,1,220,1,220,1,
	221,1,221,1,221,1,222,1,222,1,222,3,222,2725,8,222,1,223,1,223,1,223,3,
	223,2730,8,223,1,223,1,223,1,224,1,224,1,224,1,224,1,224,1,224,5,224,2740,
	8,224,10,224,12,224,2743,9,224,1,225,1,225,1,225,1,225,1,226,1,226,1,226,
	1,226,1,227,1,227,1,227,1,227,1,227,1,227,5,227,2759,8,227,10,227,12,227,
	2762,9,227,1,228,1,228,1,228,1,228,1,228,5,228,2769,8,228,10,228,12,228,
	2772,9,228,1,229,1,229,1,229,1,229,1,229,3,229,2779,8,229,1,230,1,230,1,
	230,1,230,1,230,3,230,2786,8,230,1,231,1,231,1,231,1,231,1,231,1,231,1,
	231,3,231,2795,8,231,1,232,1,232,1,232,1,232,1,232,5,232,2802,8,232,10,
	232,12,232,2805,9,232,1,233,1,233,1,233,1,233,1,233,3,233,2812,8,233,1,
	234,1,234,1,235,1,235,1,235,1,236,1,236,1,236,3,236,2822,8,236,1,237,1,
	237,1,237,3,237,2827,8,237,1,237,1,237,1,238,1,238,1,238,1,238,1,238,1,
	238,5,238,2837,8,238,10,238,12,238,2840,9,238,1,239,1,239,1,239,1,239,1,
	240,1,240,1,240,1,240,1,241,1,241,1,241,3,241,2853,8,241,1,241,1,241,1,
	241,5,241,2858,8,241,10,241,12,241,2861,9,241,1,242,1,242,1,242,1,242,1,
	242,3,242,2868,8,242,1,243,1,243,1,243,1,243,1,243,3,243,2875,8,243,1,244,
	1,244,3,244,2879,8,244,1,245,1,245,1,245,3,245,2884,8,245,1,245,1,245,3,
	245,2888,8,245,1,246,1,246,1,246,3,246,2893,8,246,1,246,1,246,1,246,1,247,
	1,247,1,247,3,247,2901,8,247,1,248,1,248,1,248,1,248,1,249,1,249,1,249,
	1,249,5,249,2911,8,249,10,249,12,249,2914,9,249,1,249,1,249,1,249,1,250,
	1,250,1,250,1,250,5,250,2923,8,250,10,250,12,250,2926,9,250,1,250,1,250,
	1,251,1,251,1,251,1,251,1,251,1,252,1,252,1,252,5,252,2938,8,252,10,252,
	12,252,2941,9,252,1,253,1,253,5,253,2945,8,253,10,253,12,253,2948,9,253,
	1,254,1,254,1,254,3,254,2953,8,254,1,254,1,254,1,255,1,255,1,255,3,255,
	2960,8,255,1,255,3,255,2963,8,255,1,256,4,256,2966,8,256,11,256,12,256,
	2967,1,257,1,257,1,257,1,257,3,257,2974,8,257,1,257,3,257,2977,8,257,1,
	258,4,258,2980,8,258,11,258,12,258,2981,1,259,1,259,3,259,2986,8,259,1,
	260,1,260,4,260,2990,8,260,11,260,12,260,2991,1,260,1,260,1,261,1,261,1,
	261,4,261,2999,8,261,11,261,12,261,3000,1,261,1,261,1,262,1,262,1,262,1,
	262,3,262,3009,8,262,1,262,1,262,4,262,3013,8,262,11,262,12,262,3014,5,
	262,3017,8,262,10,262,12,262,3020,9,262,1,263,1,263,1,263,1,263,1,263,3,
	263,3027,8,263,1,264,4,264,3030,8,264,11,264,12,264,3031,1,264,0,24,36,
	80,92,96,106,110,138,200,250,334,384,396,410,422,424,428,436,448,454,456,
	464,476,482,524,265,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
	38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
	86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
	126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
	162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
	198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,
	234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,
	270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,
	306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,
	342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,
	378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,
	414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,
	450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,
	486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,
	522,524,526,528,0,14,1,0,32,33,1,0,39,42,3,0,43,43,45,45,49,49,2,0,1,1,
	5,7,3,0,114,114,147,147,173,173,5,0,90,90,126,126,142,142,150,150,173,173,
	3,0,90,90,142,142,173,173,3,0,142,142,150,150,173,173,2,0,146,146,156,156,
	2,0,81,81,97,97,8,0,9,14,53,53,55,63,65,73,75,117,119,119,121,154,156,166,
	2,0,37,37,125,125,3,0,24,25,39,39,41,41,2,0,16,16,24,25,3232,0,530,1,0,
	0,0,2,551,1,0,0,0,4,563,1,0,0,0,6,569,1,0,0,0,8,575,1,0,0,0,10,597,1,0,
	0,0,12,613,1,0,0,0,14,632,1,0,0,0,16,662,1,0,0,0,18,691,1,0,0,0,20,693,
	1,0,0,0,22,709,1,0,0,0,24,719,1,0,0,0,26,732,1,0,0,0,28,742,1,0,0,0,30,
	755,1,0,0,0,32,786,1,0,0,0,34,817,1,0,0,0,36,826,1,0,0,0,38,848,1,0,0,0,
	40,850,1,0,0,0,42,866,1,0,0,0,44,882,1,0,0,0,46,906,1,0,0,0,48,927,1,0,
	0,0,50,948,1,0,0,0,52,950,1,0,0,0,54,955,1,0,0,0,56,985,1,0,0,0,58,987,
	1,0,0,0,60,998,1,0,0,0,62,1035,1,0,0,0,64,1037,1,0,0,0,66,1046,1,0,0,0,
	68,1055,1,0,0,0,70,1087,1,0,0,0,72,1089,1,0,0,0,74,1103,1,0,0,0,76,1112,
	1,0,0,0,78,1119,1,0,0,0,80,1139,1,0,0,0,82,1163,1,0,0,0,84,1166,1,0,0,0,
	86,1221,1,0,0,0,88,1223,1,0,0,0,90,1225,1,0,0,0,92,1264,1,0,0,0,94,1368,
	1,0,0,0,96,1370,1,0,0,0,98,1380,1,0,0,0,100,1384,1,0,0,0,102,1388,1,0,0,
	0,104,1395,1,0,0,0,106,1397,1,0,0,0,108,1420,1,0,0,0,110,1422,1,0,0,0,112,
	1433,1,0,0,0,114,1438,1,0,0,0,116,1463,1,0,0,0,118,1465,1,0,0,0,120,1472,
	1,0,0,0,122,1476,1,0,0,0,124,1528,1,0,0,0,126,1577,1,0,0,0,128,1579,1,0,
	0,0,130,1591,1,0,0,0,132,1599,1,0,0,0,134,1605,1,0,0,0,136,1631,1,0,0,0,
	138,1633,1,0,0,0,140,1648,1,0,0,0,142,1652,1,0,0,0,144,1664,1,0,0,0,146,
	1666,1,0,0,0,148,1673,1,0,0,0,150,1677,1,0,0,0,152,1684,1,0,0,0,154,1688,
	1,0,0,0,156,1697,1,0,0,0,158,1702,1,0,0,0,160,1706,1,0,0,0,162,1711,1,0,
	0,0,164,1713,1,0,0,0,166,1720,1,0,0,0,168,1734,1,0,0,0,170,1753,1,0,0,0,
	172,1770,1,0,0,0,174,1772,1,0,0,0,176,1776,1,0,0,0,178,1780,1,0,0,0,180,
	1782,1,0,0,0,182,1786,1,0,0,0,184,1788,1,0,0,0,186,1797,1,0,0,0,188,1806,
	1,0,0,0,190,1824,1,0,0,0,192,1827,1,0,0,0,194,1836,1,0,0,0,196,1844,1,0,
	0,0,198,1852,1,0,0,0,200,1875,1,0,0,0,202,1891,1,0,0,0,204,1911,1,0,0,0,
	206,1913,1,0,0,0,208,1916,1,0,0,0,210,1920,1,0,0,0,212,1925,1,0,0,0,214,
	1929,1,0,0,0,216,1931,1,0,0,0,218,1941,1,0,0,0,220,1945,1,0,0,0,222,1947,
	1,0,0,0,224,1951,1,0,0,0,226,1957,1,0,0,0,228,1959,1,0,0,0,230,1961,1,0,
	0,0,232,1963,1,0,0,0,234,1965,1,0,0,0,236,1967,1,0,0,0,238,1969,1,0,0,0,
	240,1982,1,0,0,0,242,1986,1,0,0,0,244,1988,1,0,0,0,246,1993,1,0,0,0,248,
	1998,1,0,0,0,250,2000,1,0,0,0,252,2014,1,0,0,0,254,2028,1,0,0,0,256,2046,
	1,0,0,0,258,2060,1,0,0,0,260,2086,1,0,0,0,262,2088,1,0,0,0,264,2092,1,0,
	0,0,266,2103,1,0,0,0,268,2114,1,0,0,0,270,2132,1,0,0,0,272,2140,1,0,0,0,
	274,2152,1,0,0,0,276,2154,1,0,0,0,278,2156,1,0,0,0,280,2175,1,0,0,0,282,
	2177,1,0,0,0,284,2184,1,0,0,0,286,2191,1,0,0,0,288,2200,1,0,0,0,290,2209,
	1,0,0,0,292,2218,1,0,0,0,294,2241,1,0,0,0,296,2266,1,0,0,0,298,2268,1,0,
	0,0,300,2276,1,0,0,0,302,2281,1,0,0,0,304,2285,1,0,0,0,306,2291,1,0,0,0,
	308,2299,1,0,0,0,310,2302,1,0,0,0,312,2311,1,0,0,0,314,2323,1,0,0,0,316,
	2329,1,0,0,0,318,2341,1,0,0,0,320,2349,1,0,0,0,322,2355,1,0,0,0,324,2357,
	1,0,0,0,326,2365,1,0,0,0,328,2371,1,0,0,0,330,2382,1,0,0,0,332,2384,1,0,
	0,0,334,2388,1,0,0,0,336,2402,1,0,0,0,338,2404,1,0,0,0,340,2415,1,0,0,0,
	342,2417,1,0,0,0,344,2428,1,0,0,0,346,2432,1,0,0,0,348,2434,1,0,0,0,350,
	2439,1,0,0,0,352,2444,1,0,0,0,354,2449,1,0,0,0,356,2457,1,0,0,0,358,2474,
	1,0,0,0,360,2476,1,0,0,0,362,2478,1,0,0,0,364,2481,1,0,0,0,366,2484,1,0,
	0,0,368,2487,1,0,0,0,370,2490,1,0,0,0,372,2493,1,0,0,0,374,2495,1,0,0,0,
	376,2497,1,0,0,0,378,2499,1,0,0,0,380,2501,1,0,0,0,382,2510,1,0,0,0,384,
	2512,1,0,0,0,386,2529,1,0,0,0,388,2531,1,0,0,0,390,2533,1,0,0,0,392,2541,
	1,0,0,0,394,2543,1,0,0,0,396,2550,1,0,0,0,398,2561,1,0,0,0,400,2565,1,0,
	0,0,402,2569,1,0,0,0,404,2576,1,0,0,0,406,2583,1,0,0,0,408,2588,1,0,0,0,
	410,2590,1,0,0,0,412,2605,1,0,0,0,414,2607,1,0,0,0,416,2615,1,0,0,0,418,
	2617,1,0,0,0,420,2630,1,0,0,0,422,2632,1,0,0,0,424,2643,1,0,0,0,426,2659,
	1,0,0,0,428,2666,1,0,0,0,430,2681,1,0,0,0,432,2688,1,0,0,0,434,2697,1,0,
	0,0,436,2699,1,0,0,0,438,2714,1,0,0,0,440,2716,1,0,0,0,442,2718,1,0,0,0,
	444,2724,1,0,0,0,446,2726,1,0,0,0,448,2733,1,0,0,0,450,2744,1,0,0,0,452,
	2748,1,0,0,0,454,2752,1,0,0,0,456,2763,1,0,0,0,458,2778,1,0,0,0,460,2785,
	1,0,0,0,462,2794,1,0,0,0,464,2796,1,0,0,0,466,2811,1,0,0,0,468,2813,1,0,
	0,0,470,2815,1,0,0,0,472,2821,1,0,0,0,474,2823,1,0,0,0,476,2830,1,0,0,0,
	478,2841,1,0,0,0,480,2845,1,0,0,0,482,2852,1,0,0,0,484,2867,1,0,0,0,486,
	2874,1,0,0,0,488,2878,1,0,0,0,490,2887,1,0,0,0,492,2889,1,0,0,0,494,2900,
	1,0,0,0,496,2902,1,0,0,0,498,2906,1,0,0,0,500,2918,1,0,0,0,502,2929,1,0,
	0,0,504,2934,1,0,0,0,506,2942,1,0,0,0,508,2949,1,0,0,0,510,2962,1,0,0,0,
	512,2965,1,0,0,0,514,2976,1,0,0,0,516,2979,1,0,0,0,518,2985,1,0,0,0,520,
	2987,1,0,0,0,522,2995,1,0,0,0,524,3008,1,0,0,0,526,3026,1,0,0,0,528,3029,
	1,0,0,0,530,531,5,95,0,0,531,532,3,234,117,0,532,533,5,80,0,0,533,536,5,
	103,0,0,534,537,5,90,0,0,535,537,3,234,117,0,536,534,1,0,0,0,536,535,1,
	0,0,0,537,543,1,0,0,0,538,539,3,38,19,0,539,540,5,17,0,0,540,541,5,78,0,
	0,541,544,1,0,0,0,542,544,5,162,0,0,543,538,1,0,0,0,543,542,1,0,0,0,544,
	545,1,0,0,0,545,546,3,370,185,0,546,547,5,15,0,0,547,548,3,154,77,0,548,
	549,3,186,93,0,549,550,3,156,78,0,550,1,1,0,0,0,551,552,5,95,0,0,552,553,
	3,234,117,0,553,554,5,80,0,0,554,555,5,103,0,0,555,556,3,204,102,0,556,
	557,5,162,0,0,557,558,3,370,185,0,558,559,5,15,0,0,559,560,3,154,77,0,560,
	561,3,184,92,0,561,562,3,156,78,0,562,3,1,0,0,0,563,564,3,236,118,0,564,
	565,5,162,0,0,565,566,3,92,46,0,566,567,5,80,0,0,567,568,3,368,184,0,568,
	5,1,0,0,0,569,570,3,236,118,0,570,573,3,138,69,0,571,572,5,78,0,0,572,574,
	3,140,70,0,573,571,1,0,0,0,573,574,1,0,0,0,574,7,1,0,0,0,575,576,5,95,0,
	0,576,577,3,232,116,0,577,579,5,80,0,0,578,580,5,150,0,0,579,578,1,0,0,
	0,579,580,1,0,0,0,580,581,1,0,0,0,581,582,3,200,100,0,582,584,5,83,0,0,
	583,585,3,190,95,0,584,583,1,0,0,0,584,585,1,0,0,0,585,595,1,0,0,0,586,
	592,5,162,0,0,587,590,3,270,135,0,588,589,5,78,0,0,589,591,3,230,115,0,
	590,588,1,0,0,0,590,591,1,0,0,0,591,593,1,0,0,0,592,587,1,0,0,0,592,593,
	1,0,0,0,593,594,1,0,0,0,594,596,5,119,0,0,595,586,1,0,0,0,595,596,1,0,0,
	0,596,9,1,0,0,0,597,598,5,95,0,0,598,599,3,234,117,0,599,602,5,80,0,0,600,
	603,5,161,0,0,601,603,3,234,117,0,602,600,1,0,0,0,602,601,1,0,0,0,603,611,
	1,0,0,0,604,605,5,162,0,0,605,606,5,124,0,0,606,607,5,15,0,0,607,608,3,
	154,77,0,608,609,3,252,126,0,609,610,3,156,78,0,610,612,1,0,0,0,611,604,
	1,0,0,0,611,612,1,0,0,0,612,11,1,0,0,0,613,614,5,95,0,0,614,615,3,234,117,
	0,615,616,5,80,0,0,616,617,5,127,0,0,617,618,5,161,0,0,618,619,5,162,0,
	0,619,620,5,85,0,0,620,621,5,15,0,0,621,622,3,154,77,0,622,623,3,34,17,
	0,623,624,3,156,78,0,624,625,3,150,75,0,625,626,5,78,0,0,626,627,5,124,
	0,0,627,628,5,15,0,0,628,629,3,154,77,0,629,630,3,256,128,0,630,631,3,156,
	78,0,631,13,1,0,0,0,632,633,5,95,0,0,633,634,3,234,117,0,634,636,5,80,0,
	0,635,637,5,150,0,0,636,635,1,0,0,0,636,637,1,0,0,0,637,640,1,0,0,0,638,
	641,5,90,0,0,639,641,3,18,9,0,640,638,1,0,0,0,640,639,1,0,0,0,641,660,1,
	0,0,0,642,651,3,38,19,0,643,644,5,17,0,0,644,645,5,78,0,0,645,646,5,124,
	0,0,646,647,5,15,0,0,647,648,3,154,77,0,648,649,3,252,126,0,649,650,3,156,
	78,0,650,652,1,0,0,0,651,643,1,0,0,0,651,652,1,0,0,0,652,661,1,0,0,0,653,
	654,5,162,0,0,654,655,5,124,0,0,655,656,5,15,0,0,656,657,3,154,77,0,657,
	658,3,252,126,0,658,659,3,156,78,0,659,661,1,0,0,0,660,642,1,0,0,0,660,
	653,1,0,0,0,660,661,1,0,0,0,661,15,1,0,0,0,662,663,5,95,0,0,663,664,3,234,
	117,0,664,665,5,80,0,0,665,684,5,148,0,0,666,675,3,38,19,0,667,668,5,17,
	0,0,668,669,5,78,0,0,669,670,5,124,0,0,670,671,5,15,0,0,671,672,3,154,77,
	0,672,673,3,252,126,0,673,674,3,156,78,0,674,676,1,0,0,0,675,667,1,0,0,
	0,675,676,1,0,0,0,676,685,1,0,0,0,677,678,5,162,0,0,678,679,5,124,0,0,679,
	680,5,15,0,0,680,681,3,154,77,0,681,682,3,252,126,0,682,683,3,156,78,0,
	683,685,1,0,0,0,684,666,1,0,0,0,684,677,1,0,0,0,684,685,1,0,0,0,685,17,
	1,0,0,0,686,692,3,216,108,0,687,688,3,216,108,0,688,689,5,78,0,0,689,690,
	3,234,117,0,690,692,1,0,0,0,691,686,1,0,0,0,691,687,1,0,0,0,692,19,1,0,
	0,0,693,694,5,95,0,0,694,695,3,358,179,0,695,696,5,80,0,0,696,697,5,134,
	0,0,697,698,5,141,0,0,698,701,3,242,121,0,699,700,5,144,0,0,700,702,3,200,
	100,0,701,699,1,0,0,0,701,702,1,0,0,0,702,703,1,0,0,0,703,704,5,99,0,0,
	704,705,5,15,0,0,705,706,3,154,77,0,706,707,3,286,143,0,707,708,3,156,78,
	0,708,21,1,0,0,0,709,710,5,95,0,0,710,711,3,230,115,0,711,712,5,80,0,0,
	712,713,5,147,0,0,713,714,5,99,0,0,714,715,5,15,0,0,715,716,3,154,77,0,
	716,717,3,286,143,0,717,718,3,156,78,0,718,23,1,0,0,0,719,720,5,95,0,0,
	720,721,3,230,115,0,721,723,5,80,0,0,722,724,5,127,0,0,723,722,1,0,0,0,
	723,724,1,0,0,0,724,725,1,0,0,0,725,726,5,147,0,0,726,727,5,99,0,0,727,
	728,5,15,0,0,728,729,3,154,77,0,729,730,3,278,139,0,730,731,3,156,78,0,
	731,25,1,0,0,0,732,733,5,95,0,0,733,734,3,230,115,0,734,735,5,80,0,0,735,
	736,5,114,0,0,736,737,5,99,0,0,737,738,5,15,0,0,738,739,3,154,77,0,739,
	740,3,286,143,0,740,741,3,156,78,0,741,27,1,0,0,0,742,743,5,95,0,0,743,
	744,3,230,115,0,744,746,5,80,0,0,745,747,5,127,0,0,746,745,1,0,0,0,746,
	747,1,0,0,0,747,748,1,0,0,0,748,749,5,114,0,0,749,750,5,99,0,0,750,751,
	5,15,0,0,751,752,3,154,77,0,752,753,3,278,139,0,753,754,3,156,78,0,754,
	29,1,0,0,0,755,756,5,95,0,0,756,757,3,234,117,0,757,759,5,80,0,0,758,760,
	5,150,0,0,759,758,1,0,0,0,759,760,1,0,0,0,760,761,1,0,0,0,761,762,5,127,
	0,0,762,770,5,90,0,0,763,764,3,38,19,0,764,765,5,17,0,0,765,766,5,78,0,
	0,766,767,5,85,0,0,767,771,1,0,0,0,768,769,5,162,0,0,769,771,5,85,0,0,770,
	763,1,0,0,0,770,768,1,0,0,0,771,772,1,0,0,0,772,773,5,15,0,0,773,774,3,
	154,77,0,774,775,3,34,17,0,775,784,3,156,78,0,776,777,3,150,75,0,777,778,
	5,78,0,0,778,779,5,124,0,0,779,780,5,15,0,0,780,781,3,154,77,0,781,782,
	3,256,128,0,782,783,3,156,78,0,783,785,1,0,0,0,784,776,1,0,0,0,784,785,
	1,0,0,0,785,31,1,0,0,0,786,787,5,95,0,0,787,788,3,234,117,0,788,790,5,80,
	0,0,789,791,5,150,0,0,790,789,1,0,0,0,790,791,1,0,0,0,791,792,1,0,0,0,792,
	793,5,127,0,0,793,801,5,142,0,0,794,795,3,38,19,0,795,796,5,17,0,0,796,
	797,5,78,0,0,797,798,5,85,0,0,798,802,1,0,0,0,799,800,5,162,0,0,800,802,
	5,85,0,0,801,794,1,0,0,0,801,799,1,0,0,0,802,803,1,0,0,0,803,804,5,15,0,
	0,804,805,3,154,77,0,805,806,3,34,17,0,806,815,3,156,78,0,807,808,3,150,
	75,0,808,809,5,78,0,0,809,810,5,124,0,0,810,811,5,15,0,0,811,812,3,154,
	77,0,812,813,3,256,128,0,813,814,3,156,78,0,814,816,1,0,0,0,815,807,1,0,
	0,0,815,816,1,0,0,0,816,33,1,0,0,0,817,818,5,95,0,0,818,819,5,90,0,0,819,
	820,5,85,0,0,820,821,5,80,0,0,821,822,5,15,0,0,822,823,3,154,77,0,823,824,
	3,36,18,0,824,825,3,156,78,0,825,35,1,0,0,0,826,827,6,18,-1,0,827,828,3,
	260,130,0,828,835,1,0,0,0,829,830,10,1,0,0,830,831,3,150,75,0,831,832,3,
	260,130,0,832,834,1,0,0,0,833,829,1,0,0,0,834,837,1,0,0,0,835,833,1,0,0,
	0,835,836,1,0,0,0,836,37,1,0,0,0,837,835,1,0,0,0,838,839,5,162,0,0,839,
	840,5,83,0,0,840,849,3,232,116,0,841,842,5,162,0,0,842,843,5,84,0,0,843,
	846,3,272,136,0,844,845,5,78,0,0,845,847,3,232,116,0,846,844,1,0,0,0,846,
	847,1,0,0,0,847,849,1,0,0,0,848,838,1,0,0,0,848,841,1,0,0,0,849,39,1,0,
	0,0,850,851,5,95,0,0,851,852,3,234,117,0,852,853,5,80,0,0,853,854,5,75,
	0,0,854,857,5,123,0,0,855,856,5,141,0,0,856,858,3,52,26,0,857,855,1,0,0,
	0,857,858,1,0,0,0,858,864,1,0,0,0,859,861,5,144,0,0,860,862,5,126,0,0,861,
	860,1,0,0,0,861,862,1,0,0,0,862,863,1,0,0,0,863,865,3,200,100,0,864,859,
	1,0,0,0,864,865,1,0,0,0,865,41,1,0,0,0,866,867,5,95,0,0,867,868,3,218,109,
	0,868,869,5,80,0,0,869,870,5,75,0,0,870,873,5,123,0,0,871,872,5,141,0,0,
	872,874,3,52,26,0,873,871,1,0,0,0,873,874,1,0,0,0,874,880,1,0,0,0,875,877,
	5,144,0,0,876,878,5,126,0,0,877,876,1,0,0,0,877,878,1,0,0,0,878,879,1,0,
	0,0,879,881,3,200,100,0,880,875,1,0,0,0,880,881,1,0,0,0,881,43,1,0,0,0,
	882,883,5,95,0,0,883,884,3,218,109,0,884,885,5,80,0,0,885,888,5,123,0,0,
	886,887,5,141,0,0,887,889,3,52,26,0,888,886,1,0,0,0,888,889,1,0,0,0,889,
	895,1,0,0,0,890,892,5,144,0,0,891,893,5,126,0,0,892,891,1,0,0,0,892,893,
	1,0,0,0,893,894,1,0,0,0,894,896,3,200,100,0,895,890,1,0,0,0,895,896,1,0,
	0,0,896,897,1,0,0,0,897,898,5,99,0,0,898,899,5,15,0,0,899,902,3,154,77,
	0,900,903,3,286,143,0,901,903,5,138,0,0,902,900,1,0,0,0,902,901,1,0,0,0,
	903,904,1,0,0,0,904,905,3,156,78,0,905,45,1,0,0,0,906,907,5,95,0,0,907,
	908,3,218,109,0,908,910,5,80,0,0,909,911,5,127,0,0,910,909,1,0,0,0,910,
	911,1,0,0,0,911,912,1,0,0,0,912,915,5,123,0,0,913,914,5,141,0,0,914,916,
	3,52,26,0,915,913,1,0,0,0,915,916,1,0,0,0,916,919,1,0,0,0,917,918,5,144,
	0,0,918,920,3,248,124,0,919,917,1,0,0,0,919,920,1,0,0,0,920,921,1,0,0,0,
	921,922,5,99,0,0,922,923,5,15,0,0,923,924,3,154,77,0,924,925,3,278,139,
	0,925,926,3,156,78,0,926,47,1,0,0,0,927,928,5,95,0,0,928,929,5,177,0,0,
	929,930,5,80,0,0,930,931,5,154,0,0,931,932,5,123,0,0,932,933,5,99,0,0,933,
	934,5,15,0,0,934,935,3,154,77,0,935,936,3,286,143,0,936,937,3,156,78,0,
	937,938,3,150,75,0,938,939,5,78,0,0,939,946,5,160,0,0,940,941,5,15,0,0,
	941,942,3,154,77,0,942,943,3,288,144,0,943,944,3,156,78,0,944,947,1,0,0,
	0,945,947,3,236,118,0,946,940,1,0,0,0,946,945,1,0,0,0,947,49,1,0,0,0,948,
	949,3,92,46,0,949,51,1,0,0,0,950,953,3,238,119,0,951,952,5,78,0,0,952,954,
	3,240,120,0,953,951,1,0,0,0,953,954,1,0,0,0,954,53,1,0,0,0,955,956,3,248,
	124,0,956,958,3,230,115,0,957,959,3,38,19,0,958,957,1,0,0,0,958,959,1,0,
	0,0,959,962,1,0,0,0,960,961,5,45,0,0,961,963,3,306,153,0,962,960,1,0,0,
	0,962,963,1,0,0,0,963,55,1,0,0,0,964,986,3,142,71,0,965,986,3,62,31,0,966,
	986,3,146,73,0,967,986,3,60,30,0,968,986,3,126,63,0,969,986,3,132,66,0,
	970,986,3,58,29,0,971,986,3,88,44,0,972,986,3,90,45,0,973,986,3,78,39,0,
	974,986,3,68,34,0,975,986,3,72,36,0,976,986,3,76,38,0,977,986,3,74,37,0,
	978,986,3,82,41,0,979,986,3,84,42,0,980,986,3,118,59,0,981,986,3,64,32,
	0,982,986,3,66,33,0,983,986,3,44,22,0,984,986,3,276,138,0,985,964,1,0,0,
	0,985,965,1,0,0,0,985,966,1,0,0,0,985,967,1,0,0,0,985,968,1,0,0,0,985,969,
	1,0,0,0,985,970,1,0,0,0,985,971,1,0,0,0,985,972,1,0,0,0,985,973,1,0,0,0,
	985,974,1,0,0,0,985,975,1,0,0,0,985,976,1,0,0,0,985,977,1,0,0,0,985,978,
	1,0,0,0,985,979,1,0,0,0,985,980,1,0,0,0,985,981,1,0,0,0,985,982,1,0,0,0,
	985,983,1,0,0,0,985,984,1,0,0,0,986,57,1,0,0,0,987,988,5,111,0,0,988,59,
	1,0,0,0,989,990,5,96,0,0,990,994,3,196,98,0,991,992,5,78,0,0,992,993,5,
	151,0,0,993,995,3,196,98,0,994,991,1,0,0,0,994,995,1,0,0,0,995,999,1,0,
	0,0,996,997,5,151,0,0,997,999,3,196,98,0,998,989,1,0,0,0,998,996,1,0,0,
	0,999,1005,1,0,0,0,1000,1001,5,162,0,0,1001,1002,3,92,46,0,1002,1003,5,
	80,0,0,1003,1004,3,338,169,0,1004,1006,1,0,0,0,1005,1000,1,0,0,0,1005,1006,
	1,0,0,0,1006,1013,1,0,0,0,1007,1008,5,155,0,0,1008,1009,5,15,0,0,1009,1010,
	3,154,77,0,1010,1011,3,286,143,0,1011,1012,3,156,78,0,1012,1014,1,0,0,0,
	1013,1007,1,0,0,0,1013,1014,1,0,0,0,1014,61,1,0,0,0,1015,1018,3,106,53,
	0,1016,1018,3,96,48,0,1017,1015,1,0,0,0,1017,1016,1,0,0,0,1018,1020,1,0,
	0,0,1019,1021,3,136,68,0,1020,1019,1,0,0,0,1020,1021,1,0,0,0,1021,1032,
	1,0,0,0,1022,1025,5,155,0,0,1023,1024,5,162,0,0,1024,1026,3,230,115,0,1025,
	1023,1,0,0,0,1025,1026,1,0,0,0,1026,1027,1,0,0,0,1027,1028,5,15,0,0,1028,
	1029,3,154,77,0,1029,1030,3,286,143,0,1030,1031,3,156,78,0,1031,1033,1,
	0,0,0,1032,1022,1,0,0,0,1032,1033,1,0,0,0,1033,1036,1,0,0,0,1034,1036,3,
	100,50,0,1035,1017,1,0,0,0,1035,1034,1,0,0,0,1036,63,1,0,0,0,1037,1038,
	5,162,0,0,1038,1039,3,332,166,0,1039,1040,5,17,0,0,1040,1041,5,98,0,0,1041,
	1042,5,15,0,0,1042,1043,3,154,77,0,1043,1044,3,286,143,0,1044,1045,3,156,
	78,0,1045,65,1,0,0,0,1046,1047,5,162,0,0,1047,1048,3,234,117,0,1048,1049,
	5,17,0,0,1049,1050,5,98,0,0,1050,1051,5,15,0,0,1051,1052,3,154,77,0,1052,
	1053,3,286,143,0,1053,1054,3,156,78,0,1054,67,1,0,0,0,1055,1056,5,153,0,
	0,1056,1057,5,132,0,0,1057,1058,3,92,46,0,1058,1059,5,15,0,0,1059,1060,
	3,154,77,0,1060,1068,3,290,145,0,1061,1062,3,150,75,0,1062,1063,5,137,0,
	0,1063,1064,5,15,0,0,1064,1065,3,154,77,0,1065,1066,3,286,143,0,1066,1067,
	3,156,78,0,1067,1069,1,0,0,0,1068,1061,1,0,0,0,1068,1069,1,0,0,0,1069,1070,
	1,0,0,0,1070,1071,3,156,78,0,1071,69,1,0,0,0,1072,1073,5,163,0,0,1073,1074,
	3,296,148,0,1074,1075,5,15,0,0,1075,1076,3,154,77,0,1076,1077,3,286,143,
	0,1077,1078,3,156,78,0,1078,1088,1,0,0,0,1079,1080,5,163,0,0,1080,1081,
	5,117,0,0,1081,1082,3,294,147,0,1082,1083,5,15,0,0,1083,1084,3,154,77,0,
	1084,1085,3,286,143,0,1085,1086,3,156,78,0,1086,1088,1,0,0,0,1087,1072,
	1,0,0,0,1087,1079,1,0,0,0,1088,71,1,0,0,0,1089,1090,5,112,0,0,1090,1091,
	5,100,0,0,1091,1094,3,230,115,0,1092,1093,5,17,0,0,1093,1095,3,230,115,
	0,1094,1092,1,0,0,0,1094,1095,1,0,0,0,1095,1096,1,0,0,0,1096,1097,5,117,
	0,0,1097,1098,3,92,46,0,1098,1099,5,15,0,0,1099,1100,3,154,77,0,1100,1101,
	3,286,143,0,1101,1102,3,156,78,0,1102,73,1,0,0,0,1103,1104,5,98,0,0,1104,
	1105,5,15,0,0,1105,1106,3,154,77,0,1106,1107,3,286,143,0,1107,1108,3,156,
	78,0,1108,1109,3,150,75,0,1109,1110,5,165,0,0,1110,1111,3,92,46,0,1111,
	75,1,0,0,0,1112,1113,5,165,0,0,1113,1114,3,92,46,0,1114,1115,5,15,0,0,1115,
	1116,3,154,77,0,1116,1117,3,286,143,0,1117,1118,3,156,78,0,1118,77,1,0,
	0,0,1119,1120,5,116,0,0,1120,1121,3,92,46,0,1121,1122,5,15,0,0,1122,1123,
	3,154,77,0,1123,1124,3,286,143,0,1124,1128,3,156,78,0,1125,1126,3,150,75,
	0,1126,1127,3,80,40,0,1127,1129,1,0,0,0,1128,1125,1,0,0,0,1128,1129,1,0,
	0,0,1129,1137,1,0,0,0,1130,1131,3,150,75,0,1131,1132,5,101,0,0,1132,1133,
	5,15,0,0,1133,1134,3,154,77,0,1134,1135,3,286,143,0,1135,1136,3,156,78,
	0,1136,1138,1,0,0,0,1137,1130,1,0,0,0,1137,1138,1,0,0,0,1138,79,1,0,0,0,
	1139,1140,6,40,-1,0,1140,1141,5,101,0,0,1141,1142,5,116,0,0,1142,1143,3,
	92,46,0,1143,1144,5,15,0,0,1144,1145,3,154,77,0,1145,1146,3,286,143,0,1146,
	1147,3,156,78,0,1147,1160,1,0,0,0,1148,1149,10,1,0,0,1149,1150,3,150,75,
	0,1150,1151,5,101,0,0,1151,1152,5,116,0,0,1152,1153,3,92,46,0,1153,1154,
	5,15,0,0,1154,1155,3,154,77,0,1155,1156,3,286,143,0,1156,1157,3,156,78,
	0,1157,1159,1,0,0,0,1158,1148,1,0,0,0,1159,1162,1,0,0,0,1160,1158,1,0,0,
	0,1160,1161,1,0,0,0,1161,81,1,0,0,0,1162,1160,1,0,0,0,1163,1164,5,139,0,
	0,1164,1165,3,92,46,0,1165,83,1,0,0,0,1166,1167,5,153,0,0,1167,1168,5,132,
	0,0,1168,1169,3,230,115,0,1169,1170,5,99,0,0,1170,1171,5,15,0,0,1171,1172,
	3,154,77,0,1172,1173,3,286,143,0,1173,1174,3,156,78,0,1174,1176,3,148,74,
	0,1175,1177,3,292,146,0,1176,1175,1,0,0,0,1176,1177,1,0,0,0,1177,1189,1,
	0,0,0,1178,1182,5,137,0,0,1179,1180,5,163,0,0,1180,1182,5,79,0,0,1181,1178,
	1,0,0,0,1181,1179,1,0,0,0,1182,1183,1,0,0,0,1183,1184,5,15,0,0,1184,1185,
	3,154,77,0,1185,1186,3,286,143,0,1186,1187,3,156,78,0,1187,1188,3,148,74,
	0,1188,1190,1,0,0,0,1189,1181,1,0,0,0,1189,1190,1,0,0,0,1190,1198,1,0,0,
	0,1191,1192,5,77,0,0,1192,1193,5,15,0,0,1193,1194,3,154,77,0,1194,1195,
	3,286,143,0,1195,1196,3,156,78,0,1196,1197,3,148,74,0,1197,1199,1,0,0,0,
	1198,1191,1,0,0,0,1198,1199,1,0,0,0,1199,1200,1,0,0,0,1200,1201,3,148,74,
	0,1201,85,1,0,0,0,1202,1203,5,163,0,0,1203,1204,3,236,118,0,1204,1205,5,
	15,0,0,1205,1206,3,154,77,0,1206,1207,3,286,143,0,1207,1208,3,156,78,0,
	1208,1209,3,148,74,0,1209,1222,1,0,0,0,1210,1211,5,163,0,0,1211,1212,5,
	117,0,0,1212,1213,5,22,0,0,1213,1214,3,188,94,0,1214,1215,5,23,0,0,1215,
	1216,5,15,0,0,1216,1217,3,154,77,0,1217,1218,3,286,143,0,1218,1219,3,156,
	78,0,1219,1220,3,148,74,0,1220,1222,1,0,0,0,1221,1202,1,0,0,0,1221,1210,
	1,0,0,0,1222,87,1,0,0,0,1223,1224,5,86,0,0,1224,89,1,0,0,0,1225,1227,5,
	143,0,0,1226,1228,3,92,46,0,1227,1226,1,0,0,0,1227,1228,1,0,0,0,1228,91,
	1,0,0,0,1229,1230,6,46,-1,0,1230,1265,3,520,260,0,1231,1265,3,488,244,0,
	1232,1265,3,106,53,0,1233,1265,3,340,170,0,1234,1265,3,96,48,0,1235,1238,
	3,106,53,0,1236,1238,3,96,48,0,1237,1235,1,0,0,0,1237,1236,1,0,0,0,1238,
	1239,1,0,0,0,1239,1240,3,136,68,0,1240,1265,1,0,0,0,1241,1265,3,116,58,
	0,1242,1243,5,33,0,0,1243,1265,3,92,46,34,1244,1245,5,129,0,0,1245,1265,
	3,92,46,33,1246,1247,5,65,0,0,1247,1248,5,15,0,0,1248,1265,3,92,46,15,1249,
	1250,5,105,0,0,1250,1251,5,15,0,0,1251,1265,3,230,115,0,1252,1253,5,64,
	0,0,1253,1265,3,106,53,0,1254,1265,3,114,57,0,1255,1265,3,112,56,0,1256,
	1265,3,110,55,0,1257,1265,3,124,62,0,1258,1265,3,348,174,0,1259,1265,3,
	350,175,0,1260,1265,3,352,176,0,1261,1265,3,134,67,0,1262,1265,3,120,60,
	0,1263,1265,3,100,50,0,1264,1229,1,0,0,0,1264,1231,1,0,0,0,1264,1232,1,
	0,0,0,1264,1233,1,0,0,0,1264,1234,1,0,0,0,1264,1237,1,0,0,0,1264,1241,1,
	0,0,0,1264,1242,1,0,0,0,1264,1244,1,0,0,0,1264,1246,1,0,0,0,1264,1249,1,
	0,0,0,1264,1252,1,0,0,0,1264,1254,1,0,0,0,1264,1255,1,0,0,0,1264,1256,1,
	0,0,0,1264,1257,1,0,0,0,1264,1258,1,0,0,0,1264,1259,1,0,0,0,1264,1260,1,
	0,0,0,1264,1261,1,0,0,0,1264,1262,1,0,0,0,1264,1263,1,0,0,0,1265,1358,1,
	0,0,0,1266,1267,10,31,0,0,1267,1268,3,374,187,0,1268,1269,3,92,46,32,1269,
	1357,1,0,0,0,1270,1271,10,30,0,0,1271,1272,3,376,188,0,1272,1273,3,92,46,
	31,1273,1357,1,0,0,0,1274,1275,10,29,0,0,1275,1276,3,380,190,0,1276,1277,
	3,92,46,30,1277,1357,1,0,0,0,1278,1279,10,28,0,0,1279,1280,3,378,189,0,
	1280,1281,3,92,46,29,1281,1357,1,0,0,0,1282,1283,10,27,0,0,1283,1284,7,
	0,0,0,1284,1357,3,92,46,28,1285,1286,10,26,0,0,1286,1287,7,1,0,0,1287,1357,
	3,92,46,27,1288,1289,10,24,0,0,1289,1290,7,2,0,0,1290,1357,3,92,46,25,1291,
	1293,10,23,0,0,1292,1294,5,129,0,0,1293,1292,1,0,0,0,1293,1294,1,0,0,0,
	1294,1295,1,0,0,0,1295,1296,5,92,0,0,1296,1357,3,92,46,24,1297,1299,10,
	22,0,0,1298,1300,5,129,0,0,1299,1298,1,0,0,0,1299,1300,1,0,0,0,1300,1301,
	1,0,0,0,1301,1302,5,117,0,0,1302,1357,3,92,46,23,1303,1305,10,21,0,0,1304,
	1306,5,129,0,0,1305,1304,1,0,0,0,1305,1306,1,0,0,0,1306,1307,1,0,0,0,1307,
	1308,5,115,0,0,1308,1357,3,92,46,22,1309,1310,10,18,0,0,1310,1311,5,135,
	0,0,1311,1357,3,92,46,19,1312,1313,10,17,0,0,1313,1314,5,78,0,0,1314,1357,
	3,92,46,18,1315,1316,10,16,0,0,1316,1317,5,116,0,0,1317,1318,3,92,46,0,
	1318,1319,5,101,0,0,1319,1320,3,92,46,17,1320,1357,1,0,0,0,1321,1322,10,
	1,0,0,1322,1323,5,112,0,0,1323,1324,5,100,0,0,1324,1325,3,230,115,0,1325,
	1326,5,117,0,0,1326,1327,3,92,46,2,1327,1357,1,0,0,0,1328,1329,10,32,0,
	0,1329,1331,5,80,0,0,1330,1332,5,126,0,0,1331,1330,1,0,0,0,1331,1332,1,
	0,0,0,1332,1333,1,0,0,0,1333,1357,3,248,124,0,1334,1335,10,25,0,0,1335,
	1337,5,121,0,0,1336,1338,5,129,0,0,1337,1336,1,0,0,0,1337,1338,1,0,0,0,
	1338,1339,1,0,0,0,1339,1357,3,336,168,0,1340,1342,10,20,0,0,1341,1343,5,
	129,0,0,1342,1341,1,0,0,0,1342,1343,1,0,0,0,1343,1344,1,0,0,0,1344,1345,
	5,115,0,0,1345,1346,5,76,0,0,1346,1357,3,94,47,0,1347,1349,10,19,0,0,1348,
	1350,5,129,0,0,1349,1348,1,0,0,0,1349,1350,1,0,0,0,1350,1351,1,0,0,0,1351,
	1352,5,115,0,0,1352,1353,5,79,0,0,1353,1357,3,94,47,0,1354,1355,10,9,0,
	0,1355,1357,3,122,61,0,1356,1266,1,0,0,0,1356,1270,1,0,0,0,1356,1274,1,
	0,0,0,1356,1278,1,0,0,0,1356,1282,1,0,0,0,1356,1285,1,0,0,0,1356,1288,1,
	0,0,0,1356,1291,1,0,0,0,1356,1297,1,0,0,0,1356,1303,1,0,0,0,1356,1309,1,
	0,0,0,1356,1312,1,0,0,0,1356,1315,1,0,0,0,1356,1321,1,0,0,0,1356,1328,1,
	0,0,0,1356,1334,1,0,0,0,1356,1340,1,0,0,0,1356,1347,1,0,0,0,1356,1354,1,
	0,0,0,1357,1360,1,0,0,0,1358,1356,1,0,0,0,1358,1359,1,0,0,0,1359,93,1,0,
	0,0,1360,1358,1,0,0,0,1361,1362,5,164,0,0,1362,1369,3,340,170,0,1363,1364,
	3,230,115,0,1364,1365,5,164,0,0,1365,1366,3,92,46,0,1366,1369,1,0,0,0,1367,
	1369,3,92,46,0,1368,1361,1,0,0,0,1368,1363,1,0,0,0,1368,1367,1,0,0,0,1369,
	95,1,0,0,0,1370,1371,6,48,-1,0,1371,1372,3,226,113,0,1372,1377,1,0,0,0,
	1373,1374,10,1,0,0,1374,1376,3,98,49,0,1375,1373,1,0,0,0,1376,1379,1,0,
	0,0,1377,1375,1,0,0,0,1377,1378,1,0,0,0,1378,97,1,0,0,0,1379,1377,1,0,0,
	0,1380,1381,4,49,22,1,1381,1382,5,19,0,0,1382,1383,3,226,113,0,1383,99,
	1,0,0,0,1384,1385,5,120,0,0,1385,1386,3,96,48,0,1386,1387,3,102,51,0,1387,
	101,1,0,0,0,1388,1389,4,51,23,1,1389,103,1,0,0,0,1390,1396,3,304,152,0,
	1391,1396,3,306,153,0,1392,1396,3,226,113,0,1393,1396,3,300,150,0,1394,
	1396,3,302,151,0,1395,1390,1,0,0,0,1395,1391,1,0,0,0,1395,1392,1,0,0,0,
	1395,1393,1,0,0,0,1395,1394,1,0,0,0,1396,105,1,0,0,0,1397,1398,6,53,-1,
	0,1398,1399,3,104,52,0,1399,1404,1,0,0,0,1400,1401,10,1,0,0,1401,1403,3,
	108,54,0,1402,1400,1,0,0,0,1403,1406,1,0,0,0,1404,1402,1,0,0,0,1404,1405,
	1,0,0,0,1405,107,1,0,0,0,1406,1404,1,0,0,0,1407,1408,4,54,25,1,1408,1409,
	5,19,0,0,1409,1421,3,228,114,0,1410,1411,4,54,26,1,1411,1412,5,22,0,0,1412,
	1413,3,330,165,0,1413,1414,5,23,0,0,1414,1421,1,0,0,0,1415,1416,4,54,27,
	1,1416,1417,5,22,0,0,1417,1418,3,92,46,0,1418,1419,5,23,0,0,1419,1421,1,
	0,0,0,1420,1407,1,0,0,0,1420,1410,1,0,0,0,1420,1415,1,0,0,0,1421,109,1,
	0,0,0,1422,1423,6,55,-1,0,1423,1424,5,126,0,0,1424,1425,3,226,113,0,1425,
	1430,1,0,0,0,1426,1427,10,1,0,0,1427,1429,3,108,54,0,1428,1426,1,0,0,0,
	1429,1432,1,0,0,0,1430,1428,1,0,0,0,1430,1431,1,0,0,0,1431,111,1,0,0,0,
	1432,1430,1,0,0,0,1433,1436,5,66,0,0,1434,1435,5,113,0,0,1435,1437,3,92,
	46,0,1436,1434,1,0,0,0,1436,1437,1,0,0,0,1437,113,1,0,0,0,1438,1439,5,67,
	0,0,1439,1440,5,113,0,0,1440,1441,3,92,46,0,1441,115,1,0,0,0,1442,1443,
	3,208,104,0,1443,1444,5,113,0,0,1444,1453,3,92,46,0,1445,1447,5,17,0,0,
	1446,1445,1,0,0,0,1446,1447,1,0,0,0,1447,1448,1,0,0,0,1448,1451,3,138,69,
	0,1449,1450,5,78,0,0,1450,1452,3,140,70,0,1451,1449,1,0,0,0,1451,1452,1,
	0,0,0,1452,1454,1,0,0,0,1453,1446,1,0,0,0,1453,1454,1,0,0,0,1454,1464,1,
	0,0,0,1455,1461,3,208,104,0,1456,1459,3,138,69,0,1457,1458,5,78,0,0,1458,
	1460,3,140,70,0,1459,1457,1,0,0,0,1459,1460,1,0,0,0,1460,1462,1,0,0,0,1461,
	1456,1,0,0,0,1461,1462,1,0,0,0,1462,1464,1,0,0,0,1463,1442,1,0,0,0,1463,
	1455,1,0,0,0,1464,117,1,0,0,0,1465,1466,5,166,0,0,1466,1467,3,92,46,0,1467,
	1468,5,158,0,0,1468,1470,3,92,46,0,1469,1471,3,130,65,0,1470,1469,1,0,0,
	0,1470,1471,1,0,0,0,1471,119,1,0,0,0,1472,1473,3,96,48,0,1473,1474,5,33,
	0,0,1474,1475,3,92,46,0,1475,121,1,0,0,0,1476,1479,5,109,0,0,1477,1478,
	5,162,0,0,1478,1480,3,230,115,0,1479,1477,1,0,0,0,1479,1480,1,0,0,0,1480,
	1481,1,0,0,0,1481,1482,5,164,0,0,1482,1483,3,92,46,0,1483,123,1,0,0,0,1484,
	1485,5,108,0,0,1485,1487,5,133,0,0,1486,1488,3,208,104,0,1487,1486,1,0,
	0,0,1487,1488,1,0,0,0,1488,1489,1,0,0,0,1489,1490,5,164,0,0,1490,1493,3,
	92,46,0,1491,1492,5,118,0,0,1492,1494,3,128,64,0,1493,1491,1,0,0,0,1493,
	1494,1,0,0,0,1494,1529,1,0,0,0,1495,1513,5,108,0,0,1496,1498,5,76,0,0,1497,
	1499,3,208,104,0,1498,1497,1,0,0,0,1498,1499,1,0,0,0,1499,1514,1,0,0,0,
	1500,1502,3,208,104,0,1501,1503,5,145,0,0,1502,1501,1,0,0,0,1502,1503,1,
	0,0,0,1503,1504,1,0,0,0,1504,1505,3,92,46,0,1505,1506,5,158,0,0,1506,1507,
	3,92,46,0,1507,1514,1,0,0,0,1508,1509,5,145,0,0,1509,1510,3,92,46,0,1510,
	1511,5,158,0,0,1511,1512,3,92,46,0,1512,1514,1,0,0,0,1513,1496,1,0,0,0,
	1513,1500,1,0,0,0,1513,1508,1,0,0,0,1514,1517,1,0,0,0,1515,1516,5,164,0,
	0,1516,1518,3,92,46,0,1517,1515,1,0,0,0,1517,1518,1,0,0,0,1518,1521,1,0,
	0,0,1519,1520,5,118,0,0,1520,1522,3,128,64,0,1521,1519,1,0,0,0,1521,1522,
	1,0,0,0,1522,1526,1,0,0,0,1523,1524,5,136,0,0,1524,1525,5,87,0,0,1525,1527,
	3,354,177,0,1526,1523,1,0,0,0,1526,1527,1,0,0,0,1527,1529,1,0,0,0,1528,
	1484,1,0,0,0,1528,1495,1,0,0,0,1529,125,1,0,0,0,1530,1531,5,108,0,0,1531,
	1533,5,133,0,0,1532,1534,3,208,104,0,1533,1532,1,0,0,0,1533,1534,1,0,0,
	0,1534,1535,1,0,0,0,1535,1536,5,164,0,0,1536,1539,3,92,46,0,1537,1538,5,
	118,0,0,1538,1540,3,128,64,0,1539,1537,1,0,0,0,1539,1540,1,0,0,0,1540,1541,
	1,0,0,0,1541,1542,3,130,65,0,1542,1578,1,0,0,0,1543,1561,5,108,0,0,1544,
	1546,5,76,0,0,1545,1547,3,208,104,0,1546,1545,1,0,0,0,1546,1547,1,0,0,0,
	1547,1562,1,0,0,0,1548,1550,3,208,104,0,1549,1551,5,145,0,0,1550,1549,1,
	0,0,0,1550,1551,1,0,0,0,1551,1552,1,0,0,0,1552,1553,3,92,46,0,1553,1554,
	5,158,0,0,1554,1555,3,92,46,0,1555,1562,1,0,0,0,1556,1557,5,145,0,0,1557,
	1558,3,92,46,0,1558,1559,5,158,0,0,1559,1560,3,92,46,0,1560,1562,1,0,0,
	0,1561,1544,1,0,0,0,1561,1548,1,0,0,0,1561,1556,1,0,0,0,1562,1565,1,0,0,
	0,1563,1564,5,164,0,0,1564,1566,3,92,46,0,1565,1563,1,0,0,0,1565,1566,1,
	0,0,0,1566,1569,1,0,0,0,1567,1568,5,118,0,0,1568,1570,3,128,64,0,1569,1567,
	1,0,0,0,1569,1570,1,0,0,0,1570,1574,1,0,0,0,1571,1572,5,136,0,0,1572,1573,
	5,87,0,0,1573,1575,3,354,177,0,1574,1571,1,0,0,0,1574,1575,1,0,0,0,1575,
	1576,1,0,0,0,1576,1578,3,130,65,0,1577,1530,1,0,0,0,1577,1543,1,0,0,0,1578,
	127,1,0,0,0,1579,1584,3,230,115,0,1580,1581,5,17,0,0,1581,1583,3,230,115,
	0,1582,1580,1,0,0,0,1583,1586,1,0,0,0,1584,1582,1,0,0,0,1584,1585,1,0,0,
	0,1585,1589,1,0,0,0,1586,1584,1,0,0,0,1587,1588,5,78,0,0,1588,1590,3,230,
	115,0,1589,1587,1,0,0,0,1589,1590,1,0,0,0,1590,129,1,0,0,0,1591,1592,5,
	155,0,0,1592,1593,5,162,0,0,1593,1594,3,230,115,0,1594,1595,5,15,0,0,1595,
	1596,3,154,77,0,1596,1597,3,286,143,0,1597,1598,3,156,78,0,1598,131,1,0,
	0,0,1599,1600,5,140,0,0,1600,1601,5,76,0,0,1601,1602,5,113,0,0,1602,1603,
	3,92,46,0,1603,1604,3,130,65,0,1604,133,1,0,0,0,1605,1607,5,149,0,0,1606,
	1608,5,97,0,0,1607,1606,1,0,0,0,1607,1608,1,0,0,0,1608,1609,1,0,0,0,1609,
	1615,3,106,53,0,1610,1611,5,162,0,0,1611,1612,3,346,173,0,1612,1613,5,80,
	0,0,1613,1614,3,364,182,0,1614,1616,1,0,0,0,1615,1610,1,0,0,0,1615,1616,
	1,0,0,0,1616,135,1,0,0,0,1617,1618,4,68,29,1,1618,1624,3,92,46,0,1619,1622,
	3,138,69,0,1620,1621,5,78,0,0,1621,1623,3,140,70,0,1622,1620,1,0,0,0,1622,
	1623,1,0,0,0,1623,1625,1,0,0,0,1624,1619,1,0,0,0,1624,1625,1,0,0,0,1625,
	1632,1,0,0,0,1626,1629,3,138,69,0,1627,1628,5,78,0,0,1628,1630,3,140,70,
	0,1629,1627,1,0,0,0,1629,1630,1,0,0,0,1630,1632,1,0,0,0,1631,1617,1,0,0,
	0,1631,1626,1,0,0,0,1632,137,1,0,0,0,1633,1634,6,69,-1,0,1634,1635,5,162,
	0,0,1635,1636,3,140,70,0,1636,1642,1,0,0,0,1637,1638,10,1,0,0,1638,1639,
	5,17,0,0,1639,1641,3,140,70,0,1640,1637,1,0,0,0,1641,1644,1,0,0,0,1642,
	1640,1,0,0,0,1642,1643,1,0,0,0,1643,139,1,0,0,0,1644,1642,1,0,0,0,1645,
	1646,3,92,46,0,1646,1647,5,80,0,0,1647,1649,1,0,0,0,1648,1645,1,0,0,0,1648,
	1649,1,0,0,0,1649,1650,1,0,0,0,1650,1651,3,230,115,0,1651,141,1,0,0,0,1652,
	1653,3,334,167,0,1653,1654,3,372,186,0,1654,1655,3,92,46,0,1655,143,1,0,
	0,0,1656,1657,4,72,31,1,1657,1658,5,19,0,0,1658,1665,3,230,115,0,1659,1660,
	4,72,32,1,1660,1661,5,22,0,0,1661,1662,3,92,46,0,1662,1663,5,23,0,0,1663,
	1665,1,0,0,0,1664,1656,1,0,0,0,1664,1659,1,0,0,0,1665,145,1,0,0,0,1666,
	1667,3,270,135,0,1667,1668,3,372,186,0,1668,1669,3,92,46,0,1669,147,1,0,
	0,0,1670,1672,5,5,0,0,1671,1670,1,0,0,0,1672,1675,1,0,0,0,1673,1671,1,0,
	0,0,1673,1674,1,0,0,0,1674,149,1,0,0,0,1675,1673,1,0,0,0,1676,1678,5,5,
	0,0,1677,1676,1,0,0,0,1678,1679,1,0,0,0,1679,1677,1,0,0,0,1679,1680,1,0,
	0,0,1680,151,1,0,0,0,1681,1683,7,3,0,0,1682,1681,1,0,0,0,1683,1686,1,0,
	0,0,1684,1682,1,0,0,0,1684,1685,1,0,0,0,1685,153,1,0,0,0,1686,1684,1,0,
	0,0,1687,1689,5,5,0,0,1688,1687,1,0,0,0,1689,1690,1,0,0,0,1690,1688,1,0,
	0,0,1690,1691,1,0,0,0,1691,1692,1,0,0,0,1692,1693,5,1,0,0,1693,155,1,0,
	0,0,1694,1696,5,5,0,0,1695,1694,1,0,0,0,1696,1699,1,0,0,0,1697,1695,1,0,
	0,0,1697,1698,1,0,0,0,1698,1700,1,0,0,0,1699,1697,1,0,0,0,1700,1701,5,2,
	0,0,1701,157,1,0,0,0,1702,1703,5,74,0,0,1703,1704,5,15,0,0,1704,1705,3,
	248,124,0,1705,159,1,0,0,0,1706,1707,5,130,0,0,1707,161,1,0,0,0,1708,1712,
	3,168,84,0,1709,1712,3,56,28,0,1710,1712,3,92,46,0,1711,1708,1,0,0,0,1711,
	1709,1,0,0,0,1711,1710,1,0,0,0,1712,163,1,0,0,0,1713,1715,3,148,74,0,1714,
	1716,3,166,83,0,1715,1714,1,0,0,0,1715,1716,1,0,0,0,1716,1717,1,0,0,0,1717,
	1718,3,148,74,0,1718,1719,5,0,0,1,1719,165,1,0,0,0,1720,1726,3,168,84,0,
	1721,1722,3,150,75,0,1722,1723,3,168,84,0,1723,1725,1,0,0,0,1724,1721,1,
	0,0,0,1725,1728,1,0,0,0,1726,1724,1,0,0,0,1726,1727,1,0,0,0,1727,167,1,
	0,0,0,1728,1726,1,0,0,0,1729,1730,3,276,138,0,1730,1731,3,150,75,0,1731,
	1733,1,0,0,0,1732,1729,1,0,0,0,1733,1736,1,0,0,0,1734,1732,1,0,0,0,1734,
	1735,1,0,0,0,1735,1742,1,0,0,0,1736,1734,1,0,0,0,1737,1738,3,170,85,0,1738,
	1739,3,150,75,0,1739,1741,1,0,0,0,1740,1737,1,0,0,0,1741,1744,1,0,0,0,1742,
	1740,1,0,0,0,1742,1743,1,0,0,0,1743,1751,1,0,0,0,1744,1742,1,0,0,0,1745,
	1752,3,8,4,0,1746,1752,3,212,106,0,1747,1752,3,180,90,0,1748,1752,3,182,
	91,0,1749,1752,3,214,107,0,1750,1752,3,274,137,0,1751,1745,1,0,0,0,1751,
	1746,1,0,0,0,1751,1747,1,0,0,0,1751,1748,1,0,0,0,1751,1749,1,0,0,0,1751,
	1750,1,0,0,0,1752,169,1,0,0,0,1753,1768,3,172,86,0,1754,1764,5,20,0,0,1755,
	1765,3,178,89,0,1756,1761,3,174,87,0,1757,1758,5,17,0,0,1758,1760,3,174,
	87,0,1759,1757,1,0,0,0,1760,1763,1,0,0,0,1761,1759,1,0,0,0,1761,1762,1,
	0,0,0,1762,1765,1,0,0,0,1763,1761,1,0,0,0,1764,1755,1,0,0,0,1764,1756,1,
	0,0,0,1765,1766,1,0,0,0,1766,1767,5,21,0,0,1767,1769,1,0,0,0,1768,1754,
	1,0,0,0,1768,1769,1,0,0,0,1769,171,1,0,0,0,1770,1771,5,176,0,0,1771,173,
	1,0,0,0,1772,1773,3,176,88,0,1773,1774,5,45,0,0,1774,1775,3,178,89,0,1775,
	175,1,0,0,0,1776,1777,7,4,0,0,1777,177,1,0,0,0,1778,1781,3,306,153,0,1779,
	1781,3,202,101,0,1780,1778,1,0,0,0,1780,1779,1,0,0,0,1781,179,1,0,0,0,1782,
	1783,3,32,16,0,1783,181,1,0,0,0,1784,1787,3,0,0,0,1785,1787,3,2,1,0,1786,
	1784,1,0,0,0,1786,1785,1,0,0,0,1787,183,1,0,0,0,1788,1794,3,4,2,0,1789,
	1790,3,150,75,0,1790,1791,3,4,2,0,1791,1793,1,0,0,0,1792,1789,1,0,0,0,1793,
	1796,1,0,0,0,1794,1792,1,0,0,0,1794,1795,1,0,0,0,1795,185,1,0,0,0,1796,
	1794,1,0,0,0,1797,1803,3,6,3,0,1798,1799,3,150,75,0,1799,1800,3,6,3,0,1800,
	1802,1,0,0,0,1801,1798,1,0,0,0,1802,1805,1,0,0,0,1803,1801,1,0,0,0,1803,
	1804,1,0,0,0,1804,187,1,0,0,0,1805,1803,1,0,0,0,1806,1811,3,236,118,0,1807,
	1808,5,17,0,0,1808,1810,3,236,118,0,1809,1807,1,0,0,0,1810,1813,1,0,0,0,
	1811,1809,1,0,0,0,1811,1812,1,0,0,0,1812,189,1,0,0,0,1813,1811,1,0,0,0,
	1814,1815,5,117,0,0,1815,1825,3,192,96,0,1816,1817,5,117,0,0,1817,1825,
	3,194,97,0,1818,1819,5,117,0,0,1819,1825,3,198,99,0,1820,1821,5,122,0,0,
	1821,1825,5,177,0,0,1822,1823,5,122,0,0,1823,1825,3,92,46,0,1824,1814,1,
	0,0,0,1824,1816,1,0,0,0,1824,1818,1,0,0,0,1824,1820,1,0,0,0,1824,1822,1,
	0,0,0,1825,191,1,0,0,0,1826,1828,5,126,0,0,1827,1826,1,0,0,0,1827,1828,
	1,0,0,0,1828,1829,1,0,0,0,1829,1831,5,22,0,0,1830,1832,3,196,98,0,1831,
	1830,1,0,0,0,1831,1832,1,0,0,0,1832,1833,1,0,0,0,1833,1834,5,23,0,0,1834,
	193,1,0,0,0,1835,1837,5,126,0,0,1836,1835,1,0,0,0,1836,1837,1,0,0,0,1837,
	1838,1,0,0,0,1838,1840,5,41,0,0,1839,1841,3,196,98,0,1840,1839,1,0,0,0,
	1840,1841,1,0,0,0,1841,1842,1,0,0,0,1842,1843,5,39,0,0,1843,195,1,0,0,0,
	1844,1849,3,92,46,0,1845,1846,5,17,0,0,1846,1848,3,92,46,0,1847,1845,1,
	0,0,0,1848,1851,1,0,0,0,1849,1847,1,0,0,0,1849,1850,1,0,0,0,1850,197,1,
	0,0,0,1851,1849,1,0,0,0,1852,1853,5,22,0,0,1853,1854,3,92,46,0,1854,1855,
	5,18,0,0,1855,1856,3,92,46,0,1856,1857,5,23,0,0,1857,199,1,0,0,0,1858,1859,
	6,100,-1,0,1859,1876,3,202,101,0,1860,1861,5,72,0,0,1861,1862,5,41,0,0,
	1862,1863,3,200,100,0,1863,1864,5,39,0,0,1864,1876,1,0,0,0,1865,1866,5,
	71,0,0,1866,1867,5,41,0,0,1867,1868,3,200,100,0,1868,1869,5,39,0,0,1869,
	1876,1,0,0,0,1870,1871,5,74,0,0,1871,1872,5,41,0,0,1872,1873,3,200,100,
	0,1873,1874,5,39,0,0,1874,1876,1,0,0,0,1875,1858,1,0,0,0,1875,1860,1,0,
	0,0,1875,1865,1,0,0,0,1875,1870,1,0,0,0,1876,1886,1,0,0,0,1877,1878,10,
	6,0,0,1878,1885,5,43,0,0,1879,1880,10,5,0,0,1880,1881,5,22,0,0,1881,1885,
	5,23,0,0,1882,1883,10,4,0,0,1883,1885,5,44,0,0,1884,1877,1,0,0,0,1884,1879,
	1,0,0,0,1884,1882,1,0,0,0,1885,1888,1,0,0,0,1886,1884,1,0,0,0,1886,1887,
	1,0,0,0,1887,201,1,0,0,0,1888,1886,1,0,0,0,1889,1892,3,204,102,0,1890,1892,
	3,206,103,0,1891,1889,1,0,0,0,1891,1890,1,0,0,0,1892,203,1,0,0,0,1893,1912,
	5,53,0,0,1894,1912,5,54,0,0,1895,1912,5,55,0,0,1896,1912,5,56,0,0,1897,
	1912,5,68,0,0,1898,1912,5,57,0,0,1899,1912,5,58,0,0,1900,1912,5,66,0,0,
	1901,1912,5,59,0,0,1902,1912,5,61,0,0,1903,1912,5,60,0,0,1904,1912,5,62,
	0,0,1905,1912,5,63,0,0,1906,1912,5,65,0,0,1907,1912,5,67,0,0,1908,1912,
	5,69,0,0,1909,1912,5,70,0,0,1910,1912,5,73,0,0,1911,1893,1,0,0,0,1911,1894,
	1,0,0,0,1911,1895,1,0,0,0,1911,1896,1,0,0,0,1911,1897,1,0,0,0,1911,1898,
	1,0,0,0,1911,1899,1,0,0,0,1911,1900,1,0,0,0,1911,1901,1,0,0,0,1911,1902,
	1,0,0,0,1911,1903,1,0,0,0,1911,1904,1,0,0,0,1911,1905,1,0,0,0,1911,1906,
	1,0,0,0,1911,1907,1,0,0,0,1911,1908,1,0,0,0,1911,1909,1,0,0,0,1911,1910,
	1,0,0,0,1912,205,1,0,0,0,1913,1914,5,172,0,0,1914,207,1,0,0,0,1915,1917,
	5,126,0,0,1916,1915,1,0,0,0,1916,1917,1,0,0,0,1917,1918,1,0,0,0,1918,1919,
	3,206,103,0,1919,209,1,0,0,0,1920,1921,5,65,0,0,1921,211,1,0,0,0,1922,1926,
	3,14,7,0,1923,1926,3,30,15,0,1924,1926,3,16,8,0,1925,1922,1,0,0,0,1925,
	1923,1,0,0,0,1925,1924,1,0,0,0,1926,213,1,0,0,0,1927,1930,3,10,5,0,1928,
	1930,3,12,6,0,1929,1927,1,0,0,0,1929,1928,1,0,0,0,1930,215,1,0,0,0,1931,
	1936,3,234,117,0,1932,1933,5,17,0,0,1933,1935,3,234,117,0,1934,1932,1,0,
	0,0,1935,1938,1,0,0,0,1936,1934,1,0,0,0,1936,1937,1,0,0,0,1937,217,1,0,
	0,0,1938,1936,1,0,0,0,1939,1942,3,230,115,0,1940,1942,3,234,117,0,1941,
	1939,1,0,0,0,1941,1940,1,0,0,0,1942,219,1,0,0,0,1943,1946,3,226,113,0,1944,
	1946,3,360,180,0,1945,1943,1,0,0,0,1945,1944,1,0,0,0,1946,221,1,0,0,0,1947,
	1948,4,111,36,1,1948,1949,5,33,0,0,1949,1950,3,224,112,0,1950,223,1,0,0,
	0,1951,1952,4,112,37,1,1952,1953,3,220,110,0,1953,225,1,0,0,0,1954,1958,
	3,230,115,0,1955,1958,3,234,117,0,1956,1958,3,236,118,0,1957,1954,1,0,0,
	0,1957,1955,1,0,0,0,1957,1956,1,0,0,0,1958,227,1,0,0,0,1959,1960,7,5,0,
	0,1960,229,1,0,0,0,1961,1962,7,6,0,0,1962,231,1,0,0,0,1963,1964,7,7,0,0,
	1964,233,1,0,0,0,1965,1966,5,172,0,0,1966,235,1,0,0,0,1967,1968,5,171,0,
	0,1968,237,1,0,0,0,1969,1974,3,240,120,0,1970,1971,5,17,0,0,1971,1973,3,
	240,120,0,1972,1970,1,0,0,0,1973,1976,1,0,0,0,1974,1972,1,0,0,0,1974,1975,
	1,0,0,0,1975,239,1,0,0,0,1976,1974,1,0,0,0,1977,1983,3,246,123,0,1978,1980,
	5,126,0,0,1979,1978,1,0,0,0,1979,1980,1,0,0,0,1980,1981,1,0,0,0,1981,1983,
	3,242,121,0,1982,1977,1,0,0,0,1982,1979,1,0,0,0,1983,241,1,0,0,0,1984,1987,
	3,244,122,0,1985,1987,3,54,27,0,1986,1984,1,0,0,0,1986,1985,1,0,0,0,1987,
	243,1,0,0,0,1988,1991,3,230,115,0,1989,1990,5,45,0,0,1990,1992,3,306,153,
	0,1991,1989,1,0,0,0,1991,1992,1,0,0,0,1992,245,1,0,0,0,1993,1994,3,210,
	105,0,1994,1995,3,230,115,0,1995,247,1,0,0,0,1996,1999,3,200,100,0,1997,
	1999,3,250,125,0,1998,1996,1,0,0,0,1998,1997,1,0,0,0,1999,249,1,0,0,0,2000,
	2001,6,125,-1,0,2001,2002,5,79,0,0,2002,2011,1,0,0,0,2003,2004,10,2,0,0,
	2004,2005,5,22,0,0,2005,2010,5,23,0,0,2006,2007,10,1,0,0,2007,2008,5,24,
	0,0,2008,2010,5,25,0,0,2009,2003,1,0,0,0,2009,2006,1,0,0,0,2010,2013,1,
	0,0,0,2011,2009,1,0,0,0,2011,2012,1,0,0,0,2012,251,1,0,0,0,2013,2011,1,
	0,0,0,2014,2020,3,254,127,0,2015,2016,3,150,75,0,2016,2017,3,254,127,0,
	2017,2019,1,0,0,0,2018,2015,1,0,0,0,2019,2022,1,0,0,0,2020,2018,1,0,0,0,
	2020,2021,1,0,0,0,2021,253,1,0,0,0,2022,2020,1,0,0,0,2023,2024,3,276,138,
	0,2024,2025,3,150,75,0,2025,2027,1,0,0,0,2026,2023,1,0,0,0,2027,2030,1,
	0,0,0,2028,2026,1,0,0,0,2028,2029,1,0,0,0,2029,2036,1,0,0,0,2030,2028,1,
	0,0,0,2031,2032,3,170,85,0,2032,2033,3,150,75,0,2033,2035,1,0,0,0,2034,
	2031,1,0,0,0,2035,2038,1,0,0,0,2036,2034,1,0,0,0,2036,2037,1,0,0,0,2037,
	2044,1,0,0,0,2038,2036,1,0,0,0,2039,2045,3,22,11,0,2040,2045,3,26,13,0,
	2041,2045,3,44,22,0,2042,2045,3,42,21,0,2043,2045,3,20,10,0,2044,2039,1,
	0,0,0,2044,2040,1,0,0,0,2044,2041,1,0,0,0,2044,2042,1,0,0,0,2044,2043,1,
	0,0,0,2045,255,1,0,0,0,2046,2052,3,258,129,0,2047,2048,3,150,75,0,2048,
	2049,3,258,129,0,2049,2051,1,0,0,0,2050,2047,1,0,0,0,2051,2054,1,0,0,0,
	2052,2050,1,0,0,0,2052,2053,1,0,0,0,2053,257,1,0,0,0,2054,2052,1,0,0,0,
	2055,2056,3,276,138,0,2056,2057,3,150,75,0,2057,2059,1,0,0,0,2058,2055,
	1,0,0,0,2059,2062,1,0,0,0,2060,2058,1,0,0,0,2060,2061,1,0,0,0,2061,2068,
	1,0,0,0,2062,2060,1,0,0,0,2063,2064,3,170,85,0,2064,2065,3,150,75,0,2065,
	2067,1,0,0,0,2066,2063,1,0,0,0,2067,2070,1,0,0,0,2068,2066,1,0,0,0,2068,
	2069,1,0,0,0,2069,2074,1,0,0,0,2070,2068,1,0,0,0,2071,2075,3,28,14,0,2072,
	2075,3,24,12,0,2073,2075,3,46,23,0,2074,2071,1,0,0,0,2074,2072,1,0,0,0,
	2074,2073,1,0,0,0,2075,259,1,0,0,0,2076,2077,5,9,0,0,2077,2087,3,456,228,
	0,2078,2079,5,10,0,0,2079,2087,3,482,241,0,2080,2081,5,11,0,0,2081,2087,
	3,262,131,0,2082,2083,5,12,0,0,2083,2087,3,262,131,0,2084,2085,5,13,0,0,
	2085,2087,3,266,133,0,2086,2076,1,0,0,0,2086,2078,1,0,0,0,2086,2080,1,0,
	0,0,2086,2082,1,0,0,0,2086,2084,1,0,0,0,2087,261,1,0,0,0,2088,2090,3,226,
	113,0,2089,2091,3,264,132,0,2090,2089,1,0,0,0,2090,2091,1,0,0,0,2091,263,
	1,0,0,0,2092,2093,5,113,0,0,2093,2094,3,366,183,0,2094,2095,5,15,0,0,2095,
	2100,3,432,216,0,2096,2097,5,19,0,0,2097,2099,3,432,216,0,2098,2096,1,0,
	0,0,2099,2102,1,0,0,0,2100,2098,1,0,0,0,2100,2101,1,0,0,0,2101,265,1,0,
	0,0,2102,2100,1,0,0,0,2103,2108,3,406,203,0,2104,2105,5,19,0,0,2105,2107,
	3,406,203,0,2106,2104,1,0,0,0,2107,2110,1,0,0,0,2108,2106,1,0,0,0,2108,
	2109,1,0,0,0,2109,2112,1,0,0,0,2110,2108,1,0,0,0,2111,2113,3,268,134,0,
	2112,2111,1,0,0,0,2112,2113,1,0,0,0,2113,267,1,0,0,0,2114,2115,5,113,0,
	0,2115,2116,3,366,183,0,2116,2118,5,15,0,0,2117,2119,5,35,0,0,2118,2117,
	1,0,0,0,2118,2119,1,0,0,0,2119,2120,1,0,0,0,2120,2125,3,406,203,0,2121,
	2122,5,35,0,0,2122,2124,3,406,203,0,2123,2121,1,0,0,0,2124,2127,1,0,0,0,
	2125,2123,1,0,0,0,2125,2126,1,0,0,0,2126,2130,1,0,0,0,2127,2125,1,0,0,0,
	2128,2129,5,19,0,0,2129,2131,3,406,203,0,2130,2128,1,0,0,0,2130,2131,1,
	0,0,0,2131,269,1,0,0,0,2132,2137,3,230,115,0,2133,2134,5,17,0,0,2134,2136,
	3,230,115,0,2135,2133,1,0,0,0,2136,2139,1,0,0,0,2137,2135,1,0,0,0,2137,
	2138,1,0,0,0,2138,271,1,0,0,0,2139,2137,1,0,0,0,2140,2145,3,232,116,0,2141,
	2142,5,17,0,0,2142,2144,3,232,116,0,2143,2141,1,0,0,0,2144,2147,1,0,0,0,
	2145,2143,1,0,0,0,2145,2146,1,0,0,0,2146,273,1,0,0,0,2147,2145,1,0,0,0,
	2148,2153,3,40,20,0,2149,2153,3,44,22,0,2150,2153,3,46,23,0,2151,2153,3,
	48,24,0,2152,2148,1,0,0,0,2152,2149,1,0,0,0,2152,2150,1,0,0,0,2152,2151,
	1,0,0,0,2153,275,1,0,0,0,2154,2155,5,8,0,0,2155,277,1,0,0,0,2156,2162,3,
	280,140,0,2157,2158,3,150,75,0,2158,2159,3,280,140,0,2159,2161,1,0,0,0,
	2160,2157,1,0,0,0,2161,2164,1,0,0,0,2162,2160,1,0,0,0,2162,2163,1,0,0,0,
	2163,279,1,0,0,0,2164,2162,1,0,0,0,2165,2166,5,9,0,0,2166,2176,3,434,217,
	0,2167,2168,5,10,0,0,2168,2176,3,462,231,0,2169,2170,5,11,0,0,2170,2176,
	3,282,141,0,2171,2172,5,12,0,0,2172,2176,3,282,141,0,2173,2174,5,13,0,0,
	2174,2176,3,284,142,0,2175,2165,1,0,0,0,2175,2167,1,0,0,0,2175,2169,1,0,
	0,0,2175,2171,1,0,0,0,2175,2173,1,0,0,0,2176,281,1,0,0,0,2177,2179,3,408,
	204,0,2178,2180,5,16,0,0,2179,2178,1,0,0,0,2179,2180,1,0,0,0,2180,2182,
	1,0,0,0,2181,2183,3,264,132,0,2182,2181,1,0,0,0,2182,2183,1,0,0,0,2183,
	283,1,0,0,0,2184,2186,3,382,191,0,2185,2187,5,16,0,0,2186,2185,1,0,0,0,
	2186,2187,1,0,0,0,2187,2189,1,0,0,0,2188,2190,3,268,134,0,2189,2188,1,0,
	0,0,2189,2190,1,0,0,0,2190,285,1,0,0,0,2191,2197,3,56,28,0,2192,2193,3,
	150,75,0,2193,2194,3,56,28,0,2194,2196,1,0,0,0,2195,2192,1,0,0,0,2196,2199,
	1,0,0,0,2197,2195,1,0,0,0,2197,2198,1,0,0,0,2198,287,1,0,0,0,2199,2197,
	1,0,0,0,2200,2206,3,50,25,0,2201,2202,3,150,75,0,2202,2203,3,50,25,0,2203,
	2205,1,0,0,0,2204,2201,1,0,0,0,2205,2208,1,0,0,0,2206,2204,1,0,0,0,2206,
	2207,1,0,0,0,2207,289,1,0,0,0,2208,2206,1,0,0,0,2209,2215,3,70,35,0,2210,
	2211,3,150,75,0,2211,2212,3,70,35,0,2212,2214,1,0,0,0,2213,2210,1,0,0,0,
	2214,2217,1,0,0,0,2215,2213,1,0,0,0,2215,2216,1,0,0,0,2216,291,1,0,0,0,
	2217,2215,1,0,0,0,2218,2224,3,86,43,0,2219,2220,3,150,75,0,2220,2221,3,
	86,43,0,2221,2223,1,0,0,0,2222,2219,1,0,0,0,2223,2226,1,0,0,0,2224,2222,
	1,0,0,0,2224,2225,1,0,0,0,2225,293,1,0,0,0,2226,2224,1,0,0,0,2227,2228,
	5,22,0,0,2228,2229,3,296,148,0,2229,2230,5,18,0,0,2230,2231,3,296,148,0,
	2231,2232,5,23,0,0,2232,2242,1,0,0,0,2233,2234,5,22,0,0,2234,2235,3,298,
	149,0,2235,2236,5,23,0,0,2236,2242,1,0,0,0,2237,2238,5,41,0,0,2238,2239,
	3,298,149,0,2239,2240,5,39,0,0,2240,2242,1,0,0,0,2241,2227,1,0,0,0,2241,
	2233,1,0,0,0,2241,2237,1,0,0,0,2242,295,1,0,0,0,2243,2267,5,169,0,0,2244,
	2267,5,170,0,0,2245,2247,5,33,0,0,2246,2245,1,0,0,0,2246,2247,1,0,0,0,2247,
	2248,1,0,0,0,2248,2267,5,180,0,0,2249,2267,5,181,0,0,2250,2267,5,168,0,
	0,2251,2267,5,185,0,0,2252,2267,5,184,0,0,2253,2267,5,177,0,0,2254,2256,
	5,33,0,0,2255,2254,1,0,0,0,2255,2256,1,0,0,0,2256,2257,1,0,0,0,2257,2267,
	5,182,0,0,2258,2267,5,183,0,0,2259,2267,5,167,0,0,2260,2267,5,186,0,0,2261,
	2267,5,179,0,0,2262,2267,5,178,0,0,2263,2267,3,236,118,0,2264,2267,3,158,
	79,0,2265,2267,3,160,80,0,2266,2243,1,0,0,0,2266,2244,1,0,0,0,2266,2246,
	1,0,0,0,2266,2249,1,0,0,0,2266,2250,1,0,0,0,2266,2251,1,0,0,0,2266,2252,
	1,0,0,0,2266,2253,1,0,0,0,2266,2255,1,0,0,0,2266,2258,1,0,0,0,2266,2259,
	1,0,0,0,2266,2260,1,0,0,0,2266,2261,1,0,0,0,2266,2262,1,0,0,0,2266,2263,
	1,0,0,0,2266,2264,1,0,0,0,2266,2265,1,0,0,0,2267,297,1,0,0,0,2268,2273,
	3,296,148,0,2269,2270,5,17,0,0,2270,2272,3,296,148,0,2271,2269,1,0,0,0,
	2272,2275,1,0,0,0,2273,2271,1,0,0,0,2273,2274,1,0,0,0,2274,299,1,0,0,0,
	2275,2273,1,0,0,0,2276,2277,7,8,0,0,2277,301,1,0,0,0,2278,2279,3,206,103,
	0,2279,2280,5,19,0,0,2280,2282,1,0,0,0,2281,2278,1,0,0,0,2281,2282,1,0,
	0,0,2282,2283,1,0,0,0,2283,2284,5,152,0,0,2284,303,1,0,0,0,2285,2286,5,
	20,0,0,2286,2287,3,92,46,0,2287,2288,5,21,0,0,2288,305,1,0,0,0,2289,2292,
	3,296,148,0,2290,2292,3,308,154,0,2291,2289,1,0,0,0,2291,2290,1,0,0,0,2292,
	307,1,0,0,0,2293,2300,3,198,99,0,2294,2300,3,192,96,0,2295,2300,3,194,97,
	0,2296,2300,3,312,156,0,2297,2300,3,314,157,0,2298,2300,3,310,155,0,2299,
	2293,1,0,0,0,2299,2294,1,0,0,0,2299,2295,1,0,0,0,2299,2296,1,0,0,0,2299,
	2297,1,0,0,0,2299,2298,1,0,0,0,2300,309,1,0,0,0,2301,2303,5,126,0,0,2302,
	2301,1,0,0,0,2302,2303,1,0,0,0,2303,2304,1,0,0,0,2304,2306,5,20,0,0,2305,
	2307,3,316,158,0,2306,2305,1,0,0,0,2306,2307,1,0,0,0,2307,2308,1,0,0,0,
	2308,2309,5,21,0,0,2309,311,1,0,0,0,2310,2312,5,126,0,0,2311,2310,1,0,0,
	0,2311,2312,1,0,0,0,2312,2321,1,0,0,0,2313,2314,5,41,0,0,2314,2315,3,324,
	162,0,2315,2316,5,39,0,0,2316,2322,1,0,0,0,2317,2322,5,44,0,0,2318,2319,
	5,41,0,0,2319,2320,5,15,0,0,2320,2322,5,39,0,0,2321,2313,1,0,0,0,2321,2317,
	1,0,0,0,2321,2318,1,0,0,0,2322,313,1,0,0,0,2323,2325,5,24,0,0,2324,2326,
	3,318,159,0,2325,2324,1,0,0,0,2325,2326,1,0,0,0,2326,2327,1,0,0,0,2327,
	2328,5,25,0,0,2328,315,1,0,0,0,2329,2330,3,92,46,0,2330,2339,5,17,0,0,2331,
	2336,3,92,46,0,2332,2333,5,17,0,0,2333,2335,3,92,46,0,2334,2332,1,0,0,0,
	2335,2338,1,0,0,0,2336,2334,1,0,0,0,2336,2337,1,0,0,0,2337,2340,1,0,0,0,
	2338,2336,1,0,0,0,2339,2331,1,0,0,0,2339,2340,1,0,0,0,2340,317,1,0,0,0,
	2341,2346,3,320,160,0,2342,2343,5,17,0,0,2343,2345,3,320,160,0,2344,2342,
	1,0,0,0,2345,2348,1,0,0,0,2346,2344,1,0,0,0,2346,2347,1,0,0,0,2347,319,
	1,0,0,0,2348,2346,1,0,0,0,2349,2350,3,322,161,0,2350,2351,5,15,0,0,2351,
	2352,3,92,46,0,2352,321,1,0,0,0,2353,2356,3,220,110,0,2354,2356,5,177,0,
	0,2355,2353,1,0,0,0,2355,2354,1,0,0,0,2356,323,1,0,0,0,2357,2362,3,326,
	163,0,2358,2359,5,17,0,0,2359,2361,3,326,163,0,2360,2358,1,0,0,0,2361,2364,
	1,0,0,0,2362,2360,1,0,0,0,2362,2363,1,0,0,0,2363,325,1,0,0,0,2364,2362,
	1,0,0,0,2365,2366,3,328,164,0,2366,2367,5,15,0,0,2367,2368,3,92,46,0,2368,
	327,1,0,0,0,2369,2372,3,220,110,0,2370,2372,5,177,0,0,2371,2369,1,0,0,0,
	2371,2370,1,0,0,0,2372,329,1,0,0,0,2373,2374,3,92,46,0,2374,2375,5,15,0,
	0,2375,2376,3,92,46,0,2376,2383,1,0,0,0,2377,2378,3,92,46,0,2378,2379,5,
	15,0,0,2379,2383,1,0,0,0,2380,2381,5,15,0,0,2381,2383,3,92,46,0,2382,2373,
	1,0,0,0,2382,2377,1,0,0,0,2382,2380,1,0,0,0,2383,331,1,0,0,0,2384,2385,
	3,230,115,0,2385,2386,3,372,186,0,2386,2387,3,92,46,0,2387,333,1,0,0,0,
	2388,2389,6,167,-1,0,2389,2390,3,230,115,0,2390,2395,1,0,0,0,2391,2392,
	10,1,0,0,2392,2394,3,144,72,0,2393,2391,1,0,0,0,2394,2397,1,0,0,0,2395,
	2393,1,0,0,0,2395,2396,1,0,0,0,2396,335,1,0,0,0,2397,2395,1,0,0,0,2398,
	2399,4,168,41,1,2399,2400,5,173,0,0,2400,2403,3,248,124,0,2401,2403,3,92,
	46,0,2402,2398,1,0,0,0,2402,2401,1,0,0,0,2403,337,1,0,0,0,2404,2405,4,169,
	42,1,2405,2406,5,173,0,0,2406,339,1,0,0,0,2407,2408,3,342,171,0,2408,2409,
	3,92,46,0,2409,2416,1,0,0,0,2410,2411,3,342,171,0,2411,2412,5,24,0,0,2412,
	2413,3,286,143,0,2413,2414,5,25,0,0,2414,2416,1,0,0,0,2415,2407,1,0,0,0,
	2415,2410,1,0,0,0,2416,341,1,0,0,0,2417,2418,3,344,172,0,2418,2419,3,152,
	76,0,2419,2420,5,52,0,0,2420,2421,3,152,76,0,2421,343,1,0,0,0,2422,2429,
	3,230,115,0,2423,2425,5,20,0,0,2424,2426,3,270,135,0,2425,2424,1,0,0,0,
	2425,2426,1,0,0,0,2426,2427,1,0,0,0,2427,2429,5,21,0,0,2428,2422,1,0,0,
	0,2428,2423,1,0,0,0,2429,345,1,0,0,0,2430,2433,3,106,53,0,2431,2433,3,340,
	170,0,2432,2430,1,0,0,0,2432,2431,1,0,0,0,2433,347,1,0,0,0,2434,2435,5,
	140,0,0,2435,2436,5,67,0,0,2436,2437,5,113,0,0,2437,2438,3,92,46,0,2438,
	349,1,0,0,0,2439,2440,5,140,0,0,2440,2441,5,76,0,0,2441,2442,5,113,0,0,
	2442,2443,3,92,46,0,2443,351,1,0,0,0,2444,2445,5,140,0,0,2445,2446,5,133,
	0,0,2446,2447,5,113,0,0,2447,2448,3,92,46,0,2448,353,1,0,0,0,2449,2454,
	3,356,178,0,2450,2451,5,17,0,0,2451,2453,3,356,178,0,2452,2450,1,0,0,0,
	2453,2456,1,0,0,0,2454,2452,1,0,0,0,2454,2455,1,0,0,0,2455,355,1,0,0,0,
	2456,2454,1,0,0,0,2457,2462,3,230,115,0,2458,2459,5,19,0,0,2459,2461,3,
	230,115,0,2460,2458,1,0,0,0,2461,2464,1,0,0,0,2462,2460,1,0,0,0,2462,2463,
	1,0,0,0,2463,2466,1,0,0,0,2464,2462,1,0,0,0,2465,2467,7,9,0,0,2466,2465,
	1,0,0,0,2466,2467,1,0,0,0,2467,357,1,0,0,0,2468,2475,5,32,0,0,2469,2475,
	5,33,0,0,2470,2475,3,374,187,0,2471,2475,3,376,188,0,2472,2475,3,378,189,
	0,2473,2475,3,380,190,0,2474,2468,1,0,0,0,2474,2469,1,0,0,0,2474,2470,1,
	0,0,0,2474,2471,1,0,0,0,2474,2472,1,0,0,0,2474,2473,1,0,0,0,2475,359,1,
	0,0,0,2476,2477,7,10,0,0,2477,361,1,0,0,0,2478,2479,5,173,0,0,2479,2480,
	4,181,43,1,2480,363,1,0,0,0,2481,2482,5,173,0,0,2482,2483,4,182,44,1,2483,
	365,1,0,0,0,2484,2485,5,173,0,0,2485,2486,4,183,45,1,2486,367,1,0,0,0,2487,
	2488,5,173,0,0,2488,2489,4,184,46,1,2489,369,1,0,0,0,2490,2491,5,173,0,
	0,2491,2492,4,185,47,1,2492,371,1,0,0,0,2493,2494,5,45,0,0,2494,373,1,0,
	0,0,2495,2496,5,34,0,0,2496,375,1,0,0,0,2497,2498,5,35,0,0,2498,377,1,0,
	0,0,2499,2500,5,36,0,0,2500,379,1,0,0,0,2501,2502,7,11,0,0,2502,381,1,0,
	0,0,2503,2504,5,143,0,0,2504,2505,3,384,192,0,2505,2506,5,16,0,0,2506,2511,
	1,0,0,0,2507,2508,3,384,192,0,2508,2509,5,16,0,0,2509,2511,1,0,0,0,2510,
	2503,1,0,0,0,2510,2507,1,0,0,0,2511,383,1,0,0,0,2512,2513,6,192,-1,0,2513,
	2514,3,386,193,0,2514,2519,1,0,0,0,2515,2516,10,1,0,0,2516,2518,3,392,196,
	0,2517,2515,1,0,0,0,2518,2521,1,0,0,0,2519,2517,1,0,0,0,2519,2520,1,0,0,
	0,2520,385,1,0,0,0,2521,2519,1,0,0,0,2522,2530,3,388,194,0,2523,2530,3,
	390,195,0,2524,2530,3,400,200,0,2525,2530,3,402,201,0,2526,2530,3,404,202,
	0,2527,2530,3,394,197,0,2528,2530,3,398,199,0,2529,2522,1,0,0,0,2529,2523,
	1,0,0,0,2529,2524,1,0,0,0,2529,2525,1,0,0,0,2529,2526,1,0,0,0,2529,2527,
	1,0,0,0,2529,2528,1,0,0,0,2530,387,1,0,0,0,2531,2532,3,300,150,0,2532,389,
	1,0,0,0,2533,2534,3,362,181,0,2534,2535,3,394,197,0,2535,391,1,0,0,0,2536,
	2537,5,19,0,0,2537,2542,3,394,197,0,2538,2539,5,19,0,0,2539,2542,3,406,
	203,0,2540,2542,3,398,199,0,2541,2536,1,0,0,0,2541,2538,1,0,0,0,2541,2540,
	1,0,0,0,2542,393,1,0,0,0,2543,2544,3,406,203,0,2544,2546,5,20,0,0,2545,
	2547,3,396,198,0,2546,2545,1,0,0,0,2546,2547,1,0,0,0,2547,2548,1,0,0,0,
	2548,2549,5,21,0,0,2549,395,1,0,0,0,2550,2551,6,198,-1,0,2551,2552,3,384,
	192,0,2552,2558,1,0,0,0,2553,2554,10,1,0,0,2554,2555,5,17,0,0,2555,2557,
	3,384,192,0,2556,2553,1,0,0,0,2557,2560,1,0,0,0,2558,2556,1,0,0,0,2558,
	2559,1,0,0,0,2559,397,1,0,0,0,2560,2558,1,0,0,0,2561,2562,5,22,0,0,2562,
	2563,3,384,192,0,2563,2564,5,23,0,0,2564,399,1,0,0,0,2565,2566,5,20,0,0,
	2566,2567,3,384,192,0,2567,2568,5,21,0,0,2568,401,1,0,0,0,2569,2570,3,406,
	203,0,2570,403,1,0,0,0,2571,2577,5,180,0,0,2572,2577,5,182,0,0,2573,2577,
	5,177,0,0,2574,2577,5,167,0,0,2575,2577,5,168,0,0,2576,2571,1,0,0,0,2576,
	2572,1,0,0,0,2576,2573,1,0,0,0,2576,2574,1,0,0,0,2576,2575,1,0,0,0,2577,
	405,1,0,0,0,2578,2584,5,173,0,0,2579,2584,5,171,0,0,2580,2584,5,175,0,0,
	2581,2584,5,172,0,0,2582,2584,3,360,180,0,2583,2578,1,0,0,0,2583,2579,1,
	0,0,0,2583,2580,1,0,0,0,2583,2581,1,0,0,0,2583,2582,1,0,0,0,2584,407,1,
	0,0,0,2585,2586,5,143,0,0,2586,2589,3,410,205,0,2587,2589,3,410,205,0,2588,
	2585,1,0,0,0,2588,2587,1,0,0,0,2589,409,1,0,0,0,2590,2591,6,205,-1,0,2591,
	2592,3,412,206,0,2592,2597,1,0,0,0,2593,2594,10,1,0,0,2594,2596,3,416,208,
	0,2595,2593,1,0,0,0,2596,2599,1,0,0,0,2597,2595,1,0,0,0,2597,2598,1,0,0,
	0,2598,411,1,0,0,0,2599,2597,1,0,0,0,2600,2606,3,414,207,0,2601,2606,3,
	426,213,0,2602,2606,3,428,214,0,2603,2606,3,430,215,0,2604,2606,3,418,209,
	0,2605,2600,1,0,0,0,2605,2601,1,0,0,0,2605,2602,1,0,0,0,2605,2603,1,0,0,
	0,2605,2604,1,0,0,0,2606,413,1,0,0,0,2607,2608,3,300,150,0,2608,415,1,0,
	0,0,2609,2610,5,19,0,0,2610,2616,3,418,209,0,2611,2612,5,22,0,0,2612,2613,
	3,410,205,0,2613,2614,5,23,0,0,2614,2616,1,0,0,0,2615,2609,1,0,0,0,2615,
	2611,1,0,0,0,2616,417,1,0,0,0,2617,2618,3,432,216,0,2618,2620,5,20,0,0,
	2619,2621,3,420,210,0,2620,2619,1,0,0,0,2620,2621,1,0,0,0,2621,2622,1,0,
	0,0,2622,2623,5,21,0,0,2623,419,1,0,0,0,2624,2631,3,422,211,0,2625,2631,
	3,424,212,0,2626,2627,3,422,211,0,2627,2628,5,17,0,0,2628,2629,3,424,212,
	0,2629,2631,1,0,0,0,2630,2624,1,0,0,0,2630,2625,1,0,0,0,2630,2626,1,0,0,
	0,2631,421,1,0,0,0,2632,2633,6,211,-1,0,2633,2634,3,410,205,0,2634,2640,
	1,0,0,0,2635,2636,10,1,0,0,2636,2637,5,17,0,0,2637,2639,3,410,205,0,2638,
	2635,1,0,0,0,2639,2642,1,0,0,0,2640,2638,1,0,0,0,2640,2641,1,0,0,0,2641,
	423,1,0,0,0,2642,2640,1,0,0,0,2643,2644,6,212,-1,0,2644,2645,3,432,216,
	0,2645,2646,5,45,0,0,2646,2647,3,410,205,0,2647,2656,1,0,0,0,2648,2649,
	10,1,0,0,2649,2650,5,17,0,0,2650,2651,3,432,216,0,2651,2652,5,45,0,0,2652,
	2653,3,410,205,0,2653,2655,1,0,0,0,2654,2648,1,0,0,0,2655,2658,1,0,0,0,
	2656,2654,1,0,0,0,2656,2657,1,0,0,0,2657,425,1,0,0,0,2658,2656,1,0,0,0,
	2659,2660,5,20,0,0,2660,2661,3,410,205,0,2661,2662,5,21,0,0,2662,427,1,
	0,0,0,2663,2664,6,214,-1,0,2664,2667,5,175,0,0,2665,2667,3,432,216,0,2666,
	2663,1,0,0,0,2666,2665,1,0,0,0,2667,2673,1,0,0,0,2668,2669,10,1,0,0,2669,
	2670,5,19,0,0,2670,2672,3,432,216,0,2671,2668,1,0,0,0,2672,2675,1,0,0,0,
	2673,2671,1,0,0,0,2673,2674,1,0,0,0,2674,429,1,0,0,0,2675,2673,1,0,0,0,
	2676,2682,5,180,0,0,2677,2682,5,182,0,0,2678,2682,5,177,0,0,2679,2682,5,
	167,0,0,2680,2682,5,168,0,0,2681,2676,1,0,0,0,2681,2677,1,0,0,0,2681,2678,
	1,0,0,0,2681,2679,1,0,0,0,2681,2680,1,0,0,0,2682,431,1,0,0,0,2683,2689,
	5,173,0,0,2684,2689,5,171,0,0,2685,2689,5,175,0,0,2686,2689,5,172,0,0,2687,
	2689,3,360,180,0,2688,2683,1,0,0,0,2688,2684,1,0,0,0,2688,2685,1,0,0,0,
	2688,2686,1,0,0,0,2688,2687,1,0,0,0,2689,433,1,0,0,0,2690,2691,5,143,0,
	0,2691,2692,3,436,218,0,2692,2693,5,16,0,0,2693,2698,1,0,0,0,2694,2695,
	3,436,218,0,2695,2696,5,16,0,0,2696,2698,1,0,0,0,2697,2690,1,0,0,0,2697,
	2694,1,0,0,0,2698,435,1,0,0,0,2699,2700,6,218,-1,0,2700,2701,3,438,219,
	0,2701,2706,1,0,0,0,2702,2703,10,1,0,0,2703,2705,3,444,222,0,2704,2702,
	1,0,0,0,2705,2708,1,0,0,0,2706,2704,1,0,0,0,2706,2707,1,0,0,0,2707,437,
	1,0,0,0,2708,2706,1,0,0,0,2709,2715,3,440,220,0,2710,2715,3,442,221,0,2711,
	2715,3,452,226,0,2712,2715,3,454,227,0,2713,2715,3,458,229,0,2714,2709,
	1,0,0,0,2714,2710,1,0,0,0,2714,2711,1,0,0,0,2714,2712,1,0,0,0,2714,2713,
	1,0,0,0,2715,439,1,0,0,0,2716,2717,3,300,150,0,2717,441,1,0,0,0,2718,2719,
	3,362,181,0,2719,2720,3,446,223,0,2720,443,1,0,0,0,2721,2722,5,19,0,0,2722,
	2725,3,446,223,0,2723,2725,3,450,225,0,2724,2721,1,0,0,0,2724,2723,1,0,
	0,0,2725,445,1,0,0,0,2726,2727,3,460,230,0,2727,2729,5,20,0,0,2728,2730,
	3,448,224,0,2729,2728,1,0,0,0,2729,2730,1,0,0,0,2730,2731,1,0,0,0,2731,
	2732,5,21,0,0,2732,447,1,0,0,0,2733,2734,6,224,-1,0,2734,2735,3,436,218,
	0,2735,2741,1,0,0,0,2736,2737,10,1,0,0,2737,2738,5,17,0,0,2738,2740,3,436,
	218,0,2739,2736,1,0,0,0,2740,2743,1,0,0,0,2741,2739,1,0,0,0,2741,2742,1,
	0,0,0,2742,449,1,0,0,0,2743,2741,1,0,0,0,2744,2745,5,22,0,0,2745,2746,3,
	436,218,0,2746,2747,5,23,0,0,2747,451,1,0,0,0,2748,2749,5,20,0,0,2749,2750,
	3,436,218,0,2750,2751,5,21,0,0,2751,453,1,0,0,0,2752,2753,6,227,-1,0,2753,
	2754,3,460,230,0,2754,2760,1,0,0,0,2755,2756,10,1,0,0,2756,2757,5,19,0,
	0,2757,2759,3,460,230,0,2758,2755,1,0,0,0,2759,2762,1,0,0,0,2760,2758,1,
	0,0,0,2760,2761,1,0,0,0,2761,455,1,0,0,0,2762,2760,1,0,0,0,2763,2764,6,
	228,-1,0,2764,2765,3,454,227,0,2765,2770,1,0,0,0,2766,2767,10,1,0,0,2767,
	2769,5,175,0,0,2768,2766,1,0,0,0,2769,2772,1,0,0,0,2770,2768,1,0,0,0,2770,
	2771,1,0,0,0,2771,457,1,0,0,0,2772,2770,1,0,0,0,2773,2779,5,180,0,0,2774,
	2779,5,182,0,0,2775,2779,5,177,0,0,2776,2779,5,167,0,0,2777,2779,5,168,
	0,0,2778,2773,1,0,0,0,2778,2774,1,0,0,0,2778,2775,1,0,0,0,2778,2776,1,0,
	0,0,2778,2777,1,0,0,0,2779,459,1,0,0,0,2780,2786,5,173,0,0,2781,2786,5,
	171,0,0,2782,2786,5,175,0,0,2783,2786,5,172,0,0,2784,2786,3,360,180,0,2785,
	2780,1,0,0,0,2785,2781,1,0,0,0,2785,2782,1,0,0,0,2785,2783,1,0,0,0,2785,
	2784,1,0,0,0,2786,461,1,0,0,0,2787,2788,5,143,0,0,2788,2789,3,464,232,0,
	2789,2790,5,16,0,0,2790,2795,1,0,0,0,2791,2792,3,464,232,0,2792,2793,5,
	16,0,0,2793,2795,1,0,0,0,2794,2787,1,0,0,0,2794,2791,1,0,0,0,2795,463,1,
	0,0,0,2796,2797,6,232,-1,0,2797,2798,3,466,233,0,2798,2803,1,0,0,0,2799,
	2800,10,1,0,0,2800,2802,3,472,236,0,2801,2799,1,0,0,0,2802,2805,1,0,0,0,
	2803,2801,1,0,0,0,2803,2804,1,0,0,0,2804,465,1,0,0,0,2805,2803,1,0,0,0,
	2806,2812,3,468,234,0,2807,2812,3,470,235,0,2808,2812,3,480,240,0,2809,
	2812,3,482,241,0,2810,2812,3,484,242,0,2811,2806,1,0,0,0,2811,2807,1,0,
	0,0,2811,2808,1,0,0,0,2811,2809,1,0,0,0,2811,2810,1,0,0,0,2812,467,1,0,
	0,0,2813,2814,3,300,150,0,2814,469,1,0,0,0,2815,2816,3,362,181,0,2816,2817,
	3,474,237,0,2817,471,1,0,0,0,2818,2819,5,19,0,0,2819,2822,3,474,237,0,2820,
	2822,3,478,239,0,2821,2818,1,0,0,0,2821,2820,1,0,0,0,2822,473,1,0,0,0,2823,
	2824,3,486,243,0,2824,2826,5,20,0,0,2825,2827,3,476,238,0,2826,2825,1,0,
	0,0,2826,2827,1,0,0,0,2827,2828,1,0,0,0,2828,2829,5,21,0,0,2829,475,1,0,
	0,0,2830,2831,6,238,-1,0,2831,2832,3,464,232,0,2832,2838,1,0,0,0,2833,2834,
	10,1,0,0,2834,2835,5,17,0,0,2835,2837,3,464,232,0,2836,2833,1,0,0,0,2837,
	2840,1,0,0,0,2838,2836,1,0,0,0,2838,2839,1,0,0,0,2839,477,1,0,0,0,2840,
	2838,1,0,0,0,2841,2842,5,22,0,0,2842,2843,3,464,232,0,2843,2844,5,23,0,
	0,2844,479,1,0,0,0,2845,2846,5,20,0,0,2846,2847,3,464,232,0,2847,2848,5,
	21,0,0,2848,481,1,0,0,0,2849,2850,6,241,-1,0,2850,2853,5,175,0,0,2851,2853,
	3,486,243,0,2852,2849,1,0,0,0,2852,2851,1,0,0,0,2853,2859,1,0,0,0,2854,
	2855,10,1,0,0,2855,2856,5,19,0,0,2856,2858,3,486,243,0,2857,2854,1,0,0,
	0,2858,2861,1,0,0,0,2859,2857,1,0,0,0,2859,2860,1,0,0,0,2860,483,1,0,0,
	0,2861,2859,1,0,0,0,2862,2868,5,180,0,0,2863,2868,5,182,0,0,2864,2868,5,
	177,0,0,2865,2868,5,167,0,0,2866,2868,5,168,0,0,2867,2862,1,0,0,0,2867,
	2863,1,0,0,0,2867,2864,1,0,0,0,2867,2865,1,0,0,0,2867,2866,1,0,0,0,2868,
	485,1,0,0,0,2869,2875,5,173,0,0,2870,2875,5,171,0,0,2871,2875,5,175,0,0,
	2872,2875,5,172,0,0,2873,2875,3,360,180,0,2874,2869,1,0,0,0,2874,2870,1,
	0,0,0,2874,2871,1,0,0,0,2874,2872,1,0,0,0,2874,2873,1,0,0,0,2875,487,1,
	0,0,0,2876,2879,3,490,245,0,2877,2879,3,492,246,0,2878,2876,1,0,0,0,2878,
	2877,1,0,0,0,2879,489,1,0,0,0,2880,2888,3,498,249,0,2881,2883,3,500,250,
	0,2882,2884,3,512,256,0,2883,2882,1,0,0,0,2883,2884,1,0,0,0,2884,2885,1,
	0,0,0,2885,2886,3,502,251,0,2886,2888,1,0,0,0,2887,2880,1,0,0,0,2887,2881,
	1,0,0,0,2888,491,1,0,0,0,2889,2890,3,494,247,0,2890,2892,3,152,76,0,2891,
	2893,3,512,256,0,2892,2891,1,0,0,0,2892,2893,1,0,0,0,2893,2894,1,0,0,0,
	2894,2895,3,152,76,0,2895,2896,3,496,248,0,2896,493,1,0,0,0,2897,2898,5,
	41,0,0,2898,2901,5,39,0,0,2899,2901,5,43,0,0,2900,2897,1,0,0,0,2900,2899,
	1,0,0,0,2901,495,1,0,0,0,2902,2903,5,41,0,0,2903,2904,5,35,0,0,2904,2905,
	5,39,0,0,2905,497,1,0,0,0,2906,2907,5,41,0,0,2907,2908,3,504,252,0,2908,
	2912,3,152,76,0,2909,2911,3,508,254,0,2910,2909,1,0,0,0,2911,2914,1,0,0,
	0,2912,2910,1,0,0,0,2912,2913,1,0,0,0,2913,2915,1,0,0,0,2914,2912,1,0,0,
	0,2915,2916,5,35,0,0,2916,2917,5,39,0,0,2917,499,1,0,0,0,2918,2919,5,41,
	0,0,2919,2920,3,504,252,0,2920,2924,3,152,76,0,2921,2923,3,508,254,0,2922,
	2921,1,0,0,0,2923,2926,1,0,0,0,2924,2922,1,0,0,0,2924,2925,1,0,0,0,2925,
	2927,1,0,0,0,2926,2924,1,0,0,0,2927,2928,5,39,0,0,2928,501,1,0,0,0,2929,
	2930,5,41,0,0,2930,2931,5,35,0,0,2931,2932,3,504,252,0,2932,2933,5,39,0,
	0,2933,503,1,0,0,0,2934,2939,3,506,253,0,2935,2936,5,19,0,0,2936,2938,3,
	506,253,0,2937,2935,1,0,0,0,2938,2941,1,0,0,0,2939,2937,1,0,0,0,2939,2940,
	1,0,0,0,2940,505,1,0,0,0,2941,2939,1,0,0,0,2942,2946,3,220,110,0,2943,2945,
	3,222,111,0,2944,2943,1,0,0,0,2945,2948,1,0,0,0,2946,2944,1,0,0,0,2946,
	2947,1,0,0,0,2947,507,1,0,0,0,2948,2946,1,0,0,0,2949,2952,3,506,253,0,2950,
	2951,5,45,0,0,2951,2953,3,510,255,0,2952,2950,1,0,0,0,2952,2953,1,0,0,0,
	2953,2954,1,0,0,0,2954,2955,3,152,76,0,2955,509,1,0,0,0,2956,2963,5,177,
	0,0,2957,2959,5,24,0,0,2958,2960,3,92,46,0,2959,2958,1,0,0,0,2959,2960,
	1,0,0,0,2960,2961,1,0,0,0,2961,2963,5,25,0,0,2962,2956,1,0,0,0,2962,2957,
	1,0,0,0,2963,511,1,0,0,0,2964,2966,3,514,257,0,2965,2964,1,0,0,0,2966,2967,
	1,0,0,0,2967,2965,1,0,0,0,2967,2968,1,0,0,0,2968,513,1,0,0,0,2969,2977,
	3,516,258,0,2970,2977,3,490,245,0,2971,2973,5,24,0,0,2972,2974,3,92,46,
	0,2973,2972,1,0,0,0,2973,2974,1,0,0,0,2974,2975,1,0,0,0,2975,2977,5,25,
	0,0,2976,2969,1,0,0,0,2976,2970,1,0,0,0,2976,2971,1,0,0,0,2977,515,1,0,
	0,0,2978,2980,3,518,259,0,2979,2978,1,0,0,0,2980,2981,1,0,0,0,2981,2979,
	1,0,0,0,2981,2982,1,0,0,0,2982,517,1,0,0,0,2983,2986,8,12,0,0,2984,2986,
	5,187,0,0,2985,2983,1,0,0,0,2985,2984,1,0,0,0,2986,519,1,0,0,0,2987,2989,
	5,24,0,0,2988,2990,3,522,261,0,2989,2988,1,0,0,0,2990,2991,1,0,0,0,2991,
	2989,1,0,0,0,2991,2992,1,0,0,0,2992,2993,1,0,0,0,2993,2994,5,25,0,0,2994,
	521,1,0,0,0,2995,2996,3,524,262,0,2996,2998,5,15,0,0,2997,2999,3,526,263,
	0,2998,2997,1,0,0,0,2999,3000,1,0,0,0,3000,2998,1,0,0,0,3000,3001,1,0,0,
	0,3001,3002,1,0,0,0,3002,3003,5,16,0,0,3003,523,1,0,0,0,3004,3005,6,262,
	-1,0,3005,3009,3,220,110,0,3006,3007,5,33,0,0,3007,3009,3,224,112,0,3008,
	3004,1,0,0,0,3008,3006,1,0,0,0,3009,3018,1,0,0,0,3010,3012,10,1,0,0,3011,
	3013,3,222,111,0,3012,3011,1,0,0,0,3013,3014,1,0,0,0,3014,3012,1,0,0,0,
	3014,3015,1,0,0,0,3015,3017,1,0,0,0,3016,3010,1,0,0,0,3017,3020,1,0,0,0,
	3018,3016,1,0,0,0,3018,3019,1,0,0,0,3019,525,1,0,0,0,3020,3018,1,0,0,0,
	3021,3022,5,24,0,0,3022,3023,3,92,46,0,3023,3024,5,25,0,0,3024,3027,1,0,
	0,0,3025,3027,3,528,264,0,3026,3021,1,0,0,0,3026,3025,1,0,0,0,3027,527,
	1,0,0,0,3028,3030,8,13,0,0,3029,3028,1,0,0,0,3030,3031,1,0,0,0,3031,3029,
	1,0,0,0,3031,3032,1,0,0,0,3032,529,1,0,0,0,291,536,543,573,579,584,590,
	592,595,602,611,636,640,651,660,675,684,691,701,723,746,759,770,784,790,
	801,815,835,846,848,857,861,864,873,877,880,888,892,895,902,910,915,919,
	946,953,958,962,985,994,998,1005,1013,1017,1020,1025,1032,1035,1068,1087,
	1094,1128,1137,1160,1176,1181,1189,1198,1221,1227,1237,1264,1293,1299,1305,
	1331,1337,1342,1349,1356,1358,1368,1377,1395,1404,1420,1430,1436,1446,1451,
	1453,1459,1461,1463,1470,1479,1487,1493,1498,1502,1513,1517,1521,1526,1528,
	1533,1539,1546,1550,1561,1565,1569,1574,1577,1584,1589,1607,1615,1622,1624,
	1629,1631,1642,1648,1664,1673,1679,1684,1690,1697,1711,1715,1726,1734,1742,
	1751,1761,1764,1768,1780,1786,1794,1803,1811,1824,1827,1831,1836,1840,1849,
	1875,1884,1886,1891,1911,1916,1925,1929,1936,1941,1945,1957,1974,1979,1982,
	1986,1991,1998,2009,2011,2020,2028,2036,2044,2052,2060,2068,2074,2086,2090,
	2100,2108,2112,2118,2125,2130,2137,2145,2152,2162,2175,2179,2182,2186,2189,
	2197,2206,2215,2224,2241,2246,2255,2266,2273,2281,2291,2299,2302,2306,2311,
	2321,2325,2336,2339,2346,2355,2362,2371,2382,2395,2402,2415,2425,2428,2432,
	2454,2462,2466,2474,2510,2519,2529,2541,2546,2558,2576,2583,2588,2597,2605,
	2615,2620,2630,2640,2656,2666,2673,2681,2688,2697,2706,2714,2724,2729,2741,
	2760,2770,2778,2785,2794,2803,2811,2821,2826,2838,2852,2859,2867,2874,2878,
	2883,2887,2892,2900,2912,2924,2939,2946,2952,2959,2962,2967,2973,2976,2981,
	2985,2991,3000,3008,3014,3018,3026,3031];

	private static __ATN: antlr4.atn.ATN;
	public static get _ATN(): antlr4.atn.ATN {
		if (!EParser.__ATN) {
			EParser.__ATN = new antlr4.atn.ATNDeserializer().deserialize(EParser._serializedATN);
		}

		return EParser.__ATN;
	}


	static DecisionsToDFA = EParser._ATN.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

}

export class Enum_category_declarationContext extends antlr4.context.ParserRuleContext {
	public _name!: Type_identifierContext;
	public _derived!: Type_identifierContext;
	public _attrs!: Attribute_listContext;
	public _symbols!: Category_symbol_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public ENUMERATED(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ENUMERATED, 0);
	}
	public symbols_token(): Symbols_tokenContext {
		return this.getTypedRuleContext(Symbols_tokenContext, 0) as Symbols_tokenContext;
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public type_identifier_list(): Type_identifierContext[] {
		return this.getTypedRuleContexts(Type_identifierContext) as Type_identifierContext[];
	}
	public type_identifier(i: number): Type_identifierContext {
		return this.getTypedRuleContext(Type_identifierContext, i) as Type_identifierContext;
	}
	public category_symbol_list(): Category_symbol_listContext {
		return this.getTypedRuleContext(Category_symbol_listContext, 0) as Category_symbol_listContext;
	}
	public CATEGORY(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CATEGORY, 0);
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public COMMA(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, 0);
	}
	public AND(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, 0);
	}
	public attribute_list(): Attribute_listContext {
		return this.getTypedRuleContext(Attribute_listContext, 0) as Attribute_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_enum_category_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterEnum_category_declaration) {
	 		listener.enterEnum_category_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitEnum_category_declaration) {
	 		listener.exitEnum_category_declaration(this);
		}
	}
}


export class Enum_native_declarationContext extends antlr4.context.ParserRuleContext {
	public _name!: Type_identifierContext;
	public _typ!: Native_typeContext;
	public _symbols!: Native_symbol_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public ENUMERATED(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ENUMERATED, 0);
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public symbols_token(): Symbols_tokenContext {
		return this.getTypedRuleContext(Symbols_tokenContext, 0) as Symbols_tokenContext;
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public type_identifier(): Type_identifierContext {
		return this.getTypedRuleContext(Type_identifierContext, 0) as Type_identifierContext;
	}
	public native_type(): Native_typeContext {
		return this.getTypedRuleContext(Native_typeContext, 0) as Native_typeContext;
	}
	public native_symbol_list(): Native_symbol_listContext {
		return this.getTypedRuleContext(Native_symbol_listContext, 0) as Native_symbol_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_enum_native_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterEnum_native_declaration) {
	 		listener.enterEnum_native_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitEnum_native_declaration) {
	 		listener.exitEnum_native_declaration(this);
		}
	}
}


export class Native_symbolContext extends antlr4.context.ParserRuleContext {
	public _name!: Symbol_identifierContext;
	public _exp!: ExpressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public value_token(): Value_tokenContext {
		return this.getTypedRuleContext(Value_tokenContext, 0) as Value_tokenContext;
	}
	public symbol_identifier(): Symbol_identifierContext {
		return this.getTypedRuleContext(Symbol_identifierContext, 0) as Symbol_identifierContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_native_symbol;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNative_symbol) {
	 		listener.enterNative_symbol(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNative_symbol) {
	 		listener.exitNative_symbol(this);
		}
	}
}


export class Category_symbolContext extends antlr4.context.ParserRuleContext {
	public _name!: Symbol_identifierContext;
	public _args!: With_argument_assignment_listContext;
	public _arg!: Argument_assignmentContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public symbol_identifier(): Symbol_identifierContext {
		return this.getTypedRuleContext(Symbol_identifierContext, 0) as Symbol_identifierContext;
	}
	public with_argument_assignment_list(): With_argument_assignment_listContext {
		return this.getTypedRuleContext(With_argument_assignment_listContext, 0) as With_argument_assignment_listContext;
	}
	public AND(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, 0);
	}
	public argument_assignment(): Argument_assignmentContext {
		return this.getTypedRuleContext(Argument_assignmentContext, 0) as Argument_assignmentContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_category_symbol;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCategory_symbol) {
	 		listener.enterCategory_symbol(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCategory_symbol) {
	 		listener.exitCategory_symbol(this);
		}
	}
}


export class Attribute_declarationContext extends antlr4.context.ParserRuleContext {
	public _name!: Attribute_identifierContext;
	public _typ!: TypedefContext;
	public _match!: Attribute_constraintContext;
	public _indices!: Variable_identifier_listContext;
	public _index!: Variable_identifierContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public ATTRIBUTE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ATTRIBUTE, 0);
	}
	public attribute_identifier(): Attribute_identifierContext {
		return this.getTypedRuleContext(Attribute_identifierContext, 0) as Attribute_identifierContext;
	}
	public typedef(): TypedefContext {
		return this.getTypedRuleContext(TypedefContext, 0) as TypedefContext;
	}
	public STORABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.STORABLE, 0);
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public INDEX(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.INDEX, 0);
	}
	public attribute_constraint(): Attribute_constraintContext {
		return this.getTypedRuleContext(Attribute_constraintContext, 0) as Attribute_constraintContext;
	}
	public variable_identifier_list(): Variable_identifier_listContext {
		return this.getTypedRuleContext(Variable_identifier_listContext, 0) as Variable_identifier_listContext;
	}
	public AND(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, 0);
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_attribute_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAttribute_declaration) {
	 		listener.enterAttribute_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAttribute_declaration) {
	 		listener.exitAttribute_declaration(this);
		}
	}
}


export class Concrete_widget_declarationContext extends antlr4.context.ParserRuleContext {
	public _name!: Type_identifierContext;
	public _derived!: Type_identifierContext;
	public _methods!: Member_method_declaration_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public type_identifier_list(): Type_identifierContext[] {
		return this.getTypedRuleContexts(Type_identifierContext) as Type_identifierContext[];
	}
	public type_identifier(i: number): Type_identifierContext {
		return this.getTypedRuleContext(Type_identifierContext, i) as Type_identifierContext;
	}
	public WIDGET(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WIDGET, 0);
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public METHODS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.METHODS, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public member_method_declaration_list(): Member_method_declaration_listContext {
		return this.getTypedRuleContext(Member_method_declaration_listContext, 0) as Member_method_declaration_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_concrete_widget_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterConcrete_widget_declaration) {
	 		listener.enterConcrete_widget_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitConcrete_widget_declaration) {
	 		listener.exitConcrete_widget_declaration(this);
		}
	}
}


export class Native_widget_declarationContext extends antlr4.context.ParserRuleContext {
	public _name!: Type_identifierContext;
	public _bindings!: Native_category_bindingsContext;
	public _methods!: Native_member_method_declaration_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public NATIVE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.NATIVE, 0);
	}
	public WIDGET(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WIDGET, 0);
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public BINDINGS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BINDINGS, 0);
	}
	public COLON_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COLON);
	}
	public COLON(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, i);
	}
	public indent_list(): IndentContext[] {
		return this.getTypedRuleContexts(IndentContext) as IndentContext[];
	}
	public indent(i: number): IndentContext {
		return this.getTypedRuleContext(IndentContext, i) as IndentContext;
	}
	public dedent_list(): DedentContext[] {
		return this.getTypedRuleContexts(DedentContext) as DedentContext[];
	}
	public dedent(i: number): DedentContext {
		return this.getTypedRuleContext(DedentContext, i) as DedentContext;
	}
	public lfp(): LfpContext {
		return this.getTypedRuleContext(LfpContext, 0) as LfpContext;
	}
	public AND(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, 0);
	}
	public METHODS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.METHODS, 0);
	}
	public type_identifier(): Type_identifierContext {
		return this.getTypedRuleContext(Type_identifierContext, 0) as Type_identifierContext;
	}
	public native_category_bindings(): Native_category_bindingsContext {
		return this.getTypedRuleContext(Native_category_bindingsContext, 0) as Native_category_bindingsContext;
	}
	public native_member_method_declaration_list(): Native_member_method_declaration_listContext {
		return this.getTypedRuleContext(Native_member_method_declaration_listContext, 0) as Native_member_method_declaration_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_native_widget_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNative_widget_declaration) {
	 		listener.enterNative_widget_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNative_widget_declaration) {
	 		listener.exitNative_widget_declaration(this);
		}
	}
}


export class Concrete_category_declarationContext extends antlr4.context.ParserRuleContext {
	public _name!: Type_identifierContext;
	public _derived!: Derived_listContext;
	public _attrs!: Attribute_listContext;
	public _methods!: Member_method_declaration_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public type_identifier(): Type_identifierContext {
		return this.getTypedRuleContext(Type_identifierContext, 0) as Type_identifierContext;
	}
	public CATEGORY(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CATEGORY, 0);
	}
	public STORABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.STORABLE, 0);
	}
	public derived_list(): Derived_listContext {
		return this.getTypedRuleContext(Derived_listContext, 0) as Derived_listContext;
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public METHODS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.METHODS, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public attribute_list(): Attribute_listContext {
		return this.getTypedRuleContext(Attribute_listContext, 0) as Attribute_listContext;
	}
	public member_method_declaration_list(): Member_method_declaration_listContext {
		return this.getTypedRuleContext(Member_method_declaration_listContext, 0) as Member_method_declaration_listContext;
	}
	public COMMA(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, 0);
	}
	public AND(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_concrete_category_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterConcrete_category_declaration) {
	 		listener.enterConcrete_category_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitConcrete_category_declaration) {
	 		listener.exitConcrete_category_declaration(this);
		}
	}
}


export class Singleton_category_declarationContext extends antlr4.context.ParserRuleContext {
	public _name!: Type_identifierContext;
	public _attrs!: Attribute_listContext;
	public _methods!: Member_method_declaration_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public SINGLETON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SINGLETON, 0);
	}
	public type_identifier(): Type_identifierContext {
		return this.getTypedRuleContext(Type_identifierContext, 0) as Type_identifierContext;
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public METHODS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.METHODS, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public attribute_list(): Attribute_listContext {
		return this.getTypedRuleContext(Attribute_listContext, 0) as Attribute_listContext;
	}
	public member_method_declaration_list(): Member_method_declaration_listContext {
		return this.getTypedRuleContext(Member_method_declaration_listContext, 0) as Member_method_declaration_listContext;
	}
	public COMMA(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, 0);
	}
	public AND(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_singleton_category_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSingleton_category_declaration) {
	 		listener.enterSingleton_category_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSingleton_category_declaration) {
	 		listener.exitSingleton_category_declaration(this);
		}
	}
}


export class Derived_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_derived_list;
	}
	public copyFrom(ctx: Derived_listContext): void {
		super.copyFrom(ctx);
	}
}
export class DerivedListItemContext extends Derived_listContext {
	public _items!: Type_identifier_listContext;
	public _item!: Type_identifierContext;
	constructor(parser: EParser, ctx: Derived_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public AND(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, 0);
	}
	public type_identifier_list(): Type_identifier_listContext {
		return this.getTypedRuleContext(Type_identifier_listContext, 0) as Type_identifier_listContext;
	}
	public type_identifier(): Type_identifierContext {
		return this.getTypedRuleContext(Type_identifierContext, 0) as Type_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDerivedListItem) {
	 		listener.enterDerivedListItem(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDerivedListItem) {
	 		listener.exitDerivedListItem(this);
		}
	}
}
export class DerivedListContext extends Derived_listContext {
	public _items!: Type_identifier_listContext;
	constructor(parser: EParser, ctx: Derived_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public type_identifier_list(): Type_identifier_listContext {
		return this.getTypedRuleContext(Type_identifier_listContext, 0) as Type_identifier_listContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDerivedList) {
	 		listener.enterDerivedList(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDerivedList) {
	 		listener.exitDerivedList(this);
		}
	}
}


export class Operator_method_declarationContext extends antlr4.context.ParserRuleContext {
	public _op!: OperatorContext;
	public _arg!: Operator_argumentContext;
	public _typ!: TypedefContext;
	public _stmts!: Statement_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public OPERATOR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.OPERATOR, 0);
	}
	public RECEIVING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RECEIVING, 0);
	}
	public DOING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOING, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public operator(): OperatorContext {
		return this.getTypedRuleContext(OperatorContext, 0) as OperatorContext;
	}
	public operator_argument(): Operator_argumentContext {
		return this.getTypedRuleContext(Operator_argumentContext, 0) as Operator_argumentContext;
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
	public RETURNING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RETURNING, 0);
	}
	public typedef(): TypedefContext {
		return this.getTypedRuleContext(TypedefContext, 0) as TypedefContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_operator_method_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterOperator_method_declaration) {
	 		listener.enterOperator_method_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitOperator_method_declaration) {
	 		listener.exitOperator_method_declaration(this);
		}
	}
}


export class Setter_method_declarationContext extends antlr4.context.ParserRuleContext {
	public _name!: Variable_identifierContext;
	public _stmts!: Statement_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public SETTER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SETTER, 0);
	}
	public DOING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOING, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_setter_method_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSetter_method_declaration) {
	 		listener.enterSetter_method_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSetter_method_declaration) {
	 		listener.exitSetter_method_declaration(this);
		}
	}
}


export class Native_setter_declarationContext extends antlr4.context.ParserRuleContext {
	public _name!: Variable_identifierContext;
	public _stmts!: Native_statement_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public SETTER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SETTER, 0);
	}
	public DOING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOING, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
	public native_statement_list(): Native_statement_listContext {
		return this.getTypedRuleContext(Native_statement_listContext, 0) as Native_statement_listContext;
	}
	public NATIVE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.NATIVE, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_native_setter_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNative_setter_declaration) {
	 		listener.enterNative_setter_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNative_setter_declaration) {
	 		listener.exitNative_setter_declaration(this);
		}
	}
}


export class Getter_method_declarationContext extends antlr4.context.ParserRuleContext {
	public _name!: Variable_identifierContext;
	public _stmts!: Statement_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public GETTER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.GETTER, 0);
	}
	public DOING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOING, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_getter_method_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterGetter_method_declaration) {
	 		listener.enterGetter_method_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitGetter_method_declaration) {
	 		listener.exitGetter_method_declaration(this);
		}
	}
}


export class Native_getter_declarationContext extends antlr4.context.ParserRuleContext {
	public _name!: Variable_identifierContext;
	public _stmts!: Native_statement_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public GETTER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.GETTER, 0);
	}
	public DOING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOING, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
	public native_statement_list(): Native_statement_listContext {
		return this.getTypedRuleContext(Native_statement_listContext, 0) as Native_statement_listContext;
	}
	public NATIVE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.NATIVE, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_native_getter_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNative_getter_declaration) {
	 		listener.enterNative_getter_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNative_getter_declaration) {
	 		listener.exitNative_getter_declaration(this);
		}
	}
}


export class Native_category_declarationContext extends antlr4.context.ParserRuleContext {
	public _name!: Type_identifierContext;
	public _attrs!: Attribute_listContext;
	public _bindings!: Native_category_bindingsContext;
	public _methods!: Native_member_method_declaration_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public NATIVE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.NATIVE, 0);
	}
	public CATEGORY(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CATEGORY, 0);
	}
	public COLON_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COLON);
	}
	public COLON(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, i);
	}
	public indent_list(): IndentContext[] {
		return this.getTypedRuleContexts(IndentContext) as IndentContext[];
	}
	public indent(i: number): IndentContext {
		return this.getTypedRuleContext(IndentContext, i) as IndentContext;
	}
	public dedent_list(): DedentContext[] {
		return this.getTypedRuleContexts(DedentContext) as DedentContext[];
	}
	public dedent(i: number): DedentContext {
		return this.getTypedRuleContext(DedentContext, i) as DedentContext;
	}
	public type_identifier(): Type_identifierContext {
		return this.getTypedRuleContext(Type_identifierContext, 0) as Type_identifierContext;
	}
	public native_category_bindings(): Native_category_bindingsContext {
		return this.getTypedRuleContext(Native_category_bindingsContext, 0) as Native_category_bindingsContext;
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public BINDINGS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BINDINGS, 0);
	}
	public STORABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.STORABLE, 0);
	}
	public lfp(): LfpContext {
		return this.getTypedRuleContext(LfpContext, 0) as LfpContext;
	}
	public AND_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.AND);
	}
	public AND(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, i);
	}
	public METHODS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.METHODS, 0);
	}
	public COMMA(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, 0);
	}
	public native_member_method_declaration_list(): Native_member_method_declaration_listContext {
		return this.getTypedRuleContext(Native_member_method_declaration_listContext, 0) as Native_member_method_declaration_listContext;
	}
	public attribute_list(): Attribute_listContext {
		return this.getTypedRuleContext(Attribute_listContext, 0) as Attribute_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_native_category_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNative_category_declaration) {
	 		listener.enterNative_category_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNative_category_declaration) {
	 		listener.exitNative_category_declaration(this);
		}
	}
}


export class Native_resource_declarationContext extends antlr4.context.ParserRuleContext {
	public _name!: Type_identifierContext;
	public _attrs!: Attribute_listContext;
	public _bindings!: Native_category_bindingsContext;
	public _methods!: Native_member_method_declaration_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public NATIVE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.NATIVE, 0);
	}
	public RESOURCE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RESOURCE, 0);
	}
	public COLON_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COLON);
	}
	public COLON(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, i);
	}
	public indent_list(): IndentContext[] {
		return this.getTypedRuleContexts(IndentContext) as IndentContext[];
	}
	public indent(i: number): IndentContext {
		return this.getTypedRuleContext(IndentContext, i) as IndentContext;
	}
	public dedent_list(): DedentContext[] {
		return this.getTypedRuleContexts(DedentContext) as DedentContext[];
	}
	public dedent(i: number): DedentContext {
		return this.getTypedRuleContext(DedentContext, i) as DedentContext;
	}
	public type_identifier(): Type_identifierContext {
		return this.getTypedRuleContext(Type_identifierContext, 0) as Type_identifierContext;
	}
	public native_category_bindings(): Native_category_bindingsContext {
		return this.getTypedRuleContext(Native_category_bindingsContext, 0) as Native_category_bindingsContext;
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public BINDINGS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BINDINGS, 0);
	}
	public STORABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.STORABLE, 0);
	}
	public lfp(): LfpContext {
		return this.getTypedRuleContext(LfpContext, 0) as LfpContext;
	}
	public AND_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.AND);
	}
	public AND(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, i);
	}
	public METHODS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.METHODS, 0);
	}
	public COMMA(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, 0);
	}
	public native_member_method_declaration_list(): Native_member_method_declaration_listContext {
		return this.getTypedRuleContext(Native_member_method_declaration_listContext, 0) as Native_member_method_declaration_listContext;
	}
	public attribute_list(): Attribute_listContext {
		return this.getTypedRuleContext(Attribute_listContext, 0) as Attribute_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_native_resource_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNative_resource_declaration) {
	 		listener.enterNative_resource_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNative_resource_declaration) {
	 		listener.exitNative_resource_declaration(this);
		}
	}
}


export class Native_category_bindingsContext extends antlr4.context.ParserRuleContext {
	public _items!: Native_category_binding_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public CATEGORY(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CATEGORY, 0);
	}
	public BINDINGS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BINDINGS, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public native_category_binding_list(): Native_category_binding_listContext {
		return this.getTypedRuleContext(Native_category_binding_listContext, 0) as Native_category_binding_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_native_category_bindings;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNative_category_bindings) {
	 		listener.enterNative_category_bindings(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNative_category_bindings) {
	 		listener.exitNative_category_bindings(this);
		}
	}
}


export class Native_category_binding_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_native_category_binding_list;
	}
	public copyFrom(ctx: Native_category_binding_listContext): void {
		super.copyFrom(ctx);
	}
}
export class NativeCategoryBindingListItemContext extends Native_category_binding_listContext {
	public _items!: Native_category_binding_listContext;
	public _item!: Native_category_bindingContext;
	constructor(parser: EParser, ctx: Native_category_binding_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public lfp(): LfpContext {
		return this.getTypedRuleContext(LfpContext, 0) as LfpContext;
	}
	public native_category_binding_list(): Native_category_binding_listContext {
		return this.getTypedRuleContext(Native_category_binding_listContext, 0) as Native_category_binding_listContext;
	}
	public native_category_binding(): Native_category_bindingContext {
		return this.getTypedRuleContext(Native_category_bindingContext, 0) as Native_category_bindingContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNativeCategoryBindingListItem) {
	 		listener.enterNativeCategoryBindingListItem(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNativeCategoryBindingListItem) {
	 		listener.exitNativeCategoryBindingListItem(this);
		}
	}
}
export class NativeCategoryBindingListContext extends Native_category_binding_listContext {
	public _item!: Native_category_bindingContext;
	constructor(parser: EParser, ctx: Native_category_binding_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public native_category_binding(): Native_category_bindingContext {
		return this.getTypedRuleContext(Native_category_bindingContext, 0) as Native_category_bindingContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNativeCategoryBindingList) {
	 		listener.enterNativeCategoryBindingList(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNativeCategoryBindingList) {
	 		listener.exitNativeCategoryBindingList(this);
		}
	}
}


export class Attribute_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_attribute_list;
	}
	public copyFrom(ctx: Attribute_listContext): void {
		super.copyFrom(ctx);
	}
}
export class AttributeListContext extends Attribute_listContext {
	public _item!: Attribute_identifierContext;
	constructor(parser: EParser, ctx: Attribute_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public ATTRIBUTE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ATTRIBUTE, 0);
	}
	public attribute_identifier(): Attribute_identifierContext {
		return this.getTypedRuleContext(Attribute_identifierContext, 0) as Attribute_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAttributeList) {
	 		listener.enterAttributeList(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAttributeList) {
	 		listener.exitAttributeList(this);
		}
	}
}
export class AttributeListItemContext extends Attribute_listContext {
	public _items!: Attribute_identifier_listContext;
	public _item!: Attribute_identifierContext;
	constructor(parser: EParser, ctx: Attribute_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public ATTRIBUTES(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ATTRIBUTES, 0);
	}
	public attribute_identifier_list(): Attribute_identifier_listContext {
		return this.getTypedRuleContext(Attribute_identifier_listContext, 0) as Attribute_identifier_listContext;
	}
	public AND(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, 0);
	}
	public attribute_identifier(): Attribute_identifierContext {
		return this.getTypedRuleContext(Attribute_identifierContext, 0) as Attribute_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAttributeListItem) {
	 		listener.enterAttributeListItem(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAttributeListItem) {
	 		listener.exitAttributeListItem(this);
		}
	}
}


export class Abstract_global_method_declarationContext extends antlr4.context.ParserRuleContext {
	public _name!: Type_identifierContext;
	public _args!: Full_argument_listContext;
	public _typ!: TypedefContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public ABSTRACT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ABSTRACT, 0);
	}
	public METHOD(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.METHOD, 0);
	}
	public type_identifier(): Type_identifierContext {
		return this.getTypedRuleContext(Type_identifierContext, 0) as Type_identifierContext;
	}
	public RECEIVING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RECEIVING, 0);
	}
	public RETURNING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RETURNING, 0);
	}
	public full_argument_list(): Full_argument_listContext {
		return this.getTypedRuleContext(Full_argument_listContext, 0) as Full_argument_listContext;
	}
	public typedef(): TypedefContext {
		return this.getTypedRuleContext(TypedefContext, 0) as TypedefContext;
	}
	public MUTABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MUTABLE, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_abstract_global_method_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAbstract_global_method_declaration) {
	 		listener.enterAbstract_global_method_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAbstract_global_method_declaration) {
	 		listener.exitAbstract_global_method_declaration(this);
		}
	}
}


export class Abstract_member_method_declarationContext extends antlr4.context.ParserRuleContext {
	public _name!: Method_identifierContext;
	public _args!: Full_argument_listContext;
	public _typ!: TypedefContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public ABSTRACT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ABSTRACT, 0);
	}
	public METHOD(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.METHOD, 0);
	}
	public method_identifier(): Method_identifierContext {
		return this.getTypedRuleContext(Method_identifierContext, 0) as Method_identifierContext;
	}
	public RECEIVING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RECEIVING, 0);
	}
	public RETURNING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RETURNING, 0);
	}
	public full_argument_list(): Full_argument_listContext {
		return this.getTypedRuleContext(Full_argument_listContext, 0) as Full_argument_listContext;
	}
	public typedef(): TypedefContext {
		return this.getTypedRuleContext(TypedefContext, 0) as TypedefContext;
	}
	public MUTABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MUTABLE, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_abstract_member_method_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAbstract_member_method_declaration) {
	 		listener.enterAbstract_member_method_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAbstract_member_method_declaration) {
	 		listener.exitAbstract_member_method_declaration(this);
		}
	}
}


export class Concrete_method_declarationContext extends antlr4.context.ParserRuleContext {
	public _name!: Method_identifierContext;
	public _args!: Full_argument_listContext;
	public _typ!: TypedefContext;
	public _stmts!: Statement_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public METHOD(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.METHOD, 0);
	}
	public DOING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOING, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public method_identifier(): Method_identifierContext {
		return this.getTypedRuleContext(Method_identifierContext, 0) as Method_identifierContext;
	}
	public PASS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.PASS, 0);
	}
	public RECEIVING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RECEIVING, 0);
	}
	public RETURNING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RETURNING, 0);
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
	public full_argument_list(): Full_argument_listContext {
		return this.getTypedRuleContext(Full_argument_listContext, 0) as Full_argument_listContext;
	}
	public typedef(): TypedefContext {
		return this.getTypedRuleContext(TypedefContext, 0) as TypedefContext;
	}
	public MUTABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MUTABLE, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_concrete_method_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterConcrete_method_declaration) {
	 		listener.enterConcrete_method_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitConcrete_method_declaration) {
	 		listener.exitConcrete_method_declaration(this);
		}
	}
}


export class Native_method_declarationContext extends antlr4.context.ParserRuleContext {
	public _name!: Method_identifierContext;
	public _args!: Full_argument_listContext;
	public _typ!: Category_or_any_typeContext;
	public _stmts!: Native_statement_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public METHOD(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.METHOD, 0);
	}
	public DOING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOING, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public method_identifier(): Method_identifierContext {
		return this.getTypedRuleContext(Method_identifierContext, 0) as Method_identifierContext;
	}
	public native_statement_list(): Native_statement_listContext {
		return this.getTypedRuleContext(Native_statement_listContext, 0) as Native_statement_listContext;
	}
	public NATIVE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.NATIVE, 0);
	}
	public RECEIVING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RECEIVING, 0);
	}
	public RETURNING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RETURNING, 0);
	}
	public full_argument_list(): Full_argument_listContext {
		return this.getTypedRuleContext(Full_argument_listContext, 0) as Full_argument_listContext;
	}
	public category_or_any_type(): Category_or_any_typeContext {
		return this.getTypedRuleContext(Category_or_any_typeContext, 0) as Category_or_any_typeContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_native_method_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNative_method_declaration) {
	 		listener.enterNative_method_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNative_method_declaration) {
	 		listener.exitNative_method_declaration(this);
		}
	}
}


export class Test_method_declarationContext extends antlr4.context.ParserRuleContext {
	public _name!: antlr4.Token;
	public _stmts!: Statement_listContext;
	public _exps!: Assertion_listContext;
	public _error!: Symbol_identifierContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public TEST(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TEST, 0);
	}
	public METHOD(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.METHOD, 0);
	}
	public DOING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOING, 0);
	}
	public COLON_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COLON);
	}
	public COLON(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, i);
	}
	public indent_list(): IndentContext[] {
		return this.getTypedRuleContexts(IndentContext) as IndentContext[];
	}
	public indent(i: number): IndentContext {
		return this.getTypedRuleContext(IndentContext, i) as IndentContext;
	}
	public dedent_list(): DedentContext[] {
		return this.getTypedRuleContexts(DedentContext) as DedentContext[];
	}
	public dedent(i: number): DedentContext {
		return this.getTypedRuleContext(DedentContext, i) as DedentContext;
	}
	public lfp(): LfpContext {
		return this.getTypedRuleContext(LfpContext, 0) as LfpContext;
	}
	public AND(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, 0);
	}
	public VERIFYING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VERIFYING, 0);
	}
	public TEXT_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TEXT_LITERAL, 0);
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
	public symbol_identifier(): Symbol_identifierContext {
		return this.getTypedRuleContext(Symbol_identifierContext, 0) as Symbol_identifierContext;
	}
	public assertion_list(): Assertion_listContext {
		return this.getTypedRuleContext(Assertion_listContext, 0) as Assertion_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_test_method_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterTest_method_declaration) {
	 		listener.enterTest_method_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitTest_method_declaration) {
	 		listener.exitTest_method_declaration(this);
		}
	}
}


export class AssertionContext extends antlr4.context.ParserRuleContext {
	public _exp!: ExpressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_assertion;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAssertion) {
	 		listener.enterAssertion(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAssertion) {
	 		listener.exitAssertion(this);
		}
	}
}


export class Full_argument_listContext extends antlr4.context.ParserRuleContext {
	public _items!: Argument_listContext;
	public _item!: ArgumentContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public argument_list(): Argument_listContext {
		return this.getTypedRuleContext(Argument_listContext, 0) as Argument_listContext;
	}
	public AND(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, 0);
	}
	public argument(): ArgumentContext {
		return this.getTypedRuleContext(ArgumentContext, 0) as ArgumentContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_full_argument_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterFull_argument_list) {
	 		listener.enterFull_argument_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitFull_argument_list) {
	 		listener.exitFull_argument_list(this);
		}
	}
}


export class Typed_argumentContext extends antlr4.context.ParserRuleContext {
	public _typ!: Category_or_any_typeContext;
	public _name!: Variable_identifierContext;
	public _attrs!: Attribute_listContext;
	public _value!: Literal_expressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public category_or_any_type(): Category_or_any_typeContext {
		return this.getTypedRuleContext(Category_or_any_typeContext, 0) as Category_or_any_typeContext;
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
	public EQ(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.EQ, 0);
	}
	public attribute_list(): Attribute_listContext {
		return this.getTypedRuleContext(Attribute_listContext, 0) as Attribute_listContext;
	}
	public literal_expression(): Literal_expressionContext {
		return this.getTypedRuleContext(Literal_expressionContext, 0) as Literal_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_typed_argument;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterTyped_argument) {
	 		listener.enterTyped_argument(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitTyped_argument) {
	 		listener.exitTyped_argument(this);
		}
	}
}


export class StatementContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_statement;
	}
	public copyFrom(ctx: StatementContext): void {
		super.copyFrom(ctx);
	}
}
export class CommentStatementContext extends StatementContext {
	public _decl!: Comment_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public comment_statement(): Comment_statementContext {
		return this.getTypedRuleContext(Comment_statementContext, 0) as Comment_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCommentStatement) {
	 		listener.enterCommentStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCommentStatement) {
	 		listener.exitCommentStatement(this);
		}
	}
}
export class StoreStatementContext extends StatementContext {
	public _stmt!: Store_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public store_statement(): Store_statementContext {
		return this.getTypedRuleContext(Store_statementContext, 0) as Store_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterStoreStatement) {
	 		listener.enterStoreStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitStoreStatement) {
	 		listener.exitStoreStatement(this);
		}
	}
}
export class WithSingletonStatementContext extends StatementContext {
	public _stmt!: With_singleton_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public with_singleton_statement(): With_singleton_statementContext {
		return this.getTypedRuleContext(With_singleton_statementContext, 0) as With_singleton_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterWithSingletonStatement) {
	 		listener.enterWithSingletonStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitWithSingletonStatement) {
	 		listener.exitWithSingletonStatement(this);
		}
	}
}
export class WriteStatementContext extends StatementContext {
	public _stmt!: Write_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public write_statement(): Write_statementContext {
		return this.getTypedRuleContext(Write_statementContext, 0) as Write_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterWriteStatement) {
	 		listener.enterWriteStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitWriteStatement) {
	 		listener.exitWriteStatement(this);
		}
	}
}
export class WhileStatementContext extends StatementContext {
	public _stmt!: While_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public while_statement(): While_statementContext {
		return this.getTypedRuleContext(While_statementContext, 0) as While_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterWhileStatement) {
	 		listener.enterWhileStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitWhileStatement) {
	 		listener.exitWhileStatement(this);
		}
	}
}
export class WithResourceStatementContext extends StatementContext {
	public _stmt!: With_resource_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public with_resource_statement(): With_resource_statementContext {
		return this.getTypedRuleContext(With_resource_statementContext, 0) as With_resource_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterWithResourceStatement) {
	 		listener.enterWithResourceStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitWithResourceStatement) {
	 		listener.exitWithResourceStatement(this);
		}
	}
}
export class RaiseStatementContext extends StatementContext {
	public _stmt!: Raise_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public raise_statement(): Raise_statementContext {
		return this.getTypedRuleContext(Raise_statementContext, 0) as Raise_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterRaiseStatement) {
	 		listener.enterRaiseStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitRaiseStatement) {
	 		listener.exitRaiseStatement(this);
		}
	}
}
export class FetchStatementContext extends StatementContext {
	public _stmt!: Fetch_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public fetch_statement(): Fetch_statementContext {
		return this.getTypedRuleContext(Fetch_statementContext, 0) as Fetch_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterFetchStatement) {
	 		listener.enterFetchStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitFetchStatement) {
	 		listener.exitFetchStatement(this);
		}
	}
}
export class BreakStatementContext extends StatementContext {
	public _stmt!: Break_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public break_statement(): Break_statementContext {
		return this.getTypedRuleContext(Break_statementContext, 0) as Break_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterBreakStatement) {
	 		listener.enterBreakStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitBreakStatement) {
	 		listener.exitBreakStatement(this);
		}
	}
}
export class AssignInstanceStatementContext extends StatementContext {
	public _stmt!: Assign_instance_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public assign_instance_statement(): Assign_instance_statementContext {
		return this.getTypedRuleContext(Assign_instance_statementContext, 0) as Assign_instance_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAssignInstanceStatement) {
	 		listener.enterAssignInstanceStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAssignInstanceStatement) {
	 		listener.exitAssignInstanceStatement(this);
		}
	}
}
export class IfStatementContext extends StatementContext {
	public _stmt!: If_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public if_statement(): If_statementContext {
		return this.getTypedRuleContext(If_statementContext, 0) as If_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterIfStatement) {
	 		listener.enterIfStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitIfStatement) {
	 		listener.exitIfStatement(this);
		}
	}
}
export class SwitchStatementContext extends StatementContext {
	public _stmt!: Switch_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public switch_statement(): Switch_statementContext {
		return this.getTypedRuleContext(Switch_statementContext, 0) as Switch_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSwitchStatement) {
	 		listener.enterSwitchStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSwitchStatement) {
	 		listener.exitSwitchStatement(this);
		}
	}
}
export class TryStatementContext extends StatementContext {
	public _stmt!: Try_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public try_statement(): Try_statementContext {
		return this.getTypedRuleContext(Try_statementContext, 0) as Try_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterTryStatement) {
	 		listener.enterTryStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitTryStatement) {
	 		listener.exitTryStatement(this);
		}
	}
}
export class ReadStatementContext extends StatementContext {
	public _stmt!: Read_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public read_statement(): Read_statementContext {
		return this.getTypedRuleContext(Read_statementContext, 0) as Read_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterReadStatement) {
	 		listener.enterReadStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitReadStatement) {
	 		listener.exitReadStatement(this);
		}
	}
}
export class MethodCallStatementContext extends StatementContext {
	public _stmt!: Method_call_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public method_call_statement(): Method_call_statementContext {
		return this.getTypedRuleContext(Method_call_statementContext, 0) as Method_call_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMethodCallStatement) {
	 		listener.enterMethodCallStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMethodCallStatement) {
	 		listener.exitMethodCallStatement(this);
		}
	}
}
export class ReturnStatementContext extends StatementContext {
	public _stmt!: Return_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public return_statement(): Return_statementContext {
		return this.getTypedRuleContext(Return_statementContext, 0) as Return_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterReturnStatement) {
	 		listener.enterReturnStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitReturnStatement) {
	 		listener.exitReturnStatement(this);
		}
	}
}
export class AssignTupleStatementContext extends StatementContext {
	public _stmt!: Assign_tuple_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public assign_tuple_statement(): Assign_tuple_statementContext {
		return this.getTypedRuleContext(Assign_tuple_statementContext, 0) as Assign_tuple_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAssignTupleStatement) {
	 		listener.enterAssignTupleStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAssignTupleStatement) {
	 		listener.exitAssignTupleStatement(this);
		}
	}
}
export class ClosureStatementContext extends StatementContext {
	public _decl!: Concrete_method_declarationContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public concrete_method_declaration(): Concrete_method_declarationContext {
		return this.getTypedRuleContext(Concrete_method_declarationContext, 0) as Concrete_method_declarationContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterClosureStatement) {
	 		listener.enterClosureStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitClosureStatement) {
	 		listener.exitClosureStatement(this);
		}
	}
}
export class FlushStatementContext extends StatementContext {
	public _stmt!: Flush_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public flush_statement(): Flush_statementContext {
		return this.getTypedRuleContext(Flush_statementContext, 0) as Flush_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterFlushStatement) {
	 		listener.enterFlushStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitFlushStatement) {
	 		listener.exitFlushStatement(this);
		}
	}
}
export class DoWhileStatementContext extends StatementContext {
	public _stmt!: Do_while_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public do_while_statement(): Do_while_statementContext {
		return this.getTypedRuleContext(Do_while_statementContext, 0) as Do_while_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDoWhileStatement) {
	 		listener.enterDoWhileStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDoWhileStatement) {
	 		listener.exitDoWhileStatement(this);
		}
	}
}
export class ForEachStatementContext extends StatementContext {
	public _stmt!: For_each_statementContext;
	constructor(parser: EParser, ctx: StatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public for_each_statement(): For_each_statementContext {
		return this.getTypedRuleContext(For_each_statementContext, 0) as For_each_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterForEachStatement) {
	 		listener.enterForEachStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitForEachStatement) {
	 		listener.exitForEachStatement(this);
		}
	}
}


export class Flush_statementContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FLUSH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FLUSH, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_flush_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterFlush_statement) {
	 		listener.enterFlush_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitFlush_statement) {
	 		listener.exitFlush_statement(this);
		}
	}
}


export class Store_statementContext extends antlr4.context.ParserRuleContext {
	public _to_del!: Expression_listContext;
	public _to_add!: Expression_listContext;
	public _with_meta!: ExpressionContext;
	public _stmts!: Statement_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DELETE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DELETE, 0);
	}
	public STORE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.STORE, 0);
	}
	public expression_list_list(): Expression_listContext[] {
		return this.getTypedRuleContexts(Expression_listContext) as Expression_listContext[];
	}
	public expression_list(i: number): Expression_listContext {
		return this.getTypedRuleContext(Expression_listContext, i) as Expression_listContext;
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public metadata(): MetadataContext {
		return this.getTypedRuleContext(MetadataContext, 0) as MetadataContext;
	}
	public THEN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.THEN, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
	public AND(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_store_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterStore_statement) {
	 		listener.enterStore_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitStore_statement) {
	 		listener.exitStore_statement(this);
		}
	}
}


export class Method_call_statementContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_method_call_statement;
	}
	public copyFrom(ctx: Method_call_statementContext): void {
		super.copyFrom(ctx);
	}
}
export class InvokeStatementContext extends Method_call_statementContext {
	public _exp!: Invocation_expressionContext;
	constructor(parser: EParser, ctx: Method_call_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public invocation_expression(): Invocation_expressionContext {
		return this.getTypedRuleContext(Invocation_expressionContext, 0) as Invocation_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterInvokeStatement) {
	 		listener.enterInvokeStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitInvokeStatement) {
	 		listener.exitInvokeStatement(this);
		}
	}
}
export class UnresolvedWithArgsStatementContext extends Method_call_statementContext {
	public _exp1!: Instance_expressionContext;
	public _exp2!: Unresolved_expressionContext;
	public _args!: Argument_assignment_listContext;
	public _name!: Variable_identifierContext;
	public _stmts!: Statement_listContext;
	constructor(parser: EParser, ctx: Method_call_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public instance_expression(): Instance_expressionContext {
		return this.getTypedRuleContext(Instance_expressionContext, 0) as Instance_expressionContext;
	}
	public unresolved_expression(): Unresolved_expressionContext {
		return this.getTypedRuleContext(Unresolved_expressionContext, 0) as Unresolved_expressionContext;
	}
	public THEN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.THEN, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public argument_assignment_list(): Argument_assignment_listContext {
		return this.getTypedRuleContext(Argument_assignment_listContext, 0) as Argument_assignment_listContext;
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterUnresolvedWithArgsStatement) {
	 		listener.enterUnresolvedWithArgsStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitUnresolvedWithArgsStatement) {
	 		listener.exitUnresolvedWithArgsStatement(this);
		}
	}
}


export class With_resource_statementContext extends antlr4.context.ParserRuleContext {
	public _stmt!: Assign_variable_statementContext;
	public _stmts!: Statement_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public COMMA(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, 0);
	}
	public DO(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DO, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public assign_variable_statement(): Assign_variable_statementContext {
		return this.getTypedRuleContext(Assign_variable_statementContext, 0) as Assign_variable_statementContext;
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_with_resource_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterWith_resource_statement) {
	 		listener.enterWith_resource_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitWith_resource_statement) {
	 		listener.exitWith_resource_statement(this);
		}
	}
}


export class With_singleton_statementContext extends antlr4.context.ParserRuleContext {
	public _typ!: Type_identifierContext;
	public _stmts!: Statement_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public COMMA(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, 0);
	}
	public DO(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DO, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public type_identifier(): Type_identifierContext {
		return this.getTypedRuleContext(Type_identifierContext, 0) as Type_identifierContext;
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_with_singleton_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterWith_singleton_statement) {
	 		listener.enterWith_singleton_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitWith_singleton_statement) {
	 		listener.exitWith_singleton_statement(this);
		}
	}
}


export class Switch_statementContext extends antlr4.context.ParserRuleContext {
	public _exp!: ExpressionContext;
	public _cases!: Switch_case_statement_listContext;
	public _stmts!: Statement_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SWITCH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SWITCH, 0);
	}
	public ON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ON, 0);
	}
	public COLON_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COLON);
	}
	public COLON(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, i);
	}
	public indent_list(): IndentContext[] {
		return this.getTypedRuleContexts(IndentContext) as IndentContext[];
	}
	public indent(i: number): IndentContext {
		return this.getTypedRuleContext(IndentContext, i) as IndentContext;
	}
	public dedent_list(): DedentContext[] {
		return this.getTypedRuleContexts(DedentContext) as DedentContext[];
	}
	public dedent(i: number): DedentContext {
		return this.getTypedRuleContext(DedentContext, i) as DedentContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public switch_case_statement_list(): Switch_case_statement_listContext {
		return this.getTypedRuleContext(Switch_case_statement_listContext, 0) as Switch_case_statement_listContext;
	}
	public lfp(): LfpContext {
		return this.getTypedRuleContext(LfpContext, 0) as LfpContext;
	}
	public OTHERWISE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.OTHERWISE, 0);
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_switch_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSwitch_statement) {
	 		listener.enterSwitch_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSwitch_statement) {
	 		listener.exitSwitch_statement(this);
		}
	}
}


export class Switch_case_statementContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_switch_case_statement;
	}
	public copyFrom(ctx: Switch_case_statementContext): void {
		super.copyFrom(ctx);
	}
}
export class AtomicSwitchCaseContext extends Switch_case_statementContext {
	public _exp!: Atomic_literalContext;
	public _stmts!: Statement_listContext;
	constructor(parser: EParser, ctx: Switch_case_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public WHEN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WHEN, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public atomic_literal(): Atomic_literalContext {
		return this.getTypedRuleContext(Atomic_literalContext, 0) as Atomic_literalContext;
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAtomicSwitchCase) {
	 		listener.enterAtomicSwitchCase(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAtomicSwitchCase) {
	 		listener.exitAtomicSwitchCase(this);
		}
	}
}
export class CollectionSwitchCaseContext extends Switch_case_statementContext {
	public _exp!: Literal_collectionContext;
	public _stmts!: Statement_listContext;
	constructor(parser: EParser, ctx: Switch_case_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public WHEN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WHEN, 0);
	}
	public IN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.IN, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public literal_collection(): Literal_collectionContext {
		return this.getTypedRuleContext(Literal_collectionContext, 0) as Literal_collectionContext;
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCollectionSwitchCase) {
	 		listener.enterCollectionSwitchCase(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCollectionSwitchCase) {
	 		listener.exitCollectionSwitchCase(this);
		}
	}
}


export class For_each_statementContext extends antlr4.context.ParserRuleContext {
	public _name1!: Variable_identifierContext;
	public _name2!: Variable_identifierContext;
	public _source!: ExpressionContext;
	public _stmts!: Statement_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FOR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FOR, 0);
	}
	public EACH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.EACH, 0);
	}
	public IN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.IN, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public variable_identifier_list(): Variable_identifierContext[] {
		return this.getTypedRuleContexts(Variable_identifierContext) as Variable_identifierContext[];
	}
	public variable_identifier(i: number): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, i) as Variable_identifierContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
	public COMMA(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_for_each_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterFor_each_statement) {
	 		listener.enterFor_each_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitFor_each_statement) {
	 		listener.exitFor_each_statement(this);
		}
	}
}


export class Do_while_statementContext extends antlr4.context.ParserRuleContext {
	public _stmts!: Statement_listContext;
	public _exp!: ExpressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DO(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DO, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public lfp(): LfpContext {
		return this.getTypedRuleContext(LfpContext, 0) as LfpContext;
	}
	public WHILE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WHILE, 0);
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_do_while_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDo_while_statement) {
	 		listener.enterDo_while_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDo_while_statement) {
	 		listener.exitDo_while_statement(this);
		}
	}
}


export class While_statementContext extends antlr4.context.ParserRuleContext {
	public _exp!: ExpressionContext;
	public _stmts!: Statement_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WHILE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WHILE, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_while_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterWhile_statement) {
	 		listener.enterWhile_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitWhile_statement) {
	 		listener.exitWhile_statement(this);
		}
	}
}


export class If_statementContext extends antlr4.context.ParserRuleContext {
	public _exp!: ExpressionContext;
	public _stmts!: Statement_listContext;
	public _elseIfs!: Else_if_statement_listContext;
	public _elseStmts!: Statement_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IF(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.IF, 0);
	}
	public COLON_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COLON);
	}
	public COLON(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, i);
	}
	public indent_list(): IndentContext[] {
		return this.getTypedRuleContexts(IndentContext) as IndentContext[];
	}
	public indent(i: number): IndentContext {
		return this.getTypedRuleContext(IndentContext, i) as IndentContext;
	}
	public dedent_list(): DedentContext[] {
		return this.getTypedRuleContexts(DedentContext) as DedentContext[];
	}
	public dedent(i: number): DedentContext {
		return this.getTypedRuleContext(DedentContext, i) as DedentContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public statement_list_list(): Statement_listContext[] {
		return this.getTypedRuleContexts(Statement_listContext) as Statement_listContext[];
	}
	public statement_list(i: number): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, i) as Statement_listContext;
	}
	public lfp_list(): LfpContext[] {
		return this.getTypedRuleContexts(LfpContext) as LfpContext[];
	}
	public lfp(i: number): LfpContext {
		return this.getTypedRuleContext(LfpContext, i) as LfpContext;
	}
	public ELSE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ELSE, 0);
	}
	public else_if_statement_list(): Else_if_statement_listContext {
		return this.getTypedRuleContext(Else_if_statement_listContext, 0) as Else_if_statement_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_if_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterIf_statement) {
	 		listener.enterIf_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitIf_statement) {
	 		listener.exitIf_statement(this);
		}
	}
}


export class Else_if_statement_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_else_if_statement_list;
	}
	public copyFrom(ctx: Else_if_statement_listContext): void {
		super.copyFrom(ctx);
	}
}
export class ElseIfStatementListContext extends Else_if_statement_listContext {
	public _exp!: ExpressionContext;
	public _stmts!: Statement_listContext;
	constructor(parser: EParser, ctx: Else_if_statement_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ELSE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ELSE, 0);
	}
	public IF(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.IF, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterElseIfStatementList) {
	 		listener.enterElseIfStatementList(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitElseIfStatementList) {
	 		listener.exitElseIfStatementList(this);
		}
	}
}
export class ElseIfStatementListItemContext extends Else_if_statement_listContext {
	public _items!: Else_if_statement_listContext;
	public _exp!: ExpressionContext;
	public _stmts!: Statement_listContext;
	constructor(parser: EParser, ctx: Else_if_statement_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public lfp(): LfpContext {
		return this.getTypedRuleContext(LfpContext, 0) as LfpContext;
	}
	public ELSE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ELSE, 0);
	}
	public IF(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.IF, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public else_if_statement_list(): Else_if_statement_listContext {
		return this.getTypedRuleContext(Else_if_statement_listContext, 0) as Else_if_statement_listContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterElseIfStatementListItem) {
	 		listener.enterElseIfStatementListItem(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitElseIfStatementListItem) {
	 		listener.exitElseIfStatementListItem(this);
		}
	}
}


export class Raise_statementContext extends antlr4.context.ParserRuleContext {
	public _exp!: ExpressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RAISE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RAISE, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_raise_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterRaise_statement) {
	 		listener.enterRaise_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitRaise_statement) {
	 		listener.exitRaise_statement(this);
		}
	}
}


export class Try_statementContext extends antlr4.context.ParserRuleContext {
	public _name!: Variable_identifierContext;
	public _stmts!: Statement_listContext;
	public _handlers!: Catch_statement_listContext;
	public _anyStmts!: Statement_listContext;
	public _finalStmts!: Statement_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SWITCH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SWITCH, 0);
	}
	public ON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ON, 0);
	}
	public DOING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOING, 0);
	}
	public COLON_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COLON);
	}
	public COLON(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, i);
	}
	public indent_list(): IndentContext[] {
		return this.getTypedRuleContexts(IndentContext) as IndentContext[];
	}
	public indent(i: number): IndentContext {
		return this.getTypedRuleContext(IndentContext, i) as IndentContext;
	}
	public dedent_list(): DedentContext[] {
		return this.getTypedRuleContexts(DedentContext) as DedentContext[];
	}
	public dedent(i: number): DedentContext {
		return this.getTypedRuleContext(DedentContext, i) as DedentContext;
	}
	public lfs_list(): LfsContext[] {
		return this.getTypedRuleContexts(LfsContext) as LfsContext[];
	}
	public lfs(i: number): LfsContext {
		return this.getTypedRuleContext(LfsContext, i) as LfsContext;
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
	public statement_list_list(): Statement_listContext[] {
		return this.getTypedRuleContexts(Statement_listContext) as Statement_listContext[];
	}
	public statement_list(i: number): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, i) as Statement_listContext;
	}
	public ALWAYS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ALWAYS, 0);
	}
	public catch_statement_list(): Catch_statement_listContext {
		return this.getTypedRuleContext(Catch_statement_listContext, 0) as Catch_statement_listContext;
	}
	public OTHERWISE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.OTHERWISE, 0);
	}
	public WHEN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WHEN, 0);
	}
	public ANY(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ANY, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_try_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterTry_statement) {
	 		listener.enterTry_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitTry_statement) {
	 		listener.exitTry_statement(this);
		}
	}
}


export class Catch_statementContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_catch_statement;
	}
	public copyFrom(ctx: Catch_statementContext): void {
		super.copyFrom(ctx);
	}
}
export class CatchAtomicStatementContext extends Catch_statementContext {
	public _name!: Symbol_identifierContext;
	public _stmts!: Statement_listContext;
	constructor(parser: EParser, ctx: Catch_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public WHEN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WHEN, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public lfs(): LfsContext {
		return this.getTypedRuleContext(LfsContext, 0) as LfsContext;
	}
	public symbol_identifier(): Symbol_identifierContext {
		return this.getTypedRuleContext(Symbol_identifierContext, 0) as Symbol_identifierContext;
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCatchAtomicStatement) {
	 		listener.enterCatchAtomicStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCatchAtomicStatement) {
	 		listener.exitCatchAtomicStatement(this);
		}
	}
}
export class CatchCollectionStatementContext extends Catch_statementContext {
	public _exp!: Symbol_listContext;
	public _stmts!: Statement_listContext;
	constructor(parser: EParser, ctx: Catch_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public WHEN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WHEN, 0);
	}
	public IN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.IN, 0);
	}
	public LBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LBRAK, 0);
	}
	public RBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RBRAK, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public lfs(): LfsContext {
		return this.getTypedRuleContext(LfsContext, 0) as LfsContext;
	}
	public symbol_list(): Symbol_listContext {
		return this.getTypedRuleContext(Symbol_listContext, 0) as Symbol_listContext;
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCatchCollectionStatement) {
	 		listener.enterCatchCollectionStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCatchCollectionStatement) {
	 		listener.exitCatchCollectionStatement(this);
		}
	}
}


export class Break_statementContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BREAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BREAK, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_break_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterBreak_statement) {
	 		listener.enterBreak_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitBreak_statement) {
	 		listener.exitBreak_statement(this);
		}
	}
}


export class Return_statementContext extends antlr4.context.ParserRuleContext {
	public _exp!: ExpressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RETURN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RETURN, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_return_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterReturn_statement) {
	 		listener.enterReturn_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitReturn_statement) {
	 		listener.exitReturn_statement(this);
		}
	}
}


export class ExpressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_expression;
	}
	public copyFrom(ctx: ExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class IntDivideExpressionContext extends ExpressionContext {
	public _left!: ExpressionContext;
	public _right!: ExpressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public idivide(): IdivideContext {
		return this.getTypedRuleContext(IdivideContext, 0) as IdivideContext;
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterIntDivideExpression) {
	 		listener.enterIntDivideExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitIntDivideExpression) {
	 		listener.exitIntDivideExpression(this);
		}
	}
}
export class HasAnyExpressionContext extends ExpressionContext {
	public _left!: ExpressionContext;
	public _right!: Filter_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public HAS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.HAS, 0);
	}
	public ANY(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ANY, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public filter_expression(): Filter_expressionContext {
		return this.getTypedRuleContext(Filter_expressionContext, 0) as Filter_expressionContext;
	}
	public NOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.NOT, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterHasAnyExpression) {
	 		listener.enterHasAnyExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitHasAnyExpression) {
	 		listener.exitHasAnyExpression(this);
		}
	}
}
export class HasExpressionContext extends ExpressionContext {
	public _left!: ExpressionContext;
	public _right!: ExpressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public HAS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.HAS, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public NOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.NOT, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterHasExpression) {
	 		listener.enterHasExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitHasExpression) {
	 		listener.exitHasExpression(this);
		}
	}
}
export class TernaryExpressionContext extends ExpressionContext {
	public _ifTrue!: ExpressionContext;
	public _test!: ExpressionContext;
	public _ifFalse!: ExpressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public IF(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.IF, 0);
	}
	public ELSE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ELSE, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterTernaryExpression) {
	 		listener.enterTernaryExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitTernaryExpression) {
	 		listener.exitTernaryExpression(this);
		}
	}
}
export class InExpressionContext extends ExpressionContext {
	public _left!: ExpressionContext;
	public _right!: ExpressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public IN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.IN, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public NOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.NOT, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterInExpression) {
	 		listener.enterInExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitInExpression) {
	 		listener.exitInExpression(this);
		}
	}
}
export class DocumentExpressionContext extends ExpressionContext {
	public _exp!: Document_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public document_expression(): Document_expressionContext {
		return this.getTypedRuleContext(Document_expressionContext, 0) as Document_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDocumentExpression) {
	 		listener.enterDocumentExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDocumentExpression) {
	 		listener.exitDocumentExpression(this);
		}
	}
}
export class JsxExpressionContext extends ExpressionContext {
	public _exp!: Jsx_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public jsx_expression(): Jsx_expressionContext {
		return this.getTypedRuleContext(Jsx_expressionContext, 0) as Jsx_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsxExpression) {
	 		listener.enterJsxExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsxExpression) {
	 		listener.exitJsxExpression(this);
		}
	}
}
export class NotExpressionContext extends ExpressionContext {
	public _exp!: ExpressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public NOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.NOT, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNotExpression) {
	 		listener.enterNotExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNotExpression) {
	 		listener.exitNotExpression(this);
		}
	}
}
export class InvocationExpressionContext extends ExpressionContext {
	public _exp!: Invocation_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public invocation_expression(): Invocation_expressionContext {
		return this.getTypedRuleContext(Invocation_expressionContext, 0) as Invocation_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterInvocationExpression) {
	 		listener.enterInvocationExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitInvocationExpression) {
	 		listener.exitInvocationExpression(this);
		}
	}
}
export class CompareExpressionContext extends ExpressionContext {
	public _left!: ExpressionContext;
	public _op!: antlr4.Token;
	public _right!: ExpressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public LT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LT, 0);
	}
	public LTE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LTE, 0);
	}
	public GT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.GT, 0);
	}
	public GTE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.GTE, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCompareExpression) {
	 		listener.enterCompareExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCompareExpression) {
	 		listener.exitCompareExpression(this);
		}
	}
}
export class OrExpressionContext extends ExpressionContext {
	public _left!: ExpressionContext;
	public _right!: ExpressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public OR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.OR, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterOrExpression) {
	 		listener.enterOrExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitOrExpression) {
	 		listener.exitOrExpression(this);
		}
	}
}
export class CodeExpressionContext extends ExpressionContext {
	public _exp!: ExpressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CODE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CODE, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCodeExpression) {
	 		listener.enterCodeExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCodeExpression) {
	 		listener.exitCodeExpression(this);
		}
	}
}
export class AmbiguousExpressionContext extends ExpressionContext {
	public _exp!: Ambiguous_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ambiguous_expression(): Ambiguous_expressionContext {
		return this.getTypedRuleContext(Ambiguous_expressionContext, 0) as Ambiguous_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAmbiguousExpression) {
	 		listener.enterAmbiguousExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAmbiguousExpression) {
	 		listener.exitAmbiguousExpression(this);
		}
	}
}
export class ReadOneExpressionContext extends ExpressionContext {
	public _exp!: Read_one_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public read_one_expression(): Read_one_expressionContext {
		return this.getTypedRuleContext(Read_one_expressionContext, 0) as Read_one_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterReadOneExpression) {
	 		listener.enterReadOneExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitReadOneExpression) {
	 		listener.exitReadOneExpression(this);
		}
	}
}
export class AndExpressionContext extends ExpressionContext {
	public _left!: ExpressionContext;
	public _right!: ExpressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public AND(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAndExpression) {
	 		listener.enterAndExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAndExpression) {
	 		listener.exitAndExpression(this);
		}
	}
}
export class ArrowExpressionContext extends ExpressionContext {
	public _exp!: Arrow_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public arrow_expression(): Arrow_expressionContext {
		return this.getTypedRuleContext(Arrow_expressionContext, 0) as Arrow_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterArrowExpression) {
	 		listener.enterArrowExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitArrowExpression) {
	 		listener.exitArrowExpression(this);
		}
	}
}
export class MethodCallExpressionContext extends ExpressionContext {
	public _exp1!: Instance_expressionContext;
	public _exp2!: Unresolved_expressionContext;
	public _args!: Argument_assignment_listContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public argument_assignment_list(): Argument_assignment_listContext {
		return this.getTypedRuleContext(Argument_assignment_listContext, 0) as Argument_assignment_listContext;
	}
	public instance_expression(): Instance_expressionContext {
		return this.getTypedRuleContext(Instance_expressionContext, 0) as Instance_expressionContext;
	}
	public unresolved_expression(): Unresolved_expressionContext {
		return this.getTypedRuleContext(Unresolved_expressionContext, 0) as Unresolved_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMethodCallExpression) {
	 		listener.enterMethodCallExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMethodCallExpression) {
	 		listener.exitMethodCallExpression(this);
		}
	}
}
export class FetchExpressionContext extends ExpressionContext {
	public _exp!: Fetch_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public fetch_expression(): Fetch_expressionContext {
		return this.getTypedRuleContext(Fetch_expressionContext, 0) as Fetch_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterFetchExpression) {
	 		listener.enterFetchExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitFetchExpression) {
	 		listener.exitFetchExpression(this);
		}
	}
}
export class ClosureExpressionContext extends ExpressionContext {
	public _exp!: Instance_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public METHOD_COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.METHOD_COLON, 0);
	}
	public instance_expression(): Instance_expressionContext {
		return this.getTypedRuleContext(Instance_expressionContext, 0) as Instance_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterClosureExpression) {
	 		listener.enterClosureExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitClosureExpression) {
	 		listener.exitClosureExpression(this);
		}
	}
}
export class SortedExpressionContext extends ExpressionContext {
	public _exp!: Sorted_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public sorted_expression(): Sorted_expressionContext {
		return this.getTypedRuleContext(Sorted_expressionContext, 0) as Sorted_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSortedExpression) {
	 		listener.enterSortedExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSortedExpression) {
	 		listener.exitSortedExpression(this);
		}
	}
}
export class BlobExpressionContext extends ExpressionContext {
	public _exp!: Blob_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public blob_expression(): Blob_expressionContext {
		return this.getTypedRuleContext(Blob_expressionContext, 0) as Blob_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterBlobExpression) {
	 		listener.enterBlobExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitBlobExpression) {
	 		listener.exitBlobExpression(this);
		}
	}
}
export class ContainsExpressionContext extends ExpressionContext {
	public _left!: ExpressionContext;
	public _right!: ExpressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CONTAINS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CONTAINS, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public NOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.NOT, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterContainsExpression) {
	 		listener.enterContainsExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitContainsExpression) {
	 		listener.exitContainsExpression(this);
		}
	}
}
export class FilteredListExpressionContext extends ExpressionContext {
	public _src!: ExpressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public filtered_list_suffix(): Filtered_list_suffixContext {
		return this.getTypedRuleContext(Filtered_list_suffixContext, 0) as Filtered_list_suffixContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterFilteredListExpression) {
	 		listener.enterFilteredListExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitFilteredListExpression) {
	 		listener.exitFilteredListExpression(this);
		}
	}
}
export class ConstructorExpressionContext extends ExpressionContext {
	public _exp!: Constructor_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public constructor_expression(): Constructor_expressionContext {
		return this.getTypedRuleContext(Constructor_expressionContext, 0) as Constructor_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterConstructorExpression) {
	 		listener.enterConstructorExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitConstructorExpression) {
	 		listener.exitConstructorExpression(this);
		}
	}
}
export class ReadBlobExpressionContext extends ExpressionContext {
	public _exp!: Read_blob_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public read_blob_expression(): Read_blob_expressionContext {
		return this.getTypedRuleContext(Read_blob_expressionContext, 0) as Read_blob_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterReadBlobExpression) {
	 		listener.enterReadBlobExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitReadBlobExpression) {
	 		listener.exitReadBlobExpression(this);
		}
	}
}
export class MultiplyExpressionContext extends ExpressionContext {
	public _left!: ExpressionContext;
	public _right!: ExpressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public multiply(): MultiplyContext {
		return this.getTypedRuleContext(MultiplyContext, 0) as MultiplyContext;
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMultiplyExpression) {
	 		listener.enterMultiplyExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMultiplyExpression) {
	 		listener.exitMultiplyExpression(this);
		}
	}
}
export class ExecuteExpressionContext extends ExpressionContext {
	public _name!: Variable_identifierContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public EXECUTE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.EXECUTE, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterExecuteExpression) {
	 		listener.enterExecuteExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitExecuteExpression) {
	 		listener.exitExecuteExpression(this);
		}
	}
}
export class IteratorExpressionContext extends ExpressionContext {
	public _exp!: ExpressionContext;
	public _name!: Variable_identifierContext;
	public _source!: ExpressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public FOR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FOR, 0);
	}
	public EACH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.EACH, 0);
	}
	public IN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.IN, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterIteratorExpression) {
	 		listener.enterIteratorExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitIteratorExpression) {
	 		listener.exitIteratorExpression(this);
		}
	}
}
export class UnresolvedExpressionContext extends ExpressionContext {
	public _exp!: Unresolved_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public unresolved_expression(): Unresolved_expressionContext {
		return this.getTypedRuleContext(Unresolved_expressionContext, 0) as Unresolved_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterUnresolvedExpression) {
	 		listener.enterUnresolvedExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitUnresolvedExpression) {
	 		listener.exitUnresolvedExpression(this);
		}
	}
}
export class DivideExpressionContext extends ExpressionContext {
	public _left!: ExpressionContext;
	public _right!: ExpressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public divide(): DivideContext {
		return this.getTypedRuleContext(DivideContext, 0) as DivideContext;
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDivideExpression) {
	 		listener.enterDivideExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDivideExpression) {
	 		listener.exitDivideExpression(this);
		}
	}
}
export class IsExpressionContext extends ExpressionContext {
	public _left!: ExpressionContext;
	public _right!: Is_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public IS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.IS, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public is_expression(): Is_expressionContext {
		return this.getTypedRuleContext(Is_expressionContext, 0) as Is_expressionContext;
	}
	public NOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.NOT, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterIsExpression) {
	 		listener.enterIsExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitIsExpression) {
	 		listener.exitIsExpression(this);
		}
	}
}
export class MinusExpressionContext extends ExpressionContext {
	public _exp!: ExpressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public MINUS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MINUS, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMinusExpression) {
	 		listener.enterMinusExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMinusExpression) {
	 		listener.exitMinusExpression(this);
		}
	}
}
export class AddExpressionContext extends ExpressionContext {
	public _left!: ExpressionContext;
	public _op!: antlr4.Token;
	public _right!: ExpressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public PLUS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.PLUS, 0);
	}
	public MINUS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MINUS, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAddExpression) {
	 		listener.enterAddExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAddExpression) {
	 		listener.exitAddExpression(this);
		}
	}
}
export class HasAllExpressionContext extends ExpressionContext {
	public _left!: ExpressionContext;
	public _right!: Filter_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public HAS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.HAS, 0);
	}
	public ALL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ALL, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public filter_expression(): Filter_expressionContext {
		return this.getTypedRuleContext(Filter_expressionContext, 0) as Filter_expressionContext;
	}
	public NOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.NOT, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterHasAllExpression) {
	 		listener.enterHasAllExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitHasAllExpression) {
	 		listener.exitHasAllExpression(this);
		}
	}
}
export class InstanceExpressionContext extends ExpressionContext {
	public _exp!: Instance_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public instance_expression(): Instance_expressionContext {
		return this.getTypedRuleContext(Instance_expressionContext, 0) as Instance_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterInstanceExpression) {
	 		listener.enterInstanceExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitInstanceExpression) {
	 		listener.exitInstanceExpression(this);
		}
	}
}
export class MutableInstanceExpressionContext extends ExpressionContext {
	public _exp!: Mutable_instance_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public mutable_instance_expression(): Mutable_instance_expressionContext {
		return this.getTypedRuleContext(Mutable_instance_expressionContext, 0) as Mutable_instance_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMutableInstanceExpression) {
	 		listener.enterMutableInstanceExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMutableInstanceExpression) {
	 		listener.exitMutableInstanceExpression(this);
		}
	}
}
export class ReadAllExpressionContext extends ExpressionContext {
	public _exp!: Read_all_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public read_all_expression(): Read_all_expressionContext {
		return this.getTypedRuleContext(Read_all_expressionContext, 0) as Read_all_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterReadAllExpression) {
	 		listener.enterReadAllExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitReadAllExpression) {
	 		listener.exitReadAllExpression(this);
		}
	}
}
export class CssExpressionContext extends ExpressionContext {
	public _exp!: Css_expressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public css_expression(): Css_expressionContext {
		return this.getTypedRuleContext(Css_expressionContext, 0) as Css_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCssExpression) {
	 		listener.enterCssExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCssExpression) {
	 		listener.exitCssExpression(this);
		}
	}
}
export class CastExpressionContext extends ExpressionContext {
	public _left!: ExpressionContext;
	public _right!: Category_or_any_typeContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public category_or_any_type(): Category_or_any_typeContext {
		return this.getTypedRuleContext(Category_or_any_typeContext, 0) as Category_or_any_typeContext;
	}
	public MUTABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MUTABLE, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCastExpression) {
	 		listener.enterCastExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCastExpression) {
	 		listener.exitCastExpression(this);
		}
	}
}
export class ModuloExpressionContext extends ExpressionContext {
	public _left!: ExpressionContext;
	public _right!: ExpressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public modulo(): ModuloContext {
		return this.getTypedRuleContext(ModuloContext, 0) as ModuloContext;
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterModuloExpression) {
	 		listener.enterModuloExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitModuloExpression) {
	 		listener.exitModuloExpression(this);
		}
	}
}
export class EqualsExpressionContext extends ExpressionContext {
	public _left!: ExpressionContext;
	public _op!: antlr4.Token;
	public _right!: ExpressionContext;
	constructor(parser: EParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public EQ(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.EQ, 0);
	}
	public LTGT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LTGT, 0);
	}
	public TILDE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TILDE, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterEqualsExpression) {
	 		listener.enterEqualsExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitEqualsExpression) {
	 		listener.exitEqualsExpression(this);
		}
	}
}


export class Filter_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_filter_expression;
	}
	public copyFrom(ctx: Filter_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class ExplicitFilterExpressionContext extends Filter_expressionContext {
	constructor(parser: EParser, ctx: Filter_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
	public WHERE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WHERE, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterExplicitFilterExpression) {
	 		listener.enterExplicitFilterExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitExplicitFilterExpression) {
	 		listener.exitExplicitFilterExpression(this);
		}
	}
}
export class OtherFilterExpressionContext extends Filter_expressionContext {
	constructor(parser: EParser, ctx: Filter_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterOtherFilterExpression) {
	 		listener.enterOtherFilterExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitOtherFilterExpression) {
	 		listener.exitOtherFilterExpression(this);
		}
	}
}
export class ArrowFilterExpressionContext extends Filter_expressionContext {
	constructor(parser: EParser, ctx: Filter_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public WHERE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WHERE, 0);
	}
	public arrow_expression(): Arrow_expressionContext {
		return this.getTypedRuleContext(Arrow_expressionContext, 0) as Arrow_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterArrowFilterExpression) {
	 		listener.enterArrowFilterExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitArrowFilterExpression) {
	 		listener.exitArrowFilterExpression(this);
		}
	}
}


export class Unresolved_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_unresolved_expression;
	}
	public copyFrom(ctx: Unresolved_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class UnresolvedSelectorContext extends Unresolved_expressionContext {
	public _parent!: Unresolved_expressionContext;
	public _selector!: Unresolved_selectorContext;
	constructor(parser: EParser, ctx: Unresolved_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public unresolved_expression(): Unresolved_expressionContext {
		return this.getTypedRuleContext(Unresolved_expressionContext, 0) as Unresolved_expressionContext;
	}
	public unresolved_selector(): Unresolved_selectorContext {
		return this.getTypedRuleContext(Unresolved_selectorContext, 0) as Unresolved_selectorContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterUnresolvedSelector) {
	 		listener.enterUnresolvedSelector(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitUnresolvedSelector) {
	 		listener.exitUnresolvedSelector(this);
		}
	}
}
export class UnresolvedIdentifierContext extends Unresolved_expressionContext {
	public _name!: IdentifierContext;
	constructor(parser: EParser, ctx: Unresolved_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterUnresolvedIdentifier) {
	 		listener.enterUnresolvedIdentifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitUnresolvedIdentifier) {
	 		listener.exitUnresolvedIdentifier(this);
		}
	}
}


export class Unresolved_selectorContext extends antlr4.context.ParserRuleContext {
	public _name!: IdentifierContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOT, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_unresolved_selector;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterUnresolved_selector) {
	 		listener.enterUnresolved_selector(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitUnresolved_selector) {
	 		listener.exitUnresolved_selector(this);
		}
	}
}


export class Invocation_expressionContext extends antlr4.context.ParserRuleContext {
	public _exp!: Unresolved_expressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INVOKE_COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.INVOKE_COLON, 0);
	}
	public invocation_trailer(): Invocation_trailerContext {
		return this.getTypedRuleContext(Invocation_trailerContext, 0) as Invocation_trailerContext;
	}
	public unresolved_expression(): Unresolved_expressionContext {
		return this.getTypedRuleContext(Unresolved_expressionContext, 0) as Unresolved_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_invocation_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterInvocation_expression) {
	 		listener.enterInvocation_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitInvocation_expression) {
	 		listener.exitInvocation_expression(this);
		}
	}
}


export class Invocation_trailerContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_invocation_trailer;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterInvocation_trailer) {
	 		listener.enterInvocation_trailer(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitInvocation_trailer) {
	 		listener.exitInvocation_trailer(this);
		}
	}
}


export class Selectable_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_selectable_expression;
	}
	public copyFrom(ctx: Selectable_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class ThisExpressionContext extends Selectable_expressionContext {
	public _exp!: This_expressionContext;
	constructor(parser: EParser, ctx: Selectable_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public this_expression(): This_expressionContext {
		return this.getTypedRuleContext(This_expressionContext, 0) as This_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterThisExpression) {
	 		listener.enterThisExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitThisExpression) {
	 		listener.exitThisExpression(this);
		}
	}
}
export class ParenthesisExpressionContext extends Selectable_expressionContext {
	public _exp!: Parenthesis_expressionContext;
	constructor(parser: EParser, ctx: Selectable_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public parenthesis_expression(): Parenthesis_expressionContext {
		return this.getTypedRuleContext(Parenthesis_expressionContext, 0) as Parenthesis_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterParenthesisExpression) {
	 		listener.enterParenthesisExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitParenthesisExpression) {
	 		listener.exitParenthesisExpression(this);
		}
	}
}
export class LiteralExpressionContext extends Selectable_expressionContext {
	public _exp!: Literal_expressionContext;
	constructor(parser: EParser, ctx: Selectable_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public literal_expression(): Literal_expressionContext {
		return this.getTypedRuleContext(Literal_expressionContext, 0) as Literal_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterLiteralExpression) {
	 		listener.enterLiteralExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitLiteralExpression) {
	 		listener.exitLiteralExpression(this);
		}
	}
}
export class SuperExpressionContext extends Selectable_expressionContext {
	public _exp!: Super_expressionContext;
	constructor(parser: EParser, ctx: Selectable_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public super_expression(): Super_expressionContext {
		return this.getTypedRuleContext(Super_expressionContext, 0) as Super_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSuperExpression) {
	 		listener.enterSuperExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSuperExpression) {
	 		listener.exitSuperExpression(this);
		}
	}
}
export class IdentifierExpressionContext extends Selectable_expressionContext {
	public _exp!: IdentifierContext;
	constructor(parser: EParser, ctx: Selectable_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterIdentifierExpression) {
	 		listener.enterIdentifierExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitIdentifierExpression) {
	 		listener.exitIdentifierExpression(this);
		}
	}
}


export class Instance_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_instance_expression;
	}
	public copyFrom(ctx: Instance_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class SelectorExpressionContext extends Instance_expressionContext {
	public _parent!: Instance_expressionContext;
	public _selector!: Instance_selectorContext;
	constructor(parser: EParser, ctx: Instance_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public instance_expression(): Instance_expressionContext {
		return this.getTypedRuleContext(Instance_expressionContext, 0) as Instance_expressionContext;
	}
	public instance_selector(): Instance_selectorContext {
		return this.getTypedRuleContext(Instance_selectorContext, 0) as Instance_selectorContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSelectorExpression) {
	 		listener.enterSelectorExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSelectorExpression) {
	 		listener.exitSelectorExpression(this);
		}
	}
}
export class SelectableExpressionContext extends Instance_expressionContext {
	public _parent!: Selectable_expressionContext;
	constructor(parser: EParser, ctx: Instance_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public selectable_expression(): Selectable_expressionContext {
		return this.getTypedRuleContext(Selectable_expressionContext, 0) as Selectable_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSelectableExpression) {
	 		listener.enterSelectableExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSelectableExpression) {
	 		listener.exitSelectableExpression(this);
		}
	}
}


export class Instance_selectorContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_instance_selector;
	}
	public copyFrom(ctx: Instance_selectorContext): void {
		super.copyFrom(ctx);
	}
}
export class SliceSelectorContext extends Instance_selectorContext {
	public _xslice!: Slice_argumentsContext;
	constructor(parser: EParser, ctx: Instance_selectorContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LBRAK, 0);
	}
	public RBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RBRAK, 0);
	}
	public slice_arguments(): Slice_argumentsContext {
		return this.getTypedRuleContext(Slice_argumentsContext, 0) as Slice_argumentsContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSliceSelector) {
	 		listener.enterSliceSelector(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSliceSelector) {
	 		listener.exitSliceSelector(this);
		}
	}
}
export class MemberSelectorContext extends Instance_selectorContext {
	public _name!: Member_identifierContext;
	constructor(parser: EParser, ctx: Instance_selectorContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOT, 0);
	}
	public member_identifier(): Member_identifierContext {
		return this.getTypedRuleContext(Member_identifierContext, 0) as Member_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMemberSelector) {
	 		listener.enterMemberSelector(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMemberSelector) {
	 		listener.exitMemberSelector(this);
		}
	}
}
export class ItemSelectorContext extends Instance_selectorContext {
	public _exp!: ExpressionContext;
	constructor(parser: EParser, ctx: Instance_selectorContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LBRAK, 0);
	}
	public RBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RBRAK, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterItemSelector) {
	 		listener.enterItemSelector(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitItemSelector) {
	 		listener.exitItemSelector(this);
		}
	}
}


export class Mutable_instance_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_mutable_instance_expression;
	}
	public copyFrom(ctx: Mutable_instance_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class MutableSelectableExpressionContext extends Mutable_instance_expressionContext {
	public _exp!: IdentifierContext;
	constructor(parser: EParser, ctx: Mutable_instance_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public MUTABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MUTABLE, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMutableSelectableExpression) {
	 		listener.enterMutableSelectableExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMutableSelectableExpression) {
	 		listener.exitMutableSelectableExpression(this);
		}
	}
}
export class MutableSelectorExpressionContext extends Mutable_instance_expressionContext {
	public _parent!: Mutable_instance_expressionContext;
	public _selector!: Instance_selectorContext;
	constructor(parser: EParser, ctx: Mutable_instance_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public mutable_instance_expression(): Mutable_instance_expressionContext {
		return this.getTypedRuleContext(Mutable_instance_expressionContext, 0) as Mutable_instance_expressionContext;
	}
	public instance_selector(): Instance_selectorContext {
		return this.getTypedRuleContext(Instance_selectorContext, 0) as Instance_selectorContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMutableSelectorExpression) {
	 		listener.enterMutableSelectorExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMutableSelectorExpression) {
	 		listener.exitMutableSelectorExpression(this);
		}
	}
}


export class Document_expressionContext extends antlr4.context.ParserRuleContext {
	public _exp!: ExpressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DOCUMENT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOCUMENT, 0);
	}
	public FROM(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FROM, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_document_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDocument_expression) {
	 		listener.enterDocument_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDocument_expression) {
	 		listener.exitDocument_expression(this);
		}
	}
}


export class Blob_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BLOB(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BLOB, 0);
	}
	public FROM(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FROM, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_blob_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterBlob_expression) {
	 		listener.enterBlob_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitBlob_expression) {
	 		listener.exitBlob_expression(this);
		}
	}
}


export class Constructor_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_constructor_expression;
	}
	public copyFrom(ctx: Constructor_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class ConstructorFromContext extends Constructor_expressionContext {
	public _typ!: Mutable_category_typeContext;
	public _copyExp!: ExpressionContext;
	public _args!: With_argument_assignment_listContext;
	public _arg!: Argument_assignmentContext;
	constructor(parser: EParser, ctx: Constructor_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public FROM(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FROM, 0);
	}
	public mutable_category_type(): Mutable_category_typeContext {
		return this.getTypedRuleContext(Mutable_category_typeContext, 0) as Mutable_category_typeContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public with_argument_assignment_list(): With_argument_assignment_listContext {
		return this.getTypedRuleContext(With_argument_assignment_listContext, 0) as With_argument_assignment_listContext;
	}
	public COMMA(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, 0);
	}
	public AND(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, 0);
	}
	public argument_assignment(): Argument_assignmentContext {
		return this.getTypedRuleContext(Argument_assignmentContext, 0) as Argument_assignmentContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterConstructorFrom) {
	 		listener.enterConstructorFrom(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitConstructorFrom) {
	 		listener.exitConstructorFrom(this);
		}
	}
}
export class ConstructorNoFromContext extends Constructor_expressionContext {
	public _typ!: Mutable_category_typeContext;
	public _args!: With_argument_assignment_listContext;
	public _arg!: Argument_assignmentContext;
	constructor(parser: EParser, ctx: Constructor_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public mutable_category_type(): Mutable_category_typeContext {
		return this.getTypedRuleContext(Mutable_category_typeContext, 0) as Mutable_category_typeContext;
	}
	public with_argument_assignment_list(): With_argument_assignment_listContext {
		return this.getTypedRuleContext(With_argument_assignment_listContext, 0) as With_argument_assignment_listContext;
	}
	public AND(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, 0);
	}
	public argument_assignment(): Argument_assignmentContext {
		return this.getTypedRuleContext(Argument_assignmentContext, 0) as Argument_assignmentContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterConstructorNoFrom) {
	 		listener.enterConstructorNoFrom(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitConstructorNoFrom) {
	 		listener.exitConstructorNoFrom(this);
		}
	}
}


export class Write_statementContext extends antlr4.context.ParserRuleContext {
	public _what!: ExpressionContext;
	public _target!: ExpressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WRITE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WRITE, 0);
	}
	public TO(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TO, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public then(): ThenContext {
		return this.getTypedRuleContext(ThenContext, 0) as ThenContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_write_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterWrite_statement) {
	 		listener.enterWrite_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitWrite_statement) {
	 		listener.exitWrite_statement(this);
		}
	}
}


export class Ambiguous_expressionContext extends antlr4.context.ParserRuleContext {
	public _method!: Unresolved_expressionContext;
	public _exp!: ExpressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MINUS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MINUS, 0);
	}
	public unresolved_expression(): Unresolved_expressionContext {
		return this.getTypedRuleContext(Unresolved_expressionContext, 0) as Unresolved_expressionContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_ambiguous_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAmbiguous_expression) {
	 		listener.enterAmbiguous_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAmbiguous_expression) {
	 		listener.exitAmbiguous_expression(this);
		}
	}
}


export class Filtered_list_suffixContext extends antlr4.context.ParserRuleContext {
	public _name!: Variable_identifierContext;
	public _predicate!: ExpressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FILTERED(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FILTERED, 0);
	}
	public WHERE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WHERE, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_filtered_list_suffix;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterFiltered_list_suffix) {
	 		listener.enterFiltered_list_suffix(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitFiltered_list_suffix) {
	 		listener.exitFiltered_list_suffix(this);
		}
	}
}


export class Fetch_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_fetch_expression;
	}
	public copyFrom(ctx: Fetch_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class FetchOneContext extends Fetch_expressionContext {
	public _typ!: Mutable_category_typeContext;
	public _predicate!: ExpressionContext;
	public _include!: Include_listContext;
	constructor(parser: EParser, ctx: Fetch_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public FETCH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FETCH, 0);
	}
	public ONE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ONE, 0);
	}
	public WHERE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WHERE, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public INCLUDE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.INCLUDE, 0);
	}
	public include_list(): Include_listContext {
		return this.getTypedRuleContext(Include_listContext, 0) as Include_listContext;
	}
	public mutable_category_type(): Mutable_category_typeContext {
		return this.getTypedRuleContext(Mutable_category_typeContext, 0) as Mutable_category_typeContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterFetchOne) {
	 		listener.enterFetchOne(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitFetchOne) {
	 		listener.exitFetchOne(this);
		}
	}
}
export class FetchManyContext extends Fetch_expressionContext {
	public _typ!: Mutable_category_typeContext;
	public _xstart!: ExpressionContext;
	public _xstop!: ExpressionContext;
	public _predicate!: ExpressionContext;
	public _include!: Include_listContext;
	public _orderby!: Order_by_listContext;
	constructor(parser: EParser, ctx: Fetch_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public FETCH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FETCH, 0);
	}
	public WHERE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WHERE, 0);
	}
	public INCLUDE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.INCLUDE, 0);
	}
	public ORDER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ORDER, 0);
	}
	public BY(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BY, 0);
	}
	public ALL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ALL, 0);
	}
	public TO(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TO, 0);
	}
	public ROWS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ROWS, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public include_list(): Include_listContext {
		return this.getTypedRuleContext(Include_listContext, 0) as Include_listContext;
	}
	public order_by_list(): Order_by_listContext {
		return this.getTypedRuleContext(Order_by_listContext, 0) as Order_by_listContext;
	}
	public mutable_category_type(): Mutable_category_typeContext {
		return this.getTypedRuleContext(Mutable_category_typeContext, 0) as Mutable_category_typeContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterFetchMany) {
	 		listener.enterFetchMany(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitFetchMany) {
	 		listener.exitFetchMany(this);
		}
	}
}


export class Fetch_statementContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_fetch_statement;
	}
	public copyFrom(ctx: Fetch_statementContext): void {
		super.copyFrom(ctx);
	}
}
export class FetchManyAsyncContext extends Fetch_statementContext {
	public _typ!: Mutable_category_typeContext;
	public _xstart!: ExpressionContext;
	public _xstop!: ExpressionContext;
	public _predicate!: ExpressionContext;
	public _include!: Include_listContext;
	public _orderby!: Order_by_listContext;
	constructor(parser: EParser, ctx: Fetch_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public FETCH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FETCH, 0);
	}
	public then(): ThenContext {
		return this.getTypedRuleContext(ThenContext, 0) as ThenContext;
	}
	public WHERE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WHERE, 0);
	}
	public INCLUDE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.INCLUDE, 0);
	}
	public ORDER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ORDER, 0);
	}
	public BY(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BY, 0);
	}
	public ALL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ALL, 0);
	}
	public TO(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TO, 0);
	}
	public ROWS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ROWS, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public include_list(): Include_listContext {
		return this.getTypedRuleContext(Include_listContext, 0) as Include_listContext;
	}
	public order_by_list(): Order_by_listContext {
		return this.getTypedRuleContext(Order_by_listContext, 0) as Order_by_listContext;
	}
	public mutable_category_type(): Mutable_category_typeContext {
		return this.getTypedRuleContext(Mutable_category_typeContext, 0) as Mutable_category_typeContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterFetchManyAsync) {
	 		listener.enterFetchManyAsync(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitFetchManyAsync) {
	 		listener.exitFetchManyAsync(this);
		}
	}
}
export class FetchOneAsyncContext extends Fetch_statementContext {
	public _typ!: Mutable_category_typeContext;
	public _predicate!: ExpressionContext;
	public _include!: Include_listContext;
	constructor(parser: EParser, ctx: Fetch_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public FETCH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FETCH, 0);
	}
	public ONE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ONE, 0);
	}
	public WHERE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WHERE, 0);
	}
	public then(): ThenContext {
		return this.getTypedRuleContext(ThenContext, 0) as ThenContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public INCLUDE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.INCLUDE, 0);
	}
	public include_list(): Include_listContext {
		return this.getTypedRuleContext(Include_listContext, 0) as Include_listContext;
	}
	public mutable_category_type(): Mutable_category_typeContext {
		return this.getTypedRuleContext(Mutable_category_typeContext, 0) as Mutable_category_typeContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterFetchOneAsync) {
	 		listener.enterFetchOneAsync(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitFetchOneAsync) {
	 		listener.exitFetchOneAsync(this);
		}
	}
}


export class Include_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public variable_identifier_list(): Variable_identifierContext[] {
		return this.getTypedRuleContexts(Variable_identifierContext) as Variable_identifierContext[];
	}
	public variable_identifier(i: number): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, i) as Variable_identifierContext;
	}
	public COMMA_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COMMA);
	}
	public COMMA(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, i);
	}
	public AND(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_include_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterInclude_list) {
	 		listener.enterInclude_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitInclude_list) {
	 		listener.exitInclude_list(this);
		}
	}
}


export class ThenContext extends antlr4.context.ParserRuleContext {
	public _name!: Variable_identifierContext;
	public _stmts!: Statement_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public THEN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.THEN, 0);
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public indent(): IndentContext {
		return this.getTypedRuleContext(IndentContext, 0) as IndentContext;
	}
	public dedent(): DedentContext {
		return this.getTypedRuleContext(DedentContext, 0) as DedentContext;
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_then;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterThen) {
	 		listener.enterThen(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitThen) {
	 		listener.exitThen(this);
		}
	}
}


export class Read_statementContext extends antlr4.context.ParserRuleContext {
	public _source!: ExpressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public READ(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.READ, 0);
	}
	public ALL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ALL, 0);
	}
	public FROM(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FROM, 0);
	}
	public then(): ThenContext {
		return this.getTypedRuleContext(ThenContext, 0) as ThenContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_read_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterRead_statement) {
	 		listener.enterRead_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitRead_statement) {
	 		listener.exitRead_statement(this);
		}
	}
}


export class Sorted_expressionContext extends antlr4.context.ParserRuleContext {
	public _source!: Instance_expressionContext;
	public _key!: Sorted_keyContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SORTED(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SORTED, 0);
	}
	public instance_expression(): Instance_expressionContext {
		return this.getTypedRuleContext(Instance_expressionContext, 0) as Instance_expressionContext;
	}
	public DESC(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DESC, 0);
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public key_token(): Key_tokenContext {
		return this.getTypedRuleContext(Key_tokenContext, 0) as Key_tokenContext;
	}
	public sorted_key(): Sorted_keyContext {
		return this.getTypedRuleContext(Sorted_keyContext, 0) as Sorted_keyContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_sorted_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSorted_expression) {
	 		listener.enterSorted_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSorted_expression) {
	 		listener.exitSorted_expression(this);
		}
	}
}


export class Argument_assignment_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_argument_assignment_list;
	}
	public copyFrom(ctx: Argument_assignment_listContext): void {
		super.copyFrom(ctx);
	}
}
export class ArgumentAssignmentListExpressionContext extends Argument_assignment_listContext {
	public _exp!: ExpressionContext;
	public _items!: With_argument_assignment_listContext;
	public _item!: Argument_assignmentContext;
	constructor(parser: EParser, ctx: Argument_assignment_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public with_argument_assignment_list(): With_argument_assignment_listContext {
		return this.getTypedRuleContext(With_argument_assignment_listContext, 0) as With_argument_assignment_listContext;
	}
	public AND(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, 0);
	}
	public argument_assignment(): Argument_assignmentContext {
		return this.getTypedRuleContext(Argument_assignmentContext, 0) as Argument_assignmentContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterArgumentAssignmentListExpression) {
	 		listener.enterArgumentAssignmentListExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitArgumentAssignmentListExpression) {
	 		listener.exitArgumentAssignmentListExpression(this);
		}
	}
}
export class ArgumentAssignmentListNoExpressionContext extends Argument_assignment_listContext {
	public _items!: With_argument_assignment_listContext;
	public _item!: Argument_assignmentContext;
	constructor(parser: EParser, ctx: Argument_assignment_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public with_argument_assignment_list(): With_argument_assignment_listContext {
		return this.getTypedRuleContext(With_argument_assignment_listContext, 0) as With_argument_assignment_listContext;
	}
	public AND(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, 0);
	}
	public argument_assignment(): Argument_assignmentContext {
		return this.getTypedRuleContext(Argument_assignmentContext, 0) as Argument_assignmentContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterArgumentAssignmentListNoExpression) {
	 		listener.enterArgumentAssignmentListNoExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitArgumentAssignmentListNoExpression) {
	 		listener.exitArgumentAssignmentListNoExpression(this);
		}
	}
}


export class With_argument_assignment_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_with_argument_assignment_list;
	}
	public copyFrom(ctx: With_argument_assignment_listContext): void {
		super.copyFrom(ctx);
	}
}
export class ArgumentAssignmentListContext extends With_argument_assignment_listContext {
	public _item!: Argument_assignmentContext;
	constructor(parser: EParser, ctx: With_argument_assignment_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public argument_assignment(): Argument_assignmentContext {
		return this.getTypedRuleContext(Argument_assignmentContext, 0) as Argument_assignmentContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterArgumentAssignmentList) {
	 		listener.enterArgumentAssignmentList(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitArgumentAssignmentList) {
	 		listener.exitArgumentAssignmentList(this);
		}
	}
}
export class ArgumentAssignmentListItemContext extends With_argument_assignment_listContext {
	public _items!: With_argument_assignment_listContext;
	public _item!: Argument_assignmentContext;
	constructor(parser: EParser, ctx: With_argument_assignment_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public COMMA(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, 0);
	}
	public with_argument_assignment_list(): With_argument_assignment_listContext {
		return this.getTypedRuleContext(With_argument_assignment_listContext, 0) as With_argument_assignment_listContext;
	}
	public argument_assignment(): Argument_assignmentContext {
		return this.getTypedRuleContext(Argument_assignmentContext, 0) as Argument_assignmentContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterArgumentAssignmentListItem) {
	 		listener.enterArgumentAssignmentListItem(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitArgumentAssignmentListItem) {
	 		listener.exitArgumentAssignmentListItem(this);
		}
	}
}


export class Argument_assignmentContext extends antlr4.context.ParserRuleContext {
	public _exp!: ExpressionContext;
	public _name!: Variable_identifierContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_argument_assignment;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterArgument_assignment) {
	 		listener.enterArgument_assignment(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitArgument_assignment) {
	 		listener.exitArgument_assignment(this);
		}
	}
}


export class Assign_instance_statementContext extends antlr4.context.ParserRuleContext {
	public _inst!: Assignable_instanceContext;
	public _exp!: ExpressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public assign(): AssignContext {
		return this.getTypedRuleContext(AssignContext, 0) as AssignContext;
	}
	public assignable_instance(): Assignable_instanceContext {
		return this.getTypedRuleContext(Assignable_instanceContext, 0) as Assignable_instanceContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_assign_instance_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAssign_instance_statement) {
	 		listener.enterAssign_instance_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAssign_instance_statement) {
	 		listener.exitAssign_instance_statement(this);
		}
	}
}


export class Child_instanceContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_child_instance;
	}
	public copyFrom(ctx: Child_instanceContext): void {
		super.copyFrom(ctx);
	}
}
export class MemberInstanceContext extends Child_instanceContext {
	public _name!: Variable_identifierContext;
	constructor(parser: EParser, ctx: Child_instanceContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOT, 0);
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMemberInstance) {
	 		listener.enterMemberInstance(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMemberInstance) {
	 		listener.exitMemberInstance(this);
		}
	}
}
export class ItemInstanceContext extends Child_instanceContext {
	public _exp!: ExpressionContext;
	constructor(parser: EParser, ctx: Child_instanceContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LBRAK, 0);
	}
	public RBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RBRAK, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterItemInstance) {
	 		listener.enterItemInstance(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitItemInstance) {
	 		listener.exitItemInstance(this);
		}
	}
}


export class Assign_tuple_statementContext extends antlr4.context.ParserRuleContext {
	public _items!: Variable_identifier_listContext;
	public _exp!: ExpressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public assign(): AssignContext {
		return this.getTypedRuleContext(AssignContext, 0) as AssignContext;
	}
	public variable_identifier_list(): Variable_identifier_listContext {
		return this.getTypedRuleContext(Variable_identifier_listContext, 0) as Variable_identifier_listContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_assign_tuple_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAssign_tuple_statement) {
	 		listener.enterAssign_tuple_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAssign_tuple_statement) {
	 		listener.exitAssign_tuple_statement(this);
		}
	}
}


export class LfsContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LF_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.LF);
	}
	public LF(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LF, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_lfs;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterLfs) {
	 		listener.enterLfs(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitLfs) {
	 		listener.exitLfs(this);
		}
	}
}


export class LfpContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LF_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.LF);
	}
	public LF(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LF, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_lfp;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterLfp) {
	 		listener.enterLfp(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitLfp) {
	 		listener.exitLfp(this);
		}
	}
}


export class Ws_plusContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LF_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.LF);
	}
	public LF(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LF, i);
	}
	public TAB_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.TAB);
	}
	public TAB(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TAB, i);
	}
	public WS_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.WS);
	}
	public WS(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WS, i);
	}
	public INDENT_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.INDENT);
	}
	public INDENT(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.INDENT, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_ws_plus;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterWs_plus) {
	 		listener.enterWs_plus(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitWs_plus) {
	 		listener.exitWs_plus(this);
		}
	}
}


export class IndentContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INDENT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.INDENT, 0);
	}
	public LF_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.LF);
	}
	public LF(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LF, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_indent;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterIndent) {
	 		listener.enterIndent(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitIndent) {
	 		listener.exitIndent(this);
		}
	}
}


export class DedentContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEDENT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEDENT, 0);
	}
	public LF_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.LF);
	}
	public LF(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LF, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_dedent;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDedent) {
	 		listener.enterDedent(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDedent) {
	 		listener.exitDedent(this);
		}
	}
}


export class Type_literalContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TYPE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TYPE, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public category_or_any_type(): Category_or_any_typeContext {
		return this.getTypedRuleContext(Category_or_any_typeContext, 0) as Category_or_any_typeContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_type_literal;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterType_literal) {
	 		listener.enterType_literal(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitType_literal) {
	 		listener.exitType_literal(this);
		}
	}
}


export class Null_literalContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NOTHING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.NOTHING, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_null_literal;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNull_literal) {
	 		listener.enterNull_literal(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNull_literal) {
	 		listener.exitNull_literal(this);
		}
	}
}


export class ReplContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public declaration(): DeclarationContext {
		return this.getTypedRuleContext(DeclarationContext, 0) as DeclarationContext;
	}
	public statement(): StatementContext {
		return this.getTypedRuleContext(StatementContext, 0) as StatementContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_repl;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterRepl) {
	 		listener.enterRepl(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitRepl) {
	 		listener.exitRepl(this);
		}
	}
}


export class Declaration_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_declaration_list;
	}
	public copyFrom(ctx: Declaration_listContext): void {
		super.copyFrom(ctx);
	}
}
export class FullDeclarationListContext extends Declaration_listContext {
	constructor(parser: EParser, ctx: Declaration_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public lfs_list(): LfsContext[] {
		return this.getTypedRuleContexts(LfsContext) as LfsContext[];
	}
	public lfs(i: number): LfsContext {
		return this.getTypedRuleContext(LfsContext, i) as LfsContext;
	}
	public EOF(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.EOF, 0);
	}
	public declarations(): DeclarationsContext {
		return this.getTypedRuleContext(DeclarationsContext, 0) as DeclarationsContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterFullDeclarationList) {
	 		listener.enterFullDeclarationList(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitFullDeclarationList) {
	 		listener.exitFullDeclarationList(this);
		}
	}
}


export class DeclarationsContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public declaration_list(): DeclarationContext[] {
		return this.getTypedRuleContexts(DeclarationContext) as DeclarationContext[];
	}
	public declaration(i: number): DeclarationContext {
		return this.getTypedRuleContext(DeclarationContext, i) as DeclarationContext;
	}
	public lfp_list(): LfpContext[] {
		return this.getTypedRuleContexts(LfpContext) as LfpContext[];
	}
	public lfp(i: number): LfpContext {
		return this.getTypedRuleContext(LfpContext, i) as LfpContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_declarations;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDeclarations) {
	 		listener.enterDeclarations(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDeclarations) {
	 		listener.exitDeclarations(this);
		}
	}
}


export class DeclarationContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public attribute_declaration(): Attribute_declarationContext {
		return this.getTypedRuleContext(Attribute_declarationContext, 0) as Attribute_declarationContext;
	}
	public category_declaration(): Category_declarationContext {
		return this.getTypedRuleContext(Category_declarationContext, 0) as Category_declarationContext;
	}
	public resource_declaration(): Resource_declarationContext {
		return this.getTypedRuleContext(Resource_declarationContext, 0) as Resource_declarationContext;
	}
	public enum_declaration(): Enum_declarationContext {
		return this.getTypedRuleContext(Enum_declarationContext, 0) as Enum_declarationContext;
	}
	public widget_declaration(): Widget_declarationContext {
		return this.getTypedRuleContext(Widget_declarationContext, 0) as Widget_declarationContext;
	}
	public method_declaration(): Method_declarationContext {
		return this.getTypedRuleContext(Method_declarationContext, 0) as Method_declarationContext;
	}
	public comment_statement_list(): Comment_statementContext[] {
		return this.getTypedRuleContexts(Comment_statementContext) as Comment_statementContext[];
	}
	public comment_statement(i: number): Comment_statementContext {
		return this.getTypedRuleContext(Comment_statementContext, i) as Comment_statementContext;
	}
	public lfp_list(): LfpContext[] {
		return this.getTypedRuleContexts(LfpContext) as LfpContext[];
	}
	public lfp(i: number): LfpContext {
		return this.getTypedRuleContext(LfpContext, i) as LfpContext;
	}
	public annotation_constructor_list(): Annotation_constructorContext[] {
		return this.getTypedRuleContexts(Annotation_constructorContext) as Annotation_constructorContext[];
	}
	public annotation_constructor(i: number): Annotation_constructorContext {
		return this.getTypedRuleContext(Annotation_constructorContext, i) as Annotation_constructorContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDeclaration) {
	 		listener.enterDeclaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDeclaration) {
	 		listener.exitDeclaration(this);
		}
	}
}


export class Annotation_constructorContext extends antlr4.context.ParserRuleContext {
	public _name!: Annotation_identifierContext;
	public _exp!: Annotation_argument_valueContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public annotation_identifier(): Annotation_identifierContext {
		return this.getTypedRuleContext(Annotation_identifierContext, 0) as Annotation_identifierContext;
	}
	public LPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LPAR, 0);
	}
	public RPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RPAR, 0);
	}
	public annotation_argument_value(): Annotation_argument_valueContext {
		return this.getTypedRuleContext(Annotation_argument_valueContext, 0) as Annotation_argument_valueContext;
	}
	public annotation_argument_list(): Annotation_argumentContext[] {
		return this.getTypedRuleContexts(Annotation_argumentContext) as Annotation_argumentContext[];
	}
	public annotation_argument(i: number): Annotation_argumentContext {
		return this.getTypedRuleContext(Annotation_argumentContext, i) as Annotation_argumentContext;
	}
	public COMMA_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COMMA);
	}
	public COMMA(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_annotation_constructor;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAnnotation_constructor) {
	 		listener.enterAnnotation_constructor(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAnnotation_constructor) {
	 		listener.exitAnnotation_constructor(this);
		}
	}
}


export class Annotation_identifierContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ARONDBASE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ARONDBASE_IDENTIFIER, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_annotation_identifier;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAnnotation_identifier) {
	 		listener.enterAnnotation_identifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAnnotation_identifier) {
	 		listener.exitAnnotation_identifier(this);
		}
	}
}


export class Annotation_argumentContext extends antlr4.context.ParserRuleContext {
	public _name!: Annotation_argument_nameContext;
	public _exp!: Annotation_argument_valueContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQ(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.EQ, 0);
	}
	public annotation_argument_name(): Annotation_argument_nameContext {
		return this.getTypedRuleContext(Annotation_argument_nameContext, 0) as Annotation_argument_nameContext;
	}
	public annotation_argument_value(): Annotation_argument_valueContext {
		return this.getTypedRuleContext(Annotation_argument_valueContext, 0) as Annotation_argument_valueContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_annotation_argument;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAnnotation_argument) {
	 		listener.enterAnnotation_argument(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAnnotation_argument) {
	 		listener.exitAnnotation_argument(this);
		}
	}
}


export class Annotation_argument_nameContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VARIABLE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	}
	public GETTER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.GETTER, 0);
	}
	public SETTER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SETTER, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_annotation_argument_name;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAnnotation_argument_name) {
	 		listener.enterAnnotation_argument_name(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAnnotation_argument_name) {
	 		listener.exitAnnotation_argument_name(this);
		}
	}
}


export class Annotation_argument_valueContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_annotation_argument_value;
	}
	public copyFrom(ctx: Annotation_argument_valueContext): void {
		super.copyFrom(ctx);
	}
}
export class AnnotationLiteralValueContext extends Annotation_argument_valueContext {
	public _exp!: Literal_expressionContext;
	constructor(parser: EParser, ctx: Annotation_argument_valueContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public literal_expression(): Literal_expressionContext {
		return this.getTypedRuleContext(Literal_expressionContext, 0) as Literal_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAnnotationLiteralValue) {
	 		listener.enterAnnotationLiteralValue(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAnnotationLiteralValue) {
	 		listener.exitAnnotationLiteralValue(this);
		}
	}
}
export class AnnotationTypeValueContext extends Annotation_argument_valueContext {
	public _typ!: Primary_typeContext;
	constructor(parser: EParser, ctx: Annotation_argument_valueContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public primary_type(): Primary_typeContext {
		return this.getTypedRuleContext(Primary_typeContext, 0) as Primary_typeContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAnnotationTypeValue) {
	 		listener.enterAnnotationTypeValue(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAnnotationTypeValue) {
	 		listener.exitAnnotationTypeValue(this);
		}
	}
}


export class Resource_declarationContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public native_resource_declaration(): Native_resource_declarationContext {
		return this.getTypedRuleContext(Native_resource_declarationContext, 0) as Native_resource_declarationContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_resource_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterResource_declaration) {
	 		listener.enterResource_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitResource_declaration) {
	 		listener.exitResource_declaration(this);
		}
	}
}


export class Enum_declarationContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public enum_category_declaration(): Enum_category_declarationContext {
		return this.getTypedRuleContext(Enum_category_declarationContext, 0) as Enum_category_declarationContext;
	}
	public enum_native_declaration(): Enum_native_declarationContext {
		return this.getTypedRuleContext(Enum_native_declarationContext, 0) as Enum_native_declarationContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_enum_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterEnum_declaration) {
	 		listener.enterEnum_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitEnum_declaration) {
	 		listener.exitEnum_declaration(this);
		}
	}
}


export class Native_symbol_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public native_symbol_list(): Native_symbolContext[] {
		return this.getTypedRuleContexts(Native_symbolContext) as Native_symbolContext[];
	}
	public native_symbol(i: number): Native_symbolContext {
		return this.getTypedRuleContext(Native_symbolContext, i) as Native_symbolContext;
	}
	public lfp_list(): LfpContext[] {
		return this.getTypedRuleContexts(LfpContext) as LfpContext[];
	}
	public lfp(i: number): LfpContext {
		return this.getTypedRuleContext(LfpContext, i) as LfpContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_native_symbol_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNative_symbol_list) {
	 		listener.enterNative_symbol_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNative_symbol_list) {
	 		listener.exitNative_symbol_list(this);
		}
	}
}


export class Category_symbol_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public category_symbol_list(): Category_symbolContext[] {
		return this.getTypedRuleContexts(Category_symbolContext) as Category_symbolContext[];
	}
	public category_symbol(i: number): Category_symbolContext {
		return this.getTypedRuleContext(Category_symbolContext, i) as Category_symbolContext;
	}
	public lfp_list(): LfpContext[] {
		return this.getTypedRuleContexts(LfpContext) as LfpContext[];
	}
	public lfp(i: number): LfpContext {
		return this.getTypedRuleContext(LfpContext, i) as LfpContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_category_symbol_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCategory_symbol_list) {
	 		listener.enterCategory_symbol_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCategory_symbol_list) {
	 		listener.exitCategory_symbol_list(this);
		}
	}
}


export class Symbol_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public symbol_identifier_list(): Symbol_identifierContext[] {
		return this.getTypedRuleContexts(Symbol_identifierContext) as Symbol_identifierContext[];
	}
	public symbol_identifier(i: number): Symbol_identifierContext {
		return this.getTypedRuleContext(Symbol_identifierContext, i) as Symbol_identifierContext;
	}
	public COMMA_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COMMA);
	}
	public COMMA(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_symbol_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSymbol_list) {
	 		listener.enterSymbol_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSymbol_list) {
	 		listener.exitSymbol_list(this);
		}
	}
}


export class Attribute_constraintContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_attribute_constraint;
	}
	public copyFrom(ctx: Attribute_constraintContext): void {
		super.copyFrom(ctx);
	}
}
export class MatchingSetContext extends Attribute_constraintContext {
	public _source!: Set_literalContext;
	constructor(parser: EParser, ctx: Attribute_constraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public IN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.IN, 0);
	}
	public set_literal(): Set_literalContext {
		return this.getTypedRuleContext(Set_literalContext, 0) as Set_literalContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMatchingSet) {
	 		listener.enterMatchingSet(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMatchingSet) {
	 		listener.exitMatchingSet(this);
		}
	}
}
export class MatchingPatternContext extends Attribute_constraintContext {
	public _text!: antlr4.Token;
	constructor(parser: EParser, ctx: Attribute_constraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public MATCHING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MATCHING, 0);
	}
	public TEXT_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TEXT_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMatchingPattern) {
	 		listener.enterMatchingPattern(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMatchingPattern) {
	 		listener.exitMatchingPattern(this);
		}
	}
}
export class MatchingListContext extends Attribute_constraintContext {
	public _source!: List_literalContext;
	constructor(parser: EParser, ctx: Attribute_constraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public IN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.IN, 0);
	}
	public list_literal(): List_literalContext {
		return this.getTypedRuleContext(List_literalContext, 0) as List_literalContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMatchingList) {
	 		listener.enterMatchingList(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMatchingList) {
	 		listener.exitMatchingList(this);
		}
	}
}
export class MatchingRangeContext extends Attribute_constraintContext {
	public _source!: Range_literalContext;
	constructor(parser: EParser, ctx: Attribute_constraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public IN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.IN, 0);
	}
	public range_literal(): Range_literalContext {
		return this.getTypedRuleContext(Range_literalContext, 0) as Range_literalContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMatchingRange) {
	 		listener.enterMatchingRange(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMatchingRange) {
	 		listener.exitMatchingRange(this);
		}
	}
}
export class MatchingExpressionContext extends Attribute_constraintContext {
	public _exp!: ExpressionContext;
	constructor(parser: EParser, ctx: Attribute_constraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public MATCHING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MATCHING, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMatchingExpression) {
	 		listener.enterMatchingExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMatchingExpression) {
	 		listener.exitMatchingExpression(this);
		}
	}
}


export class List_literalContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LBRAK, 0);
	}
	public RBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RBRAK, 0);
	}
	public MUTABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MUTABLE, 0);
	}
	public expression_list(): Expression_listContext {
		return this.getTypedRuleContext(Expression_listContext, 0) as Expression_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_list_literal;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterList_literal) {
	 		listener.enterList_literal(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitList_literal) {
	 		listener.exitList_literal(this);
		}
	}
}


export class Set_literalContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LT, 0);
	}
	public GT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.GT, 0);
	}
	public MUTABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MUTABLE, 0);
	}
	public expression_list(): Expression_listContext {
		return this.getTypedRuleContext(Expression_listContext, 0) as Expression_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_set_literal;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSet_literal) {
	 		listener.enterSet_literal(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSet_literal) {
	 		listener.exitSet_literal(this);
		}
	}
}


export class Expression_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public COMMA_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COMMA);
	}
	public COMMA(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_expression_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterExpression_list) {
	 		listener.enterExpression_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitExpression_list) {
	 		listener.exitExpression_list(this);
		}
	}
}


export class Range_literalContext extends antlr4.context.ParserRuleContext {
	public _low!: ExpressionContext;
	public _high!: ExpressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LBRAK, 0);
	}
	public RANGE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RANGE, 0);
	}
	public RBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RBRAK, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_range_literal;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterRange_literal) {
	 		listener.enterRange_literal(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitRange_literal) {
	 		listener.exitRange_literal(this);
		}
	}
}


export class TypedefContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_typedef;
	}
	public copyFrom(ctx: TypedefContext): void {
		super.copyFrom(ctx);
	}
}
export class IteratorTypeContext extends TypedefContext {
	public _i!: TypedefContext;
	constructor(parser: EParser, ctx: TypedefContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ITERATOR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ITERATOR, 0);
	}
	public LT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LT, 0);
	}
	public GT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.GT, 0);
	}
	public typedef(): TypedefContext {
		return this.getTypedRuleContext(TypedefContext, 0) as TypedefContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterIteratorType) {
	 		listener.enterIteratorType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitIteratorType) {
	 		listener.exitIteratorType(this);
		}
	}
}
export class SetTypeContext extends TypedefContext {
	public _s!: TypedefContext;
	constructor(parser: EParser, ctx: TypedefContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LTGT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LTGT, 0);
	}
	public typedef(): TypedefContext {
		return this.getTypedRuleContext(TypedefContext, 0) as TypedefContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSetType) {
	 		listener.enterSetType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSetType) {
	 		listener.exitSetType(this);
		}
	}
}
export class ListTypeContext extends TypedefContext {
	public _l!: TypedefContext;
	constructor(parser: EParser, ctx: TypedefContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LBRAK, 0);
	}
	public RBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RBRAK, 0);
	}
	public typedef(): TypedefContext {
		return this.getTypedRuleContext(TypedefContext, 0) as TypedefContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterListType) {
	 		listener.enterListType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitListType) {
	 		listener.exitListType(this);
		}
	}
}
export class DictTypeContext extends TypedefContext {
	public _d!: TypedefContext;
	constructor(parser: EParser, ctx: TypedefContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LTCOLONGT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LTCOLONGT, 0);
	}
	public typedef(): TypedefContext {
		return this.getTypedRuleContext(TypedefContext, 0) as TypedefContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDictType) {
	 		listener.enterDictType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDictType) {
	 		listener.exitDictType(this);
		}
	}
}
export class CursorTypeContext extends TypedefContext {
	public _c!: TypedefContext;
	constructor(parser: EParser, ctx: TypedefContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CURSOR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CURSOR, 0);
	}
	public LT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LT, 0);
	}
	public GT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.GT, 0);
	}
	public typedef(): TypedefContext {
		return this.getTypedRuleContext(TypedefContext, 0) as TypedefContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCursorType) {
	 		listener.enterCursorType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCursorType) {
	 		listener.exitCursorType(this);
		}
	}
}
export class TypeTypeContext extends TypedefContext {
	public _t!: TypedefContext;
	constructor(parser: EParser, ctx: TypedefContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TYPE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TYPE, 0);
	}
	public LT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LT, 0);
	}
	public GT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.GT, 0);
	}
	public typedef(): TypedefContext {
		return this.getTypedRuleContext(TypedefContext, 0) as TypedefContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterTypeType) {
	 		listener.enterTypeType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitTypeType) {
	 		listener.exitTypeType(this);
		}
	}
}
export class PrimaryTypeContext extends TypedefContext {
	public _p!: Primary_typeContext;
	constructor(parser: EParser, ctx: TypedefContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public primary_type(): Primary_typeContext {
		return this.getTypedRuleContext(Primary_typeContext, 0) as Primary_typeContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPrimaryType) {
	 		listener.enterPrimaryType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPrimaryType) {
	 		listener.exitPrimaryType(this);
		}
	}
}


export class Primary_typeContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_primary_type;
	}
	public copyFrom(ctx: Primary_typeContext): void {
		super.copyFrom(ctx);
	}
}
export class NativeTypeContext extends Primary_typeContext {
	public _n!: Native_typeContext;
	constructor(parser: EParser, ctx: Primary_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public native_type(): Native_typeContext {
		return this.getTypedRuleContext(Native_typeContext, 0) as Native_typeContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNativeType) {
	 		listener.enterNativeType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNativeType) {
	 		listener.exitNativeType(this);
		}
	}
}
export class CategoryTypeContext extends Primary_typeContext {
	public _c!: Category_typeContext;
	constructor(parser: EParser, ctx: Primary_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public category_type(): Category_typeContext {
		return this.getTypedRuleContext(Category_typeContext, 0) as Category_typeContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCategoryType) {
	 		listener.enterCategoryType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCategoryType) {
	 		listener.exitCategoryType(this);
		}
	}
}


export class Native_typeContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_native_type;
	}
	public copyFrom(ctx: Native_typeContext): void {
		super.copyFrom(ctx);
	}
}
export class PeriodTypeContext extends Native_typeContext {
	constructor(parser: EParser, ctx: Native_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public PERIOD(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.PERIOD, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPeriodType) {
	 		listener.enterPeriodType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPeriodType) {
	 		listener.exitPeriodType(this);
		}
	}
}
export class HtmlTypeContext extends Native_typeContext {
	constructor(parser: EParser, ctx: Native_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public HTML(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.HTML, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterHtmlType) {
	 		listener.enterHtmlType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitHtmlType) {
	 		listener.exitHtmlType(this);
		}
	}
}
export class CssTypeContext extends Native_typeContext {
	constructor(parser: EParser, ctx: Native_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CSS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CSS, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCssType) {
	 		listener.enterCssType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCssType) {
	 		listener.exitCssType(this);
		}
	}
}
export class BooleanTypeContext extends Native_typeContext {
	constructor(parser: EParser, ctx: Native_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public BOOLEAN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BOOLEAN, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterBooleanType) {
	 		listener.enterBooleanType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitBooleanType) {
	 		listener.exitBooleanType(this);
		}
	}
}
export class DocumentTypeContext extends Native_typeContext {
	constructor(parser: EParser, ctx: Native_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DOCUMENT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOCUMENT, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDocumentType) {
	 		listener.enterDocumentType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDocumentType) {
	 		listener.exitDocumentType(this);
		}
	}
}
export class CharacterTypeContext extends Native_typeContext {
	constructor(parser: EParser, ctx: Native_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CHARACTER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CHARACTER, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCharacterType) {
	 		listener.enterCharacterType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCharacterType) {
	 		listener.exitCharacterType(this);
		}
	}
}
export class VersionTypeContext extends Native_typeContext {
	constructor(parser: EParser, ctx: Native_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public VERSION(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VERSION, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterVersionType) {
	 		listener.enterVersionType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitVersionType) {
	 		listener.exitVersionType(this);
		}
	}
}
export class TextTypeContext extends Native_typeContext {
	constructor(parser: EParser, ctx: Native_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TEXT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TEXT, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterTextType) {
	 		listener.enterTextType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitTextType) {
	 		listener.exitTextType(this);
		}
	}
}
export class ImageTypeContext extends Native_typeContext {
	constructor(parser: EParser, ctx: Native_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public IMAGE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.IMAGE, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterImageType) {
	 		listener.enterImageType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitImageType) {
	 		listener.exitImageType(this);
		}
	}
}
export class TimeTypeContext extends Native_typeContext {
	constructor(parser: EParser, ctx: Native_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TIME(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TIME, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterTimeType) {
	 		listener.enterTimeType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitTimeType) {
	 		listener.exitTimeType(this);
		}
	}
}
export class IntegerTypeContext extends Native_typeContext {
	constructor(parser: EParser, ctx: Native_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public INTEGER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.INTEGER, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterIntegerType) {
	 		listener.enterIntegerType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitIntegerType) {
	 		listener.exitIntegerType(this);
		}
	}
}
export class DateTimeTypeContext extends Native_typeContext {
	constructor(parser: EParser, ctx: Native_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DATETIME(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DATETIME, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDateTimeType) {
	 		listener.enterDateTimeType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDateTimeType) {
	 		listener.exitDateTimeType(this);
		}
	}
}
export class BlobTypeContext extends Native_typeContext {
	constructor(parser: EParser, ctx: Native_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public BLOB(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BLOB, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterBlobType) {
	 		listener.enterBlobType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitBlobType) {
	 		listener.exitBlobType(this);
		}
	}
}
export class UUIDTypeContext extends Native_typeContext {
	constructor(parser: EParser, ctx: Native_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public UUID(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.UUID, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterUUIDType) {
	 		listener.enterUUIDType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitUUIDType) {
	 		listener.exitUUIDType(this);
		}
	}
}
export class DecimalTypeContext extends Native_typeContext {
	constructor(parser: EParser, ctx: Native_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DECIMAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DECIMAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDecimalType) {
	 		listener.enterDecimalType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDecimalType) {
	 		listener.exitDecimalType(this);
		}
	}
}
export class CodeTypeContext extends Native_typeContext {
	constructor(parser: EParser, ctx: Native_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CODE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CODE, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCodeType) {
	 		listener.enterCodeType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCodeType) {
	 		listener.exitCodeType(this);
		}
	}
}
export class DateTypeContext extends Native_typeContext {
	constructor(parser: EParser, ctx: Native_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DATE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DATE, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDateType) {
	 		listener.enterDateType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDateType) {
	 		listener.exitDateType(this);
		}
	}
}
export class DbIdTypeContext extends Native_typeContext {
	constructor(parser: EParser, ctx: Native_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DBID(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DBID, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDbIdType) {
	 		listener.enterDbIdType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDbIdType) {
	 		listener.exitDbIdType(this);
		}
	}
}


export class Category_typeContext extends antlr4.context.ParserRuleContext {
	public _t1!: antlr4.Token;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TYPE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TYPE_IDENTIFIER, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_category_type;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCategory_type) {
	 		listener.enterCategory_type(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCategory_type) {
	 		listener.exitCategory_type(this);
		}
	}
}


export class Mutable_category_typeContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public category_type(): Category_typeContext {
		return this.getTypedRuleContext(Category_typeContext, 0) as Category_typeContext;
	}
	public MUTABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MUTABLE, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_mutable_category_type;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMutable_category_type) {
	 		listener.enterMutable_category_type(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMutable_category_type) {
	 		listener.exitMutable_category_type(this);
		}
	}
}


export class Code_typeContext extends antlr4.context.ParserRuleContext {
	public _t1!: antlr4.Token;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CODE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CODE, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_code_type;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCode_type) {
	 		listener.enterCode_type(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCode_type) {
	 		listener.exitCode_type(this);
		}
	}
}


export class Category_declarationContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_category_declaration;
	}
	public copyFrom(ctx: Category_declarationContext): void {
		super.copyFrom(ctx);
	}
}
export class ConcreteCategoryDeclarationContext extends Category_declarationContext {
	public _decl!: Concrete_category_declarationContext;
	constructor(parser: EParser, ctx: Category_declarationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public concrete_category_declaration(): Concrete_category_declarationContext {
		return this.getTypedRuleContext(Concrete_category_declarationContext, 0) as Concrete_category_declarationContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterConcreteCategoryDeclaration) {
	 		listener.enterConcreteCategoryDeclaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitConcreteCategoryDeclaration) {
	 		listener.exitConcreteCategoryDeclaration(this);
		}
	}
}
export class NativeCategoryDeclarationContext extends Category_declarationContext {
	public _decl!: Native_category_declarationContext;
	constructor(parser: EParser, ctx: Category_declarationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public native_category_declaration(): Native_category_declarationContext {
		return this.getTypedRuleContext(Native_category_declarationContext, 0) as Native_category_declarationContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNativeCategoryDeclaration) {
	 		listener.enterNativeCategoryDeclaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNativeCategoryDeclaration) {
	 		listener.exitNativeCategoryDeclaration(this);
		}
	}
}
export class SingletonCategoryDeclarationContext extends Category_declarationContext {
	public _decl!: Singleton_category_declarationContext;
	constructor(parser: EParser, ctx: Category_declarationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public singleton_category_declaration(): Singleton_category_declarationContext {
		return this.getTypedRuleContext(Singleton_category_declarationContext, 0) as Singleton_category_declarationContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSingletonCategoryDeclaration) {
	 		listener.enterSingletonCategoryDeclaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSingletonCategoryDeclaration) {
	 		listener.exitSingletonCategoryDeclaration(this);
		}
	}
}


export class Widget_declarationContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_widget_declaration;
	}
	public copyFrom(ctx: Widget_declarationContext): void {
		super.copyFrom(ctx);
	}
}
export class ConcreteWidgetDeclarationContext extends Widget_declarationContext {
	public _decl!: Concrete_widget_declarationContext;
	constructor(parser: EParser, ctx: Widget_declarationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public concrete_widget_declaration(): Concrete_widget_declarationContext {
		return this.getTypedRuleContext(Concrete_widget_declarationContext, 0) as Concrete_widget_declarationContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterConcreteWidgetDeclaration) {
	 		listener.enterConcreteWidgetDeclaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitConcreteWidgetDeclaration) {
	 		listener.exitConcreteWidgetDeclaration(this);
		}
	}
}
export class NativeWidgetDeclarationContext extends Widget_declarationContext {
	public _decl!: Native_widget_declarationContext;
	constructor(parser: EParser, ctx: Widget_declarationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public native_widget_declaration(): Native_widget_declarationContext {
		return this.getTypedRuleContext(Native_widget_declarationContext, 0) as Native_widget_declarationContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNativeWidgetDeclaration) {
	 		listener.enterNativeWidgetDeclaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNativeWidgetDeclaration) {
	 		listener.exitNativeWidgetDeclaration(this);
		}
	}
}


export class Type_identifier_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public type_identifier_list(): Type_identifierContext[] {
		return this.getTypedRuleContexts(Type_identifierContext) as Type_identifierContext[];
	}
	public type_identifier(i: number): Type_identifierContext {
		return this.getTypedRuleContext(Type_identifierContext, i) as Type_identifierContext;
	}
	public COMMA_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COMMA);
	}
	public COMMA(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_type_identifier_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterType_identifier_list) {
	 		listener.enterType_identifier_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitType_identifier_list) {
	 		listener.exitType_identifier_list(this);
		}
	}
}


export class Method_identifierContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
	public type_identifier(): Type_identifierContext {
		return this.getTypedRuleContext(Type_identifierContext, 0) as Type_identifierContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_method_identifier;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMethod_identifier) {
	 		listener.enterMethod_identifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMethod_identifier) {
	 		listener.exitMethod_identifier(this);
		}
	}
}


export class Identifier_or_keywordContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public keyword(): KeywordContext {
		return this.getTypedRuleContext(KeywordContext, 0) as KeywordContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_identifier_or_keyword;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterIdentifier_or_keyword) {
	 		listener.enterIdentifier_or_keyword(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitIdentifier_or_keyword) {
	 		listener.exitIdentifier_or_keyword(this);
		}
	}
}


export class Nospace_hyphen_identifier_or_keywordContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MINUS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MINUS, 0);
	}
	public nospace_identifier_or_keyword(): Nospace_identifier_or_keywordContext {
		return this.getTypedRuleContext(Nospace_identifier_or_keywordContext, 0) as Nospace_identifier_or_keywordContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_nospace_hyphen_identifier_or_keyword;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNospace_hyphen_identifier_or_keyword) {
	 		listener.enterNospace_hyphen_identifier_or_keyword(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNospace_hyphen_identifier_or_keyword) {
	 		listener.exitNospace_hyphen_identifier_or_keyword(this);
		}
	}
}


export class Nospace_identifier_or_keywordContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier_or_keyword(): Identifier_or_keywordContext {
		return this.getTypedRuleContext(Identifier_or_keywordContext, 0) as Identifier_or_keywordContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_nospace_identifier_or_keyword;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNospace_identifier_or_keyword) {
	 		listener.enterNospace_identifier_or_keyword(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNospace_identifier_or_keyword) {
	 		listener.exitNospace_identifier_or_keyword(this);
		}
	}
}


export class IdentifierContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_identifier;
	}
	public copyFrom(ctx: IdentifierContext): void {
		super.copyFrom(ctx);
	}
}
export class TypeIdentifierContext extends IdentifierContext {
	constructor(parser: EParser, ctx: IdentifierContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public type_identifier(): Type_identifierContext {
		return this.getTypedRuleContext(Type_identifierContext, 0) as Type_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterTypeIdentifier) {
	 		listener.enterTypeIdentifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitTypeIdentifier) {
	 		listener.exitTypeIdentifier(this);
		}
	}
}
export class SymbolIdentifierContext extends IdentifierContext {
	constructor(parser: EParser, ctx: IdentifierContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public symbol_identifier(): Symbol_identifierContext {
		return this.getTypedRuleContext(Symbol_identifierContext, 0) as Symbol_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSymbolIdentifier) {
	 		listener.enterSymbolIdentifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSymbolIdentifier) {
	 		listener.exitSymbolIdentifier(this);
		}
	}
}
export class VariableIdentifierContext extends IdentifierContext {
	constructor(parser: EParser, ctx: IdentifierContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterVariableIdentifier) {
	 		listener.enterVariableIdentifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitVariableIdentifier) {
	 		listener.exitVariableIdentifier(this);
		}
	}
}


export class Member_identifierContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VARIABLE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	}
	public CATEGORY(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CATEGORY, 0);
	}
	public MUTABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MUTABLE, 0);
	}
	public STORABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.STORABLE, 0);
	}
	public RESOURCE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RESOURCE, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_member_identifier;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMember_identifier) {
	 		listener.enterMember_identifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMember_identifier) {
	 		listener.exitMember_identifier(this);
		}
	}
}


export class Variable_identifierContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VARIABLE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	}
	public CATEGORY(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CATEGORY, 0);
	}
	public RESOURCE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RESOURCE, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_variable_identifier;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterVariable_identifier) {
	 		listener.enterVariable_identifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitVariable_identifier) {
	 		listener.exitVariable_identifier(this);
		}
	}
}


export class Attribute_identifierContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VARIABLE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	}
	public STORABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.STORABLE, 0);
	}
	public RESOURCE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RESOURCE, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_attribute_identifier;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAttribute_identifier) {
	 		listener.enterAttribute_identifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAttribute_identifier) {
	 		listener.exitAttribute_identifier(this);
		}
	}
}


export class Type_identifierContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TYPE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TYPE_IDENTIFIER, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_type_identifier;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterType_identifier) {
	 		listener.enterType_identifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitType_identifier) {
	 		listener.exitType_identifier(this);
		}
	}
}


export class Symbol_identifierContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SYMBOL_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_symbol_identifier;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSymbol_identifier) {
	 		listener.enterSymbol_identifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSymbol_identifier) {
	 		listener.exitSymbol_identifier(this);
		}
	}
}


export class Argument_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public argument_list(): ArgumentContext[] {
		return this.getTypedRuleContexts(ArgumentContext) as ArgumentContext[];
	}
	public argument(i: number): ArgumentContext {
		return this.getTypedRuleContext(ArgumentContext, i) as ArgumentContext;
	}
	public COMMA_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COMMA);
	}
	public COMMA(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_argument_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterArgument_list) {
	 		listener.enterArgument_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitArgument_list) {
	 		listener.exitArgument_list(this);
		}
	}
}


export class ArgumentContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_argument;
	}
	public copyFrom(ctx: ArgumentContext): void {
		super.copyFrom(ctx);
	}
}
export class OperatorArgumentContext extends ArgumentContext {
	public _arg!: Operator_argumentContext;
	constructor(parser: EParser, ctx: ArgumentContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public operator_argument(): Operator_argumentContext {
		return this.getTypedRuleContext(Operator_argumentContext, 0) as Operator_argumentContext;
	}
	public MUTABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MUTABLE, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterOperatorArgument) {
	 		listener.enterOperatorArgument(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitOperatorArgument) {
	 		listener.exitOperatorArgument(this);
		}
	}
}
export class CodeArgumentContext extends ArgumentContext {
	public _arg!: Code_argumentContext;
	constructor(parser: EParser, ctx: ArgumentContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public code_argument(): Code_argumentContext {
		return this.getTypedRuleContext(Code_argumentContext, 0) as Code_argumentContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCodeArgument) {
	 		listener.enterCodeArgument(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCodeArgument) {
	 		listener.exitCodeArgument(this);
		}
	}
}


export class Operator_argumentContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public named_argument(): Named_argumentContext {
		return this.getTypedRuleContext(Named_argumentContext, 0) as Named_argumentContext;
	}
	public typed_argument(): Typed_argumentContext {
		return this.getTypedRuleContext(Typed_argumentContext, 0) as Typed_argumentContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_operator_argument;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterOperator_argument) {
	 		listener.enterOperator_argument(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitOperator_argument) {
	 		listener.exitOperator_argument(this);
		}
	}
}


export class Named_argumentContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
	public EQ(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.EQ, 0);
	}
	public literal_expression(): Literal_expressionContext {
		return this.getTypedRuleContext(Literal_expressionContext, 0) as Literal_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_named_argument;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNamed_argument) {
	 		listener.enterNamed_argument(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNamed_argument) {
	 		listener.exitNamed_argument(this);
		}
	}
}


export class Code_argumentContext extends antlr4.context.ParserRuleContext {
	public _name!: Variable_identifierContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public code_type(): Code_typeContext {
		return this.getTypedRuleContext(Code_typeContext, 0) as Code_typeContext;
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_code_argument;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCode_argument) {
	 		listener.enterCode_argument(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCode_argument) {
	 		listener.exitCode_argument(this);
		}
	}
}


export class Category_or_any_typeContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public typedef(): TypedefContext {
		return this.getTypedRuleContext(TypedefContext, 0) as TypedefContext;
	}
	public any_type(): Any_typeContext {
		return this.getTypedRuleContext(Any_typeContext, 0) as Any_typeContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_category_or_any_type;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCategory_or_any_type) {
	 		listener.enterCategory_or_any_type(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCategory_or_any_type) {
	 		listener.exitCategory_or_any_type(this);
		}
	}
}


export class Any_typeContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_any_type;
	}
	public copyFrom(ctx: Any_typeContext): void {
		super.copyFrom(ctx);
	}
}
export class AnyListTypeContext extends Any_typeContext {
	constructor(parser: EParser, ctx: Any_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public any_type(): Any_typeContext {
		return this.getTypedRuleContext(Any_typeContext, 0) as Any_typeContext;
	}
	public LBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LBRAK, 0);
	}
	public RBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RBRAK, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAnyListType) {
	 		listener.enterAnyListType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAnyListType) {
	 		listener.exitAnyListType(this);
		}
	}
}
export class AnyTypeContext extends Any_typeContext {
	constructor(parser: EParser, ctx: Any_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ANY(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ANY, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAnyType) {
	 		listener.enterAnyType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAnyType) {
	 		listener.exitAnyType(this);
		}
	}
}
export class AnyDictTypeContext extends Any_typeContext {
	constructor(parser: EParser, ctx: Any_typeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public any_type(): Any_typeContext {
		return this.getTypedRuleContext(Any_typeContext, 0) as Any_typeContext;
	}
	public LCURL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LCURL, 0);
	}
	public RCURL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RCURL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAnyDictType) {
	 		listener.enterAnyDictType(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAnyDictType) {
	 		listener.exitAnyDictType(this);
		}
	}
}


export class Member_method_declaration_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public member_method_declaration_list(): Member_method_declarationContext[] {
		return this.getTypedRuleContexts(Member_method_declarationContext) as Member_method_declarationContext[];
	}
	public member_method_declaration(i: number): Member_method_declarationContext {
		return this.getTypedRuleContext(Member_method_declarationContext, i) as Member_method_declarationContext;
	}
	public lfp_list(): LfpContext[] {
		return this.getTypedRuleContexts(LfpContext) as LfpContext[];
	}
	public lfp(i: number): LfpContext {
		return this.getTypedRuleContext(LfpContext, i) as LfpContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_member_method_declaration_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMember_method_declaration_list) {
	 		listener.enterMember_method_declaration_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMember_method_declaration_list) {
	 		listener.exitMember_method_declaration_list(this);
		}
	}
}


export class Member_method_declarationContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public setter_method_declaration(): Setter_method_declarationContext {
		return this.getTypedRuleContext(Setter_method_declarationContext, 0) as Setter_method_declarationContext;
	}
	public getter_method_declaration(): Getter_method_declarationContext {
		return this.getTypedRuleContext(Getter_method_declarationContext, 0) as Getter_method_declarationContext;
	}
	public concrete_method_declaration(): Concrete_method_declarationContext {
		return this.getTypedRuleContext(Concrete_method_declarationContext, 0) as Concrete_method_declarationContext;
	}
	public abstract_member_method_declaration(): Abstract_member_method_declarationContext {
		return this.getTypedRuleContext(Abstract_member_method_declarationContext, 0) as Abstract_member_method_declarationContext;
	}
	public operator_method_declaration(): Operator_method_declarationContext {
		return this.getTypedRuleContext(Operator_method_declarationContext, 0) as Operator_method_declarationContext;
	}
	public comment_statement_list(): Comment_statementContext[] {
		return this.getTypedRuleContexts(Comment_statementContext) as Comment_statementContext[];
	}
	public comment_statement(i: number): Comment_statementContext {
		return this.getTypedRuleContext(Comment_statementContext, i) as Comment_statementContext;
	}
	public lfp_list(): LfpContext[] {
		return this.getTypedRuleContexts(LfpContext) as LfpContext[];
	}
	public lfp(i: number): LfpContext {
		return this.getTypedRuleContext(LfpContext, i) as LfpContext;
	}
	public annotation_constructor_list(): Annotation_constructorContext[] {
		return this.getTypedRuleContexts(Annotation_constructorContext) as Annotation_constructorContext[];
	}
	public annotation_constructor(i: number): Annotation_constructorContext {
		return this.getTypedRuleContext(Annotation_constructorContext, i) as Annotation_constructorContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_member_method_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMember_method_declaration) {
	 		listener.enterMember_method_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMember_method_declaration) {
	 		listener.exitMember_method_declaration(this);
		}
	}
}


export class Native_member_method_declaration_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public native_member_method_declaration_list(): Native_member_method_declarationContext[] {
		return this.getTypedRuleContexts(Native_member_method_declarationContext) as Native_member_method_declarationContext[];
	}
	public native_member_method_declaration(i: number): Native_member_method_declarationContext {
		return this.getTypedRuleContext(Native_member_method_declarationContext, i) as Native_member_method_declarationContext;
	}
	public lfp_list(): LfpContext[] {
		return this.getTypedRuleContexts(LfpContext) as LfpContext[];
	}
	public lfp(i: number): LfpContext {
		return this.getTypedRuleContext(LfpContext, i) as LfpContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_native_member_method_declaration_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNative_member_method_declaration_list) {
	 		listener.enterNative_member_method_declaration_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNative_member_method_declaration_list) {
	 		listener.exitNative_member_method_declaration_list(this);
		}
	}
}


export class Native_member_method_declarationContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public native_getter_declaration(): Native_getter_declarationContext {
		return this.getTypedRuleContext(Native_getter_declarationContext, 0) as Native_getter_declarationContext;
	}
	public native_setter_declaration(): Native_setter_declarationContext {
		return this.getTypedRuleContext(Native_setter_declarationContext, 0) as Native_setter_declarationContext;
	}
	public native_method_declaration(): Native_method_declarationContext {
		return this.getTypedRuleContext(Native_method_declarationContext, 0) as Native_method_declarationContext;
	}
	public comment_statement_list(): Comment_statementContext[] {
		return this.getTypedRuleContexts(Comment_statementContext) as Comment_statementContext[];
	}
	public comment_statement(i: number): Comment_statementContext {
		return this.getTypedRuleContext(Comment_statementContext, i) as Comment_statementContext;
	}
	public lfp_list(): LfpContext[] {
		return this.getTypedRuleContexts(LfpContext) as LfpContext[];
	}
	public lfp(i: number): LfpContext {
		return this.getTypedRuleContext(LfpContext, i) as LfpContext;
	}
	public annotation_constructor_list(): Annotation_constructorContext[] {
		return this.getTypedRuleContexts(Annotation_constructorContext) as Annotation_constructorContext[];
	}
	public annotation_constructor(i: number): Annotation_constructorContext {
		return this.getTypedRuleContext(Annotation_constructorContext, i) as Annotation_constructorContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_native_member_method_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNative_member_method_declaration) {
	 		listener.enterNative_member_method_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNative_member_method_declaration) {
	 		listener.exitNative_member_method_declaration(this);
		}
	}
}


export class Native_category_bindingContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_native_category_binding;
	}
	public copyFrom(ctx: Native_category_bindingContext): void {
		super.copyFrom(ctx);
	}
}
export class Python2CategoryBindingContext extends Native_category_bindingContext {
	public _binding!: Python_category_bindingContext;
	constructor(parser: EParser, ctx: Native_category_bindingContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public PYTHON2(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.PYTHON2, 0);
	}
	public python_category_binding(): Python_category_bindingContext {
		return this.getTypedRuleContext(Python_category_bindingContext, 0) as Python_category_bindingContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPython2CategoryBinding) {
	 		listener.enterPython2CategoryBinding(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPython2CategoryBinding) {
	 		listener.exitPython2CategoryBinding(this);
		}
	}
}
export class Python3CategoryBindingContext extends Native_category_bindingContext {
	public _binding!: Python_category_bindingContext;
	constructor(parser: EParser, ctx: Native_category_bindingContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public PYTHON3(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.PYTHON3, 0);
	}
	public python_category_binding(): Python_category_bindingContext {
		return this.getTypedRuleContext(Python_category_bindingContext, 0) as Python_category_bindingContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPython3CategoryBinding) {
	 		listener.enterPython3CategoryBinding(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPython3CategoryBinding) {
	 		listener.exitPython3CategoryBinding(this);
		}
	}
}
export class JavaCategoryBindingContext extends Native_category_bindingContext {
	public _binding!: Java_class_identifier_expressionContext;
	constructor(parser: EParser, ctx: Native_category_bindingContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public JAVA(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.JAVA, 0);
	}
	public java_class_identifier_expression(): Java_class_identifier_expressionContext {
		return this.getTypedRuleContext(Java_class_identifier_expressionContext, 0) as Java_class_identifier_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavaCategoryBinding) {
	 		listener.enterJavaCategoryBinding(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavaCategoryBinding) {
	 		listener.exitJavaCategoryBinding(this);
		}
	}
}
export class CSharpCategoryBindingContext extends Native_category_bindingContext {
	public _binding!: Csharp_identifier_expressionContext;
	constructor(parser: EParser, ctx: Native_category_bindingContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CSHARP(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CSHARP, 0);
	}
	public csharp_identifier_expression(): Csharp_identifier_expressionContext {
		return this.getTypedRuleContext(Csharp_identifier_expressionContext, 0) as Csharp_identifier_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCSharpCategoryBinding) {
	 		listener.enterCSharpCategoryBinding(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCSharpCategoryBinding) {
	 		listener.exitCSharpCategoryBinding(this);
		}
	}
}
export class JavascriptCategoryBindingContext extends Native_category_bindingContext {
	public _binding!: Javascript_category_bindingContext;
	constructor(parser: EParser, ctx: Native_category_bindingContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public JAVASCRIPT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.JAVASCRIPT, 0);
	}
	public javascript_category_binding(): Javascript_category_bindingContext {
		return this.getTypedRuleContext(Javascript_category_bindingContext, 0) as Javascript_category_bindingContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascriptCategoryBinding) {
	 		listener.enterJavascriptCategoryBinding(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascriptCategoryBinding) {
	 		listener.exitJavascriptCategoryBinding(this);
		}
	}
}


export class Python_category_bindingContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public python_module(): Python_moduleContext {
		return this.getTypedRuleContext(Python_moduleContext, 0) as Python_moduleContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_python_category_binding;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPython_category_binding) {
	 		listener.enterPython_category_binding(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPython_category_binding) {
	 		listener.exitPython_category_binding(this);
		}
	}
}


export class Python_moduleContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FROM(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FROM, 0);
	}
	public module_token(): Module_tokenContext {
		return this.getTypedRuleContext(Module_tokenContext, 0) as Module_tokenContext;
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public python_identifier_list(): Python_identifierContext[] {
		return this.getTypedRuleContexts(Python_identifierContext) as Python_identifierContext[];
	}
	public python_identifier(i: number): Python_identifierContext {
		return this.getTypedRuleContext(Python_identifierContext, i) as Python_identifierContext;
	}
	public DOT_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.DOT);
	}
	public DOT(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOT, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_python_module;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPython_module) {
	 		listener.enterPython_module(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPython_module) {
	 		listener.exitPython_module(this);
		}
	}
}


export class Javascript_category_bindingContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public javascript_identifier_list(): Javascript_identifierContext[] {
		return this.getTypedRuleContexts(Javascript_identifierContext) as Javascript_identifierContext[];
	}
	public javascript_identifier(i: number): Javascript_identifierContext {
		return this.getTypedRuleContext(Javascript_identifierContext, i) as Javascript_identifierContext;
	}
	public DOT_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.DOT);
	}
	public DOT(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOT, i);
	}
	public javascript_module(): Javascript_moduleContext {
		return this.getTypedRuleContext(Javascript_moduleContext, 0) as Javascript_moduleContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_javascript_category_binding;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascript_category_binding) {
	 		listener.enterJavascript_category_binding(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascript_category_binding) {
	 		listener.exitJavascript_category_binding(this);
		}
	}
}


export class Javascript_moduleContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FROM(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FROM, 0);
	}
	public module_token(): Module_tokenContext {
		return this.getTypedRuleContext(Module_tokenContext, 0) as Module_tokenContext;
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public javascript_identifier_list(): Javascript_identifierContext[] {
		return this.getTypedRuleContexts(Javascript_identifierContext) as Javascript_identifierContext[];
	}
	public javascript_identifier(i: number): Javascript_identifierContext {
		return this.getTypedRuleContext(Javascript_identifierContext, i) as Javascript_identifierContext;
	}
	public SLASH_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.SLASH);
	}
	public SLASH(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SLASH, i);
	}
	public DOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOT, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_javascript_module;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascript_module) {
	 		listener.enterJavascript_module(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascript_module) {
	 		listener.exitJavascript_module(this);
		}
	}
}


export class Variable_identifier_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public variable_identifier_list(): Variable_identifierContext[] {
		return this.getTypedRuleContexts(Variable_identifierContext) as Variable_identifierContext[];
	}
	public variable_identifier(i: number): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, i) as Variable_identifierContext;
	}
	public COMMA_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COMMA);
	}
	public COMMA(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_variable_identifier_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterVariable_identifier_list) {
	 		listener.enterVariable_identifier_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitVariable_identifier_list) {
	 		listener.exitVariable_identifier_list(this);
		}
	}
}


export class Attribute_identifier_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public attribute_identifier_list(): Attribute_identifierContext[] {
		return this.getTypedRuleContexts(Attribute_identifierContext) as Attribute_identifierContext[];
	}
	public attribute_identifier(i: number): Attribute_identifierContext {
		return this.getTypedRuleContext(Attribute_identifierContext, i) as Attribute_identifierContext;
	}
	public COMMA_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COMMA);
	}
	public COMMA(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_attribute_identifier_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAttribute_identifier_list) {
	 		listener.enterAttribute_identifier_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAttribute_identifier_list) {
	 		listener.exitAttribute_identifier_list(this);
		}
	}
}


export class Method_declarationContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public abstract_global_method_declaration(): Abstract_global_method_declarationContext {
		return this.getTypedRuleContext(Abstract_global_method_declarationContext, 0) as Abstract_global_method_declarationContext;
	}
	public concrete_method_declaration(): Concrete_method_declarationContext {
		return this.getTypedRuleContext(Concrete_method_declarationContext, 0) as Concrete_method_declarationContext;
	}
	public native_method_declaration(): Native_method_declarationContext {
		return this.getTypedRuleContext(Native_method_declarationContext, 0) as Native_method_declarationContext;
	}
	public test_method_declaration(): Test_method_declarationContext {
		return this.getTypedRuleContext(Test_method_declarationContext, 0) as Test_method_declarationContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_method_declaration;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMethod_declaration) {
	 		listener.enterMethod_declaration(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMethod_declaration) {
	 		listener.exitMethod_declaration(this);
		}
	}
}


export class Comment_statementContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COMMENT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMENT, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_comment_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterComment_statement) {
	 		listener.enterComment_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitComment_statement) {
	 		listener.exitComment_statement(this);
		}
	}
}


export class Native_statement_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public native_statement_list(): Native_statementContext[] {
		return this.getTypedRuleContexts(Native_statementContext) as Native_statementContext[];
	}
	public native_statement(i: number): Native_statementContext {
		return this.getTypedRuleContext(Native_statementContext, i) as Native_statementContext;
	}
	public lfp_list(): LfpContext[] {
		return this.getTypedRuleContexts(LfpContext) as LfpContext[];
	}
	public lfp(i: number): LfpContext {
		return this.getTypedRuleContext(LfpContext, i) as LfpContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_native_statement_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNative_statement_list) {
	 		listener.enterNative_statement_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNative_statement_list) {
	 		listener.exitNative_statement_list(this);
		}
	}
}


export class Native_statementContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_native_statement;
	}
	public copyFrom(ctx: Native_statementContext): void {
		super.copyFrom(ctx);
	}
}
export class CSharpNativeStatementContext extends Native_statementContext {
	constructor(parser: EParser, ctx: Native_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CSHARP(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CSHARP, 0);
	}
	public csharp_statement(): Csharp_statementContext {
		return this.getTypedRuleContext(Csharp_statementContext, 0) as Csharp_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCSharpNativeStatement) {
	 		listener.enterCSharpNativeStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCSharpNativeStatement) {
	 		listener.exitCSharpNativeStatement(this);
		}
	}
}
export class JavaNativeStatementContext extends Native_statementContext {
	constructor(parser: EParser, ctx: Native_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public JAVA(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.JAVA, 0);
	}
	public java_statement(): Java_statementContext {
		return this.getTypedRuleContext(Java_statementContext, 0) as Java_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavaNativeStatement) {
	 		listener.enterJavaNativeStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavaNativeStatement) {
	 		listener.exitJavaNativeStatement(this);
		}
	}
}
export class JavascriptNativeStatementContext extends Native_statementContext {
	constructor(parser: EParser, ctx: Native_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public JAVASCRIPT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.JAVASCRIPT, 0);
	}
	public javascript_native_statement(): Javascript_native_statementContext {
		return this.getTypedRuleContext(Javascript_native_statementContext, 0) as Javascript_native_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascriptNativeStatement) {
	 		listener.enterJavascriptNativeStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascriptNativeStatement) {
	 		listener.exitJavascriptNativeStatement(this);
		}
	}
}
export class Python2NativeStatementContext extends Native_statementContext {
	constructor(parser: EParser, ctx: Native_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public PYTHON2(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.PYTHON2, 0);
	}
	public python_native_statement(): Python_native_statementContext {
		return this.getTypedRuleContext(Python_native_statementContext, 0) as Python_native_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPython2NativeStatement) {
	 		listener.enterPython2NativeStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPython2NativeStatement) {
	 		listener.exitPython2NativeStatement(this);
		}
	}
}
export class Python3NativeStatementContext extends Native_statementContext {
	constructor(parser: EParser, ctx: Native_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public PYTHON3(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.PYTHON3, 0);
	}
	public python_native_statement(): Python_native_statementContext {
		return this.getTypedRuleContext(Python_native_statementContext, 0) as Python_native_statementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPython3NativeStatement) {
	 		listener.enterPython3NativeStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPython3NativeStatement) {
	 		listener.exitPython3NativeStatement(this);
		}
	}
}


export class Python_native_statementContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public python_statement(): Python_statementContext {
		return this.getTypedRuleContext(Python_statementContext, 0) as Python_statementContext;
	}
	public SEMI(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SEMI, 0);
	}
	public python_module(): Python_moduleContext {
		return this.getTypedRuleContext(Python_moduleContext, 0) as Python_moduleContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_python_native_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPython_native_statement) {
	 		listener.enterPython_native_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPython_native_statement) {
	 		listener.exitPython_native_statement(this);
		}
	}
}


export class Javascript_native_statementContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public javascript_statement(): Javascript_statementContext {
		return this.getTypedRuleContext(Javascript_statementContext, 0) as Javascript_statementContext;
	}
	public SEMI(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SEMI, 0);
	}
	public javascript_module(): Javascript_moduleContext {
		return this.getTypedRuleContext(Javascript_moduleContext, 0) as Javascript_moduleContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_javascript_native_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascript_native_statement) {
	 		listener.enterJavascript_native_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascript_native_statement) {
	 		listener.exitJavascript_native_statement(this);
		}
	}
}


export class Statement_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public statement_list(): StatementContext[] {
		return this.getTypedRuleContexts(StatementContext) as StatementContext[];
	}
	public statement(i: number): StatementContext {
		return this.getTypedRuleContext(StatementContext, i) as StatementContext;
	}
	public lfp_list(): LfpContext[] {
		return this.getTypedRuleContexts(LfpContext) as LfpContext[];
	}
	public lfp(i: number): LfpContext {
		return this.getTypedRuleContext(LfpContext, i) as LfpContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_statement_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterStatement_list) {
	 		listener.enterStatement_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitStatement_list) {
	 		listener.exitStatement_list(this);
		}
	}
}


export class Assertion_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public assertion_list(): AssertionContext[] {
		return this.getTypedRuleContexts(AssertionContext) as AssertionContext[];
	}
	public assertion(i: number): AssertionContext {
		return this.getTypedRuleContext(AssertionContext, i) as AssertionContext;
	}
	public lfp_list(): LfpContext[] {
		return this.getTypedRuleContexts(LfpContext) as LfpContext[];
	}
	public lfp(i: number): LfpContext {
		return this.getTypedRuleContext(LfpContext, i) as LfpContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_assertion_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAssertion_list) {
	 		listener.enterAssertion_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAssertion_list) {
	 		listener.exitAssertion_list(this);
		}
	}
}


export class Switch_case_statement_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public switch_case_statement_list(): Switch_case_statementContext[] {
		return this.getTypedRuleContexts(Switch_case_statementContext) as Switch_case_statementContext[];
	}
	public switch_case_statement(i: number): Switch_case_statementContext {
		return this.getTypedRuleContext(Switch_case_statementContext, i) as Switch_case_statementContext;
	}
	public lfp_list(): LfpContext[] {
		return this.getTypedRuleContexts(LfpContext) as LfpContext[];
	}
	public lfp(i: number): LfpContext {
		return this.getTypedRuleContext(LfpContext, i) as LfpContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_switch_case_statement_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSwitch_case_statement_list) {
	 		listener.enterSwitch_case_statement_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSwitch_case_statement_list) {
	 		listener.exitSwitch_case_statement_list(this);
		}
	}
}


export class Catch_statement_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public catch_statement_list(): Catch_statementContext[] {
		return this.getTypedRuleContexts(Catch_statementContext) as Catch_statementContext[];
	}
	public catch_statement(i: number): Catch_statementContext {
		return this.getTypedRuleContext(Catch_statementContext, i) as Catch_statementContext;
	}
	public lfp_list(): LfpContext[] {
		return this.getTypedRuleContexts(LfpContext) as LfpContext[];
	}
	public lfp(i: number): LfpContext {
		return this.getTypedRuleContext(LfpContext, i) as LfpContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_catch_statement_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCatch_statement_list) {
	 		listener.enterCatch_statement_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCatch_statement_list) {
	 		listener.exitCatch_statement_list(this);
		}
	}
}


export class Literal_collectionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_literal_collection;
	}
	public copyFrom(ctx: Literal_collectionContext): void {
		super.copyFrom(ctx);
	}
}
export class LiteralListLiteralContext extends Literal_collectionContext {
	constructor(parser: EParser, ctx: Literal_collectionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LBRAK, 0);
	}
	public literal_list_literal(): Literal_list_literalContext {
		return this.getTypedRuleContext(Literal_list_literalContext, 0) as Literal_list_literalContext;
	}
	public RBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RBRAK, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterLiteralListLiteral) {
	 		listener.enterLiteralListLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitLiteralListLiteral) {
	 		listener.exitLiteralListLiteral(this);
		}
	}
}
export class LiteralRangeLiteralContext extends Literal_collectionContext {
	public _low!: Atomic_literalContext;
	public _high!: Atomic_literalContext;
	constructor(parser: EParser, ctx: Literal_collectionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LBRAK, 0);
	}
	public RANGE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RANGE, 0);
	}
	public RBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RBRAK, 0);
	}
	public atomic_literal_list(): Atomic_literalContext[] {
		return this.getTypedRuleContexts(Atomic_literalContext) as Atomic_literalContext[];
	}
	public atomic_literal(i: number): Atomic_literalContext {
		return this.getTypedRuleContext(Atomic_literalContext, i) as Atomic_literalContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterLiteralRangeLiteral) {
	 		listener.enterLiteralRangeLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitLiteralRangeLiteral) {
	 		listener.exitLiteralRangeLiteral(this);
		}
	}
}
export class LiteralSetLiteralContext extends Literal_collectionContext {
	constructor(parser: EParser, ctx: Literal_collectionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LT, 0);
	}
	public literal_list_literal(): Literal_list_literalContext {
		return this.getTypedRuleContext(Literal_list_literalContext, 0) as Literal_list_literalContext;
	}
	public GT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.GT, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterLiteralSetLiteral) {
	 		listener.enterLiteralSetLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitLiteralSetLiteral) {
	 		listener.exitLiteralSetLiteral(this);
		}
	}
}


export class Atomic_literalContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_atomic_literal;
	}
	public copyFrom(ctx: Atomic_literalContext): void {
		super.copyFrom(ctx);
	}
}
export class MinIntegerLiteralContext extends Atomic_literalContext {
	constructor(parser: EParser, ctx: Atomic_literalContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public MIN_INTEGER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MIN_INTEGER, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMinIntegerLiteral) {
	 		listener.enterMinIntegerLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMinIntegerLiteral) {
	 		listener.exitMinIntegerLiteral(this);
		}
	}
}
export class DateLiteralContext extends Atomic_literalContext {
	constructor(parser: EParser, ctx: Atomic_literalContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DATE_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DATE_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDateLiteral) {
	 		listener.enterDateLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDateLiteral) {
	 		listener.exitDateLiteral(this);
		}
	}
}
export class SymbolLiteralContext extends Atomic_literalContext {
	constructor(parser: EParser, ctx: Atomic_literalContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public symbol_identifier(): Symbol_identifierContext {
		return this.getTypedRuleContext(Symbol_identifierContext, 0) as Symbol_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSymbolLiteral) {
	 		listener.enterSymbolLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSymbolLiteral) {
	 		listener.exitSymbolLiteral(this);
		}
	}
}
export class BooleanLiteralContext extends Atomic_literalContext {
	constructor(parser: EParser, ctx: Atomic_literalContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public BOOLEAN_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BOOLEAN_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterBooleanLiteral) {
	 		listener.enterBooleanLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitBooleanLiteral) {
	 		listener.exitBooleanLiteral(this);
		}
	}
}
export class VersionLiteralContext extends Atomic_literalContext {
	constructor(parser: EParser, ctx: Atomic_literalContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public VERSION_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VERSION_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterVersionLiteral) {
	 		listener.enterVersionLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitVersionLiteral) {
	 		listener.exitVersionLiteral(this);
		}
	}
}
export class HexadecimalLiteralContext extends Atomic_literalContext {
	constructor(parser: EParser, ctx: Atomic_literalContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public HEXA_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.HEXA_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterHexadecimalLiteral) {
	 		listener.enterHexadecimalLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitHexadecimalLiteral) {
	 		listener.exitHexadecimalLiteral(this);
		}
	}
}
export class UUIDLiteralContext extends Atomic_literalContext {
	constructor(parser: EParser, ctx: Atomic_literalContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public UUID_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.UUID_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterUUIDLiteral) {
	 		listener.enterUUIDLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitUUIDLiteral) {
	 		listener.exitUUIDLiteral(this);
		}
	}
}
export class MaxIntegerLiteralContext extends Atomic_literalContext {
	constructor(parser: EParser, ctx: Atomic_literalContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public MAX_INTEGER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MAX_INTEGER, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMaxIntegerLiteral) {
	 		listener.enterMaxIntegerLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMaxIntegerLiteral) {
	 		listener.exitMaxIntegerLiteral(this);
		}
	}
}
export class TypeLiteralContext extends Atomic_literalContext {
	constructor(parser: EParser, ctx: Atomic_literalContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public type_literal(): Type_literalContext {
		return this.getTypedRuleContext(Type_literalContext, 0) as Type_literalContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterTypeLiteral) {
	 		listener.enterTypeLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitTypeLiteral) {
	 		listener.exitTypeLiteral(this);
		}
	}
}
export class DateTimeLiteralContext extends Atomic_literalContext {
	constructor(parser: EParser, ctx: Atomic_literalContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DATETIME_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DATETIME_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDateTimeLiteral) {
	 		listener.enterDateTimeLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDateTimeLiteral) {
	 		listener.exitDateTimeLiteral(this);
		}
	}
}
export class PeriodLiteralContext extends Atomic_literalContext {
	constructor(parser: EParser, ctx: Atomic_literalContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public PERIOD_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.PERIOD_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPeriodLiteral) {
	 		listener.enterPeriodLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPeriodLiteral) {
	 		listener.exitPeriodLiteral(this);
		}
	}
}
export class DecimalLiteralContext extends Atomic_literalContext {
	constructor(parser: EParser, ctx: Atomic_literalContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DECIMAL_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DECIMAL_LITERAL, 0);
	}
	public MINUS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MINUS, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDecimalLiteral) {
	 		listener.enterDecimalLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDecimalLiteral) {
	 		listener.exitDecimalLiteral(this);
		}
	}
}
export class TextLiteralContext extends Atomic_literalContext {
	constructor(parser: EParser, ctx: Atomic_literalContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TEXT_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TEXT_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterTextLiteral) {
	 		listener.enterTextLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitTextLiteral) {
	 		listener.exitTextLiteral(this);
		}
	}
}
export class NullLiteralContext extends Atomic_literalContext {
	constructor(parser: EParser, ctx: Atomic_literalContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public null_literal(): Null_literalContext {
		return this.getTypedRuleContext(Null_literalContext, 0) as Null_literalContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNullLiteral) {
	 		listener.enterNullLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNullLiteral) {
	 		listener.exitNullLiteral(this);
		}
	}
}
export class IntegerLiteralContext extends Atomic_literalContext {
	constructor(parser: EParser, ctx: Atomic_literalContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public INTEGER_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.INTEGER_LITERAL, 0);
	}
	public MINUS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MINUS, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterIntegerLiteral) {
	 		listener.enterIntegerLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitIntegerLiteral) {
	 		listener.exitIntegerLiteral(this);
		}
	}
}
export class TimeLiteralContext extends Atomic_literalContext {
	constructor(parser: EParser, ctx: Atomic_literalContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TIME_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TIME_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterTimeLiteral) {
	 		listener.enterTimeLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitTimeLiteral) {
	 		listener.exitTimeLiteral(this);
		}
	}
}
export class CharacterLiteralContext extends Atomic_literalContext {
	constructor(parser: EParser, ctx: Atomic_literalContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CHAR_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CHAR_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCharacterLiteral) {
	 		listener.enterCharacterLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCharacterLiteral) {
	 		listener.exitCharacterLiteral(this);
		}
	}
}


export class Literal_list_literalContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public atomic_literal_list(): Atomic_literalContext[] {
		return this.getTypedRuleContexts(Atomic_literalContext) as Atomic_literalContext[];
	}
	public atomic_literal(i: number): Atomic_literalContext {
		return this.getTypedRuleContext(Atomic_literalContext, i) as Atomic_literalContext;
	}
	public COMMA_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COMMA);
	}
	public COMMA(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_literal_list_literal;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterLiteral_list_literal) {
	 		listener.enterLiteral_list_literal(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitLiteral_list_literal) {
	 		listener.exitLiteral_list_literal(this);
		}
	}
}


export class This_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SELF(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SELF, 0);
	}
	public THIS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.THIS, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_this_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterThis_expression) {
	 		listener.enterThis_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitThis_expression) {
	 		listener.exitThis_expression(this);
		}
	}
}


export class Super_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SUPER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SUPER, 0);
	}
	public category_type(): Category_typeContext {
		return this.getTypedRuleContext(Category_typeContext, 0) as Category_typeContext;
	}
	public DOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOT, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_super_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSuper_expression) {
	 		listener.enterSuper_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSuper_expression) {
	 		listener.exitSuper_expression(this);
		}
	}
}


export class Parenthesis_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LPAR, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public RPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RPAR, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_parenthesis_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterParenthesis_expression) {
	 		listener.enterParenthesis_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitParenthesis_expression) {
	 		listener.exitParenthesis_expression(this);
		}
	}
}


export class Literal_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public atomic_literal(): Atomic_literalContext {
		return this.getTypedRuleContext(Atomic_literalContext, 0) as Atomic_literalContext;
	}
	public collection_literal(): Collection_literalContext {
		return this.getTypedRuleContext(Collection_literalContext, 0) as Collection_literalContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_literal_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterLiteral_expression) {
	 		listener.enterLiteral_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitLiteral_expression) {
	 		listener.exitLiteral_expression(this);
		}
	}
}


export class Collection_literalContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public range_literal(): Range_literalContext {
		return this.getTypedRuleContext(Range_literalContext, 0) as Range_literalContext;
	}
	public list_literal(): List_literalContext {
		return this.getTypedRuleContext(List_literalContext, 0) as List_literalContext;
	}
	public set_literal(): Set_literalContext {
		return this.getTypedRuleContext(Set_literalContext, 0) as Set_literalContext;
	}
	public dict_literal(): Dict_literalContext {
		return this.getTypedRuleContext(Dict_literalContext, 0) as Dict_literalContext;
	}
	public document_literal(): Document_literalContext {
		return this.getTypedRuleContext(Document_literalContext, 0) as Document_literalContext;
	}
	public tuple_literal(): Tuple_literalContext {
		return this.getTypedRuleContext(Tuple_literalContext, 0) as Tuple_literalContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_collection_literal;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCollection_literal) {
	 		listener.enterCollection_literal(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCollection_literal) {
	 		listener.exitCollection_literal(this);
		}
	}
}


export class Tuple_literalContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LPAR, 0);
	}
	public RPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RPAR, 0);
	}
	public MUTABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MUTABLE, 0);
	}
	public expression_tuple(): Expression_tupleContext {
		return this.getTypedRuleContext(Expression_tupleContext, 0) as Expression_tupleContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_tuple_literal;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterTuple_literal) {
	 		listener.enterTuple_literal(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitTuple_literal) {
	 		listener.exitTuple_literal(this);
		}
	}
}


export class Dict_literalContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LTCOLONGT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LTCOLONGT, 0);
	}
	public MUTABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MUTABLE, 0);
	}
	public LT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LT, 0);
	}
	public dict_entry_list(): Dict_entry_listContext {
		return this.getTypedRuleContext(Dict_entry_listContext, 0) as Dict_entry_listContext;
	}
	public GT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.GT, 0);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_dict_literal;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDict_literal) {
	 		listener.enterDict_literal(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDict_literal) {
	 		listener.exitDict_literal(this);
		}
	}
}


export class Document_literalContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LCURL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LCURL, 0);
	}
	public RCURL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RCURL, 0);
	}
	public doc_entry_list(): Doc_entry_listContext {
		return this.getTypedRuleContext(Doc_entry_listContext, 0) as Doc_entry_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_document_literal;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDocument_literal) {
	 		listener.enterDocument_literal(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDocument_literal) {
	 		listener.exitDocument_literal(this);
		}
	}
}


export class Expression_tupleContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public COMMA_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COMMA);
	}
	public COMMA(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_expression_tuple;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterExpression_tuple) {
	 		listener.enterExpression_tuple(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitExpression_tuple) {
	 		listener.exitExpression_tuple(this);
		}
	}
}


export class Doc_entry_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public doc_entry_list(): Doc_entryContext[] {
		return this.getTypedRuleContexts(Doc_entryContext) as Doc_entryContext[];
	}
	public doc_entry(i: number): Doc_entryContext {
		return this.getTypedRuleContext(Doc_entryContext, i) as Doc_entryContext;
	}
	public COMMA_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COMMA);
	}
	public COMMA(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_doc_entry_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDoc_entry_list) {
	 		listener.enterDoc_entry_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDoc_entry_list) {
	 		listener.exitDoc_entry_list(this);
		}
	}
}


export class Doc_entryContext extends antlr4.context.ParserRuleContext {
	public _key!: Doc_keyContext;
	public _value!: ExpressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public doc_key(): Doc_keyContext {
		return this.getTypedRuleContext(Doc_keyContext, 0) as Doc_keyContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_doc_entry;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDoc_entry) {
	 		listener.enterDoc_entry(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDoc_entry) {
	 		listener.exitDoc_entry(this);
		}
	}
}


export class Doc_keyContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_doc_key;
	}
	public copyFrom(ctx: Doc_keyContext): void {
		super.copyFrom(ctx);
	}
}
export class DocKeyIdentifierContext extends Doc_keyContext {
	public _name!: Identifier_or_keywordContext;
	constructor(parser: EParser, ctx: Doc_keyContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public identifier_or_keyword(): Identifier_or_keywordContext {
		return this.getTypedRuleContext(Identifier_or_keywordContext, 0) as Identifier_or_keywordContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDocKeyIdentifier) {
	 		listener.enterDocKeyIdentifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDocKeyIdentifier) {
	 		listener.exitDocKeyIdentifier(this);
		}
	}
}
export class DocKeyTextContext extends Doc_keyContext {
	public _name!: antlr4.Token;
	constructor(parser: EParser, ctx: Doc_keyContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TEXT_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TEXT_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDocKeyText) {
	 		listener.enterDocKeyText(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDocKeyText) {
	 		listener.exitDocKeyText(this);
		}
	}
}


export class Dict_entry_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dict_entry_list(): Dict_entryContext[] {
		return this.getTypedRuleContexts(Dict_entryContext) as Dict_entryContext[];
	}
	public dict_entry(i: number): Dict_entryContext {
		return this.getTypedRuleContext(Dict_entryContext, i) as Dict_entryContext;
	}
	public COMMA_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COMMA);
	}
	public COMMA(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_dict_entry_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDict_entry_list) {
	 		listener.enterDict_entry_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDict_entry_list) {
	 		listener.exitDict_entry_list(this);
		}
	}
}


export class Dict_entryContext extends antlr4.context.ParserRuleContext {
	public _key!: Dict_keyContext;
	public _value!: ExpressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public dict_key(): Dict_keyContext {
		return this.getTypedRuleContext(Dict_keyContext, 0) as Dict_keyContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_dict_entry;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDict_entry) {
	 		listener.enterDict_entry(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDict_entry) {
	 		listener.exitDict_entry(this);
		}
	}
}


export class Dict_keyContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_dict_key;
	}
	public copyFrom(ctx: Dict_keyContext): void {
		super.copyFrom(ctx);
	}
}
export class DictKeyIdentifierContext extends Dict_keyContext {
	public _name!: Identifier_or_keywordContext;
	constructor(parser: EParser, ctx: Dict_keyContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public identifier_or_keyword(): Identifier_or_keywordContext {
		return this.getTypedRuleContext(Identifier_or_keywordContext, 0) as Identifier_or_keywordContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDictKeyIdentifier) {
	 		listener.enterDictKeyIdentifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDictKeyIdentifier) {
	 		listener.exitDictKeyIdentifier(this);
		}
	}
}
export class DictKeyTextContext extends Dict_keyContext {
	public _name!: antlr4.Token;
	constructor(parser: EParser, ctx: Dict_keyContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TEXT_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TEXT_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDictKeyText) {
	 		listener.enterDictKeyText(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDictKeyText) {
	 		listener.exitDictKeyText(this);
		}
	}
}


export class Slice_argumentsContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_slice_arguments;
	}
	public copyFrom(ctx: Slice_argumentsContext): void {
		super.copyFrom(ctx);
	}
}
export class SliceFirstAndLastContext extends Slice_argumentsContext {
	public _first!: ExpressionContext;
	public _last!: ExpressionContext;
	constructor(parser: EParser, ctx: Slice_argumentsContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSliceFirstAndLast) {
	 		listener.enterSliceFirstAndLast(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSliceFirstAndLast) {
	 		listener.exitSliceFirstAndLast(this);
		}
	}
}
export class SliceLastOnlyContext extends Slice_argumentsContext {
	public _last!: ExpressionContext;
	constructor(parser: EParser, ctx: Slice_argumentsContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSliceLastOnly) {
	 		listener.enterSliceLastOnly(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSliceLastOnly) {
	 		listener.exitSliceLastOnly(this);
		}
	}
}
export class SliceFirstOnlyContext extends Slice_argumentsContext {
	public _first!: ExpressionContext;
	constructor(parser: EParser, ctx: Slice_argumentsContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSliceFirstOnly) {
	 		listener.enterSliceFirstOnly(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSliceFirstOnly) {
	 		listener.exitSliceFirstOnly(this);
		}
	}
}


export class Assign_variable_statementContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
	public assign(): AssignContext {
		return this.getTypedRuleContext(AssignContext, 0) as AssignContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_assign_variable_statement;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAssign_variable_statement) {
	 		listener.enterAssign_variable_statement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAssign_variable_statement) {
	 		listener.exitAssign_variable_statement(this);
		}
	}
}


export class Assignable_instanceContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_assignable_instance;
	}
	public copyFrom(ctx: Assignable_instanceContext): void {
		super.copyFrom(ctx);
	}
}
export class ChildInstanceContext extends Assignable_instanceContext {
	constructor(parser: EParser, ctx: Assignable_instanceContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public assignable_instance(): Assignable_instanceContext {
		return this.getTypedRuleContext(Assignable_instanceContext, 0) as Assignable_instanceContext;
	}
	public child_instance(): Child_instanceContext {
		return this.getTypedRuleContext(Child_instanceContext, 0) as Child_instanceContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterChildInstance) {
	 		listener.enterChildInstance(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitChildInstance) {
	 		listener.exitChildInstance(this);
		}
	}
}
export class RootInstanceContext extends Assignable_instanceContext {
	constructor(parser: EParser, ctx: Assignable_instanceContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterRootInstance) {
	 		listener.enterRootInstance(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitRootInstance) {
	 		listener.exitRootInstance(this);
		}
	}
}


export class Is_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_is_expression;
	}
	public copyFrom(ctx: Is_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class IsATypeExpressionContext extends Is_expressionContext {
	constructor(parser: EParser, ctx: Is_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public VARIABLE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	}
	public category_or_any_type(): Category_or_any_typeContext {
		return this.getTypedRuleContext(Category_or_any_typeContext, 0) as Category_or_any_typeContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterIsATypeExpression) {
	 		listener.enterIsATypeExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitIsATypeExpression) {
	 		listener.exitIsATypeExpression(this);
		}
	}
}
export class IsOtherExpressionContext extends Is_expressionContext {
	constructor(parser: EParser, ctx: Is_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterIsOtherExpression) {
	 		listener.enterIsOtherExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitIsOtherExpression) {
	 		listener.exitIsOtherExpression(this);
		}
	}
}


export class MetadataContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VARIABLE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_metadata;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMetadata) {
	 		listener.enterMetadata(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMetadata) {
	 		listener.exitMetadata(this);
		}
	}
}


export class Arrow_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_arrow_expression;
	}
	public copyFrom(ctx: Arrow_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class ArrowExpressionBodyContext extends Arrow_expressionContext {
	constructor(parser: EParser, ctx: Arrow_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public arrow_prefix(): Arrow_prefixContext {
		return this.getTypedRuleContext(Arrow_prefixContext, 0) as Arrow_prefixContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterArrowExpressionBody) {
	 		listener.enterArrowExpressionBody(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitArrowExpressionBody) {
	 		listener.exitArrowExpressionBody(this);
		}
	}
}
export class ArrowStatementsBodyContext extends Arrow_expressionContext {
	constructor(parser: EParser, ctx: Arrow_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public arrow_prefix(): Arrow_prefixContext {
		return this.getTypedRuleContext(Arrow_prefixContext, 0) as Arrow_prefixContext;
	}
	public LCURL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LCURL, 0);
	}
	public statement_list(): Statement_listContext {
		return this.getTypedRuleContext(Statement_listContext, 0) as Statement_listContext;
	}
	public RCURL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RCURL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterArrowStatementsBody) {
	 		listener.enterArrowStatementsBody(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitArrowStatementsBody) {
	 		listener.exitArrowStatementsBody(this);
		}
	}
}


export class Arrow_prefixContext extends antlr4.context.ParserRuleContext {
	public _s1!: Ws_plusContext;
	public _s2!: Ws_plusContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public arrow_args(): Arrow_argsContext {
		return this.getTypedRuleContext(Arrow_argsContext, 0) as Arrow_argsContext;
	}
	public EGT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.EGT, 0);
	}
	public ws_plus_list(): Ws_plusContext[] {
		return this.getTypedRuleContexts(Ws_plusContext) as Ws_plusContext[];
	}
	public ws_plus(i: number): Ws_plusContext {
		return this.getTypedRuleContext(Ws_plusContext, i) as Ws_plusContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_arrow_prefix;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterArrow_prefix) {
	 		listener.enterArrow_prefix(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitArrow_prefix) {
	 		listener.exitArrow_prefix(this);
		}
	}
}


export class Arrow_argsContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_arrow_args;
	}
	public copyFrom(ctx: Arrow_argsContext): void {
		super.copyFrom(ctx);
	}
}
export class ArrowListArgContext extends Arrow_argsContext {
	constructor(parser: EParser, ctx: Arrow_argsContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LPAR, 0);
	}
	public RPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RPAR, 0);
	}
	public variable_identifier_list(): Variable_identifier_listContext {
		return this.getTypedRuleContext(Variable_identifier_listContext, 0) as Variable_identifier_listContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterArrowListArg) {
	 		listener.enterArrowListArg(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitArrowListArg) {
	 		listener.exitArrowListArg(this);
		}
	}
}
export class ArrowSingleArgContext extends Arrow_argsContext {
	constructor(parser: EParser, ctx: Arrow_argsContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public variable_identifier(): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, 0) as Variable_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterArrowSingleArg) {
	 		listener.enterArrowSingleArg(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitArrowSingleArg) {
	 		listener.exitArrowSingleArg(this);
		}
	}
}


export class Sorted_keyContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public instance_expression(): Instance_expressionContext {
		return this.getTypedRuleContext(Instance_expressionContext, 0) as Instance_expressionContext;
	}
	public arrow_expression(): Arrow_expressionContext {
		return this.getTypedRuleContext(Arrow_expressionContext, 0) as Arrow_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_sorted_key;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSorted_key) {
	 		listener.enterSorted_key(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSorted_key) {
	 		listener.exitSorted_key(this);
		}
	}
}


export class Read_blob_expressionContext extends antlr4.context.ParserRuleContext {
	public _source!: ExpressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public READ(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.READ, 0);
	}
	public BLOB(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BLOB, 0);
	}
	public FROM(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FROM, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_read_blob_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterRead_blob_expression) {
	 		listener.enterRead_blob_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitRead_blob_expression) {
	 		listener.exitRead_blob_expression(this);
		}
	}
}


export class Read_all_expressionContext extends antlr4.context.ParserRuleContext {
	public _source!: ExpressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public READ(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.READ, 0);
	}
	public ALL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ALL, 0);
	}
	public FROM(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FROM, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_read_all_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterRead_all_expression) {
	 		listener.enterRead_all_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitRead_all_expression) {
	 		listener.exitRead_all_expression(this);
		}
	}
}


export class Read_one_expressionContext extends antlr4.context.ParserRuleContext {
	public _source!: ExpressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public READ(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.READ, 0);
	}
	public ONE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ONE, 0);
	}
	public FROM(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FROM, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_read_one_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterRead_one_expression) {
	 		listener.enterRead_one_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitRead_one_expression) {
	 		listener.exitRead_one_expression(this);
		}
	}
}


export class Order_by_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public order_by_list(): Order_byContext[] {
		return this.getTypedRuleContexts(Order_byContext) as Order_byContext[];
	}
	public order_by(i: number): Order_byContext {
		return this.getTypedRuleContext(Order_byContext, i) as Order_byContext;
	}
	public COMMA_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.COMMA);
	}
	public COMMA(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_order_by_list;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterOrder_by_list) {
	 		listener.enterOrder_by_list(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitOrder_by_list) {
	 		listener.exitOrder_by_list(this);
		}
	}
}


export class Order_byContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public variable_identifier_list(): Variable_identifierContext[] {
		return this.getTypedRuleContexts(Variable_identifierContext) as Variable_identifierContext[];
	}
	public variable_identifier(i: number): Variable_identifierContext {
		return this.getTypedRuleContext(Variable_identifierContext, i) as Variable_identifierContext;
	}
	public DOT_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.DOT);
	}
	public DOT(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOT, i);
	}
	public ASC(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ASC, 0);
	}
	public DESC(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DESC, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_order_by;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterOrder_by) {
	 		listener.enterOrder_by(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitOrder_by) {
	 		listener.exitOrder_by(this);
		}
	}
}


export class OperatorContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_operator;
	}
	public copyFrom(ctx: OperatorContext): void {
		super.copyFrom(ctx);
	}
}
export class OperatorPlusContext extends OperatorContext {
	constructor(parser: EParser, ctx: OperatorContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public PLUS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.PLUS, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterOperatorPlus) {
	 		listener.enterOperatorPlus(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitOperatorPlus) {
	 		listener.exitOperatorPlus(this);
		}
	}
}
export class OperatorDivideContext extends OperatorContext {
	constructor(parser: EParser, ctx: OperatorContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public divide(): DivideContext {
		return this.getTypedRuleContext(DivideContext, 0) as DivideContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterOperatorDivide) {
	 		listener.enterOperatorDivide(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitOperatorDivide) {
	 		listener.exitOperatorDivide(this);
		}
	}
}
export class OperatorIDivideContext extends OperatorContext {
	constructor(parser: EParser, ctx: OperatorContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public idivide(): IdivideContext {
		return this.getTypedRuleContext(IdivideContext, 0) as IdivideContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterOperatorIDivide) {
	 		listener.enterOperatorIDivide(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitOperatorIDivide) {
	 		listener.exitOperatorIDivide(this);
		}
	}
}
export class OperatorMultiplyContext extends OperatorContext {
	constructor(parser: EParser, ctx: OperatorContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public multiply(): MultiplyContext {
		return this.getTypedRuleContext(MultiplyContext, 0) as MultiplyContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterOperatorMultiply) {
	 		listener.enterOperatorMultiply(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitOperatorMultiply) {
	 		listener.exitOperatorMultiply(this);
		}
	}
}
export class OperatorMinusContext extends OperatorContext {
	constructor(parser: EParser, ctx: OperatorContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public MINUS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MINUS, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterOperatorMinus) {
	 		listener.enterOperatorMinus(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitOperatorMinus) {
	 		listener.exitOperatorMinus(this);
		}
	}
}
export class OperatorModuloContext extends OperatorContext {
	constructor(parser: EParser, ctx: OperatorContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public modulo(): ModuloContext {
		return this.getTypedRuleContext(ModuloContext, 0) as ModuloContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterOperatorModulo) {
	 		listener.enterOperatorModulo(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitOperatorModulo) {
	 		listener.exitOperatorModulo(this);
		}
	}
}


export class KeywordContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public JAVA(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.JAVA, 0);
	}
	public CSHARP(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CSHARP, 0);
	}
	public PYTHON2(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.PYTHON2, 0);
	}
	public PYTHON3(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.PYTHON3, 0);
	}
	public JAVASCRIPT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.JAVASCRIPT, 0);
	}
	public SWIFT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SWIFT, 0);
	}
	public BOOLEAN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BOOLEAN, 0);
	}
	public CHARACTER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CHARACTER, 0);
	}
	public TEXT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TEXT, 0);
	}
	public INTEGER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.INTEGER, 0);
	}
	public DECIMAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DECIMAL, 0);
	}
	public DATE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DATE, 0);
	}
	public TIME(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TIME, 0);
	}
	public DATETIME(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DATETIME, 0);
	}
	public PERIOD(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.PERIOD, 0);
	}
	public VERSION(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VERSION, 0);
	}
	public CODE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CODE, 0);
	}
	public DOCUMENT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOCUMENT, 0);
	}
	public BLOB(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BLOB, 0);
	}
	public IMAGE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.IMAGE, 0);
	}
	public DBID(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DBID, 0);
	}
	public UUID(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.UUID, 0);
	}
	public ITERATOR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ITERATOR, 0);
	}
	public CURSOR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CURSOR, 0);
	}
	public HTML(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.HTML, 0);
	}
	public ABSTRACT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ABSTRACT, 0);
	}
	public ALL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ALL, 0);
	}
	public ALWAYS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ALWAYS, 0);
	}
	public AND(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AND, 0);
	}
	public ANY(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ANY, 0);
	}
	public AS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.AS, 0);
	}
	public ASC(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ASC, 0);
	}
	public ATTR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ATTR, 0);
	}
	public ATTRIBUTE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ATTRIBUTE, 0);
	}
	public ATTRIBUTES(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ATTRIBUTES, 0);
	}
	public BINDINGS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BINDINGS, 0);
	}
	public BREAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BREAK, 0);
	}
	public BY(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BY, 0);
	}
	public CASE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CASE, 0);
	}
	public CATCH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CATCH, 0);
	}
	public CATEGORY(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CATEGORY, 0);
	}
	public CLASS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CLASS, 0);
	}
	public CONTAINS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CONTAINS, 0);
	}
	public DEF(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEF, 0);
	}
	public DEFAULT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFAULT, 0);
	}
	public DEFINE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DEFINE, 0);
	}
	public DELETE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DELETE, 0);
	}
	public DESC(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DESC, 0);
	}
	public DO(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DO, 0);
	}
	public DOING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOING, 0);
	}
	public EACH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.EACH, 0);
	}
	public ELSE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ELSE, 0);
	}
	public ENUM(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ENUM, 0);
	}
	public ENUMERATED(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ENUMERATED, 0);
	}
	public EXCEPT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.EXCEPT, 0);
	}
	public EXECUTE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.EXECUTE, 0);
	}
	public EXPECTING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.EXPECTING, 0);
	}
	public EXTENDS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.EXTENDS, 0);
	}
	public FETCH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FETCH, 0);
	}
	public FILTERED(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FILTERED, 0);
	}
	public FINALLY(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FINALLY, 0);
	}
	public FLUSH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FLUSH, 0);
	}
	public FOR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FOR, 0);
	}
	public FROM(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.FROM, 0);
	}
	public GETTER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.GETTER, 0);
	}
	public HAS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.HAS, 0);
	}
	public IF(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.IF, 0);
	}
	public IN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.IN, 0);
	}
	public INDEX(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.INDEX, 0);
	}
	public IS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.IS, 0);
	}
	public MATCHING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MATCHING, 0);
	}
	public METHOD(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.METHOD, 0);
	}
	public METHODS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.METHODS, 0);
	}
	public MODULO(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MODULO, 0);
	}
	public MUTABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MUTABLE, 0);
	}
	public NATIVE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.NATIVE, 0);
	}
	public NONE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.NONE, 0);
	}
	public NOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.NOT, 0);
	}
	public NOTHING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.NOTHING, 0);
	}
	public NULL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.NULL, 0);
	}
	public ON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ON, 0);
	}
	public ONE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ONE, 0);
	}
	public OPERATOR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.OPERATOR, 0);
	}
	public OR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.OR, 0);
	}
	public ORDER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ORDER, 0);
	}
	public OTHERWISE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.OTHERWISE, 0);
	}
	public PASS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.PASS, 0);
	}
	public RAISE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RAISE, 0);
	}
	public READ(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.READ, 0);
	}
	public RECEIVING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RECEIVING, 0);
	}
	public RESOURCE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RESOURCE, 0);
	}
	public RETURN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RETURN, 0);
	}
	public RETURNING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RETURNING, 0);
	}
	public ROWS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.ROWS, 0);
	}
	public SELF(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SELF, 0);
	}
	public SETTER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SETTER, 0);
	}
	public SINGLETON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SINGLETON, 0);
	}
	public SORTED(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SORTED, 0);
	}
	public SUPER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SUPER, 0);
	}
	public STORABLE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.STORABLE, 0);
	}
	public STORE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.STORE, 0);
	}
	public SWITCH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SWITCH, 0);
	}
	public TEST(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TEST, 0);
	}
	public THIS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.THIS, 0);
	}
	public THROW(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.THROW, 0);
	}
	public TO(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TO, 0);
	}
	public TRY(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TRY, 0);
	}
	public VERIFYING(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VERIFYING, 0);
	}
	public WIDGET(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WIDGET, 0);
	}
	public WITH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WITH, 0);
	}
	public WHEN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WHEN, 0);
	}
	public WHERE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WHERE, 0);
	}
	public WHILE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WHILE, 0);
	}
	public WRITE(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.WRITE, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_keyword;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterKeyword) {
	 		listener.enterKeyword(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitKeyword) {
	 		listener.exitKeyword(this);
		}
	}
}


export class New_tokenContext extends antlr4.context.ParserRuleContext {
	public _i1!: antlr4.Token;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VARIABLE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_new_token;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterNew_token) {
	 		listener.enterNew_token(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitNew_token) {
	 		listener.exitNew_token(this);
		}
	}
}


export class Key_tokenContext extends antlr4.context.ParserRuleContext {
	public _i1!: antlr4.Token;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VARIABLE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_key_token;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterKey_token) {
	 		listener.enterKey_token(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitKey_token) {
	 		listener.exitKey_token(this);
		}
	}
}


export class Module_tokenContext extends antlr4.context.ParserRuleContext {
	public _i1!: antlr4.Token;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VARIABLE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_module_token;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterModule_token) {
	 		listener.enterModule_token(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitModule_token) {
	 		listener.exitModule_token(this);
		}
	}
}


export class Value_tokenContext extends antlr4.context.ParserRuleContext {
	public _i1!: antlr4.Token;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VARIABLE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_value_token;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterValue_token) {
	 		listener.enterValue_token(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitValue_token) {
	 		listener.exitValue_token(this);
		}
	}
}


export class Symbols_tokenContext extends antlr4.context.ParserRuleContext {
	public _i1!: antlr4.Token;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VARIABLE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_symbols_token;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterSymbols_token) {
	 		listener.enterSymbols_token(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitSymbols_token) {
	 		listener.exitSymbols_token(this);
		}
	}
}


export class AssignContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQ(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.EQ, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_assign;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterAssign) {
	 		listener.enterAssign(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitAssign) {
	 		listener.exitAssign(this);
		}
	}
}


export class MultiplyContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public STAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.STAR, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_multiply;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterMultiply) {
	 		listener.enterMultiply(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitMultiply) {
	 		listener.exitMultiply(this);
		}
	}
}


export class DivideContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SLASH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SLASH, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_divide;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterDivide) {
	 		listener.enterDivide(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitDivide) {
	 		listener.exitDivide(this);
		}
	}
}


export class IdivideContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BSLASH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BSLASH, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_idivide;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterIdivide) {
	 		listener.enterIdivide(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitIdivide) {
	 		listener.exitIdivide(this);
		}
	}
}


export class ModuloContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PERCENT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.PERCENT, 0);
	}
	public MODULO(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MODULO, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_modulo;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterModulo) {
	 		listener.enterModulo(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitModulo) {
	 		listener.exitModulo(this);
		}
	}
}


export class Javascript_statementContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_javascript_statement;
	}
	public copyFrom(ctx: Javascript_statementContext): void {
		super.copyFrom(ctx);
	}
}
export class JavascriptStatementContext extends Javascript_statementContext {
	public _exp!: Javascript_expressionContext;
	constructor(parser: EParser, ctx: Javascript_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SEMI(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SEMI, 0);
	}
	public javascript_expression(): Javascript_expressionContext {
		return this.getTypedRuleContext(Javascript_expressionContext, 0) as Javascript_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascriptStatement) {
	 		listener.enterJavascriptStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascriptStatement) {
	 		listener.exitJavascriptStatement(this);
		}
	}
}
export class JavascriptReturnStatementContext extends Javascript_statementContext {
	public _exp!: Javascript_expressionContext;
	constructor(parser: EParser, ctx: Javascript_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public RETURN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RETURN, 0);
	}
	public SEMI(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SEMI, 0);
	}
	public javascript_expression(): Javascript_expressionContext {
		return this.getTypedRuleContext(Javascript_expressionContext, 0) as Javascript_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascriptReturnStatement) {
	 		listener.enterJavascriptReturnStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascriptReturnStatement) {
	 		listener.exitJavascriptReturnStatement(this);
		}
	}
}


export class Javascript_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_javascript_expression;
	}
	public copyFrom(ctx: Javascript_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class JavascriptSelectorExpressionContext extends Javascript_expressionContext {
	public _parent!: Javascript_expressionContext;
	public _child!: Javascript_selector_expressionContext;
	constructor(parser: EParser, ctx: Javascript_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public javascript_expression(): Javascript_expressionContext {
		return this.getTypedRuleContext(Javascript_expressionContext, 0) as Javascript_expressionContext;
	}
	public javascript_selector_expression(): Javascript_selector_expressionContext {
		return this.getTypedRuleContext(Javascript_selector_expressionContext, 0) as Javascript_selector_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascriptSelectorExpression) {
	 		listener.enterJavascriptSelectorExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascriptSelectorExpression) {
	 		listener.exitJavascriptSelectorExpression(this);
		}
	}
}
export class JavascriptPrimaryExpressionContext extends Javascript_expressionContext {
	public _exp!: Javascript_primary_expressionContext;
	constructor(parser: EParser, ctx: Javascript_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public javascript_primary_expression(): Javascript_primary_expressionContext {
		return this.getTypedRuleContext(Javascript_primary_expressionContext, 0) as Javascript_primary_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascriptPrimaryExpression) {
	 		listener.enterJavascriptPrimaryExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascriptPrimaryExpression) {
	 		listener.exitJavascriptPrimaryExpression(this);
		}
	}
}


export class Javascript_primary_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public javascript_this_expression(): Javascript_this_expressionContext {
		return this.getTypedRuleContext(Javascript_this_expressionContext, 0) as Javascript_this_expressionContext;
	}
	public javascript_new_expression(): Javascript_new_expressionContext {
		return this.getTypedRuleContext(Javascript_new_expressionContext, 0) as Javascript_new_expressionContext;
	}
	public javascript_parenthesis_expression(): Javascript_parenthesis_expressionContext {
		return this.getTypedRuleContext(Javascript_parenthesis_expressionContext, 0) as Javascript_parenthesis_expressionContext;
	}
	public javascript_identifier_expression(): Javascript_identifier_expressionContext {
		return this.getTypedRuleContext(Javascript_identifier_expressionContext, 0) as Javascript_identifier_expressionContext;
	}
	public javascript_literal_expression(): Javascript_literal_expressionContext {
		return this.getTypedRuleContext(Javascript_literal_expressionContext, 0) as Javascript_literal_expressionContext;
	}
	public javascript_method_expression(): Javascript_method_expressionContext {
		return this.getTypedRuleContext(Javascript_method_expressionContext, 0) as Javascript_method_expressionContext;
	}
	public javascript_item_expression(): Javascript_item_expressionContext {
		return this.getTypedRuleContext(Javascript_item_expressionContext, 0) as Javascript_item_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_javascript_primary_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascript_primary_expression) {
	 		listener.enterJavascript_primary_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascript_primary_expression) {
	 		listener.exitJavascript_primary_expression(this);
		}
	}
}


export class Javascript_this_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public this_expression(): This_expressionContext {
		return this.getTypedRuleContext(This_expressionContext, 0) as This_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_javascript_this_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascript_this_expression) {
	 		listener.enterJavascript_this_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascript_this_expression) {
	 		listener.exitJavascript_this_expression(this);
		}
	}
}


export class Javascript_new_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public new_token(): New_tokenContext {
		return this.getTypedRuleContext(New_tokenContext, 0) as New_tokenContext;
	}
	public javascript_method_expression(): Javascript_method_expressionContext {
		return this.getTypedRuleContext(Javascript_method_expressionContext, 0) as Javascript_method_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_javascript_new_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascript_new_expression) {
	 		listener.enterJavascript_new_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascript_new_expression) {
	 		listener.exitJavascript_new_expression(this);
		}
	}
}


export class Javascript_selector_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_javascript_selector_expression;
	}
	public copyFrom(ctx: Javascript_selector_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class JavascriptMemberExpressionContext extends Javascript_selector_expressionContext {
	public _name!: Javascript_identifierContext;
	constructor(parser: EParser, ctx: Javascript_selector_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOT, 0);
	}
	public javascript_identifier(): Javascript_identifierContext {
		return this.getTypedRuleContext(Javascript_identifierContext, 0) as Javascript_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascriptMemberExpression) {
	 		listener.enterJavascriptMemberExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascriptMemberExpression) {
	 		listener.exitJavascriptMemberExpression(this);
		}
	}
}
export class JavascriptItemExpressionContext extends Javascript_selector_expressionContext {
	public _exp!: Javascript_item_expressionContext;
	constructor(parser: EParser, ctx: Javascript_selector_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public javascript_item_expression(): Javascript_item_expressionContext {
		return this.getTypedRuleContext(Javascript_item_expressionContext, 0) as Javascript_item_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascriptItemExpression) {
	 		listener.enterJavascriptItemExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascriptItemExpression) {
	 		listener.exitJavascriptItemExpression(this);
		}
	}
}
export class JavascriptMethodExpressionContext extends Javascript_selector_expressionContext {
	public _method!: Javascript_method_expressionContext;
	constructor(parser: EParser, ctx: Javascript_selector_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOT, 0);
	}
	public javascript_method_expression(): Javascript_method_expressionContext {
		return this.getTypedRuleContext(Javascript_method_expressionContext, 0) as Javascript_method_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascriptMethodExpression) {
	 		listener.enterJavascriptMethodExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascriptMethodExpression) {
	 		listener.exitJavascriptMethodExpression(this);
		}
	}
}


export class Javascript_method_expressionContext extends antlr4.context.ParserRuleContext {
	public _name!: Javascript_identifierContext;
	public _args!: Javascript_argumentsContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LPAR, 0);
	}
	public RPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RPAR, 0);
	}
	public javascript_identifier(): Javascript_identifierContext {
		return this.getTypedRuleContext(Javascript_identifierContext, 0) as Javascript_identifierContext;
	}
	public javascript_arguments(): Javascript_argumentsContext {
		return this.getTypedRuleContext(Javascript_argumentsContext, 0) as Javascript_argumentsContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_javascript_method_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascript_method_expression) {
	 		listener.enterJavascript_method_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascript_method_expression) {
	 		listener.exitJavascript_method_expression(this);
		}
	}
}


export class Javascript_argumentsContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_javascript_arguments;
	}
	public copyFrom(ctx: Javascript_argumentsContext): void {
		super.copyFrom(ctx);
	}
}
export class JavascriptArgumentListContext extends Javascript_argumentsContext {
	public _item!: Javascript_expressionContext;
	constructor(parser: EParser, ctx: Javascript_argumentsContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public javascript_expression(): Javascript_expressionContext {
		return this.getTypedRuleContext(Javascript_expressionContext, 0) as Javascript_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascriptArgumentList) {
	 		listener.enterJavascriptArgumentList(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascriptArgumentList) {
	 		listener.exitJavascriptArgumentList(this);
		}
	}
}
export class JavascriptArgumentListItemContext extends Javascript_argumentsContext {
	public _items!: Javascript_argumentsContext;
	public _item!: Javascript_expressionContext;
	constructor(parser: EParser, ctx: Javascript_argumentsContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public COMMA(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, 0);
	}
	public javascript_arguments(): Javascript_argumentsContext {
		return this.getTypedRuleContext(Javascript_argumentsContext, 0) as Javascript_argumentsContext;
	}
	public javascript_expression(): Javascript_expressionContext {
		return this.getTypedRuleContext(Javascript_expressionContext, 0) as Javascript_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascriptArgumentListItem) {
	 		listener.enterJavascriptArgumentListItem(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascriptArgumentListItem) {
	 		listener.exitJavascriptArgumentListItem(this);
		}
	}
}


export class Javascript_item_expressionContext extends antlr4.context.ParserRuleContext {
	public _exp!: Javascript_expressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LBRAK, 0);
	}
	public RBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RBRAK, 0);
	}
	public javascript_expression(): Javascript_expressionContext {
		return this.getTypedRuleContext(Javascript_expressionContext, 0) as Javascript_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_javascript_item_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascript_item_expression) {
	 		listener.enterJavascript_item_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascript_item_expression) {
	 		listener.exitJavascript_item_expression(this);
		}
	}
}


export class Javascript_parenthesis_expressionContext extends antlr4.context.ParserRuleContext {
	public _exp!: Javascript_expressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LPAR, 0);
	}
	public RPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RPAR, 0);
	}
	public javascript_expression(): Javascript_expressionContext {
		return this.getTypedRuleContext(Javascript_expressionContext, 0) as Javascript_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_javascript_parenthesis_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascript_parenthesis_expression) {
	 		listener.enterJavascript_parenthesis_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascript_parenthesis_expression) {
	 		listener.exitJavascript_parenthesis_expression(this);
		}
	}
}


export class Javascript_identifier_expressionContext extends antlr4.context.ParserRuleContext {
	public _name!: Javascript_identifierContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public javascript_identifier(): Javascript_identifierContext {
		return this.getTypedRuleContext(Javascript_identifierContext, 0) as Javascript_identifierContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_javascript_identifier_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascript_identifier_expression) {
	 		listener.enterJavascript_identifier_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascript_identifier_expression) {
	 		listener.exitJavascript_identifier_expression(this);
		}
	}
}


export class Javascript_literal_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_javascript_literal_expression;
	}
	public copyFrom(ctx: Javascript_literal_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class JavascriptIntegerLiteralContext extends Javascript_literal_expressionContext {
	public _t!: antlr4.Token;
	constructor(parser: EParser, ctx: Javascript_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public INTEGER_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.INTEGER_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascriptIntegerLiteral) {
	 		listener.enterJavascriptIntegerLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascriptIntegerLiteral) {
	 		listener.exitJavascriptIntegerLiteral(this);
		}
	}
}
export class JavascriptBooleanLiteralContext extends Javascript_literal_expressionContext {
	public _t!: antlr4.Token;
	constructor(parser: EParser, ctx: Javascript_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public BOOLEAN_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BOOLEAN_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascriptBooleanLiteral) {
	 		listener.enterJavascriptBooleanLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascriptBooleanLiteral) {
	 		listener.exitJavascriptBooleanLiteral(this);
		}
	}
}
export class JavascriptCharacterLiteralContext extends Javascript_literal_expressionContext {
	public _t!: antlr4.Token;
	constructor(parser: EParser, ctx: Javascript_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CHAR_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CHAR_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascriptCharacterLiteral) {
	 		listener.enterJavascriptCharacterLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascriptCharacterLiteral) {
	 		listener.exitJavascriptCharacterLiteral(this);
		}
	}
}
export class JavascriptTextLiteralContext extends Javascript_literal_expressionContext {
	public _t!: antlr4.Token;
	constructor(parser: EParser, ctx: Javascript_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TEXT_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TEXT_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascriptTextLiteral) {
	 		listener.enterJavascriptTextLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascriptTextLiteral) {
	 		listener.exitJavascriptTextLiteral(this);
		}
	}
}
export class JavascriptDecimalLiteralContext extends Javascript_literal_expressionContext {
	public _t!: antlr4.Token;
	constructor(parser: EParser, ctx: Javascript_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DECIMAL_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DECIMAL_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascriptDecimalLiteral) {
	 		listener.enterJavascriptDecimalLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascriptDecimalLiteral) {
	 		listener.exitJavascriptDecimalLiteral(this);
		}
	}
}


export class Javascript_identifierContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VARIABLE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	}
	public SYMBOL_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
	}
	public DOLLAR_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOLLAR_IDENTIFIER, 0);
	}
	public TYPE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TYPE_IDENTIFIER, 0);
	}
	public keyword(): KeywordContext {
		return this.getTypedRuleContext(KeywordContext, 0) as KeywordContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_javascript_identifier;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavascript_identifier) {
	 		listener.enterJavascript_identifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavascript_identifier) {
	 		listener.exitJavascript_identifier(this);
		}
	}
}


export class Python_statementContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_python_statement;
	}
	public copyFrom(ctx: Python_statementContext): void {
		super.copyFrom(ctx);
	}
}
export class PythonStatementContext extends Python_statementContext {
	public _exp!: Python_expressionContext;
	constructor(parser: EParser, ctx: Python_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public python_expression(): Python_expressionContext {
		return this.getTypedRuleContext(Python_expressionContext, 0) as Python_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonStatement) {
	 		listener.enterPythonStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonStatement) {
	 		listener.exitPythonStatement(this);
		}
	}
}
export class PythonReturnStatementContext extends Python_statementContext {
	public _exp!: Python_expressionContext;
	constructor(parser: EParser, ctx: Python_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public RETURN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RETURN, 0);
	}
	public python_expression(): Python_expressionContext {
		return this.getTypedRuleContext(Python_expressionContext, 0) as Python_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonReturnStatement) {
	 		listener.enterPythonReturnStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonReturnStatement) {
	 		listener.exitPythonReturnStatement(this);
		}
	}
}


export class Python_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_python_expression;
	}
	public copyFrom(ctx: Python_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class PythonSelectorExpressionContext extends Python_expressionContext {
	public _parent!: Python_expressionContext;
	public _child!: Python_selector_expressionContext;
	constructor(parser: EParser, ctx: Python_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public python_expression(): Python_expressionContext {
		return this.getTypedRuleContext(Python_expressionContext, 0) as Python_expressionContext;
	}
	public python_selector_expression(): Python_selector_expressionContext {
		return this.getTypedRuleContext(Python_selector_expressionContext, 0) as Python_selector_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonSelectorExpression) {
	 		listener.enterPythonSelectorExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonSelectorExpression) {
	 		listener.exitPythonSelectorExpression(this);
		}
	}
}
export class PythonPrimaryExpressionContext extends Python_expressionContext {
	public _exp!: Python_primary_expressionContext;
	constructor(parser: EParser, ctx: Python_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public python_primary_expression(): Python_primary_expressionContext {
		return this.getTypedRuleContext(Python_primary_expressionContext, 0) as Python_primary_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonPrimaryExpression) {
	 		listener.enterPythonPrimaryExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonPrimaryExpression) {
	 		listener.exitPythonPrimaryExpression(this);
		}
	}
}


export class Python_primary_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_python_primary_expression;
	}
	public copyFrom(ctx: Python_primary_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class PythonParenthesisExpressionContext extends Python_primary_expressionContext {
	public _exp!: Python_parenthesis_expressionContext;
	constructor(parser: EParser, ctx: Python_primary_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public python_parenthesis_expression(): Python_parenthesis_expressionContext {
		return this.getTypedRuleContext(Python_parenthesis_expressionContext, 0) as Python_parenthesis_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonParenthesisExpression) {
	 		listener.enterPythonParenthesisExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonParenthesisExpression) {
	 		listener.exitPythonParenthesisExpression(this);
		}
	}
}
export class PythonIdentifierExpressionContext extends Python_primary_expressionContext {
	public _exp!: Python_identifier_expressionContext;
	constructor(parser: EParser, ctx: Python_primary_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public python_identifier_expression(): Python_identifier_expressionContext {
		return this.getTypedRuleContext(Python_identifier_expressionContext, 0) as Python_identifier_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonIdentifierExpression) {
	 		listener.enterPythonIdentifierExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonIdentifierExpression) {
	 		listener.exitPythonIdentifierExpression(this);
		}
	}
}
export class PythonSelfExpressionContext extends Python_primary_expressionContext {
	public _exp!: Python_self_expressionContext;
	constructor(parser: EParser, ctx: Python_primary_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public python_self_expression(): Python_self_expressionContext {
		return this.getTypedRuleContext(Python_self_expressionContext, 0) as Python_self_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonSelfExpression) {
	 		listener.enterPythonSelfExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonSelfExpression) {
	 		listener.exitPythonSelfExpression(this);
		}
	}
}
export class PythonLiteralExpressionContext extends Python_primary_expressionContext {
	public _exp!: Python_literal_expressionContext;
	constructor(parser: EParser, ctx: Python_primary_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public python_literal_expression(): Python_literal_expressionContext {
		return this.getTypedRuleContext(Python_literal_expressionContext, 0) as Python_literal_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonLiteralExpression) {
	 		listener.enterPythonLiteralExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonLiteralExpression) {
	 		listener.exitPythonLiteralExpression(this);
		}
	}
}
export class PythonGlobalMethodExpressionContext extends Python_primary_expressionContext {
	public _exp!: Python_method_expressionContext;
	constructor(parser: EParser, ctx: Python_primary_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public python_method_expression(): Python_method_expressionContext {
		return this.getTypedRuleContext(Python_method_expressionContext, 0) as Python_method_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonGlobalMethodExpression) {
	 		listener.enterPythonGlobalMethodExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonGlobalMethodExpression) {
	 		listener.exitPythonGlobalMethodExpression(this);
		}
	}
}


export class Python_self_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public this_expression(): This_expressionContext {
		return this.getTypedRuleContext(This_expressionContext, 0) as This_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_python_self_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPython_self_expression) {
	 		listener.enterPython_self_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPython_self_expression) {
	 		listener.exitPython_self_expression(this);
		}
	}
}


export class Python_selector_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_python_selector_expression;
	}
	public copyFrom(ctx: Python_selector_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class PythonMethodExpressionContext extends Python_selector_expressionContext {
	public _exp!: Python_method_expressionContext;
	constructor(parser: EParser, ctx: Python_selector_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOT, 0);
	}
	public python_method_expression(): Python_method_expressionContext {
		return this.getTypedRuleContext(Python_method_expressionContext, 0) as Python_method_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonMethodExpression) {
	 		listener.enterPythonMethodExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonMethodExpression) {
	 		listener.exitPythonMethodExpression(this);
		}
	}
}
export class PythonItemExpressionContext extends Python_selector_expressionContext {
	public _exp!: Python_expressionContext;
	constructor(parser: EParser, ctx: Python_selector_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LBRAK, 0);
	}
	public RBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RBRAK, 0);
	}
	public python_expression(): Python_expressionContext {
		return this.getTypedRuleContext(Python_expressionContext, 0) as Python_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonItemExpression) {
	 		listener.enterPythonItemExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonItemExpression) {
	 		listener.exitPythonItemExpression(this);
		}
	}
}


export class Python_method_expressionContext extends antlr4.context.ParserRuleContext {
	public _name!: Python_identifierContext;
	public _args!: Python_argument_listContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LPAR, 0);
	}
	public RPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RPAR, 0);
	}
	public python_identifier(): Python_identifierContext {
		return this.getTypedRuleContext(Python_identifierContext, 0) as Python_identifierContext;
	}
	public python_argument_list(): Python_argument_listContext {
		return this.getTypedRuleContext(Python_argument_listContext, 0) as Python_argument_listContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_python_method_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPython_method_expression) {
	 		listener.enterPython_method_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPython_method_expression) {
	 		listener.exitPython_method_expression(this);
		}
	}
}


export class Python_argument_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_python_argument_list;
	}
	public copyFrom(ctx: Python_argument_listContext): void {
		super.copyFrom(ctx);
	}
}
export class PythonOrdinalOnlyArgumentListContext extends Python_argument_listContext {
	public _ordinal!: Python_ordinal_argument_listContext;
	constructor(parser: EParser, ctx: Python_argument_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public python_ordinal_argument_list(): Python_ordinal_argument_listContext {
		return this.getTypedRuleContext(Python_ordinal_argument_listContext, 0) as Python_ordinal_argument_listContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonOrdinalOnlyArgumentList) {
	 		listener.enterPythonOrdinalOnlyArgumentList(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonOrdinalOnlyArgumentList) {
	 		listener.exitPythonOrdinalOnlyArgumentList(this);
		}
	}
}
export class PythonNamedOnlyArgumentListContext extends Python_argument_listContext {
	public _named!: Python_named_argument_listContext;
	constructor(parser: EParser, ctx: Python_argument_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public python_named_argument_list(): Python_named_argument_listContext {
		return this.getTypedRuleContext(Python_named_argument_listContext, 0) as Python_named_argument_listContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonNamedOnlyArgumentList) {
	 		listener.enterPythonNamedOnlyArgumentList(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonNamedOnlyArgumentList) {
	 		listener.exitPythonNamedOnlyArgumentList(this);
		}
	}
}
export class PythonArgumentListContext extends Python_argument_listContext {
	public _ordinal!: Python_ordinal_argument_listContext;
	public _named!: Python_named_argument_listContext;
	constructor(parser: EParser, ctx: Python_argument_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public COMMA(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, 0);
	}
	public python_ordinal_argument_list(): Python_ordinal_argument_listContext {
		return this.getTypedRuleContext(Python_ordinal_argument_listContext, 0) as Python_ordinal_argument_listContext;
	}
	public python_named_argument_list(): Python_named_argument_listContext {
		return this.getTypedRuleContext(Python_named_argument_listContext, 0) as Python_named_argument_listContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonArgumentList) {
	 		listener.enterPythonArgumentList(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonArgumentList) {
	 		listener.exitPythonArgumentList(this);
		}
	}
}


export class Python_ordinal_argument_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_python_ordinal_argument_list;
	}
	public copyFrom(ctx: Python_ordinal_argument_listContext): void {
		super.copyFrom(ctx);
	}
}
export class PythonOrdinalArgumentListContext extends Python_ordinal_argument_listContext {
	public _item!: Python_expressionContext;
	constructor(parser: EParser, ctx: Python_ordinal_argument_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public python_expression(): Python_expressionContext {
		return this.getTypedRuleContext(Python_expressionContext, 0) as Python_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonOrdinalArgumentList) {
	 		listener.enterPythonOrdinalArgumentList(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonOrdinalArgumentList) {
	 		listener.exitPythonOrdinalArgumentList(this);
		}
	}
}
export class PythonOrdinalArgumentListItemContext extends Python_ordinal_argument_listContext {
	public _items!: Python_ordinal_argument_listContext;
	public _item!: Python_expressionContext;
	constructor(parser: EParser, ctx: Python_ordinal_argument_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public COMMA(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, 0);
	}
	public python_ordinal_argument_list(): Python_ordinal_argument_listContext {
		return this.getTypedRuleContext(Python_ordinal_argument_listContext, 0) as Python_ordinal_argument_listContext;
	}
	public python_expression(): Python_expressionContext {
		return this.getTypedRuleContext(Python_expressionContext, 0) as Python_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonOrdinalArgumentListItem) {
	 		listener.enterPythonOrdinalArgumentListItem(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonOrdinalArgumentListItem) {
	 		listener.exitPythonOrdinalArgumentListItem(this);
		}
	}
}


export class Python_named_argument_listContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_python_named_argument_list;
	}
	public copyFrom(ctx: Python_named_argument_listContext): void {
		super.copyFrom(ctx);
	}
}
export class PythonNamedArgumentListContext extends Python_named_argument_listContext {
	public _name!: Python_identifierContext;
	public _exp!: Python_expressionContext;
	constructor(parser: EParser, ctx: Python_named_argument_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public EQ(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.EQ, 0);
	}
	public python_identifier(): Python_identifierContext {
		return this.getTypedRuleContext(Python_identifierContext, 0) as Python_identifierContext;
	}
	public python_expression(): Python_expressionContext {
		return this.getTypedRuleContext(Python_expressionContext, 0) as Python_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonNamedArgumentList) {
	 		listener.enterPythonNamedArgumentList(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonNamedArgumentList) {
	 		listener.exitPythonNamedArgumentList(this);
		}
	}
}
export class PythonNamedArgumentListItemContext extends Python_named_argument_listContext {
	public _items!: Python_named_argument_listContext;
	public _name!: Python_identifierContext;
	public _exp!: Python_expressionContext;
	constructor(parser: EParser, ctx: Python_named_argument_listContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public COMMA(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, 0);
	}
	public EQ(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.EQ, 0);
	}
	public python_named_argument_list(): Python_named_argument_listContext {
		return this.getTypedRuleContext(Python_named_argument_listContext, 0) as Python_named_argument_listContext;
	}
	public python_identifier(): Python_identifierContext {
		return this.getTypedRuleContext(Python_identifierContext, 0) as Python_identifierContext;
	}
	public python_expression(): Python_expressionContext {
		return this.getTypedRuleContext(Python_expressionContext, 0) as Python_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonNamedArgumentListItem) {
	 		listener.enterPythonNamedArgumentListItem(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonNamedArgumentListItem) {
	 		listener.exitPythonNamedArgumentListItem(this);
		}
	}
}


export class Python_parenthesis_expressionContext extends antlr4.context.ParserRuleContext {
	public _exp!: Python_expressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LPAR, 0);
	}
	public RPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RPAR, 0);
	}
	public python_expression(): Python_expressionContext {
		return this.getTypedRuleContext(Python_expressionContext, 0) as Python_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_python_parenthesis_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPython_parenthesis_expression) {
	 		listener.enterPython_parenthesis_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPython_parenthesis_expression) {
	 		listener.exitPython_parenthesis_expression(this);
		}
	}
}


export class Python_identifier_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_python_identifier_expression;
	}
	public copyFrom(ctx: Python_identifier_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class PythonChildIdentifierContext extends Python_identifier_expressionContext {
	public _parent!: Python_identifier_expressionContext;
	public _name!: Python_identifierContext;
	constructor(parser: EParser, ctx: Python_identifier_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOT, 0);
	}
	public python_identifier_expression(): Python_identifier_expressionContext {
		return this.getTypedRuleContext(Python_identifier_expressionContext, 0) as Python_identifier_expressionContext;
	}
	public python_identifier(): Python_identifierContext {
		return this.getTypedRuleContext(Python_identifierContext, 0) as Python_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonChildIdentifier) {
	 		listener.enterPythonChildIdentifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonChildIdentifier) {
	 		listener.exitPythonChildIdentifier(this);
		}
	}
}
export class PythonPromptoIdentifierContext extends Python_identifier_expressionContext {
	constructor(parser: EParser, ctx: Python_identifier_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DOLLAR_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOLLAR_IDENTIFIER, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonPromptoIdentifier) {
	 		listener.enterPythonPromptoIdentifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonPromptoIdentifier) {
	 		listener.exitPythonPromptoIdentifier(this);
		}
	}
}
export class PythonIdentifierContext extends Python_identifier_expressionContext {
	public _name!: Python_identifierContext;
	constructor(parser: EParser, ctx: Python_identifier_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public python_identifier(): Python_identifierContext {
		return this.getTypedRuleContext(Python_identifierContext, 0) as Python_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonIdentifier) {
	 		listener.enterPythonIdentifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonIdentifier) {
	 		listener.exitPythonIdentifier(this);
		}
	}
}


export class Python_literal_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_python_literal_expression;
	}
	public copyFrom(ctx: Python_literal_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class PythonIntegerLiteralContext extends Python_literal_expressionContext {
	public _t!: antlr4.Token;
	constructor(parser: EParser, ctx: Python_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public INTEGER_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.INTEGER_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonIntegerLiteral) {
	 		listener.enterPythonIntegerLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonIntegerLiteral) {
	 		listener.exitPythonIntegerLiteral(this);
		}
	}
}
export class PythonBooleanLiteralContext extends Python_literal_expressionContext {
	public _t!: antlr4.Token;
	constructor(parser: EParser, ctx: Python_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public BOOLEAN_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BOOLEAN_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonBooleanLiteral) {
	 		listener.enterPythonBooleanLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonBooleanLiteral) {
	 		listener.exitPythonBooleanLiteral(this);
		}
	}
}
export class PythonCharacterLiteralContext extends Python_literal_expressionContext {
	public _t!: antlr4.Token;
	constructor(parser: EParser, ctx: Python_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CHAR_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CHAR_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonCharacterLiteral) {
	 		listener.enterPythonCharacterLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonCharacterLiteral) {
	 		listener.exitPythonCharacterLiteral(this);
		}
	}
}
export class PythonTextLiteralContext extends Python_literal_expressionContext {
	public _t!: antlr4.Token;
	constructor(parser: EParser, ctx: Python_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TEXT_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TEXT_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonTextLiteral) {
	 		listener.enterPythonTextLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonTextLiteral) {
	 		listener.exitPythonTextLiteral(this);
		}
	}
}
export class PythonDecimalLiteralContext extends Python_literal_expressionContext {
	public _t!: antlr4.Token;
	constructor(parser: EParser, ctx: Python_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DECIMAL_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DECIMAL_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPythonDecimalLiteral) {
	 		listener.enterPythonDecimalLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPythonDecimalLiteral) {
	 		listener.exitPythonDecimalLiteral(this);
		}
	}
}


export class Python_identifierContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VARIABLE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	}
	public SYMBOL_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
	}
	public DOLLAR_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOLLAR_IDENTIFIER, 0);
	}
	public TYPE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TYPE_IDENTIFIER, 0);
	}
	public keyword(): KeywordContext {
		return this.getTypedRuleContext(KeywordContext, 0) as KeywordContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_python_identifier;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterPython_identifier) {
	 		listener.enterPython_identifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitPython_identifier) {
	 		listener.exitPython_identifier(this);
		}
	}
}


export class Java_statementContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_java_statement;
	}
	public copyFrom(ctx: Java_statementContext): void {
		super.copyFrom(ctx);
	}
}
export class JavaReturnStatementContext extends Java_statementContext {
	public _exp!: Java_expressionContext;
	constructor(parser: EParser, ctx: Java_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public RETURN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RETURN, 0);
	}
	public SEMI(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SEMI, 0);
	}
	public java_expression(): Java_expressionContext {
		return this.getTypedRuleContext(Java_expressionContext, 0) as Java_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavaReturnStatement) {
	 		listener.enterJavaReturnStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavaReturnStatement) {
	 		listener.exitJavaReturnStatement(this);
		}
	}
}
export class JavaStatementContext extends Java_statementContext {
	public _exp!: Java_expressionContext;
	constructor(parser: EParser, ctx: Java_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SEMI(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SEMI, 0);
	}
	public java_expression(): Java_expressionContext {
		return this.getTypedRuleContext(Java_expressionContext, 0) as Java_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavaStatement) {
	 		listener.enterJavaStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavaStatement) {
	 		listener.exitJavaStatement(this);
		}
	}
}


export class Java_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_java_expression;
	}
	public copyFrom(ctx: Java_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class JavaSelectorExpressionContext extends Java_expressionContext {
	public _parent!: Java_expressionContext;
	public _child!: Java_selector_expressionContext;
	constructor(parser: EParser, ctx: Java_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public java_expression(): Java_expressionContext {
		return this.getTypedRuleContext(Java_expressionContext, 0) as Java_expressionContext;
	}
	public java_selector_expression(): Java_selector_expressionContext {
		return this.getTypedRuleContext(Java_selector_expressionContext, 0) as Java_selector_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavaSelectorExpression) {
	 		listener.enterJavaSelectorExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavaSelectorExpression) {
	 		listener.exitJavaSelectorExpression(this);
		}
	}
}
export class JavaPrimaryExpressionContext extends Java_expressionContext {
	public _exp!: Java_primary_expressionContext;
	constructor(parser: EParser, ctx: Java_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public java_primary_expression(): Java_primary_expressionContext {
		return this.getTypedRuleContext(Java_primary_expressionContext, 0) as Java_primary_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavaPrimaryExpression) {
	 		listener.enterJavaPrimaryExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavaPrimaryExpression) {
	 		listener.exitJavaPrimaryExpression(this);
		}
	}
}


export class Java_primary_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public java_this_expression(): Java_this_expressionContext {
		return this.getTypedRuleContext(Java_this_expressionContext, 0) as Java_this_expressionContext;
	}
	public java_new_expression(): Java_new_expressionContext {
		return this.getTypedRuleContext(Java_new_expressionContext, 0) as Java_new_expressionContext;
	}
	public java_parenthesis_expression(): Java_parenthesis_expressionContext {
		return this.getTypedRuleContext(Java_parenthesis_expressionContext, 0) as Java_parenthesis_expressionContext;
	}
	public java_identifier_expression(): Java_identifier_expressionContext {
		return this.getTypedRuleContext(Java_identifier_expressionContext, 0) as Java_identifier_expressionContext;
	}
	public java_literal_expression(): Java_literal_expressionContext {
		return this.getTypedRuleContext(Java_literal_expressionContext, 0) as Java_literal_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_java_primary_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJava_primary_expression) {
	 		listener.enterJava_primary_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJava_primary_expression) {
	 		listener.exitJava_primary_expression(this);
		}
	}
}


export class Java_this_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public this_expression(): This_expressionContext {
		return this.getTypedRuleContext(This_expressionContext, 0) as This_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_java_this_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJava_this_expression) {
	 		listener.enterJava_this_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJava_this_expression) {
	 		listener.exitJava_this_expression(this);
		}
	}
}


export class Java_new_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public new_token(): New_tokenContext {
		return this.getTypedRuleContext(New_tokenContext, 0) as New_tokenContext;
	}
	public java_method_expression(): Java_method_expressionContext {
		return this.getTypedRuleContext(Java_method_expressionContext, 0) as Java_method_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_java_new_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJava_new_expression) {
	 		listener.enterJava_new_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJava_new_expression) {
	 		listener.exitJava_new_expression(this);
		}
	}
}


export class Java_selector_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_java_selector_expression;
	}
	public copyFrom(ctx: Java_selector_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class JavaItemExpressionContext extends Java_selector_expressionContext {
	public _exp!: Java_item_expressionContext;
	constructor(parser: EParser, ctx: Java_selector_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public java_item_expression(): Java_item_expressionContext {
		return this.getTypedRuleContext(Java_item_expressionContext, 0) as Java_item_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavaItemExpression) {
	 		listener.enterJavaItemExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavaItemExpression) {
	 		listener.exitJavaItemExpression(this);
		}
	}
}
export class JavaMethodExpressionContext extends Java_selector_expressionContext {
	public _exp!: Java_method_expressionContext;
	constructor(parser: EParser, ctx: Java_selector_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOT, 0);
	}
	public java_method_expression(): Java_method_expressionContext {
		return this.getTypedRuleContext(Java_method_expressionContext, 0) as Java_method_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavaMethodExpression) {
	 		listener.enterJavaMethodExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavaMethodExpression) {
	 		listener.exitJavaMethodExpression(this);
		}
	}
}


export class Java_method_expressionContext extends antlr4.context.ParserRuleContext {
	public _name!: Java_identifierContext;
	public _args!: Java_argumentsContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LPAR, 0);
	}
	public RPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RPAR, 0);
	}
	public java_identifier(): Java_identifierContext {
		return this.getTypedRuleContext(Java_identifierContext, 0) as Java_identifierContext;
	}
	public java_arguments(): Java_argumentsContext {
		return this.getTypedRuleContext(Java_argumentsContext, 0) as Java_argumentsContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_java_method_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJava_method_expression) {
	 		listener.enterJava_method_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJava_method_expression) {
	 		listener.exitJava_method_expression(this);
		}
	}
}


export class Java_argumentsContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_java_arguments;
	}
	public copyFrom(ctx: Java_argumentsContext): void {
		super.copyFrom(ctx);
	}
}
export class JavaArgumentListItemContext extends Java_argumentsContext {
	public _items!: Java_argumentsContext;
	public _item!: Java_expressionContext;
	constructor(parser: EParser, ctx: Java_argumentsContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public COMMA(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, 0);
	}
	public java_arguments(): Java_argumentsContext {
		return this.getTypedRuleContext(Java_argumentsContext, 0) as Java_argumentsContext;
	}
	public java_expression(): Java_expressionContext {
		return this.getTypedRuleContext(Java_expressionContext, 0) as Java_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavaArgumentListItem) {
	 		listener.enterJavaArgumentListItem(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavaArgumentListItem) {
	 		listener.exitJavaArgumentListItem(this);
		}
	}
}
export class JavaArgumentListContext extends Java_argumentsContext {
	public _item!: Java_expressionContext;
	constructor(parser: EParser, ctx: Java_argumentsContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public java_expression(): Java_expressionContext {
		return this.getTypedRuleContext(Java_expressionContext, 0) as Java_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavaArgumentList) {
	 		listener.enterJavaArgumentList(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavaArgumentList) {
	 		listener.exitJavaArgumentList(this);
		}
	}
}


export class Java_item_expressionContext extends antlr4.context.ParserRuleContext {
	public _exp!: Java_expressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LBRAK, 0);
	}
	public RBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RBRAK, 0);
	}
	public java_expression(): Java_expressionContext {
		return this.getTypedRuleContext(Java_expressionContext, 0) as Java_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_java_item_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJava_item_expression) {
	 		listener.enterJava_item_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJava_item_expression) {
	 		listener.exitJava_item_expression(this);
		}
	}
}


export class Java_parenthesis_expressionContext extends antlr4.context.ParserRuleContext {
	public _exp!: Java_expressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LPAR, 0);
	}
	public RPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RPAR, 0);
	}
	public java_expression(): Java_expressionContext {
		return this.getTypedRuleContext(Java_expressionContext, 0) as Java_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_java_parenthesis_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJava_parenthesis_expression) {
	 		listener.enterJava_parenthesis_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJava_parenthesis_expression) {
	 		listener.exitJava_parenthesis_expression(this);
		}
	}
}


export class Java_identifier_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_java_identifier_expression;
	}
	public copyFrom(ctx: Java_identifier_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class JavaIdentifierContext extends Java_identifier_expressionContext {
	public _name!: Java_identifierContext;
	constructor(parser: EParser, ctx: Java_identifier_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public java_identifier(): Java_identifierContext {
		return this.getTypedRuleContext(Java_identifierContext, 0) as Java_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavaIdentifier) {
	 		listener.enterJavaIdentifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavaIdentifier) {
	 		listener.exitJavaIdentifier(this);
		}
	}
}
export class JavaChildIdentifierContext extends Java_identifier_expressionContext {
	public _parent!: Java_identifier_expressionContext;
	public _name!: Java_identifierContext;
	constructor(parser: EParser, ctx: Java_identifier_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOT, 0);
	}
	public java_identifier_expression(): Java_identifier_expressionContext {
		return this.getTypedRuleContext(Java_identifier_expressionContext, 0) as Java_identifier_expressionContext;
	}
	public java_identifier(): Java_identifierContext {
		return this.getTypedRuleContext(Java_identifierContext, 0) as Java_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavaChildIdentifier) {
	 		listener.enterJavaChildIdentifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavaChildIdentifier) {
	 		listener.exitJavaChildIdentifier(this);
		}
	}
}


export class Java_class_identifier_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_java_class_identifier_expression;
	}
	public copyFrom(ctx: Java_class_identifier_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class JavaClassIdentifierContext extends Java_class_identifier_expressionContext {
	public _klass!: Java_identifier_expressionContext;
	constructor(parser: EParser, ctx: Java_class_identifier_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public java_identifier_expression(): Java_identifier_expressionContext {
		return this.getTypedRuleContext(Java_identifier_expressionContext, 0) as Java_identifier_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavaClassIdentifier) {
	 		listener.enterJavaClassIdentifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavaClassIdentifier) {
	 		listener.exitJavaClassIdentifier(this);
		}
	}
}
export class JavaChildClassIdentifierContext extends Java_class_identifier_expressionContext {
	public _parent!: Java_class_identifier_expressionContext;
	public _name!: antlr4.Token;
	constructor(parser: EParser, ctx: Java_class_identifier_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public java_class_identifier_expression(): Java_class_identifier_expressionContext {
		return this.getTypedRuleContext(Java_class_identifier_expressionContext, 0) as Java_class_identifier_expressionContext;
	}
	public DOLLAR_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOLLAR_IDENTIFIER, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavaChildClassIdentifier) {
	 		listener.enterJavaChildClassIdentifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavaChildClassIdentifier) {
	 		listener.exitJavaChildClassIdentifier(this);
		}
	}
}


export class Java_literal_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_java_literal_expression;
	}
	public copyFrom(ctx: Java_literal_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class JavaBooleanLiteralContext extends Java_literal_expressionContext {
	public _t!: antlr4.Token;
	constructor(parser: EParser, ctx: Java_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public BOOLEAN_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BOOLEAN_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavaBooleanLiteral) {
	 		listener.enterJavaBooleanLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavaBooleanLiteral) {
	 		listener.exitJavaBooleanLiteral(this);
		}
	}
}
export class JavaCharacterLiteralContext extends Java_literal_expressionContext {
	public _t!: antlr4.Token;
	constructor(parser: EParser, ctx: Java_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CHAR_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CHAR_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavaCharacterLiteral) {
	 		listener.enterJavaCharacterLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavaCharacterLiteral) {
	 		listener.exitJavaCharacterLiteral(this);
		}
	}
}
export class JavaIntegerLiteralContext extends Java_literal_expressionContext {
	public _t!: antlr4.Token;
	constructor(parser: EParser, ctx: Java_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public INTEGER_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.INTEGER_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavaIntegerLiteral) {
	 		listener.enterJavaIntegerLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavaIntegerLiteral) {
	 		listener.exitJavaIntegerLiteral(this);
		}
	}
}
export class JavaTextLiteralContext extends Java_literal_expressionContext {
	public _t!: antlr4.Token;
	constructor(parser: EParser, ctx: Java_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TEXT_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TEXT_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavaTextLiteral) {
	 		listener.enterJavaTextLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavaTextLiteral) {
	 		listener.exitJavaTextLiteral(this);
		}
	}
}
export class JavaDecimalLiteralContext extends Java_literal_expressionContext {
	public _t!: antlr4.Token;
	constructor(parser: EParser, ctx: Java_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DECIMAL_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DECIMAL_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJavaDecimalLiteral) {
	 		listener.enterJavaDecimalLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJavaDecimalLiteral) {
	 		listener.exitJavaDecimalLiteral(this);
		}
	}
}


export class Java_identifierContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VARIABLE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	}
	public SYMBOL_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
	}
	public DOLLAR_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOLLAR_IDENTIFIER, 0);
	}
	public TYPE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TYPE_IDENTIFIER, 0);
	}
	public keyword(): KeywordContext {
		return this.getTypedRuleContext(KeywordContext, 0) as KeywordContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_java_identifier;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJava_identifier) {
	 		listener.enterJava_identifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJava_identifier) {
	 		listener.exitJava_identifier(this);
		}
	}
}


export class Csharp_statementContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_csharp_statement;
	}
	public copyFrom(ctx: Csharp_statementContext): void {
		super.copyFrom(ctx);
	}
}
export class CSharpReturnStatementContext extends Csharp_statementContext {
	public _exp!: Csharp_expressionContext;
	constructor(parser: EParser, ctx: Csharp_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public RETURN(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RETURN, 0);
	}
	public SEMI(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SEMI, 0);
	}
	public csharp_expression(): Csharp_expressionContext {
		return this.getTypedRuleContext(Csharp_expressionContext, 0) as Csharp_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCSharpReturnStatement) {
	 		listener.enterCSharpReturnStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCSharpReturnStatement) {
	 		listener.exitCSharpReturnStatement(this);
		}
	}
}
export class CSharpStatementContext extends Csharp_statementContext {
	public _exp!: Csharp_expressionContext;
	constructor(parser: EParser, ctx: Csharp_statementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SEMI(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SEMI, 0);
	}
	public csharp_expression(): Csharp_expressionContext {
		return this.getTypedRuleContext(Csharp_expressionContext, 0) as Csharp_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCSharpStatement) {
	 		listener.enterCSharpStatement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCSharpStatement) {
	 		listener.exitCSharpStatement(this);
		}
	}
}


export class Csharp_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_csharp_expression;
	}
	public copyFrom(ctx: Csharp_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class CSharpSelectorExpressionContext extends Csharp_expressionContext {
	public _parent!: Csharp_expressionContext;
	public _child!: Csharp_selector_expressionContext;
	constructor(parser: EParser, ctx: Csharp_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public csharp_expression(): Csharp_expressionContext {
		return this.getTypedRuleContext(Csharp_expressionContext, 0) as Csharp_expressionContext;
	}
	public csharp_selector_expression(): Csharp_selector_expressionContext {
		return this.getTypedRuleContext(Csharp_selector_expressionContext, 0) as Csharp_selector_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCSharpSelectorExpression) {
	 		listener.enterCSharpSelectorExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCSharpSelectorExpression) {
	 		listener.exitCSharpSelectorExpression(this);
		}
	}
}
export class CSharpPrimaryExpressionContext extends Csharp_expressionContext {
	public _exp!: Csharp_primary_expressionContext;
	constructor(parser: EParser, ctx: Csharp_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public csharp_primary_expression(): Csharp_primary_expressionContext {
		return this.getTypedRuleContext(Csharp_primary_expressionContext, 0) as Csharp_primary_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCSharpPrimaryExpression) {
	 		listener.enterCSharpPrimaryExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCSharpPrimaryExpression) {
	 		listener.exitCSharpPrimaryExpression(this);
		}
	}
}


export class Csharp_primary_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public csharp_this_expression(): Csharp_this_expressionContext {
		return this.getTypedRuleContext(Csharp_this_expressionContext, 0) as Csharp_this_expressionContext;
	}
	public csharp_new_expression(): Csharp_new_expressionContext {
		return this.getTypedRuleContext(Csharp_new_expressionContext, 0) as Csharp_new_expressionContext;
	}
	public csharp_parenthesis_expression(): Csharp_parenthesis_expressionContext {
		return this.getTypedRuleContext(Csharp_parenthesis_expressionContext, 0) as Csharp_parenthesis_expressionContext;
	}
	public csharp_identifier_expression(): Csharp_identifier_expressionContext {
		return this.getTypedRuleContext(Csharp_identifier_expressionContext, 0) as Csharp_identifier_expressionContext;
	}
	public csharp_literal_expression(): Csharp_literal_expressionContext {
		return this.getTypedRuleContext(Csharp_literal_expressionContext, 0) as Csharp_literal_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_csharp_primary_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCsharp_primary_expression) {
	 		listener.enterCsharp_primary_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCsharp_primary_expression) {
	 		listener.exitCsharp_primary_expression(this);
		}
	}
}


export class Csharp_this_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public this_expression(): This_expressionContext {
		return this.getTypedRuleContext(This_expressionContext, 0) as This_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_csharp_this_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCsharp_this_expression) {
	 		listener.enterCsharp_this_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCsharp_this_expression) {
	 		listener.exitCsharp_this_expression(this);
		}
	}
}


export class Csharp_new_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public new_token(): New_tokenContext {
		return this.getTypedRuleContext(New_tokenContext, 0) as New_tokenContext;
	}
	public csharp_method_expression(): Csharp_method_expressionContext {
		return this.getTypedRuleContext(Csharp_method_expressionContext, 0) as Csharp_method_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_csharp_new_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCsharp_new_expression) {
	 		listener.enterCsharp_new_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCsharp_new_expression) {
	 		listener.exitCsharp_new_expression(this);
		}
	}
}


export class Csharp_selector_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_csharp_selector_expression;
	}
	public copyFrom(ctx: Csharp_selector_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class CSharpMethodExpressionContext extends Csharp_selector_expressionContext {
	public _exp!: Csharp_method_expressionContext;
	constructor(parser: EParser, ctx: Csharp_selector_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOT, 0);
	}
	public csharp_method_expression(): Csharp_method_expressionContext {
		return this.getTypedRuleContext(Csharp_method_expressionContext, 0) as Csharp_method_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCSharpMethodExpression) {
	 		listener.enterCSharpMethodExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCSharpMethodExpression) {
	 		listener.exitCSharpMethodExpression(this);
		}
	}
}
export class CSharpItemExpressionContext extends Csharp_selector_expressionContext {
	public _exp!: Csharp_item_expressionContext;
	constructor(parser: EParser, ctx: Csharp_selector_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public csharp_item_expression(): Csharp_item_expressionContext {
		return this.getTypedRuleContext(Csharp_item_expressionContext, 0) as Csharp_item_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCSharpItemExpression) {
	 		listener.enterCSharpItemExpression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCSharpItemExpression) {
	 		listener.exitCSharpItemExpression(this);
		}
	}
}


export class Csharp_method_expressionContext extends antlr4.context.ParserRuleContext {
	public _name!: Csharp_identifierContext;
	public _args!: Csharp_argumentsContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LPAR, 0);
	}
	public RPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RPAR, 0);
	}
	public csharp_identifier(): Csharp_identifierContext {
		return this.getTypedRuleContext(Csharp_identifierContext, 0) as Csharp_identifierContext;
	}
	public csharp_arguments(): Csharp_argumentsContext {
		return this.getTypedRuleContext(Csharp_argumentsContext, 0) as Csharp_argumentsContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_csharp_method_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCsharp_method_expression) {
	 		listener.enterCsharp_method_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCsharp_method_expression) {
	 		listener.exitCsharp_method_expression(this);
		}
	}
}


export class Csharp_argumentsContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_csharp_arguments;
	}
	public copyFrom(ctx: Csharp_argumentsContext): void {
		super.copyFrom(ctx);
	}
}
export class CSharpArgumentListContext extends Csharp_argumentsContext {
	public _item!: Csharp_expressionContext;
	constructor(parser: EParser, ctx: Csharp_argumentsContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public csharp_expression(): Csharp_expressionContext {
		return this.getTypedRuleContext(Csharp_expressionContext, 0) as Csharp_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCSharpArgumentList) {
	 		listener.enterCSharpArgumentList(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCSharpArgumentList) {
	 		listener.exitCSharpArgumentList(this);
		}
	}
}
export class CSharpArgumentListItemContext extends Csharp_argumentsContext {
	public _items!: Csharp_argumentsContext;
	public _item!: Csharp_expressionContext;
	constructor(parser: EParser, ctx: Csharp_argumentsContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public COMMA(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COMMA, 0);
	}
	public csharp_arguments(): Csharp_argumentsContext {
		return this.getTypedRuleContext(Csharp_argumentsContext, 0) as Csharp_argumentsContext;
	}
	public csharp_expression(): Csharp_expressionContext {
		return this.getTypedRuleContext(Csharp_expressionContext, 0) as Csharp_expressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCSharpArgumentListItem) {
	 		listener.enterCSharpArgumentListItem(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCSharpArgumentListItem) {
	 		listener.exitCSharpArgumentListItem(this);
		}
	}
}


export class Csharp_item_expressionContext extends antlr4.context.ParserRuleContext {
	public _exp!: Csharp_expressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LBRAK, 0);
	}
	public RBRAK(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RBRAK, 0);
	}
	public csharp_expression(): Csharp_expressionContext {
		return this.getTypedRuleContext(Csharp_expressionContext, 0) as Csharp_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_csharp_item_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCsharp_item_expression) {
	 		listener.enterCsharp_item_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCsharp_item_expression) {
	 		listener.exitCsharp_item_expression(this);
		}
	}
}


export class Csharp_parenthesis_expressionContext extends antlr4.context.ParserRuleContext {
	public _exp!: Csharp_expressionContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LPAR, 0);
	}
	public RPAR(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RPAR, 0);
	}
	public csharp_expression(): Csharp_expressionContext {
		return this.getTypedRuleContext(Csharp_expressionContext, 0) as Csharp_expressionContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_csharp_parenthesis_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCsharp_parenthesis_expression) {
	 		listener.enterCsharp_parenthesis_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCsharp_parenthesis_expression) {
	 		listener.exitCsharp_parenthesis_expression(this);
		}
	}
}


export class Csharp_identifier_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_csharp_identifier_expression;
	}
	public copyFrom(ctx: Csharp_identifier_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class CSharpIdentifierContext extends Csharp_identifier_expressionContext {
	public _name!: Csharp_identifierContext;
	constructor(parser: EParser, ctx: Csharp_identifier_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public csharp_identifier(): Csharp_identifierContext {
		return this.getTypedRuleContext(Csharp_identifierContext, 0) as Csharp_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCSharpIdentifier) {
	 		listener.enterCSharpIdentifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCSharpIdentifier) {
	 		listener.exitCSharpIdentifier(this);
		}
	}
}
export class CSharpChildIdentifierContext extends Csharp_identifier_expressionContext {
	public _parent!: Csharp_identifier_expressionContext;
	public _name!: Csharp_identifierContext;
	constructor(parser: EParser, ctx: Csharp_identifier_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DOT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOT, 0);
	}
	public csharp_identifier_expression(): Csharp_identifier_expressionContext {
		return this.getTypedRuleContext(Csharp_identifier_expressionContext, 0) as Csharp_identifier_expressionContext;
	}
	public csharp_identifier(): Csharp_identifierContext {
		return this.getTypedRuleContext(Csharp_identifierContext, 0) as Csharp_identifierContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCSharpChildIdentifier) {
	 		listener.enterCSharpChildIdentifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCSharpChildIdentifier) {
	 		listener.exitCSharpChildIdentifier(this);
		}
	}
}
export class CSharpPromptoIdentifierContext extends Csharp_identifier_expressionContext {
	constructor(parser: EParser, ctx: Csharp_identifier_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DOLLAR_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOLLAR_IDENTIFIER, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCSharpPromptoIdentifier) {
	 		listener.enterCSharpPromptoIdentifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCSharpPromptoIdentifier) {
	 		listener.exitCSharpPromptoIdentifier(this);
		}
	}
}


export class Csharp_literal_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_csharp_literal_expression;
	}
	public copyFrom(ctx: Csharp_literal_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class CSharpBooleanLiteralContext extends Csharp_literal_expressionContext {
	constructor(parser: EParser, ctx: Csharp_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public BOOLEAN_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.BOOLEAN_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCSharpBooleanLiteral) {
	 		listener.enterCSharpBooleanLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCSharpBooleanLiteral) {
	 		listener.exitCSharpBooleanLiteral(this);
		}
	}
}
export class CSharpIntegerLiteralContext extends Csharp_literal_expressionContext {
	constructor(parser: EParser, ctx: Csharp_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public INTEGER_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.INTEGER_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCSharpIntegerLiteral) {
	 		listener.enterCSharpIntegerLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCSharpIntegerLiteral) {
	 		listener.exitCSharpIntegerLiteral(this);
		}
	}
}
export class CSharpDecimalLiteralContext extends Csharp_literal_expressionContext {
	constructor(parser: EParser, ctx: Csharp_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DECIMAL_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DECIMAL_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCSharpDecimalLiteral) {
	 		listener.enterCSharpDecimalLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCSharpDecimalLiteral) {
	 		listener.exitCSharpDecimalLiteral(this);
		}
	}
}
export class CSharpCharacterLiteralContext extends Csharp_literal_expressionContext {
	constructor(parser: EParser, ctx: Csharp_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CHAR_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.CHAR_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCSharpCharacterLiteral) {
	 		listener.enterCSharpCharacterLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCSharpCharacterLiteral) {
	 		listener.exitCSharpCharacterLiteral(this);
		}
	}
}
export class CSharpTextLiteralContext extends Csharp_literal_expressionContext {
	constructor(parser: EParser, ctx: Csharp_literal_expressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TEXT_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TEXT_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCSharpTextLiteral) {
	 		listener.enterCSharpTextLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCSharpTextLiteral) {
	 		listener.exitCSharpTextLiteral(this);
		}
	}
}


export class Csharp_identifierContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VARIABLE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
	}
	public SYMBOL_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
	}
	public DOLLAR_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOLLAR_IDENTIFIER, 0);
	}
	public TYPE_IDENTIFIER(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TYPE_IDENTIFIER, 0);
	}
	public keyword(): KeywordContext {
		return this.getTypedRuleContext(KeywordContext, 0) as KeywordContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_csharp_identifier;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCsharp_identifier) {
	 		listener.enterCsharp_identifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCsharp_identifier) {
	 		listener.exitCsharp_identifier(this);
		}
	}
}


export class Jsx_expressionContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public jsx_element(): Jsx_elementContext {
		return this.getTypedRuleContext(Jsx_elementContext, 0) as Jsx_elementContext;
	}
	public jsx_fragment(): Jsx_fragmentContext {
		return this.getTypedRuleContext(Jsx_fragmentContext, 0) as Jsx_fragmentContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_jsx_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsx_expression) {
	 		listener.enterJsx_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsx_expression) {
	 		listener.exitJsx_expression(this);
		}
	}
}


export class Jsx_elementContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_jsx_element;
	}
	public copyFrom(ctx: Jsx_elementContext): void {
		super.copyFrom(ctx);
	}
}
export class JsxSelfClosingContext extends Jsx_elementContext {
	public _jsx!: Jsx_self_closingContext;
	constructor(parser: EParser, ctx: Jsx_elementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public jsx_self_closing(): Jsx_self_closingContext {
		return this.getTypedRuleContext(Jsx_self_closingContext, 0) as Jsx_self_closingContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsxSelfClosing) {
	 		listener.enterJsxSelfClosing(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsxSelfClosing) {
	 		listener.exitJsxSelfClosing(this);
		}
	}
}
export class JsxElementContext extends Jsx_elementContext {
	public _opening!: Jsx_openingContext;
	public _children_!: Jsx_childrenContext;
	public _closing!: Jsx_closingContext;
	constructor(parser: EParser, ctx: Jsx_elementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public jsx_opening(): Jsx_openingContext {
		return this.getTypedRuleContext(Jsx_openingContext, 0) as Jsx_openingContext;
	}
	public jsx_closing(): Jsx_closingContext {
		return this.getTypedRuleContext(Jsx_closingContext, 0) as Jsx_closingContext;
	}
	public jsx_children(): Jsx_childrenContext {
		return this.getTypedRuleContext(Jsx_childrenContext, 0) as Jsx_childrenContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsxElement) {
	 		listener.enterJsxElement(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsxElement) {
	 		listener.exitJsxElement(this);
		}
	}
}


export class Jsx_fragmentContext extends antlr4.context.ParserRuleContext {
	public _children_!: Jsx_childrenContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public jsx_fragment_start(): Jsx_fragment_startContext {
		return this.getTypedRuleContext(Jsx_fragment_startContext, 0) as Jsx_fragment_startContext;
	}
	public ws_plus_list(): Ws_plusContext[] {
		return this.getTypedRuleContexts(Ws_plusContext) as Ws_plusContext[];
	}
	public ws_plus(i: number): Ws_plusContext {
		return this.getTypedRuleContext(Ws_plusContext, i) as Ws_plusContext;
	}
	public jsx_fragment_end(): Jsx_fragment_endContext {
		return this.getTypedRuleContext(Jsx_fragment_endContext, 0) as Jsx_fragment_endContext;
	}
	public jsx_children(): Jsx_childrenContext {
		return this.getTypedRuleContext(Jsx_childrenContext, 0) as Jsx_childrenContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_jsx_fragment;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsx_fragment) {
	 		listener.enterJsx_fragment(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsx_fragment) {
	 		listener.exitJsx_fragment(this);
		}
	}
}


export class Jsx_fragment_startContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LT, 0);
	}
	public GT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.GT, 0);
	}
	public LTGT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LTGT, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_jsx_fragment_start;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsx_fragment_start) {
	 		listener.enterJsx_fragment_start(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsx_fragment_start) {
	 		listener.exitJsx_fragment_start(this);
		}
	}
}


export class Jsx_fragment_endContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LT, 0);
	}
	public SLASH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SLASH, 0);
	}
	public GT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.GT, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_jsx_fragment_end;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsx_fragment_end) {
	 		listener.enterJsx_fragment_end(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsx_fragment_end) {
	 		listener.exitJsx_fragment_end(this);
		}
	}
}


export class Jsx_self_closingContext extends antlr4.context.ParserRuleContext {
	public _name!: Jsx_element_nameContext;
	public _attributes!: Jsx_attributeContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LT, 0);
	}
	public ws_plus(): Ws_plusContext {
		return this.getTypedRuleContext(Ws_plusContext, 0) as Ws_plusContext;
	}
	public SLASH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SLASH, 0);
	}
	public GT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.GT, 0);
	}
	public jsx_element_name(): Jsx_element_nameContext {
		return this.getTypedRuleContext(Jsx_element_nameContext, 0) as Jsx_element_nameContext;
	}
	public jsx_attribute_list(): Jsx_attributeContext[] {
		return this.getTypedRuleContexts(Jsx_attributeContext) as Jsx_attributeContext[];
	}
	public jsx_attribute(i: number): Jsx_attributeContext {
		return this.getTypedRuleContext(Jsx_attributeContext, i) as Jsx_attributeContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_jsx_self_closing;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsx_self_closing) {
	 		listener.enterJsx_self_closing(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsx_self_closing) {
	 		listener.exitJsx_self_closing(this);
		}
	}
}


export class Jsx_openingContext extends antlr4.context.ParserRuleContext {
	public _name!: Jsx_element_nameContext;
	public _attributes!: Jsx_attributeContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LT, 0);
	}
	public ws_plus(): Ws_plusContext {
		return this.getTypedRuleContext(Ws_plusContext, 0) as Ws_plusContext;
	}
	public GT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.GT, 0);
	}
	public jsx_element_name(): Jsx_element_nameContext {
		return this.getTypedRuleContext(Jsx_element_nameContext, 0) as Jsx_element_nameContext;
	}
	public jsx_attribute_list(): Jsx_attributeContext[] {
		return this.getTypedRuleContexts(Jsx_attributeContext) as Jsx_attributeContext[];
	}
	public jsx_attribute(i: number): Jsx_attributeContext {
		return this.getTypedRuleContext(Jsx_attributeContext, i) as Jsx_attributeContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_jsx_opening;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsx_opening) {
	 		listener.enterJsx_opening(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsx_opening) {
	 		listener.exitJsx_opening(this);
		}
	}
}


export class Jsx_closingContext extends antlr4.context.ParserRuleContext {
	public _name!: Jsx_element_nameContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LT, 0);
	}
	public SLASH(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SLASH, 0);
	}
	public GT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.GT, 0);
	}
	public jsx_element_name(): Jsx_element_nameContext {
		return this.getTypedRuleContext(Jsx_element_nameContext, 0) as Jsx_element_nameContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_jsx_closing;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsx_closing) {
	 		listener.enterJsx_closing(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsx_closing) {
	 		listener.exitJsx_closing(this);
		}
	}
}


export class Jsx_element_nameContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public jsx_identifier_list(): Jsx_identifierContext[] {
		return this.getTypedRuleContexts(Jsx_identifierContext) as Jsx_identifierContext[];
	}
	public jsx_identifier(i: number): Jsx_identifierContext {
		return this.getTypedRuleContext(Jsx_identifierContext, i) as Jsx_identifierContext;
	}
	public DOT_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.DOT);
	}
	public DOT(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.DOT, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_jsx_element_name;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsx_element_name) {
	 		listener.enterJsx_element_name(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsx_element_name) {
	 		listener.exitJsx_element_name(this);
		}
	}
}


export class Jsx_identifierContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier_or_keyword(): Identifier_or_keywordContext {
		return this.getTypedRuleContext(Identifier_or_keywordContext, 0) as Identifier_or_keywordContext;
	}
	public nospace_hyphen_identifier_or_keyword_list(): Nospace_hyphen_identifier_or_keywordContext[] {
		return this.getTypedRuleContexts(Nospace_hyphen_identifier_or_keywordContext) as Nospace_hyphen_identifier_or_keywordContext[];
	}
	public nospace_hyphen_identifier_or_keyword(i: number): Nospace_hyphen_identifier_or_keywordContext {
		return this.getTypedRuleContext(Nospace_hyphen_identifier_or_keywordContext, i) as Nospace_hyphen_identifier_or_keywordContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_jsx_identifier;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsx_identifier) {
	 		listener.enterJsx_identifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsx_identifier) {
	 		listener.exitJsx_identifier(this);
		}
	}
}


export class Jsx_attributeContext extends antlr4.context.ParserRuleContext {
	public _name!: Jsx_identifierContext;
	public _value!: Jsx_attribute_valueContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ws_plus(): Ws_plusContext {
		return this.getTypedRuleContext(Ws_plusContext, 0) as Ws_plusContext;
	}
	public jsx_identifier(): Jsx_identifierContext {
		return this.getTypedRuleContext(Jsx_identifierContext, 0) as Jsx_identifierContext;
	}
	public EQ(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.EQ, 0);
	}
	public jsx_attribute_value(): Jsx_attribute_valueContext {
		return this.getTypedRuleContext(Jsx_attribute_valueContext, 0) as Jsx_attribute_valueContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_jsx_attribute;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsx_attribute) {
	 		listener.enterJsx_attribute(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsx_attribute) {
	 		listener.exitJsx_attribute(this);
		}
	}
}


export class Jsx_attribute_valueContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_jsx_attribute_value;
	}
	public copyFrom(ctx: Jsx_attribute_valueContext): void {
		super.copyFrom(ctx);
	}
}
export class JsxValueContext extends Jsx_attribute_valueContext {
	public _exp!: ExpressionContext;
	constructor(parser: EParser, ctx: Jsx_attribute_valueContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LCURL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LCURL, 0);
	}
	public RCURL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RCURL, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsxValue) {
	 		listener.enterJsxValue(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsxValue) {
	 		listener.exitJsxValue(this);
		}
	}
}
export class JsxLiteralContext extends Jsx_attribute_valueContext {
	constructor(parser: EParser, ctx: Jsx_attribute_valueContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TEXT_LITERAL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.TEXT_LITERAL, 0);
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsxLiteral) {
	 		listener.enterJsxLiteral(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsxLiteral) {
	 		listener.exitJsxLiteral(this);
		}
	}
}


export class Jsx_childrenContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public jsx_child_list(): Jsx_childContext[] {
		return this.getTypedRuleContexts(Jsx_childContext) as Jsx_childContext[];
	}
	public jsx_child(i: number): Jsx_childContext {
		return this.getTypedRuleContext(Jsx_childContext, i) as Jsx_childContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_jsx_children;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsx_children) {
	 		listener.enterJsx_children(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsx_children) {
	 		listener.exitJsx_children(this);
		}
	}
}


export class Jsx_childContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_jsx_child;
	}
	public copyFrom(ctx: Jsx_childContext): void {
		super.copyFrom(ctx);
	}
}
export class JsxTextContext extends Jsx_childContext {
	public _text!: Jsx_textContext;
	constructor(parser: EParser, ctx: Jsx_childContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public jsx_text(): Jsx_textContext {
		return this.getTypedRuleContext(Jsx_textContext, 0) as Jsx_textContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsxText) {
	 		listener.enterJsxText(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsxText) {
	 		listener.exitJsxText(this);
		}
	}
}
export class JsxChildContext extends Jsx_childContext {
	public _jsx!: Jsx_elementContext;
	constructor(parser: EParser, ctx: Jsx_childContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public jsx_element(): Jsx_elementContext {
		return this.getTypedRuleContext(Jsx_elementContext, 0) as Jsx_elementContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsxChild) {
	 		listener.enterJsxChild(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsxChild) {
	 		listener.exitJsxChild(this);
		}
	}
}
export class JsxCodeContext extends Jsx_childContext {
	public _exp!: ExpressionContext;
	constructor(parser: EParser, ctx: Jsx_childContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LCURL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LCURL, 0);
	}
	public RCURL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RCURL, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsxCode) {
	 		listener.enterJsxCode(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsxCode) {
	 		listener.exitJsxCode(this);
		}
	}
}


export class Jsx_textContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public jsx_char_list(): Jsx_charContext[] {
		return this.getTypedRuleContexts(Jsx_charContext) as Jsx_charContext[];
	}
	public jsx_char(i: number): Jsx_charContext {
		return this.getTypedRuleContext(Jsx_charContext, i) as Jsx_charContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_jsx_text;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsx_text) {
	 		listener.enterJsx_text(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsx_text) {
	 		listener.exitJsx_text(this);
		}
	}
}


export class Jsx_charContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LCURL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LCURL, 0);
	}
	public RCURL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RCURL, 0);
	}
	public LT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LT, 0);
	}
	public GT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.GT, 0);
	}
	public JSX_TEXT(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.JSX_TEXT, 0);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_jsx_char;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterJsx_char) {
	 		listener.enterJsx_char(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitJsx_char) {
	 		listener.exitJsx_char(this);
		}
	}
}


export class Css_expressionContext extends antlr4.context.ParserRuleContext {
	public _field!: Css_fieldContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LCURL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LCURL, 0);
	}
	public RCURL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RCURL, 0);
	}
	public css_field_list(): Css_fieldContext[] {
		return this.getTypedRuleContexts(Css_fieldContext) as Css_fieldContext[];
	}
	public css_field(i: number): Css_fieldContext {
		return this.getTypedRuleContext(Css_fieldContext, i) as Css_fieldContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_css_expression;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCss_expression) {
	 		listener.enterCss_expression(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCss_expression) {
	 		listener.exitCss_expression(this);
		}
	}
}


export class Css_fieldContext extends antlr4.context.ParserRuleContext {
	public _name!: Css_identifierContext;
	public _values!: Css_valueContext;
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COLON(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.COLON, 0);
	}
	public SEMI(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SEMI, 0);
	}
	public css_identifier(): Css_identifierContext {
		return this.getTypedRuleContext(Css_identifierContext, 0) as Css_identifierContext;
	}
	public css_value_list(): Css_valueContext[] {
		return this.getTypedRuleContexts(Css_valueContext) as Css_valueContext[];
	}
	public css_value(i: number): Css_valueContext {
		return this.getTypedRuleContext(Css_valueContext, i) as Css_valueContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_css_field;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCss_field) {
	 		listener.enterCss_field(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCss_field) {
	 		listener.exitCss_field(this);
		}
	}
}


export class Css_identifierContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier_or_keyword(): Identifier_or_keywordContext {
		return this.getTypedRuleContext(Identifier_or_keywordContext, 0) as Identifier_or_keywordContext;
	}
	public MINUS(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.MINUS, 0);
	}
	public nospace_identifier_or_keyword(): Nospace_identifier_or_keywordContext {
		return this.getTypedRuleContext(Nospace_identifier_or_keywordContext, 0) as Nospace_identifier_or_keywordContext;
	}
	public css_identifier(): Css_identifierContext {
		return this.getTypedRuleContext(Css_identifierContext, 0) as Css_identifierContext;
	}
	public nospace_hyphen_identifier_or_keyword_list(): Nospace_hyphen_identifier_or_keywordContext[] {
		return this.getTypedRuleContexts(Nospace_hyphen_identifier_or_keywordContext) as Nospace_hyphen_identifier_or_keywordContext[];
	}
	public nospace_hyphen_identifier_or_keyword(i: number): Nospace_hyphen_identifier_or_keywordContext {
		return this.getTypedRuleContext(Nospace_hyphen_identifier_or_keywordContext, i) as Nospace_hyphen_identifier_or_keywordContext;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_css_identifier;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCss_identifier) {
	 		listener.enterCss_identifier(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCss_identifier) {
	 		listener.exitCss_identifier(this);
		}
	}
}


export class Css_valueContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return EParser.RULE_css_value;
	}
	public copyFrom(ctx: Css_valueContext): void {
		super.copyFrom(ctx);
	}
}
export class CssTextContext extends Css_valueContext {
	public _text!: Css_textContext;
	constructor(parser: EParser, ctx: Css_valueContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public css_text(): Css_textContext {
		return this.getTypedRuleContext(Css_textContext, 0) as Css_textContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCssText) {
	 		listener.enterCssText(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCssText) {
	 		listener.exitCssText(this);
		}
	}
}
export class CssValueContext extends Css_valueContext {
	public _exp!: ExpressionContext;
	constructor(parser: EParser, ctx: Css_valueContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LCURL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LCURL, 0);
	}
	public RCURL(): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RCURL, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCssValue) {
	 		listener.enterCssValue(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCssValue) {
	 		listener.exitCssValue(this);
		}
	}
}


export class Css_textContext extends antlr4.context.ParserRuleContext {
	constructor(parser?: EParser, parent?: antlr4.context.ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SEMI_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.SEMI);
	}
	public SEMI(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.SEMI, i);
	}
	public LCURL_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.LCURL);
	}
	public LCURL(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.LCURL, i);
	}
	public RCURL_list(): antlr4.tree.TerminalNode[] {
	    	return this.getTokens(EParser.RCURL);
	}
	public RCURL(i: number): antlr4.tree.TerminalNode {
		return this.getToken(EParser.RCURL, i);
	}
    public get ruleIndex(): number {
    	return EParser.RULE_css_text;
	}
	public enterRule(listener: EParserListener): void {
	    if(listener.enterCss_text) {
	 		listener.enterCss_text(this);
		}
	}
	public exitRule(listener: EParserListener): void {
	    if(listener.exitCss_text) {
	 		listener.exitCss_text(this);
		}
	}
}
