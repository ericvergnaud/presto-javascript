// Generated from OParser.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var OParserListener = require('./OParserListener').OParserListener;
var AbstractParser = require('./AbstractParser').AbstractParser;

var grammarFileName = "OParser.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00b5\u0aaa\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004",
    "\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t",
    "\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0004",
    "\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004\u00d6\t",
    "\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t\u00d9\u0004",
    "\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004\u00dd\t",
    "\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t\u00e0\u0004",
    "\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004\u00e4\t",
    "\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t\u00e7\u0004",
    "\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004\u00eb\t",
    "\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t\u00ee\u0004",
    "\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004\u00f2\t",
    "\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t\u00f5\u0004",
    "\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0005",
    "\u0002\u01f8\n\u0002\u0003\u0002\u0003\u0002\u0005\u0002\u01fc\n\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0006\u0005\u0006\u0217\n\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u021e\n\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006",
    "\u0226\n\u0006\u0005\u0006\u0228\n\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u0230\n\u0007",
    "\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\t\u0005\t\u023d\n\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0005\t\u0245\n\t\u0003\t\u0003\t\u0005\t\u0249",
    "\n\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n",
    "\u0005\n\u0253\n\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u025d\n\u000b\f\u000b",
    "\u000e\u000b\u0260\u000b\u000b\u0003\f\u0003\f\u0003\f\u0005\f\u0265",
    "\n\f\u0003\f\u0005\f\u0268\n\f\u0003\r\u0005\r\u026b\n\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u0274\n\r\u0003\r",
    "\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u027c\n\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0005\u000f\u0281",
    "\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f",
    "\u0287\n\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0005\u0010\u028f\n\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0011\u0005\u0011\u0294\n\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0005\u0011\u029a\n\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0012\u0005\u0012\u029f\n\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u02a8",
    "\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u02ad\n\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0013\u0005\u0013\u02b2\n\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0005\u0013\u02bb\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0005\u0013\u02c0\n\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0007\u0015\u02d2\n\u0015\f\u0015\u000e\u0015\u02d5\u000b\u0015",
    "\u0003\u0016\u0003\u0016\u0005\u0016\u02d9\n\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u02df\n\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0017\u0005\u0017\u02e5\n\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u02eb\n\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u02f0\n\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0018\u0005\u0018\u02f5\n\u0018\u0003\u0018",
    "\u0005\u0018\u02f8\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0005\u0018\u02fe\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0005\u0019\u0315\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u031f",
    "\n\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0324\n\u001b",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c",
    "\u032b\n\u001c\u0005\u001c\u032d\n\u001c\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005",
    "\u001d\u0343\n\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f",
    "\u0354\n\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0005\u001f\u035b\n\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0363\n\u001f\u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0005\"\u037a\n\"\u0005\"\u037c\n\"\u0003\"\u0003\"\u0003",
    "#\u0003#\u0003#\u0003#\u0005#\u0384\n#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0005#\u038b\n#\u0005#\u038d\n#\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0005$\u0395\n$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003%\u0003",
    "%\u0003%\u0005%\u039f\n%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003\'",
    "\u0003\'\u0003\'\u0003\'\u0005\'\u03b4\n\'\u0003\'\u0003\'\u0005\'\u03b8",
    "\n\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(",
    "\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0007(\u03ca\n(\f",
    "(\u000e(\u03cd\u000b(\u0003)\u0003)\u0003)\u0003)\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0005*\u03d9\n*\u0003*\u0003*\u0005*\u03dd\n",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u03e5\n*\u0003*\u0005",
    "*\u03e8\n*\u0003*\u0003*\u0003*\u0005*\u03ed\n*\u0003*\u0005*\u03f0",
    "\n*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u03f8\n+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u0403",
    "\n+\u0003+\u0003+\u0005+\u0407\n+\u0003,\u0003,\u0003,\u0003-\u0003",
    "-\u0005-\u040e\n-\u0003-\u0003-\u0003.\u0003.\u0003.\u0005.\u0415\n",
    ".\u0003.\u0003.\u0003/\u0003/\u0003/\u0005/\u041c\n/\u0003/\u0003/\u0003",
    "/\u0003/\u0005/\u0422\n/\u0003/\u0003/\u0003/\u0003/\u0003/\u0005/\u0429",
    "\n/\u00030\u00030\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00051\u0447",
    "\n1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00071\u04bb\n1\f1\u000e1\u04be\u000b",
    "1\u00032\u00032\u00032\u00032\u00033\u00033\u00034\u00034\u00034\u0003",
    "4\u00034\u00054\u04cb\n4\u00035\u00035\u00035\u00035\u00035\u00075\u04d2",
    "\n5\f5\u000e5\u04d5\u000b5\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00076\u04dd\n6\f6\u000e6\u04e0\u000b6\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00057\u04eb\n7\u00038\u00038\u0003",
    "8\u00038\u00038\u00039\u00039\u00039\u00059\u04f5\n9\u00039\u00039\u0003",
    ":\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u050a\n;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0005",
    "<\u0517\n<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0005<\u0524\n<\u0003<\u0003<\u0003<\u0003<\u0005<\u052a",
    "\n<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0005<\u0533\n",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0005<\u053a\n<\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0005<\u0542\n<\u0005<\u0544\n<\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0005=\u054c\n=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0005=\u055f\n=\u0003=\u0003=\u0003=\u0003=\u0005",
    "=\u0565\n=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0005=\u056e",
    "\n=\u0003=\u0003=\u0003=\u0003=\u0003=\u0005=\u0575\n=\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0005=\u057d\n=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0005=\u0586\n=\u0003>\u0003>\u0005>\u058a\n",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0005>\u0593\n>\u0003",
    ">\u0003>\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0005?\u05a3\n?\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0005@\u05aa\n@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u05b1\n",
    "@\u0003@\u0003@\u0005@\u05b5\n@\u0003A\u0003A\u0003A\u0003A\u0003A\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0005B\u05c1\nB\u0003B\u0003B\u0003B\u0007",
    "B\u05c6\nB\fB\u000eB\u05c9\u000bB\u0003C\u0003C\u0003C\u0003C\u0005",
    "C\u05cf\nC\u0003D\u0003D\u0003D\u0003D\u0003D\u0003E\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0005E\u05dc\nE\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "G\u0003G\u0003H\u0007H\u05e6\nH\fH\u000eH\u05e9\u000bH\u0003I\u0003",
    "I\u0003I\u0005I\u05ee\nI\u0003J\u0005J\u05f1\nJ\u0003J\u0003J\u0003",
    "J\u0003K\u0003K\u0003K\u0003K\u0007K\u05fa\nK\fK\u000eK\u05fd\u000b",
    "K\u0003L\u0003L\u0003L\u0007L\u0602\nL\fL\u000eL\u0605\u000bL\u0003",
    "L\u0003L\u0003L\u0007L\u060a\nL\fL\u000eL\u060d\u000bL\u0003L\u0003",
    "L\u0003L\u0003L\u0003L\u0003L\u0005L\u0615\nL\u0003M\u0003M\u0003M\u0003",
    "M\u0003M\u0005M\u061c\nM\u0003N\u0003N\u0003O\u0003O\u0003P\u0003P\u0005",
    "P\u0624\nP\u0003Q\u0003Q\u0003Q\u0003Q\u0007Q\u062a\nQ\fQ\u000eQ\u062d",
    "\u000bQ\u0003R\u0003R\u0003R\u0003R\u0007R\u0633\nR\fR\u000eR\u0636",
    "\u000bR\u0003S\u0003S\u0003S\u0007S\u063b\nS\fS\u000eS\u063e\u000bS",
    "\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003",
    "T\u0005T\u064a\nT\u0003U\u0005U\u064d\nU\u0003U\u0003U\u0005U\u0651",
    "\nU\u0003U\u0003U\u0003V\u0005V\u0656\nV\u0003V\u0003V\u0005V\u065a",
    "\nV\u0003V\u0003V\u0003W\u0003W\u0003W\u0007W\u0661\nW\fW\u000eW\u0664",
    "\u000bW\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003Y\u0003Y\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0005",
    "Y\u0678\nY\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0007Y\u0681",
    "\nY\fY\u000eY\u0684\u000bY\u0003Z\u0003Z\u0005Z\u0688\nZ\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0005[\u069a\n[\u0003\\\u0003\\\u0003",
    "]\u0005]\u069f\n]\u0003]\u0003]\u0003^\u0003^\u0003_\u0003_\u0003_\u0005",
    "_\u06a8\n_\u0003`\u0003`\u0005`\u06ac\n`\u0003a\u0003a\u0003a\u0007",
    "a\u06b1\na\fa\u000ea\u06b4\u000ba\u0003b\u0003b\u0005b\u06b8\nb\u0003",
    "c\u0003c\u0005c\u06bc\nc\u0003d\u0003d\u0003d\u0003d\u0003e\u0003e\u0003",
    "e\u0003f\u0003f\u0003f\u0005f\u06c8\nf\u0003g\u0003g\u0003h\u0003h\u0003",
    "i\u0003i\u0003j\u0003j\u0003k\u0003k\u0003l\u0003l\u0003l\u0007l\u06d7",
    "\nl\fl\u000el\u06da\u000bl\u0003m\u0003m\u0005m\u06de\nm\u0003m\u0005",
    "m\u06e1\nm\u0003n\u0003n\u0005n\u06e5\nn\u0003o\u0003o\u0003o\u0005",
    "o\u06ea\no\u0003p\u0003p\u0003p\u0003q\u0003q\u0005q\u06f1\nq\u0003",
    "r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0007r\u06fc",
    "\nr\fr\u000er\u06ff\u000br\u0003s\u0003s\u0003s\u0003s\u0007s\u0705",
    "\ns\fs\u000es\u0708\u000bs\u0003t\u0003t\u0003t\u0007t\u070d\nt\ft\u000e",
    "t\u0710\u000bt\u0003t\u0003t\u0003t\u0007t\u0715\nt\ft\u000et\u0718",
    "\u000bt\u0003t\u0003t\u0003t\u0003t\u0003t\u0005t\u071f\nt\u0003u\u0003",
    "u\u0003u\u0003u\u0007u\u0725\nu\fu\u000eu\u0728\u000bu\u0003v\u0003",
    "v\u0003v\u0005v\u072d\nv\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003",
    "w\u0003w\u0003w\u0003w\u0005w\u0739\nw\u0003x\u0003x\u0005x\u073d\n",
    "x\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0007y\u0745\ny\fy\u000e",
    "y\u0748\u000by\u0003z\u0003z\u0003z\u0007z\u074d\nz\fz\u000ez\u0750",
    "\u000bz\u0003z\u0005z\u0753\nz\u0003{\u0003{\u0003{\u0003{\u0005{\u0759",
    "\n{\u0003{\u0003{\u0003{\u0007{\u075e\n{\f{\u000e{\u0761\u000b{\u0003",
    "{\u0003{\u0005{\u0765\n{\u0003|\u0003|\u0003|\u0007|\u076a\n|\f|\u000e",
    "|\u076d\u000b|\u0003}\u0003}\u0003}\u0007}\u0772\n}\f}\u000e}\u0775",
    "\u000b}\u0003~\u0003~\u0003~\u0003~\u0005~\u077b\n~\u0003\u007f\u0003",
    "\u007f\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0007\u0080\u0783",
    "\n\u0080\f\u0080\u000e\u0080\u0786\u000b\u0080\u0003\u0081\u0003\u0081",
    "\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081",
    "\u0003\u0081\u0003\u0081\u0005\u0081\u0792\n\u0081\u0003\u0082\u0003",
    "\u0082\u0005\u0082\u0796\n\u0082\u0003\u0082\u0005\u0082\u0799\n\u0082",
    "\u0003\u0083\u0003\u0083\u0005\u0083\u079d\n\u0083\u0003\u0083\u0005",
    "\u0083\u07a0\n\u0083\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084",
    "\u0007\u0084\u07a6\n\u0084\f\u0084\u000e\u0084\u07a9\u000b\u0084\u0003",
    "\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0007\u0085\u07af\n\u0085",
    "\f\u0085\u000e\u0085\u07b2\u000b\u0085\u0003\u0086\u0003\u0086\u0003",
    "\u0086\u0003\u0086\u0007\u0086\u07b8\n\u0086\f\u0086\u000e\u0086\u07bb",
    "\u000b\u0086\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0007\u0087",
    "\u07c1\n\u0087\f\u0087\u000e\u0087\u07c4\u000b\u0087\u0003\u0088\u0003",
    "\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003",
    "\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003",
    "\u0088\u0005\u0088\u07d4\n\u0088\u0003\u0089\u0003\u0089\u0003\u0089",
    "\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089",
    "\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089",
    "\u0005\u0089\u07e5\n\u0089\u0003\u008a\u0003\u008a\u0003\u008a\u0007",
    "\u008a\u07ea\n\u008a\f\u008a\u000e\u008a\u07ed\u000b\u008a\u0003\u008b",
    "\u0003\u008b\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008d",
    "\u0003\u008d\u0005\u008d\u07f7\n\u008d\u0003\u008e\u0003\u008e\u0003",
    "\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0005\u008e\u07ff\n\u008e",
    "\u0003\u008f\u0005\u008f\u0802\n\u008f\u0003\u008f\u0003\u008f\u0005",
    "\u008f\u0806\n\u008f\u0003\u008f\u0003\u008f\u0003\u0090\u0005\u0090",
    "\u080b\n\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003",
    "\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0005\u0090\u0815\n\u0090",
    "\u0003\u0091\u0003\u0091\u0005\u0091\u0819\n\u0091\u0003\u0091\u0003",
    "\u0091\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0007",
    "\u0092\u0822\n\u0092\f\u0092\u000e\u0092\u0825\u000b\u0092\u0005\u0092",
    "\u0827\n\u0092\u0003\u0093\u0003\u0093\u0003\u0093\u0007\u0093\u082c",
    "\n\u0093\f\u0093\u000e\u0093\u082f\u000b\u0093\u0003\u0094\u0003\u0094",
    "\u0003\u0094\u0003\u0094\u0003\u0095\u0003\u0095\u0005\u0095\u0837\n",
    "\u0095\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003",
    "\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0005\u0096\u0842\n\u0096",
    "\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0098\u0003\u0098",
    "\u0003\u0098\u0003\u0098\u0003\u0098\u0007\u0098\u084d\n\u0098\f\u0098",
    "\u000e\u0098\u0850\u000b\u0098\u0003\u0099\u0003\u0099\u0003\u0099\u0003",
    "\u0099\u0005\u0099\u0856\n\u0099\u0003\u009a\u0003\u009a\u0003\u009a",
    "\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0005\u009a",
    "\u0860\n\u009a\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003",
    "\u009b\u0003\u009c\u0003\u009c\u0003\u009c\u0005\u009c\u086a\n\u009c",
    "\u0003\u009c\u0005\u009c\u086d\n\u009c\u0003\u009d\u0003\u009d\u0005",
    "\u009d\u0871\n\u009d\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e",
    "\u0003\u009e\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f",
    "\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0007\u00a0\u0880\n\u00a0\f\u00a0",
    "\u000e\u00a0\u0883\u000b\u00a0\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0007",
    "\u00a1\u0888\n\u00a1\f\u00a1\u000e\u00a1\u088b\u000b\u00a1\u0003\u00a1",
    "\u0005\u00a1\u088e\n\u00a1\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003",
    "\u00a2\u0003\u00a2\u0003\u00a2\u0005\u00a2\u0896\n\u00a2\u0003\u00a3",
    "\u0003\u00a3\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a5\u0003\u00a5",
    "\u0003\u00a5\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a7\u0003\u00a7",
    "\u0003\u00a7\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a9\u0003\u00a9",
    "\u0003\u00aa\u0003\u00aa\u0003\u00ab\u0003\u00ab\u0003\u00ac\u0003\u00ac",
    "\u0003\u00ad\u0003\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00af\u0003\u00af",
    "\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0",
    "\u0003\u00b0\u0005\u00b0\u08be\n\u00b0\u0003\u00b1\u0003\u00b1\u0003",
    "\u00b1\u0003\u00b1\u0003\u00b1\u0007\u00b1\u08c5\n\u00b1\f\u00b1\u000e",
    "\u00b1\u08c8\u000b\u00b1\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2",
    "\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0005\u00b2\u08d1\n\u00b2\u0003",
    "\u00b3\u0003\u00b3\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b5\u0003",
    "\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0005\u00b5\u08dd\n\u00b5",
    "\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6\u08e2\n\u00b6\u0003",
    "\u00b6\u0003\u00b6\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003",
    "\u00b7\u0003\u00b7\u0007\u00b7\u08ec\n\u00b7\f\u00b7\u000e\u00b7\u08ef",
    "\u000b\u00b7\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b9",
    "\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00ba\u0003\u00ba\u0003\u00bb",
    "\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb\u0900\n",
    "\u00bb\u0003\u00bc\u0003\u00bc\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0005",
    "\u00bd\u0907\n\u00bd\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0007\u00be\u090e\n\u00be\f\u00be\u000e\u00be\u0911\u000b",
    "\u00be\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0005",
    "\u00bf\u0918\n\u00bf\u0003\u00c0\u0003\u00c0\u0003\u00c1\u0003\u00c1",
    "\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0005\u00c1\u0922\n",
    "\u00c1\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0005\u00c2\u0927\n\u00c2",
    "\u0003\u00c2\u0003\u00c2\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3",
    "\u0003\u00c3\u0003\u00c3\u0005\u00c3\u0931\n\u00c3\u0003\u00c4\u0003",
    "\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0007\u00c4\u0939",
    "\n\u00c4\f\u00c4\u000e\u00c4\u093c\u000b\u00c4\u0003\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0007\u00c5\u0949\n\u00c5\f\u00c5",
    "\u000e\u00c5\u094c\u000b\u00c5\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0005\u00c7\u0955\n\u00c7",
    "\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0007\u00c7\u095a\n\u00c7\f\u00c7",
    "\u000e\u00c7\u095d\u000b\u00c7\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003",
    "\u00c8\u0003\u00c8\u0005\u00c8\u0964\n\u00c8\u0003\u00c9\u0003\u00c9",
    "\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca",
    "\u0003\u00ca\u0005\u00ca\u096f\n\u00ca\u0003\u00cb\u0003\u00cb\u0003",
    "\u00cb\u0003\u00cb\u0003\u00cb\u0007\u00cb\u0976\n\u00cb\f\u00cb\u000e",
    "\u00cb\u0979\u000b\u00cb\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc",
    "\u0003\u00cc\u0005\u00cc\u0980\n\u00cc\u0003\u00cd\u0003\u00cd\u0003",
    "\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0005",
    "\u00cf\u098a\n\u00cf\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0005\u00d0",
    "\u098f\n\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d1\u0003\u00d1\u0003",
    "\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0007\u00d1\u0999\n\u00d1",
    "\f\u00d1\u000e\u00d1\u099c\u000b\u00d1\u0003\u00d2\u0003\u00d2\u0003",
    "\u00d2\u0003\u00d2\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003",
    "\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0007",
    "\u00d4\u09ac\n\u00d4\f\u00d4\u000e\u00d4\u09af\u000b\u00d4\u0003\u00d5",
    "\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0007\u00d5\u09b6\n",
    "\u00d5\f\u00d5\u000e\u00d5\u09b9\u000b\u00d5\u0003\u00d6\u0003\u00d6",
    "\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0005\u00d6\u09c0\n\u00d6\u0003",
    "\u00d7\u0003\u00d7\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003",
    "\u00d8\u0003\u00d8\u0003\u00d8\u0005\u00d8\u09cb\n\u00d8\u0003\u00d9",
    "\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0007\u00d9\u09d2\n",
    "\u00d9\f\u00d9\u000e\u00d9\u09d5\u000b\u00d9\u0003\u00da\u0003\u00da",
    "\u0003\u00da\u0003\u00da\u0003\u00da\u0005\u00da\u09dc\n\u00da\u0003",
    "\u00db\u0003\u00db\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dd\u0003",
    "\u00dd\u0003\u00dd\u0005\u00dd\u09e6\n\u00dd\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0005\u00de\u09eb\n\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0007",
    "\u00df\u09f5\n\u00df\f\u00df\u000e\u00df\u09f8\u000b\u00df\u0003\u00e0",
    "\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e1\u0003\u00e1\u0003\u00e1",
    "\u0003\u00e1\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0005\u00e2\u0a05\n",
    "\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0007\u00e2\u0a0a\n\u00e2",
    "\f\u00e2\u000e\u00e2\u0a0d\u000b\u00e2\u0003\u00e3\u0003\u00e3\u0003",
    "\u00e3\u0003\u00e3\u0003\u00e3\u0005\u00e3\u0a14\n\u00e3\u0003\u00e4",
    "\u0003\u00e4\u0003\u00e5\u0003\u00e5\u0005\u00e5\u0a1a\n\u00e5\u0003",
    "\u00e6\u0003\u00e6\u0003\u00e6\u0005\u00e6\u0a1f\n\u00e6\u0003\u00e6",
    "\u0003\u00e6\u0005\u00e6\u0a23\n\u00e6\u0003\u00e7\u0003\u00e7\u0005",
    "\u00e7\u0a27\n\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e8\u0003\u00e8",
    "\u0003\u00e8\u0005\u00e8\u0a2e\n\u00e8\u0003\u00e9\u0003\u00e9\u0003",
    "\u00e9\u0003\u00e9\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0007",
    "\u00ea\u0a38\n\u00ea\f\u00ea\u000e\u00ea\u0a3b\u000b\u00ea\u0003\u00ea",
    "\u0003\u00ea\u0003\u00ea\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb",
    "\u0007\u00eb\u0a44\n\u00eb\f\u00eb\u000e\u00eb\u0a47\u000b\u00eb\u0003",
    "\u00eb\u0003\u00eb\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003",
    "\u00ec\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0007\u00ed\u0a53\n\u00ed",
    "\f\u00ed\u000e\u00ed\u0a56\u000b\u00ed\u0003\u00ee\u0003\u00ee\u0007",
    "\u00ee\u0a5a\n\u00ee\f\u00ee\u000e\u00ee\u0a5d\u000b\u00ee\u0003\u00ef",
    "\u0003\u00ef\u0003\u00ef\u0005\u00ef\u0a62\n\u00ef\u0003\u00ef\u0003",
    "\u00ef\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0005",
    "\u00f0\u0a6b\n\u00f0\u0003\u00f1\u0006\u00f1\u0a6e\n\u00f1\r\u00f1\u000e",
    "\u00f1\u0a6f\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0005\u00f2",
    "\u0a76\n\u00f2\u0003\u00f2\u0005\u00f2\u0a79\n\u00f2\u0003\u00f3\u0006",
    "\u00f3\u0a7c\n\u00f3\r\u00f3\u000e\u00f3\u0a7d\u0003\u00f4\u0003\u00f4",
    "\u0006\u00f4\u0a82\n\u00f4\r\u00f4\u000e\u00f4\u0a83\u0003\u00f4\u0003",
    "\u00f4\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003",
    "\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0005\u00f6\u0a91\n\u00f6",
    "\u0003\u00f6\u0003\u00f6\u0006\u00f6\u0a95\n\u00f6\r\u00f6\u000e\u00f6",
    "\u0a96\u0007\u00f6\u0a99\n\u00f6\f\u00f6\u000e\u00f6\u0a9c\u000b\u00f6",
    "\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0005\u00f7",
    "\u0aa3\n\u00f7\u0003\u00f8\u0006\u00f8\u0aa6\n\u00f8\r\u00f8\u000e\u00f8",
    "\u0aa7\u0003\u00f8\u0002\u001a\u0014(N`hj\u0082\u00b0\u00e2\u012e\u0160",
    "\u016c\u017a\u0186\u0188\u018c\u0194\u01a0\u01a6\u01a8\u01b0\u01bc\u01c2",
    "\u01ea\u00f9\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018",
    "\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|",
    "~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094",
    "\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac",
    "\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4",
    "\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc",
    "\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4",
    "\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c",
    "\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124",
    "\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c",
    "\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154",
    "\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c",
    "\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184",
    "\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c",
    "\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4",
    "\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc",
    "\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4",
    "\u01e6\u01e8\u01ea\u01ec\u01ee\u0002\u0010\u0003\u0002\u001e\u001f\u0003",
    "\u0002\u0004\u0005\u0004\u0002\u0091\u0091\u00a7\u00a7\u0003\u0002\u00a5",
    "\u00a7\u0004\u0002\u008d\u008d\u0096\u0096\u0004\u0002KK\\\\\u0005\u0002",
    "\u0007\f2\u0094\u0096\u00a0\u0004\u0002##ww\r\u00022;AADDzz}}\u0087",
    "\u0087\u008d\u008d\u0094\u0094\u00a0\u00a0\u00a5\u00a7\u00a9\u00a9\f",
    "\u00022;AADDzz}}\u0087\u0087\u0094\u0094\u0096\u0096\u00a0\u00a0\u00a5",
    "\u00a7\f\u00022;AADDzz}}\u0087\u0087\u008d\u008d\u0094\u0094\u00a0\u00a0",
    "\u00a5\u00a9\f\u00022;AADDzz}}\u0087\u0087\u008d\u008d\u0094\u0094\u00a0",
    "\u00a0\u00a5\u00a7\u0005\u0002\u0016\u0017$$&&\u0005\u0002\u0004\u0004",
    "\r\u000e\u0016\u0017\u0002\u0b4a\u0002\u01f0\u0003\u0002\u0002\u0002",
    "\u0004\u0201\u0003\u0002\u0002\u0002\u0006\u020a\u0003\u0002\u0002\u0002",
    "\b\u0210\u0003\u0002\u0002\u0002\n\u0216\u0003\u0002\u0002\u0002\f\u022b",
    "\u0003\u0002\u0002\u0002\u000e\u0233\u0003\u0002\u0002\u0002\u0010\u023c",
    "\u0003\u0002\u0002\u0002\u0012\u024c\u0003\u0002\u0002\u0002\u0014\u0256",
    "\u0003\u0002\u0002\u0002\u0016\u0267\u0003\u0002\u0002\u0002\u0018\u026a",
    "\u0003\u0002\u0002\u0002\u001a\u0277\u0003\u0002\u0002\u0002\u001c\u0280",
    "\u0003\u0002\u0002\u0002\u001e\u028a\u0003\u0002\u0002\u0002 \u0293",
    "\u0003\u0002\u0002\u0002\"\u029e\u0003\u0002\u0002\u0002$\u02b1\u0003",
    "\u0002\u0002\u0002&\u02c3\u0003\u0002\u0002\u0002(\u02c9\u0003\u0002",
    "\u0002\u0002*\u02d6\u0003\u0002\u0002\u0002,\u02e4\u0003\u0002\u0002",
    "\u0002.\u02f4\u0003\u0002\u0002\u00020\u0304\u0003\u0002\u0002\u0002",
    "2\u0316\u0003\u0002\u0002\u00024\u0319\u0003\u0002\u0002\u00026\u032c",
    "\u0003\u0002\u0002\u00028\u0342\u0003\u0002\u0002\u0002:\u0344\u0003",
    "\u0002\u0002\u0002<\u035a\u0003\u0002\u0002\u0002>\u0364\u0003\u0002",
    "\u0002\u0002@\u036a\u0003\u0002\u0002\u0002B\u0370\u0003\u0002\u0002",
    "\u0002D\u038c\u0003\u0002\u0002\u0002F\u038e\u0003\u0002\u0002\u0002",
    "H\u039b\u0003\u0002\u0002\u0002J\u03a7\u0003\u0002\u0002\u0002L\u03ad",
    "\u0003\u0002\u0002\u0002N\u03b9\u0003\u0002\u0002\u0002P\u03ce\u0003",
    "\u0002\u0002\u0002R\u03d2\u0003\u0002\u0002\u0002T\u0406\u0003\u0002",
    "\u0002\u0002V\u0408\u0003\u0002\u0002\u0002X\u040b\u0003\u0002\u0002",
    "\u0002Z\u0411\u0003\u0002\u0002\u0002\\\u041b\u0003\u0002\u0002\u0002",
    "^\u042a\u0003\u0002\u0002\u0002`\u0446\u0003\u0002\u0002\u0002b\u04bf",
    "\u0003\u0002\u0002\u0002d\u04c3\u0003\u0002\u0002\u0002f\u04ca\u0003",
    "\u0002\u0002\u0002h\u04cc\u0003\u0002\u0002\u0002j\u04d6\u0003\u0002",
    "\u0002\u0002l\u04ea\u0003\u0002\u0002\u0002n\u04ec\u0003\u0002\u0002",
    "\u0002p\u04f1\u0003\u0002\u0002\u0002r\u04f8\u0003\u0002\u0002\u0002",
    "t\u0500\u0003\u0002\u0002\u0002v\u0543\u0003\u0002\u0002\u0002x\u0585",
    "\u0003\u0002\u0002\u0002z\u0587\u0003\u0002\u0002\u0002|\u05a2\u0003",
    "\u0002\u0002\u0002~\u05b4\u0003\u0002\u0002\u0002\u0080\u05b6\u0003",
    "\u0002\u0002\u0002\u0082\u05c0\u0003\u0002\u0002\u0002\u0084\u05ca\u0003",
    "\u0002\u0002\u0002\u0086\u05d0\u0003\u0002\u0002\u0002\u0088\u05db\u0003",
    "\u0002\u0002\u0002\u008a\u05dd\u0003\u0002\u0002\u0002\u008c\u05e2\u0003",
    "\u0002\u0002\u0002\u008e\u05e7\u0003\u0002\u0002\u0002\u0090\u05ed\u0003",
    "\u0002\u0002\u0002\u0092\u05f0\u0003\u0002\u0002\u0002\u0094\u05f5\u0003",
    "\u0002\u0002\u0002\u0096\u0603\u0003\u0002\u0002\u0002\u0098\u0616\u0003",
    "\u0002\u0002\u0002\u009a\u061d\u0003\u0002\u0002\u0002\u009c\u061f\u0003",
    "\u0002\u0002\u0002\u009e\u0623\u0003\u0002\u0002\u0002\u00a0\u0625\u0003",
    "\u0002\u0002\u0002\u00a2\u062e\u0003\u0002\u0002\u0002\u00a4\u0637\u0003",
    "\u0002\u0002\u0002\u00a6\u0649\u0003\u0002\u0002\u0002\u00a8\u064c\u0003",
    "\u0002\u0002\u0002\u00aa\u0655\u0003\u0002\u0002\u0002\u00ac\u065d\u0003",
    "\u0002\u0002\u0002\u00ae\u0665\u0003\u0002\u0002\u0002\u00b0\u0677\u0003",
    "\u0002\u0002\u0002\u00b2\u0687\u0003\u0002\u0002\u0002\u00b4\u0699\u0003",
    "\u0002\u0002\u0002\u00b6\u069b\u0003\u0002\u0002\u0002\u00b8\u069e\u0003",
    "\u0002\u0002\u0002\u00ba\u06a2\u0003\u0002\u0002\u0002\u00bc\u06a7\u0003",
    "\u0002\u0002\u0002\u00be\u06ab\u0003\u0002\u0002\u0002\u00c0\u06ad\u0003",
    "\u0002\u0002\u0002\u00c2\u06b7\u0003\u0002\u0002\u0002\u00c4\u06bb\u0003",
    "\u0002\u0002\u0002\u00c6\u06bd\u0003\u0002\u0002\u0002\u00c8\u06c1\u0003",
    "\u0002\u0002\u0002\u00ca\u06c7\u0003\u0002\u0002\u0002\u00cc\u06c9\u0003",
    "\u0002\u0002\u0002\u00ce\u06cb\u0003\u0002\u0002\u0002\u00d0\u06cd\u0003",
    "\u0002\u0002\u0002\u00d2\u06cf\u0003\u0002\u0002\u0002\u00d4\u06d1\u0003",
    "\u0002\u0002\u0002\u00d6\u06d3\u0003\u0002\u0002\u0002\u00d8\u06e0\u0003",
    "\u0002\u0002\u0002\u00da\u06e4\u0003\u0002\u0002\u0002\u00dc\u06e6\u0003",
    "\u0002\u0002\u0002\u00de\u06eb\u0003\u0002\u0002\u0002\u00e0\u06f0\u0003",
    "\u0002\u0002\u0002\u00e2\u06f2\u0003\u0002\u0002\u0002\u00e4\u0700\u0003",
    "\u0002\u0002\u0002\u00e6\u070e\u0003\u0002\u0002\u0002\u00e8\u0720\u0003",
    "\u0002\u0002\u0002\u00ea\u072c\u0003\u0002\u0002\u0002\u00ec\u0738\u0003",
    "\u0002\u0002\u0002\u00ee\u073a\u0003\u0002\u0002\u0002\u00f0\u073e\u0003",
    "\u0002\u0002\u0002\u00f2\u0749\u0003\u0002\u0002\u0002\u00f4\u0754\u0003",
    "\u0002\u0002\u0002\u00f6\u0766\u0003\u0002\u0002\u0002\u00f8\u076e\u0003",
    "\u0002\u0002\u0002\u00fa\u077a\u0003\u0002\u0002\u0002\u00fc\u077c\u0003",
    "\u0002\u0002\u0002\u00fe\u077e\u0003\u0002\u0002\u0002\u0100\u0791\u0003",
    "\u0002\u0002\u0002\u0102\u0793\u0003\u0002\u0002\u0002\u0104\u079a\u0003",
    "\u0002\u0002\u0002\u0106\u07a1\u0003\u0002\u0002\u0002\u0108\u07aa\u0003",
    "\u0002\u0002\u0002\u010a\u07b3\u0003\u0002\u0002\u0002\u010c\u07bc\u0003",
    "\u0002\u0002\u0002\u010e\u07d3\u0003\u0002\u0002\u0002\u0110\u07e4\u0003",
    "\u0002\u0002\u0002\u0112\u07e6\u0003\u0002\u0002\u0002\u0114\u07ee\u0003",
    "\u0002\u0002\u0002\u0116\u07f0\u0003\u0002\u0002\u0002\u0118\u07f6\u0003",
    "\u0002\u0002\u0002\u011a\u07fe\u0003\u0002\u0002\u0002\u011c\u0801\u0003",
    "\u0002\u0002\u0002\u011e\u080a\u0003\u0002\u0002\u0002\u0120\u0816\u0003",
    "\u0002\u0002\u0002\u0122\u081c\u0003\u0002\u0002\u0002\u0124\u0828\u0003",
    "\u0002\u0002\u0002\u0126\u0830\u0003\u0002\u0002\u0002\u0128\u0836\u0003",
    "\u0002\u0002\u0002\u012a\u0841\u0003\u0002\u0002\u0002\u012c\u0843\u0003",
    "\u0002\u0002\u0002\u012e\u0847\u0003\u0002\u0002\u0002\u0130\u0855\u0003",
    "\u0002\u0002\u0002\u0132\u085f\u0003\u0002\u0002\u0002\u0134\u0861\u0003",
    "\u0002\u0002\u0002\u0136\u086c\u0003\u0002\u0002\u0002\u0138\u0870\u0003",
    "\u0002\u0002\u0002\u013a\u0872\u0003\u0002\u0002\u0002\u013c\u0877\u0003",
    "\u0002\u0002\u0002\u013e\u087c\u0003\u0002\u0002\u0002\u0140\u0884\u0003",
    "\u0002\u0002\u0002\u0142\u0895\u0003\u0002\u0002\u0002\u0144\u0897\u0003",
    "\u0002\u0002\u0002\u0146\u0899\u0003\u0002\u0002\u0002\u0148\u089c\u0003",
    "\u0002\u0002\u0002\u014a\u089f\u0003\u0002\u0002\u0002\u014c\u08a2\u0003",
    "\u0002\u0002\u0002\u014e\u08a5\u0003\u0002\u0002\u0002\u0150\u08a8\u0003",
    "\u0002\u0002\u0002\u0152\u08aa\u0003\u0002\u0002\u0002\u0154\u08ac\u0003",
    "\u0002\u0002\u0002\u0156\u08ae\u0003\u0002\u0002\u0002\u0158\u08b0\u0003",
    "\u0002\u0002\u0002\u015a\u08b2\u0003\u0002\u0002\u0002\u015c\u08b4\u0003",
    "\u0002\u0002\u0002\u015e\u08bd\u0003\u0002\u0002\u0002\u0160\u08bf\u0003",
    "\u0002\u0002\u0002\u0162\u08d0\u0003\u0002\u0002\u0002\u0164\u08d2\u0003",
    "\u0002\u0002\u0002\u0166\u08d4\u0003\u0002\u0002\u0002\u0168\u08dc\u0003",
    "\u0002\u0002\u0002\u016a\u08de\u0003\u0002\u0002\u0002\u016c\u08e5\u0003",
    "\u0002\u0002\u0002\u016e\u08f0\u0003\u0002\u0002\u0002\u0170\u08f4\u0003",
    "\u0002\u0002\u0002\u0172\u08f8\u0003\u0002\u0002\u0002\u0174\u08ff\u0003",
    "\u0002\u0002\u0002\u0176\u0901\u0003\u0002\u0002\u0002\u0178\u0906\u0003",
    "\u0002\u0002\u0002\u017a\u0908\u0003\u0002\u0002\u0002\u017c\u0917\u0003",
    "\u0002\u0002\u0002\u017e\u0919\u0003\u0002\u0002\u0002\u0180\u0921\u0003",
    "\u0002\u0002\u0002\u0182\u0923\u0003\u0002\u0002\u0002\u0184\u0930\u0003",
    "\u0002\u0002\u0002\u0186\u0932\u0003\u0002\u0002\u0002\u0188\u093d\u0003",
    "\u0002\u0002\u0002\u018a\u094d\u0003\u0002\u0002\u0002\u018c\u0954\u0003",
    "\u0002\u0002\u0002\u018e\u0963\u0003\u0002\u0002\u0002\u0190\u0965\u0003",
    "\u0002\u0002\u0002\u0192\u096e\u0003\u0002\u0002\u0002\u0194\u0970\u0003",
    "\u0002\u0002\u0002\u0196\u097f\u0003\u0002\u0002\u0002\u0198\u0981\u0003",
    "\u0002\u0002\u0002\u019a\u0983\u0003\u0002\u0002\u0002\u019c\u0989\u0003",
    "\u0002\u0002\u0002\u019e\u098b\u0003\u0002\u0002\u0002\u01a0\u0992\u0003",
    "\u0002\u0002\u0002\u01a2\u099d\u0003\u0002\u0002\u0002\u01a4\u09a1\u0003",
    "\u0002\u0002\u0002\u01a6\u09a5\u0003\u0002\u0002\u0002\u01a8\u09b0\u0003",
    "\u0002\u0002\u0002\u01aa\u09bf\u0003\u0002\u0002\u0002\u01ac\u09c1\u0003",
    "\u0002\u0002\u0002\u01ae\u09ca\u0003\u0002\u0002\u0002\u01b0\u09cc\u0003",
    "\u0002\u0002\u0002\u01b2\u09db\u0003\u0002\u0002\u0002\u01b4\u09dd\u0003",
    "\u0002\u0002\u0002\u01b6\u09df\u0003\u0002\u0002\u0002\u01b8\u09e5\u0003",
    "\u0002\u0002\u0002\u01ba\u09e7\u0003\u0002\u0002\u0002\u01bc\u09ee\u0003",
    "\u0002\u0002\u0002\u01be\u09f9\u0003\u0002\u0002\u0002\u01c0\u09fd\u0003",
    "\u0002\u0002\u0002\u01c2\u0a04\u0003\u0002\u0002\u0002\u01c4\u0a13\u0003",
    "\u0002\u0002\u0002\u01c6\u0a15\u0003\u0002\u0002\u0002\u01c8\u0a19\u0003",
    "\u0002\u0002\u0002\u01ca\u0a22\u0003\u0002\u0002\u0002\u01cc\u0a24\u0003",
    "\u0002\u0002\u0002\u01ce\u0a2d\u0003\u0002\u0002\u0002\u01d0\u0a2f\u0003",
    "\u0002\u0002\u0002\u01d2\u0a33\u0003\u0002\u0002\u0002\u01d4\u0a3f\u0003",
    "\u0002\u0002\u0002\u01d6\u0a4a\u0003\u0002\u0002\u0002\u01d8\u0a4f\u0003",
    "\u0002\u0002\u0002\u01da\u0a57\u0003\u0002\u0002\u0002\u01dc\u0a5e\u0003",
    "\u0002\u0002\u0002\u01de\u0a6a\u0003\u0002\u0002\u0002\u01e0\u0a6d\u0003",
    "\u0002\u0002\u0002\u01e2\u0a78\u0003\u0002\u0002\u0002\u01e4\u0a7b\u0003",
    "\u0002\u0002\u0002\u01e6\u0a7f\u0003\u0002\u0002\u0002\u01e8\u0a87\u0003",
    "\u0002\u0002\u0002\u01ea\u0a90\u0003\u0002\u0002\u0002\u01ec\u0aa2\u0003",
    "\u0002\u0002\u0002\u01ee\u0aa5\u0003\u0002\u0002\u0002\u01f0\u01f1\u0007",
    "b\u0002\u0002\u01f1\u01f2\u0007T\u0002\u0002\u01f2\u01f7\u0005\u00d0",
    "i\u0002\u01f3\u01f4\u0007\u0012\u0002\u0002\u01f4\u01f5\u0005\u00f8",
    "}\u0002\u01f5\u01f6\u0007\u0013\u0002\u0002\u01f6\u01f8\u0003\u0002",
    "\u0002\u0002\u01f7\u01f3\u0003\u0002\u0002\u0002\u01f7\u01f8\u0003\u0002",
    "\u0002\u0002\u01f8\u01fb\u0003\u0002\u0002\u0002\u01f9\u01fa\u0007f",
    "\u0002\u0002\u01fa\u01fc\u0005\u00d0i\u0002\u01fb\u01f9\u0003\u0002",
    "\u0002\u0002\u01fb\u01fc\u0003\u0002\u0002\u0002\u01fc\u01fd\u0003\u0002",
    "\u0002\u0002\u01fd\u01fe\u0007\u0016\u0002\u0002\u01fe\u01ff\u0005\u00a2",
    "R\u0002\u01ff\u0200\u0007\u0017\u0002\u0002\u0200\u0003\u0003\u0002",
    "\u0002\u0002\u0201\u0202\u0007b\u0002\u0002\u0202\u0203\u0005\u00d0",
    "i\u0002\u0203\u0204\u0007\u0012\u0002\u0002\u0204\u0205\u0005\u00b4",
    "[\u0002\u0205\u0206\u0007\u0013\u0002\u0002\u0206\u0207\u0007\u0016",
    "\u0002\u0002\u0207\u0208\u0005\u00a0Q\u0002\u0208\u0209\u0007\u0017",
    "\u0002\u0002\u0209\u0005\u0003\u0002\u0002\u0002\u020a\u020b\u0005\u00d2",
    "j\u0002\u020b\u020c\u0007\u0012\u0002\u0002\u020c\u020d\u0005\u0082",
    "B\u0002\u020d\u020e\u0007\u0013\u0002\u0002\u020e\u020f\u0007\u000e",
    "\u0002\u0002\u020f\u0007\u0003\u0002\u0002\u0002\u0210\u0211\u0005\u00d2",
    "j\u0002\u0211\u0212\u0007*\u0002\u0002\u0212\u0213\u0005`1\u0002\u0213",
    "\u0214\u0007\u000e\u0002\u0002\u0214\t\u0003\u0002\u0002\u0002\u0215",
    "\u0217\u0007\u0091\u0002\u0002\u0216\u0215\u0003\u0002\u0002\u0002\u0216",
    "\u0217\u0003\u0002\u0002\u0002\u0217\u0218\u0003\u0002\u0002\u0002\u0218",
    "\u0219\u0007M\u0002\u0002\u0219\u021a\u0005\u00ceh\u0002\u021a\u021b",
    "\u0007\r\u0002\u0002\u021b\u021d\u0005\u00b0Y\u0002\u021c\u021e\u0005",
    "\u00a6T\u0002\u021d\u021c\u0003\u0002\u0002\u0002\u021d\u021e\u0003",
    "\u0002\u0002\u0002\u021e\u0227\u0003\u0002\u0002\u0002\u021f\u0220\u0007",
    "\u009c\u0002\u0002\u0220\u0225\u0007q\u0002\u0002\u0221\u0222\u0007",
    "\u0012\u0002\u0002\u0222\u0223\u0005\u00f6|\u0002\u0223\u0224\u0007",
    "\u0013\u0002\u0002\u0224\u0226\u0003\u0002\u0002\u0002\u0225\u0221\u0003",
    "\u0002\u0002\u0002\u0225\u0226\u0003\u0002\u0002\u0002\u0226\u0228\u0003",
    "\u0002\u0002\u0002\u0227\u021f\u0003\u0002\u0002\u0002\u0227\u0228\u0003",
    "\u0002\u0002\u0002\u0228\u0229\u0003\u0002\u0002\u0002\u0229\u022a\u0007",
    "\u000e\u0002\u0002\u022a\u000b\u0003\u0002\u0002\u0002\u022b\u022c\u0007",
    "\u009b\u0002\u0002\u022c\u022f\u0005\u00d0i\u0002\u022d\u022e\u0007",
    "f\u0002\u0002\u022e\u0230\u0005\u00d0i\u0002\u022f\u022d\u0003\u0002",
    "\u0002\u0002\u022f\u0230\u0003\u0002\u0002\u0002\u0230\u0231\u0003\u0002",
    "\u0002\u0002\u0231\u0232\u0005\u0016\f\u0002\u0232\r\u0003\u0002\u0002",
    "\u0002\u0233\u0234\u0007y\u0002\u0002\u0234\u0235\u0007\u009b\u0002",
    "\u0002\u0235\u0236\u0005\u00d0i\u0002\u0236\u0237\u0007\u0016\u0002",
    "\u0002\u0237\u0238\u0005&\u0014\u0002\u0238\u0239\u0005\u00e8u\u0002",
    "\u0239\u023a\u0007\u0017\u0002\u0002\u023a\u000f\u0003\u0002\u0002\u0002",
    "\u023b\u023d\u0007\u0091\u0002\u0002\u023c\u023b\u0003\u0002\u0002\u0002",
    "\u023c\u023d\u0003\u0002\u0002\u0002\u023d\u023e\u0003\u0002\u0002\u0002",
    "\u023e\u023f\u0007T\u0002\u0002\u023f\u0244\u0005\u00d0i\u0002\u0240",
    "\u0241\u0007\u0012\u0002\u0002\u0241\u0242\u0005\u00f8}\u0002\u0242",
    "\u0243\u0007\u0013\u0002\u0002\u0243\u0245\u0003\u0002\u0002\u0002\u0244",
    "\u0240\u0003\u0002\u0002\u0002\u0244\u0245\u0003\u0002\u0002\u0002\u0245",
    "\u0248\u0003\u0002\u0002\u0002\u0246\u0247\u0007f\u0002\u0002\u0247",
    "\u0249\u0005\u0014\u000b\u0002\u0248\u0246\u0003\u0002\u0002\u0002\u0248",
    "\u0249\u0003\u0002\u0002\u0002\u0249\u024a\u0003\u0002\u0002\u0002\u024a",
    "\u024b\u0005\u0016\f\u0002\u024b\u0011\u0003\u0002\u0002\u0002\u024c",
    "\u024d\u0007\u008f\u0002\u0002\u024d\u0252\u0005\u00d0i\u0002\u024e",
    "\u024f\u0007\u0012\u0002\u0002\u024f\u0250\u0005\u00f8}\u0002\u0250",
    "\u0251\u0007\u0013\u0002\u0002\u0251\u0253\u0003\u0002\u0002\u0002\u0252",
    "\u024e\u0003\u0002\u0002\u0002\u0252\u0253\u0003\u0002\u0002\u0002\u0253",
    "\u0254\u0003\u0002\u0002\u0002\u0254\u0255\u0005\u0016\f\u0002\u0255",
    "\u0013\u0003\u0002\u0002\u0002\u0256\u0257\b\u000b\u0001\u0002\u0257",
    "\u0258\u0005\u00d0i\u0002\u0258\u025e\u0003\u0002\u0002\u0002\u0259",
    "\u025a\f\u0003\u0002\u0002\u025a\u025b\u0007\u000f\u0002\u0002\u025b",
    "\u025d\u0005\u00d0i\u0002\u025c\u0259\u0003\u0002\u0002\u0002\u025d",
    "\u0260\u0003\u0002\u0002\u0002\u025e\u025c\u0003\u0002\u0002\u0002\u025e",
    "\u025f\u0003\u0002\u0002\u0002\u025f\u0015\u0003\u0002\u0002\u0002\u0260",
    "\u025e\u0003\u0002\u0002\u0002\u0261\u0268\u0007\u000e\u0002\u0002\u0262",
    "\u0264\u0007\u0016\u0002\u0002\u0263\u0265\u0005\u00e4s\u0002\u0264",
    "\u0263\u0003\u0002\u0002\u0002\u0264\u0265\u0003\u0002\u0002\u0002\u0265",
    "\u0266\u0003\u0002\u0002\u0002\u0266\u0268\u0007\u0017\u0002\u0002\u0267",
    "\u0261\u0003\u0002\u0002\u0002\u0267\u0262\u0003\u0002\u0002\u0002\u0268",
    "\u0017\u0003\u0002\u0002\u0002\u0269\u026b\u0005\u00b0Y\u0002\u026a",
    "\u0269\u0003\u0002\u0002\u0002\u026a\u026b\u0003\u0002\u0002\u0002\u026b",
    "\u026c\u0003\u0002\u0002\u0002\u026c\u026d\u0007\u0081\u0002\u0002\u026d",
    "\u026e\u0005\u0142\u00a2\u0002\u026e\u026f\u0007\u0012\u0002\u0002\u026f",
    "\u0270\u0005\u00dan\u0002\u0270\u0271\u0007\u0013\u0002\u0002\u0271",
    "\u0273\u0007\u0016\u0002\u0002\u0272\u0274\u0005\u0106\u0084\u0002\u0273",
    "\u0272\u0003\u0002\u0002\u0002\u0273\u0274\u0003\u0002\u0002\u0002\u0274",
    "\u0275\u0003\u0002\u0002\u0002\u0275\u0276\u0007\u0017\u0002\u0002\u0276",
    "\u0019\u0003\u0002\u0002\u0002\u0277\u0278\u0007\u008e\u0002\u0002\u0278",
    "\u0279\u0005\u00ccg\u0002\u0279\u027b\u0007\u0016\u0002\u0002\u027a",
    "\u027c\u0005\u0106\u0084\u0002\u027b\u027a\u0003\u0002\u0002\u0002\u027b",
    "\u027c\u0003\u0002\u0002\u0002\u027c\u027d\u0003\u0002\u0002\u0002\u027d",
    "\u027e\u0007\u0017\u0002\u0002\u027e\u001b\u0003\u0002\u0002\u0002\u027f",
    "\u0281\u0007y\u0002\u0002\u0280\u027f\u0003\u0002\u0002\u0002\u0280",
    "\u0281\u0003\u0002\u0002\u0002\u0281\u0282\u0003\u0002\u0002\u0002\u0282",
    "\u0283\u0007\u008e\u0002\u0002\u0283\u0284\u0005\u00ccg\u0002\u0284",
    "\u0286\u0007\u0016\u0002\u0002\u0285\u0287\u0005\u00fe\u0080\u0002\u0286",
    "\u0285\u0003\u0002\u0002\u0002\u0286\u0287\u0003\u0002\u0002\u0002\u0287",
    "\u0288\u0003\u0002\u0002\u0002\u0288\u0289\u0007\u0017\u0002\u0002\u0289",
    "\u001d\u0003\u0002\u0002\u0002\u028a\u028b\u0007m\u0002\u0002\u028b",
    "\u028c\u0005\u00ccg\u0002\u028c\u028e\u0007\u0016\u0002\u0002\u028d",
    "\u028f\u0005\u0106\u0084\u0002\u028e\u028d\u0003\u0002\u0002\u0002\u028e",
    "\u028f\u0003\u0002\u0002\u0002\u028f\u0290\u0003\u0002\u0002\u0002\u0290",
    "\u0291\u0007\u0017\u0002\u0002\u0291\u001f\u0003\u0002\u0002\u0002\u0292",
    "\u0294\u0007y\u0002\u0002\u0293\u0292\u0003\u0002\u0002\u0002\u0293",
    "\u0294\u0003\u0002\u0002\u0002\u0294\u0295\u0003\u0002\u0002\u0002\u0295",
    "\u0296\u0007m\u0002\u0002\u0296\u0297\u0005\u00ccg\u0002\u0297\u0299",
    "\u0007\u0016\u0002\u0002\u0298\u029a\u0005\u00fe\u0080\u0002\u0299\u0298",
    "\u0003\u0002\u0002\u0002\u0299\u029a\u0003\u0002\u0002\u0002\u029a\u029b",
    "\u0003\u0002\u0002\u0002\u029b\u029c\u0007\u0017\u0002\u0002\u029c!",
    "\u0003\u0002\u0002\u0002\u029d\u029f\u0007\u0091\u0002\u0002\u029e\u029d",
    "\u0003\u0002\u0002\u0002\u029e\u029f\u0003\u0002\u0002\u0002\u029f\u02a0",
    "\u0003\u0002\u0002\u0002\u02a0\u02a1\u0007y\u0002\u0002\u02a1\u02a2",
    "\u0007\u0089\u0002\u0002\u02a2\u02a7\u0005\u00d0i\u0002\u02a3\u02a4",
    "\u0007\u0012\u0002\u0002\u02a4\u02a5\u0005\u00f8}\u0002\u02a5\u02a6",
    "\u0007\u0013\u0002\u0002\u02a6\u02a8\u0003\u0002\u0002\u0002\u02a7\u02a3",
    "\u0003\u0002\u0002\u0002\u02a7\u02a8\u0003\u0002\u0002\u0002\u02a8\u02a9",
    "\u0003\u0002\u0002\u0002\u02a9\u02aa\u0007\u0016\u0002\u0002\u02aa\u02ac",
    "\u0005&\u0014\u0002\u02ab\u02ad\u0005\u00e8u\u0002\u02ac\u02ab\u0003",
    "\u0002\u0002\u0002\u02ac\u02ad\u0003\u0002\u0002\u0002\u02ad\u02ae\u0003",
    "\u0002\u0002\u0002\u02ae\u02af\u0007\u0017\u0002\u0002\u02af#\u0003",
    "\u0002\u0002\u0002\u02b0\u02b2\u0007\u0091\u0002\u0002\u02b1\u02b0\u0003",
    "\u0002\u0002\u0002\u02b1\u02b2\u0003\u0002\u0002\u0002\u02b2\u02b3\u0003",
    "\u0002\u0002\u0002\u02b3\u02b4\u0007y\u0002\u0002\u02b4\u02b5\u0007",
    "T\u0002\u0002\u02b5\u02ba\u0005\u00d0i\u0002\u02b6\u02b7\u0007\u0012",
    "\u0002\u0002\u02b7\u02b8\u0005\u00f8}\u0002\u02b8\u02b9\u0007\u0013",
    "\u0002\u0002\u02b9\u02bb\u0003\u0002\u0002\u0002\u02ba\u02b6\u0003\u0002",
    "\u0002\u0002\u02ba\u02bb\u0003\u0002\u0002\u0002\u02bb\u02bc\u0003\u0002",
    "\u0002\u0002\u02bc\u02bd\u0007\u0016\u0002\u0002\u02bd\u02bf\u0005&",
    "\u0014\u0002\u02be\u02c0\u0005\u00e8u\u0002\u02bf\u02be\u0003\u0002",
    "\u0002\u0002\u02bf\u02c0\u0003\u0002\u0002\u0002\u02c0\u02c1\u0003\u0002",
    "\u0002\u0002\u02c1\u02c2\u0007\u0017\u0002\u0002\u02c2%\u0003\u0002",
    "\u0002\u0002\u02c3\u02c4\u0007T\u0002\u0002\u02c4\u02c5\u0007O\u0002",
    "\u0002\u02c5\u02c6\u0007\u0016\u0002\u0002\u02c6\u02c7\u0005(\u0015",
    "\u0002\u02c7\u02c8\u0007\u0017\u0002\u0002\u02c8\'\u0003\u0002\u0002",
    "\u0002\u02c9\u02ca\b\u0015\u0001\u0002\u02ca\u02cb\u0005\u00ecw\u0002",
    "\u02cb\u02cc\u0007\u000e\u0002\u0002\u02cc\u02d3\u0003\u0002\u0002\u0002",
    "\u02cd\u02ce\f\u0003\u0002\u0002\u02ce\u02cf\u0005\u00ecw\u0002\u02cf",
    "\u02d0\u0007\u000e\u0002\u0002\u02d0\u02d2\u0003\u0002\u0002\u0002\u02d1",
    "\u02cd\u0003\u0002\u0002\u0002\u02d2\u02d5\u0003\u0002\u0002\u0002\u02d3",
    "\u02d1\u0003\u0002\u0002\u0002\u02d3\u02d4\u0003\u0002\u0002\u0002\u02d4",
    ")\u0003\u0002\u0002\u0002\u02d5\u02d3\u0003\u0002\u0002\u0002\u02d6",
    "\u02d8\u0007E\u0002\u0002\u02d7\u02d9\u0005\u00b0Y\u0002\u02d8\u02d7",
    "\u0003\u0002\u0002\u0002\u02d8\u02d9\u0003\u0002\u0002\u0002\u02d9\u02da",
    "\u0003\u0002\u0002\u0002\u02da\u02db\u0007u\u0002\u0002\u02db\u02dc",
    "\u0005\u00c2b\u0002\u02dc\u02de\u0007\u0012\u0002\u0002\u02dd\u02df",
    "\u0005\u00d6l\u0002\u02de\u02dd\u0003\u0002\u0002\u0002\u02de\u02df",
    "\u0003\u0002\u0002\u0002\u02df\u02e0\u0003\u0002\u0002\u0002\u02e0\u02e1",
    "\u0007\u0013\u0002\u0002\u02e1\u02e2\u0007\u000e\u0002\u0002\u02e2+",
    "\u0003\u0002\u0002\u0002\u02e3\u02e5\u0005\u00b0Y\u0002\u02e4\u02e3",
    "\u0003\u0002\u0002\u0002\u02e4\u02e5\u0003\u0002\u0002\u0002\u02e5\u02e6",
    "\u0003\u0002\u0002\u0002\u02e6\u02e7\u0007u\u0002\u0002\u02e7\u02e8",
    "\u0005\u00c2b\u0002\u02e8\u02ea\u0007\u0012\u0002\u0002\u02e9\u02eb",
    "\u0005\u00d6l\u0002\u02ea\u02e9\u0003\u0002\u0002\u0002\u02ea\u02eb",
    "\u0003\u0002\u0002\u0002\u02eb\u02ec\u0003\u0002\u0002\u0002\u02ec\u02ed",
    "\u0007\u0013\u0002\u0002\u02ed\u02ef\u0007\u0016\u0002\u0002\u02ee\u02f0",
    "\u0005\u0106\u0084\u0002\u02ef\u02ee\u0003\u0002\u0002\u0002\u02ef\u02f0",
    "\u0003\u0002\u0002\u0002\u02f0\u02f1\u0003\u0002\u0002\u0002\u02f1\u02f2",
    "\u0007\u0017\u0002\u0002\u02f2-\u0003\u0002\u0002\u0002\u02f3\u02f5",
    "\u0005\u00e0q\u0002\u02f4\u02f3\u0003\u0002\u0002\u0002\u02f4\u02f5",
    "\u0003\u0002\u0002\u0002\u02f5\u02f7\u0003\u0002\u0002\u0002\u02f6\u02f8",
    "\u0007y\u0002\u0002\u02f7\u02f6\u0003\u0002\u0002\u0002\u02f7\u02f8",
    "\u0003\u0002\u0002\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9\u02fa",
    "\u0007u\u0002\u0002\u02fa\u02fb\u0005\u00c2b\u0002\u02fb\u02fd\u0007",
    "\u0012\u0002\u0002\u02fc\u02fe\u0005\u00d6l\u0002\u02fd\u02fc\u0003",
    "\u0002\u0002\u0002\u02fd\u02fe\u0003\u0002\u0002\u0002\u02fe\u02ff\u0003",
    "\u0002\u0002\u0002\u02ff\u0300\u0007\u0013\u0002\u0002\u0300\u0301\u0007",
    "\u0016\u0002\u0002\u0301\u0302\u0005\u00fe\u0080\u0002\u0302\u0303\u0007",
    "\u0017\u0002\u0002\u0303/\u0003\u0002\u0002\u0002\u0304\u0305\u0007",
    "\u0094\u0002\u0002\u0305\u0306\u0007u\u0002\u0002\u0306\u0307\u0007",
    "\u00ab\u0002\u0002\u0307\u0308\u0007\u0012\u0002\u0002\u0308\u0309\u0007",
    "\u0013\u0002\u0002\u0309\u030a\u0007\u0016\u0002\u0002\u030a\u030b\u0005",
    "\u0106\u0084\u0002\u030b\u030c\u0007\u0017\u0002\u0002\u030c\u0314\u0007",
    "\u009a\u0002\u0002\u030d\u030e\u0007\u0016\u0002\u0002\u030e\u030f\u0005",
    "\u0108\u0085\u0002\u030f\u0310\u0007\u0017\u0002\u0002\u0310\u0315\u0003",
    "\u0002\u0002\u0002\u0311\u0312\u0005\u00d2j\u0002\u0312\u0313\u0007",
    "\u000e\u0002\u0002\u0313\u0315\u0003\u0002\u0002\u0002\u0314\u030d\u0003",
    "\u0002\u0002\u0002\u0314\u0311\u0003\u0002\u0002\u0002\u03151\u0003",
    "\u0002\u0002\u0002\u0316\u0317\u0005`1\u0002\u0317\u0318\u0007\u000e",
    "\u0002\u0002\u03183\u0003\u0002\u0002\u0002\u0319\u031e\u0005\u00e0",
    "q\u0002\u031a\u031b\u0007\u0012\u0002\u0002\u031b\u031c\u0005\u00f8",
    "}\u0002\u031c\u031d\u0007\u0013\u0002\u0002\u031d\u031f\u0003\u0002",
    "\u0002\u0002\u031e\u031a\u0003\u0002\u0002\u0002\u031e\u031f\u0003\u0002",
    "\u0002\u0002\u031f\u0320\u0003\u0002\u0002\u0002\u0320\u0323\u0005\u00cc",
    "g\u0002\u0321\u0322\u0007*\u0002\u0002\u0322\u0324\u0005\u0118\u008d",
    "\u0002\u0323\u0321\u0003\u0002\u0002\u0002\u0323\u0324\u0003\u0002\u0002",
    "\u0002\u03245\u0003\u0002\u0002\u0002\u0325\u032d\u00058\u001d\u0002",
    "\u0326\u032a\u0007\u0016\u0002\u0002\u0327\u0328\u0005\u0106\u0084\u0002",
    "\u0328\u0329\u0007\u0017\u0002\u0002\u0329\u032b\u0003\u0002\u0002\u0002",
    "\u032a\u0327\u0003\u0002\u0002\u0002\u032a\u032b\u0003\u0002\u0002\u0002",
    "\u032b\u032d\u0003\u0002\u0002\u0002\u032c\u0325\u0003\u0002\u0002\u0002",
    "\u032c\u0326\u0003\u0002\u0002\u0002\u032d7\u0003\u0002\u0002\u0002",
    "\u032e\u0343\u0005\\/\u0002\u032f\u0343\u0005\u0086D\u0002\u0330\u0343",
    "\u0005\u008aF\u0002\u0331\u0343\u0005<\u001f\u0002\u0332\u0343\u0005",
    "x=\u0002\u0333\u0343\u0005:\u001e\u0002\u0334\u0343\u0005V,\u0002\u0335",
    "\u0343\u0005X-\u0002\u0336\u0343\u0005L\'\u0002\u0337\u0343\u0005B\"",
    "\u0002\u0338\u0343\u0005F$\u0002\u0339\u0343\u0005J&\u0002\u033a\u0343",
    "\u0005H%\u0002\u033b\u0343\u0005R*\u0002\u033c\u0343\u0005P)\u0002\u033d",
    "\u0343\u0005r:\u0002\u033e\u0343\u0005> \u0002\u033f\u0343\u0005@!\u0002",
    "\u0340\u0343\u0005,\u0017\u0002\u0341\u0343\u0005\u00fc\u007f\u0002",
    "\u0342\u032e\u0003\u0002\u0002\u0002\u0342\u032f\u0003\u0002\u0002\u0002",
    "\u0342\u0330\u0003\u0002\u0002\u0002\u0342\u0331\u0003\u0002\u0002\u0002",
    "\u0342\u0332\u0003\u0002\u0002\u0002\u0342\u0333\u0003\u0002\u0002\u0002",
    "\u0342\u0334\u0003\u0002\u0002\u0002\u0342\u0335\u0003\u0002\u0002\u0002",
    "\u0342\u0336\u0003\u0002\u0002\u0002\u0342\u0337\u0003\u0002\u0002\u0002",
    "\u0342\u0338\u0003\u0002\u0002\u0002\u0342\u0339\u0003\u0002\u0002\u0002",
    "\u0342\u033a\u0003\u0002\u0002\u0002\u0342\u033b\u0003\u0002\u0002\u0002",
    "\u0342\u033c\u0003\u0002\u0002\u0002\u0342\u033d\u0003\u0002\u0002\u0002",
    "\u0342\u033e\u0003\u0002\u0002\u0002\u0342\u033f\u0003\u0002\u0002\u0002",
    "\u0342\u0340\u0003\u0002\u0002\u0002\u0342\u0341\u0003\u0002\u0002\u0002",
    "\u03439\u0003\u0002\u0002\u0002\u0344\u0345\u0007j\u0002\u0002\u0345",
    "\u0346\u0007\u0012\u0002\u0002\u0346\u0347\u0007\u0013\u0002\u0002\u0347",
    "\u0348\u0007\u000e\u0002\u0002\u0348;\u0003\u0002\u0002\u0002\u0349",
    "\u034a\u0007[\u0002\u0002\u034a\u034b\u0007\u0012\u0002\u0002\u034b",
    "\u034c\u0005\u00acW\u0002\u034c\u0353\u0007\u0013\u0002\u0002\u034d",
    "\u034e\u0007H\u0002\u0002\u034e\u034f\u0007\u0092\u0002\u0002\u034f",
    "\u0350\u0007\u0012\u0002\u0002\u0350\u0351\u0005\u00acW\u0002\u0351",
    "\u0352\u0007\u0013\u0002\u0002\u0352\u0354\u0003\u0002\u0002\u0002\u0353",
    "\u034d\u0003\u0002\u0002\u0002\u0353\u0354\u0003\u0002\u0002\u0002\u0354",
    "\u035b\u0003\u0002\u0002\u0002\u0355\u0356\u0007\u0092\u0002\u0002\u0356",
    "\u0357\u0007\u0012\u0002\u0002\u0357\u0358\u0005\u00acW\u0002\u0358",
    "\u0359\u0007\u0013\u0002\u0002\u0359\u035b\u0003\u0002\u0002\u0002\u035a",
    "\u0349\u0003\u0002\u0002\u0002\u035a\u0355\u0003\u0002\u0002\u0002\u035b",
    "\u0362\u0003\u0002\u0002\u0002\u035c\u035d\u0007\u0095\u0002\u0002\u035d",
    "\u035e\u0007\u0016\u0002\u0002\u035e\u035f\u0005\u0106\u0084\u0002\u035f",
    "\u0360\u0007\u0017\u0002\u0002\u0360\u0363\u0003\u0002\u0002\u0002\u0361",
    "\u0363\u0007\u000e\u0002\u0002\u0362\u035c\u0003\u0002\u0002\u0002\u0362",
    "\u0361\u0003\u0002\u0002\u0002\u0363=\u0003\u0002\u0002\u0002\u0364",
    "\u0365\u0007\u009c\u0002\u0002\u0365\u0366\u0007\u0012\u0002\u0002\u0366",
    "\u0367\u0005\u012c\u0097\u0002\u0367\u0368\u0007\u0013\u0002\u0002\u0368",
    "\u0369\u00056\u001c\u0002\u0369?\u0003\u0002\u0002\u0002\u036a\u036b",
    "\u0007\u009c\u0002\u0002\u036b\u036c\u0007\u0012\u0002\u0002\u036c\u036d",
    "\u0005\u00d0i\u0002\u036d\u036e\u0007\u0013\u0002\u0002\u036e\u036f",
    "\u00056\u001c\u0002\u036fA\u0003\u0002\u0002\u0002\u0370\u0371\u0007",
    "\u0093\u0002\u0002\u0371\u0372\u0007\u0012\u0002\u0002\u0372\u0373\u0005",
    "`1\u0002\u0373\u0374\u0007\u0013\u0002\u0002\u0374\u0375\u0007\u0016",
    "\u0002\u0002\u0375\u037b\u0005\u010a\u0086\u0002\u0376\u0377\u0007Y",
    "\u0002\u0002\u0377\u0379\u0007\r\u0002\u0002\u0378\u037a\u0005\u0106",
    "\u0084\u0002\u0379\u0378\u0003\u0002\u0002\u0002\u0379\u037a\u0003\u0002",
    "\u0002\u0002\u037a\u037c\u0003\u0002\u0002\u0002\u037b\u0376\u0003\u0002",
    "\u0002\u0002\u037b\u037c\u0003\u0002\u0002\u0002\u037c\u037d\u0003\u0002",
    "\u0002\u0002\u037d\u037e\u0007\u0017\u0002\u0002\u037eC\u0003\u0002",
    "\u0002\u0002\u037f\u0380\u0007R\u0002\u0002\u0380\u0381\u0005\u0110",
    "\u0089\u0002\u0381\u0383\u0007\r\u0002\u0002\u0382\u0384\u0005\u0106",
    "\u0084\u0002\u0383\u0382\u0003\u0002\u0002\u0002\u0383\u0384\u0003\u0002",
    "\u0002\u0002\u0384\u038d\u0003\u0002\u0002\u0002\u0385\u0386\u0007R",
    "\u0002\u0002\u0386\u0387\u0007p\u0002\u0002\u0387\u0388\u0005\u010e",
    "\u0088\u0002\u0388\u038a\u0007\r\u0002\u0002\u0389\u038b\u0005\u0106",
    "\u0084\u0002\u038a\u0389\u0003\u0002\u0002\u0002\u038a\u038b\u0003\u0002",
    "\u0002\u0002\u038b\u038d\u0003\u0002\u0002\u0002\u038c\u037f\u0003\u0002",
    "\u0002\u0002\u038c\u0385\u0003\u0002\u0002\u0002\u038dE\u0003\u0002",
    "\u0002\u0002\u038e\u038f\u0007k\u0002\u0002\u038f\u0390\u0007_\u0002",
    "\u0002\u0390\u0391\u0007\u0012\u0002\u0002\u0391\u0394\u0005\u00ccg",
    "\u0002\u0392\u0393\u0007\u000f\u0002\u0002\u0393\u0395\u0005\u00ccg",
    "\u0002\u0394\u0392\u0003\u0002\u0002\u0002\u0394\u0395\u0003\u0002\u0002",
    "\u0002\u0395\u0396\u0003\u0002\u0002\u0002\u0396\u0397\u0007p\u0002",
    "\u0002\u0397\u0398\u0005`1\u0002\u0398\u0399\u0007\u0013\u0002\u0002",
    "\u0399\u039a\u00056\u001c\u0002\u039aG\u0003\u0002\u0002\u0002\u039b",
    "\u039c\u0007]\u0002\u0002\u039c\u039e\u0007\u0016\u0002\u0002\u039d",
    "\u039f\u0005\u0106\u0084\u0002\u039e\u039d\u0003\u0002\u0002\u0002\u039e",
    "\u039f\u0003\u0002\u0002\u0002\u039f\u03a0\u0003\u0002\u0002\u0002\u03a0",
    "\u03a1\u0007\u0017\u0002\u0002\u03a1\u03a2\u0007\u009f\u0002\u0002\u03a2",
    "\u03a3\u0007\u0012\u0002\u0002\u03a3\u03a4\u0005`1\u0002\u03a4\u03a5",
    "\u0007\u0013\u0002\u0002\u03a5\u03a6\u0007\u000e\u0002\u0002\u03a6I",
    "\u0003\u0002\u0002\u0002\u03a7\u03a8\u0007\u009f\u0002\u0002\u03a8\u03a9",
    "\u0007\u0012\u0002\u0002\u03a9\u03aa\u0005`1\u0002\u03aa\u03ab\u0007",
    "\u0013\u0002\u0002\u03ab\u03ac\u00056\u001c\u0002\u03acK\u0003\u0002",
    "\u0002\u0002\u03ad\u03ae\u0007o\u0002\u0002\u03ae\u03af\u0007\u0012",
    "\u0002\u0002\u03af\u03b0\u0005`1\u0002\u03b0\u03b1\u0007\u0013\u0002",
    "\u0002\u03b1\u03b3\u00056\u001c\u0002\u03b2\u03b4\u0005N(\u0002\u03b3",
    "\u03b2\u0003\u0002\u0002\u0002\u03b3\u03b4\u0003\u0002\u0002\u0002\u03b4",
    "\u03b7\u0003\u0002\u0002\u0002\u03b5\u03b6\u0007`\u0002\u0002\u03b6",
    "\u03b8\u00056\u001c\u0002\u03b7\u03b5\u0003\u0002\u0002\u0002\u03b7",
    "\u03b8\u0003\u0002\u0002\u0002\u03b8M\u0003\u0002\u0002\u0002\u03b9",
    "\u03ba\b(\u0001\u0002\u03ba\u03bb\u0007`\u0002\u0002\u03bb\u03bc\u0007",
    "o\u0002\u0002\u03bc\u03bd\u0007\u0012\u0002\u0002\u03bd\u03be\u0005",
    "`1\u0002\u03be\u03bf\u0007\u0013\u0002\u0002\u03bf\u03c0\u00056\u001c",
    "\u0002\u03c0\u03cb\u0003\u0002\u0002\u0002\u03c1\u03c2\f\u0003\u0002",
    "\u0002\u03c2\u03c3\u0007`\u0002\u0002\u03c3\u03c4\u0007o\u0002\u0002",
    "\u03c4\u03c5\u0007\u0012\u0002\u0002\u03c5\u03c6\u0005`1\u0002\u03c6",
    "\u03c7\u0007\u0013\u0002\u0002\u03c7\u03c8\u00056\u001c\u0002\u03c8",
    "\u03ca\u0003\u0002\u0002\u0002\u03c9\u03c1\u0003\u0002\u0002\u0002\u03ca",
    "\u03cd\u0003\u0002\u0002\u0002\u03cb\u03c9\u0003\u0002\u0002\u0002\u03cb",
    "\u03cc\u0003\u0002\u0002\u0002\u03ccO\u0003\u0002\u0002\u0002\u03cd",
    "\u03cb\u0003\u0002\u0002\u0002\u03ce\u03cf\u0007\u0097\u0002\u0002\u03cf",
    "\u03d0\u0005`1\u0002\u03d0\u03d1\u0007\u000e\u0002\u0002\u03d1Q\u0003",
    "\u0002\u0002\u0002\u03d2\u03d3\u0007\u0099\u0002\u0002\u03d3\u03d4\u0007",
    "\u0012\u0002\u0002\u03d4\u03d5\u0005\u00ccg\u0002\u03d5\u03d6\u0007",
    "\u0013\u0002\u0002\u03d6\u03d8\u0007\u0016\u0002\u0002\u03d7\u03d9\u0005",
    "\u0106\u0084\u0002\u03d8\u03d7\u0003\u0002\u0002\u0002\u03d8\u03d9\u0003",
    "\u0002\u0002\u0002\u03d9\u03da\u0003\u0002\u0002\u0002\u03da\u03dc\u0007",
    "\u0017\u0002\u0002\u03db\u03dd\u0005\u010c\u0087\u0002\u03dc\u03db\u0003",
    "\u0002\u0002\u0002\u03dc\u03dd\u0003\u0002\u0002\u0002\u03dd\u03e7\u0003",
    "\u0002\u0002\u0002\u03de\u03df\u0007S\u0002\u0002\u03df\u03e0\u0007",
    "\u0012\u0002\u0002\u03e0\u03e1\u0007I\u0002\u0002\u03e1\u03e2\u0007",
    "\u0013\u0002\u0002\u03e2\u03e4\u0007\u0016\u0002\u0002\u03e3\u03e5\u0005",
    "\u0106\u0084\u0002\u03e4\u03e3\u0003\u0002\u0002\u0002\u03e4\u03e5\u0003",
    "\u0002\u0002\u0002\u03e5\u03e6\u0003\u0002\u0002\u0002\u03e6\u03e8\u0007",
    "\u0017\u0002\u0002\u03e7\u03de\u0003\u0002\u0002\u0002\u03e7\u03e8\u0003",
    "\u0002\u0002\u0002\u03e8\u03ef\u0003\u0002\u0002\u0002\u03e9\u03ea\u0007",
    "i\u0002\u0002\u03ea\u03ec\u0007\u0016\u0002\u0002\u03eb\u03ed\u0005",
    "\u0106\u0084\u0002\u03ec\u03eb\u0003\u0002\u0002\u0002\u03ec\u03ed\u0003",
    "\u0002\u0002\u0002\u03ed\u03ee\u0003\u0002\u0002\u0002\u03ee\u03f0\u0007",
    "\u0017\u0002\u0002\u03ef\u03e9\u0003\u0002\u0002\u0002\u03ef\u03f0\u0003",
    "\u0002\u0002\u0002\u03f0S\u0003\u0002\u0002\u0002\u03f1\u03f2\u0007",
    "S\u0002\u0002\u03f2\u03f3\u0007\u0012\u0002\u0002\u03f3\u03f4\u0005",
    "\u00d2j\u0002\u03f4\u03f5\u0007\u0013\u0002\u0002\u03f5\u03f7\u0007",
    "\u0016\u0002\u0002\u03f6\u03f8\u0005\u0106\u0084\u0002\u03f7\u03f6\u0003",
    "\u0002\u0002\u0002\u03f7\u03f8\u0003\u0002\u0002\u0002\u03f8\u03f9\u0003",
    "\u0002\u0002\u0002\u03f9\u03fa\u0007\u0017\u0002\u0002\u03fa\u0407\u0003",
    "\u0002\u0002\u0002\u03fb\u03fc\u0007S\u0002\u0002\u03fc\u03fd\u0007",
    "p\u0002\u0002\u03fd\u03fe\u0007\u0012\u0002\u0002\u03fe\u03ff\u0005",
    "\u00a4S\u0002\u03ff\u0400\u0007\u0013\u0002\u0002\u0400\u0402\u0007",
    "\u0016\u0002\u0002\u0401\u0403\u0005\u0106\u0084\u0002\u0402\u0401\u0003",
    "\u0002\u0002\u0002\u0402\u0403\u0003\u0002\u0002\u0002\u0403\u0404\u0003",
    "\u0002\u0002\u0002\u0404\u0405\u0007\u0017\u0002\u0002\u0405\u0407\u0003",
    "\u0002\u0002\u0002\u0406\u03f1\u0003\u0002\u0002\u0002\u0406\u03fb\u0003",
    "\u0002\u0002\u0002\u0407U\u0003\u0002\u0002\u0002\u0408\u0409\u0007",
    "P\u0002\u0002\u0409\u040a\u0007\u000e\u0002\u0002\u040aW\u0003\u0002",
    "\u0002\u0002\u040b\u040d\u0007\u008a\u0002\u0002\u040c\u040e\u0005`",
    "1\u0002\u040d\u040c\u0003\u0002\u0002\u0002\u040d\u040e\u0003\u0002",
    "\u0002\u0002\u040e\u040f\u0003\u0002\u0002\u0002\u040f\u0410\u0007\u000e",
    "\u0002\u0002\u0410Y\u0003\u0002\u0002\u0002\u0411\u0412\u0005\u00c2",
    "b\u0002\u0412\u0414\u0007\u0012\u0002\u0002\u0413\u0415\u0005\u0082",
    "B\u0002\u0414\u0413\u0003\u0002\u0002\u0002\u0414\u0415\u0003\u0002",
    "\u0002\u0002\u0415\u0416\u0003\u0002\u0002\u0002\u0416\u0417\u0007\u0013",
    "\u0002\u0002\u0417[\u0003\u0002\u0002\u0002\u0418\u0419\u0005h5\u0002",
    "\u0419\u041a\u0007\u0011\u0002\u0002\u041a\u041c\u0003\u0002\u0002\u0002",
    "\u041b\u0418\u0003\u0002\u0002\u0002\u041b\u041c\u0003\u0002\u0002\u0002",
    "\u041c\u041d\u0003\u0002\u0002\u0002\u041d\u0428\u0005Z.\u0002\u041e",
    "\u0421\u0007\u0095\u0002\u0002\u041f\u0420\u0007\u009c\u0002\u0002\u0420",
    "\u0422\u0005\u00ccg\u0002\u0421\u041f\u0003\u0002\u0002\u0002\u0421",
    "\u0422\u0003\u0002\u0002\u0002\u0422\u0423\u0003\u0002\u0002\u0002\u0423",
    "\u0424\u0007\u0016\u0002\u0002\u0424\u0425\u0005\u0106\u0084\u0002\u0425",
    "\u0426\u0007\u0017\u0002\u0002\u0426\u0429\u0003\u0002\u0002\u0002\u0427",
    "\u0429\u0007\u000e\u0002\u0002\u0428\u041e\u0003\u0002\u0002\u0002\u0428",
    "\u0427\u0003\u0002\u0002\u0002\u0429]\u0003\u0002\u0002\u0002\u042a",
    "\u042b\u0005\u01e6\u00f4\u0002\u042b_\u0003\u0002\u0002\u0002\u042c",
    "\u042d\b1\u0001\u0002\u042d\u0447\u0005\u01e6\u00f4\u0002\u042e\u0447",
    "\u0005\u01c8\u00e5\u0002\u042f\u0447\u0005h5\u0002\u0430\u0447\u0005",
    "j6\u0002\u0431\u0447\u0005\u0132\u009a\u0002\u0432\u0433\u0007\u001f",
    "\u0002\u0002\u0433\u0447\u0005`1&\u0434\u0435\u0007\u0019\u0002\u0002",
    "\u0435\u0447\u0005`1%\u0436\u0437\u0007\u0012\u0002\u0002\u0437\u0438",
    "\u0005\u00e0q\u0002\u0438\u0439\u0007\u0013\u0002\u0002\u0439\u043a",
    "\u0005`1\u001f\u043a\u0447\u0003\u0002\u0002\u0002\u043b\u043c\u0007",
    "=\u0002\u0002\u043c\u043d\u0007\u0012\u0002\u0002\u043d\u043e\u0005",
    "`1\u0002\u043e\u043f\u0007\u0013\u0002\u0002\u043f\u0447\u0003\u0002",
    "\u0002\u0002\u0440\u0441\u0007d\u0002\u0002\u0441\u0442\u0007\u0012",
    "\u0002\u0002\u0442\u0443\u0005\u00ccg\u0002\u0443\u0444\u0007\u0013",
    "\u0002\u0002\u0444\u0447\u0003\u0002\u0002\u0002\u0445\u0447\u0005d",
    "3\u0002\u0446\u042c\u0003\u0002\u0002\u0002\u0446\u042e\u0003\u0002",
    "\u0002\u0002\u0446\u042f\u0003\u0002\u0002\u0002\u0446\u0430\u0003\u0002",
    "\u0002\u0002\u0446\u0431\u0003\u0002\u0002\u0002\u0446\u0432\u0003\u0002",
    "\u0002\u0002\u0446\u0434\u0003\u0002\u0002\u0002\u0446\u0436\u0003\u0002",
    "\u0002\u0002\u0446\u043b\u0003\u0002\u0002\u0002\u0446\u0440\u0003\u0002",
    "\u0002\u0002\u0446\u0445\u0003\u0002\u0002\u0002\u0447\u04bc\u0003\u0002",
    "\u0002\u0002\u0448\u0449\f$\u0002\u0002\u0449\u044a\u0005\u0152\u00aa",
    "\u0002\u044a\u044b\u0005`1%\u044b\u04bb\u0003\u0002\u0002\u0002\u044c",
    "\u044d\f#\u0002\u0002\u044d\u044e\u0005\u0154\u00ab\u0002\u044e\u044f",
    "\u0005`1$\u044f\u04bb\u0003\u0002\u0002\u0002\u0450\u0451\f\"\u0002",
    "\u0002\u0451\u0452\u0005\u0158\u00ad\u0002\u0452\u0453\u0005`1#\u0453",
    "\u04bb\u0003\u0002\u0002\u0002\u0454\u0455\f!\u0002\u0002\u0455\u0456",
    "\u0005\u0156\u00ac\u0002\u0456\u0457\u0005`1\"\u0457\u04bb\u0003\u0002",
    "\u0002\u0002\u0458\u0459\f \u0002\u0002\u0459\u045a\t\u0002\u0002\u0002",
    "\u045a\u04bb\u0005`1!\u045b\u045c\f\u001e\u0002\u0002\u045c\u045d\u0007",
    "&\u0002\u0002\u045d\u04bb\u0005`1\u001f\u045e\u045f\f\u001d\u0002\u0002",
    "\u045f\u0460\u0007\'\u0002\u0002\u0460\u04bb\u0005`1\u001e\u0461\u0462",
    "\f\u001c\u0002\u0002\u0462\u0463\u0007$\u0002\u0002\u0463\u04bb\u0005",
    "`1\u001d\u0464\u0465\f\u001b\u0002\u0002\u0465\u0466\u0007%\u0002\u0002",
    "\u0466\u04bb\u0005`1\u001c\u0467\u0468\f\u0018\u0002\u0002\u0468\u0469",
    "\u0007s\u0002\u0002\u0469\u046a\u0007{\u0002\u0002\u046a\u04bb\u0005",
    "`1\u0019\u046b\u046c\f\u0017\u0002\u0002\u046c\u046d\u0007s\u0002\u0002",
    "\u046d\u04bb\u0005`1\u0018\u046e\u046f\f\u0016\u0002\u0002\u046f\u0470",
    "\u0007,\u0002\u0002\u0470\u04bb\u0005`1\u0017\u0471\u0472\f\u0015\u0002",
    "\u0002\u0472\u0473\u0007+\u0002\u0002\u0473\u04bb\u0005`1\u0016\u0474",
    "\u0475\f\u0014\u0002\u0002\u0475\u0476\u0007-\u0002\u0002\u0476\u04bb",
    "\u0005`1\u0015\u0477\u0478\f\u0013\u0002\u0002\u0478\u0479\u0007W\u0002",
    "\u0002\u0479\u04bb\u0005`1\u0014\u047a\u047b\f\u0012\u0002\u0002\u047b",
    "\u047c\u0007p\u0002\u0002\u047c\u04bb\u0005`1\u0013\u047d\u047e\f\u0011",
    "\u0002\u0002\u047e\u047f\u0007n\u0002\u0002\u047f\u04bb\u0005`1\u0012",
    "\u0480\u0481\f\u0010\u0002\u0002\u0481\u0482\u0007n\u0002\u0002\u0482",
    "\u0483\u0007F\u0002\u0002\u0483\u04bb\u0005`1\u0011\u0484\u0485\f\u000f",
    "\u0002\u0002\u0485\u0486\u0007n\u0002\u0002\u0486\u0487\u0007I\u0002",
    "\u0002\u0487\u04bb\u0005`1\u0010\u0488\u0489\f\u000e\u0002\u0002\u0489",
    "\u048a\u0007{\u0002\u0002\u048a\u048b\u0007W\u0002\u0002\u048b\u04bb",
    "\u0005`1\u000f\u048c\u048d\f\r\u0002\u0002\u048d\u048e\u0007{\u0002",
    "\u0002\u048e\u048f\u0007p\u0002\u0002\u048f\u04bb\u0005`1\u000e\u0490",
    "\u0491\f\f\u0002\u0002\u0491\u0492\u0007{\u0002\u0002\u0492\u0493\u0007",
    "n\u0002\u0002\u0493\u04bb\u0005`1\r\u0494\u0495\f\u000b\u0002\u0002",
    "\u0495\u0496\u0007{\u0002\u0002\u0496\u0497\u0007n\u0002\u0002\u0497",
    "\u0498\u0007F\u0002\u0002\u0498\u04bb\u0005`1\f\u0499\u049a\f\n\u0002",
    "\u0002\u049a\u049b\u0007{\u0002\u0002\u049b\u049c\u0007n\u0002\u0002",
    "\u049c\u049d\u0007I\u0002\u0002\u049d\u04bb\u0005`1\u000b\u049e\u049f",
    "\f\t\u0002\u0002\u049f\u04a0\u0007\u001d\u0002\u0002\u04a0\u04bb\u0005",
    "`1\n\u04a1\u04a2\f\b\u0002\u0002\u04a2\u04a3\u0007\u001b\u0002\u0002",
    "\u04a3\u04bb\u0005`1\t\u04a4\u04a5\f\u0007\u0002\u0002\u04a5\u04a6\u0007",
    "\u0018\u0002\u0002\u04a6\u04a7\u0005`1\u0002\u04a7\u04a8\u0007\r\u0002",
    "\u0002\u04a8\u04a9\u0005`1\b\u04a9\u04bb\u0003\u0002\u0002\u0002\u04aa",
    "\u04ab\f\u001a\u0002\u0002\u04ab\u04ac\u0007s\u0002\u0002\u04ac\u04ad",
    "\u0007{\u0002\u0002\u04ad\u04bb\u0005b2\u0002\u04ae\u04af\f\u0019\u0002",
    "\u0002\u04af\u04b0\u0007s\u0002\u0002\u04b0\u04bb\u0005b2\u0002\u04b1",
    "\u04b2\f\u0003\u0002\u0002\u04b2\u04b3\u0007k\u0002\u0002\u04b3\u04b4",
    "\u0007_\u0002\u0002\u04b4\u04b5\u0007\u0012\u0002\u0002\u04b5\u04b6",
    "\u0005\u00ccg\u0002\u04b6\u04b7\u0007p\u0002\u0002\u04b7\u04b8\u0005",
    "`1\u0002\u04b8\u04b9\u0007\u0013\u0002\u0002\u04b9\u04bb\u0003\u0002",
    "\u0002\u0002\u04ba\u0448\u0003\u0002\u0002\u0002\u04ba\u044c\u0003\u0002",
    "\u0002\u0002\u04ba\u0450\u0003\u0002\u0002\u0002\u04ba\u0454\u0003\u0002",
    "\u0002\u0002\u04ba\u0458\u0003\u0002\u0002\u0002\u04ba\u045b\u0003\u0002",
    "\u0002\u0002\u04ba\u045e\u0003\u0002\u0002\u0002\u04ba\u0461\u0003\u0002",
    "\u0002\u0002\u04ba\u0464\u0003\u0002\u0002\u0002\u04ba\u0467\u0003\u0002",
    "\u0002\u0002\u04ba\u046b\u0003\u0002\u0002\u0002\u04ba\u046e\u0003\u0002",
    "\u0002\u0002\u04ba\u0471\u0003\u0002\u0002\u0002\u04ba\u0474\u0003\u0002",
    "\u0002\u0002\u04ba\u0477\u0003\u0002\u0002\u0002\u04ba\u047a\u0003\u0002",
    "\u0002\u0002\u04ba\u047d\u0003\u0002\u0002\u0002\u04ba\u0480\u0003\u0002",
    "\u0002\u0002\u04ba\u0484\u0003\u0002\u0002\u0002\u04ba\u0488\u0003\u0002",
    "\u0002\u0002\u04ba\u048c\u0003\u0002\u0002\u0002\u04ba\u0490\u0003\u0002",
    "\u0002\u0002\u04ba\u0494\u0003\u0002\u0002\u0002\u04ba\u0499\u0003\u0002",
    "\u0002\u0002\u04ba\u049e\u0003\u0002\u0002\u0002\u04ba\u04a1\u0003\u0002",
    "\u0002\u0002\u04ba\u04a4\u0003\u0002\u0002\u0002\u04ba\u04aa\u0003\u0002",
    "\u0002\u0002\u04ba\u04ae\u0003\u0002\u0002\u0002\u04ba\u04b1\u0003\u0002",
    "\u0002\u0002\u04bb\u04be\u0003\u0002\u0002\u0002\u04bc\u04ba\u0003\u0002",
    "\u0002\u0002\u04bc\u04bd\u0003\u0002\u0002\u0002\u04bda\u0003\u0002",
    "\u0002\u0002\u04be\u04bc\u0003\u0002\u0002\u0002\u04bf\u04c0\u00062",
    "#\u0003\u04c0\u04c1\u0007\u00a7\u0002\u0002\u04c1\u04c2\u0005\u00e0",
    "q\u0002\u04c2c\u0003\u0002\u0002\u0002\u04c3\u04c4\u0005\u00d0i\u0002",
    "\u04c4e\u0003\u0002\u0002\u0002\u04c5\u04cb\u0005l7\u0002\u04c6\u04cb",
    "\u0005\u0116\u008c\u0002\u04c7\u04cb\u0005\u0118\u008d\u0002\u04c8\u04cb",
    "\u0005\u00caf\u0002\u04c9\u04cb\u0005\u0114\u008b\u0002\u04ca\u04c5",
    "\u0003\u0002\u0002\u0002\u04ca\u04c6\u0003\u0002\u0002\u0002\u04ca\u04c7",
    "\u0003\u0002\u0002\u0002\u04ca\u04c8\u0003\u0002\u0002\u0002\u04ca\u04c9",
    "\u0003\u0002\u0002\u0002\u04cbg\u0003\u0002\u0002\u0002\u04cc\u04cd",
    "\b5\u0001\u0002\u04cd\u04ce\u0005f4\u0002\u04ce\u04d3\u0003\u0002\u0002",
    "\u0002\u04cf\u04d0\f\u0003\u0002\u0002\u04d0\u04d2\u0005|?\u0002\u04d1",
    "\u04cf\u0003\u0002\u0002\u0002\u04d2\u04d5\u0003\u0002\u0002\u0002\u04d3",
    "\u04d1\u0003\u0002\u0002\u0002\u04d3\u04d4\u0003\u0002\u0002\u0002\u04d4",
    "i\u0003\u0002\u0002\u0002\u04d5\u04d3\u0003\u0002\u0002\u0002\u04d6",
    "\u04d7\b6\u0001\u0002\u04d7\u04d8\u0007x\u0002\u0002\u04d8\u04d9\u0005",
    "\u00caf\u0002\u04d9\u04de\u0003\u0002\u0002\u0002\u04da\u04db\f\u0003",
    "\u0002\u0002\u04db\u04dd\u0005|?\u0002\u04dc\u04da\u0003\u0002\u0002",
    "\u0002\u04dd\u04e0\u0003\u0002\u0002\u0002\u04de\u04dc\u0003\u0002\u0002",
    "\u0002\u04de\u04df\u0003\u0002\u0002\u0002\u04dfk\u0003\u0002\u0002",
    "\u0002\u04e0\u04de\u0003\u0002\u0002\u0002\u04e1\u04eb\u0005n8\u0002",
    "\u04e2\u04eb\u0005p9\u0002\u04e3\u04eb\u0005t;\u0002\u04e4\u04eb\u0005",
    "v<\u0002\u04e5\u04eb\u0005\u013a\u009e\u0002\u04e6\u04eb\u0005\u013c",
    "\u009f\u0002\u04e7\u04eb\u0005z>\u0002\u04e8\u04eb\u0005Z.\u0002\u04e9",
    "\u04eb\u0005~@\u0002\u04ea\u04e1\u0003\u0002\u0002\u0002\u04ea\u04e2",
    "\u0003\u0002\u0002\u0002\u04ea\u04e3\u0003\u0002\u0002\u0002\u04ea\u04e4",
    "\u0003\u0002\u0002\u0002\u04ea\u04e5\u0003\u0002\u0002\u0002\u04ea\u04e6",
    "\u0003\u0002\u0002\u0002\u04ea\u04e7\u0003\u0002\u0002\u0002\u04ea\u04e8",
    "\u0003\u0002\u0002\u0002\u04ea\u04e9\u0003\u0002\u0002\u0002\u04ebm",
    "\u0003\u0002\u0002\u0002\u04ec\u04ed\u0007?\u0002\u0002\u04ed\u04ee",
    "\u0007\u0012\u0002\u0002\u04ee\u04ef\u0005`1\u0002\u04ef\u04f0\u0007",
    "\u0013\u0002\u0002\u04f0o\u0003\u0002\u0002\u0002\u04f1\u04f2\u0007",
    ">\u0002\u0002\u04f2\u04f4\u0007\u0012\u0002\u0002\u04f3\u04f5\u0005",
    "`1\u0002\u04f4\u04f3\u0003\u0002\u0002\u0002\u04f4\u04f5\u0003\u0002",
    "\u0002\u0002\u04f5\u04f6\u0003\u0002\u0002\u0002\u04f6\u04f7\u0007\u0013",
    "\u0002\u0002\u04f7q\u0003\u0002\u0002\u0002\u04f8\u04f9\u0007\u00a0",
    "\u0002\u0002\u04f9\u04fa\u0007\u0012\u0002\u0002\u04fa\u04fb\u0005`",
    "1\u0002\u04fb\u04fc\u0007\u0013\u0002\u0002\u04fc\u04fd\u0007\u0098",
    "\u0002\u0002\u04fd\u04fe\u0005`1\u0002\u04fe\u04ff\u0007\u000e\u0002",
    "\u0002\u04ffs\u0003\u0002\u0002\u0002\u0500\u0501\u0007h\u0002\u0002",
    "\u0501\u0502\u0007\u0012\u0002\u0002\u0502\u0503\u0005`1\u0002\u0503",
    "\u0509\u0007\u0013\u0002\u0002\u0504\u0505\u0007\u009c\u0002\u0002\u0505",
    "\u0506\u0007\u0012\u0002\u0002\u0506\u0507\u0005\u00ccg\u0002\u0507",
    "\u0508\u0007\u0013\u0002\u0002\u0508\u050a\u0003\u0002\u0002\u0002\u0509",
    "\u0504\u0003\u0002\u0002\u0002\u0509\u050a\u0003\u0002\u0002\u0002\u050a",
    "\u050b\u0003\u0002\u0002\u0002\u050b\u050c\u0007\u009e\u0002\u0002\u050c",
    "\u050d\u0007\u0012\u0002\u0002\u050d\u050e\u0005`1\u0002\u050e\u050f",
    "\u0007\u0013\u0002\u0002\u050fu\u0003\u0002\u0002\u0002\u0510\u0511",
    "\u0007g\u0002\u0002\u0511\u0516\u0007\u007f\u0002\u0002\u0512\u0513",
    "\u0007\u0012\u0002\u0002\u0513\u0514\u0005\u00b8]\u0002\u0514\u0515",
    "\u0007\u0013\u0002\u0002\u0515\u0517\u0003\u0002\u0002\u0002\u0516\u0512",
    "\u0003\u0002\u0002\u0002\u0516\u0517\u0003\u0002\u0002\u0002\u0517\u0518",
    "\u0003\u0002\u0002\u0002\u0518\u0519\u0007\u009e\u0002\u0002\u0519\u051a",
    "\u0007\u0012\u0002\u0002\u051a\u051b\u0005`1\u0002\u051b\u051c\u0007",
    "\u0013\u0002\u0002\u051c\u0544\u0003\u0002\u0002\u0002\u051d\u0532\u0007",
    "g\u0002\u0002\u051e\u0523\u0007F\u0002\u0002\u051f\u0520\u0007\u0012",
    "\u0002\u0002\u0520\u0521\u0005\u00b8]\u0002\u0521\u0522\u0007\u0013",
    "\u0002\u0002\u0522\u0524\u0003\u0002\u0002\u0002\u0523\u051f\u0003\u0002",
    "\u0002\u0002\u0523\u0524\u0003\u0002\u0002\u0002\u0524\u0533\u0003\u0002",
    "\u0002\u0002\u0525\u0526\u0007\u0012\u0002\u0002\u0526\u0527\u0005\u00b8",
    "]\u0002\u0527\u0528\u0007\u0013\u0002\u0002\u0528\u052a\u0003\u0002",
    "\u0002\u0002\u0529\u0525\u0003\u0002\u0002\u0002\u0529\u052a\u0003\u0002",
    "\u0002\u0002\u052a\u052b\u0003\u0002\u0002\u0002\u052b\u052c\u0007\u008c",
    "\u0002\u0002\u052c\u052d\u0007\u0012\u0002\u0002\u052d\u052e\u0005`",
    "1\u0002\u052e\u052f\u0007\u0098\u0002\u0002\u052f\u0530\u0005`1\u0002",
    "\u0530\u0531\u0007\u0013\u0002\u0002\u0531\u0533\u0003\u0002\u0002\u0002",
    "\u0532\u051e\u0003\u0002\u0002\u0002\u0532\u0529\u0003\u0002\u0002\u0002",
    "\u0533\u0539\u0003\u0002\u0002\u0002\u0534\u0535\u0007\u009e\u0002\u0002",
    "\u0535\u0536\u0007\u0012\u0002\u0002\u0536\u0537\u0005`1\u0002\u0537",
    "\u0538\u0007\u0013\u0002\u0002\u0538\u053a\u0003\u0002\u0002\u0002\u0539",
    "\u0534\u0003\u0002\u0002\u0002\u0539\u053a\u0003\u0002\u0002\u0002\u053a",
    "\u0541\u0003\u0002\u0002\u0002\u053b\u053c\u0007\u0083\u0002\u0002\u053c",
    "\u053d\u0007Q\u0002\u0002\u053d\u053e\u0007\u0012\u0002\u0002\u053e",
    "\u053f\u0005\u013e\u00a0\u0002\u053f\u0540\u0007\u0013\u0002\u0002\u0540",
    "\u0542\u0003\u0002\u0002\u0002\u0541\u053b\u0003\u0002\u0002\u0002\u0541",
    "\u0542\u0003\u0002\u0002\u0002\u0542\u0544\u0003\u0002\u0002\u0002\u0543",
    "\u0510\u0003\u0002\u0002\u0002\u0543\u051d\u0003\u0002\u0002\u0002\u0544",
    "w\u0003\u0002\u0002\u0002\u0545\u0546\u0007g\u0002\u0002\u0546\u054b",
    "\u0007\u007f\u0002\u0002\u0547\u0548\u0007\u0012\u0002\u0002\u0548\u0549",
    "\u0005\u00b8]\u0002\u0549\u054a\u0007\u0013\u0002\u0002\u054a\u054c",
    "\u0003\u0002\u0002\u0002\u054b\u0547\u0003\u0002\u0002\u0002\u054b\u054c",
    "\u0003\u0002\u0002\u0002\u054c\u054d\u0003\u0002\u0002\u0002\u054d\u054e",
    "\u0007\u009e\u0002\u0002\u054e\u054f\u0007\u0012\u0002\u0002\u054f\u0550",
    "\u0005`1\u0002\u0550\u0551\u0007\u0013\u0002\u0002\u0551\u0552\u0007",
    "\u0095\u0002\u0002\u0552\u0553\u0007\u009c\u0002\u0002\u0553\u0554\u0005",
    "\u00ccg\u0002\u0554\u0555\u0007\u0016\u0002\u0002\u0555\u0556\u0005",
    "\u0106\u0084\u0002\u0556\u0557\u0007\u0017\u0002\u0002\u0557\u0586\u0003",
    "\u0002\u0002\u0002\u0558\u056d\u0007g\u0002\u0002\u0559\u055e\u0007",
    "F\u0002\u0002\u055a\u055b\u0007\u0012\u0002\u0002\u055b\u055c\u0005",
    "\u00b8]\u0002\u055c\u055d\u0007\u0013\u0002\u0002\u055d\u055f\u0003",
    "\u0002\u0002\u0002\u055e\u055a\u0003\u0002\u0002\u0002\u055e\u055f\u0003",
    "\u0002\u0002\u0002\u055f\u056e\u0003\u0002\u0002\u0002\u0560\u0561\u0007",
    "\u0012\u0002\u0002\u0561\u0562\u0005\u00b8]\u0002\u0562\u0563\u0007",
    "\u0013\u0002\u0002\u0563\u0565\u0003\u0002\u0002\u0002\u0564\u0560\u0003",
    "\u0002\u0002\u0002\u0564\u0565\u0003\u0002\u0002\u0002\u0565\u0566\u0003",
    "\u0002\u0002\u0002\u0566\u0567\u0007\u008c\u0002\u0002\u0567\u0568\u0007",
    "\u0012\u0002\u0002\u0568\u0569\u0005`1\u0002\u0569\u056a\u0007\u0098",
    "\u0002\u0002\u056a\u056b\u0005`1\u0002\u056b\u056c\u0007\u0013\u0002",
    "\u0002\u056c\u056e\u0003\u0002\u0002\u0002\u056d\u0559\u0003\u0002\u0002",
    "\u0002\u056d\u0564\u0003\u0002\u0002\u0002\u056e\u0574\u0003\u0002\u0002",
    "\u0002\u056f\u0570\u0007\u009e\u0002\u0002\u0570\u0571\u0007\u0012\u0002",
    "\u0002\u0571\u0572\u0005`1\u0002\u0572\u0573\u0007\u0013\u0002\u0002",
    "\u0573\u0575\u0003\u0002\u0002\u0002\u0574\u056f\u0003\u0002\u0002\u0002",
    "\u0574\u0575\u0003\u0002\u0002\u0002\u0575\u057c\u0003\u0002\u0002\u0002",
    "\u0576\u0577\u0007\u0083\u0002\u0002\u0577\u0578\u0007Q\u0002\u0002",
    "\u0578\u0579\u0007\u0012\u0002\u0002\u0579\u057a\u0005\u013e\u00a0\u0002",
    "\u057a\u057b\u0007\u0013\u0002\u0002\u057b\u057d\u0003\u0002\u0002\u0002",
    "\u057c\u0576\u0003\u0002\u0002\u0002\u057c\u057d\u0003\u0002\u0002\u0002",
    "\u057d\u057e\u0003\u0002\u0002\u0002\u057e\u057f\u0007\u0095\u0002\u0002",
    "\u057f\u0580\u0007\u009c\u0002\u0002\u0580\u0581\u0005\u00ccg\u0002",
    "\u0581\u0582\u0007\u0016\u0002\u0002\u0582\u0583\u0005\u0106\u0084\u0002",
    "\u0583\u0584\u0007\u0017\u0002\u0002\u0584\u0586\u0003\u0002\u0002\u0002",
    "\u0585\u0545\u0003\u0002\u0002\u0002\u0585\u0558\u0003\u0002\u0002\u0002",
    "\u0586y\u0003\u0002\u0002\u0002\u0587\u0589\u0007\u0090\u0002\u0002",
    "\u0588\u058a\u0007\\\u0002\u0002\u0589\u0588\u0003\u0002\u0002\u0002",
    "\u0589\u058a\u0003\u0002\u0002\u0002\u058a\u058b\u0003\u0002\u0002\u0002",
    "\u058b\u058c\u0007\u0012\u0002\u0002\u058c\u0592\u0005h5\u0002\u058d",
    "\u058e\u0007\u000f\u0002\u0002\u058e\u058f\u0005\u0148\u00a5\u0002\u058f",
    "\u0590\u0007*\u0002\u0002\u0590\u0591\u0005\u0138\u009d\u0002\u0591",
    "\u0593\u0003\u0002\u0002\u0002\u0592\u058d\u0003\u0002\u0002\u0002\u0592",
    "\u0593\u0003\u0002\u0002\u0002\u0593\u0594\u0003\u0002\u0002\u0002\u0594",
    "\u0595\u0007\u0013\u0002\u0002\u0595{\u0003\u0002\u0002\u0002\u0596",
    "\u0597\u0007\u0011\u0002\u0002\u0597\u05a3\u0005\u00ccg\u0002\u0598",
    "\u0599\u0007\u0011\u0002\u0002\u0599\u05a3\u0005Z.\u0002\u059a\u059b",
    "\u0007\u0014\u0002\u0002\u059b\u059c\u0005`1\u0002\u059c\u059d\u0007",
    "\u0015\u0002\u0002\u059d\u05a3\u0003\u0002\u0002\u0002\u059e\u059f\u0007",
    "\u0014\u0002\u0002\u059f\u05a0\u0005\u012a\u0096\u0002\u05a0\u05a1\u0007",
    "\u0015\u0002\u0002\u05a1\u05a3\u0003\u0002\u0002\u0002\u05a2\u0596\u0003",
    "\u0002\u0002\u0002\u05a2\u0598\u0003\u0002\u0002\u0002\u05a2\u059a\u0003",
    "\u0002\u0002\u0002\u05a2\u059e\u0003\u0002\u0002\u0002\u05a3}\u0003",
    "\u0002\u0002\u0002\u05a4\u05a5\u0005\u00b8]\u0002\u05a5\u05a6\u0007",
    "\u0012\u0002\u0002\u05a6\u05a9\u0005\u0080A\u0002\u05a7\u05a8\u0007",
    "\u000f\u0002\u0002\u05a8\u05aa\u0005\u0082B\u0002\u05a9\u05a7\u0003",
    "\u0002\u0002\u0002\u05a9\u05aa\u0003\u0002\u0002\u0002\u05aa\u05ab\u0003",
    "\u0002\u0002\u0002\u05ab\u05ac\u0007\u0013\u0002\u0002\u05ac\u05b5\u0003",
    "\u0002\u0002\u0002\u05ad\u05ae\u0005\u00b8]\u0002\u05ae\u05b0\u0007",
    "\u0012\u0002\u0002\u05af\u05b1\u0005\u0082B\u0002\u05b0\u05af\u0003",
    "\u0002\u0002\u0002\u05b0\u05b1\u0003\u0002\u0002\u0002\u05b1\u05b2\u0003",
    "\u0002\u0002\u0002\u05b2\u05b3\u0007\u0013\u0002\u0002\u05b3\u05b5\u0003",
    "\u0002\u0002\u0002\u05b4\u05a4\u0003\u0002\u0002\u0002\u05b4\u05ad\u0003",
    "\u0002\u0002\u0002\u05b5\u007f\u0003\u0002\u0002\u0002\u05b6\u05b7\u0007",
    "l\u0002\u0002\u05b7\u05b8\u0005\u0150\u00a9\u0002\u05b8\u05b9\u0005",
    "`1\u0002\u05b9\u05ba\u0006A&\u0003\u05ba\u0081\u0003\u0002\u0002\u0002",
    "\u05bb\u05bc\bB\u0001\u0002\u05bc\u05bd\u0005`1\u0002\u05bd\u05be\u0006",
    "B\'\u0003\u05be\u05c1\u0003\u0002\u0002\u0002\u05bf\u05c1\u0005\u0084",
    "C\u0002\u05c0\u05bb\u0003\u0002\u0002\u0002\u05c0\u05bf\u0003\u0002",
    "\u0002\u0002\u05c1\u05c7\u0003\u0002\u0002\u0002\u05c2\u05c3\f\u0003",
    "\u0002\u0002\u05c3\u05c4\u0007\u000f\u0002\u0002\u05c4\u05c6\u0005\u0084",
    "C\u0002\u05c5\u05c2\u0003\u0002\u0002\u0002\u05c6\u05c9\u0003\u0002",
    "\u0002\u0002\u05c7\u05c5\u0003\u0002\u0002\u0002\u05c7\u05c8\u0003\u0002",
    "\u0002\u0002\u05c8\u0083\u0003\u0002\u0002\u0002\u05c9\u05c7\u0003\u0002",
    "\u0002\u0002\u05ca\u05ce\u0005\u00ccg\u0002\u05cb\u05cc\u0005\u0150",
    "\u00a9\u0002\u05cc\u05cd\u0005`1\u0002\u05cd\u05cf\u0003\u0002\u0002",
    "\u0002\u05ce\u05cb\u0003\u0002\u0002\u0002\u05ce\u05cf\u0003\u0002\u0002",
    "\u0002\u05cf\u0085\u0003\u0002\u0002\u0002\u05d0\u05d1\u0005\u012e\u0098",
    "\u0002\u05d1\u05d2\u0005\u0150\u00a9\u0002\u05d2\u05d3\u0005`1\u0002",
    "\u05d3\u05d4\u0007\u000e\u0002\u0002\u05d4\u0087\u0003\u0002\u0002\u0002",
    "\u05d5\u05d6\u0007\u0011\u0002\u0002\u05d6\u05dc\u0005\u00ccg\u0002",
    "\u05d7\u05d8\u0007\u0014\u0002\u0002\u05d8\u05d9\u0005`1\u0002\u05d9",
    "\u05da\u0007\u0015\u0002\u0002\u05da\u05dc\u0003\u0002\u0002\u0002\u05db",
    "\u05d5\u0003\u0002\u0002\u0002\u05db\u05d7\u0003\u0002\u0002\u0002\u05dc",
    "\u0089\u0003\u0002\u0002\u0002\u05dd\u05de\u0005\u00f6|\u0002\u05de",
    "\u05df\u0005\u0150\u00a9\u0002\u05df\u05e0\u0005`1\u0002\u05e0\u05e1",
    "\u0007\u000e\u0002\u0002\u05e1\u008b\u0003\u0002\u0002\u0002\u05e2\u05e3",
    "\u0007}\u0002\u0002\u05e3\u008d\u0003\u0002\u0002\u0002\u05e4\u05e6",
    "\t\u0003\u0002\u0002\u05e5\u05e4\u0003\u0002\u0002\u0002\u05e6\u05e9",
    "\u0003\u0002\u0002\u0002\u05e7\u05e5\u0003\u0002\u0002\u0002\u05e7\u05e8",
    "\u0003\u0002\u0002\u0002\u05e8\u008f\u0003\u0002\u0002\u0002\u05e9\u05e7",
    "\u0003\u0002\u0002\u0002\u05ea\u05ee\u0005\u0096L\u0002\u05eb\u05ee",
    "\u00058\u001d\u0002\u05ec\u05ee\u0005`1\u0002\u05ed\u05ea\u0003\u0002",
    "\u0002\u0002\u05ed\u05eb\u0003\u0002\u0002\u0002\u05ed\u05ec\u0003\u0002",
    "\u0002\u0002\u05ee\u0091\u0003\u0002\u0002\u0002\u05ef\u05f1\u0005\u0094",
    "K\u0002\u05f0\u05ef\u0003\u0002\u0002\u0002\u05f0\u05f1\u0003\u0002",
    "\u0002\u0002\u05f1\u05f2\u0003\u0002\u0002\u0002\u05f2\u05f3\u0005\u015a",
    "\u00ae\u0002\u05f3\u05f4\u0007\u0002\u0002\u0003\u05f4\u0093\u0003\u0002",
    "\u0002\u0002\u05f5\u05fb\u0005\u0096L\u0002\u05f6\u05f7\u0005\u015c",
    "\u00af\u0002\u05f7\u05f8\u0005\u0096L\u0002\u05f8\u05fa\u0003\u0002",
    "\u0002\u0002\u05f9\u05f6\u0003\u0002\u0002\u0002\u05fa\u05fd\u0003\u0002",
    "\u0002\u0002\u05fb\u05f9\u0003\u0002\u0002\u0002\u05fb\u05fc\u0003\u0002",
    "\u0002\u0002\u05fc\u0095\u0003\u0002\u0002\u0002\u05fd\u05fb\u0003\u0002",
    "\u0002\u0002\u05fe\u05ff\u0005\u00fc\u007f\u0002\u05ff\u0600\u0005\u015c",
    "\u00af\u0002\u0600\u0602\u0003\u0002\u0002\u0002\u0601\u05fe\u0003\u0002",
    "\u0002\u0002\u0602\u0605\u0003\u0002\u0002\u0002\u0603\u0601\u0003\u0002",
    "\u0002\u0002\u0603\u0604\u0003\u0002\u0002\u0002\u0604\u060b\u0003\u0002",
    "\u0002\u0002\u0605\u0603\u0003\u0002\u0002\u0002\u0606\u0607\u0005\u0098",
    "M\u0002\u0607\u0608\u0005\u015c\u00af\u0002\u0608\u060a\u0003\u0002",
    "\u0002\u0002\u0609\u0606\u0003\u0002\u0002\u0002\u060a\u060d\u0003\u0002",
    "\u0002\u0002\u060b\u0609\u0003\u0002\u0002\u0002\u060b\u060c\u0003\u0002",
    "\u0002\u0002\u060c\u0614\u0003\u0002\u0002\u0002\u060d\u060b\u0003\u0002",
    "\u0002\u0002\u060e\u0615\u0005\n\u0006\u0002\u060f\u0615\u0005\u00bc",
    "_\u0002\u0610\u0615\u0005\u009cO\u0002\u0611\u0615\u0005\u009eP\u0002",
    "\u0612\u0615\u0005\u00be`\u0002\u0613\u0615\u0005\u00fa~\u0002\u0614",
    "\u060e\u0003\u0002\u0002\u0002\u0614\u060f\u0003\u0002\u0002\u0002\u0614",
    "\u0610\u0003\u0002\u0002\u0002\u0614\u0611\u0003\u0002\u0002\u0002\u0614",
    "\u0612\u0003\u0002\u0002\u0002\u0614\u0613\u0003\u0002\u0002\u0002\u0615",
    "\u0097\u0003\u0002\u0002\u0002\u0616\u061b\u0005\u009aN\u0002\u0617",
    "\u0618\u0007\u0012\u0002\u0002\u0618\u0619\u0005\u0118\u008d\u0002\u0619",
    "\u061a\u0007\u0013\u0002\u0002\u061a\u061c\u0003\u0002\u0002\u0002\u061b",
    "\u0617\u0003\u0002\u0002\u0002\u061b\u061c\u0003\u0002\u0002\u0002\u061c",
    "\u0099\u0003\u0002\u0002\u0002\u061d\u061e\u0007\u00aa\u0002\u0002\u061e",
    "\u009b\u0003\u0002\u0002\u0002\u061f\u0620\u0005\"\u0012\u0002\u0620",
    "\u009d\u0003\u0002\u0002\u0002\u0621\u0624\u0005\u0002\u0002\u0002\u0622",
    "\u0624\u0005\u0004\u0003\u0002\u0623\u0621\u0003\u0002\u0002\u0002\u0623",
    "\u0622\u0003\u0002\u0002\u0002\u0624\u009f\u0003\u0002\u0002\u0002\u0625",
    "\u062b\u0005\b\u0005\u0002\u0626\u0627\u0005\u015c\u00af\u0002\u0627",
    "\u0628\u0005\b\u0005\u0002\u0628\u062a\u0003\u0002\u0002\u0002\u0629",
    "\u0626\u0003\u0002\u0002\u0002\u062a\u062d\u0003\u0002\u0002\u0002\u062b",
    "\u0629\u0003\u0002\u0002\u0002\u062b\u062c\u0003\u0002\u0002\u0002\u062c",
    "\u00a1\u0003\u0002\u0002\u0002\u062d\u062b\u0003\u0002\u0002\u0002\u062e",
    "\u0634\u0005\u0006\u0004\u0002\u062f\u0630\u0005\u015c\u00af\u0002\u0630",
    "\u0631\u0005\u0006\u0004\u0002\u0631\u0633\u0003\u0002\u0002\u0002\u0632",
    "\u062f\u0003\u0002\u0002\u0002\u0633\u0636\u0003\u0002\u0002\u0002\u0634",
    "\u0632\u0003\u0002\u0002\u0002\u0634\u0635\u0003\u0002\u0002\u0002\u0635",
    "\u00a3\u0003\u0002\u0002\u0002\u0636\u0634\u0003\u0002\u0002\u0002\u0637",
    "\u063c\u0005\u00d2j\u0002\u0638\u0639\u0007\u000f\u0002\u0002\u0639",
    "\u063b\u0005\u00d2j\u0002\u063a\u0638\u0003\u0002\u0002\u0002\u063b",
    "\u063e\u0003\u0002\u0002\u0002\u063c\u063a\u0003\u0002\u0002\u0002\u063c",
    "\u063d\u0003\u0002\u0002\u0002\u063d\u00a5\u0003\u0002\u0002\u0002\u063e",
    "\u063c\u0003\u0002\u0002\u0002\u063f\u0640\u0007p\u0002\u0002\u0640",
    "\u064a\u0005\u00a8U\u0002\u0641\u0642\u0007p\u0002\u0002\u0642\u064a",
    "\u0005\u00aaV\u0002\u0643\u0644\u0007p\u0002\u0002\u0644\u064a\u0005",
    "\u00aeX\u0002\u0645\u0646\u0007t\u0002\u0002\u0646\u064a\u0007\u00ab",
    "\u0002\u0002\u0647\u0648\u0007t\u0002\u0002\u0648\u064a\u0005`1\u0002",
    "\u0649\u063f\u0003\u0002\u0002\u0002\u0649\u0641\u0003\u0002\u0002\u0002",
    "\u0649\u0643\u0003\u0002\u0002\u0002\u0649\u0645\u0003\u0002\u0002\u0002",
    "\u0649\u0647\u0003\u0002\u0002\u0002\u064a\u00a7\u0003\u0002\u0002\u0002",
    "\u064b\u064d\u0007x\u0002\u0002\u064c\u064b\u0003\u0002\u0002\u0002",
    "\u064c\u064d\u0003\u0002\u0002\u0002\u064d\u064e\u0003\u0002\u0002\u0002",
    "\u064e\u0650\u0007\u0014\u0002\u0002\u064f\u0651\u0005\u00acW\u0002",
    "\u0650\u064f\u0003\u0002\u0002\u0002\u0650\u0651\u0003\u0002\u0002\u0002",
    "\u0651\u0652\u0003\u0002\u0002\u0002\u0652\u0653\u0007\u0015\u0002\u0002",
    "\u0653\u00a9\u0003\u0002\u0002\u0002\u0654\u0656\u0007x\u0002\u0002",
    "\u0655\u0654\u0003\u0002\u0002\u0002\u0655\u0656\u0003\u0002\u0002\u0002",
    "\u0656\u0657\u0003\u0002\u0002\u0002\u0657\u0659\u0007&\u0002\u0002",
    "\u0658\u065a\u0005\u00acW\u0002\u0659\u0658\u0003\u0002\u0002\u0002",
    "\u0659\u065a\u0003\u0002\u0002\u0002\u065a\u065b\u0003\u0002\u0002\u0002",
    "\u065b\u065c\u0007$\u0002\u0002\u065c\u00ab\u0003\u0002\u0002\u0002",
    "\u065d\u0662\u0005`1\u0002\u065e\u065f\u0007\u000f\u0002\u0002\u065f",
    "\u0661\u0005`1\u0002\u0660\u065e\u0003\u0002\u0002\u0002\u0661\u0664",
    "\u0003\u0002\u0002\u0002\u0662\u0660\u0003\u0002\u0002\u0002\u0662\u0663",
    "\u0003\u0002\u0002\u0002\u0663\u00ad\u0003\u0002\u0002\u0002\u0664\u0662",
    "\u0003\u0002\u0002\u0002\u0665\u0666\u0007\u0014\u0002\u0002\u0666\u0667",
    "\u0005`1\u0002\u0667\u0668\u0007\u0010\u0002\u0002\u0668\u0669\u0005",
    "`1\u0002\u0669\u066a\u0007\u0015\u0002\u0002\u066a\u00af\u0003\u0002",
    "\u0002\u0002\u066b\u066c\bY\u0001\u0002\u066c\u0678\u0005\u00b2Z\u0002",
    "\u066d\u066e\u0007C\u0002\u0002\u066e\u066f\u0007&\u0002\u0002\u066f",
    "\u0670\u0005\u00b0Y\u0002\u0670\u0671\u0007$\u0002\u0002\u0671\u0678",
    "\u0003\u0002\u0002\u0002\u0672\u0673\u0007B\u0002\u0002\u0673\u0674",
    "\u0007&\u0002\u0002\u0674\u0675\u0005\u00b0Y\u0002\u0675\u0676\u0007",
    "$\u0002\u0002\u0676\u0678\u0003\u0002\u0002\u0002\u0677\u066b\u0003",
    "\u0002\u0002\u0002\u0677\u066d\u0003\u0002\u0002\u0002\u0677\u0672\u0003",
    "\u0002\u0002\u0002\u0678\u0682\u0003\u0002\u0002\u0002\u0679\u067a\f",
    "\u0007\u0002\u0002\u067a\u0681\u0007(\u0002\u0002\u067b\u067c\f\u0006",
    "\u0002\u0002\u067c\u067d\u0007\u0014\u0002\u0002\u067d\u0681\u0007\u0015",
    "\u0002\u0002\u067e\u067f\f\u0005\u0002\u0002\u067f\u0681\u0007)\u0002",
    "\u0002\u0680\u0679\u0003\u0002\u0002\u0002\u0680\u067b\u0003\u0002\u0002",
    "\u0002\u0680\u067e\u0003\u0002\u0002\u0002\u0681\u0684\u0003\u0002\u0002",
    "\u0002\u0682\u0680\u0003\u0002\u0002\u0002\u0682\u0683\u0003\u0002\u0002",
    "\u0002\u0683\u00b1\u0003\u0002\u0002\u0002\u0684\u0682\u0003\u0002\u0002",
    "\u0002\u0685\u0688\u0005\u00b4[\u0002\u0686\u0688\u0005\u00b6\\\u0002",
    "\u0687\u0685\u0003\u0002\u0002\u0002\u0687\u0686\u0003\u0002\u0002\u0002",
    "\u0688\u00b3\u0003\u0002\u0002\u0002\u0689\u069a\u00072\u0002\u0002",
    "\u068a\u069a\u00073\u0002\u0002\u068b\u069a\u00074\u0002\u0002\u068c",
    "\u069a\u0007@\u0002\u0002\u068d\u069a\u00075\u0002\u0002\u068e\u069a",
    "\u00076\u0002\u0002\u068f\u069a\u0007>\u0002\u0002\u0690\u069a\u0007",
    "7\u0002\u0002\u0691\u069a\u00079\u0002\u0002\u0692\u069a\u00078\u0002",
    "\u0002\u0693\u069a\u0007:\u0002\u0002\u0694\u069a\u0007;\u0002\u0002",
    "\u0695\u069a\u0007=\u0002\u0002\u0696\u069a\u0007?\u0002\u0002\u0697",
    "\u069a\u0007A\u0002\u0002\u0698\u069a\u0007D\u0002\u0002\u0699\u0689",
    "\u0003\u0002\u0002\u0002\u0699\u068a\u0003\u0002\u0002\u0002\u0699\u068b",
    "\u0003\u0002\u0002\u0002\u0699\u068c\u0003\u0002\u0002\u0002\u0699\u068d",
    "\u0003\u0002\u0002\u0002\u0699\u068e\u0003\u0002\u0002\u0002\u0699\u068f",
    "\u0003\u0002\u0002\u0002\u0699\u0690\u0003\u0002\u0002\u0002\u0699\u0691",
    "\u0003\u0002\u0002\u0002\u0699\u0692\u0003\u0002\u0002\u0002\u0699\u0693",
    "\u0003\u0002\u0002\u0002\u0699\u0694\u0003\u0002\u0002\u0002\u0699\u0695",
    "\u0003\u0002\u0002\u0002\u0699\u0696\u0003\u0002\u0002\u0002\u0699\u0697",
    "\u0003\u0002\u0002\u0002\u0699\u0698\u0003\u0002\u0002\u0002\u069a\u00b5",
    "\u0003\u0002\u0002\u0002\u069b\u069c\u0007\u00a6\u0002\u0002\u069c\u00b7",
    "\u0003\u0002\u0002\u0002\u069d\u069f\u0007x\u0002\u0002\u069e\u069d",
    "\u0003\u0002\u0002\u0002\u069e\u069f\u0003\u0002\u0002\u0002\u069f\u06a0",
    "\u0003\u0002\u0002\u0002\u06a0\u06a1\u0005\u00b6\\\u0002\u06a1\u00b9",
    "\u0003\u0002\u0002\u0002\u06a2\u06a3\u0007=\u0002\u0002\u06a3\u00bb",
    "\u0003\u0002\u0002\u0002\u06a4\u06a8\u0005\u0010\t\u0002\u06a5\u06a8",
    "\u0005$\u0013\u0002\u06a6\u06a8\u0005\u0012\n\u0002\u06a7\u06a4\u0003",
    "\u0002\u0002\u0002\u06a7\u06a5\u0003\u0002\u0002\u0002\u06a7\u06a6\u0003",
    "\u0002\u0002\u0002\u06a8\u00bd\u0003\u0002\u0002\u0002\u06a9\u06ac\u0005",
    "\f\u0007\u0002\u06aa\u06ac\u0005\u000e\b\u0002\u06ab\u06a9\u0003\u0002",
    "\u0002\u0002\u06ab\u06aa\u0003\u0002\u0002\u0002\u06ac\u00bf\u0003\u0002",
    "\u0002\u0002\u06ad\u06b2\u0005\u00d0i\u0002\u06ae\u06af\u0007\u000f",
    "\u0002\u0002\u06af\u06b1\u0005\u00d0i\u0002\u06b0\u06ae\u0003\u0002",
    "\u0002\u0002\u06b1\u06b4\u0003\u0002\u0002\u0002\u06b2\u06b0\u0003\u0002",
    "\u0002\u0002\u06b2\u06b3\u0003\u0002\u0002\u0002\u06b3\u00c1\u0003\u0002",
    "\u0002\u0002\u06b4\u06b2\u0003\u0002\u0002\u0002\u06b5\u06b8\u0005\u00cc",
    "g\u0002\u06b6\u06b8\u0005\u00d0i\u0002\u06b7\u06b5\u0003\u0002\u0002",
    "\u0002\u06b7\u06b6\u0003\u0002\u0002\u0002\u06b8\u00c3\u0003\u0002\u0002",
    "\u0002\u06b9\u06bc\u0005\u00caf\u0002\u06ba\u06bc\u0005\u0144\u00a3",
    "\u0002\u06bb\u06b9\u0003\u0002\u0002\u0002\u06bb\u06ba\u0003\u0002\u0002",
    "\u0002\u06bc\u00c5\u0003\u0002\u0002\u0002\u06bd\u06be\u0006d,\u0003",
    "\u06be\u06bf\u0007\u001f\u0002\u0002\u06bf\u06c0\u0005\u00c8e\u0002",
    "\u06c0\u00c7\u0003\u0002\u0002\u0002\u06c1\u06c2\u0006e-\u0003\u06c2",
    "\u06c3\u0005\u00c4c\u0002\u06c3\u00c9\u0003\u0002\u0002\u0002\u06c4",
    "\u06c8\u0005\u00ccg\u0002\u06c5\u06c8\u0005\u00d0i\u0002\u06c6\u06c8",
    "\u0005\u00d2j\u0002\u06c7\u06c4\u0003\u0002\u0002\u0002\u06c7\u06c5",
    "\u0003\u0002\u0002\u0002\u06c7\u06c6\u0003\u0002\u0002\u0002\u06c8\u00cb",
    "\u0003\u0002\u0002\u0002\u06c9\u06ca\u0007\u00a7\u0002\u0002\u06ca\u00cd",
    "\u0003\u0002\u0002\u0002\u06cb\u06cc\t\u0004\u0002\u0002\u06cc\u00cf",
    "\u0003\u0002\u0002\u0002\u06cd\u06ce\u0007\u00a6\u0002\u0002\u06ce\u00d1",
    "\u0003\u0002\u0002\u0002\u06cf\u06d0\u0007\u00a5\u0002\u0002\u06d0\u00d3",
    "\u0003\u0002\u0002\u0002\u06d1\u06d2\t\u0005\u0002\u0002\u06d2\u00d5",
    "\u0003\u0002\u0002\u0002\u06d3\u06d8\u0005\u00d8m\u0002\u06d4\u06d5",
    "\u0007\u000f\u0002\u0002\u06d5\u06d7\u0005\u00d8m\u0002\u06d6\u06d4",
    "\u0003\u0002\u0002\u0002\u06d7\u06da\u0003\u0002\u0002\u0002\u06d8\u06d6",
    "\u0003\u0002\u0002\u0002\u06d8\u06d9\u0003\u0002\u0002\u0002\u06d9\u00d7",
    "\u0003\u0002\u0002\u0002\u06da\u06d8\u0003\u0002\u0002\u0002\u06db\u06e1",
    "\u0005\u00dep\u0002\u06dc\u06de\u0007x\u0002\u0002\u06dd\u06dc\u0003",
    "\u0002\u0002\u0002\u06dd\u06de\u0003\u0002\u0002\u0002\u06de\u06df\u0003",
    "\u0002\u0002\u0002\u06df\u06e1\u0005\u00dan\u0002\u06e0\u06db\u0003",
    "\u0002\u0002\u0002\u06e0\u06dd\u0003\u0002\u0002\u0002\u06e1\u00d9\u0003",
    "\u0002\u0002\u0002\u06e2\u06e5\u0005\u00dco\u0002\u06e3\u06e5\u0005",
    "4\u001b\u0002\u06e4\u06e2\u0003\u0002\u0002\u0002\u06e4\u06e3\u0003",
    "\u0002\u0002\u0002\u06e5\u00db\u0003\u0002\u0002\u0002\u06e6\u06e9\u0005",
    "\u00ccg\u0002\u06e7\u06e8\u0007*\u0002\u0002\u06e8\u06ea\u0005\u0118",
    "\u008d\u0002\u06e9\u06e7\u0003\u0002\u0002\u0002\u06e9\u06ea\u0003\u0002",
    "\u0002\u0002\u06ea\u00dd\u0003\u0002\u0002\u0002\u06eb\u06ec\u0005\u00ba",
    "^\u0002\u06ec\u06ed\u0005\u00ccg\u0002\u06ed\u00df\u0003\u0002\u0002",
    "\u0002\u06ee\u06f1\u0005\u00b0Y\u0002\u06ef\u06f1\u0005\u00e2r\u0002",
    "\u06f0\u06ee\u0003\u0002\u0002\u0002\u06f0\u06ef\u0003\u0002\u0002\u0002",
    "\u06f1\u00e1\u0003\u0002\u0002\u0002\u06f2\u06f3\br\u0001\u0002\u06f3",
    "\u06f4\u0007I\u0002\u0002\u06f4\u06fd\u0003\u0002\u0002\u0002\u06f5",
    "\u06f6\f\u0004\u0002\u0002\u06f6\u06f7\u0007\u0014\u0002\u0002\u06f7",
    "\u06fc\u0007\u0015\u0002\u0002\u06f8\u06f9\f\u0003\u0002\u0002\u06f9",
    "\u06fa\u0007\u0016\u0002\u0002\u06fa\u06fc\u0007\u0017\u0002\u0002\u06fb",
    "\u06f5\u0003\u0002\u0002\u0002\u06fb\u06f8\u0003\u0002\u0002\u0002\u06fc",
    "\u06ff\u0003\u0002\u0002\u0002\u06fd\u06fb\u0003\u0002\u0002\u0002\u06fd",
    "\u06fe\u0003\u0002\u0002\u0002\u06fe\u00e3\u0003\u0002\u0002\u0002\u06ff",
    "\u06fd\u0003\u0002\u0002\u0002\u0700\u0706\u0005\u00e6t\u0002\u0701",
    "\u0702\u0005\u015c\u00af\u0002\u0702\u0703\u0005\u00e6t\u0002\u0703",
    "\u0705\u0003\u0002\u0002\u0002\u0704\u0701\u0003\u0002\u0002\u0002\u0705",
    "\u0708\u0003\u0002\u0002\u0002\u0706\u0704\u0003\u0002\u0002\u0002\u0706",
    "\u0707\u0003\u0002\u0002\u0002\u0707\u00e5\u0003\u0002\u0002\u0002\u0708",
    "\u0706\u0003\u0002\u0002\u0002\u0709\u070a\u0005\u00fc\u007f\u0002\u070a",
    "\u070b\u0005\u015c\u00af\u0002\u070b\u070d\u0003\u0002\u0002\u0002\u070c",
    "\u0709\u0003\u0002\u0002\u0002\u070d\u0710\u0003\u0002\u0002\u0002\u070e",
    "\u070c\u0003\u0002\u0002\u0002\u070e\u070f\u0003\u0002\u0002\u0002\u070f",
    "\u0716\u0003\u0002\u0002\u0002\u0710\u070e\u0003\u0002\u0002\u0002\u0711",
    "\u0712\u0005\u0098M\u0002\u0712\u0713\u0005\u015c\u00af\u0002\u0713",
    "\u0715\u0003\u0002\u0002\u0002\u0714\u0711\u0003\u0002\u0002\u0002\u0715",
    "\u0718\u0003\u0002\u0002\u0002\u0716\u0714\u0003\u0002\u0002\u0002\u0716",
    "\u0717\u0003\u0002\u0002\u0002\u0717\u071e\u0003\u0002\u0002\u0002\u0718",
    "\u0716\u0003\u0002\u0002\u0002\u0719\u071f\u0005\u001a\u000e\u0002\u071a",
    "\u071f\u0005\u001e\u0010\u0002\u071b\u071f\u0005,\u0017\u0002\u071c",
    "\u071f\u0005*\u0016\u0002\u071d\u071f\u0005\u0018\r\u0002\u071e\u0719",
    "\u0003\u0002\u0002\u0002\u071e\u071a\u0003\u0002\u0002\u0002\u071e\u071b",
    "\u0003\u0002\u0002\u0002\u071e\u071c\u0003\u0002\u0002\u0002\u071e\u071d",
    "\u0003\u0002\u0002\u0002\u071f\u00e7\u0003\u0002\u0002\u0002\u0720\u0726",
    "\u0005\u00eav\u0002\u0721\u0722\u0005\u015c\u00af\u0002\u0722\u0723",
    "\u0005\u00eav\u0002\u0723\u0725\u0003\u0002\u0002\u0002\u0724\u0721",
    "\u0003\u0002\u0002\u0002\u0725\u0728\u0003\u0002\u0002\u0002\u0726\u0724",
    "\u0003\u0002\u0002\u0002\u0726\u0727\u0003\u0002\u0002\u0002\u0727\u00e9",
    "\u0003\u0002\u0002\u0002\u0728\u0726\u0003\u0002\u0002\u0002\u0729\u072d",
    "\u0005 \u0011\u0002\u072a\u072d\u0005\u001c\u000f\u0002\u072b\u072d",
    "\u0005.\u0018\u0002\u072c\u0729\u0003\u0002\u0002\u0002\u072c\u072a",
    "\u0003\u0002\u0002\u0002\u072c\u072b\u0003\u0002\u0002\u0002\u072d\u00eb",
    "\u0003\u0002\u0002\u0002\u072e\u072f\u0007\u0007\u0002\u0002\u072f\u0739",
    "\u0005\u01a8\u00d5\u0002\u0730\u0731\u0007\b\u0002\u0002\u0731\u0739",
    "\u0005\u01c2\u00e2\u0002\u0732\u0733\u0007\t\u0002\u0002\u0733\u0739",
    "\u0005\u00eex\u0002\u0734\u0735\u0007\n\u0002\u0002\u0735\u0739\u0005",
    "\u00eex\u0002\u0736\u0737\u0007\u000b\u0002\u0002\u0737\u0739\u0005",
    "\u00f2z\u0002\u0738\u072e\u0003\u0002\u0002\u0002\u0738\u0730\u0003",
    "\u0002\u0002\u0002\u0738\u0732\u0003\u0002\u0002\u0002\u0738\u0734\u0003",
    "\u0002\u0002\u0002\u0738\u0736\u0003\u0002\u0002\u0002\u0739\u00ed\u0003",
    "\u0002\u0002\u0002\u073a\u073c\u0005\u00caf\u0002\u073b\u073d\u0005",
    "\u00f0y\u0002\u073c\u073b\u0003\u0002\u0002\u0002\u073c\u073d\u0003",
    "\u0002\u0002\u0002\u073d\u00ef\u0003\u0002\u0002\u0002\u073e\u073f\u0007",
    "l\u0002\u0002\u073f\u0740\u0005\u014a\u00a6\u0002\u0740\u0741\u0007",
    "\r\u0002\u0002\u0741\u0746\u0005\u0190\u00c9\u0002\u0742\u0743\u0007",
    "\u0011\u0002\u0002\u0743\u0745\u0005\u0190\u00c9\u0002\u0744\u0742\u0003",
    "\u0002\u0002\u0002\u0745\u0748\u0003\u0002\u0002\u0002\u0746\u0744\u0003",
    "\u0002\u0002\u0002\u0746\u0747\u0003\u0002\u0002\u0002\u0747\u00f1\u0003",
    "\u0002\u0002\u0002\u0748\u0746\u0003\u0002\u0002\u0002\u0749\u074e\u0005",
    "\u0176\u00bc\u0002\u074a\u074b\u0007\u0011\u0002\u0002\u074b\u074d\u0005",
    "\u0176\u00bc\u0002\u074c\u074a\u0003\u0002\u0002\u0002\u074d\u0750\u0003",
    "\u0002\u0002\u0002\u074e\u074c\u0003\u0002\u0002\u0002\u074e\u074f\u0003",
    "\u0002\u0002\u0002\u074f\u0752\u0003\u0002\u0002\u0002\u0750\u074e\u0003",
    "\u0002\u0002\u0002\u0751\u0753\u0005\u00f4{\u0002\u0752\u0751\u0003",
    "\u0002\u0002\u0002\u0752\u0753\u0003\u0002\u0002\u0002\u0753\u00f3\u0003",
    "\u0002\u0002\u0002\u0754\u0755\u0007l\u0002\u0002\u0755\u0756\u0005",
    "\u014a\u00a6\u0002\u0756\u0758\u0007\r\u0002\u0002\u0757\u0759\u0007",
    "!\u0002\u0002\u0758\u0757\u0003\u0002\u0002\u0002\u0758\u0759\u0003",
    "\u0002\u0002\u0002\u0759\u075a\u0003\u0002\u0002\u0002\u075a\u075f\u0005",
    "\u0176\u00bc\u0002\u075b\u075c\u0007!\u0002\u0002\u075c\u075e\u0005",
    "\u0176\u00bc\u0002\u075d\u075b\u0003\u0002\u0002\u0002\u075e\u0761\u0003",
    "\u0002\u0002\u0002\u075f\u075d\u0003\u0002\u0002\u0002\u075f\u0760\u0003",
    "\u0002\u0002\u0002\u0760\u0764\u0003\u0002\u0002\u0002\u0761\u075f\u0003",
    "\u0002\u0002\u0002\u0762\u0763\u0007\u0011\u0002\u0002\u0763\u0765\u0005",
    "\u0176\u00bc\u0002\u0764\u0762\u0003\u0002\u0002\u0002\u0764\u0765\u0003",
    "\u0002\u0002\u0002\u0765\u00f5\u0003\u0002\u0002\u0002\u0766\u076b\u0005",
    "\u00ccg\u0002\u0767\u0768\u0007\u000f\u0002\u0002\u0768\u076a\u0005",
    "\u00ccg\u0002\u0769\u0767\u0003\u0002\u0002\u0002\u076a\u076d\u0003",
    "\u0002\u0002\u0002\u076b\u0769\u0003\u0002\u0002\u0002\u076b\u076c\u0003",
    "\u0002\u0002\u0002\u076c\u00f7\u0003\u0002\u0002\u0002\u076d\u076b\u0003",
    "\u0002\u0002\u0002\u076e\u0773\u0005\u00ceh\u0002\u076f\u0770\u0007",
    "\u000f\u0002\u0002\u0770\u0772\u0005\u00ceh\u0002\u0771\u076f\u0003",
    "\u0002\u0002\u0002\u0772\u0775\u0003\u0002\u0002\u0002\u0773\u0771\u0003",
    "\u0002\u0002\u0002\u0773\u0774\u0003\u0002\u0002\u0002\u0774\u00f9\u0003",
    "\u0002\u0002\u0002\u0775\u0773\u0003\u0002\u0002\u0002\u0776\u077b\u0005",
    "*\u0016\u0002\u0777\u077b\u0005,\u0017\u0002\u0778\u077b\u0005.\u0018",
    "\u0002\u0779\u077b\u00050\u0019\u0002\u077a\u0776\u0003\u0002\u0002",
    "\u0002\u077a\u0777\u0003\u0002\u0002\u0002\u077a\u0778\u0003\u0002\u0002",
    "\u0002\u077a\u0779\u0003\u0002\u0002\u0002\u077b\u00fb\u0003\u0002\u0002",
    "\u0002\u077c\u077d\u0007\u0006\u0002\u0002\u077d\u00fd\u0003\u0002\u0002",
    "\u0002\u077e\u0784\u0005\u0100\u0081\u0002\u077f\u0780\u0005\u015c\u00af",
    "\u0002\u0780\u0781\u0005\u0100\u0081\u0002\u0781\u0783\u0003\u0002\u0002",
    "\u0002\u0782\u077f\u0003\u0002\u0002\u0002\u0783\u0786\u0003\u0002\u0002",
    "\u0002\u0784\u0782\u0003\u0002\u0002\u0002\u0784\u0785\u0003\u0002\u0002",
    "\u0002\u0785\u00ff\u0003\u0002\u0002\u0002\u0786\u0784\u0003\u0002\u0002",
    "\u0002\u0787\u0788\u0007\u0007\u0002\u0002\u0788\u0792\u0005\u0192\u00ca",
    "\u0002\u0789\u078a\u0007\b\u0002\u0002\u078a\u0792\u0005\u01ae\u00d8",
    "\u0002\u078b\u078c\u0007\t\u0002\u0002\u078c\u0792\u0005\u0102\u0082",
    "\u0002\u078d\u078e\u0007\n\u0002\u0002\u078e\u0792\u0005\u0102\u0082",
    "\u0002\u078f\u0790\u0007\u000b\u0002\u0002\u0790\u0792\u0005\u0104\u0083",
    "\u0002\u0791\u0787\u0003\u0002\u0002\u0002\u0791\u0789\u0003\u0002\u0002",
    "\u0002\u0791\u078b\u0003\u0002\u0002\u0002\u0791\u078d\u0003\u0002\u0002",
    "\u0002\u0791\u078f\u0003\u0002\u0002\u0002\u0792\u0101\u0003\u0002\u0002",
    "\u0002\u0793\u0795\u0005\u0178\u00bd\u0002\u0794\u0796\u0007\u000e\u0002",
    "\u0002\u0795\u0794\u0003\u0002\u0002\u0002\u0795\u0796\u0003\u0002\u0002",
    "\u0002\u0796\u0798\u0003\u0002\u0002\u0002\u0797\u0799\u0005\u00f0y",
    "\u0002\u0798\u0797\u0003\u0002\u0002\u0002\u0798\u0799\u0003\u0002\u0002",
    "\u0002\u0799\u0103\u0003\u0002\u0002\u0002\u079a\u079c\u0005\u015e\u00b0",
    "\u0002\u079b\u079d\u0007\u000e\u0002\u0002\u079c\u079b\u0003\u0002\u0002",
    "\u0002\u079c\u079d\u0003\u0002\u0002\u0002\u079d\u079f\u0003\u0002\u0002",
    "\u0002\u079e\u07a0\u0005\u00f4{\u0002\u079f\u079e\u0003\u0002\u0002",
    "\u0002\u079f\u07a0\u0003\u0002\u0002\u0002\u07a0\u0105\u0003\u0002\u0002",
    "\u0002\u07a1\u07a7\u00058\u001d\u0002\u07a2\u07a3\u0005\u015c\u00af",
    "\u0002\u07a3\u07a4\u00058\u001d\u0002\u07a4\u07a6\u0003\u0002\u0002",
    "\u0002\u07a5\u07a2\u0003\u0002\u0002\u0002\u07a6\u07a9\u0003\u0002\u0002",
    "\u0002\u07a7\u07a5\u0003\u0002\u0002\u0002\u07a7\u07a8\u0003\u0002\u0002",
    "\u0002\u07a8\u0107\u0003\u0002\u0002\u0002\u07a9\u07a7\u0003\u0002\u0002",
    "\u0002\u07aa\u07b0\u00052\u001a\u0002\u07ab\u07ac\u0005\u015c\u00af",
    "\u0002\u07ac\u07ad\u00052\u001a\u0002\u07ad\u07af\u0003\u0002\u0002",
    "\u0002\u07ae\u07ab\u0003\u0002\u0002\u0002\u07af\u07b2\u0003\u0002\u0002",
    "\u0002\u07b0\u07ae\u0003\u0002\u0002\u0002\u07b0\u07b1\u0003\u0002\u0002",
    "\u0002\u07b1\u0109\u0003\u0002\u0002\u0002\u07b2\u07b0\u0003\u0002\u0002",
    "\u0002\u07b3\u07b9\u0005D#\u0002\u07b4\u07b5\u0005\u015c\u00af\u0002",
    "\u07b5\u07b6\u0005D#\u0002\u07b6\u07b8\u0003\u0002\u0002\u0002\u07b7",
    "\u07b4\u0003\u0002\u0002\u0002\u07b8\u07bb\u0003\u0002\u0002\u0002\u07b9",
    "\u07b7\u0003\u0002\u0002\u0002\u07b9\u07ba\u0003\u0002\u0002\u0002\u07ba",
    "\u010b\u0003\u0002\u0002\u0002\u07bb\u07b9\u0003\u0002\u0002\u0002\u07bc",
    "\u07c2\u0005T+\u0002\u07bd\u07be\u0005\u015c\u00af\u0002\u07be\u07bf",
    "\u0005T+\u0002\u07bf\u07c1\u0003\u0002\u0002\u0002\u07c0\u07bd\u0003",
    "\u0002\u0002\u0002\u07c1\u07c4\u0003\u0002\u0002\u0002\u07c2\u07c0\u0003",
    "\u0002\u0002\u0002\u07c2\u07c3\u0003\u0002\u0002\u0002\u07c3\u010d\u0003",
    "\u0002\u0002\u0002\u07c4\u07c2\u0003\u0002\u0002\u0002\u07c5\u07c6\u0007",
    "\u0014\u0002\u0002\u07c6\u07c7\u0005\u0110\u0089\u0002\u07c7\u07c8\u0007",
    "\u0010\u0002\u0002\u07c8\u07c9\u0005\u0110\u0089\u0002\u07c9\u07ca\u0007",
    "\u0015\u0002\u0002\u07ca\u07d4\u0003\u0002\u0002\u0002\u07cb\u07cc\u0007",
    "\u0014\u0002\u0002\u07cc\u07cd\u0005\u0112\u008a\u0002\u07cd\u07ce\u0007",
    "\u0015\u0002\u0002\u07ce\u07d4\u0003\u0002\u0002\u0002\u07cf\u07d0\u0007",
    "&\u0002\u0002\u07d0\u07d1\u0005\u0112\u008a\u0002\u07d1\u07d2\u0007",
    "$\u0002\u0002\u07d2\u07d4\u0003\u0002\u0002\u0002\u07d3\u07c5\u0003",
    "\u0002\u0002\u0002\u07d3\u07cb\u0003\u0002\u0002\u0002\u07d3\u07cf\u0003",
    "\u0002\u0002\u0002\u07d4\u010f\u0003\u0002\u0002\u0002\u07d5\u07e5\u0007",
    "\u00a3\u0002\u0002\u07d6\u07e5\u0007\u00a4\u0002\u0002\u07d7\u07e5\u0007",
    "\u00ad\u0002\u0002\u07d8\u07e5\u0007\u00ae\u0002\u0002\u07d9\u07e5\u0007",
    "\u00a2\u0002\u0002\u07da\u07e5\u0007\u00b2\u0002\u0002\u07db\u07e5\u0007",
    "\u00b1\u0002\u0002\u07dc\u07e5\u0007\u00ab\u0002\u0002\u07dd\u07e5\u0007",
    "\u00af\u0002\u0002\u07de\u07e5\u0007\u00b0\u0002\u0002\u07df\u07e5\u0007",
    "\u00a1\u0002\u0002\u07e0\u07e5\u0007\u00b3\u0002\u0002\u07e1\u07e5\u0007",
    "\u00b4\u0002\u0002\u07e2\u07e5\u0007\u00ac\u0002\u0002\u07e3\u07e5\u0005",
    "\u008cG\u0002\u07e4\u07d5\u0003\u0002\u0002\u0002\u07e4\u07d6\u0003",
    "\u0002\u0002\u0002\u07e4\u07d7\u0003\u0002\u0002\u0002\u07e4\u07d8\u0003",
    "\u0002\u0002\u0002\u07e4\u07d9\u0003\u0002\u0002\u0002\u07e4\u07da\u0003",
    "\u0002\u0002\u0002\u07e4\u07db\u0003\u0002\u0002\u0002\u07e4\u07dc\u0003",
    "\u0002\u0002\u0002\u07e4\u07dd\u0003\u0002\u0002\u0002\u07e4\u07de\u0003",
    "\u0002\u0002\u0002\u07e4\u07df\u0003\u0002\u0002\u0002\u07e4\u07e0\u0003",
    "\u0002\u0002\u0002\u07e4\u07e1\u0003\u0002\u0002\u0002\u07e4\u07e2\u0003",
    "\u0002\u0002\u0002\u07e4\u07e3\u0003\u0002\u0002\u0002\u07e5\u0111\u0003",
    "\u0002\u0002\u0002\u07e6\u07eb\u0005\u0110\u0089\u0002\u07e7\u07e8\u0007",
    "\u000f\u0002\u0002\u07e8\u07ea\u0005\u0110\u0089\u0002\u07e9\u07e7\u0003",
    "\u0002\u0002\u0002\u07ea\u07ed\u0003\u0002\u0002\u0002\u07eb\u07e9\u0003",
    "\u0002\u0002\u0002\u07eb\u07ec\u0003\u0002\u0002\u0002\u07ec\u0113\u0003",
    "\u0002\u0002\u0002\u07ed\u07eb\u0003\u0002\u0002\u0002\u07ee\u07ef\t",
    "\u0006\u0002\u0002\u07ef\u0115\u0003\u0002\u0002\u0002\u07f0\u07f1\u0007",
    "\u0012\u0002\u0002\u07f1\u07f2\u0005`1\u0002\u07f2\u07f3\u0007\u0013",
    "\u0002\u0002\u07f3\u0117\u0003\u0002\u0002\u0002\u07f4\u07f7\u0005\u0110",
    "\u0089\u0002\u07f5\u07f7\u0005\u011a\u008e\u0002\u07f6\u07f4\u0003\u0002",
    "\u0002\u0002\u07f6\u07f5\u0003\u0002\u0002\u0002\u07f7\u0119\u0003\u0002",
    "\u0002\u0002\u07f8\u07ff\u0005\u00aeX\u0002\u07f9\u07ff\u0005\u00a8",
    "U\u0002\u07fa\u07ff\u0005\u00aaV\u0002\u07fb\u07ff\u0005\u011e\u0090",
    "\u0002\u07fc\u07ff\u0005\u0120\u0091\u0002\u07fd\u07ff\u0005\u011c\u008f",
    "\u0002\u07fe\u07f8\u0003\u0002\u0002\u0002\u07fe\u07f9\u0003\u0002\u0002",
    "\u0002\u07fe\u07fa\u0003\u0002\u0002\u0002\u07fe\u07fb\u0003\u0002\u0002",
    "\u0002\u07fe\u07fc\u0003\u0002\u0002\u0002\u07fe\u07fd\u0003\u0002\u0002",
    "\u0002\u07ff\u011b\u0003\u0002\u0002\u0002\u0800\u0802\u0007x\u0002",
    "\u0002\u0801\u0800\u0003\u0002\u0002\u0002\u0801\u0802\u0003\u0002\u0002",
    "\u0002\u0802\u0803\u0003\u0002\u0002\u0002\u0803\u0805\u0007\u0012\u0002",
    "\u0002\u0804\u0806\u0005\u0122\u0092\u0002\u0805\u0804\u0003\u0002\u0002",
    "\u0002\u0805\u0806\u0003\u0002\u0002\u0002\u0806\u0807\u0003\u0002\u0002",
    "\u0002\u0807\u0808\u0007\u0013\u0002\u0002\u0808\u011d\u0003\u0002\u0002",
    "\u0002\u0809\u080b\u0007x\u0002\u0002\u080a\u0809\u0003\u0002\u0002",
    "\u0002\u080a\u080b\u0003\u0002\u0002\u0002\u080b\u0814\u0003\u0002\u0002",
    "\u0002\u080c\u080d\u0007&\u0002\u0002\u080d\u080e\u0005\u0124\u0093",
    "\u0002\u080e\u080f\u0007$\u0002\u0002\u080f\u0815\u0003\u0002\u0002",
    "\u0002\u0810\u0815\u0007)\u0002\u0002\u0811\u0812\u0007&\u0002\u0002",
    "\u0812\u0813\u0007\r\u0002\u0002\u0813\u0815\u0007$\u0002\u0002\u0814",
    "\u080c\u0003\u0002\u0002\u0002\u0814\u0810\u0003\u0002\u0002\u0002\u0814",
    "\u0811\u0003\u0002\u0002\u0002\u0815\u011f\u0003\u0002\u0002\u0002\u0816",
    "\u0818\u0007\u0016\u0002\u0002\u0817\u0819\u0005\u0124\u0093\u0002\u0818",
    "\u0817\u0003\u0002\u0002\u0002\u0818\u0819\u0003\u0002\u0002\u0002\u0819",
    "\u081a\u0003\u0002\u0002\u0002\u081a\u081b\u0007\u0017\u0002\u0002\u081b",
    "\u0121\u0003\u0002\u0002\u0002\u081c\u081d\u0005`1\u0002\u081d\u0826",
    "\u0007\u000f\u0002\u0002\u081e\u0823\u0005`1\u0002\u081f\u0820\u0007",
    "\u000f\u0002\u0002\u0820\u0822\u0005`1\u0002\u0821\u081f\u0003\u0002",
    "\u0002\u0002\u0822\u0825\u0003\u0002\u0002\u0002\u0823\u0821\u0003\u0002",
    "\u0002\u0002\u0823\u0824\u0003\u0002\u0002\u0002\u0824\u0827\u0003\u0002",
    "\u0002\u0002\u0825\u0823\u0003\u0002\u0002\u0002\u0826\u081e\u0003\u0002",
    "\u0002\u0002\u0826\u0827\u0003\u0002\u0002\u0002\u0827\u0123\u0003\u0002",
    "\u0002\u0002\u0828\u082d\u0005\u0126\u0094\u0002\u0829\u082a\u0007\u000f",
    "\u0002\u0002\u082a\u082c\u0005\u0126\u0094\u0002\u082b\u0829\u0003\u0002",
    "\u0002\u0002\u082c\u082f\u0003\u0002\u0002\u0002\u082d\u082b\u0003\u0002",
    "\u0002\u0002\u082d\u082e\u0003\u0002\u0002\u0002\u082e\u0125\u0003\u0002",
    "\u0002\u0002\u082f\u082d\u0003\u0002\u0002\u0002\u0830\u0831\u0005\u0128",
    "\u0095\u0002\u0831\u0832\u0007\r\u0002\u0002\u0832\u0833\u0005`1\u0002",
    "\u0833\u0127\u0003\u0002\u0002\u0002\u0834\u0837\u0005\u00d4k\u0002",
    "\u0835\u0837\u0007\u00ab\u0002\u0002\u0836\u0834\u0003\u0002\u0002\u0002",
    "\u0836\u0835\u0003\u0002\u0002\u0002\u0837\u0129\u0003\u0002\u0002\u0002",
    "\u0838\u0839\u0005`1\u0002\u0839\u083a\u0007\r\u0002\u0002\u083a\u083b",
    "\u0005`1\u0002\u083b\u0842\u0003\u0002\u0002\u0002\u083c\u083d\u0005",
    "`1\u0002\u083d\u083e\u0007\r\u0002\u0002\u083e\u0842\u0003\u0002\u0002",
    "\u0002\u083f\u0840\u0007\r\u0002\u0002\u0840\u0842\u0005`1\u0002\u0841",
    "\u0838\u0003\u0002\u0002\u0002\u0841\u083c\u0003\u0002\u0002\u0002\u0841",
    "\u083f\u0003\u0002\u0002\u0002\u0842\u012b\u0003\u0002\u0002\u0002\u0843",
    "\u0844\u0005\u00ccg\u0002\u0844\u0845\u0005\u0150\u00a9\u0002\u0845",
    "\u0846\u0005`1\u0002\u0846\u012d\u0003\u0002\u0002\u0002\u0847\u0848",
    "\b\u0098\u0001\u0002\u0848\u0849\u0005\u00ccg\u0002\u0849\u084e\u0003",
    "\u0002\u0002\u0002\u084a\u084b\f\u0003\u0002\u0002\u084b\u084d\u0005",
    "\u0088E\u0002\u084c\u084a\u0003\u0002\u0002\u0002\u084d\u0850\u0003",
    "\u0002\u0002\u0002\u084e\u084c\u0003\u0002\u0002\u0002\u084e\u084f\u0003",
    "\u0002\u0002\u0002\u084f\u012f\u0003\u0002\u0002\u0002\u0850\u084e\u0003",
    "\u0002\u0002\u0002\u0851\u0852\u0006\u00991\u0003\u0852\u0853\u0007",
    "\u00a7\u0002\u0002\u0853\u0856\u0005\u00e0q\u0002\u0854\u0856\u0005",
    "`1\u0002\u0855\u0851\u0003\u0002\u0002\u0002\u0855\u0854\u0003\u0002",
    "\u0002\u0002\u0856\u0131\u0003\u0002\u0002\u0002\u0857\u0858\u0005\u0134",
    "\u009b\u0002\u0858\u0859\u0005`1\u0002\u0859\u0860\u0003\u0002\u0002",
    "\u0002\u085a\u085b\u0005\u0134\u009b\u0002\u085b\u085c\u0007\u0016\u0002",
    "\u0002\u085c\u085d\u0005\u0106\u0084\u0002\u085d\u085e\u0007\u0017\u0002",
    "\u0002\u085e\u0860\u0003\u0002\u0002\u0002\u085f\u0857\u0003\u0002\u0002",
    "\u0002\u085f\u085a\u0003\u0002\u0002\u0002\u0860\u0133\u0003\u0002\u0002",
    "\u0002\u0861\u0862\u0005\u0136\u009c\u0002\u0862\u0863\u0005\u008eH",
    "\u0002\u0863\u0864\u00071\u0002\u0002\u0864\u0865\u0005\u008eH\u0002",
    "\u0865\u0135\u0003\u0002\u0002\u0002\u0866\u086d\u0005\u00ccg\u0002",
    "\u0867\u0869\u0007\u0012\u0002\u0002\u0868\u086a\u0005\u00f6|\u0002",
    "\u0869\u0868\u0003\u0002\u0002\u0002\u0869\u086a\u0003\u0002\u0002\u0002",
    "\u086a\u086b\u0003\u0002\u0002\u0002\u086b\u086d\u0007\u0013\u0002\u0002",
    "\u086c\u0866\u0003\u0002\u0002\u0002\u086c\u0867\u0003\u0002\u0002\u0002",
    "\u086d\u0137\u0003\u0002\u0002\u0002\u086e\u0871\u0005h5\u0002\u086f",
    "\u0871\u0005\u0132\u009a\u0002\u0870\u086e\u0003\u0002\u0002\u0002\u0870",
    "\u086f\u0003\u0002\u0002\u0002\u0871\u0139\u0003\u0002\u0002\u0002\u0872",
    "\u0873\u0007\u0087\u0002\u0002\u0873\u0874\u0007F\u0002\u0002\u0874",
    "\u0875\u0007l\u0002\u0002\u0875\u0876\u0005`1\u0002\u0876\u013b\u0003",
    "\u0002\u0002\u0002\u0877\u0878\u0007\u0087\u0002\u0002\u0878\u0879\u0007",
    "\u007f\u0002\u0002\u0879\u087a\u0007l\u0002\u0002\u087a\u087b\u0005",
    "`1\u0002\u087b\u013d\u0003\u0002\u0002\u0002\u087c\u0881\u0005\u0140",
    "\u00a1\u0002\u087d\u087e\u0007\u000f\u0002\u0002\u087e\u0880\u0005\u0140",
    "\u00a1\u0002\u087f\u087d\u0003\u0002\u0002\u0002\u0880\u0883\u0003\u0002",
    "\u0002\u0002\u0881\u087f\u0003\u0002\u0002\u0002\u0881\u0882\u0003\u0002",
    "\u0002\u0002\u0882\u013f\u0003\u0002\u0002\u0002\u0883\u0881\u0003\u0002",
    "\u0002\u0002\u0884\u0889\u0005\u00ccg\u0002\u0885\u0886\u0007\u0011",
    "\u0002\u0002\u0886\u0888\u0005\u00ccg\u0002\u0887\u0885\u0003\u0002",
    "\u0002\u0002\u0888\u088b\u0003\u0002\u0002\u0002\u0889\u0887\u0003\u0002",
    "\u0002\u0002\u0889\u088a\u0003\u0002\u0002\u0002\u088a\u088d\u0003\u0002",
    "\u0002\u0002\u088b\u0889\u0003\u0002\u0002\u0002\u088c\u088e\t\u0007",
    "\u0002\u0002\u088d\u088c\u0003\u0002\u0002\u0002\u088d\u088e\u0003\u0002",
    "\u0002\u0002\u088e\u0141\u0003\u0002\u0002\u0002\u088f\u0896\u0007\u001e",
    "\u0002\u0002\u0890\u0896\u0007\u001f\u0002\u0002\u0891\u0896\u0005\u0152",
    "\u00aa\u0002\u0892\u0896\u0005\u0154\u00ab\u0002\u0893\u0896\u0005\u0156",
    "\u00ac\u0002\u0894\u0896\u0005\u0158\u00ad\u0002\u0895\u088f\u0003\u0002",
    "\u0002\u0002\u0895\u0890\u0003\u0002\u0002\u0002\u0895\u0891\u0003\u0002",
    "\u0002\u0002\u0895\u0892\u0003\u0002\u0002\u0002\u0895\u0893\u0003\u0002",
    "\u0002\u0002\u0895\u0894\u0003\u0002\u0002\u0002\u0896\u0143\u0003\u0002",
    "\u0002\u0002\u0897\u0898\t\b\u0002\u0002\u0898\u0145\u0003\u0002\u0002",
    "\u0002\u0899\u089a\u0007\u00a7\u0002\u0002\u089a\u089b\u0006\u00a42",
    "\u0003\u089b\u0147\u0003\u0002\u0002\u0002\u089c\u089d\u0007\u00a7\u0002",
    "\u0002\u089d\u089e\u0006\u00a53\u0003\u089e\u0149\u0003\u0002\u0002",
    "\u0002\u089f\u08a0\u0007\u00a7\u0002\u0002\u08a0\u08a1\u0006\u00a64",
    "\u0003\u08a1\u014b\u0003\u0002\u0002\u0002\u08a2\u08a3\u0007\u00a7\u0002",
    "\u0002\u08a3\u08a4\u0006\u00a75\u0003\u08a4\u014d\u0003\u0002\u0002",
    "\u0002\u08a5\u08a6\u0007\u00a7\u0002\u0002\u08a6\u08a7\u0006\u00a86",
    "\u0003\u08a7\u014f\u0003\u0002\u0002\u0002\u08a8\u08a9\u0007*\u0002",
    "\u0002\u08a9\u0151\u0003\u0002\u0002\u0002\u08aa\u08ab\u0007 \u0002",
    "\u0002\u08ab\u0153\u0003\u0002\u0002\u0002\u08ac\u08ad\u0007!\u0002",
    "\u0002\u08ad\u0155\u0003\u0002\u0002\u0002\u08ae\u08af\u0007\"\u0002",
    "\u0002\u08af\u0157\u0003\u0002\u0002\u0002\u08b0\u08b1\t\t\u0002\u0002",
    "\u08b1\u0159\u0003\u0002\u0002\u0002\u08b2\u08b3\u0003\u0002\u0002\u0002",
    "\u08b3\u015b\u0003\u0002\u0002\u0002\u08b4\u08b5\u0003\u0002\u0002\u0002",
    "\u08b5\u015d\u0003\u0002\u0002\u0002\u08b6\u08b7\u0007\u008a\u0002\u0002",
    "\u08b7\u08b8\u0005\u0160\u00b1\u0002\u08b8\u08b9\u0007\u000e\u0002\u0002",
    "\u08b9\u08be\u0003\u0002\u0002\u0002\u08ba\u08bb\u0005\u0160\u00b1\u0002",
    "\u08bb\u08bc\u0007\u000e\u0002\u0002\u08bc\u08be\u0003\u0002\u0002\u0002",
    "\u08bd\u08b6\u0003\u0002\u0002\u0002\u08bd\u08ba\u0003\u0002\u0002\u0002",
    "\u08be\u015f\u0003\u0002\u0002\u0002\u08bf\u08c0\b\u00b1\u0001\u0002",
    "\u08c0\u08c1\u0005\u0162\u00b2\u0002\u08c1\u08c6\u0003\u0002\u0002\u0002",
    "\u08c2\u08c3\f\u0003\u0002\u0002\u08c3\u08c5\u0005\u0168\u00b5\u0002",
    "\u08c4\u08c2\u0003\u0002\u0002\u0002\u08c5\u08c8\u0003\u0002\u0002\u0002",
    "\u08c6\u08c4\u0003\u0002\u0002\u0002\u08c6\u08c7\u0003\u0002\u0002\u0002",
    "\u08c7\u0161\u0003\u0002\u0002\u0002\u08c8\u08c6\u0003\u0002\u0002\u0002",
    "\u08c9\u08d1\u0005\u0164\u00b3\u0002\u08ca\u08d1\u0005\u0166\u00b4\u0002",
    "\u08cb\u08d1\u0005\u0170\u00b9\u0002\u08cc\u08d1\u0005\u0172\u00ba\u0002",
    "\u08cd\u08d1\u0005\u0174\u00bb\u0002\u08ce\u08d1\u0005\u016a\u00b6\u0002",
    "\u08cf\u08d1\u0005\u016e\u00b8\u0002\u08d0\u08c9\u0003\u0002\u0002\u0002",
    "\u08d0\u08ca\u0003\u0002\u0002\u0002\u08d0\u08cb\u0003\u0002\u0002\u0002",
    "\u08d0\u08cc\u0003\u0002\u0002\u0002\u08d0\u08cd\u0003\u0002\u0002\u0002",
    "\u08d0\u08ce\u0003\u0002\u0002\u0002\u08d0\u08cf\u0003\u0002\u0002\u0002",
    "\u08d1\u0163\u0003\u0002\u0002\u0002\u08d2\u08d3\u0005\u0114\u008b\u0002",
    "\u08d3\u0165\u0003\u0002\u0002\u0002\u08d4\u08d5\u0005\u0146\u00a4\u0002",
    "\u08d5\u08d6\u0005\u016a\u00b6\u0002\u08d6\u0167\u0003\u0002\u0002\u0002",
    "\u08d7\u08d8\u0007\u0011\u0002\u0002\u08d8\u08dd\u0005\u016a\u00b6\u0002",
    "\u08d9\u08da\u0007\u0011\u0002\u0002\u08da\u08dd\u0005\u0176\u00bc\u0002",
    "\u08db\u08dd\u0005\u016e\u00b8\u0002\u08dc\u08d7\u0003\u0002\u0002\u0002",
    "\u08dc\u08d9\u0003\u0002\u0002\u0002\u08dc\u08db\u0003\u0002\u0002\u0002",
    "\u08dd\u0169\u0003\u0002\u0002\u0002\u08de\u08df\u0005\u0176\u00bc\u0002",
    "\u08df\u08e1\u0007\u0012\u0002\u0002\u08e0\u08e2\u0005\u016c\u00b7\u0002",
    "\u08e1\u08e0\u0003\u0002\u0002\u0002\u08e1\u08e2\u0003\u0002\u0002\u0002",
    "\u08e2\u08e3\u0003\u0002\u0002\u0002\u08e3\u08e4\u0007\u0013\u0002\u0002",
    "\u08e4\u016b\u0003\u0002\u0002\u0002\u08e5\u08e6\b\u00b7\u0001\u0002",
    "\u08e6\u08e7\u0005\u0160\u00b1\u0002\u08e7\u08ed\u0003\u0002\u0002\u0002",
    "\u08e8\u08e9\f\u0003\u0002\u0002\u08e9\u08ea\u0007\u000f\u0002\u0002",
    "\u08ea\u08ec\u0005\u0160\u00b1\u0002\u08eb\u08e8\u0003\u0002\u0002\u0002",
    "\u08ec\u08ef\u0003\u0002\u0002\u0002\u08ed\u08eb\u0003\u0002\u0002\u0002",
    "\u08ed\u08ee\u0003\u0002\u0002\u0002\u08ee\u016d\u0003\u0002\u0002\u0002",
    "\u08ef\u08ed\u0003\u0002\u0002\u0002\u08f0\u08f1\u0007\u0014\u0002\u0002",
    "\u08f1\u08f2\u0005\u0160\u00b1\u0002\u08f2\u08f3\u0007\u0015\u0002\u0002",
    "\u08f3\u016f\u0003\u0002\u0002\u0002\u08f4\u08f5\u0007\u0012\u0002\u0002",
    "\u08f5\u08f6\u0005\u0160\u00b1\u0002\u08f6\u08f7\u0007\u0013\u0002\u0002",
    "\u08f7\u0171\u0003\u0002\u0002\u0002\u08f8\u08f9\u0005\u0176\u00bc\u0002",
    "\u08f9\u0173\u0003\u0002\u0002\u0002\u08fa\u0900\u0007\u00ad\u0002\u0002",
    "\u08fb\u0900\u0007\u00af\u0002\u0002\u08fc\u0900\u0007\u00ab\u0002\u0002",
    "\u08fd\u0900\u0007\u00a1\u0002\u0002\u08fe\u0900\u0007\u00a2\u0002\u0002",
    "\u08ff\u08fa\u0003\u0002\u0002\u0002\u08ff\u08fb\u0003\u0002\u0002\u0002",
    "\u08ff\u08fc\u0003\u0002\u0002\u0002\u08ff\u08fd\u0003\u0002\u0002\u0002",
    "\u08ff\u08fe\u0003\u0002\u0002\u0002\u0900\u0175\u0003\u0002\u0002\u0002",
    "\u0901\u0902\t\n\u0002\u0002\u0902\u0177\u0003\u0002\u0002\u0002\u0903",
    "\u0904\u0007\u008a\u0002\u0002\u0904\u0907\u0005\u017a\u00be\u0002\u0905",
    "\u0907\u0005\u017a\u00be\u0002\u0906\u0903\u0003\u0002\u0002\u0002\u0906",
    "\u0905\u0003\u0002\u0002\u0002\u0907\u0179\u0003\u0002\u0002\u0002\u0908",
    "\u0909\b\u00be\u0001\u0002\u0909\u090a\u0005\u017c\u00bf\u0002\u090a",
    "\u090f\u0003\u0002\u0002\u0002\u090b\u090c\f\u0003\u0002\u0002\u090c",
    "\u090e\u0005\u0180\u00c1\u0002\u090d\u090b\u0003\u0002\u0002\u0002\u090e",
    "\u0911\u0003\u0002\u0002\u0002\u090f\u090d\u0003\u0002\u0002\u0002\u090f",
    "\u0910\u0003\u0002\u0002\u0002\u0910\u017b\u0003\u0002\u0002\u0002\u0911",
    "\u090f\u0003\u0002\u0002\u0002\u0912\u0918\u0005\u017e\u00c0\u0002\u0913",
    "\u0918\u0005\u018a\u00c6\u0002\u0914\u0918\u0005\u018c\u00c7\u0002\u0915",
    "\u0918\u0005\u018e\u00c8\u0002\u0916\u0918\u0005\u0182\u00c2\u0002\u0917",
    "\u0912\u0003\u0002\u0002\u0002\u0917\u0913\u0003\u0002\u0002\u0002\u0917",
    "\u0914\u0003\u0002\u0002\u0002\u0917\u0915\u0003\u0002\u0002\u0002\u0917",
    "\u0916\u0003\u0002\u0002\u0002\u0918\u017d\u0003\u0002\u0002\u0002\u0919",
    "\u091a\u0005\u0114\u008b\u0002\u091a\u017f\u0003\u0002\u0002\u0002\u091b",
    "\u091c\u0007\u0011\u0002\u0002\u091c\u0922\u0005\u0182\u00c2\u0002\u091d",
    "\u091e\u0007\u0014\u0002\u0002\u091e\u091f\u0005\u017a\u00be\u0002\u091f",
    "\u0920\u0007\u0015\u0002\u0002\u0920\u0922\u0003\u0002\u0002\u0002\u0921",
    "\u091b\u0003\u0002\u0002\u0002\u0921\u091d\u0003\u0002\u0002\u0002\u0922",
    "\u0181\u0003\u0002\u0002\u0002\u0923\u0924\u0005\u0190\u00c9\u0002\u0924",
    "\u0926\u0007\u0012\u0002\u0002\u0925\u0927\u0005\u0184\u00c3\u0002\u0926",
    "\u0925\u0003\u0002\u0002\u0002\u0926\u0927\u0003\u0002\u0002\u0002\u0927",
    "\u0928\u0003\u0002\u0002\u0002\u0928\u0929\u0007\u0013\u0002\u0002\u0929",
    "\u0183\u0003\u0002\u0002\u0002\u092a\u0931\u0005\u0186\u00c4\u0002\u092b",
    "\u0931\u0005\u0188\u00c5\u0002\u092c\u092d\u0005\u0186\u00c4\u0002\u092d",
    "\u092e\u0007\u000f\u0002\u0002\u092e\u092f\u0005\u0188\u00c5\u0002\u092f",
    "\u0931\u0003\u0002\u0002\u0002\u0930\u092a\u0003\u0002\u0002\u0002\u0930",
    "\u092b\u0003\u0002\u0002\u0002\u0930\u092c\u0003\u0002\u0002\u0002\u0931",
    "\u0185\u0003\u0002\u0002\u0002\u0932\u0933\b\u00c4\u0001\u0002\u0933",
    "\u0934\u0005\u017a\u00be\u0002\u0934\u093a\u0003\u0002\u0002\u0002\u0935",
    "\u0936\f\u0003\u0002\u0002\u0936\u0937\u0007\u000f\u0002\u0002\u0937",
    "\u0939\u0005\u017a\u00be\u0002\u0938\u0935\u0003\u0002\u0002\u0002\u0939",
    "\u093c\u0003\u0002\u0002\u0002\u093a\u0938\u0003\u0002\u0002\u0002\u093a",
    "\u093b\u0003\u0002\u0002\u0002\u093b\u0187\u0003\u0002\u0002\u0002\u093c",
    "\u093a\u0003\u0002\u0002\u0002\u093d\u093e\b\u00c5\u0001\u0002\u093e",
    "\u093f\u0005\u0190\u00c9\u0002\u093f\u0940\u0007*\u0002\u0002\u0940",
    "\u0941\u0005\u017a\u00be\u0002\u0941\u094a\u0003\u0002\u0002\u0002\u0942",
    "\u0943\f\u0003\u0002\u0002\u0943\u0944\u0007\u000f\u0002\u0002\u0944",
    "\u0945\u0005\u0190\u00c9\u0002\u0945\u0946\u0007*\u0002\u0002\u0946",
    "\u0947\u0005\u017a\u00be\u0002\u0947\u0949\u0003\u0002\u0002\u0002\u0948",
    "\u0942\u0003\u0002\u0002\u0002\u0949\u094c\u0003\u0002\u0002\u0002\u094a",
    "\u0948\u0003\u0002\u0002\u0002\u094a\u094b\u0003\u0002\u0002\u0002\u094b",
    "\u0189\u0003\u0002\u0002\u0002\u094c\u094a\u0003\u0002\u0002\u0002\u094d",
    "\u094e\u0007\u0012\u0002\u0002\u094e\u094f\u0005\u017a\u00be\u0002\u094f",
    "\u0950\u0007\u0013\u0002\u0002\u0950\u018b\u0003\u0002\u0002\u0002\u0951",
    "\u0952\b\u00c7\u0001\u0002\u0952\u0955\u0007\u00a9\u0002\u0002\u0953",
    "\u0955\u0005\u0190\u00c9\u0002\u0954\u0951\u0003\u0002\u0002\u0002\u0954",
    "\u0953\u0003\u0002\u0002\u0002\u0955\u095b\u0003\u0002\u0002\u0002\u0956",
    "\u0957\f\u0003\u0002\u0002\u0957\u0958\u0007\u0011\u0002\u0002\u0958",
    "\u095a\u0005\u0190\u00c9\u0002\u0959\u0956\u0003\u0002\u0002\u0002\u095a",
    "\u095d\u0003\u0002\u0002\u0002\u095b\u0959\u0003\u0002\u0002\u0002\u095b",
    "\u095c\u0003\u0002\u0002\u0002\u095c\u018d\u0003\u0002\u0002\u0002\u095d",
    "\u095b\u0003\u0002\u0002\u0002\u095e\u0964\u0007\u00ad\u0002\u0002\u095f",
    "\u0964\u0007\u00af\u0002\u0002\u0960\u0964\u0007\u00ab\u0002\u0002\u0961",
    "\u0964\u0007\u00a1\u0002\u0002\u0962\u0964\u0007\u00a2\u0002\u0002\u0963",
    "\u095e\u0003\u0002\u0002\u0002\u0963\u095f\u0003\u0002\u0002\u0002\u0963",
    "\u0960\u0003\u0002\u0002\u0002\u0963\u0961\u0003\u0002\u0002\u0002\u0963",
    "\u0962\u0003\u0002\u0002\u0002\u0964\u018f\u0003\u0002\u0002\u0002\u0965",
    "\u0966\t\u000b\u0002\u0002\u0966\u0191\u0003\u0002\u0002\u0002\u0967",
    "\u0968\u0007\u008a\u0002\u0002\u0968\u0969\u0005\u0194\u00cb\u0002\u0969",
    "\u096a\u0007\u000e\u0002\u0002\u096a\u096f\u0003\u0002\u0002\u0002\u096b",
    "\u096c\u0005\u0194\u00cb\u0002\u096c\u096d\u0007\u000e\u0002\u0002\u096d",
    "\u096f\u0003\u0002\u0002\u0002\u096e\u0967\u0003\u0002\u0002\u0002\u096e",
    "\u096b\u0003\u0002\u0002\u0002\u096f\u0193\u0003\u0002\u0002\u0002\u0970",
    "\u0971\b\u00cb\u0001\u0002\u0971\u0972\u0005\u0196\u00cc\u0002\u0972",
    "\u0977\u0003\u0002\u0002\u0002\u0973\u0974\f\u0003\u0002\u0002\u0974",
    "\u0976\u0005\u019c\u00cf\u0002\u0975\u0973\u0003\u0002\u0002\u0002\u0976",
    "\u0979\u0003\u0002\u0002\u0002\u0977\u0975\u0003\u0002\u0002\u0002\u0977",
    "\u0978\u0003\u0002\u0002\u0002\u0978\u0195\u0003\u0002\u0002\u0002\u0979",
    "\u0977\u0003\u0002\u0002\u0002\u097a\u0980\u0005\u0198\u00cd\u0002\u097b",
    "\u0980\u0005\u019a\u00ce\u0002\u097c\u0980\u0005\u01a4\u00d3\u0002\u097d",
    "\u0980\u0005\u01a6\u00d4\u0002\u097e\u0980\u0005\u01aa\u00d6\u0002\u097f",
    "\u097a\u0003\u0002\u0002\u0002\u097f\u097b\u0003\u0002\u0002\u0002\u097f",
    "\u097c\u0003\u0002\u0002\u0002\u097f\u097d\u0003\u0002\u0002\u0002\u097f",
    "\u097e\u0003\u0002\u0002\u0002\u0980\u0197\u0003\u0002\u0002\u0002\u0981",
    "\u0982\u0005\u0114\u008b\u0002\u0982\u0199\u0003\u0002\u0002\u0002\u0983",
    "\u0984\u0005\u0146\u00a4\u0002\u0984\u0985\u0005\u019e\u00d0\u0002\u0985",
    "\u019b\u0003\u0002\u0002\u0002\u0986\u0987\u0007\u0011\u0002\u0002\u0987",
    "\u098a\u0005\u019e\u00d0\u0002\u0988\u098a\u0005\u01a2\u00d2\u0002\u0989",
    "\u0986\u0003\u0002\u0002\u0002\u0989\u0988\u0003\u0002\u0002\u0002\u098a",
    "\u019d\u0003\u0002\u0002\u0002\u098b\u098c\u0005\u01ac\u00d7\u0002\u098c",
    "\u098e\u0007\u0012\u0002\u0002\u098d\u098f\u0005\u01a0\u00d1\u0002\u098e",
    "\u098d\u0003\u0002\u0002\u0002\u098e\u098f\u0003\u0002\u0002\u0002\u098f",
    "\u0990\u0003\u0002\u0002\u0002\u0990\u0991\u0007\u0013\u0002\u0002\u0991",
    "\u019f\u0003\u0002\u0002\u0002\u0992\u0993\b\u00d1\u0001\u0002\u0993",
    "\u0994\u0005\u0194\u00cb\u0002\u0994\u099a\u0003\u0002\u0002\u0002\u0995",
    "\u0996\f\u0003\u0002\u0002\u0996\u0997\u0007\u000f\u0002\u0002\u0997",
    "\u0999\u0005\u0194\u00cb\u0002\u0998\u0995\u0003\u0002\u0002\u0002\u0999",
    "\u099c\u0003\u0002\u0002\u0002\u099a\u0998\u0003\u0002\u0002\u0002\u099a",
    "\u099b\u0003\u0002\u0002\u0002\u099b\u01a1\u0003\u0002\u0002\u0002\u099c",
    "\u099a\u0003\u0002\u0002\u0002\u099d\u099e\u0007\u0014\u0002\u0002\u099e",
    "\u099f\u0005\u0194\u00cb\u0002\u099f\u09a0\u0007\u0015\u0002\u0002\u09a0",
    "\u01a3\u0003\u0002\u0002\u0002\u09a1\u09a2\u0007\u0012\u0002\u0002\u09a2",
    "\u09a3\u0005\u0194\u00cb\u0002\u09a3\u09a4\u0007\u0013\u0002\u0002\u09a4",
    "\u01a5\u0003\u0002\u0002\u0002\u09a5\u09a6\b\u00d4\u0001\u0002\u09a6",
    "\u09a7\u0005\u01ac\u00d7\u0002\u09a7\u09ad\u0003\u0002\u0002\u0002\u09a8",
    "\u09a9\f\u0003\u0002\u0002\u09a9\u09aa\u0007\u0011\u0002\u0002\u09aa",
    "\u09ac\u0005\u01ac\u00d7\u0002\u09ab\u09a8\u0003\u0002\u0002\u0002\u09ac",
    "\u09af\u0003\u0002\u0002\u0002\u09ad\u09ab\u0003\u0002\u0002\u0002\u09ad",
    "\u09ae\u0003\u0002\u0002\u0002\u09ae\u01a7\u0003\u0002\u0002\u0002\u09af",
    "\u09ad\u0003\u0002\u0002\u0002\u09b0\u09b1\b\u00d5\u0001\u0002\u09b1",
    "\u09b2\u0005\u01a6\u00d4\u0002\u09b2\u09b7\u0003\u0002\u0002\u0002\u09b3",
    "\u09b4\f\u0003\u0002\u0002\u09b4\u09b6\u0007\u00a9\u0002\u0002\u09b5",
    "\u09b3\u0003\u0002\u0002\u0002\u09b6\u09b9\u0003\u0002\u0002\u0002\u09b7",
    "\u09b5\u0003\u0002\u0002\u0002\u09b7\u09b8\u0003\u0002\u0002\u0002\u09b8",
    "\u01a9\u0003\u0002\u0002\u0002\u09b9\u09b7\u0003\u0002\u0002\u0002\u09ba",
    "\u09c0\u0007\u00ad\u0002\u0002\u09bb\u09c0\u0007\u00af\u0002\u0002\u09bc",
    "\u09c0\u0007\u00ab\u0002\u0002\u09bd\u09c0\u0007\u00a1\u0002\u0002\u09be",
    "\u09c0\u0007\u00a2\u0002\u0002\u09bf\u09ba\u0003\u0002\u0002\u0002\u09bf",
    "\u09bb\u0003\u0002\u0002\u0002\u09bf\u09bc\u0003\u0002\u0002\u0002\u09bf",
    "\u09bd\u0003\u0002\u0002\u0002\u09bf\u09be\u0003\u0002\u0002\u0002\u09c0",
    "\u01ab\u0003\u0002\u0002\u0002\u09c1\u09c2\t\f\u0002\u0002\u09c2\u01ad",
    "\u0003\u0002\u0002\u0002\u09c3\u09c4\u0007\u008a\u0002\u0002\u09c4\u09c5",
    "\u0005\u01b0\u00d9\u0002\u09c5\u09c6\u0007\u000e\u0002\u0002\u09c6\u09cb",
    "\u0003\u0002\u0002\u0002\u09c7\u09c8\u0005\u01b0\u00d9\u0002\u09c8\u09c9",
    "\u0007\u000e\u0002\u0002\u09c9\u09cb\u0003\u0002\u0002\u0002\u09ca\u09c3",
    "\u0003\u0002\u0002\u0002\u09ca\u09c7\u0003\u0002\u0002\u0002\u09cb\u01af",
    "\u0003\u0002\u0002\u0002\u09cc\u09cd\b\u00d9\u0001\u0002\u09cd\u09ce",
    "\u0005\u01b2\u00da\u0002\u09ce\u09d3\u0003\u0002\u0002\u0002\u09cf\u09d0",
    "\f\u0003\u0002\u0002\u09d0\u09d2\u0005\u01b8\u00dd\u0002\u09d1\u09cf",
    "\u0003\u0002\u0002\u0002\u09d2\u09d5\u0003\u0002\u0002\u0002\u09d3\u09d1",
    "\u0003\u0002\u0002\u0002\u09d3\u09d4\u0003\u0002\u0002\u0002\u09d4\u01b1",
    "\u0003\u0002\u0002\u0002\u09d5\u09d3\u0003\u0002\u0002\u0002\u09d6\u09dc",
    "\u0005\u01b4\u00db\u0002\u09d7\u09dc\u0005\u01b6\u00dc\u0002\u09d8\u09dc",
    "\u0005\u01c0\u00e1\u0002\u09d9\u09dc\u0005\u01c2\u00e2\u0002\u09da\u09dc",
    "\u0005\u01c4\u00e3\u0002\u09db\u09d6\u0003\u0002\u0002\u0002\u09db\u09d7",
    "\u0003\u0002\u0002\u0002\u09db\u09d8\u0003\u0002\u0002\u0002\u09db\u09d9",
    "\u0003\u0002\u0002\u0002\u09db\u09da\u0003\u0002\u0002\u0002\u09dc\u01b3",
    "\u0003\u0002\u0002\u0002\u09dd\u09de\u0005\u0114\u008b\u0002\u09de\u01b5",
    "\u0003\u0002\u0002\u0002\u09df\u09e0\u0005\u0146\u00a4\u0002\u09e0\u09e1",
    "\u0005\u01ba\u00de\u0002\u09e1\u01b7\u0003\u0002\u0002\u0002\u09e2\u09e3",
    "\u0007\u0011\u0002\u0002\u09e3\u09e6\u0005\u01ba\u00de\u0002\u09e4\u09e6",
    "\u0005\u01be\u00e0\u0002\u09e5\u09e2\u0003\u0002\u0002\u0002\u09e5\u09e4",
    "\u0003\u0002\u0002\u0002\u09e6\u01b9\u0003\u0002\u0002\u0002\u09e7\u09e8",
    "\u0005\u01c6\u00e4\u0002\u09e8\u09ea\u0007\u0012\u0002\u0002\u09e9\u09eb",
    "\u0005\u01bc\u00df\u0002\u09ea\u09e9\u0003\u0002\u0002\u0002\u09ea\u09eb",
    "\u0003\u0002\u0002\u0002\u09eb\u09ec\u0003\u0002\u0002\u0002\u09ec\u09ed",
    "\u0007\u0013\u0002\u0002\u09ed\u01bb\u0003\u0002\u0002\u0002\u09ee\u09ef",
    "\b\u00df\u0001\u0002\u09ef\u09f0\u0005\u01b0\u00d9\u0002\u09f0\u09f6",
    "\u0003\u0002\u0002\u0002\u09f1\u09f2\f\u0003\u0002\u0002\u09f2\u09f3",
    "\u0007\u000f\u0002\u0002\u09f3\u09f5\u0005\u01b0\u00d9\u0002\u09f4\u09f1",
    "\u0003\u0002\u0002\u0002\u09f5\u09f8\u0003\u0002\u0002\u0002\u09f6\u09f4",
    "\u0003\u0002\u0002\u0002\u09f6\u09f7\u0003\u0002\u0002\u0002\u09f7\u01bd",
    "\u0003\u0002\u0002\u0002\u09f8\u09f6\u0003\u0002\u0002\u0002\u09f9\u09fa",
    "\u0007\u0014\u0002\u0002\u09fa\u09fb\u0005\u01b0\u00d9\u0002\u09fb\u09fc",
    "\u0007\u0015\u0002\u0002\u09fc\u01bf\u0003\u0002\u0002\u0002\u09fd\u09fe",
    "\u0007\u0012\u0002\u0002\u09fe\u09ff\u0005\u01b0\u00d9\u0002\u09ff\u0a00",
    "\u0007\u0013\u0002\u0002\u0a00\u01c1\u0003\u0002\u0002\u0002\u0a01\u0a02",
    "\b\u00e2\u0001\u0002\u0a02\u0a05\u0007\u00a9\u0002\u0002\u0a03\u0a05",
    "\u0005\u01c6\u00e4\u0002\u0a04\u0a01\u0003\u0002\u0002\u0002\u0a04\u0a03",
    "\u0003\u0002\u0002\u0002\u0a05\u0a0b\u0003\u0002\u0002\u0002\u0a06\u0a07",
    "\f\u0003\u0002\u0002\u0a07\u0a08\u0007\u0011\u0002\u0002\u0a08\u0a0a",
    "\u0005\u01c6\u00e4\u0002\u0a09\u0a06\u0003\u0002\u0002\u0002\u0a0a\u0a0d",
    "\u0003\u0002\u0002\u0002\u0a0b\u0a09\u0003\u0002\u0002\u0002\u0a0b\u0a0c",
    "\u0003\u0002\u0002\u0002\u0a0c\u01c3\u0003\u0002\u0002\u0002\u0a0d\u0a0b",
    "\u0003\u0002\u0002\u0002\u0a0e\u0a14\u0007\u00ad\u0002\u0002\u0a0f\u0a14",
    "\u0007\u00af\u0002\u0002\u0a10\u0a14\u0007\u00ab\u0002\u0002\u0a11\u0a14",
    "\u0007\u00a1\u0002\u0002\u0a12\u0a14\u0007\u00a2\u0002\u0002\u0a13\u0a0e",
    "\u0003\u0002\u0002\u0002\u0a13\u0a0f\u0003\u0002\u0002\u0002\u0a13\u0a10",
    "\u0003\u0002\u0002\u0002\u0a13\u0a11\u0003\u0002\u0002\u0002\u0a13\u0a12",
    "\u0003\u0002\u0002\u0002\u0a14\u01c5\u0003\u0002\u0002\u0002\u0a15\u0a16",
    "\t\r\u0002\u0002\u0a16\u01c7\u0003\u0002\u0002\u0002\u0a17\u0a1a\u0005",
    "\u01ca\u00e6\u0002\u0a18\u0a1a\u0005\u01cc\u00e7\u0002\u0a19\u0a17\u0003",
    "\u0002\u0002\u0002\u0a19\u0a18\u0003\u0002\u0002\u0002\u0a1a\u01c9\u0003",
    "\u0002\u0002\u0002\u0a1b\u0a23\u0005\u01d2\u00ea\u0002\u0a1c\u0a1e\u0005",
    "\u01d4\u00eb\u0002\u0a1d\u0a1f\u0005\u01e0\u00f1\u0002\u0a1e\u0a1d\u0003",
    "\u0002\u0002\u0002\u0a1e\u0a1f\u0003\u0002\u0002\u0002\u0a1f\u0a20\u0003",
    "\u0002\u0002\u0002\u0a20\u0a21\u0005\u01d6\u00ec\u0002\u0a21\u0a23\u0003",
    "\u0002\u0002\u0002\u0a22\u0a1b\u0003\u0002\u0002\u0002\u0a22\u0a1c\u0003",
    "\u0002\u0002\u0002\u0a23\u01cb\u0003\u0002\u0002\u0002\u0a24\u0a26\u0005",
    "\u01ce\u00e8\u0002\u0a25\u0a27\u0005\u01e0\u00f1\u0002\u0a26\u0a25\u0003",
    "\u0002\u0002\u0002\u0a26\u0a27\u0003\u0002\u0002\u0002\u0a27\u0a28\u0003",
    "\u0002\u0002\u0002\u0a28\u0a29\u0005\u01d0\u00e9\u0002\u0a29\u01cd\u0003",
    "\u0002\u0002\u0002\u0a2a\u0a2b\u0007&\u0002\u0002\u0a2b\u0a2e\u0007",
    "$\u0002\u0002\u0a2c\u0a2e\u0007(\u0002\u0002\u0a2d\u0a2a\u0003\u0002",
    "\u0002\u0002\u0a2d\u0a2c\u0003\u0002\u0002\u0002\u0a2e\u01cf\u0003\u0002",
    "\u0002\u0002\u0a2f\u0a30\u0007&\u0002\u0002\u0a30\u0a31\u0007!\u0002",
    "\u0002\u0a31\u0a32\u0007$\u0002\u0002\u0a32\u01d1\u0003\u0002\u0002",
    "\u0002\u0a33\u0a34\u0007&\u0002\u0002\u0a34\u0a35\u0005\u01d8\u00ed",
    "\u0002\u0a35\u0a39\u0005\u008eH\u0002\u0a36\u0a38\u0005\u01dc\u00ef",
    "\u0002\u0a37\u0a36\u0003\u0002\u0002\u0002\u0a38\u0a3b\u0003\u0002\u0002",
    "\u0002\u0a39\u0a37\u0003\u0002\u0002\u0002\u0a39\u0a3a\u0003\u0002\u0002",
    "\u0002\u0a3a\u0a3c\u0003\u0002\u0002\u0002\u0a3b\u0a39\u0003\u0002\u0002",
    "\u0002\u0a3c\u0a3d\u0007!\u0002\u0002\u0a3d\u0a3e\u0007$\u0002\u0002",
    "\u0a3e\u01d3\u0003\u0002\u0002\u0002\u0a3f\u0a40\u0007&\u0002\u0002",
    "\u0a40\u0a41\u0005\u01d8\u00ed\u0002\u0a41\u0a45\u0005\u008eH\u0002",
    "\u0a42\u0a44\u0005\u01dc\u00ef\u0002\u0a43\u0a42\u0003\u0002\u0002\u0002",
    "\u0a44\u0a47\u0003\u0002\u0002\u0002\u0a45\u0a43\u0003\u0002\u0002\u0002",
    "\u0a45\u0a46\u0003\u0002\u0002\u0002\u0a46\u0a48\u0003\u0002\u0002\u0002",
    "\u0a47\u0a45\u0003\u0002\u0002\u0002\u0a48\u0a49\u0007$\u0002\u0002",
    "\u0a49\u01d5\u0003\u0002\u0002\u0002\u0a4a\u0a4b\u0007&\u0002\u0002",
    "\u0a4b\u0a4c\u0007!\u0002\u0002\u0a4c\u0a4d\u0005\u01d8\u00ed\u0002",
    "\u0a4d\u0a4e\u0007$\u0002\u0002\u0a4e\u01d7\u0003\u0002\u0002\u0002",
    "\u0a4f\u0a54\u0005\u01da\u00ee\u0002\u0a50\u0a51\u0007\u0011\u0002\u0002",
    "\u0a51\u0a53\u0005\u01da\u00ee\u0002\u0a52\u0a50\u0003\u0002\u0002\u0002",
    "\u0a53\u0a56\u0003\u0002\u0002\u0002\u0a54\u0a52\u0003\u0002\u0002\u0002",
    "\u0a54\u0a55\u0003\u0002\u0002\u0002\u0a55\u01d9\u0003\u0002\u0002\u0002",
    "\u0a56\u0a54\u0003\u0002\u0002\u0002\u0a57\u0a5b\u0005\u00c4c\u0002",
    "\u0a58\u0a5a\u0005\u00c6d\u0002\u0a59\u0a58\u0003\u0002\u0002\u0002",
    "\u0a5a\u0a5d\u0003\u0002\u0002\u0002\u0a5b\u0a59\u0003\u0002\u0002\u0002",
    "\u0a5b\u0a5c\u0003\u0002\u0002\u0002\u0a5c\u01db\u0003\u0002\u0002\u0002",
    "\u0a5d\u0a5b\u0003\u0002\u0002\u0002\u0a5e\u0a61\u0005\u01da\u00ee\u0002",
    "\u0a5f\u0a60\u0007*\u0002\u0002\u0a60\u0a62\u0005\u01de\u00f0\u0002",
    "\u0a61\u0a5f\u0003\u0002\u0002\u0002\u0a61\u0a62\u0003\u0002\u0002\u0002",
    "\u0a62\u0a63\u0003\u0002\u0002\u0002\u0a63\u0a64\u0005\u008eH\u0002",
    "\u0a64\u01dd\u0003\u0002\u0002\u0002\u0a65\u0a6b\u0007\u00ab\u0002\u0002",
    "\u0a66\u0a67\u0007\u0016\u0002\u0002\u0a67\u0a68\u0005`1\u0002\u0a68",
    "\u0a69\u0007\u0017\u0002\u0002\u0a69\u0a6b\u0003\u0002\u0002\u0002\u0a6a",
    "\u0a65\u0003\u0002\u0002\u0002\u0a6a\u0a66\u0003\u0002\u0002\u0002\u0a6b",
    "\u01df\u0003\u0002\u0002\u0002\u0a6c\u0a6e\u0005\u01e2\u00f2\u0002\u0a6d",
    "\u0a6c\u0003\u0002\u0002\u0002\u0a6e\u0a6f\u0003\u0002\u0002\u0002\u0a6f",
    "\u0a6d\u0003\u0002\u0002\u0002\u0a6f\u0a70\u0003\u0002\u0002\u0002\u0a70",
    "\u01e1\u0003\u0002\u0002\u0002\u0a71\u0a79\u0005\u01e4\u00f3\u0002\u0a72",
    "\u0a79\u0005\u01ca\u00e6\u0002\u0a73\u0a75\u0007\u0016\u0002\u0002\u0a74",
    "\u0a76\u0005`1\u0002\u0a75\u0a74\u0003\u0002\u0002\u0002\u0a75\u0a76",
    "\u0003\u0002\u0002\u0002\u0a76\u0a77\u0003\u0002\u0002\u0002\u0a77\u0a79",
    "\u0007\u0017\u0002\u0002\u0a78\u0a71\u0003\u0002\u0002\u0002\u0a78\u0a72",
    "\u0003\u0002\u0002\u0002\u0a78\u0a73\u0003\u0002\u0002\u0002\u0a79\u01e3",
    "\u0003\u0002\u0002\u0002\u0a7a\u0a7c\n\u000e\u0002\u0002\u0a7b\u0a7a",
    "\u0003\u0002\u0002\u0002\u0a7c\u0a7d\u0003\u0002\u0002\u0002\u0a7d\u0a7b",
    "\u0003\u0002\u0002\u0002\u0a7d\u0a7e\u0003\u0002\u0002\u0002\u0a7e\u01e5",
    "\u0003\u0002\u0002\u0002\u0a7f\u0a81\u0007\u0016\u0002\u0002\u0a80\u0a82",
    "\u0005\u01e8\u00f5\u0002\u0a81\u0a80\u0003\u0002\u0002\u0002\u0a82\u0a83",
    "\u0003\u0002\u0002\u0002\u0a83\u0a81\u0003\u0002\u0002\u0002\u0a83\u0a84",
    "\u0003\u0002\u0002\u0002\u0a84\u0a85\u0003\u0002\u0002\u0002\u0a85\u0a86",
    "\u0007\u0017\u0002\u0002\u0a86\u01e7\u0003\u0002\u0002\u0002\u0a87\u0a88",
    "\u0005\u01ea\u00f6\u0002\u0a88\u0a89\u0007\r\u0002\u0002\u0a89\u0a8a",
    "\u0005\u01ec\u00f7\u0002\u0a8a\u0a8b\u0007\u000e\u0002\u0002\u0a8b\u01e9",
    "\u0003\u0002\u0002\u0002\u0a8c\u0a8d\b\u00f6\u0001\u0002\u0a8d\u0a91",
    "\u0005\u00c4c\u0002\u0a8e\u0a8f\u0007\u001f\u0002\u0002\u0a8f\u0a91",
    "\u0005\u00c8e\u0002\u0a90\u0a8c\u0003\u0002\u0002\u0002\u0a90\u0a8e",
    "\u0003\u0002\u0002\u0002\u0a91\u0a9a\u0003\u0002\u0002\u0002\u0a92\u0a94",
    "\f\u0003\u0002\u0002\u0a93\u0a95\u0005\u00c6d\u0002\u0a94\u0a93\u0003",
    "\u0002\u0002\u0002\u0a95\u0a96\u0003\u0002\u0002\u0002\u0a96\u0a94\u0003",
    "\u0002\u0002\u0002\u0a96\u0a97\u0003\u0002\u0002\u0002\u0a97\u0a99\u0003",
    "\u0002\u0002\u0002\u0a98\u0a92\u0003\u0002\u0002\u0002\u0a99\u0a9c\u0003",
    "\u0002\u0002\u0002\u0a9a\u0a98\u0003\u0002\u0002\u0002\u0a9a\u0a9b\u0003",
    "\u0002\u0002\u0002\u0a9b\u01eb\u0003\u0002\u0002\u0002\u0a9c\u0a9a\u0003",
    "\u0002\u0002\u0002\u0a9d\u0a9e\u0007\u0016\u0002\u0002\u0a9e\u0a9f\u0005",
    "`1\u0002\u0a9f\u0aa0\u0007\u0017\u0002\u0002\u0aa0\u0aa3\u0003\u0002",
    "\u0002\u0002\u0aa1\u0aa3\u0005\u01ee\u00f8\u0002\u0aa2\u0a9d\u0003\u0002",
    "\u0002\u0002\u0aa2\u0aa1\u0003\u0002\u0002\u0002\u0aa3\u01ed\u0003\u0002",
    "\u0002\u0002\u0aa4\u0aa6\n\u000f\u0002\u0002\u0aa5\u0aa4\u0003\u0002",
    "\u0002\u0002\u0aa6\u0aa7\u0003\u0002\u0002\u0002\u0aa7\u0aa5\u0003\u0002",
    "\u0002\u0002\u0aa7\u0aa8\u0003\u0002\u0002\u0002\u0aa8\u01ef\u0003\u0002",
    "\u0002\u0002\u00fc\u01f7\u01fb\u0216\u021d\u0225\u0227\u022f\u023c\u0244",
    "\u0248\u0252\u025e\u0264\u0267\u026a\u0273\u027b\u0280\u0286\u028e\u0293",
    "\u0299\u029e\u02a7\u02ac\u02b1\u02ba\u02bf\u02d3\u02d8\u02de\u02e4\u02ea",
    "\u02ef\u02f4\u02f7\u02fd\u0314\u031e\u0323\u032a\u032c\u0342\u0353\u035a",
    "\u0362\u0379\u037b\u0383\u038a\u038c\u0394\u039e\u03b3\u03b7\u03cb\u03d8",
    "\u03dc\u03e4\u03e7\u03ec\u03ef\u03f7\u0402\u0406\u040d\u0414\u041b\u0421",
    "\u0428\u0446\u04ba\u04bc\u04ca\u04d3\u04de\u04ea\u04f4\u0509\u0516\u0523",
    "\u0529\u0532\u0539\u0541\u0543\u054b\u055e\u0564\u056d\u0574\u057c\u0585",
    "\u0589\u0592\u05a2\u05a9\u05b0\u05b4\u05c0\u05c7\u05ce\u05db\u05e7\u05ed",
    "\u05f0\u05fb\u0603\u060b\u0614\u061b\u0623\u062b\u0634\u063c\u0649\u064c",
    "\u0650\u0655\u0659\u0662\u0677\u0680\u0682\u0687\u0699\u069e\u06a7\u06ab",
    "\u06b2\u06b7\u06bb\u06c7\u06d8\u06dd\u06e0\u06e4\u06e9\u06f0\u06fb\u06fd",
    "\u0706\u070e\u0716\u071e\u0726\u072c\u0738\u073c\u0746\u074e\u0752\u0758",
    "\u075f\u0764\u076b\u0773\u077a\u0784\u0791\u0795\u0798\u079c\u079f\u07a7",
    "\u07b0\u07b9\u07c2\u07d3\u07e4\u07eb\u07f6\u07fe\u0801\u0805\u080a\u0814",
    "\u0818\u0823\u0826\u082d\u0836\u0841\u084e\u0855\u085f\u0869\u086c\u0870",
    "\u0881\u0889\u088d\u0895\u08bd\u08c6\u08d0\u08dc\u08e1\u08ed\u08ff\u0906",
    "\u090f\u0917\u0921\u0926\u0930\u093a\u094a\u0954\u095b\u0963\u096e\u0977",
    "\u097f\u0989\u098e\u099a\u09ad\u09b7\u09bf\u09ca\u09d3\u09db\u09e5\u09ea",
    "\u09f6\u0a04\u0a0b\u0a13\u0a19\u0a1e\u0a22\u0a26\u0a2d\u0a39\u0a45\u0a54",
    "\u0a5b\u0a61\u0a6a\u0a6f\u0a75\u0a78\u0a7d\u0a83\u0a90\u0a96\u0a9a\u0aa2",
    "\u0aa7"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "' '", null, null, null, "'Java:'", "'C#:'", 
                     "'Python2:'", "'Python3:'", "'JavaScript:'", "'Swift:'", 
                     "':'", "';'", null, "'..'", null, null, null, null, 
                     null, null, null, null, "'!'", "'&'", "'&&'", "'|'", 
                     "'||'", null, "'-'", "'*'", "'/'", "'\\'", "'%'", "'>'", 
                     "'>='", "'<'", "'<='", "'<>'", "'<:>'", "'='", "'!='", 
                     "'=='", "'~='", "'~'", "'<-'", "'->'", "'=>'", "'Boolean'", 
                     "'Character'", "'Text'", "'Integer'", "'Decimal'", 
                     "'Date'", "'Time'", "'DateTime'", "'Period'", "'Version'", 
                     "'Method'", "'Code'", "'Document'", "'Blob'", "'Image'", 
                     "'Uuid'", "'Iterator'", "'Cursor'", "'Html'", "'abstract'", 
                     "'all'", "'always'", "'and'", "'any'", "'as'", null, 
                     "'attr'", "'attribute'", "'attributes'", "'bindings'", 
                     "'break'", "'by'", "'case'", "'catch'", "'category'", 
                     "'class'", "'close'", "'contains'", "'def'", "'default'", 
                     "'define'", "'delete'", null, "'do'", "'doing'", "'each'", 
                     "'else'", "'enum'", "'enumerated'", "'except'", "'execute'", 
                     "'expecting'", "'extends'", "'fetch'", "'filtered'", 
                     "'finally'", "'flush'", "'for'", "'from'", "'getter'", 
                     "'has'", "'if'", "'in'", "'index'", "'invoke'", "'is'", 
                     "'matching'", "'method'", "'methods'", "'modulo'", 
                     "'mutable'", "'native'", "'None'", "'not'", null, "'null'", 
                     "'on'", "'one'", "'open'", "'operator'", "'or'", "'order'", 
                     "'otherwise'", "'pass'", "'raise'", "'read'", "'receiving'", 
                     "'resource'", "'return'", "'returning'", "'rows'", 
                     "'self'", "'setter'", "'singleton'", "'sorted'", "'storable'", 
                     "'store'", "'switch'", "'test'", "'then'", "'this'", 
                     "'throw'", "'to'", "'try'", "'verifying'", "'widget'", 
                     "'with'", "'when'", "'where'", "'while'", "'write'", 
                     null, null, "'MIN_INTEGER'", "'MAX_INTEGER'" ];

var symbolicNames = [ null, "SPACE", "WS", "LF", "COMMENT", "JAVA", "CSHARP", 
                      "PYTHON2", "PYTHON3", "JAVASCRIPT", "SWIFT", "COLON", 
                      "SEMI", "COMMA", "RANGE", "DOT", "LPAR", "RPAR", "LBRAK", 
                      "RBRAK", "LCURL", "RCURL", "QMARK", "XMARK", "AMP", 
                      "AMP2", "PIPE", "PIPE2", "PLUS", "MINUS", "STAR", 
                      "SLASH", "BSLASH", "PERCENT", "GT", "GTE", "LT", "LTE", 
                      "LTGT", "LTCOLONGT", "EQ", "XEQ", "EQ2", "TEQ", "TILDE", 
                      "LARROW", "RARROW", "EGT", "BOOLEAN", "CHARACTER", 
                      "TEXT", "INTEGER", "DECIMAL", "DATE", "TIME", "DATETIME", 
                      "PERIOD", "VERSION", "METHOD_T", "CODE", "DOCUMENT", 
                      "BLOB", "IMAGE", "UUID", "ITERATOR", "CURSOR", "HTML", 
                      "ABSTRACT", "ALL", "ALWAYS", "AND", "ANY", "AS", "ASC", 
                      "ATTR", "ATTRIBUTE", "ATTRIBUTES", "BINDINGS", "BREAK", 
                      "BY", "CASE", "CATCH", "CATEGORY", "CLASS", "CLOSE", 
                      "CONTAINS", "DEF", "DEFAULT", "DEFINE", "DELETE", 
                      "DESC", "DO", "DOING", "EACH", "ELSE", "ENUM", "ENUMERATED", 
                      "EXCEPT", "EXECUTE", "EXPECTING", "EXTENDS", "FETCH", 
                      "FILTERED", "FINALLY", "FLUSH", "FOR", "FROM", "GETTER", 
                      "HAS", "IF", "IN", "INDEX", "INVOKE", "IS", "MATCHING", 
                      "METHOD", "METHODS", "MODULO", "MUTABLE", "NATIVE", 
                      "NONE", "NOT", "NOTHING", "NULL", "ON", "ONE", "OPEN", 
                      "OPERATOR", "OR", "ORDER", "OTHERWISE", "PASS", "RAISE", 
                      "READ", "RECEIVING", "RESOURCE", "RETURN", "RETURNING", 
                      "ROWS", "SELF", "SETTER", "SINGLETON", "SORTED", "STORABLE", 
                      "STORE", "SWITCH", "TEST", "THEN", "THIS", "THROW", 
                      "TO", "TRY", "VERIFYING", "WIDGET", "WITH", "WHEN", 
                      "WHERE", "WHILE", "WRITE", "BOOLEAN_LITERAL", "CHAR_LITERAL", 
                      "MIN_INTEGER", "MAX_INTEGER", "SYMBOL_IDENTIFIER", 
                      "TYPE_IDENTIFIER", "VARIABLE_IDENTIFIER", "NATIVE_IDENTIFIER", 
                      "DOLLAR_IDENTIFIER", "ARONDBASE_IDENTIFIER", "TEXT_LITERAL", 
                      "UUID_LITERAL", "INTEGER_LITERAL", "HEXA_LITERAL", 
                      "DECIMAL_LITERAL", "DATETIME_LITERAL", "TIME_LITERAL", 
                      "DATE_LITERAL", "PERIOD_LITERAL", "VERSION_LITERAL", 
                      "INSTRUCTION" ];

var ruleNames =  [ "enum_category_declaration", "enum_native_declaration", 
                   "category_symbol", "native_symbol", "attribute_declaration", 
                   "concrete_widget_declaration", "native_widget_declaration", 
                   "concrete_category_declaration", "singleton_category_declaration", 
                   "derived_list", "category_method_list", "operator_method_declaration", 
                   "setter_method_declaration", "native_setter_declaration", 
                   "getter_method_declaration", "native_getter_declaration", 
                   "native_resource_declaration", "native_category_declaration", 
                   "native_category_bindings", "native_category_binding_list", 
                   "abstract_method_declaration", "concrete_method_declaration", 
                   "native_method_declaration", "test_method_declaration", 
                   "assertion", "typed_argument", "statement_or_list", "statement", 
                   "flush_statement", "store_statement", "with_resource_statement", 
                   "with_singleton_statement", "switch_statement", "switch_case_statement", 
                   "for_each_statement", "do_while_statement", "while_statement", 
                   "if_statement", "else_if_statement_list", "raise_statement", 
                   "try_statement", "catch_statement", "break_statement", 
                   "return_statement", "method_call_expression", "method_call_statement", 
                   "x_expression", "expression", "an_expression", "closure_expression", 
                   "selectable_expression", "instance_expression", "mutable_instance_expression", 
                   "method_expression", "blob_expression", "document_expression", 
                   "write_statement", "filtered_list_expression", "fetch_expression", 
                   "fetch_statement", "sorted_expression", "instance_selector", 
                   "constructor_expression", "copy_from", "argument_assignment_list", 
                   "argument_assignment", "assign_instance_statement", "child_instance", 
                   "assign_tuple_statement", "null_literal", "ws_plus", 
                   "repl", "declaration_list", "declarations", "declaration", 
                   "annotation_constructor", "annotation_identifier", "resource_declaration", 
                   "enum_declaration", "native_symbol_list", "category_symbol_list", 
                   "symbol_list", "attribute_constraint", "list_literal", 
                   "set_literal", "expression_list", "range_literal", "typedef", 
                   "primary_type", "native_type", "category_type", "mutable_category_type", 
                   "code_type", "category_declaration", "widget_declaration", 
                   "type_identifier_list", "method_identifier", "identifier_or_keyword", 
                   "nospace_hyphen_identifier_or_keyword", "nospace_identifier_or_keyword", 
                   "identifier", "variable_identifier", "attribute_identifier", 
                   "type_identifier", "symbol_identifier", "any_identifier", 
                   "argument_list", "argument", "operator_argument", "named_argument", 
                   "code_argument", "category_or_any_type", "any_type", 
                   "member_method_declaration_list", "member_method_declaration", 
                   "native_member_method_declaration_list", "native_member_method_declaration", 
                   "native_category_binding", "python_category_binding", 
                   "python_module", "javascript_category_binding", "javascript_module", 
                   "variable_identifier_list", "attribute_identifier_list", 
                   "method_declaration", "comment_statement", "native_statement_list", 
                   "native_statement", "python_native_statement", "javascript_native_statement", 
                   "statement_list", "assertion_list", "switch_case_statement_list", 
                   "catch_statement_list", "literal_collection", "atomic_literal", 
                   "literal_list_literal", "this_expression", "parenthesis_expression", 
                   "literal_expression", "collection_literal", "tuple_literal", 
                   "dict_literal", "document_literal", "expression_tuple", 
                   "dict_entry_list", "dict_entry", "dict_key", "slice_arguments", 
                   "assign_variable_statement", "assignable_instance", "is_expression", 
                   "arrow_expression", "arrow_prefix", "arrow_args", "sorted_key", 
                   "read_all_expression", "read_one_expression", "order_by_list", 
                   "order_by", "operator", "keyword", "new_token", "key_token", 
                   "module_token", "value_token", "symbols_token", "assign", 
                   "multiply", "divide", "idivide", "modulo", "lfs", "lfp", 
                   "javascript_statement", "javascript_expression", "javascript_primary_expression", 
                   "javascript_this_expression", "javascript_new_expression", 
                   "javascript_selector_expression", "javascript_method_expression", 
                   "javascript_arguments", "javascript_item_expression", 
                   "javascript_parenthesis_expression", "javascript_identifier_expression", 
                   "javascript_literal_expression", "javascript_identifier", 
                   "python_statement", "python_expression", "python_primary_expression", 
                   "python_self_expression", "python_selector_expression", 
                   "python_method_expression", "python_argument_list", "python_ordinal_argument_list", 
                   "python_named_argument_list", "python_parenthesis_expression", 
                   "python_identifier_expression", "python_literal_expression", 
                   "python_identifier", "java_statement", "java_expression", 
                   "java_primary_expression", "java_this_expression", "java_new_expression", 
                   "java_selector_expression", "java_method_expression", 
                   "java_arguments", "java_item_expression", "java_parenthesis_expression", 
                   "java_identifier_expression", "java_class_identifier_expression", 
                   "java_literal_expression", "java_identifier", "csharp_statement", 
                   "csharp_expression", "csharp_primary_expression", "csharp_this_expression", 
                   "csharp_new_expression", "csharp_selector_expression", 
                   "csharp_method_expression", "csharp_arguments", "csharp_item_expression", 
                   "csharp_parenthesis_expression", "csharp_identifier_expression", 
                   "csharp_literal_expression", "csharp_identifier", "jsx_expression", 
                   "jsx_element", "jsx_fragment", "jsx_fragment_start", 
                   "jsx_fragment_end", "jsx_self_closing", "jsx_opening", 
                   "jsx_closing", "jsx_element_name", "jsx_identifier", 
                   "jsx_attribute", "jsx_attribute_value", "jsx_children", 
                   "jsx_child", "jsx_text", "css_expression", "css_field", 
                   "css_identifier", "css_value", "css_text" ];

function OParser (input) {
	AbstractParser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

OParser.prototype = Object.create(AbstractParser.prototype);
OParser.prototype.constructor = OParser;

Object.defineProperty(OParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

OParser.EOF = antlr4.Token.EOF;
OParser.SPACE = 1;
OParser.WS = 2;
OParser.LF = 3;
OParser.COMMENT = 4;
OParser.JAVA = 5;
OParser.CSHARP = 6;
OParser.PYTHON2 = 7;
OParser.PYTHON3 = 8;
OParser.JAVASCRIPT = 9;
OParser.SWIFT = 10;
OParser.COLON = 11;
OParser.SEMI = 12;
OParser.COMMA = 13;
OParser.RANGE = 14;
OParser.DOT = 15;
OParser.LPAR = 16;
OParser.RPAR = 17;
OParser.LBRAK = 18;
OParser.RBRAK = 19;
OParser.LCURL = 20;
OParser.RCURL = 21;
OParser.QMARK = 22;
OParser.XMARK = 23;
OParser.AMP = 24;
OParser.AMP2 = 25;
OParser.PIPE = 26;
OParser.PIPE2 = 27;
OParser.PLUS = 28;
OParser.MINUS = 29;
OParser.STAR = 30;
OParser.SLASH = 31;
OParser.BSLASH = 32;
OParser.PERCENT = 33;
OParser.GT = 34;
OParser.GTE = 35;
OParser.LT = 36;
OParser.LTE = 37;
OParser.LTGT = 38;
OParser.LTCOLONGT = 39;
OParser.EQ = 40;
OParser.XEQ = 41;
OParser.EQ2 = 42;
OParser.TEQ = 43;
OParser.TILDE = 44;
OParser.LARROW = 45;
OParser.RARROW = 46;
OParser.EGT = 47;
OParser.BOOLEAN = 48;
OParser.CHARACTER = 49;
OParser.TEXT = 50;
OParser.INTEGER = 51;
OParser.DECIMAL = 52;
OParser.DATE = 53;
OParser.TIME = 54;
OParser.DATETIME = 55;
OParser.PERIOD = 56;
OParser.VERSION = 57;
OParser.METHOD_T = 58;
OParser.CODE = 59;
OParser.DOCUMENT = 60;
OParser.BLOB = 61;
OParser.IMAGE = 62;
OParser.UUID = 63;
OParser.ITERATOR = 64;
OParser.CURSOR = 65;
OParser.HTML = 66;
OParser.ABSTRACT = 67;
OParser.ALL = 68;
OParser.ALWAYS = 69;
OParser.AND = 70;
OParser.ANY = 71;
OParser.AS = 72;
OParser.ASC = 73;
OParser.ATTR = 74;
OParser.ATTRIBUTE = 75;
OParser.ATTRIBUTES = 76;
OParser.BINDINGS = 77;
OParser.BREAK = 78;
OParser.BY = 79;
OParser.CASE = 80;
OParser.CATCH = 81;
OParser.CATEGORY = 82;
OParser.CLASS = 83;
OParser.CLOSE = 84;
OParser.CONTAINS = 85;
OParser.DEF = 86;
OParser.DEFAULT = 87;
OParser.DEFINE = 88;
OParser.DELETE = 89;
OParser.DESC = 90;
OParser.DO = 91;
OParser.DOING = 92;
OParser.EACH = 93;
OParser.ELSE = 94;
OParser.ENUM = 95;
OParser.ENUMERATED = 96;
OParser.EXCEPT = 97;
OParser.EXECUTE = 98;
OParser.EXPECTING = 99;
OParser.EXTENDS = 100;
OParser.FETCH = 101;
OParser.FILTERED = 102;
OParser.FINALLY = 103;
OParser.FLUSH = 104;
OParser.FOR = 105;
OParser.FROM = 106;
OParser.GETTER = 107;
OParser.HAS = 108;
OParser.IF = 109;
OParser.IN = 110;
OParser.INDEX = 111;
OParser.INVOKE = 112;
OParser.IS = 113;
OParser.MATCHING = 114;
OParser.METHOD = 115;
OParser.METHODS = 116;
OParser.MODULO = 117;
OParser.MUTABLE = 118;
OParser.NATIVE = 119;
OParser.NONE = 120;
OParser.NOT = 121;
OParser.NOTHING = 122;
OParser.NULL = 123;
OParser.ON = 124;
OParser.ONE = 125;
OParser.OPEN = 126;
OParser.OPERATOR = 127;
OParser.OR = 128;
OParser.ORDER = 129;
OParser.OTHERWISE = 130;
OParser.PASS = 131;
OParser.RAISE = 132;
OParser.READ = 133;
OParser.RECEIVING = 134;
OParser.RESOURCE = 135;
OParser.RETURN = 136;
OParser.RETURNING = 137;
OParser.ROWS = 138;
OParser.SELF = 139;
OParser.SETTER = 140;
OParser.SINGLETON = 141;
OParser.SORTED = 142;
OParser.STORABLE = 143;
OParser.STORE = 144;
OParser.SWITCH = 145;
OParser.TEST = 146;
OParser.THEN = 147;
OParser.THIS = 148;
OParser.THROW = 149;
OParser.TO = 150;
OParser.TRY = 151;
OParser.VERIFYING = 152;
OParser.WIDGET = 153;
OParser.WITH = 154;
OParser.WHEN = 155;
OParser.WHERE = 156;
OParser.WHILE = 157;
OParser.WRITE = 158;
OParser.BOOLEAN_LITERAL = 159;
OParser.CHAR_LITERAL = 160;
OParser.MIN_INTEGER = 161;
OParser.MAX_INTEGER = 162;
OParser.SYMBOL_IDENTIFIER = 163;
OParser.TYPE_IDENTIFIER = 164;
OParser.VARIABLE_IDENTIFIER = 165;
OParser.NATIVE_IDENTIFIER = 166;
OParser.DOLLAR_IDENTIFIER = 167;
OParser.ARONDBASE_IDENTIFIER = 168;
OParser.TEXT_LITERAL = 169;
OParser.UUID_LITERAL = 170;
OParser.INTEGER_LITERAL = 171;
OParser.HEXA_LITERAL = 172;
OParser.DECIMAL_LITERAL = 173;
OParser.DATETIME_LITERAL = 174;
OParser.TIME_LITERAL = 175;
OParser.DATE_LITERAL = 176;
OParser.PERIOD_LITERAL = 177;
OParser.VERSION_LITERAL = 178;
OParser.INSTRUCTION = 179;

OParser.RULE_enum_category_declaration = 0;
OParser.RULE_enum_native_declaration = 1;
OParser.RULE_category_symbol = 2;
OParser.RULE_native_symbol = 3;
OParser.RULE_attribute_declaration = 4;
OParser.RULE_concrete_widget_declaration = 5;
OParser.RULE_native_widget_declaration = 6;
OParser.RULE_concrete_category_declaration = 7;
OParser.RULE_singleton_category_declaration = 8;
OParser.RULE_derived_list = 9;
OParser.RULE_category_method_list = 10;
OParser.RULE_operator_method_declaration = 11;
OParser.RULE_setter_method_declaration = 12;
OParser.RULE_native_setter_declaration = 13;
OParser.RULE_getter_method_declaration = 14;
OParser.RULE_native_getter_declaration = 15;
OParser.RULE_native_resource_declaration = 16;
OParser.RULE_native_category_declaration = 17;
OParser.RULE_native_category_bindings = 18;
OParser.RULE_native_category_binding_list = 19;
OParser.RULE_abstract_method_declaration = 20;
OParser.RULE_concrete_method_declaration = 21;
OParser.RULE_native_method_declaration = 22;
OParser.RULE_test_method_declaration = 23;
OParser.RULE_assertion = 24;
OParser.RULE_typed_argument = 25;
OParser.RULE_statement_or_list = 26;
OParser.RULE_statement = 27;
OParser.RULE_flush_statement = 28;
OParser.RULE_store_statement = 29;
OParser.RULE_with_resource_statement = 30;
OParser.RULE_with_singleton_statement = 31;
OParser.RULE_switch_statement = 32;
OParser.RULE_switch_case_statement = 33;
OParser.RULE_for_each_statement = 34;
OParser.RULE_do_while_statement = 35;
OParser.RULE_while_statement = 36;
OParser.RULE_if_statement = 37;
OParser.RULE_else_if_statement_list = 38;
OParser.RULE_raise_statement = 39;
OParser.RULE_try_statement = 40;
OParser.RULE_catch_statement = 41;
OParser.RULE_break_statement = 42;
OParser.RULE_return_statement = 43;
OParser.RULE_method_call_expression = 44;
OParser.RULE_method_call_statement = 45;
OParser.RULE_x_expression = 46;
OParser.RULE_expression = 47;
OParser.RULE_an_expression = 48;
OParser.RULE_closure_expression = 49;
OParser.RULE_selectable_expression = 50;
OParser.RULE_instance_expression = 51;
OParser.RULE_mutable_instance_expression = 52;
OParser.RULE_method_expression = 53;
OParser.RULE_blob_expression = 54;
OParser.RULE_document_expression = 55;
OParser.RULE_write_statement = 56;
OParser.RULE_filtered_list_expression = 57;
OParser.RULE_fetch_expression = 58;
OParser.RULE_fetch_statement = 59;
OParser.RULE_sorted_expression = 60;
OParser.RULE_instance_selector = 61;
OParser.RULE_constructor_expression = 62;
OParser.RULE_copy_from = 63;
OParser.RULE_argument_assignment_list = 64;
OParser.RULE_argument_assignment = 65;
OParser.RULE_assign_instance_statement = 66;
OParser.RULE_child_instance = 67;
OParser.RULE_assign_tuple_statement = 68;
OParser.RULE_null_literal = 69;
OParser.RULE_ws_plus = 70;
OParser.RULE_repl = 71;
OParser.RULE_declaration_list = 72;
OParser.RULE_declarations = 73;
OParser.RULE_declaration = 74;
OParser.RULE_annotation_constructor = 75;
OParser.RULE_annotation_identifier = 76;
OParser.RULE_resource_declaration = 77;
OParser.RULE_enum_declaration = 78;
OParser.RULE_native_symbol_list = 79;
OParser.RULE_category_symbol_list = 80;
OParser.RULE_symbol_list = 81;
OParser.RULE_attribute_constraint = 82;
OParser.RULE_list_literal = 83;
OParser.RULE_set_literal = 84;
OParser.RULE_expression_list = 85;
OParser.RULE_range_literal = 86;
OParser.RULE_typedef = 87;
OParser.RULE_primary_type = 88;
OParser.RULE_native_type = 89;
OParser.RULE_category_type = 90;
OParser.RULE_mutable_category_type = 91;
OParser.RULE_code_type = 92;
OParser.RULE_category_declaration = 93;
OParser.RULE_widget_declaration = 94;
OParser.RULE_type_identifier_list = 95;
OParser.RULE_method_identifier = 96;
OParser.RULE_identifier_or_keyword = 97;
OParser.RULE_nospace_hyphen_identifier_or_keyword = 98;
OParser.RULE_nospace_identifier_or_keyword = 99;
OParser.RULE_identifier = 100;
OParser.RULE_variable_identifier = 101;
OParser.RULE_attribute_identifier = 102;
OParser.RULE_type_identifier = 103;
OParser.RULE_symbol_identifier = 104;
OParser.RULE_any_identifier = 105;
OParser.RULE_argument_list = 106;
OParser.RULE_argument = 107;
OParser.RULE_operator_argument = 108;
OParser.RULE_named_argument = 109;
OParser.RULE_code_argument = 110;
OParser.RULE_category_or_any_type = 111;
OParser.RULE_any_type = 112;
OParser.RULE_member_method_declaration_list = 113;
OParser.RULE_member_method_declaration = 114;
OParser.RULE_native_member_method_declaration_list = 115;
OParser.RULE_native_member_method_declaration = 116;
OParser.RULE_native_category_binding = 117;
OParser.RULE_python_category_binding = 118;
OParser.RULE_python_module = 119;
OParser.RULE_javascript_category_binding = 120;
OParser.RULE_javascript_module = 121;
OParser.RULE_variable_identifier_list = 122;
OParser.RULE_attribute_identifier_list = 123;
OParser.RULE_method_declaration = 124;
OParser.RULE_comment_statement = 125;
OParser.RULE_native_statement_list = 126;
OParser.RULE_native_statement = 127;
OParser.RULE_python_native_statement = 128;
OParser.RULE_javascript_native_statement = 129;
OParser.RULE_statement_list = 130;
OParser.RULE_assertion_list = 131;
OParser.RULE_switch_case_statement_list = 132;
OParser.RULE_catch_statement_list = 133;
OParser.RULE_literal_collection = 134;
OParser.RULE_atomic_literal = 135;
OParser.RULE_literal_list_literal = 136;
OParser.RULE_this_expression = 137;
OParser.RULE_parenthesis_expression = 138;
OParser.RULE_literal_expression = 139;
OParser.RULE_collection_literal = 140;
OParser.RULE_tuple_literal = 141;
OParser.RULE_dict_literal = 142;
OParser.RULE_document_literal = 143;
OParser.RULE_expression_tuple = 144;
OParser.RULE_dict_entry_list = 145;
OParser.RULE_dict_entry = 146;
OParser.RULE_dict_key = 147;
OParser.RULE_slice_arguments = 148;
OParser.RULE_assign_variable_statement = 149;
OParser.RULE_assignable_instance = 150;
OParser.RULE_is_expression = 151;
OParser.RULE_arrow_expression = 152;
OParser.RULE_arrow_prefix = 153;
OParser.RULE_arrow_args = 154;
OParser.RULE_sorted_key = 155;
OParser.RULE_read_all_expression = 156;
OParser.RULE_read_one_expression = 157;
OParser.RULE_order_by_list = 158;
OParser.RULE_order_by = 159;
OParser.RULE_operator = 160;
OParser.RULE_keyword = 161;
OParser.RULE_new_token = 162;
OParser.RULE_key_token = 163;
OParser.RULE_module_token = 164;
OParser.RULE_value_token = 165;
OParser.RULE_symbols_token = 166;
OParser.RULE_assign = 167;
OParser.RULE_multiply = 168;
OParser.RULE_divide = 169;
OParser.RULE_idivide = 170;
OParser.RULE_modulo = 171;
OParser.RULE_lfs = 172;
OParser.RULE_lfp = 173;
OParser.RULE_javascript_statement = 174;
OParser.RULE_javascript_expression = 175;
OParser.RULE_javascript_primary_expression = 176;
OParser.RULE_javascript_this_expression = 177;
OParser.RULE_javascript_new_expression = 178;
OParser.RULE_javascript_selector_expression = 179;
OParser.RULE_javascript_method_expression = 180;
OParser.RULE_javascript_arguments = 181;
OParser.RULE_javascript_item_expression = 182;
OParser.RULE_javascript_parenthesis_expression = 183;
OParser.RULE_javascript_identifier_expression = 184;
OParser.RULE_javascript_literal_expression = 185;
OParser.RULE_javascript_identifier = 186;
OParser.RULE_python_statement = 187;
OParser.RULE_python_expression = 188;
OParser.RULE_python_primary_expression = 189;
OParser.RULE_python_self_expression = 190;
OParser.RULE_python_selector_expression = 191;
OParser.RULE_python_method_expression = 192;
OParser.RULE_python_argument_list = 193;
OParser.RULE_python_ordinal_argument_list = 194;
OParser.RULE_python_named_argument_list = 195;
OParser.RULE_python_parenthesis_expression = 196;
OParser.RULE_python_identifier_expression = 197;
OParser.RULE_python_literal_expression = 198;
OParser.RULE_python_identifier = 199;
OParser.RULE_java_statement = 200;
OParser.RULE_java_expression = 201;
OParser.RULE_java_primary_expression = 202;
OParser.RULE_java_this_expression = 203;
OParser.RULE_java_new_expression = 204;
OParser.RULE_java_selector_expression = 205;
OParser.RULE_java_method_expression = 206;
OParser.RULE_java_arguments = 207;
OParser.RULE_java_item_expression = 208;
OParser.RULE_java_parenthesis_expression = 209;
OParser.RULE_java_identifier_expression = 210;
OParser.RULE_java_class_identifier_expression = 211;
OParser.RULE_java_literal_expression = 212;
OParser.RULE_java_identifier = 213;
OParser.RULE_csharp_statement = 214;
OParser.RULE_csharp_expression = 215;
OParser.RULE_csharp_primary_expression = 216;
OParser.RULE_csharp_this_expression = 217;
OParser.RULE_csharp_new_expression = 218;
OParser.RULE_csharp_selector_expression = 219;
OParser.RULE_csharp_method_expression = 220;
OParser.RULE_csharp_arguments = 221;
OParser.RULE_csharp_item_expression = 222;
OParser.RULE_csharp_parenthesis_expression = 223;
OParser.RULE_csharp_identifier_expression = 224;
OParser.RULE_csharp_literal_expression = 225;
OParser.RULE_csharp_identifier = 226;
OParser.RULE_jsx_expression = 227;
OParser.RULE_jsx_element = 228;
OParser.RULE_jsx_fragment = 229;
OParser.RULE_jsx_fragment_start = 230;
OParser.RULE_jsx_fragment_end = 231;
OParser.RULE_jsx_self_closing = 232;
OParser.RULE_jsx_opening = 233;
OParser.RULE_jsx_closing = 234;
OParser.RULE_jsx_element_name = 235;
OParser.RULE_jsx_identifier = 236;
OParser.RULE_jsx_attribute = 237;
OParser.RULE_jsx_attribute_value = 238;
OParser.RULE_jsx_children = 239;
OParser.RULE_jsx_child = 240;
OParser.RULE_jsx_text = 241;
OParser.RULE_css_expression = 242;
OParser.RULE_css_field = 243;
OParser.RULE_css_identifier = 244;
OParser.RULE_css_value = 245;
OParser.RULE_css_text = 246;

function Enum_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_enum_category_declaration;
    this.name = null; // Type_identifierContext
    this.attrs = null; // Attribute_identifier_listContext
    this.derived = null; // Type_identifierContext
    this.symbols = null; // Category_symbol_listContext
    return this;
}

Enum_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_category_declarationContext.prototype.constructor = Enum_category_declarationContext;

Enum_category_declarationContext.prototype.ENUMERATED = function() {
    return this.getToken(OParser.ENUMERATED, 0);
};

Enum_category_declarationContext.prototype.CATEGORY = function() {
    return this.getToken(OParser.CATEGORY, 0);
};

Enum_category_declarationContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

Enum_category_declarationContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

Enum_category_declarationContext.prototype.type_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_identifierContext);
    } else {
        return this.getTypedRuleContext(Type_identifierContext,i);
    }
};

Enum_category_declarationContext.prototype.category_symbol_list = function() {
    return this.getTypedRuleContext(Category_symbol_listContext,0);
};

Enum_category_declarationContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Enum_category_declarationContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Enum_category_declarationContext.prototype.EXTENDS = function() {
    return this.getToken(OParser.EXTENDS, 0);
};

Enum_category_declarationContext.prototype.attribute_identifier_list = function() {
    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
};

Enum_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterEnum_category_declaration(this);
	}
};

Enum_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitEnum_category_declaration(this);
	}
};




OParser.Enum_category_declarationContext = Enum_category_declarationContext;

OParser.prototype.enum_category_declaration = function() {

    var localctx = new Enum_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, OParser.RULE_enum_category_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 494;
        this.match(OParser.ENUMERATED);
        this.state = 495;
        this.match(OParser.CATEGORY);
        this.state = 496;
        localctx.name = this.type_identifier();
        this.state = 501;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.LPAR) {
            this.state = 497;
            this.match(OParser.LPAR);
            this.state = 498;
            localctx.attrs = this.attribute_identifier_list();
            this.state = 499;
            this.match(OParser.RPAR);
        }

        this.state = 505;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.EXTENDS) {
            this.state = 503;
            this.match(OParser.EXTENDS);
            this.state = 504;
            localctx.derived = this.type_identifier();
        }

        this.state = 507;
        this.match(OParser.LCURL);
        this.state = 508;
        localctx.symbols = this.category_symbol_list();
        this.state = 509;
        this.match(OParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enum_native_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_enum_native_declaration;
    this.name = null; // Type_identifierContext
    this.typ = null; // Native_typeContext
    this.symbols = null; // Native_symbol_listContext
    return this;
}

Enum_native_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_native_declarationContext.prototype.constructor = Enum_native_declarationContext;

Enum_native_declarationContext.prototype.ENUMERATED = function() {
    return this.getToken(OParser.ENUMERATED, 0);
};

Enum_native_declarationContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Enum_native_declarationContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Enum_native_declarationContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

Enum_native_declarationContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

Enum_native_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Enum_native_declarationContext.prototype.native_type = function() {
    return this.getTypedRuleContext(Native_typeContext,0);
};

Enum_native_declarationContext.prototype.native_symbol_list = function() {
    return this.getTypedRuleContext(Native_symbol_listContext,0);
};

Enum_native_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterEnum_native_declaration(this);
	}
};

Enum_native_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitEnum_native_declaration(this);
	}
};




OParser.Enum_native_declarationContext = Enum_native_declarationContext;

OParser.prototype.enum_native_declaration = function() {

    var localctx = new Enum_native_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, OParser.RULE_enum_native_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 511;
        this.match(OParser.ENUMERATED);
        this.state = 512;
        localctx.name = this.type_identifier();
        this.state = 513;
        this.match(OParser.LPAR);
        this.state = 514;
        localctx.typ = this.native_type();
        this.state = 515;
        this.match(OParser.RPAR);
        this.state = 516;
        this.match(OParser.LCURL);
        this.state = 517;
        localctx.symbols = this.native_symbol_list();
        this.state = 518;
        this.match(OParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_symbolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_category_symbol;
    this.name = null; // Symbol_identifierContext
    this.args = null; // Argument_assignment_listContext
    return this;
}

Category_symbolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_symbolContext.prototype.constructor = Category_symbolContext;

Category_symbolContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Category_symbolContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Category_symbolContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

Category_symbolContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};

Category_symbolContext.prototype.argument_assignment_list = function() {
    return this.getTypedRuleContext(Argument_assignment_listContext,0);
};

Category_symbolContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCategory_symbol(this);
	}
};

Category_symbolContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCategory_symbol(this);
	}
};




OParser.Category_symbolContext = Category_symbolContext;

OParser.prototype.category_symbol = function() {

    var localctx = new Category_symbolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, OParser.RULE_category_symbol);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 520;
        localctx.name = this.symbol_identifier();
        this.state = 521;
        this.match(OParser.LPAR);
        this.state = 522;
        localctx.args = this.argument_assignment_list(0);
        this.state = 523;
        this.match(OParser.RPAR);
        this.state = 524;
        this.match(OParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_symbolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_native_symbol;
    this.name = null; // Symbol_identifierContext
    this.exp = null; // ExpressionContext
    return this;
}

Native_symbolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_symbolContext.prototype.constructor = Native_symbolContext;

Native_symbolContext.prototype.EQ = function() {
    return this.getToken(OParser.EQ, 0);
};

Native_symbolContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

Native_symbolContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};

Native_symbolContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Native_symbolContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNative_symbol(this);
	}
};

Native_symbolContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNative_symbol(this);
	}
};




OParser.Native_symbolContext = Native_symbolContext;

OParser.prototype.native_symbol = function() {

    var localctx = new Native_symbolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, OParser.RULE_native_symbol);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 526;
        localctx.name = this.symbol_identifier();
        this.state = 527;
        this.match(OParser.EQ);
        this.state = 528;
        localctx.exp = this.expression(0);
        this.state = 529;
        this.match(OParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_attribute_declaration;
    this.name = null; // Attribute_identifierContext
    this.typ = null; // TypedefContext
    this.match = null; // Attribute_constraintContext
    this.indices = null; // Variable_identifier_listContext
    return this;
}

Attribute_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_declarationContext.prototype.constructor = Attribute_declarationContext;

Attribute_declarationContext.prototype.ATTRIBUTE = function() {
    return this.getToken(OParser.ATTRIBUTE, 0);
};

Attribute_declarationContext.prototype.COLON = function() {
    return this.getToken(OParser.COLON, 0);
};

Attribute_declarationContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

Attribute_declarationContext.prototype.attribute_identifier = function() {
    return this.getTypedRuleContext(Attribute_identifierContext,0);
};

Attribute_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Attribute_declarationContext.prototype.STORABLE = function() {
    return this.getToken(OParser.STORABLE, 0);
};

Attribute_declarationContext.prototype.WITH = function() {
    return this.getToken(OParser.WITH, 0);
};

Attribute_declarationContext.prototype.INDEX = function() {
    return this.getToken(OParser.INDEX, 0);
};

Attribute_declarationContext.prototype.attribute_constraint = function() {
    return this.getTypedRuleContext(Attribute_constraintContext,0);
};

Attribute_declarationContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Attribute_declarationContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Attribute_declarationContext.prototype.variable_identifier_list = function() {
    return this.getTypedRuleContext(Variable_identifier_listContext,0);
};

Attribute_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAttribute_declaration(this);
	}
};

Attribute_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAttribute_declaration(this);
	}
};




OParser.Attribute_declarationContext = Attribute_declarationContext;

OParser.prototype.attribute_declaration = function() {

    var localctx = new Attribute_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, OParser.RULE_attribute_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 532;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.STORABLE) {
            this.state = 531;
            this.match(OParser.STORABLE);
        }

        this.state = 534;
        this.match(OParser.ATTRIBUTE);
        this.state = 535;
        localctx.name = this.attribute_identifier();
        this.state = 536;
        this.match(OParser.COLON);
        this.state = 537;
        localctx.typ = this.typedef(0);
        this.state = 539;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.IN || _la===OParser.MATCHING) {
            this.state = 538;
            localctx.match = this.attribute_constraint();
        }

        this.state = 549;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.WITH) {
            this.state = 541;
            this.match(OParser.WITH);
            this.state = 542;
            this.match(OParser.INDEX);
            this.state = 547;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===OParser.LPAR) {
                this.state = 543;
                this.match(OParser.LPAR);
                this.state = 544;
                localctx.indices = this.variable_identifier_list();
                this.state = 545;
                this.match(OParser.RPAR);
            }

        }

        this.state = 551;
        this.match(OParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Concrete_widget_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_concrete_widget_declaration;
    this.name = null; // Type_identifierContext
    this.derived = null; // Type_identifierContext
    this.methods = null; // Category_method_listContext
    return this;
}

Concrete_widget_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concrete_widget_declarationContext.prototype.constructor = Concrete_widget_declarationContext;

Concrete_widget_declarationContext.prototype.WIDGET = function() {
    return this.getToken(OParser.WIDGET, 0);
};

Concrete_widget_declarationContext.prototype.type_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_identifierContext);
    } else {
        return this.getTypedRuleContext(Type_identifierContext,i);
    }
};

Concrete_widget_declarationContext.prototype.category_method_list = function() {
    return this.getTypedRuleContext(Category_method_listContext,0);
};

Concrete_widget_declarationContext.prototype.EXTENDS = function() {
    return this.getToken(OParser.EXTENDS, 0);
};

Concrete_widget_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterConcrete_widget_declaration(this);
	}
};

Concrete_widget_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitConcrete_widget_declaration(this);
	}
};




OParser.Concrete_widget_declarationContext = Concrete_widget_declarationContext;

OParser.prototype.concrete_widget_declaration = function() {

    var localctx = new Concrete_widget_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, OParser.RULE_concrete_widget_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 553;
        this.match(OParser.WIDGET);
        this.state = 554;
        localctx.name = this.type_identifier();
        this.state = 557;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.EXTENDS) {
            this.state = 555;
            this.match(OParser.EXTENDS);
            this.state = 556;
            localctx.derived = this.type_identifier();
        }

        this.state = 559;
        localctx.methods = this.category_method_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_widget_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_native_widget_declaration;
    this.name = null; // Type_identifierContext
    this.bindings = null; // Native_category_bindingsContext
    this.methods = null; // Native_member_method_declaration_listContext
    return this;
}

Native_widget_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_widget_declarationContext.prototype.constructor = Native_widget_declarationContext;

Native_widget_declarationContext.prototype.NATIVE = function() {
    return this.getToken(OParser.NATIVE, 0);
};

Native_widget_declarationContext.prototype.WIDGET = function() {
    return this.getToken(OParser.WIDGET, 0);
};

Native_widget_declarationContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

Native_widget_declarationContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

Native_widget_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Native_widget_declarationContext.prototype.native_category_bindings = function() {
    return this.getTypedRuleContext(Native_category_bindingsContext,0);
};

Native_widget_declarationContext.prototype.native_member_method_declaration_list = function() {
    return this.getTypedRuleContext(Native_member_method_declaration_listContext,0);
};

Native_widget_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNative_widget_declaration(this);
	}
};

Native_widget_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNative_widget_declaration(this);
	}
};




OParser.Native_widget_declarationContext = Native_widget_declarationContext;

OParser.prototype.native_widget_declaration = function() {

    var localctx = new Native_widget_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, OParser.RULE_native_widget_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 561;
        this.match(OParser.NATIVE);
        this.state = 562;
        this.match(OParser.WIDGET);
        this.state = 563;
        localctx.name = this.type_identifier();
        this.state = 564;
        this.match(OParser.LCURL);
        this.state = 565;
        localctx.bindings = this.native_category_bindings();
        this.state = 566;
        localctx.methods = this.native_member_method_declaration_list();
        this.state = 567;
        this.match(OParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Concrete_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_concrete_category_declaration;
    this.name = null; // Type_identifierContext
    this.attrs = null; // Attribute_identifier_listContext
    this.derived = null; // Derived_listContext
    this.methods = null; // Category_method_listContext
    return this;
}

Concrete_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concrete_category_declarationContext.prototype.constructor = Concrete_category_declarationContext;

Concrete_category_declarationContext.prototype.CATEGORY = function() {
    return this.getToken(OParser.CATEGORY, 0);
};

Concrete_category_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Concrete_category_declarationContext.prototype.category_method_list = function() {
    return this.getTypedRuleContext(Category_method_listContext,0);
};

Concrete_category_declarationContext.prototype.STORABLE = function() {
    return this.getToken(OParser.STORABLE, 0);
};

Concrete_category_declarationContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Concrete_category_declarationContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Concrete_category_declarationContext.prototype.EXTENDS = function() {
    return this.getToken(OParser.EXTENDS, 0);
};

Concrete_category_declarationContext.prototype.attribute_identifier_list = function() {
    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
};

Concrete_category_declarationContext.prototype.derived_list = function() {
    return this.getTypedRuleContext(Derived_listContext,0);
};

Concrete_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterConcrete_category_declaration(this);
	}
};

Concrete_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitConcrete_category_declaration(this);
	}
};




OParser.Concrete_category_declarationContext = Concrete_category_declarationContext;

OParser.prototype.concrete_category_declaration = function() {

    var localctx = new Concrete_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, OParser.RULE_concrete_category_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 570;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.STORABLE) {
            this.state = 569;
            this.match(OParser.STORABLE);
        }

        this.state = 572;
        this.match(OParser.CATEGORY);
        this.state = 573;
        localctx.name = this.type_identifier();
        this.state = 578;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.LPAR) {
            this.state = 574;
            this.match(OParser.LPAR);
            this.state = 575;
            localctx.attrs = this.attribute_identifier_list();
            this.state = 576;
            this.match(OParser.RPAR);
        }

        this.state = 582;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.EXTENDS) {
            this.state = 580;
            this.match(OParser.EXTENDS);
            this.state = 581;
            localctx.derived = this.derived_list(0);
        }

        this.state = 584;
        localctx.methods = this.category_method_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Singleton_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_singleton_category_declaration;
    this.name = null; // Type_identifierContext
    this.attrs = null; // Attribute_identifier_listContext
    this.methods = null; // Category_method_listContext
    return this;
}

Singleton_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Singleton_category_declarationContext.prototype.constructor = Singleton_category_declarationContext;

Singleton_category_declarationContext.prototype.SINGLETON = function() {
    return this.getToken(OParser.SINGLETON, 0);
};

Singleton_category_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Singleton_category_declarationContext.prototype.category_method_list = function() {
    return this.getTypedRuleContext(Category_method_listContext,0);
};

Singleton_category_declarationContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Singleton_category_declarationContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Singleton_category_declarationContext.prototype.attribute_identifier_list = function() {
    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
};

Singleton_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSingleton_category_declaration(this);
	}
};

Singleton_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSingleton_category_declaration(this);
	}
};




OParser.Singleton_category_declarationContext = Singleton_category_declarationContext;

OParser.prototype.singleton_category_declaration = function() {

    var localctx = new Singleton_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, OParser.RULE_singleton_category_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 586;
        this.match(OParser.SINGLETON);
        this.state = 587;
        localctx.name = this.type_identifier();
        this.state = 592;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.LPAR) {
            this.state = 588;
            this.match(OParser.LPAR);
            this.state = 589;
            localctx.attrs = this.attribute_identifier_list();
            this.state = 590;
            this.match(OParser.RPAR);
        }

        this.state = 594;
        localctx.methods = this.category_method_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Derived_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_derived_list;
    return this;
}

Derived_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Derived_listContext.prototype.constructor = Derived_listContext;


 
Derived_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function DerivedListItemContext(parser, ctx) {
	Derived_listContext.call(this, parser);
    this.items = null; // Derived_listContext;
    this.item = null; // Type_identifierContext;
    Derived_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DerivedListItemContext.prototype = Object.create(Derived_listContext.prototype);
DerivedListItemContext.prototype.constructor = DerivedListItemContext;

OParser.DerivedListItemContext = DerivedListItemContext;

DerivedListItemContext.prototype.COMMA = function() {
    return this.getToken(OParser.COMMA, 0);
};

DerivedListItemContext.prototype.derived_list = function() {
    return this.getTypedRuleContext(Derived_listContext,0);
};

DerivedListItemContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};
DerivedListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDerivedListItem(this);
	}
};

DerivedListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDerivedListItem(this);
	}
};


function DerivedListContext(parser, ctx) {
	Derived_listContext.call(this, parser);
    this.item = null; // Type_identifierContext;
    Derived_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DerivedListContext.prototype = Object.create(Derived_listContext.prototype);
DerivedListContext.prototype.constructor = DerivedListContext;

OParser.DerivedListContext = DerivedListContext;

DerivedListContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};
DerivedListContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDerivedList(this);
	}
};

DerivedListContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDerivedList(this);
	}
};



OParser.prototype.derived_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Derived_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 18;
    this.enterRecursionRule(localctx, 18, OParser.RULE_derived_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new DerivedListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 597;
        localctx.item = this.type_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 604;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new DerivedListItemContext(this, new Derived_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_derived_list);
                this.state = 599;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 600;
                this.match(OParser.COMMA);
                this.state = 601;
                localctx.item = this.type_identifier(); 
            }
            this.state = 606;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Category_method_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_category_method_list;
    return this;
}

Category_method_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_method_listContext.prototype.constructor = Category_method_listContext;


 
Category_method_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function EmptyCategoryMethodListContext(parser, ctx) {
	Category_method_listContext.call(this, parser);
    Category_method_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EmptyCategoryMethodListContext.prototype = Object.create(Category_method_listContext.prototype);
EmptyCategoryMethodListContext.prototype.constructor = EmptyCategoryMethodListContext;

OParser.EmptyCategoryMethodListContext = EmptyCategoryMethodListContext;

EmptyCategoryMethodListContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};
EmptyCategoryMethodListContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterEmptyCategoryMethodList(this);
	}
};

EmptyCategoryMethodListContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitEmptyCategoryMethodList(this);
	}
};


function CurlyCategoryMethodListContext(parser, ctx) {
	Category_method_listContext.call(this, parser);
    this.items = null; // Member_method_declaration_listContext;
    Category_method_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CurlyCategoryMethodListContext.prototype = Object.create(Category_method_listContext.prototype);
CurlyCategoryMethodListContext.prototype.constructor = CurlyCategoryMethodListContext;

OParser.CurlyCategoryMethodListContext = CurlyCategoryMethodListContext;

CurlyCategoryMethodListContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

CurlyCategoryMethodListContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

CurlyCategoryMethodListContext.prototype.member_method_declaration_list = function() {
    return this.getTypedRuleContext(Member_method_declaration_listContext,0);
};
CurlyCategoryMethodListContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCurlyCategoryMethodList(this);
	}
};

CurlyCategoryMethodListContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCurlyCategoryMethodList(this);
	}
};



OParser.Category_method_listContext = Category_method_listContext;

OParser.prototype.category_method_list = function() {

    var localctx = new Category_method_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, OParser.RULE_category_method_list);
    var _la = 0; // Token type
    try {
        this.state = 613;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.SEMI:
            localctx = new EmptyCategoryMethodListContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 607;
            this.match(OParser.SEMI);
            break;
        case OParser.LCURL:
            localctx = new CurlyCategoryMethodListContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 608;
            this.match(OParser.LCURL);
            this.state = 610;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===OParser.COMMENT || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ABSTRACT - 48)))) !== 0) || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (OParser.GETTER - 107)) | (1 << (OParser.METHOD - 107)) | (1 << (OParser.OPERATOR - 107)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (OParser.SETTER - 140)) | (1 << (OParser.TYPE_IDENTIFIER - 140)) | (1 << (OParser.ARONDBASE_IDENTIFIER - 140)))) !== 0)) {
                this.state = 609;
                localctx.items = this.member_method_declaration_list();
            }

            this.state = 612;
            this.match(OParser.RCURL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Operator_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_operator_method_declaration;
    this.typ = null; // TypedefContext
    this.op = null; // OperatorContext
    this.arg = null; // Operator_argumentContext
    this.stmts = null; // Statement_listContext
    return this;
}

Operator_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operator_method_declarationContext.prototype.constructor = Operator_method_declarationContext;

Operator_method_declarationContext.prototype.OPERATOR = function() {
    return this.getToken(OParser.OPERATOR, 0);
};

Operator_method_declarationContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Operator_method_declarationContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Operator_method_declarationContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

Operator_method_declarationContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

Operator_method_declarationContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Operator_method_declarationContext.prototype.operator_argument = function() {
    return this.getTypedRuleContext(Operator_argumentContext,0);
};

Operator_method_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Operator_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Operator_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterOperator_method_declaration(this);
	}
};

Operator_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitOperator_method_declaration(this);
	}
};




OParser.Operator_method_declarationContext = Operator_method_declarationContext;

OParser.prototype.operator_method_declaration = function() {

    var localctx = new Operator_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, OParser.RULE_operator_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 616;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)))) !== 0) || _la===OParser.TYPE_IDENTIFIER) {
            this.state = 615;
            localctx.typ = this.typedef(0);
        }

        this.state = 618;
        this.match(OParser.OPERATOR);
        this.state = 619;
        localctx.op = this.operator();
        this.state = 620;
        this.match(OParser.LPAR);
        this.state = 621;
        localctx.arg = this.operator_argument();
        this.state = 622;
        this.match(OParser.RPAR);
        this.state = 623;
        this.match(OParser.LCURL);
        this.state = 625;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.BOOLEAN - 36)) | (1 << (OParser.CHARACTER - 36)) | (1 << (OParser.TEXT - 36)) | (1 << (OParser.INTEGER - 36)) | (1 << (OParser.DECIMAL - 36)) | (1 << (OParser.DATE - 36)) | (1 << (OParser.TIME - 36)) | (1 << (OParser.DATETIME - 36)) | (1 << (OParser.PERIOD - 36)) | (1 << (OParser.VERSION - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)) | (1 << (OParser.IMAGE - 36)) | (1 << (OParser.UUID - 36)) | (1 << (OParser.ITERATOR - 36)) | (1 << (OParser.CURSOR - 36)) | (1 << (OParser.HTML - 36)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (OParser.BREAK - 78)) | (1 << (OParser.DELETE - 78)) | (1 << (OParser.DO - 78)) | (1 << (OParser.FETCH - 78)) | (1 << (OParser.FILTERED - 78)) | (1 << (OParser.FLUSH - 78)) | (1 << (OParser.FOR - 78)) | (1 << (OParser.IF - 78)))) !== 0) || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (OParser.METHOD - 115)) | (1 << (OParser.MUTABLE - 115)) | (1 << (OParser.NULL - 115)) | (1 << (OParser.READ - 115)) | (1 << (OParser.RETURN - 115)) | (1 << (OParser.SELF - 115)) | (1 << (OParser.SORTED - 115)) | (1 << (OParser.STORE - 115)) | (1 << (OParser.SWITCH - 115)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (OParser.THIS - 148)) | (1 << (OParser.THROW - 148)) | (1 << (OParser.TRY - 148)) | (1 << (OParser.WITH - 148)) | (1 << (OParser.WHILE - 148)) | (1 << (OParser.WRITE - 148)) | (1 << (OParser.BOOLEAN_LITERAL - 148)) | (1 << (OParser.CHAR_LITERAL - 148)) | (1 << (OParser.MIN_INTEGER - 148)) | (1 << (OParser.MAX_INTEGER - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)) | (1 << (OParser.TEXT_LITERAL - 148)) | (1 << (OParser.UUID_LITERAL - 148)) | (1 << (OParser.INTEGER_LITERAL - 148)) | (1 << (OParser.HEXA_LITERAL - 148)) | (1 << (OParser.DECIMAL_LITERAL - 148)) | (1 << (OParser.DATETIME_LITERAL - 148)) | (1 << (OParser.TIME_LITERAL - 148)) | (1 << (OParser.DATE_LITERAL - 148)) | (1 << (OParser.PERIOD_LITERAL - 148)) | (1 << (OParser.VERSION_LITERAL - 148)))) !== 0)) {
            this.state = 624;
            localctx.stmts = this.statement_list();
        }

        this.state = 627;
        this.match(OParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Setter_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_setter_method_declaration;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Statement_listContext
    return this;
}

Setter_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Setter_method_declarationContext.prototype.constructor = Setter_method_declarationContext;

Setter_method_declarationContext.prototype.SETTER = function() {
    return this.getToken(OParser.SETTER, 0);
};

Setter_method_declarationContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

Setter_method_declarationContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

Setter_method_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Setter_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Setter_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSetter_method_declaration(this);
	}
};

Setter_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSetter_method_declaration(this);
	}
};




OParser.Setter_method_declarationContext = Setter_method_declarationContext;

OParser.prototype.setter_method_declaration = function() {

    var localctx = new Setter_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, OParser.RULE_setter_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 629;
        this.match(OParser.SETTER);
        this.state = 630;
        localctx.name = this.variable_identifier();
        this.state = 631;
        this.match(OParser.LCURL);
        this.state = 633;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.BOOLEAN - 36)) | (1 << (OParser.CHARACTER - 36)) | (1 << (OParser.TEXT - 36)) | (1 << (OParser.INTEGER - 36)) | (1 << (OParser.DECIMAL - 36)) | (1 << (OParser.DATE - 36)) | (1 << (OParser.TIME - 36)) | (1 << (OParser.DATETIME - 36)) | (1 << (OParser.PERIOD - 36)) | (1 << (OParser.VERSION - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)) | (1 << (OParser.IMAGE - 36)) | (1 << (OParser.UUID - 36)) | (1 << (OParser.ITERATOR - 36)) | (1 << (OParser.CURSOR - 36)) | (1 << (OParser.HTML - 36)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (OParser.BREAK - 78)) | (1 << (OParser.DELETE - 78)) | (1 << (OParser.DO - 78)) | (1 << (OParser.FETCH - 78)) | (1 << (OParser.FILTERED - 78)) | (1 << (OParser.FLUSH - 78)) | (1 << (OParser.FOR - 78)) | (1 << (OParser.IF - 78)))) !== 0) || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (OParser.METHOD - 115)) | (1 << (OParser.MUTABLE - 115)) | (1 << (OParser.NULL - 115)) | (1 << (OParser.READ - 115)) | (1 << (OParser.RETURN - 115)) | (1 << (OParser.SELF - 115)) | (1 << (OParser.SORTED - 115)) | (1 << (OParser.STORE - 115)) | (1 << (OParser.SWITCH - 115)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (OParser.THIS - 148)) | (1 << (OParser.THROW - 148)) | (1 << (OParser.TRY - 148)) | (1 << (OParser.WITH - 148)) | (1 << (OParser.WHILE - 148)) | (1 << (OParser.WRITE - 148)) | (1 << (OParser.BOOLEAN_LITERAL - 148)) | (1 << (OParser.CHAR_LITERAL - 148)) | (1 << (OParser.MIN_INTEGER - 148)) | (1 << (OParser.MAX_INTEGER - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)) | (1 << (OParser.TEXT_LITERAL - 148)) | (1 << (OParser.UUID_LITERAL - 148)) | (1 << (OParser.INTEGER_LITERAL - 148)) | (1 << (OParser.HEXA_LITERAL - 148)) | (1 << (OParser.DECIMAL_LITERAL - 148)) | (1 << (OParser.DATETIME_LITERAL - 148)) | (1 << (OParser.TIME_LITERAL - 148)) | (1 << (OParser.DATE_LITERAL - 148)) | (1 << (OParser.PERIOD_LITERAL - 148)) | (1 << (OParser.VERSION_LITERAL - 148)))) !== 0)) {
            this.state = 632;
            localctx.stmts = this.statement_list();
        }

        this.state = 635;
        this.match(OParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_setter_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_native_setter_declaration;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Native_statement_listContext
    return this;
}

Native_setter_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_setter_declarationContext.prototype.constructor = Native_setter_declarationContext;

Native_setter_declarationContext.prototype.SETTER = function() {
    return this.getToken(OParser.SETTER, 0);
};

Native_setter_declarationContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

Native_setter_declarationContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

Native_setter_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Native_setter_declarationContext.prototype.NATIVE = function() {
    return this.getToken(OParser.NATIVE, 0);
};

Native_setter_declarationContext.prototype.native_statement_list = function() {
    return this.getTypedRuleContext(Native_statement_listContext,0);
};

Native_setter_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNative_setter_declaration(this);
	}
};

Native_setter_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNative_setter_declaration(this);
	}
};




OParser.Native_setter_declarationContext = Native_setter_declarationContext;

OParser.prototype.native_setter_declaration = function() {

    var localctx = new Native_setter_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, OParser.RULE_native_setter_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 638;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.NATIVE) {
            this.state = 637;
            this.match(OParser.NATIVE);
        }

        this.state = 640;
        this.match(OParser.SETTER);
        this.state = 641;
        localctx.name = this.variable_identifier();
        this.state = 642;
        this.match(OParser.LCURL);
        this.state = 644;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT))) !== 0)) {
            this.state = 643;
            localctx.stmts = this.native_statement_list();
        }

        this.state = 646;
        this.match(OParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Getter_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_getter_method_declaration;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Statement_listContext
    return this;
}

Getter_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Getter_method_declarationContext.prototype.constructor = Getter_method_declarationContext;

Getter_method_declarationContext.prototype.GETTER = function() {
    return this.getToken(OParser.GETTER, 0);
};

Getter_method_declarationContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

Getter_method_declarationContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

Getter_method_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Getter_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Getter_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterGetter_method_declaration(this);
	}
};

Getter_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitGetter_method_declaration(this);
	}
};




OParser.Getter_method_declarationContext = Getter_method_declarationContext;

OParser.prototype.getter_method_declaration = function() {

    var localctx = new Getter_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, OParser.RULE_getter_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 648;
        this.match(OParser.GETTER);
        this.state = 649;
        localctx.name = this.variable_identifier();
        this.state = 650;
        this.match(OParser.LCURL);
        this.state = 652;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.BOOLEAN - 36)) | (1 << (OParser.CHARACTER - 36)) | (1 << (OParser.TEXT - 36)) | (1 << (OParser.INTEGER - 36)) | (1 << (OParser.DECIMAL - 36)) | (1 << (OParser.DATE - 36)) | (1 << (OParser.TIME - 36)) | (1 << (OParser.DATETIME - 36)) | (1 << (OParser.PERIOD - 36)) | (1 << (OParser.VERSION - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)) | (1 << (OParser.IMAGE - 36)) | (1 << (OParser.UUID - 36)) | (1 << (OParser.ITERATOR - 36)) | (1 << (OParser.CURSOR - 36)) | (1 << (OParser.HTML - 36)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (OParser.BREAK - 78)) | (1 << (OParser.DELETE - 78)) | (1 << (OParser.DO - 78)) | (1 << (OParser.FETCH - 78)) | (1 << (OParser.FILTERED - 78)) | (1 << (OParser.FLUSH - 78)) | (1 << (OParser.FOR - 78)) | (1 << (OParser.IF - 78)))) !== 0) || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (OParser.METHOD - 115)) | (1 << (OParser.MUTABLE - 115)) | (1 << (OParser.NULL - 115)) | (1 << (OParser.READ - 115)) | (1 << (OParser.RETURN - 115)) | (1 << (OParser.SELF - 115)) | (1 << (OParser.SORTED - 115)) | (1 << (OParser.STORE - 115)) | (1 << (OParser.SWITCH - 115)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (OParser.THIS - 148)) | (1 << (OParser.THROW - 148)) | (1 << (OParser.TRY - 148)) | (1 << (OParser.WITH - 148)) | (1 << (OParser.WHILE - 148)) | (1 << (OParser.WRITE - 148)) | (1 << (OParser.BOOLEAN_LITERAL - 148)) | (1 << (OParser.CHAR_LITERAL - 148)) | (1 << (OParser.MIN_INTEGER - 148)) | (1 << (OParser.MAX_INTEGER - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)) | (1 << (OParser.TEXT_LITERAL - 148)) | (1 << (OParser.UUID_LITERAL - 148)) | (1 << (OParser.INTEGER_LITERAL - 148)) | (1 << (OParser.HEXA_LITERAL - 148)) | (1 << (OParser.DECIMAL_LITERAL - 148)) | (1 << (OParser.DATETIME_LITERAL - 148)) | (1 << (OParser.TIME_LITERAL - 148)) | (1 << (OParser.DATE_LITERAL - 148)) | (1 << (OParser.PERIOD_LITERAL - 148)) | (1 << (OParser.VERSION_LITERAL - 148)))) !== 0)) {
            this.state = 651;
            localctx.stmts = this.statement_list();
        }

        this.state = 654;
        this.match(OParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_getter_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_native_getter_declaration;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Native_statement_listContext
    return this;
}

Native_getter_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_getter_declarationContext.prototype.constructor = Native_getter_declarationContext;

Native_getter_declarationContext.prototype.GETTER = function() {
    return this.getToken(OParser.GETTER, 0);
};

Native_getter_declarationContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

Native_getter_declarationContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

Native_getter_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Native_getter_declarationContext.prototype.NATIVE = function() {
    return this.getToken(OParser.NATIVE, 0);
};

Native_getter_declarationContext.prototype.native_statement_list = function() {
    return this.getTypedRuleContext(Native_statement_listContext,0);
};

Native_getter_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNative_getter_declaration(this);
	}
};

Native_getter_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNative_getter_declaration(this);
	}
};




OParser.Native_getter_declarationContext = Native_getter_declarationContext;

OParser.prototype.native_getter_declaration = function() {

    var localctx = new Native_getter_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, OParser.RULE_native_getter_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 657;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.NATIVE) {
            this.state = 656;
            this.match(OParser.NATIVE);
        }

        this.state = 659;
        this.match(OParser.GETTER);
        this.state = 660;
        localctx.name = this.variable_identifier();
        this.state = 661;
        this.match(OParser.LCURL);
        this.state = 663;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT))) !== 0)) {
            this.state = 662;
            localctx.stmts = this.native_statement_list();
        }

        this.state = 665;
        this.match(OParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_resource_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_native_resource_declaration;
    this.name = null; // Type_identifierContext
    this.attrs = null; // Attribute_identifier_listContext
    this.bindings = null; // Native_category_bindingsContext
    this.methods = null; // Native_member_method_declaration_listContext
    return this;
}

Native_resource_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_resource_declarationContext.prototype.constructor = Native_resource_declarationContext;

Native_resource_declarationContext.prototype.NATIVE = function() {
    return this.getToken(OParser.NATIVE, 0);
};

Native_resource_declarationContext.prototype.RESOURCE = function() {
    return this.getToken(OParser.RESOURCE, 0);
};

Native_resource_declarationContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

Native_resource_declarationContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

Native_resource_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Native_resource_declarationContext.prototype.native_category_bindings = function() {
    return this.getTypedRuleContext(Native_category_bindingsContext,0);
};

Native_resource_declarationContext.prototype.STORABLE = function() {
    return this.getToken(OParser.STORABLE, 0);
};

Native_resource_declarationContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Native_resource_declarationContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Native_resource_declarationContext.prototype.attribute_identifier_list = function() {
    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
};

Native_resource_declarationContext.prototype.native_member_method_declaration_list = function() {
    return this.getTypedRuleContext(Native_member_method_declaration_listContext,0);
};

Native_resource_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNative_resource_declaration(this);
	}
};

Native_resource_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNative_resource_declaration(this);
	}
};




OParser.Native_resource_declarationContext = Native_resource_declarationContext;

OParser.prototype.native_resource_declaration = function() {

    var localctx = new Native_resource_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, OParser.RULE_native_resource_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 668;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.STORABLE) {
            this.state = 667;
            this.match(OParser.STORABLE);
        }

        this.state = 670;
        this.match(OParser.NATIVE);
        this.state = 671;
        this.match(OParser.RESOURCE);
        this.state = 672;
        localctx.name = this.type_identifier();
        this.state = 677;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.LPAR) {
            this.state = 673;
            this.match(OParser.LPAR);
            this.state = 674;
            localctx.attrs = this.attribute_identifier_list();
            this.state = 675;
            this.match(OParser.RPAR);
        }

        this.state = 679;
        this.match(OParser.LCURL);
        this.state = 680;
        localctx.bindings = this.native_category_bindings();
        this.state = 682;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ANY - 48)))) !== 0) || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (OParser.GETTER - 107)) | (1 << (OParser.METHOD - 107)) | (1 << (OParser.NATIVE - 107)))) !== 0) || _la===OParser.SETTER || _la===OParser.TYPE_IDENTIFIER) {
            this.state = 681;
            localctx.methods = this.native_member_method_declaration_list();
        }

        this.state = 684;
        this.match(OParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_native_category_declaration;
    this.name = null; // Type_identifierContext
    this.attrs = null; // Attribute_identifier_listContext
    this.bindings = null; // Native_category_bindingsContext
    this.methods = null; // Native_member_method_declaration_listContext
    return this;
}

Native_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_declarationContext.prototype.constructor = Native_category_declarationContext;

Native_category_declarationContext.prototype.NATIVE = function() {
    return this.getToken(OParser.NATIVE, 0);
};

Native_category_declarationContext.prototype.CATEGORY = function() {
    return this.getToken(OParser.CATEGORY, 0);
};

Native_category_declarationContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

Native_category_declarationContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

Native_category_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Native_category_declarationContext.prototype.native_category_bindings = function() {
    return this.getTypedRuleContext(Native_category_bindingsContext,0);
};

Native_category_declarationContext.prototype.STORABLE = function() {
    return this.getToken(OParser.STORABLE, 0);
};

Native_category_declarationContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Native_category_declarationContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Native_category_declarationContext.prototype.attribute_identifier_list = function() {
    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
};

Native_category_declarationContext.prototype.native_member_method_declaration_list = function() {
    return this.getTypedRuleContext(Native_member_method_declaration_listContext,0);
};

Native_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNative_category_declaration(this);
	}
};

Native_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNative_category_declaration(this);
	}
};




OParser.Native_category_declarationContext = Native_category_declarationContext;

OParser.prototype.native_category_declaration = function() {

    var localctx = new Native_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, OParser.RULE_native_category_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 687;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.STORABLE) {
            this.state = 686;
            this.match(OParser.STORABLE);
        }

        this.state = 689;
        this.match(OParser.NATIVE);
        this.state = 690;
        this.match(OParser.CATEGORY);
        this.state = 691;
        localctx.name = this.type_identifier();
        this.state = 696;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.LPAR) {
            this.state = 692;
            this.match(OParser.LPAR);
            this.state = 693;
            localctx.attrs = this.attribute_identifier_list();
            this.state = 694;
            this.match(OParser.RPAR);
        }

        this.state = 698;
        this.match(OParser.LCURL);
        this.state = 699;
        localctx.bindings = this.native_category_bindings();
        this.state = 701;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ANY - 48)))) !== 0) || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (OParser.GETTER - 107)) | (1 << (OParser.METHOD - 107)) | (1 << (OParser.NATIVE - 107)))) !== 0) || _la===OParser.SETTER || _la===OParser.TYPE_IDENTIFIER) {
            this.state = 700;
            localctx.methods = this.native_member_method_declaration_list();
        }

        this.state = 703;
        this.match(OParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_bindingsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_native_category_bindings;
    this.items = null; // Native_category_binding_listContext
    return this;
}

Native_category_bindingsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_bindingsContext.prototype.constructor = Native_category_bindingsContext;

Native_category_bindingsContext.prototype.CATEGORY = function() {
    return this.getToken(OParser.CATEGORY, 0);
};

Native_category_bindingsContext.prototype.BINDINGS = function() {
    return this.getToken(OParser.BINDINGS, 0);
};

Native_category_bindingsContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

Native_category_bindingsContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

Native_category_bindingsContext.prototype.native_category_binding_list = function() {
    return this.getTypedRuleContext(Native_category_binding_listContext,0);
};

Native_category_bindingsContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNative_category_bindings(this);
	}
};

Native_category_bindingsContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNative_category_bindings(this);
	}
};




OParser.Native_category_bindingsContext = Native_category_bindingsContext;

OParser.prototype.native_category_bindings = function() {

    var localctx = new Native_category_bindingsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, OParser.RULE_native_category_bindings);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 705;
        this.match(OParser.CATEGORY);
        this.state = 706;
        this.match(OParser.BINDINGS);
        this.state = 707;
        this.match(OParser.LCURL);
        this.state = 708;
        localctx.items = this.native_category_binding_list(0);
        this.state = 709;
        this.match(OParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_binding_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_native_category_binding_list;
    return this;
}

Native_category_binding_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_binding_listContext.prototype.constructor = Native_category_binding_listContext;


 
Native_category_binding_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function NativeCategoryBindingListItemContext(parser, ctx) {
	Native_category_binding_listContext.call(this, parser);
    this.items = null; // Native_category_binding_listContext;
    this.item = null; // Native_category_bindingContext;
    Native_category_binding_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeCategoryBindingListItemContext.prototype = Object.create(Native_category_binding_listContext.prototype);
NativeCategoryBindingListItemContext.prototype.constructor = NativeCategoryBindingListItemContext;

OParser.NativeCategoryBindingListItemContext = NativeCategoryBindingListItemContext;

NativeCategoryBindingListItemContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

NativeCategoryBindingListItemContext.prototype.native_category_binding_list = function() {
    return this.getTypedRuleContext(Native_category_binding_listContext,0);
};

NativeCategoryBindingListItemContext.prototype.native_category_binding = function() {
    return this.getTypedRuleContext(Native_category_bindingContext,0);
};
NativeCategoryBindingListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNativeCategoryBindingListItem(this);
	}
};

NativeCategoryBindingListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNativeCategoryBindingListItem(this);
	}
};


function NativeCategoryBindingListContext(parser, ctx) {
	Native_category_binding_listContext.call(this, parser);
    this.item = null; // Native_category_bindingContext;
    Native_category_binding_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeCategoryBindingListContext.prototype = Object.create(Native_category_binding_listContext.prototype);
NativeCategoryBindingListContext.prototype.constructor = NativeCategoryBindingListContext;

OParser.NativeCategoryBindingListContext = NativeCategoryBindingListContext;

NativeCategoryBindingListContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

NativeCategoryBindingListContext.prototype.native_category_binding = function() {
    return this.getTypedRuleContext(Native_category_bindingContext,0);
};
NativeCategoryBindingListContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNativeCategoryBindingList(this);
	}
};

NativeCategoryBindingListContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNativeCategoryBindingList(this);
	}
};



OParser.prototype.native_category_binding_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Native_category_binding_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 38;
    this.enterRecursionRule(localctx, 38, OParser.RULE_native_category_binding_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new NativeCategoryBindingListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 712;
        localctx.item = this.native_category_binding();
        this.state = 713;
        this.match(OParser.SEMI);
        this._ctx.stop = this._input.LT(-1);
        this.state = 721;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new NativeCategoryBindingListItemContext(this, new Native_category_binding_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_native_category_binding_list);
                this.state = 715;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 716;
                localctx.item = this.native_category_binding();
                this.state = 717;
                this.match(OParser.SEMI); 
            }
            this.state = 723;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Abstract_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_abstract_method_declaration;
    this.typ = null; // TypedefContext
    this.name = null; // Method_identifierContext
    this.args = null; // Argument_listContext
    return this;
}

Abstract_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Abstract_method_declarationContext.prototype.constructor = Abstract_method_declarationContext;

Abstract_method_declarationContext.prototype.ABSTRACT = function() {
    return this.getToken(OParser.ABSTRACT, 0);
};

Abstract_method_declarationContext.prototype.METHOD = function() {
    return this.getToken(OParser.METHOD, 0);
};

Abstract_method_declarationContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Abstract_method_declarationContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Abstract_method_declarationContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

Abstract_method_declarationContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};

Abstract_method_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Abstract_method_declarationContext.prototype.argument_list = function() {
    return this.getTypedRuleContext(Argument_listContext,0);
};

Abstract_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAbstract_method_declaration(this);
	}
};

Abstract_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAbstract_method_declaration(this);
	}
};




OParser.Abstract_method_declarationContext = Abstract_method_declarationContext;

OParser.prototype.abstract_method_declaration = function() {

    var localctx = new Abstract_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, OParser.RULE_abstract_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 724;
        this.match(OParser.ABSTRACT);
        this.state = 726;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)))) !== 0) || _la===OParser.TYPE_IDENTIFIER) {
            this.state = 725;
            localctx.typ = this.typedef(0);
        }

        this.state = 728;
        this.match(OParser.METHOD);
        this.state = 729;
        localctx.name = this.method_identifier();
        this.state = 730;
        this.match(OParser.LPAR);
        this.state = 732;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ANY - 48)))) !== 0) || _la===OParser.MUTABLE || _la===OParser.TYPE_IDENTIFIER || _la===OParser.VARIABLE_IDENTIFIER) {
            this.state = 731;
            localctx.args = this.argument_list();
        }

        this.state = 734;
        this.match(OParser.RPAR);
        this.state = 735;
        this.match(OParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Concrete_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_concrete_method_declaration;
    this.typ = null; // TypedefContext
    this.name = null; // Method_identifierContext
    this.args = null; // Argument_listContext
    this.stmts = null; // Statement_listContext
    return this;
}

Concrete_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concrete_method_declarationContext.prototype.constructor = Concrete_method_declarationContext;

Concrete_method_declarationContext.prototype.METHOD = function() {
    return this.getToken(OParser.METHOD, 0);
};

Concrete_method_declarationContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Concrete_method_declarationContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Concrete_method_declarationContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

Concrete_method_declarationContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

Concrete_method_declarationContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};

Concrete_method_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Concrete_method_declarationContext.prototype.argument_list = function() {
    return this.getTypedRuleContext(Argument_listContext,0);
};

Concrete_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Concrete_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterConcrete_method_declaration(this);
	}
};

Concrete_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitConcrete_method_declaration(this);
	}
};




OParser.Concrete_method_declarationContext = Concrete_method_declarationContext;

OParser.prototype.concrete_method_declaration = function() {

    var localctx = new Concrete_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, OParser.RULE_concrete_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 738;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)))) !== 0) || _la===OParser.TYPE_IDENTIFIER) {
            this.state = 737;
            localctx.typ = this.typedef(0);
        }

        this.state = 740;
        this.match(OParser.METHOD);
        this.state = 741;
        localctx.name = this.method_identifier();
        this.state = 742;
        this.match(OParser.LPAR);
        this.state = 744;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ANY - 48)))) !== 0) || _la===OParser.MUTABLE || _la===OParser.TYPE_IDENTIFIER || _la===OParser.VARIABLE_IDENTIFIER) {
            this.state = 743;
            localctx.args = this.argument_list();
        }

        this.state = 746;
        this.match(OParser.RPAR);
        this.state = 747;
        this.match(OParser.LCURL);
        this.state = 749;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.BOOLEAN - 36)) | (1 << (OParser.CHARACTER - 36)) | (1 << (OParser.TEXT - 36)) | (1 << (OParser.INTEGER - 36)) | (1 << (OParser.DECIMAL - 36)) | (1 << (OParser.DATE - 36)) | (1 << (OParser.TIME - 36)) | (1 << (OParser.DATETIME - 36)) | (1 << (OParser.PERIOD - 36)) | (1 << (OParser.VERSION - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)) | (1 << (OParser.IMAGE - 36)) | (1 << (OParser.UUID - 36)) | (1 << (OParser.ITERATOR - 36)) | (1 << (OParser.CURSOR - 36)) | (1 << (OParser.HTML - 36)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (OParser.BREAK - 78)) | (1 << (OParser.DELETE - 78)) | (1 << (OParser.DO - 78)) | (1 << (OParser.FETCH - 78)) | (1 << (OParser.FILTERED - 78)) | (1 << (OParser.FLUSH - 78)) | (1 << (OParser.FOR - 78)) | (1 << (OParser.IF - 78)))) !== 0) || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (OParser.METHOD - 115)) | (1 << (OParser.MUTABLE - 115)) | (1 << (OParser.NULL - 115)) | (1 << (OParser.READ - 115)) | (1 << (OParser.RETURN - 115)) | (1 << (OParser.SELF - 115)) | (1 << (OParser.SORTED - 115)) | (1 << (OParser.STORE - 115)) | (1 << (OParser.SWITCH - 115)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (OParser.THIS - 148)) | (1 << (OParser.THROW - 148)) | (1 << (OParser.TRY - 148)) | (1 << (OParser.WITH - 148)) | (1 << (OParser.WHILE - 148)) | (1 << (OParser.WRITE - 148)) | (1 << (OParser.BOOLEAN_LITERAL - 148)) | (1 << (OParser.CHAR_LITERAL - 148)) | (1 << (OParser.MIN_INTEGER - 148)) | (1 << (OParser.MAX_INTEGER - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)) | (1 << (OParser.TEXT_LITERAL - 148)) | (1 << (OParser.UUID_LITERAL - 148)) | (1 << (OParser.INTEGER_LITERAL - 148)) | (1 << (OParser.HEXA_LITERAL - 148)) | (1 << (OParser.DECIMAL_LITERAL - 148)) | (1 << (OParser.DATETIME_LITERAL - 148)) | (1 << (OParser.TIME_LITERAL - 148)) | (1 << (OParser.DATE_LITERAL - 148)) | (1 << (OParser.PERIOD_LITERAL - 148)) | (1 << (OParser.VERSION_LITERAL - 148)))) !== 0)) {
            this.state = 748;
            localctx.stmts = this.statement_list();
        }

        this.state = 751;
        this.match(OParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_native_method_declaration;
    this.typ = null; // Category_or_any_typeContext
    this.name = null; // Method_identifierContext
    this.args = null; // Argument_listContext
    this.stmts = null; // Native_statement_listContext
    return this;
}

Native_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_method_declarationContext.prototype.constructor = Native_method_declarationContext;

Native_method_declarationContext.prototype.METHOD = function() {
    return this.getToken(OParser.METHOD, 0);
};

Native_method_declarationContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Native_method_declarationContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Native_method_declarationContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

Native_method_declarationContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

Native_method_declarationContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};

Native_method_declarationContext.prototype.native_statement_list = function() {
    return this.getTypedRuleContext(Native_statement_listContext,0);
};

Native_method_declarationContext.prototype.NATIVE = function() {
    return this.getToken(OParser.NATIVE, 0);
};

Native_method_declarationContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};

Native_method_declarationContext.prototype.argument_list = function() {
    return this.getTypedRuleContext(Argument_listContext,0);
};

Native_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNative_method_declaration(this);
	}
};

Native_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNative_method_declaration(this);
	}
};




OParser.Native_method_declarationContext = Native_method_declarationContext;

OParser.prototype.native_method_declaration = function() {

    var localctx = new Native_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, OParser.RULE_native_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 754;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ANY - 48)))) !== 0) || _la===OParser.TYPE_IDENTIFIER) {
            this.state = 753;
            localctx.typ = this.category_or_any_type();
        }

        this.state = 757;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.NATIVE) {
            this.state = 756;
            this.match(OParser.NATIVE);
        }

        this.state = 759;
        this.match(OParser.METHOD);
        this.state = 760;
        localctx.name = this.method_identifier();
        this.state = 761;
        this.match(OParser.LPAR);
        this.state = 763;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ANY - 48)))) !== 0) || _la===OParser.MUTABLE || _la===OParser.TYPE_IDENTIFIER || _la===OParser.VARIABLE_IDENTIFIER) {
            this.state = 762;
            localctx.args = this.argument_list();
        }

        this.state = 765;
        this.match(OParser.RPAR);
        this.state = 766;
        this.match(OParser.LCURL);
        this.state = 767;
        localctx.stmts = this.native_statement_list();
        this.state = 768;
        this.match(OParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Test_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_test_method_declaration;
    this.name = null; // Token
    this.stmts = null; // Statement_listContext
    this.exps = null; // Assertion_listContext
    this.error = null; // Symbol_identifierContext
    return this;
}

Test_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Test_method_declarationContext.prototype.constructor = Test_method_declarationContext;

Test_method_declarationContext.prototype.TEST = function() {
    return this.getToken(OParser.TEST, 0);
};

Test_method_declarationContext.prototype.METHOD = function() {
    return this.getToken(OParser.METHOD, 0);
};

Test_method_declarationContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Test_method_declarationContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Test_method_declarationContext.prototype.LCURL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.LCURL);
    } else {
        return this.getToken(OParser.LCURL, i);
    }
};


Test_method_declarationContext.prototype.RCURL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.RCURL);
    } else {
        return this.getToken(OParser.RCURL, i);
    }
};


Test_method_declarationContext.prototype.VERIFYING = function() {
    return this.getToken(OParser.VERIFYING, 0);
};

Test_method_declarationContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(OParser.TEXT_LITERAL, 0);
};

Test_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Test_method_declarationContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

Test_method_declarationContext.prototype.assertion_list = function() {
    return this.getTypedRuleContext(Assertion_listContext,0);
};

Test_method_declarationContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};

Test_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterTest_method_declaration(this);
	}
};

Test_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitTest_method_declaration(this);
	}
};




OParser.Test_method_declarationContext = Test_method_declarationContext;

OParser.prototype.test_method_declaration = function() {

    var localctx = new Test_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, OParser.RULE_test_method_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 770;
        this.match(OParser.TEST);
        this.state = 771;
        this.match(OParser.METHOD);
        this.state = 772;
        localctx.name = this.match(OParser.TEXT_LITERAL);
        this.state = 773;
        this.match(OParser.LPAR);
        this.state = 774;
        this.match(OParser.RPAR);
        this.state = 775;
        this.match(OParser.LCURL);
        this.state = 776;
        localctx.stmts = this.statement_list();
        this.state = 777;
        this.match(OParser.RCURL);
        this.state = 778;
        this.match(OParser.VERIFYING);
        this.state = 786;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.LCURL:
            this.state = 779;
            this.match(OParser.LCURL);
            this.state = 780;
            localctx.exps = this.assertion_list();
            this.state = 781;
            this.match(OParser.RCURL);
            break;
        case OParser.SYMBOL_IDENTIFIER:
            this.state = 783;
            localctx.error = this.symbol_identifier();
            this.state = 784;
            this.match(OParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssertionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_assertion;
    this.exp = null; // ExpressionContext
    return this;
}

AssertionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssertionContext.prototype.constructor = AssertionContext;

AssertionContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

AssertionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AssertionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAssertion(this);
	}
};

AssertionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAssertion(this);
	}
};




OParser.AssertionContext = AssertionContext;

OParser.prototype.assertion = function() {

    var localctx = new AssertionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, OParser.RULE_assertion);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 788;
        localctx.exp = this.expression(0);
        this.state = 789;
        this.match(OParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Typed_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_typed_argument;
    this.typ = null; // Category_or_any_typeContext
    this.attrs = null; // Attribute_identifier_listContext
    this.name = null; // Variable_identifierContext
    this.value = null; // Literal_expressionContext
    return this;
}

Typed_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Typed_argumentContext.prototype.constructor = Typed_argumentContext;

Typed_argumentContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};

Typed_argumentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Typed_argumentContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Typed_argumentContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Typed_argumentContext.prototype.EQ = function() {
    return this.getToken(OParser.EQ, 0);
};

Typed_argumentContext.prototype.attribute_identifier_list = function() {
    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
};

Typed_argumentContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};

Typed_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterTyped_argument(this);
	}
};

Typed_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitTyped_argument(this);
	}
};




OParser.Typed_argumentContext = Typed_argumentContext;

OParser.prototype.typed_argument = function() {

    var localctx = new Typed_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, OParser.RULE_typed_argument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 791;
        localctx.typ = this.category_or_any_type();
        this.state = 796;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.LPAR) {
            this.state = 792;
            this.match(OParser.LPAR);
            this.state = 793;
            localctx.attrs = this.attribute_identifier_list();
            this.state = 794;
            this.match(OParser.RPAR);
        }

        this.state = 798;
        localctx.name = this.variable_identifier();
        this.state = 801;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.EQ) {
            this.state = 799;
            this.match(OParser.EQ);
            this.state = 800;
            localctx.value = this.literal_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Statement_or_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_statement_or_list;
    return this;
}

Statement_or_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_or_listContext.prototype.constructor = Statement_or_listContext;


 
Statement_or_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CurlyStatementListContext(parser, ctx) {
	Statement_or_listContext.call(this, parser);
    this.items = null; // Statement_listContext;
    Statement_or_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CurlyStatementListContext.prototype = Object.create(Statement_or_listContext.prototype);
CurlyStatementListContext.prototype.constructor = CurlyStatementListContext;

OParser.CurlyStatementListContext = CurlyStatementListContext;

CurlyStatementListContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

CurlyStatementListContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

CurlyStatementListContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
CurlyStatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCurlyStatementList(this);
	}
};

CurlyStatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCurlyStatementList(this);
	}
};


function SingleStatementContext(parser, ctx) {
	Statement_or_listContext.call(this, parser);
    this.stmt = null; // StatementContext;
    Statement_or_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SingleStatementContext.prototype = Object.create(Statement_or_listContext.prototype);
SingleStatementContext.prototype.constructor = SingleStatementContext;

OParser.SingleStatementContext = SingleStatementContext;

SingleStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};
SingleStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSingleStatement(this);
	}
};

SingleStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSingleStatement(this);
	}
};



OParser.Statement_or_listContext = Statement_or_listContext;

OParser.prototype.statement_or_list = function() {

    var localctx = new Statement_or_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, OParser.RULE_statement_or_list);
    try {
        this.state = 810;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SingleStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 803;
            localctx.stmt = this.statement();
            break;

        case 2:
            localctx = new CurlyStatementListContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 804;
            this.match(OParser.LCURL);
            this.state = 808;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
            if(la_===1) {
                this.state = 805;
                localctx.items = this.statement_list();
                this.state = 806;
                this.match(OParser.RCURL);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;


 
StatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CommentStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.decl = null; // Comment_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CommentStatementContext.prototype = Object.create(StatementContext.prototype);
CommentStatementContext.prototype.constructor = CommentStatementContext;

OParser.CommentStatementContext = CommentStatementContext;

CommentStatementContext.prototype.comment_statement = function() {
    return this.getTypedRuleContext(Comment_statementContext,0);
};
CommentStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCommentStatement(this);
	}
};

CommentStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCommentStatement(this);
	}
};


function StoreStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Store_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StoreStatementContext.prototype = Object.create(StatementContext.prototype);
StoreStatementContext.prototype.constructor = StoreStatementContext;

OParser.StoreStatementContext = StoreStatementContext;

StoreStatementContext.prototype.store_statement = function() {
    return this.getTypedRuleContext(Store_statementContext,0);
};
StoreStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterStoreStatement(this);
	}
};

StoreStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitStoreStatement(this);
	}
};


function WithSingletonStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // With_singleton_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WithSingletonStatementContext.prototype = Object.create(StatementContext.prototype);
WithSingletonStatementContext.prototype.constructor = WithSingletonStatementContext;

OParser.WithSingletonStatementContext = WithSingletonStatementContext;

WithSingletonStatementContext.prototype.with_singleton_statement = function() {
    return this.getTypedRuleContext(With_singleton_statementContext,0);
};
WithSingletonStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterWithSingletonStatement(this);
	}
};

WithSingletonStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitWithSingletonStatement(this);
	}
};


function WriteStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Write_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WriteStatementContext.prototype = Object.create(StatementContext.prototype);
WriteStatementContext.prototype.constructor = WriteStatementContext;

OParser.WriteStatementContext = WriteStatementContext;

WriteStatementContext.prototype.write_statement = function() {
    return this.getTypedRuleContext(Write_statementContext,0);
};
WriteStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterWriteStatement(this);
	}
};

WriteStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitWriteStatement(this);
	}
};


function WhileStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // While_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WhileStatementContext.prototype = Object.create(StatementContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

OParser.WhileStatementContext = WhileStatementContext;

WhileStatementContext.prototype.while_statement = function() {
    return this.getTypedRuleContext(While_statementContext,0);
};
WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitWhileStatement(this);
	}
};


function WithResourceStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // With_resource_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WithResourceStatementContext.prototype = Object.create(StatementContext.prototype);
WithResourceStatementContext.prototype.constructor = WithResourceStatementContext;

OParser.WithResourceStatementContext = WithResourceStatementContext;

WithResourceStatementContext.prototype.with_resource_statement = function() {
    return this.getTypedRuleContext(With_resource_statementContext,0);
};
WithResourceStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterWithResourceStatement(this);
	}
};

WithResourceStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitWithResourceStatement(this);
	}
};


function RaiseStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Raise_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RaiseStatementContext.prototype = Object.create(StatementContext.prototype);
RaiseStatementContext.prototype.constructor = RaiseStatementContext;

OParser.RaiseStatementContext = RaiseStatementContext;

RaiseStatementContext.prototype.raise_statement = function() {
    return this.getTypedRuleContext(Raise_statementContext,0);
};
RaiseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterRaiseStatement(this);
	}
};

RaiseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitRaiseStatement(this);
	}
};


function FetchStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Fetch_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FetchStatementContext.prototype = Object.create(StatementContext.prototype);
FetchStatementContext.prototype.constructor = FetchStatementContext;

OParser.FetchStatementContext = FetchStatementContext;

FetchStatementContext.prototype.fetch_statement = function() {
    return this.getTypedRuleContext(Fetch_statementContext,0);
};
FetchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterFetchStatement(this);
	}
};

FetchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitFetchStatement(this);
	}
};


function BreakStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Break_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BreakStatementContext.prototype = Object.create(StatementContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

OParser.BreakStatementContext = BreakStatementContext;

BreakStatementContext.prototype.break_statement = function() {
    return this.getTypedRuleContext(Break_statementContext,0);
};
BreakStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterBreakStatement(this);
	}
};

BreakStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitBreakStatement(this);
	}
};


function AssignInstanceStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Assign_instance_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignInstanceStatementContext.prototype = Object.create(StatementContext.prototype);
AssignInstanceStatementContext.prototype.constructor = AssignInstanceStatementContext;

OParser.AssignInstanceStatementContext = AssignInstanceStatementContext;

AssignInstanceStatementContext.prototype.assign_instance_statement = function() {
    return this.getTypedRuleContext(Assign_instance_statementContext,0);
};
AssignInstanceStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAssignInstanceStatement(this);
	}
};

AssignInstanceStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAssignInstanceStatement(this);
	}
};


function IfStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // If_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IfStatementContext.prototype = Object.create(StatementContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

OParser.IfStatementContext = IfStatementContext;

IfStatementContext.prototype.if_statement = function() {
    return this.getTypedRuleContext(If_statementContext,0);
};
IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitIfStatement(this);
	}
};


function SwitchStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Switch_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SwitchStatementContext.prototype = Object.create(StatementContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

OParser.SwitchStatementContext = SwitchStatementContext;

SwitchStatementContext.prototype.switch_statement = function() {
    return this.getTypedRuleContext(Switch_statementContext,0);
};
SwitchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSwitchStatement(this);
	}
};

SwitchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSwitchStatement(this);
	}
};


function TryStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Try_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TryStatementContext.prototype = Object.create(StatementContext.prototype);
TryStatementContext.prototype.constructor = TryStatementContext;

OParser.TryStatementContext = TryStatementContext;

TryStatementContext.prototype.try_statement = function() {
    return this.getTypedRuleContext(Try_statementContext,0);
};
TryStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterTryStatement(this);
	}
};

TryStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitTryStatement(this);
	}
};


function MethodCallStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Method_call_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodCallStatementContext.prototype = Object.create(StatementContext.prototype);
MethodCallStatementContext.prototype.constructor = MethodCallStatementContext;

OParser.MethodCallStatementContext = MethodCallStatementContext;

MethodCallStatementContext.prototype.method_call_statement = function() {
    return this.getTypedRuleContext(Method_call_statementContext,0);
};
MethodCallStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMethodCallStatement(this);
	}
};

MethodCallStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMethodCallStatement(this);
	}
};


function ReturnStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Return_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReturnStatementContext.prototype = Object.create(StatementContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

OParser.ReturnStatementContext = ReturnStatementContext;

ReturnStatementContext.prototype.return_statement = function() {
    return this.getTypedRuleContext(Return_statementContext,0);
};
ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitReturnStatement(this);
	}
};


function AssignTupleStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Assign_tuple_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignTupleStatementContext.prototype = Object.create(StatementContext.prototype);
AssignTupleStatementContext.prototype.constructor = AssignTupleStatementContext;

OParser.AssignTupleStatementContext = AssignTupleStatementContext;

AssignTupleStatementContext.prototype.assign_tuple_statement = function() {
    return this.getTypedRuleContext(Assign_tuple_statementContext,0);
};
AssignTupleStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAssignTupleStatement(this);
	}
};

AssignTupleStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAssignTupleStatement(this);
	}
};


function ClosureStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.decl = null; // Concrete_method_declarationContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClosureStatementContext.prototype = Object.create(StatementContext.prototype);
ClosureStatementContext.prototype.constructor = ClosureStatementContext;

OParser.ClosureStatementContext = ClosureStatementContext;

ClosureStatementContext.prototype.concrete_method_declaration = function() {
    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
};
ClosureStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterClosureStatement(this);
	}
};

ClosureStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitClosureStatement(this);
	}
};


function FlushStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Flush_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FlushStatementContext.prototype = Object.create(StatementContext.prototype);
FlushStatementContext.prototype.constructor = FlushStatementContext;

OParser.FlushStatementContext = FlushStatementContext;

FlushStatementContext.prototype.flush_statement = function() {
    return this.getTypedRuleContext(Flush_statementContext,0);
};
FlushStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterFlushStatement(this);
	}
};

FlushStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitFlushStatement(this);
	}
};


function DoWhileStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Do_while_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DoWhileStatementContext.prototype = Object.create(StatementContext.prototype);
DoWhileStatementContext.prototype.constructor = DoWhileStatementContext;

OParser.DoWhileStatementContext = DoWhileStatementContext;

DoWhileStatementContext.prototype.do_while_statement = function() {
    return this.getTypedRuleContext(Do_while_statementContext,0);
};
DoWhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDoWhileStatement(this);
	}
};

DoWhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDoWhileStatement(this);
	}
};


function ForEachStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // For_each_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForEachStatementContext.prototype = Object.create(StatementContext.prototype);
ForEachStatementContext.prototype.constructor = ForEachStatementContext;

OParser.ForEachStatementContext = ForEachStatementContext;

ForEachStatementContext.prototype.for_each_statement = function() {
    return this.getTypedRuleContext(For_each_statementContext,0);
};
ForEachStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterForEachStatement(this);
	}
};

ForEachStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitForEachStatement(this);
	}
};



OParser.StatementContext = StatementContext;

OParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, OParser.RULE_statement);
    try {
        this.state = 832;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MethodCallStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 812;
            localctx.stmt = this.method_call_statement();
            break;

        case 2:
            localctx = new AssignInstanceStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 813;
            localctx.stmt = this.assign_instance_statement();
            break;

        case 3:
            localctx = new AssignTupleStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 814;
            localctx.stmt = this.assign_tuple_statement();
            break;

        case 4:
            localctx = new StoreStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 815;
            localctx.stmt = this.store_statement();
            break;

        case 5:
            localctx = new FetchStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 816;
            localctx.stmt = this.fetch_statement();
            break;

        case 6:
            localctx = new FlushStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 817;
            localctx.stmt = this.flush_statement();
            break;

        case 7:
            localctx = new BreakStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 818;
            localctx.stmt = this.break_statement();
            break;

        case 8:
            localctx = new ReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 819;
            localctx.stmt = this.return_statement();
            break;

        case 9:
            localctx = new IfStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 820;
            localctx.stmt = this.if_statement();
            break;

        case 10:
            localctx = new SwitchStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 821;
            localctx.stmt = this.switch_statement();
            break;

        case 11:
            localctx = new ForEachStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 822;
            localctx.stmt = this.for_each_statement();
            break;

        case 12:
            localctx = new WhileStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 823;
            localctx.stmt = this.while_statement();
            break;

        case 13:
            localctx = new DoWhileStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 824;
            localctx.stmt = this.do_while_statement();
            break;

        case 14:
            localctx = new TryStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 825;
            localctx.stmt = this.try_statement();
            break;

        case 15:
            localctx = new RaiseStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 826;
            localctx.stmt = this.raise_statement();
            break;

        case 16:
            localctx = new WriteStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 827;
            localctx.stmt = this.write_statement();
            break;

        case 17:
            localctx = new WithResourceStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 828;
            localctx.stmt = this.with_resource_statement();
            break;

        case 18:
            localctx = new WithSingletonStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 829;
            localctx.stmt = this.with_singleton_statement();
            break;

        case 19:
            localctx = new ClosureStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 830;
            localctx.decl = this.concrete_method_declaration();
            break;

        case 20:
            localctx = new CommentStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 831;
            localctx.decl = this.comment_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Flush_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_flush_statement;
    return this;
}

Flush_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Flush_statementContext.prototype.constructor = Flush_statementContext;

Flush_statementContext.prototype.FLUSH = function() {
    return this.getToken(OParser.FLUSH, 0);
};

Flush_statementContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Flush_statementContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Flush_statementContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

Flush_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterFlush_statement(this);
	}
};

Flush_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitFlush_statement(this);
	}
};




OParser.Flush_statementContext = Flush_statementContext;

OParser.prototype.flush_statement = function() {

    var localctx = new Flush_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, OParser.RULE_flush_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 834;
        this.match(OParser.FLUSH);
        this.state = 835;
        this.match(OParser.LPAR);
        this.state = 836;
        this.match(OParser.RPAR);
        this.state = 837;
        this.match(OParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Store_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_store_statement;
    this.to_del = null; // Expression_listContext
    this.to_add = null; // Expression_listContext
    this.stmts = null; // Statement_listContext
    return this;
}

Store_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Store_statementContext.prototype.constructor = Store_statementContext;

Store_statementContext.prototype.DELETE = function() {
    return this.getToken(OParser.DELETE, 0);
};

Store_statementContext.prototype.LPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.LPAR);
    } else {
        return this.getToken(OParser.LPAR, i);
    }
};


Store_statementContext.prototype.RPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.RPAR);
    } else {
        return this.getToken(OParser.RPAR, i);
    }
};


Store_statementContext.prototype.STORE = function() {
    return this.getToken(OParser.STORE, 0);
};

Store_statementContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

Store_statementContext.prototype.expression_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expression_listContext);
    } else {
        return this.getTypedRuleContext(Expression_listContext,i);
    }
};

Store_statementContext.prototype.THEN = function() {
    return this.getToken(OParser.THEN, 0);
};

Store_statementContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

Store_statementContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

Store_statementContext.prototype.AND = function() {
    return this.getToken(OParser.AND, 0);
};

Store_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Store_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterStore_statement(this);
	}
};

Store_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitStore_statement(this);
	}
};




OParser.Store_statementContext = Store_statementContext;

OParser.prototype.store_statement = function() {

    var localctx = new Store_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, OParser.RULE_store_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 856;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.DELETE:
            this.state = 839;
            this.match(OParser.DELETE);
            this.state = 840;
            this.match(OParser.LPAR);
            this.state = 841;
            localctx.to_del = this.expression_list();
            this.state = 842;
            this.match(OParser.RPAR);
            this.state = 849;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===OParser.AND) {
                this.state = 843;
                this.match(OParser.AND);
                this.state = 844;
                this.match(OParser.STORE);
                this.state = 845;
                this.match(OParser.LPAR);
                this.state = 846;
                localctx.to_add = this.expression_list();
                this.state = 847;
                this.match(OParser.RPAR);
            }

            break;
        case OParser.STORE:
            this.state = 851;
            this.match(OParser.STORE);
            this.state = 852;
            this.match(OParser.LPAR);
            this.state = 853;
            localctx.to_add = this.expression_list();
            this.state = 854;
            this.match(OParser.RPAR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 864;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.THEN:
            this.state = 858;
            this.match(OParser.THEN);
            this.state = 859;
            this.match(OParser.LCURL);
            this.state = 860;
            localctx.stmts = this.statement_list();
            this.state = 861;
            this.match(OParser.RCURL);
            break;
        case OParser.SEMI:
            this.state = 863;
            this.match(OParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_resource_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_with_resource_statement;
    this.stmt = null; // Assign_variable_statementContext
    this.stmts = null; // Statement_or_listContext
    return this;
}

With_resource_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_resource_statementContext.prototype.constructor = With_resource_statementContext;

With_resource_statementContext.prototype.WITH = function() {
    return this.getToken(OParser.WITH, 0);
};

With_resource_statementContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

With_resource_statementContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

With_resource_statementContext.prototype.assign_variable_statement = function() {
    return this.getTypedRuleContext(Assign_variable_statementContext,0);
};

With_resource_statementContext.prototype.statement_or_list = function() {
    return this.getTypedRuleContext(Statement_or_listContext,0);
};

With_resource_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterWith_resource_statement(this);
	}
};

With_resource_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitWith_resource_statement(this);
	}
};




OParser.With_resource_statementContext = With_resource_statementContext;

OParser.prototype.with_resource_statement = function() {

    var localctx = new With_resource_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, OParser.RULE_with_resource_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 866;
        this.match(OParser.WITH);
        this.state = 867;
        this.match(OParser.LPAR);
        this.state = 868;
        localctx.stmt = this.assign_variable_statement();
        this.state = 869;
        this.match(OParser.RPAR);
        this.state = 870;
        localctx.stmts = this.statement_or_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_singleton_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_with_singleton_statement;
    this.typ = null; // Type_identifierContext
    this.stmts = null; // Statement_or_listContext
    return this;
}

With_singleton_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_singleton_statementContext.prototype.constructor = With_singleton_statementContext;

With_singleton_statementContext.prototype.WITH = function() {
    return this.getToken(OParser.WITH, 0);
};

With_singleton_statementContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

With_singleton_statementContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

With_singleton_statementContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

With_singleton_statementContext.prototype.statement_or_list = function() {
    return this.getTypedRuleContext(Statement_or_listContext,0);
};

With_singleton_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterWith_singleton_statement(this);
	}
};

With_singleton_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitWith_singleton_statement(this);
	}
};




OParser.With_singleton_statementContext = With_singleton_statementContext;

OParser.prototype.with_singleton_statement = function() {

    var localctx = new With_singleton_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, OParser.RULE_with_singleton_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 872;
        this.match(OParser.WITH);
        this.state = 873;
        this.match(OParser.LPAR);
        this.state = 874;
        localctx.typ = this.type_identifier();
        this.state = 875;
        this.match(OParser.RPAR);
        this.state = 876;
        localctx.stmts = this.statement_or_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_switch_statement;
    this.exp = null; // ExpressionContext
    this.cases = null; // Switch_case_statement_listContext
    this.stmts = null; // Statement_listContext
    return this;
}

Switch_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_statementContext.prototype.constructor = Switch_statementContext;

Switch_statementContext.prototype.SWITCH = function() {
    return this.getToken(OParser.SWITCH, 0);
};

Switch_statementContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Switch_statementContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Switch_statementContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

Switch_statementContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

Switch_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Switch_statementContext.prototype.switch_case_statement_list = function() {
    return this.getTypedRuleContext(Switch_case_statement_listContext,0);
};

Switch_statementContext.prototype.DEFAULT = function() {
    return this.getToken(OParser.DEFAULT, 0);
};

Switch_statementContext.prototype.COLON = function() {
    return this.getToken(OParser.COLON, 0);
};

Switch_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Switch_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSwitch_statement(this);
	}
};

Switch_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSwitch_statement(this);
	}
};




OParser.Switch_statementContext = Switch_statementContext;

OParser.prototype.switch_statement = function() {

    var localctx = new Switch_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, OParser.RULE_switch_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 878;
        this.match(OParser.SWITCH);
        this.state = 879;
        this.match(OParser.LPAR);
        this.state = 880;
        localctx.exp = this.expression(0);
        this.state = 881;
        this.match(OParser.RPAR);
        this.state = 882;
        this.match(OParser.LCURL);
        this.state = 883;
        localctx.cases = this.switch_case_statement_list();
        this.state = 889;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.DEFAULT) {
            this.state = 884;
            this.match(OParser.DEFAULT);
            this.state = 885;
            this.match(OParser.COLON);
            this.state = 887;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.BOOLEAN - 36)) | (1 << (OParser.CHARACTER - 36)) | (1 << (OParser.TEXT - 36)) | (1 << (OParser.INTEGER - 36)) | (1 << (OParser.DECIMAL - 36)) | (1 << (OParser.DATE - 36)) | (1 << (OParser.TIME - 36)) | (1 << (OParser.DATETIME - 36)) | (1 << (OParser.PERIOD - 36)) | (1 << (OParser.VERSION - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)) | (1 << (OParser.IMAGE - 36)) | (1 << (OParser.UUID - 36)) | (1 << (OParser.ITERATOR - 36)) | (1 << (OParser.CURSOR - 36)) | (1 << (OParser.HTML - 36)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (OParser.BREAK - 78)) | (1 << (OParser.DELETE - 78)) | (1 << (OParser.DO - 78)) | (1 << (OParser.FETCH - 78)) | (1 << (OParser.FILTERED - 78)) | (1 << (OParser.FLUSH - 78)) | (1 << (OParser.FOR - 78)) | (1 << (OParser.IF - 78)))) !== 0) || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (OParser.METHOD - 115)) | (1 << (OParser.MUTABLE - 115)) | (1 << (OParser.NULL - 115)) | (1 << (OParser.READ - 115)) | (1 << (OParser.RETURN - 115)) | (1 << (OParser.SELF - 115)) | (1 << (OParser.SORTED - 115)) | (1 << (OParser.STORE - 115)) | (1 << (OParser.SWITCH - 115)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (OParser.THIS - 148)) | (1 << (OParser.THROW - 148)) | (1 << (OParser.TRY - 148)) | (1 << (OParser.WITH - 148)) | (1 << (OParser.WHILE - 148)) | (1 << (OParser.WRITE - 148)) | (1 << (OParser.BOOLEAN_LITERAL - 148)) | (1 << (OParser.CHAR_LITERAL - 148)) | (1 << (OParser.MIN_INTEGER - 148)) | (1 << (OParser.MAX_INTEGER - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)) | (1 << (OParser.TEXT_LITERAL - 148)) | (1 << (OParser.UUID_LITERAL - 148)) | (1 << (OParser.INTEGER_LITERAL - 148)) | (1 << (OParser.HEXA_LITERAL - 148)) | (1 << (OParser.DECIMAL_LITERAL - 148)) | (1 << (OParser.DATETIME_LITERAL - 148)) | (1 << (OParser.TIME_LITERAL - 148)) | (1 << (OParser.DATE_LITERAL - 148)) | (1 << (OParser.PERIOD_LITERAL - 148)) | (1 << (OParser.VERSION_LITERAL - 148)))) !== 0)) {
                this.state = 886;
                localctx.stmts = this.statement_list();
            }

        }

        this.state = 891;
        this.match(OParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_case_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_switch_case_statement;
    return this;
}

Switch_case_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_case_statementContext.prototype.constructor = Switch_case_statementContext;


 
Switch_case_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AtomicSwitchCaseContext(parser, ctx) {
	Switch_case_statementContext.call(this, parser);
    this.exp = null; // Atomic_literalContext;
    this.stmts = null; // Statement_listContext;
    Switch_case_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtomicSwitchCaseContext.prototype = Object.create(Switch_case_statementContext.prototype);
AtomicSwitchCaseContext.prototype.constructor = AtomicSwitchCaseContext;

OParser.AtomicSwitchCaseContext = AtomicSwitchCaseContext;

AtomicSwitchCaseContext.prototype.CASE = function() {
    return this.getToken(OParser.CASE, 0);
};

AtomicSwitchCaseContext.prototype.COLON = function() {
    return this.getToken(OParser.COLON, 0);
};

AtomicSwitchCaseContext.prototype.atomic_literal = function() {
    return this.getTypedRuleContext(Atomic_literalContext,0);
};

AtomicSwitchCaseContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
AtomicSwitchCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAtomicSwitchCase(this);
	}
};

AtomicSwitchCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAtomicSwitchCase(this);
	}
};


function CollectionSwitchCaseContext(parser, ctx) {
	Switch_case_statementContext.call(this, parser);
    this.exp = null; // Literal_collectionContext;
    this.stmts = null; // Statement_listContext;
    Switch_case_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CollectionSwitchCaseContext.prototype = Object.create(Switch_case_statementContext.prototype);
CollectionSwitchCaseContext.prototype.constructor = CollectionSwitchCaseContext;

OParser.CollectionSwitchCaseContext = CollectionSwitchCaseContext;

CollectionSwitchCaseContext.prototype.CASE = function() {
    return this.getToken(OParser.CASE, 0);
};

CollectionSwitchCaseContext.prototype.IN = function() {
    return this.getToken(OParser.IN, 0);
};

CollectionSwitchCaseContext.prototype.COLON = function() {
    return this.getToken(OParser.COLON, 0);
};

CollectionSwitchCaseContext.prototype.literal_collection = function() {
    return this.getTypedRuleContext(Literal_collectionContext,0);
};

CollectionSwitchCaseContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
CollectionSwitchCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCollectionSwitchCase(this);
	}
};

CollectionSwitchCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCollectionSwitchCase(this);
	}
};



OParser.Switch_case_statementContext = Switch_case_statementContext;

OParser.prototype.switch_case_statement = function() {

    var localctx = new Switch_case_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, OParser.RULE_switch_case_statement);
    var _la = 0; // Token type
    try {
        this.state = 906;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AtomicSwitchCaseContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 893;
            this.match(OParser.CASE);
            this.state = 894;
            localctx.exp = this.atomic_literal();
            this.state = 895;
            this.match(OParser.COLON);
            this.state = 897;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.BOOLEAN - 36)) | (1 << (OParser.CHARACTER - 36)) | (1 << (OParser.TEXT - 36)) | (1 << (OParser.INTEGER - 36)) | (1 << (OParser.DECIMAL - 36)) | (1 << (OParser.DATE - 36)) | (1 << (OParser.TIME - 36)) | (1 << (OParser.DATETIME - 36)) | (1 << (OParser.PERIOD - 36)) | (1 << (OParser.VERSION - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)) | (1 << (OParser.IMAGE - 36)) | (1 << (OParser.UUID - 36)) | (1 << (OParser.ITERATOR - 36)) | (1 << (OParser.CURSOR - 36)) | (1 << (OParser.HTML - 36)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (OParser.BREAK - 78)) | (1 << (OParser.DELETE - 78)) | (1 << (OParser.DO - 78)) | (1 << (OParser.FETCH - 78)) | (1 << (OParser.FILTERED - 78)) | (1 << (OParser.FLUSH - 78)) | (1 << (OParser.FOR - 78)) | (1 << (OParser.IF - 78)))) !== 0) || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (OParser.METHOD - 115)) | (1 << (OParser.MUTABLE - 115)) | (1 << (OParser.NULL - 115)) | (1 << (OParser.READ - 115)) | (1 << (OParser.RETURN - 115)) | (1 << (OParser.SELF - 115)) | (1 << (OParser.SORTED - 115)) | (1 << (OParser.STORE - 115)) | (1 << (OParser.SWITCH - 115)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (OParser.THIS - 148)) | (1 << (OParser.THROW - 148)) | (1 << (OParser.TRY - 148)) | (1 << (OParser.WITH - 148)) | (1 << (OParser.WHILE - 148)) | (1 << (OParser.WRITE - 148)) | (1 << (OParser.BOOLEAN_LITERAL - 148)) | (1 << (OParser.CHAR_LITERAL - 148)) | (1 << (OParser.MIN_INTEGER - 148)) | (1 << (OParser.MAX_INTEGER - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)) | (1 << (OParser.TEXT_LITERAL - 148)) | (1 << (OParser.UUID_LITERAL - 148)) | (1 << (OParser.INTEGER_LITERAL - 148)) | (1 << (OParser.HEXA_LITERAL - 148)) | (1 << (OParser.DECIMAL_LITERAL - 148)) | (1 << (OParser.DATETIME_LITERAL - 148)) | (1 << (OParser.TIME_LITERAL - 148)) | (1 << (OParser.DATE_LITERAL - 148)) | (1 << (OParser.PERIOD_LITERAL - 148)) | (1 << (OParser.VERSION_LITERAL - 148)))) !== 0)) {
                this.state = 896;
                localctx.stmts = this.statement_list();
            }

            break;

        case 2:
            localctx = new CollectionSwitchCaseContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 899;
            this.match(OParser.CASE);
            this.state = 900;
            this.match(OParser.IN);
            this.state = 901;
            localctx.exp = this.literal_collection();
            this.state = 902;
            this.match(OParser.COLON);
            this.state = 904;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.BOOLEAN - 36)) | (1 << (OParser.CHARACTER - 36)) | (1 << (OParser.TEXT - 36)) | (1 << (OParser.INTEGER - 36)) | (1 << (OParser.DECIMAL - 36)) | (1 << (OParser.DATE - 36)) | (1 << (OParser.TIME - 36)) | (1 << (OParser.DATETIME - 36)) | (1 << (OParser.PERIOD - 36)) | (1 << (OParser.VERSION - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)) | (1 << (OParser.IMAGE - 36)) | (1 << (OParser.UUID - 36)) | (1 << (OParser.ITERATOR - 36)) | (1 << (OParser.CURSOR - 36)) | (1 << (OParser.HTML - 36)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (OParser.BREAK - 78)) | (1 << (OParser.DELETE - 78)) | (1 << (OParser.DO - 78)) | (1 << (OParser.FETCH - 78)) | (1 << (OParser.FILTERED - 78)) | (1 << (OParser.FLUSH - 78)) | (1 << (OParser.FOR - 78)) | (1 << (OParser.IF - 78)))) !== 0) || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (OParser.METHOD - 115)) | (1 << (OParser.MUTABLE - 115)) | (1 << (OParser.NULL - 115)) | (1 << (OParser.READ - 115)) | (1 << (OParser.RETURN - 115)) | (1 << (OParser.SELF - 115)) | (1 << (OParser.SORTED - 115)) | (1 << (OParser.STORE - 115)) | (1 << (OParser.SWITCH - 115)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (OParser.THIS - 148)) | (1 << (OParser.THROW - 148)) | (1 << (OParser.TRY - 148)) | (1 << (OParser.WITH - 148)) | (1 << (OParser.WHILE - 148)) | (1 << (OParser.WRITE - 148)) | (1 << (OParser.BOOLEAN_LITERAL - 148)) | (1 << (OParser.CHAR_LITERAL - 148)) | (1 << (OParser.MIN_INTEGER - 148)) | (1 << (OParser.MAX_INTEGER - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)) | (1 << (OParser.TEXT_LITERAL - 148)) | (1 << (OParser.UUID_LITERAL - 148)) | (1 << (OParser.INTEGER_LITERAL - 148)) | (1 << (OParser.HEXA_LITERAL - 148)) | (1 << (OParser.DECIMAL_LITERAL - 148)) | (1 << (OParser.DATETIME_LITERAL - 148)) | (1 << (OParser.TIME_LITERAL - 148)) | (1 << (OParser.DATE_LITERAL - 148)) | (1 << (OParser.PERIOD_LITERAL - 148)) | (1 << (OParser.VERSION_LITERAL - 148)))) !== 0)) {
                this.state = 903;
                localctx.stmts = this.statement_list();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_each_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_for_each_statement;
    this.name1 = null; // Variable_identifierContext
    this.name2 = null; // Variable_identifierContext
    this.source = null; // ExpressionContext
    this.stmts = null; // Statement_or_listContext
    return this;
}

For_each_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_each_statementContext.prototype.constructor = For_each_statementContext;

For_each_statementContext.prototype.FOR = function() {
    return this.getToken(OParser.FOR, 0);
};

For_each_statementContext.prototype.EACH = function() {
    return this.getToken(OParser.EACH, 0);
};

For_each_statementContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

For_each_statementContext.prototype.IN = function() {
    return this.getToken(OParser.IN, 0);
};

For_each_statementContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

For_each_statementContext.prototype.variable_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_identifierContext);
    } else {
        return this.getTypedRuleContext(Variable_identifierContext,i);
    }
};

For_each_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

For_each_statementContext.prototype.statement_or_list = function() {
    return this.getTypedRuleContext(Statement_or_listContext,0);
};

For_each_statementContext.prototype.COMMA = function() {
    return this.getToken(OParser.COMMA, 0);
};

For_each_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterFor_each_statement(this);
	}
};

For_each_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitFor_each_statement(this);
	}
};




OParser.For_each_statementContext = For_each_statementContext;

OParser.prototype.for_each_statement = function() {

    var localctx = new For_each_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, OParser.RULE_for_each_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 908;
        this.match(OParser.FOR);
        this.state = 909;
        this.match(OParser.EACH);
        this.state = 910;
        this.match(OParser.LPAR);
        this.state = 911;
        localctx.name1 = this.variable_identifier();
        this.state = 914;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.COMMA) {
            this.state = 912;
            this.match(OParser.COMMA);
            this.state = 913;
            localctx.name2 = this.variable_identifier();
        }

        this.state = 916;
        this.match(OParser.IN);
        this.state = 917;
        localctx.source = this.expression(0);
        this.state = 918;
        this.match(OParser.RPAR);
        this.state = 919;
        localctx.stmts = this.statement_or_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Do_while_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_do_while_statement;
    this.stmts = null; // Statement_listContext
    this.exp = null; // ExpressionContext
    return this;
}

Do_while_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Do_while_statementContext.prototype.constructor = Do_while_statementContext;

Do_while_statementContext.prototype.DO = function() {
    return this.getToken(OParser.DO, 0);
};

Do_while_statementContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

Do_while_statementContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

Do_while_statementContext.prototype.WHILE = function() {
    return this.getToken(OParser.WHILE, 0);
};

Do_while_statementContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Do_while_statementContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Do_while_statementContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

Do_while_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Do_while_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Do_while_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDo_while_statement(this);
	}
};

Do_while_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDo_while_statement(this);
	}
};




OParser.Do_while_statementContext = Do_while_statementContext;

OParser.prototype.do_while_statement = function() {

    var localctx = new Do_while_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, OParser.RULE_do_while_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 921;
        this.match(OParser.DO);
        this.state = 922;
        this.match(OParser.LCURL);
        this.state = 924;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.BOOLEAN - 36)) | (1 << (OParser.CHARACTER - 36)) | (1 << (OParser.TEXT - 36)) | (1 << (OParser.INTEGER - 36)) | (1 << (OParser.DECIMAL - 36)) | (1 << (OParser.DATE - 36)) | (1 << (OParser.TIME - 36)) | (1 << (OParser.DATETIME - 36)) | (1 << (OParser.PERIOD - 36)) | (1 << (OParser.VERSION - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)) | (1 << (OParser.IMAGE - 36)) | (1 << (OParser.UUID - 36)) | (1 << (OParser.ITERATOR - 36)) | (1 << (OParser.CURSOR - 36)) | (1 << (OParser.HTML - 36)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (OParser.BREAK - 78)) | (1 << (OParser.DELETE - 78)) | (1 << (OParser.DO - 78)) | (1 << (OParser.FETCH - 78)) | (1 << (OParser.FILTERED - 78)) | (1 << (OParser.FLUSH - 78)) | (1 << (OParser.FOR - 78)) | (1 << (OParser.IF - 78)))) !== 0) || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (OParser.METHOD - 115)) | (1 << (OParser.MUTABLE - 115)) | (1 << (OParser.NULL - 115)) | (1 << (OParser.READ - 115)) | (1 << (OParser.RETURN - 115)) | (1 << (OParser.SELF - 115)) | (1 << (OParser.SORTED - 115)) | (1 << (OParser.STORE - 115)) | (1 << (OParser.SWITCH - 115)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (OParser.THIS - 148)) | (1 << (OParser.THROW - 148)) | (1 << (OParser.TRY - 148)) | (1 << (OParser.WITH - 148)) | (1 << (OParser.WHILE - 148)) | (1 << (OParser.WRITE - 148)) | (1 << (OParser.BOOLEAN_LITERAL - 148)) | (1 << (OParser.CHAR_LITERAL - 148)) | (1 << (OParser.MIN_INTEGER - 148)) | (1 << (OParser.MAX_INTEGER - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)) | (1 << (OParser.TEXT_LITERAL - 148)) | (1 << (OParser.UUID_LITERAL - 148)) | (1 << (OParser.INTEGER_LITERAL - 148)) | (1 << (OParser.HEXA_LITERAL - 148)) | (1 << (OParser.DECIMAL_LITERAL - 148)) | (1 << (OParser.DATETIME_LITERAL - 148)) | (1 << (OParser.TIME_LITERAL - 148)) | (1 << (OParser.DATE_LITERAL - 148)) | (1 << (OParser.PERIOD_LITERAL - 148)) | (1 << (OParser.VERSION_LITERAL - 148)))) !== 0)) {
            this.state = 923;
            localctx.stmts = this.statement_list();
        }

        this.state = 926;
        this.match(OParser.RCURL);
        this.state = 927;
        this.match(OParser.WHILE);
        this.state = 928;
        this.match(OParser.LPAR);
        this.state = 929;
        localctx.exp = this.expression(0);
        this.state = 930;
        this.match(OParser.RPAR);
        this.state = 931;
        this.match(OParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function While_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_while_statement;
    this.exp = null; // ExpressionContext
    this.stmts = null; // Statement_or_listContext
    return this;
}

While_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
While_statementContext.prototype.constructor = While_statementContext;

While_statementContext.prototype.WHILE = function() {
    return this.getToken(OParser.WHILE, 0);
};

While_statementContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

While_statementContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

While_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

While_statementContext.prototype.statement_or_list = function() {
    return this.getTypedRuleContext(Statement_or_listContext,0);
};

While_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterWhile_statement(this);
	}
};

While_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitWhile_statement(this);
	}
};




OParser.While_statementContext = While_statementContext;

OParser.prototype.while_statement = function() {

    var localctx = new While_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, OParser.RULE_while_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 933;
        this.match(OParser.WHILE);
        this.state = 934;
        this.match(OParser.LPAR);
        this.state = 935;
        localctx.exp = this.expression(0);
        this.state = 936;
        this.match(OParser.RPAR);
        this.state = 937;
        localctx.stmts = this.statement_or_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function If_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_if_statement;
    this.exp = null; // ExpressionContext
    this.stmts = null; // Statement_or_listContext
    this.elseIfs = null; // Else_if_statement_listContext
    this.elseStmts = null; // Statement_or_listContext
    return this;
}

If_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_statementContext.prototype.constructor = If_statementContext;

If_statementContext.prototype.IF = function() {
    return this.getToken(OParser.IF, 0);
};

If_statementContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

If_statementContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

If_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

If_statementContext.prototype.statement_or_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Statement_or_listContext);
    } else {
        return this.getTypedRuleContext(Statement_or_listContext,i);
    }
};

If_statementContext.prototype.ELSE = function() {
    return this.getToken(OParser.ELSE, 0);
};

If_statementContext.prototype.else_if_statement_list = function() {
    return this.getTypedRuleContext(Else_if_statement_listContext,0);
};

If_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterIf_statement(this);
	}
};

If_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitIf_statement(this);
	}
};




OParser.If_statementContext = If_statementContext;

OParser.prototype.if_statement = function() {

    var localctx = new If_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, OParser.RULE_if_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 939;
        this.match(OParser.IF);
        this.state = 940;
        this.match(OParser.LPAR);
        this.state = 941;
        localctx.exp = this.expression(0);
        this.state = 942;
        this.match(OParser.RPAR);
        this.state = 943;
        localctx.stmts = this.statement_or_list();
        this.state = 945;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
        if(la_===1) {
            this.state = 944;
            localctx.elseIfs = this.else_if_statement_list(0);

        }
        this.state = 949;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        if(la_===1) {
            this.state = 947;
            this.match(OParser.ELSE);
            this.state = 948;
            localctx.elseStmts = this.statement_or_list();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Else_if_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_else_if_statement_list;
    return this;
}

Else_if_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Else_if_statement_listContext.prototype.constructor = Else_if_statement_listContext;


 
Else_if_statement_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ElseIfStatementListContext(parser, ctx) {
	Else_if_statement_listContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    this.stmts = null; // Statement_or_listContext;
    Else_if_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ElseIfStatementListContext.prototype = Object.create(Else_if_statement_listContext.prototype);
ElseIfStatementListContext.prototype.constructor = ElseIfStatementListContext;

OParser.ElseIfStatementListContext = ElseIfStatementListContext;

ElseIfStatementListContext.prototype.ELSE = function() {
    return this.getToken(OParser.ELSE, 0);
};

ElseIfStatementListContext.prototype.IF = function() {
    return this.getToken(OParser.IF, 0);
};

ElseIfStatementListContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

ElseIfStatementListContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

ElseIfStatementListContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElseIfStatementListContext.prototype.statement_or_list = function() {
    return this.getTypedRuleContext(Statement_or_listContext,0);
};
ElseIfStatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterElseIfStatementList(this);
	}
};

ElseIfStatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitElseIfStatementList(this);
	}
};


function ElseIfStatementListItemContext(parser, ctx) {
	Else_if_statement_listContext.call(this, parser);
    this.items = null; // Else_if_statement_listContext;
    this.exp = null; // ExpressionContext;
    this.stmts = null; // Statement_or_listContext;
    Else_if_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ElseIfStatementListItemContext.prototype = Object.create(Else_if_statement_listContext.prototype);
ElseIfStatementListItemContext.prototype.constructor = ElseIfStatementListItemContext;

OParser.ElseIfStatementListItemContext = ElseIfStatementListItemContext;

ElseIfStatementListItemContext.prototype.ELSE = function() {
    return this.getToken(OParser.ELSE, 0);
};

ElseIfStatementListItemContext.prototype.IF = function() {
    return this.getToken(OParser.IF, 0);
};

ElseIfStatementListItemContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

ElseIfStatementListItemContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

ElseIfStatementListItemContext.prototype.else_if_statement_list = function() {
    return this.getTypedRuleContext(Else_if_statement_listContext,0);
};

ElseIfStatementListItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElseIfStatementListItemContext.prototype.statement_or_list = function() {
    return this.getTypedRuleContext(Statement_or_listContext,0);
};
ElseIfStatementListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterElseIfStatementListItem(this);
	}
};

ElseIfStatementListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitElseIfStatementListItem(this);
	}
};



OParser.prototype.else_if_statement_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Else_if_statement_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 76;
    this.enterRecursionRule(localctx, 76, OParser.RULE_else_if_statement_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new ElseIfStatementListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 952;
        this.match(OParser.ELSE);
        this.state = 953;
        this.match(OParser.IF);
        this.state = 954;
        this.match(OParser.LPAR);
        this.state = 955;
        localctx.exp = this.expression(0);
        this.state = 956;
        this.match(OParser.RPAR);
        this.state = 957;
        localctx.stmts = this.statement_or_list();
        this._ctx.stop = this._input.LT(-1);
        this.state = 969;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ElseIfStatementListItemContext(this, new Else_if_statement_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_else_if_statement_list);
                this.state = 959;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 960;
                this.match(OParser.ELSE);
                this.state = 961;
                this.match(OParser.IF);
                this.state = 962;
                this.match(OParser.LPAR);
                this.state = 963;
                localctx.exp = this.expression(0);
                this.state = 964;
                this.match(OParser.RPAR);
                this.state = 965;
                localctx.stmts = this.statement_or_list(); 
            }
            this.state = 971;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Raise_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_raise_statement;
    this.exp = null; // ExpressionContext
    return this;
}

Raise_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raise_statementContext.prototype.constructor = Raise_statementContext;

Raise_statementContext.prototype.THROW = function() {
    return this.getToken(OParser.THROW, 0);
};

Raise_statementContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

Raise_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Raise_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterRaise_statement(this);
	}
};

Raise_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitRaise_statement(this);
	}
};




OParser.Raise_statementContext = Raise_statementContext;

OParser.prototype.raise_statement = function() {

    var localctx = new Raise_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, OParser.RULE_raise_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 972;
        this.match(OParser.THROW);
        this.state = 973;
        localctx.exp = this.expression(0);
        this.state = 974;
        this.match(OParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Try_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_try_statement;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Statement_listContext
    this.handlers = null; // Catch_statement_listContext
    this.anyStmts = null; // Statement_listContext
    this.finalStmts = null; // Statement_listContext
    return this;
}

Try_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Try_statementContext.prototype.constructor = Try_statementContext;

Try_statementContext.prototype.TRY = function() {
    return this.getToken(OParser.TRY, 0);
};

Try_statementContext.prototype.LPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.LPAR);
    } else {
        return this.getToken(OParser.LPAR, i);
    }
};


Try_statementContext.prototype.RPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.RPAR);
    } else {
        return this.getToken(OParser.RPAR, i);
    }
};


Try_statementContext.prototype.LCURL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.LCURL);
    } else {
        return this.getToken(OParser.LCURL, i);
    }
};


Try_statementContext.prototype.RCURL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.RCURL);
    } else {
        return this.getToken(OParser.RCURL, i);
    }
};


Try_statementContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Try_statementContext.prototype.CATCH = function() {
    return this.getToken(OParser.CATCH, 0);
};

Try_statementContext.prototype.ANY = function() {
    return this.getToken(OParser.ANY, 0);
};

Try_statementContext.prototype.FINALLY = function() {
    return this.getToken(OParser.FINALLY, 0);
};

Try_statementContext.prototype.statement_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Statement_listContext);
    } else {
        return this.getTypedRuleContext(Statement_listContext,i);
    }
};

Try_statementContext.prototype.catch_statement_list = function() {
    return this.getTypedRuleContext(Catch_statement_listContext,0);
};

Try_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterTry_statement(this);
	}
};

Try_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitTry_statement(this);
	}
};




OParser.Try_statementContext = Try_statementContext;

OParser.prototype.try_statement = function() {

    var localctx = new Try_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, OParser.RULE_try_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 976;
        this.match(OParser.TRY);
        this.state = 977;
        this.match(OParser.LPAR);
        this.state = 978;
        localctx.name = this.variable_identifier();
        this.state = 979;
        this.match(OParser.RPAR);
        this.state = 980;
        this.match(OParser.LCURL);
        this.state = 982;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.BOOLEAN - 36)) | (1 << (OParser.CHARACTER - 36)) | (1 << (OParser.TEXT - 36)) | (1 << (OParser.INTEGER - 36)) | (1 << (OParser.DECIMAL - 36)) | (1 << (OParser.DATE - 36)) | (1 << (OParser.TIME - 36)) | (1 << (OParser.DATETIME - 36)) | (1 << (OParser.PERIOD - 36)) | (1 << (OParser.VERSION - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)) | (1 << (OParser.IMAGE - 36)) | (1 << (OParser.UUID - 36)) | (1 << (OParser.ITERATOR - 36)) | (1 << (OParser.CURSOR - 36)) | (1 << (OParser.HTML - 36)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (OParser.BREAK - 78)) | (1 << (OParser.DELETE - 78)) | (1 << (OParser.DO - 78)) | (1 << (OParser.FETCH - 78)) | (1 << (OParser.FILTERED - 78)) | (1 << (OParser.FLUSH - 78)) | (1 << (OParser.FOR - 78)) | (1 << (OParser.IF - 78)))) !== 0) || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (OParser.METHOD - 115)) | (1 << (OParser.MUTABLE - 115)) | (1 << (OParser.NULL - 115)) | (1 << (OParser.READ - 115)) | (1 << (OParser.RETURN - 115)) | (1 << (OParser.SELF - 115)) | (1 << (OParser.SORTED - 115)) | (1 << (OParser.STORE - 115)) | (1 << (OParser.SWITCH - 115)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (OParser.THIS - 148)) | (1 << (OParser.THROW - 148)) | (1 << (OParser.TRY - 148)) | (1 << (OParser.WITH - 148)) | (1 << (OParser.WHILE - 148)) | (1 << (OParser.WRITE - 148)) | (1 << (OParser.BOOLEAN_LITERAL - 148)) | (1 << (OParser.CHAR_LITERAL - 148)) | (1 << (OParser.MIN_INTEGER - 148)) | (1 << (OParser.MAX_INTEGER - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)) | (1 << (OParser.TEXT_LITERAL - 148)) | (1 << (OParser.UUID_LITERAL - 148)) | (1 << (OParser.INTEGER_LITERAL - 148)) | (1 << (OParser.HEXA_LITERAL - 148)) | (1 << (OParser.DECIMAL_LITERAL - 148)) | (1 << (OParser.DATETIME_LITERAL - 148)) | (1 << (OParser.TIME_LITERAL - 148)) | (1 << (OParser.DATE_LITERAL - 148)) | (1 << (OParser.PERIOD_LITERAL - 148)) | (1 << (OParser.VERSION_LITERAL - 148)))) !== 0)) {
            this.state = 981;
            localctx.stmts = this.statement_list();
        }

        this.state = 984;
        this.match(OParser.RCURL);
        this.state = 986;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        if(la_===1) {
            this.state = 985;
            localctx.handlers = this.catch_statement_list();

        }
        this.state = 997;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
        if(la_===1) {
            this.state = 988;
            this.match(OParser.CATCH);
            this.state = 989;
            this.match(OParser.LPAR);
            this.state = 990;
            this.match(OParser.ANY);
            this.state = 991;
            this.match(OParser.RPAR);
            this.state = 992;
            this.match(OParser.LCURL);
            this.state = 994;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.BOOLEAN - 36)) | (1 << (OParser.CHARACTER - 36)) | (1 << (OParser.TEXT - 36)) | (1 << (OParser.INTEGER - 36)) | (1 << (OParser.DECIMAL - 36)) | (1 << (OParser.DATE - 36)) | (1 << (OParser.TIME - 36)) | (1 << (OParser.DATETIME - 36)) | (1 << (OParser.PERIOD - 36)) | (1 << (OParser.VERSION - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)) | (1 << (OParser.IMAGE - 36)) | (1 << (OParser.UUID - 36)) | (1 << (OParser.ITERATOR - 36)) | (1 << (OParser.CURSOR - 36)) | (1 << (OParser.HTML - 36)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (OParser.BREAK - 78)) | (1 << (OParser.DELETE - 78)) | (1 << (OParser.DO - 78)) | (1 << (OParser.FETCH - 78)) | (1 << (OParser.FILTERED - 78)) | (1 << (OParser.FLUSH - 78)) | (1 << (OParser.FOR - 78)) | (1 << (OParser.IF - 78)))) !== 0) || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (OParser.METHOD - 115)) | (1 << (OParser.MUTABLE - 115)) | (1 << (OParser.NULL - 115)) | (1 << (OParser.READ - 115)) | (1 << (OParser.RETURN - 115)) | (1 << (OParser.SELF - 115)) | (1 << (OParser.SORTED - 115)) | (1 << (OParser.STORE - 115)) | (1 << (OParser.SWITCH - 115)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (OParser.THIS - 148)) | (1 << (OParser.THROW - 148)) | (1 << (OParser.TRY - 148)) | (1 << (OParser.WITH - 148)) | (1 << (OParser.WHILE - 148)) | (1 << (OParser.WRITE - 148)) | (1 << (OParser.BOOLEAN_LITERAL - 148)) | (1 << (OParser.CHAR_LITERAL - 148)) | (1 << (OParser.MIN_INTEGER - 148)) | (1 << (OParser.MAX_INTEGER - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)) | (1 << (OParser.TEXT_LITERAL - 148)) | (1 << (OParser.UUID_LITERAL - 148)) | (1 << (OParser.INTEGER_LITERAL - 148)) | (1 << (OParser.HEXA_LITERAL - 148)) | (1 << (OParser.DECIMAL_LITERAL - 148)) | (1 << (OParser.DATETIME_LITERAL - 148)) | (1 << (OParser.TIME_LITERAL - 148)) | (1 << (OParser.DATE_LITERAL - 148)) | (1 << (OParser.PERIOD_LITERAL - 148)) | (1 << (OParser.VERSION_LITERAL - 148)))) !== 0)) {
                this.state = 993;
                localctx.anyStmts = this.statement_list();
            }

            this.state = 996;
            this.match(OParser.RCURL);

        }
        this.state = 1005;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        if(la_===1) {
            this.state = 999;
            this.match(OParser.FINALLY);
            this.state = 1000;
            this.match(OParser.LCURL);
            this.state = 1002;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.BOOLEAN - 36)) | (1 << (OParser.CHARACTER - 36)) | (1 << (OParser.TEXT - 36)) | (1 << (OParser.INTEGER - 36)) | (1 << (OParser.DECIMAL - 36)) | (1 << (OParser.DATE - 36)) | (1 << (OParser.TIME - 36)) | (1 << (OParser.DATETIME - 36)) | (1 << (OParser.PERIOD - 36)) | (1 << (OParser.VERSION - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)) | (1 << (OParser.IMAGE - 36)) | (1 << (OParser.UUID - 36)) | (1 << (OParser.ITERATOR - 36)) | (1 << (OParser.CURSOR - 36)) | (1 << (OParser.HTML - 36)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (OParser.BREAK - 78)) | (1 << (OParser.DELETE - 78)) | (1 << (OParser.DO - 78)) | (1 << (OParser.FETCH - 78)) | (1 << (OParser.FILTERED - 78)) | (1 << (OParser.FLUSH - 78)) | (1 << (OParser.FOR - 78)) | (1 << (OParser.IF - 78)))) !== 0) || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (OParser.METHOD - 115)) | (1 << (OParser.MUTABLE - 115)) | (1 << (OParser.NULL - 115)) | (1 << (OParser.READ - 115)) | (1 << (OParser.RETURN - 115)) | (1 << (OParser.SELF - 115)) | (1 << (OParser.SORTED - 115)) | (1 << (OParser.STORE - 115)) | (1 << (OParser.SWITCH - 115)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (OParser.THIS - 148)) | (1 << (OParser.THROW - 148)) | (1 << (OParser.TRY - 148)) | (1 << (OParser.WITH - 148)) | (1 << (OParser.WHILE - 148)) | (1 << (OParser.WRITE - 148)) | (1 << (OParser.BOOLEAN_LITERAL - 148)) | (1 << (OParser.CHAR_LITERAL - 148)) | (1 << (OParser.MIN_INTEGER - 148)) | (1 << (OParser.MAX_INTEGER - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)) | (1 << (OParser.TEXT_LITERAL - 148)) | (1 << (OParser.UUID_LITERAL - 148)) | (1 << (OParser.INTEGER_LITERAL - 148)) | (1 << (OParser.HEXA_LITERAL - 148)) | (1 << (OParser.DECIMAL_LITERAL - 148)) | (1 << (OParser.DATETIME_LITERAL - 148)) | (1 << (OParser.TIME_LITERAL - 148)) | (1 << (OParser.DATE_LITERAL - 148)) | (1 << (OParser.PERIOD_LITERAL - 148)) | (1 << (OParser.VERSION_LITERAL - 148)))) !== 0)) {
                this.state = 1001;
                localctx.finalStmts = this.statement_list();
            }

            this.state = 1004;
            this.match(OParser.RCURL);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Catch_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_catch_statement;
    return this;
}

Catch_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Catch_statementContext.prototype.constructor = Catch_statementContext;


 
Catch_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CatchAtomicStatementContext(parser, ctx) {
	Catch_statementContext.call(this, parser);
    this.name = null; // Symbol_identifierContext;
    this.stmts = null; // Statement_listContext;
    Catch_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CatchAtomicStatementContext.prototype = Object.create(Catch_statementContext.prototype);
CatchAtomicStatementContext.prototype.constructor = CatchAtomicStatementContext;

OParser.CatchAtomicStatementContext = CatchAtomicStatementContext;

CatchAtomicStatementContext.prototype.CATCH = function() {
    return this.getToken(OParser.CATCH, 0);
};

CatchAtomicStatementContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

CatchAtomicStatementContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

CatchAtomicStatementContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

CatchAtomicStatementContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

CatchAtomicStatementContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};

CatchAtomicStatementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
CatchAtomicStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCatchAtomicStatement(this);
	}
};

CatchAtomicStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCatchAtomicStatement(this);
	}
};


function CatchCollectionStatementContext(parser, ctx) {
	Catch_statementContext.call(this, parser);
    this.exp = null; // Symbol_listContext;
    this.stmts = null; // Statement_listContext;
    Catch_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CatchCollectionStatementContext.prototype = Object.create(Catch_statementContext.prototype);
CatchCollectionStatementContext.prototype.constructor = CatchCollectionStatementContext;

OParser.CatchCollectionStatementContext = CatchCollectionStatementContext;

CatchCollectionStatementContext.prototype.CATCH = function() {
    return this.getToken(OParser.CATCH, 0);
};

CatchCollectionStatementContext.prototype.IN = function() {
    return this.getToken(OParser.IN, 0);
};

CatchCollectionStatementContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

CatchCollectionStatementContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

CatchCollectionStatementContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

CatchCollectionStatementContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

CatchCollectionStatementContext.prototype.symbol_list = function() {
    return this.getTypedRuleContext(Symbol_listContext,0);
};

CatchCollectionStatementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
CatchCollectionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCatchCollectionStatement(this);
	}
};

CatchCollectionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCatchCollectionStatement(this);
	}
};



OParser.Catch_statementContext = Catch_statementContext;

OParser.prototype.catch_statement = function() {

    var localctx = new Catch_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, OParser.RULE_catch_statement);
    var _la = 0; // Token type
    try {
        this.state = 1028;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        switch(la_) {
        case 1:
            localctx = new CatchAtomicStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1007;
            this.match(OParser.CATCH);
            this.state = 1008;
            this.match(OParser.LPAR);
            this.state = 1009;
            localctx.name = this.symbol_identifier();
            this.state = 1010;
            this.match(OParser.RPAR);
            this.state = 1011;
            this.match(OParser.LCURL);
            this.state = 1013;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.BOOLEAN - 36)) | (1 << (OParser.CHARACTER - 36)) | (1 << (OParser.TEXT - 36)) | (1 << (OParser.INTEGER - 36)) | (1 << (OParser.DECIMAL - 36)) | (1 << (OParser.DATE - 36)) | (1 << (OParser.TIME - 36)) | (1 << (OParser.DATETIME - 36)) | (1 << (OParser.PERIOD - 36)) | (1 << (OParser.VERSION - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)) | (1 << (OParser.IMAGE - 36)) | (1 << (OParser.UUID - 36)) | (1 << (OParser.ITERATOR - 36)) | (1 << (OParser.CURSOR - 36)) | (1 << (OParser.HTML - 36)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (OParser.BREAK - 78)) | (1 << (OParser.DELETE - 78)) | (1 << (OParser.DO - 78)) | (1 << (OParser.FETCH - 78)) | (1 << (OParser.FILTERED - 78)) | (1 << (OParser.FLUSH - 78)) | (1 << (OParser.FOR - 78)) | (1 << (OParser.IF - 78)))) !== 0) || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (OParser.METHOD - 115)) | (1 << (OParser.MUTABLE - 115)) | (1 << (OParser.NULL - 115)) | (1 << (OParser.READ - 115)) | (1 << (OParser.RETURN - 115)) | (1 << (OParser.SELF - 115)) | (1 << (OParser.SORTED - 115)) | (1 << (OParser.STORE - 115)) | (1 << (OParser.SWITCH - 115)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (OParser.THIS - 148)) | (1 << (OParser.THROW - 148)) | (1 << (OParser.TRY - 148)) | (1 << (OParser.WITH - 148)) | (1 << (OParser.WHILE - 148)) | (1 << (OParser.WRITE - 148)) | (1 << (OParser.BOOLEAN_LITERAL - 148)) | (1 << (OParser.CHAR_LITERAL - 148)) | (1 << (OParser.MIN_INTEGER - 148)) | (1 << (OParser.MAX_INTEGER - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)) | (1 << (OParser.TEXT_LITERAL - 148)) | (1 << (OParser.UUID_LITERAL - 148)) | (1 << (OParser.INTEGER_LITERAL - 148)) | (1 << (OParser.HEXA_LITERAL - 148)) | (1 << (OParser.DECIMAL_LITERAL - 148)) | (1 << (OParser.DATETIME_LITERAL - 148)) | (1 << (OParser.TIME_LITERAL - 148)) | (1 << (OParser.DATE_LITERAL - 148)) | (1 << (OParser.PERIOD_LITERAL - 148)) | (1 << (OParser.VERSION_LITERAL - 148)))) !== 0)) {
                this.state = 1012;
                localctx.stmts = this.statement_list();
            }

            this.state = 1015;
            this.match(OParser.RCURL);
            break;

        case 2:
            localctx = new CatchCollectionStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1017;
            this.match(OParser.CATCH);
            this.state = 1018;
            this.match(OParser.IN);
            this.state = 1019;
            this.match(OParser.LPAR);
            this.state = 1020;
            localctx.exp = this.symbol_list();
            this.state = 1021;
            this.match(OParser.RPAR);
            this.state = 1022;
            this.match(OParser.LCURL);
            this.state = 1024;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.BOOLEAN - 36)) | (1 << (OParser.CHARACTER - 36)) | (1 << (OParser.TEXT - 36)) | (1 << (OParser.INTEGER - 36)) | (1 << (OParser.DECIMAL - 36)) | (1 << (OParser.DATE - 36)) | (1 << (OParser.TIME - 36)) | (1 << (OParser.DATETIME - 36)) | (1 << (OParser.PERIOD - 36)) | (1 << (OParser.VERSION - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)) | (1 << (OParser.IMAGE - 36)) | (1 << (OParser.UUID - 36)) | (1 << (OParser.ITERATOR - 36)) | (1 << (OParser.CURSOR - 36)) | (1 << (OParser.HTML - 36)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (OParser.BREAK - 78)) | (1 << (OParser.DELETE - 78)) | (1 << (OParser.DO - 78)) | (1 << (OParser.FETCH - 78)) | (1 << (OParser.FILTERED - 78)) | (1 << (OParser.FLUSH - 78)) | (1 << (OParser.FOR - 78)) | (1 << (OParser.IF - 78)))) !== 0) || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (OParser.METHOD - 115)) | (1 << (OParser.MUTABLE - 115)) | (1 << (OParser.NULL - 115)) | (1 << (OParser.READ - 115)) | (1 << (OParser.RETURN - 115)) | (1 << (OParser.SELF - 115)) | (1 << (OParser.SORTED - 115)) | (1 << (OParser.STORE - 115)) | (1 << (OParser.SWITCH - 115)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (OParser.THIS - 148)) | (1 << (OParser.THROW - 148)) | (1 << (OParser.TRY - 148)) | (1 << (OParser.WITH - 148)) | (1 << (OParser.WHILE - 148)) | (1 << (OParser.WRITE - 148)) | (1 << (OParser.BOOLEAN_LITERAL - 148)) | (1 << (OParser.CHAR_LITERAL - 148)) | (1 << (OParser.MIN_INTEGER - 148)) | (1 << (OParser.MAX_INTEGER - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)) | (1 << (OParser.TEXT_LITERAL - 148)) | (1 << (OParser.UUID_LITERAL - 148)) | (1 << (OParser.INTEGER_LITERAL - 148)) | (1 << (OParser.HEXA_LITERAL - 148)) | (1 << (OParser.DECIMAL_LITERAL - 148)) | (1 << (OParser.DATETIME_LITERAL - 148)) | (1 << (OParser.TIME_LITERAL - 148)) | (1 << (OParser.DATE_LITERAL - 148)) | (1 << (OParser.PERIOD_LITERAL - 148)) | (1 << (OParser.VERSION_LITERAL - 148)))) !== 0)) {
                this.state = 1023;
                localctx.stmts = this.statement_list();
            }

            this.state = 1026;
            this.match(OParser.RCURL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Break_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_break_statement;
    return this;
}

Break_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Break_statementContext.prototype.constructor = Break_statementContext;

Break_statementContext.prototype.BREAK = function() {
    return this.getToken(OParser.BREAK, 0);
};

Break_statementContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

Break_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterBreak_statement(this);
	}
};

Break_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitBreak_statement(this);
	}
};




OParser.Break_statementContext = Break_statementContext;

OParser.prototype.break_statement = function() {

    var localctx = new Break_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, OParser.RULE_break_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1030;
        this.match(OParser.BREAK);
        this.state = 1031;
        this.match(OParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Return_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_return_statement;
    this.exp = null; // ExpressionContext
    return this;
}

Return_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_statementContext.prototype.constructor = Return_statementContext;

Return_statementContext.prototype.RETURN = function() {
    return this.getToken(OParser.RETURN, 0);
};

Return_statementContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

Return_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Return_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterReturn_statement(this);
	}
};

Return_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitReturn_statement(this);
	}
};




OParser.Return_statementContext = Return_statementContext;

OParser.prototype.return_statement = function() {

    var localctx = new Return_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, OParser.RULE_return_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1033;
        this.match(OParser.RETURN);
        this.state = 1035;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTGT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (OParser.EXECUTE - 98)) | (1 << (OParser.FETCH - 98)) | (1 << (OParser.FILTERED - 98)) | (1 << (OParser.MUTABLE - 98)) | (1 << (OParser.NULL - 98)))) !== 0) || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (OParser.READ - 133)) | (1 << (OParser.SELF - 133)) | (1 << (OParser.SORTED - 133)) | (1 << (OParser.THIS - 133)) | (1 << (OParser.BOOLEAN_LITERAL - 133)) | (1 << (OParser.CHAR_LITERAL - 133)) | (1 << (OParser.MIN_INTEGER - 133)) | (1 << (OParser.MAX_INTEGER - 133)) | (1 << (OParser.SYMBOL_IDENTIFIER - 133)) | (1 << (OParser.TYPE_IDENTIFIER - 133)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (OParser.VARIABLE_IDENTIFIER - 165)) | (1 << (OParser.TEXT_LITERAL - 165)) | (1 << (OParser.UUID_LITERAL - 165)) | (1 << (OParser.INTEGER_LITERAL - 165)) | (1 << (OParser.HEXA_LITERAL - 165)) | (1 << (OParser.DECIMAL_LITERAL - 165)) | (1 << (OParser.DATETIME_LITERAL - 165)) | (1 << (OParser.TIME_LITERAL - 165)) | (1 << (OParser.DATE_LITERAL - 165)) | (1 << (OParser.PERIOD_LITERAL - 165)) | (1 << (OParser.VERSION_LITERAL - 165)))) !== 0)) {
            this.state = 1034;
            localctx.exp = this.expression(0);
        }

        this.state = 1037;
        this.match(OParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_call_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_method_call_expression;
    this.name = null; // Method_identifierContext
    this.args = null; // Argument_assignment_listContext
    return this;
}

Method_call_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_call_expressionContext.prototype.constructor = Method_call_expressionContext;

Method_call_expressionContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Method_call_expressionContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Method_call_expressionContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};

Method_call_expressionContext.prototype.argument_assignment_list = function() {
    return this.getTypedRuleContext(Argument_assignment_listContext,0);
};

Method_call_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMethod_call_expression(this);
	}
};

Method_call_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMethod_call_expression(this);
	}
};




OParser.Method_call_expressionContext = Method_call_expressionContext;

OParser.prototype.method_call_expression = function() {

    var localctx = new Method_call_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, OParser.RULE_method_call_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1039;
        localctx.name = this.method_identifier();
        this.state = 1040;
        this.match(OParser.LPAR);
        this.state = 1042;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTGT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (OParser.EXECUTE - 98)) | (1 << (OParser.FETCH - 98)) | (1 << (OParser.FILTERED - 98)) | (1 << (OParser.MUTABLE - 98)) | (1 << (OParser.NULL - 98)))) !== 0) || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (OParser.READ - 133)) | (1 << (OParser.SELF - 133)) | (1 << (OParser.SORTED - 133)) | (1 << (OParser.THIS - 133)) | (1 << (OParser.BOOLEAN_LITERAL - 133)) | (1 << (OParser.CHAR_LITERAL - 133)) | (1 << (OParser.MIN_INTEGER - 133)) | (1 << (OParser.MAX_INTEGER - 133)) | (1 << (OParser.SYMBOL_IDENTIFIER - 133)) | (1 << (OParser.TYPE_IDENTIFIER - 133)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (OParser.VARIABLE_IDENTIFIER - 165)) | (1 << (OParser.TEXT_LITERAL - 165)) | (1 << (OParser.UUID_LITERAL - 165)) | (1 << (OParser.INTEGER_LITERAL - 165)) | (1 << (OParser.HEXA_LITERAL - 165)) | (1 << (OParser.DECIMAL_LITERAL - 165)) | (1 << (OParser.DATETIME_LITERAL - 165)) | (1 << (OParser.TIME_LITERAL - 165)) | (1 << (OParser.DATE_LITERAL - 165)) | (1 << (OParser.PERIOD_LITERAL - 165)) | (1 << (OParser.VERSION_LITERAL - 165)))) !== 0)) {
            this.state = 1041;
            localctx.args = this.argument_assignment_list(0);
        }

        this.state = 1044;
        this.match(OParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_call_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_method_call_statement;
    this.parent = null; // Instance_expressionContext
    this.method = null; // Method_call_expressionContext
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Statement_listContext
    return this;
}

Method_call_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_call_statementContext.prototype.constructor = Method_call_statementContext;

Method_call_statementContext.prototype.method_call_expression = function() {
    return this.getTypedRuleContext(Method_call_expressionContext,0);
};

Method_call_statementContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

Method_call_statementContext.prototype.DOT = function() {
    return this.getToken(OParser.DOT, 0);
};

Method_call_statementContext.prototype.instance_expression = function() {
    return this.getTypedRuleContext(Instance_expressionContext,0);
};

Method_call_statementContext.prototype.THEN = function() {
    return this.getToken(OParser.THEN, 0);
};

Method_call_statementContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

Method_call_statementContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

Method_call_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Method_call_statementContext.prototype.WITH = function() {
    return this.getToken(OParser.WITH, 0);
};

Method_call_statementContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Method_call_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMethod_call_statement(this);
	}
};

Method_call_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMethod_call_statement(this);
	}
};




OParser.Method_call_statementContext = Method_call_statementContext;

OParser.prototype.method_call_statement = function() {

    var localctx = new Method_call_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, OParser.RULE_method_call_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1049;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        if(la_===1) {
            this.state = 1046;
            localctx.parent = this.instance_expression(0);
            this.state = 1047;
            this.match(OParser.DOT);

        }
        this.state = 1051;
        localctx.method = this.method_call_expression();
        this.state = 1062;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.THEN:
            this.state = 1052;
            this.match(OParser.THEN);
            this.state = 1055;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===OParser.WITH) {
                this.state = 1053;
                this.match(OParser.WITH);
                this.state = 1054;
                localctx.name = this.variable_identifier();
            }

            this.state = 1057;
            this.match(OParser.LCURL);
            this.state = 1058;
            localctx.stmts = this.statement_list();
            this.state = 1059;
            this.match(OParser.RCURL);
            break;
        case OParser.SEMI:
            this.state = 1061;
            this.match(OParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function X_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_x_expression;
    return this;
}

X_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
X_expressionContext.prototype.constructor = X_expressionContext;

X_expressionContext.prototype.css_expression = function() {
    return this.getTypedRuleContext(Css_expressionContext,0);
};

X_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterX_expression(this);
	}
};

X_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitX_expression(this);
	}
};




OParser.X_expressionContext = X_expressionContext;

OParser.prototype.x_expression = function() {

    var localctx = new X_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, OParser.RULE_x_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1064;
        this.css_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function IntDivideExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntDivideExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IntDivideExpressionContext.prototype.constructor = IntDivideExpressionContext;

OParser.IntDivideExpressionContext = IntDivideExpressionContext;

IntDivideExpressionContext.prototype.idivide = function() {
    return this.getTypedRuleContext(IdivideContext,0);
};

IntDivideExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
IntDivideExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterIntDivideExpression(this);
	}
};

IntDivideExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitIntDivideExpression(this);
	}
};


function HasAnyExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HasAnyExpressionContext.prototype = Object.create(ExpressionContext.prototype);
HasAnyExpressionContext.prototype.constructor = HasAnyExpressionContext;

OParser.HasAnyExpressionContext = HasAnyExpressionContext;

HasAnyExpressionContext.prototype.HAS = function() {
    return this.getToken(OParser.HAS, 0);
};

HasAnyExpressionContext.prototype.ANY = function() {
    return this.getToken(OParser.ANY, 0);
};

HasAnyExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
HasAnyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterHasAnyExpression(this);
	}
};

HasAnyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitHasAnyExpression(this);
	}
};


function HasExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HasExpressionContext.prototype = Object.create(ExpressionContext.prototype);
HasExpressionContext.prototype.constructor = HasExpressionContext;

OParser.HasExpressionContext = HasExpressionContext;

HasExpressionContext.prototype.HAS = function() {
    return this.getToken(OParser.HAS, 0);
};

HasExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
HasExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterHasExpression(this);
	}
};

HasExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitHasExpression(this);
	}
};


function TernaryExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.test = null; // ExpressionContext;
    this.ifTrue = null; // ExpressionContext;
    this.ifFalse = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TernaryExpressionContext.prototype = Object.create(ExpressionContext.prototype);
TernaryExpressionContext.prototype.constructor = TernaryExpressionContext;

OParser.TernaryExpressionContext = TernaryExpressionContext;

TernaryExpressionContext.prototype.QMARK = function() {
    return this.getToken(OParser.QMARK, 0);
};

TernaryExpressionContext.prototype.COLON = function() {
    return this.getToken(OParser.COLON, 0);
};

TernaryExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
TernaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterTernaryExpression(this);
	}
};

TernaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitTernaryExpression(this);
	}
};


function NotEqualsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotEqualsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotEqualsExpressionContext.prototype.constructor = NotEqualsExpressionContext;

OParser.NotEqualsExpressionContext = NotEqualsExpressionContext;

NotEqualsExpressionContext.prototype.XEQ = function() {
    return this.getToken(OParser.XEQ, 0);
};

NotEqualsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotEqualsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNotEqualsExpression(this);
	}
};

NotEqualsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNotEqualsExpression(this);
	}
};


function InExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InExpressionContext.prototype = Object.create(ExpressionContext.prototype);
InExpressionContext.prototype.constructor = InExpressionContext;

OParser.InExpressionContext = InExpressionContext;

InExpressionContext.prototype.IN = function() {
    return this.getToken(OParser.IN, 0);
};

InExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
InExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterInExpression(this);
	}
};

InExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitInExpression(this);
	}
};


function IsAnExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // An_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsAnExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IsAnExpressionContext.prototype.constructor = IsAnExpressionContext;

OParser.IsAnExpressionContext = IsAnExpressionContext;

IsAnExpressionContext.prototype.IS = function() {
    return this.getToken(OParser.IS, 0);
};

IsAnExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IsAnExpressionContext.prototype.an_expression = function() {
    return this.getTypedRuleContext(An_expressionContext,0);
};
IsAnExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterIsAnExpression(this);
	}
};

IsAnExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitIsAnExpression(this);
	}
};


function JsxExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Jsx_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JsxExpressionContext.prototype = Object.create(ExpressionContext.prototype);
JsxExpressionContext.prototype.constructor = JsxExpressionContext;

OParser.JsxExpressionContext = JsxExpressionContext;

JsxExpressionContext.prototype.jsx_expression = function() {
    return this.getTypedRuleContext(Jsx_expressionContext,0);
};
JsxExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsxExpression(this);
	}
};

JsxExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsxExpression(this);
	}
};


function NotExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotExpressionContext.prototype.constructor = NotExpressionContext;

OParser.NotExpressionContext = NotExpressionContext;

NotExpressionContext.prototype.XMARK = function() {
    return this.getToken(OParser.XMARK, 0);
};

NotExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
NotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNotExpression(this);
	}
};

NotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNotExpression(this);
	}
};


function GreaterThanExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GreaterThanExpressionContext.prototype = Object.create(ExpressionContext.prototype);
GreaterThanExpressionContext.prototype.constructor = GreaterThanExpressionContext;

OParser.GreaterThanExpressionContext = GreaterThanExpressionContext;

GreaterThanExpressionContext.prototype.GT = function() {
    return this.getToken(OParser.GT, 0);
};

GreaterThanExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
GreaterThanExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterGreaterThanExpression(this);
	}
};

GreaterThanExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitGreaterThanExpression(this);
	}
};


function OrExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OrExpressionContext.prototype = Object.create(ExpressionContext.prototype);
OrExpressionContext.prototype.constructor = OrExpressionContext;

OParser.OrExpressionContext = OrExpressionContext;

OrExpressionContext.prototype.PIPE2 = function() {
    return this.getToken(OParser.PIPE2, 0);
};

OrExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
OrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterOrExpression(this);
	}
};

OrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitOrExpression(this);
	}
};


function CodeExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CodeExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CodeExpressionContext.prototype.constructor = CodeExpressionContext;

OParser.CodeExpressionContext = CodeExpressionContext;

CodeExpressionContext.prototype.CODE = function() {
    return this.getToken(OParser.CODE, 0);
};

CodeExpressionContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

CodeExpressionContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

CodeExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
CodeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCodeExpression(this);
	}
};

CodeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCodeExpression(this);
	}
};


function LessThanOrEqualExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LessThanOrEqualExpressionContext.prototype = Object.create(ExpressionContext.prototype);
LessThanOrEqualExpressionContext.prototype.constructor = LessThanOrEqualExpressionContext;

OParser.LessThanOrEqualExpressionContext = LessThanOrEqualExpressionContext;

LessThanOrEqualExpressionContext.prototype.LTE = function() {
    return this.getToken(OParser.LTE, 0);
};

LessThanOrEqualExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
LessThanOrEqualExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterLessThanOrEqualExpression(this);
	}
};

LessThanOrEqualExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitLessThanOrEqualExpression(this);
	}
};


function NotHasAnyExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotHasAnyExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotHasAnyExpressionContext.prototype.constructor = NotHasAnyExpressionContext;

OParser.NotHasAnyExpressionContext = NotHasAnyExpressionContext;

NotHasAnyExpressionContext.prototype.NOT = function() {
    return this.getToken(OParser.NOT, 0);
};

NotHasAnyExpressionContext.prototype.HAS = function() {
    return this.getToken(OParser.HAS, 0);
};

NotHasAnyExpressionContext.prototype.ANY = function() {
    return this.getToken(OParser.ANY, 0);
};

NotHasAnyExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotHasAnyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNotHasAnyExpression(this);
	}
};

NotHasAnyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNotHasAnyExpression(this);
	}
};


function AndExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AndExpressionContext.prototype = Object.create(ExpressionContext.prototype);
AndExpressionContext.prototype.constructor = AndExpressionContext;

OParser.AndExpressionContext = AndExpressionContext;

AndExpressionContext.prototype.AMP2 = function() {
    return this.getToken(OParser.AMP2, 0);
};

AndExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
AndExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAndExpression(this);
	}
};

AndExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAndExpression(this);
	}
};


function ArrowExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Arrow_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrowExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ArrowExpressionContext.prototype.constructor = ArrowExpressionContext;

OParser.ArrowExpressionContext = ArrowExpressionContext;

ArrowExpressionContext.prototype.arrow_expression = function() {
    return this.getTypedRuleContext(Arrow_expressionContext,0);
};
ArrowExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterArrowExpression(this);
	}
};

ArrowExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitArrowExpression(this);
	}
};


function NotHasExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotHasExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotHasExpressionContext.prototype.constructor = NotHasExpressionContext;

OParser.NotHasExpressionContext = NotHasExpressionContext;

NotHasExpressionContext.prototype.NOT = function() {
    return this.getToken(OParser.NOT, 0);
};

NotHasExpressionContext.prototype.HAS = function() {
    return this.getToken(OParser.HAS, 0);
};

NotHasExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotHasExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNotHasExpression(this);
	}
};

NotHasExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNotHasExpression(this);
	}
};


function ClosureExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Closure_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClosureExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ClosureExpressionContext.prototype.constructor = ClosureExpressionContext;

OParser.ClosureExpressionContext = ClosureExpressionContext;

ClosureExpressionContext.prototype.closure_expression = function() {
    return this.getTypedRuleContext(Closure_expressionContext,0);
};
ClosureExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterClosureExpression(this);
	}
};

ClosureExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitClosureExpression(this);
	}
};


function NotHasAllExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotHasAllExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotHasAllExpressionContext.prototype.constructor = NotHasAllExpressionContext;

OParser.NotHasAllExpressionContext = NotHasAllExpressionContext;

NotHasAllExpressionContext.prototype.NOT = function() {
    return this.getToken(OParser.NOT, 0);
};

NotHasAllExpressionContext.prototype.HAS = function() {
    return this.getToken(OParser.HAS, 0);
};

NotHasAllExpressionContext.prototype.ALL = function() {
    return this.getToken(OParser.ALL, 0);
};

NotHasAllExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotHasAllExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNotHasAllExpression(this);
	}
};

NotHasAllExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNotHasAllExpression(this);
	}
};


function ContainsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ContainsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ContainsExpressionContext.prototype.constructor = ContainsExpressionContext;

OParser.ContainsExpressionContext = ContainsExpressionContext;

ContainsExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(OParser.CONTAINS, 0);
};

ContainsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ContainsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterContainsExpression(this);
	}
};

ContainsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitContainsExpression(this);
	}
};


function NotContainsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotContainsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotContainsExpressionContext.prototype.constructor = NotContainsExpressionContext;

OParser.NotContainsExpressionContext = NotContainsExpressionContext;

NotContainsExpressionContext.prototype.NOT = function() {
    return this.getToken(OParser.NOT, 0);
};

NotContainsExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(OParser.CONTAINS, 0);
};

NotContainsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotContainsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNotContainsExpression(this);
	}
};

NotContainsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNotContainsExpression(this);
	}
};


function MultiplyExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiplyExpressionContext.prototype = Object.create(ExpressionContext.prototype);
MultiplyExpressionContext.prototype.constructor = MultiplyExpressionContext;

OParser.MultiplyExpressionContext = MultiplyExpressionContext;

MultiplyExpressionContext.prototype.multiply = function() {
    return this.getTypedRuleContext(MultiplyContext,0);
};

MultiplyExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
MultiplyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMultiplyExpression(this);
	}
};

MultiplyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMultiplyExpression(this);
	}
};


function RoughlyEqualsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RoughlyEqualsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
RoughlyEqualsExpressionContext.prototype.constructor = RoughlyEqualsExpressionContext;

OParser.RoughlyEqualsExpressionContext = RoughlyEqualsExpressionContext;

RoughlyEqualsExpressionContext.prototype.TEQ = function() {
    return this.getToken(OParser.TEQ, 0);
};

RoughlyEqualsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
RoughlyEqualsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterRoughlyEqualsExpression(this);
	}
};

RoughlyEqualsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitRoughlyEqualsExpression(this);
	}
};


function IsNotAnExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // An_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsNotAnExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IsNotAnExpressionContext.prototype.constructor = IsNotAnExpressionContext;

OParser.IsNotAnExpressionContext = IsNotAnExpressionContext;

IsNotAnExpressionContext.prototype.IS = function() {
    return this.getToken(OParser.IS, 0);
};

IsNotAnExpressionContext.prototype.NOT = function() {
    return this.getToken(OParser.NOT, 0);
};

IsNotAnExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IsNotAnExpressionContext.prototype.an_expression = function() {
    return this.getTypedRuleContext(An_expressionContext,0);
};
IsNotAnExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterIsNotAnExpression(this);
	}
};

IsNotAnExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitIsNotAnExpression(this);
	}
};


function ExecuteExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExecuteExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ExecuteExpressionContext.prototype.constructor = ExecuteExpressionContext;

OParser.ExecuteExpressionContext = ExecuteExpressionContext;

ExecuteExpressionContext.prototype.EXECUTE = function() {
    return this.getToken(OParser.EXECUTE, 0);
};

ExecuteExpressionContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

ExecuteExpressionContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

ExecuteExpressionContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
ExecuteExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterExecuteExpression(this);
	}
};

ExecuteExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitExecuteExpression(this);
	}
};


function GreaterThanOrEqualExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GreaterThanOrEqualExpressionContext.prototype = Object.create(ExpressionContext.prototype);
GreaterThanOrEqualExpressionContext.prototype.constructor = GreaterThanOrEqualExpressionContext;

OParser.GreaterThanOrEqualExpressionContext = GreaterThanOrEqualExpressionContext;

GreaterThanOrEqualExpressionContext.prototype.GTE = function() {
    return this.getToken(OParser.GTE, 0);
};

GreaterThanOrEqualExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
GreaterThanOrEqualExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterGreaterThanOrEqualExpression(this);
	}
};

GreaterThanOrEqualExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitGreaterThanOrEqualExpression(this);
	}
};


function NotInExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotInExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotInExpressionContext.prototype.constructor = NotInExpressionContext;

OParser.NotInExpressionContext = NotInExpressionContext;

NotInExpressionContext.prototype.NOT = function() {
    return this.getToken(OParser.NOT, 0);
};

NotInExpressionContext.prototype.IN = function() {
    return this.getToken(OParser.IN, 0);
};

NotInExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotInExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNotInExpression(this);
	}
};

NotInExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNotInExpression(this);
	}
};


function IteratorExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    this.name = null; // Variable_identifierContext;
    this.source = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IteratorExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IteratorExpressionContext.prototype.constructor = IteratorExpressionContext;

OParser.IteratorExpressionContext = IteratorExpressionContext;

IteratorExpressionContext.prototype.FOR = function() {
    return this.getToken(OParser.FOR, 0);
};

IteratorExpressionContext.prototype.EACH = function() {
    return this.getToken(OParser.EACH, 0);
};

IteratorExpressionContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

IteratorExpressionContext.prototype.IN = function() {
    return this.getToken(OParser.IN, 0);
};

IteratorExpressionContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

IteratorExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

IteratorExpressionContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
IteratorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterIteratorExpression(this);
	}
};

IteratorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitIteratorExpression(this);
	}
};


function IsNotExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsNotExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IsNotExpressionContext.prototype.constructor = IsNotExpressionContext;

OParser.IsNotExpressionContext = IsNotExpressionContext;

IsNotExpressionContext.prototype.IS = function() {
    return this.getToken(OParser.IS, 0);
};

IsNotExpressionContext.prototype.NOT = function() {
    return this.getToken(OParser.NOT, 0);
};

IsNotExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
IsNotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterIsNotExpression(this);
	}
};

IsNotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitIsNotExpression(this);
	}
};


function DivideExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DivideExpressionContext.prototype = Object.create(ExpressionContext.prototype);
DivideExpressionContext.prototype.constructor = DivideExpressionContext;

OParser.DivideExpressionContext = DivideExpressionContext;

DivideExpressionContext.prototype.divide = function() {
    return this.getTypedRuleContext(DivideContext,0);
};

DivideExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
DivideExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDivideExpression(this);
	}
};

DivideExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDivideExpression(this);
	}
};


function IsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IsExpressionContext.prototype.constructor = IsExpressionContext;

OParser.IsExpressionContext = IsExpressionContext;

IsExpressionContext.prototype.IS = function() {
    return this.getToken(OParser.IS, 0);
};

IsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
IsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterIsExpression(this);
	}
};

IsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitIsExpression(this);
	}
};


function MinusExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MinusExpressionContext.prototype = Object.create(ExpressionContext.prototype);
MinusExpressionContext.prototype.constructor = MinusExpressionContext;

OParser.MinusExpressionContext = MinusExpressionContext;

MinusExpressionContext.prototype.MINUS = function() {
    return this.getToken(OParser.MINUS, 0);
};

MinusExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
MinusExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMinusExpression(this);
	}
};

MinusExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMinusExpression(this);
	}
};


function AddExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.op = null; // Token;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AddExpressionContext.prototype = Object.create(ExpressionContext.prototype);
AddExpressionContext.prototype.constructor = AddExpressionContext;

OParser.AddExpressionContext = AddExpressionContext;

AddExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AddExpressionContext.prototype.PLUS = function() {
    return this.getToken(OParser.PLUS, 0);
};

AddExpressionContext.prototype.MINUS = function() {
    return this.getToken(OParser.MINUS, 0);
};
AddExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAddExpression(this);
	}
};

AddExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAddExpression(this);
	}
};


function HasAllExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HasAllExpressionContext.prototype = Object.create(ExpressionContext.prototype);
HasAllExpressionContext.prototype.constructor = HasAllExpressionContext;

OParser.HasAllExpressionContext = HasAllExpressionContext;

HasAllExpressionContext.prototype.HAS = function() {
    return this.getToken(OParser.HAS, 0);
};

HasAllExpressionContext.prototype.ALL = function() {
    return this.getToken(OParser.ALL, 0);
};

HasAllExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
HasAllExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterHasAllExpression(this);
	}
};

HasAllExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitHasAllExpression(this);
	}
};


function InstanceExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Instance_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstanceExpressionContext.prototype = Object.create(ExpressionContext.prototype);
InstanceExpressionContext.prototype.constructor = InstanceExpressionContext;

OParser.InstanceExpressionContext = InstanceExpressionContext;

InstanceExpressionContext.prototype.instance_expression = function() {
    return this.getTypedRuleContext(Instance_expressionContext,0);
};
InstanceExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterInstanceExpression(this);
	}
};

InstanceExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitInstanceExpression(this);
	}
};


function MutableInstanceExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Mutable_instance_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MutableInstanceExpressionContext.prototype = Object.create(ExpressionContext.prototype);
MutableInstanceExpressionContext.prototype.constructor = MutableInstanceExpressionContext;

OParser.MutableInstanceExpressionContext = MutableInstanceExpressionContext;

MutableInstanceExpressionContext.prototype.mutable_instance_expression = function() {
    return this.getTypedRuleContext(Mutable_instance_expressionContext,0);
};
MutableInstanceExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMutableInstanceExpression(this);
	}
};

MutableInstanceExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMutableInstanceExpression(this);
	}
};


function CssExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Css_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CssExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CssExpressionContext.prototype.constructor = CssExpressionContext;

OParser.CssExpressionContext = CssExpressionContext;

CssExpressionContext.prototype.css_expression = function() {
    return this.getTypedRuleContext(Css_expressionContext,0);
};
CssExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCssExpression(this);
	}
};

CssExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCssExpression(this);
	}
};


function CastExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.right = null; // Category_or_any_typeContext;
    this.left = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CastExpressionContext.prototype.constructor = CastExpressionContext;

OParser.CastExpressionContext = CastExpressionContext;

CastExpressionContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

CastExpressionContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

CastExpressionContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};

CastExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
CastExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCastExpression(this);
	}
};

CastExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCastExpression(this);
	}
};


function ModuloExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ModuloExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ModuloExpressionContext.prototype.constructor = ModuloExpressionContext;

OParser.ModuloExpressionContext = ModuloExpressionContext;

ModuloExpressionContext.prototype.modulo = function() {
    return this.getTypedRuleContext(ModuloContext,0);
};

ModuloExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ModuloExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterModuloExpression(this);
	}
};

ModuloExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitModuloExpression(this);
	}
};


function LessThanExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LessThanExpressionContext.prototype = Object.create(ExpressionContext.prototype);
LessThanExpressionContext.prototype.constructor = LessThanExpressionContext;

OParser.LessThanExpressionContext = LessThanExpressionContext;

LessThanExpressionContext.prototype.LT = function() {
    return this.getToken(OParser.LT, 0);
};

LessThanExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
LessThanExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterLessThanExpression(this);
	}
};

LessThanExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitLessThanExpression(this);
	}
};


function EqualsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
EqualsExpressionContext.prototype.constructor = EqualsExpressionContext;

OParser.EqualsExpressionContext = EqualsExpressionContext;

EqualsExpressionContext.prototype.EQ2 = function() {
    return this.getToken(OParser.EQ2, 0);
};

EqualsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
EqualsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterEqualsExpression(this);
	}
};

EqualsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitEqualsExpression(this);
	}
};



OParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 94;
    this.enterRecursionRule(localctx, 94, OParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1092;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        switch(la_) {
        case 1:
            localctx = new CssExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1067;
            localctx.exp = this.css_expression();
            break;

        case 2:
            localctx = new JsxExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1068;
            localctx.exp = this.jsx_expression();
            break;

        case 3:
            localctx = new InstanceExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1069;
            localctx.exp = this.instance_expression(0);
            break;

        case 4:
            localctx = new MutableInstanceExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1070;
            localctx.exp = this.mutable_instance_expression(0);
            break;

        case 5:
            localctx = new ArrowExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1071;
            localctx.exp = this.arrow_expression();
            break;

        case 6:
            localctx = new MinusExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1072;
            this.match(OParser.MINUS);
            this.state = 1073;
            localctx.exp = this.expression(36);
            break;

        case 7:
            localctx = new NotExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1074;
            this.match(OParser.XMARK);
            this.state = 1075;
            localctx.exp = this.expression(35);
            break;

        case 8:
            localctx = new CastExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1076;
            this.match(OParser.LPAR);
            this.state = 1077;
            localctx.right = this.category_or_any_type();
            this.state = 1078;
            this.match(OParser.RPAR);
            this.state = 1079;
            localctx.left = this.expression(29);
            break;

        case 9:
            localctx = new CodeExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1081;
            this.match(OParser.CODE);
            this.state = 1082;
            this.match(OParser.LPAR);
            this.state = 1083;
            localctx.exp = this.expression(0);
            this.state = 1084;
            this.match(OParser.RPAR);
            break;

        case 10:
            localctx = new ExecuteExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1086;
            this.match(OParser.EXECUTE);
            this.state = 1087;
            this.match(OParser.LPAR);
            this.state = 1088;
            localctx.name = this.variable_identifier();
            this.state = 1089;
            this.match(OParser.RPAR);
            break;

        case 11:
            localctx = new ClosureExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1091;
            localctx.exp = this.closure_expression();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1210;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1208;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new MultiplyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1094;
                    if (!( this.precpred(this._ctx, 34))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 34)");
                    }
                    this.state = 1095;
                    this.multiply();
                    this.state = 1096;
                    localctx.right = this.expression(35);
                    break;

                case 2:
                    localctx = new DivideExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1098;
                    if (!( this.precpred(this._ctx, 33))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 33)");
                    }
                    this.state = 1099;
                    this.divide();
                    this.state = 1100;
                    localctx.right = this.expression(34);
                    break;

                case 3:
                    localctx = new ModuloExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1102;
                    if (!( this.precpred(this._ctx, 32))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 32)");
                    }
                    this.state = 1103;
                    this.modulo();
                    this.state = 1104;
                    localctx.right = this.expression(33);
                    break;

                case 4:
                    localctx = new IntDivideExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1106;
                    if (!( this.precpred(this._ctx, 31))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 31)");
                    }
                    this.state = 1107;
                    this.idivide();
                    this.state = 1108;
                    localctx.right = this.expression(32);
                    break;

                case 5:
                    localctx = new AddExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1110;
                    if (!( this.precpred(this._ctx, 30))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 30)");
                    }
                    this.state = 1111;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===OParser.PLUS || _la===OParser.MINUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1112;
                    localctx.right = this.expression(31);
                    break;

                case 6:
                    localctx = new LessThanExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1113;
                    if (!( this.precpred(this._ctx, 28))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
                    }
                    this.state = 1114;
                    this.match(OParser.LT);
                    this.state = 1115;
                    localctx.right = this.expression(29);
                    break;

                case 7:
                    localctx = new LessThanOrEqualExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1116;
                    if (!( this.precpred(this._ctx, 27))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
                    }
                    this.state = 1117;
                    this.match(OParser.LTE);
                    this.state = 1118;
                    localctx.right = this.expression(28);
                    break;

                case 8:
                    localctx = new GreaterThanExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1119;
                    if (!( this.precpred(this._ctx, 26))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
                    }
                    this.state = 1120;
                    this.match(OParser.GT);
                    this.state = 1121;
                    localctx.right = this.expression(27);
                    break;

                case 9:
                    localctx = new GreaterThanOrEqualExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1122;
                    if (!( this.precpred(this._ctx, 25))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                    }
                    this.state = 1123;
                    this.match(OParser.GTE);
                    this.state = 1124;
                    localctx.right = this.expression(26);
                    break;

                case 10:
                    localctx = new IsNotExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1125;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 1126;
                    this.match(OParser.IS);
                    this.state = 1127;
                    this.match(OParser.NOT);
                    this.state = 1128;
                    localctx.right = this.expression(23);
                    break;

                case 11:
                    localctx = new IsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1129;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 1130;
                    this.match(OParser.IS);
                    this.state = 1131;
                    localctx.right = this.expression(22);
                    break;

                case 12:
                    localctx = new EqualsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1132;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 1133;
                    this.match(OParser.EQ2);
                    this.state = 1134;
                    localctx.right = this.expression(21);
                    break;

                case 13:
                    localctx = new NotEqualsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1135;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 1136;
                    this.match(OParser.XEQ);
                    this.state = 1137;
                    localctx.right = this.expression(20);
                    break;

                case 14:
                    localctx = new RoughlyEqualsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1138;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 1139;
                    this.match(OParser.TEQ);
                    this.state = 1140;
                    localctx.right = this.expression(19);
                    break;

                case 15:
                    localctx = new ContainsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1141;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 1142;
                    this.match(OParser.CONTAINS);
                    this.state = 1143;
                    localctx.right = this.expression(18);
                    break;

                case 16:
                    localctx = new InExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1144;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 1145;
                    this.match(OParser.IN);
                    this.state = 1146;
                    localctx.right = this.expression(17);
                    break;

                case 17:
                    localctx = new HasExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1147;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 1148;
                    this.match(OParser.HAS);
                    this.state = 1149;
                    localctx.right = this.expression(16);
                    break;

                case 18:
                    localctx = new HasAllExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1150;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 1151;
                    this.match(OParser.HAS);
                    this.state = 1152;
                    this.match(OParser.ALL);
                    this.state = 1153;
                    localctx.right = this.expression(15);
                    break;

                case 19:
                    localctx = new HasAnyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1154;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 1155;
                    this.match(OParser.HAS);
                    this.state = 1156;
                    this.match(OParser.ANY);
                    this.state = 1157;
                    localctx.right = this.expression(14);
                    break;

                case 20:
                    localctx = new NotContainsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1158;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 1159;
                    this.match(OParser.NOT);
                    this.state = 1160;
                    this.match(OParser.CONTAINS);
                    this.state = 1161;
                    localctx.right = this.expression(13);
                    break;

                case 21:
                    localctx = new NotInExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1162;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 1163;
                    this.match(OParser.NOT);
                    this.state = 1164;
                    this.match(OParser.IN);
                    this.state = 1165;
                    localctx.right = this.expression(12);
                    break;

                case 22:
                    localctx = new NotHasExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1166;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 1167;
                    this.match(OParser.NOT);
                    this.state = 1168;
                    this.match(OParser.HAS);
                    this.state = 1169;
                    localctx.right = this.expression(11);
                    break;

                case 23:
                    localctx = new NotHasAllExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1170;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 1171;
                    this.match(OParser.NOT);
                    this.state = 1172;
                    this.match(OParser.HAS);
                    this.state = 1173;
                    this.match(OParser.ALL);
                    this.state = 1174;
                    localctx.right = this.expression(10);
                    break;

                case 24:
                    localctx = new NotHasAnyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1175;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 1176;
                    this.match(OParser.NOT);
                    this.state = 1177;
                    this.match(OParser.HAS);
                    this.state = 1178;
                    this.match(OParser.ANY);
                    this.state = 1179;
                    localctx.right = this.expression(9);
                    break;

                case 25:
                    localctx = new OrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1180;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 1181;
                    this.match(OParser.PIPE2);
                    this.state = 1182;
                    localctx.right = this.expression(8);
                    break;

                case 26:
                    localctx = new AndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1183;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 1184;
                    this.match(OParser.AMP2);
                    this.state = 1185;
                    localctx.right = this.expression(7);
                    break;

                case 27:
                    localctx = new TernaryExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.test = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1186;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1187;
                    this.match(OParser.QMARK);
                    this.state = 1188;
                    localctx.ifTrue = this.expression(0);
                    this.state = 1189;
                    this.match(OParser.COLON);
                    this.state = 1190;
                    localctx.ifFalse = this.expression(6);
                    break;

                case 28:
                    localctx = new IsNotAnExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1192;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 1193;
                    this.match(OParser.IS);
                    this.state = 1194;
                    this.match(OParser.NOT);
                    this.state = 1195;
                    localctx.right = this.an_expression();
                    break;

                case 29:
                    localctx = new IsAnExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1196;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 1197;
                    this.match(OParser.IS);
                    this.state = 1198;
                    localctx.right = this.an_expression();
                    break;

                case 30:
                    localctx = new IteratorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.exp = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_expression);
                    this.state = 1199;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1200;
                    this.match(OParser.FOR);
                    this.state = 1201;
                    this.match(OParser.EACH);
                    this.state = 1202;
                    this.match(OParser.LPAR);
                    this.state = 1203;
                    localctx.name = this.variable_identifier();
                    this.state = 1204;
                    this.match(OParser.IN);
                    this.state = 1205;
                    localctx.source = this.expression(0);
                    this.state = 1206;
                    this.match(OParser.RPAR);
                    break;

                } 
            }
            this.state = 1212;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function An_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_an_expression;
    this.typ = null; // Category_or_any_typeContext
    return this;
}

An_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
An_expressionContext.prototype.constructor = An_expressionContext;

An_expressionContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(OParser.VARIABLE_IDENTIFIER, 0);
};

An_expressionContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};

An_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAn_expression(this);
	}
};

An_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAn_expression(this);
	}
};




OParser.An_expressionContext = An_expressionContext;

OParser.prototype.an_expression = function() {

    var localctx = new An_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, OParser.RULE_an_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1213;
        if (!( this.willBeAOrAn())) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.willBeAOrAn()");
        }
        this.state = 1214;
        this.match(OParser.VARIABLE_IDENTIFIER);
        this.state = 1215;
        localctx.typ = this.category_or_any_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Closure_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_closure_expression;
    this.name = null; // Type_identifierContext
    return this;
}

Closure_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Closure_expressionContext.prototype.constructor = Closure_expressionContext;

Closure_expressionContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Closure_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterClosure_expression(this);
	}
};

Closure_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitClosure_expression(this);
	}
};




OParser.Closure_expressionContext = Closure_expressionContext;

OParser.prototype.closure_expression = function() {

    var localctx = new Closure_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, OParser.RULE_closure_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1217;
        localctx.name = this.type_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Selectable_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_selectable_expression;
    return this;
}

Selectable_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Selectable_expressionContext.prototype.constructor = Selectable_expressionContext;


 
Selectable_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ThisExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // This_expressionContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ThisExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
ThisExpressionContext.prototype.constructor = ThisExpressionContext;

OParser.ThisExpressionContext = ThisExpressionContext;

ThisExpressionContext.prototype.this_expression = function() {
    return this.getTypedRuleContext(This_expressionContext,0);
};
ThisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterThisExpression(this);
	}
};

ThisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitThisExpression(this);
	}
};


function ParenthesisExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // Parenthesis_expressionContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesisExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
ParenthesisExpressionContext.prototype.constructor = ParenthesisExpressionContext;

OParser.ParenthesisExpressionContext = ParenthesisExpressionContext;

ParenthesisExpressionContext.prototype.parenthesis_expression = function() {
    return this.getTypedRuleContext(Parenthesis_expressionContext,0);
};
ParenthesisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterParenthesisExpression(this);
	}
};

ParenthesisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitParenthesisExpression(this);
	}
};


function LiteralExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // Literal_expressionContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
LiteralExpressionContext.prototype.constructor = LiteralExpressionContext;

OParser.LiteralExpressionContext = LiteralExpressionContext;

LiteralExpressionContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};
LiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterLiteralExpression(this);
	}
};

LiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitLiteralExpression(this);
	}
};


function MethodExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // Method_expressionContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
MethodExpressionContext.prototype.constructor = MethodExpressionContext;

OParser.MethodExpressionContext = MethodExpressionContext;

MethodExpressionContext.prototype.method_expression = function() {
    return this.getTypedRuleContext(Method_expressionContext,0);
};
MethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMethodExpression(this);
	}
};

MethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMethodExpression(this);
	}
};


function IdentifierExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // IdentifierContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdentifierExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
IdentifierExpressionContext.prototype.constructor = IdentifierExpressionContext;

OParser.IdentifierExpressionContext = IdentifierExpressionContext;

IdentifierExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
IdentifierExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterIdentifierExpression(this);
	}
};

IdentifierExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitIdentifierExpression(this);
	}
};



OParser.Selectable_expressionContext = Selectable_expressionContext;

OParser.prototype.selectable_expression = function() {

    var localctx = new Selectable_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, OParser.RULE_selectable_expression);
    try {
        this.state = 1224;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1219;
            localctx.exp = this.method_expression();
            break;

        case 2:
            localctx = new ParenthesisExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1220;
            localctx.exp = this.parenthesis_expression();
            break;

        case 3:
            localctx = new LiteralExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1221;
            localctx.exp = this.literal_expression();
            break;

        case 4:
            localctx = new IdentifierExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1222;
            localctx.exp = this.identifier();
            break;

        case 5:
            localctx = new ThisExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1223;
            localctx.exp = this.this_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Instance_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_instance_expression;
    return this;
}

Instance_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Instance_expressionContext.prototype.constructor = Instance_expressionContext;


 
Instance_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function SelectorExpressionContext(parser, ctx) {
	Instance_expressionContext.call(this, parser);
    this.parent = null; // Instance_expressionContext;
    this.selector = null; // Instance_selectorContext;
    Instance_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectorExpressionContext.prototype = Object.create(Instance_expressionContext.prototype);
SelectorExpressionContext.prototype.constructor = SelectorExpressionContext;

OParser.SelectorExpressionContext = SelectorExpressionContext;

SelectorExpressionContext.prototype.instance_expression = function() {
    return this.getTypedRuleContext(Instance_expressionContext,0);
};

SelectorExpressionContext.prototype.instance_selector = function() {
    return this.getTypedRuleContext(Instance_selectorContext,0);
};
SelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSelectorExpression(this);
	}
};

SelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSelectorExpression(this);
	}
};


function SelectableExpressionContext(parser, ctx) {
	Instance_expressionContext.call(this, parser);
    this.parent = null; // Selectable_expressionContext;
    Instance_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectableExpressionContext.prototype = Object.create(Instance_expressionContext.prototype);
SelectableExpressionContext.prototype.constructor = SelectableExpressionContext;

OParser.SelectableExpressionContext = SelectableExpressionContext;

SelectableExpressionContext.prototype.selectable_expression = function() {
    return this.getTypedRuleContext(Selectable_expressionContext,0);
};
SelectableExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSelectableExpression(this);
	}
};

SelectableExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSelectableExpression(this);
	}
};



OParser.prototype.instance_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Instance_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 102;
    this.enterRecursionRule(localctx, 102, OParser.RULE_instance_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new SelectableExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1227;
        localctx.parent = this.selectable_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1233;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,74,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new SelectorExpressionContext(this, new Instance_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_instance_expression);
                this.state = 1229;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1230;
                localctx.selector = this.instance_selector(); 
            }
            this.state = 1235;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,74,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Mutable_instance_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_mutable_instance_expression;
    return this;
}

Mutable_instance_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mutable_instance_expressionContext.prototype.constructor = Mutable_instance_expressionContext;


 
Mutable_instance_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function MutableSelectableExpressionContext(parser, ctx) {
	Mutable_instance_expressionContext.call(this, parser);
    this.exp = null; // IdentifierContext;
    Mutable_instance_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MutableSelectableExpressionContext.prototype = Object.create(Mutable_instance_expressionContext.prototype);
MutableSelectableExpressionContext.prototype.constructor = MutableSelectableExpressionContext;

OParser.MutableSelectableExpressionContext = MutableSelectableExpressionContext;

MutableSelectableExpressionContext.prototype.MUTABLE = function() {
    return this.getToken(OParser.MUTABLE, 0);
};

MutableSelectableExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
MutableSelectableExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMutableSelectableExpression(this);
	}
};

MutableSelectableExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMutableSelectableExpression(this);
	}
};


function MutableSelectorExpressionContext(parser, ctx) {
	Mutable_instance_expressionContext.call(this, parser);
    this.parent = null; // Mutable_instance_expressionContext;
    this.selector = null; // Instance_selectorContext;
    Mutable_instance_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MutableSelectorExpressionContext.prototype = Object.create(Mutable_instance_expressionContext.prototype);
MutableSelectorExpressionContext.prototype.constructor = MutableSelectorExpressionContext;

OParser.MutableSelectorExpressionContext = MutableSelectorExpressionContext;

MutableSelectorExpressionContext.prototype.mutable_instance_expression = function() {
    return this.getTypedRuleContext(Mutable_instance_expressionContext,0);
};

MutableSelectorExpressionContext.prototype.instance_selector = function() {
    return this.getTypedRuleContext(Instance_selectorContext,0);
};
MutableSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMutableSelectorExpression(this);
	}
};

MutableSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMutableSelectorExpression(this);
	}
};



OParser.prototype.mutable_instance_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Mutable_instance_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 104;
    this.enterRecursionRule(localctx, 104, OParser.RULE_mutable_instance_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new MutableSelectableExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1237;
        this.match(OParser.MUTABLE);
        this.state = 1238;
        localctx.exp = this.identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1244;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,75,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new MutableSelectorExpressionContext(this, new Mutable_instance_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_mutable_instance_expression);
                this.state = 1240;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1241;
                localctx.selector = this.instance_selector(); 
            }
            this.state = 1246;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,75,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_method_expression;
    return this;
}

Method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_expressionContext.prototype.constructor = Method_expressionContext;

Method_expressionContext.prototype.blob_expression = function() {
    return this.getTypedRuleContext(Blob_expressionContext,0);
};

Method_expressionContext.prototype.document_expression = function() {
    return this.getTypedRuleContext(Document_expressionContext,0);
};

Method_expressionContext.prototype.filtered_list_expression = function() {
    return this.getTypedRuleContext(Filtered_list_expressionContext,0);
};

Method_expressionContext.prototype.fetch_expression = function() {
    return this.getTypedRuleContext(Fetch_expressionContext,0);
};

Method_expressionContext.prototype.read_all_expression = function() {
    return this.getTypedRuleContext(Read_all_expressionContext,0);
};

Method_expressionContext.prototype.read_one_expression = function() {
    return this.getTypedRuleContext(Read_one_expressionContext,0);
};

Method_expressionContext.prototype.sorted_expression = function() {
    return this.getTypedRuleContext(Sorted_expressionContext,0);
};

Method_expressionContext.prototype.method_call_expression = function() {
    return this.getTypedRuleContext(Method_call_expressionContext,0);
};

Method_expressionContext.prototype.constructor_expression = function() {
    return this.getTypedRuleContext(Constructor_expressionContext,0);
};

Method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMethod_expression(this);
	}
};

Method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMethod_expression(this);
	}
};




OParser.Method_expressionContext = Method_expressionContext;

OParser.prototype.method_expression = function() {

    var localctx = new Method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, OParser.RULE_method_expression);
    try {
        this.state = 1256;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1247;
            this.blob_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1248;
            this.document_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1249;
            this.filtered_list_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1250;
            this.fetch_expression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1251;
            this.read_all_expression();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1252;
            this.read_one_expression();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1253;
            this.sorted_expression();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1254;
            this.method_call_expression();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1255;
            this.constructor_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Blob_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_blob_expression;
    return this;
}

Blob_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Blob_expressionContext.prototype.constructor = Blob_expressionContext;

Blob_expressionContext.prototype.BLOB = function() {
    return this.getToken(OParser.BLOB, 0);
};

Blob_expressionContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Blob_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Blob_expressionContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Blob_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterBlob_expression(this);
	}
};

Blob_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitBlob_expression(this);
	}
};




OParser.Blob_expressionContext = Blob_expressionContext;

OParser.prototype.blob_expression = function() {

    var localctx = new Blob_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, OParser.RULE_blob_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1258;
        this.match(OParser.BLOB);
        this.state = 1259;
        this.match(OParser.LPAR);
        this.state = 1260;
        this.expression(0);
        this.state = 1261;
        this.match(OParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Document_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_document_expression;
    return this;
}

Document_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Document_expressionContext.prototype.constructor = Document_expressionContext;

Document_expressionContext.prototype.DOCUMENT = function() {
    return this.getToken(OParser.DOCUMENT, 0);
};

Document_expressionContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Document_expressionContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Document_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Document_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDocument_expression(this);
	}
};

Document_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDocument_expression(this);
	}
};




OParser.Document_expressionContext = Document_expressionContext;

OParser.prototype.document_expression = function() {

    var localctx = new Document_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, OParser.RULE_document_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1263;
        this.match(OParser.DOCUMENT);
        this.state = 1264;
        this.match(OParser.LPAR);
        this.state = 1266;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTGT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (OParser.EXECUTE - 98)) | (1 << (OParser.FETCH - 98)) | (1 << (OParser.FILTERED - 98)) | (1 << (OParser.MUTABLE - 98)) | (1 << (OParser.NULL - 98)))) !== 0) || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (OParser.READ - 133)) | (1 << (OParser.SELF - 133)) | (1 << (OParser.SORTED - 133)) | (1 << (OParser.THIS - 133)) | (1 << (OParser.BOOLEAN_LITERAL - 133)) | (1 << (OParser.CHAR_LITERAL - 133)) | (1 << (OParser.MIN_INTEGER - 133)) | (1 << (OParser.MAX_INTEGER - 133)) | (1 << (OParser.SYMBOL_IDENTIFIER - 133)) | (1 << (OParser.TYPE_IDENTIFIER - 133)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (OParser.VARIABLE_IDENTIFIER - 165)) | (1 << (OParser.TEXT_LITERAL - 165)) | (1 << (OParser.UUID_LITERAL - 165)) | (1 << (OParser.INTEGER_LITERAL - 165)) | (1 << (OParser.HEXA_LITERAL - 165)) | (1 << (OParser.DECIMAL_LITERAL - 165)) | (1 << (OParser.DATETIME_LITERAL - 165)) | (1 << (OParser.TIME_LITERAL - 165)) | (1 << (OParser.DATE_LITERAL - 165)) | (1 << (OParser.PERIOD_LITERAL - 165)) | (1 << (OParser.VERSION_LITERAL - 165)))) !== 0)) {
            this.state = 1265;
            this.expression(0);
        }

        this.state = 1268;
        this.match(OParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Write_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_write_statement;
    this.what = null; // ExpressionContext
    this.target = null; // ExpressionContext
    return this;
}

Write_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Write_statementContext.prototype.constructor = Write_statementContext;

Write_statementContext.prototype.WRITE = function() {
    return this.getToken(OParser.WRITE, 0);
};

Write_statementContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Write_statementContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Write_statementContext.prototype.TO = function() {
    return this.getToken(OParser.TO, 0);
};

Write_statementContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

Write_statementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Write_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterWrite_statement(this);
	}
};

Write_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitWrite_statement(this);
	}
};




OParser.Write_statementContext = Write_statementContext;

OParser.prototype.write_statement = function() {

    var localctx = new Write_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, OParser.RULE_write_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1270;
        this.match(OParser.WRITE);
        this.state = 1271;
        this.match(OParser.LPAR);
        this.state = 1272;
        localctx.what = this.expression(0);
        this.state = 1273;
        this.match(OParser.RPAR);
        this.state = 1274;
        this.match(OParser.TO);
        this.state = 1275;
        localctx.target = this.expression(0);
        this.state = 1276;
        this.match(OParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Filtered_list_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_filtered_list_expression;
    this.source = null; // ExpressionContext
    this.name = null; // Variable_identifierContext
    this.predicate = null; // ExpressionContext
    return this;
}

Filtered_list_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Filtered_list_expressionContext.prototype.constructor = Filtered_list_expressionContext;

Filtered_list_expressionContext.prototype.FILTERED = function() {
    return this.getToken(OParser.FILTERED, 0);
};

Filtered_list_expressionContext.prototype.LPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.LPAR);
    } else {
        return this.getToken(OParser.LPAR, i);
    }
};


Filtered_list_expressionContext.prototype.RPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.RPAR);
    } else {
        return this.getToken(OParser.RPAR, i);
    }
};


Filtered_list_expressionContext.prototype.WHERE = function() {
    return this.getToken(OParser.WHERE, 0);
};

Filtered_list_expressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Filtered_list_expressionContext.prototype.WITH = function() {
    return this.getToken(OParser.WITH, 0);
};

Filtered_list_expressionContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Filtered_list_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterFiltered_list_expression(this);
	}
};

Filtered_list_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitFiltered_list_expression(this);
	}
};




OParser.Filtered_list_expressionContext = Filtered_list_expressionContext;

OParser.prototype.filtered_list_expression = function() {

    var localctx = new Filtered_list_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, OParser.RULE_filtered_list_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1278;
        this.match(OParser.FILTERED);
        this.state = 1279;
        this.match(OParser.LPAR);
        this.state = 1280;
        localctx.source = this.expression(0);
        this.state = 1281;
        this.match(OParser.RPAR);
        this.state = 1287;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.WITH) {
            this.state = 1282;
            this.match(OParser.WITH);
            this.state = 1283;
            this.match(OParser.LPAR);
            this.state = 1284;
            localctx.name = this.variable_identifier();
            this.state = 1285;
            this.match(OParser.RPAR);
        }

        this.state = 1289;
        this.match(OParser.WHERE);
        this.state = 1290;
        this.match(OParser.LPAR);
        this.state = 1291;
        localctx.predicate = this.expression(0);
        this.state = 1292;
        this.match(OParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fetch_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_fetch_expression;
    return this;
}

Fetch_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fetch_expressionContext.prototype.constructor = Fetch_expressionContext;


 
Fetch_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FetchOneContext(parser, ctx) {
	Fetch_expressionContext.call(this, parser);
    this.typ = null; // Mutable_category_typeContext;
    this.predicate = null; // ExpressionContext;
    Fetch_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FetchOneContext.prototype = Object.create(Fetch_expressionContext.prototype);
FetchOneContext.prototype.constructor = FetchOneContext;

OParser.FetchOneContext = FetchOneContext;

FetchOneContext.prototype.FETCH = function() {
    return this.getToken(OParser.FETCH, 0);
};

FetchOneContext.prototype.ONE = function() {
    return this.getToken(OParser.ONE, 0);
};

FetchOneContext.prototype.WHERE = function() {
    return this.getToken(OParser.WHERE, 0);
};

FetchOneContext.prototype.LPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.LPAR);
    } else {
        return this.getToken(OParser.LPAR, i);
    }
};


FetchOneContext.prototype.RPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.RPAR);
    } else {
        return this.getToken(OParser.RPAR, i);
    }
};


FetchOneContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FetchOneContext.prototype.mutable_category_type = function() {
    return this.getTypedRuleContext(Mutable_category_typeContext,0);
};
FetchOneContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterFetchOne(this);
	}
};

FetchOneContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitFetchOne(this);
	}
};


function FetchManyContext(parser, ctx) {
	Fetch_expressionContext.call(this, parser);
    this.typ = null; // Mutable_category_typeContext;
    this.xstart = null; // ExpressionContext;
    this.xstop = null; // ExpressionContext;
    this.predicate = null; // ExpressionContext;
    this.orderby = null; // Order_by_listContext;
    Fetch_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FetchManyContext.prototype = Object.create(Fetch_expressionContext.prototype);
FetchManyContext.prototype.constructor = FetchManyContext;

OParser.FetchManyContext = FetchManyContext;

FetchManyContext.prototype.FETCH = function() {
    return this.getToken(OParser.FETCH, 0);
};

FetchManyContext.prototype.WHERE = function() {
    return this.getToken(OParser.WHERE, 0);
};

FetchManyContext.prototype.LPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.LPAR);
    } else {
        return this.getToken(OParser.LPAR, i);
    }
};


FetchManyContext.prototype.RPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.RPAR);
    } else {
        return this.getToken(OParser.RPAR, i);
    }
};


FetchManyContext.prototype.ORDER = function() {
    return this.getToken(OParser.ORDER, 0);
};

FetchManyContext.prototype.BY = function() {
    return this.getToken(OParser.BY, 0);
};

FetchManyContext.prototype.ALL = function() {
    return this.getToken(OParser.ALL, 0);
};

FetchManyContext.prototype.ROWS = function() {
    return this.getToken(OParser.ROWS, 0);
};

FetchManyContext.prototype.TO = function() {
    return this.getToken(OParser.TO, 0);
};

FetchManyContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

FetchManyContext.prototype.order_by_list = function() {
    return this.getTypedRuleContext(Order_by_listContext,0);
};

FetchManyContext.prototype.mutable_category_type = function() {
    return this.getTypedRuleContext(Mutable_category_typeContext,0);
};
FetchManyContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterFetchMany(this);
	}
};

FetchManyContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitFetchMany(this);
	}
};



OParser.Fetch_expressionContext = Fetch_expressionContext;

OParser.prototype.fetch_expression = function() {

    var localctx = new Fetch_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, OParser.RULE_fetch_expression);
    var _la = 0; // Token type
    try {
        this.state = 1345;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        switch(la_) {
        case 1:
            localctx = new FetchOneContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1294;
            this.match(OParser.FETCH);
            this.state = 1295;
            this.match(OParser.ONE);
            this.state = 1300;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===OParser.LPAR) {
                this.state = 1296;
                this.match(OParser.LPAR);
                this.state = 1297;
                localctx.typ = this.mutable_category_type();
                this.state = 1298;
                this.match(OParser.RPAR);
            }

            this.state = 1302;
            this.match(OParser.WHERE);
            this.state = 1303;
            this.match(OParser.LPAR);
            this.state = 1304;
            localctx.predicate = this.expression(0);
            this.state = 1305;
            this.match(OParser.RPAR);
            break;

        case 2:
            localctx = new FetchManyContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1307;
            this.match(OParser.FETCH);
            this.state = 1328;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case OParser.ALL:
                this.state = 1308;
                this.match(OParser.ALL);
                this.state = 1313;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
                if(la_===1) {
                    this.state = 1309;
                    this.match(OParser.LPAR);
                    this.state = 1310;
                    localctx.typ = this.mutable_category_type();
                    this.state = 1311;
                    this.match(OParser.RPAR);

                }
                break;
            case OParser.LPAR:
            case OParser.ROWS:
                this.state = 1319;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===OParser.LPAR) {
                    this.state = 1315;
                    this.match(OParser.LPAR);
                    this.state = 1316;
                    localctx.typ = this.mutable_category_type();
                    this.state = 1317;
                    this.match(OParser.RPAR);
                }

                this.state = 1321;
                this.match(OParser.ROWS);
                this.state = 1322;
                this.match(OParser.LPAR);
                this.state = 1323;
                localctx.xstart = this.expression(0);
                this.state = 1324;
                this.match(OParser.TO);
                this.state = 1325;
                localctx.xstop = this.expression(0);
                this.state = 1326;
                this.match(OParser.RPAR);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1335;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
            if(la_===1) {
                this.state = 1330;
                this.match(OParser.WHERE);
                this.state = 1331;
                this.match(OParser.LPAR);
                this.state = 1332;
                localctx.predicate = this.expression(0);
                this.state = 1333;
                this.match(OParser.RPAR);

            }
            this.state = 1343;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
            if(la_===1) {
                this.state = 1337;
                this.match(OParser.ORDER);
                this.state = 1338;
                this.match(OParser.BY);
                this.state = 1339;
                this.match(OParser.LPAR);
                this.state = 1340;
                localctx.orderby = this.order_by_list();
                this.state = 1341;
                this.match(OParser.RPAR);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fetch_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_fetch_statement;
    return this;
}

Fetch_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fetch_statementContext.prototype.constructor = Fetch_statementContext;


 
Fetch_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FetchManyAsyncContext(parser, ctx) {
	Fetch_statementContext.call(this, parser);
    this.typ = null; // Mutable_category_typeContext;
    this.xstart = null; // ExpressionContext;
    this.xstop = null; // ExpressionContext;
    this.predicate = null; // ExpressionContext;
    this.orderby = null; // Order_by_listContext;
    this.name = null; // Variable_identifierContext;
    this.stmts = null; // Statement_listContext;
    Fetch_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FetchManyAsyncContext.prototype = Object.create(Fetch_statementContext.prototype);
FetchManyAsyncContext.prototype.constructor = FetchManyAsyncContext;

OParser.FetchManyAsyncContext = FetchManyAsyncContext;

FetchManyAsyncContext.prototype.FETCH = function() {
    return this.getToken(OParser.FETCH, 0);
};

FetchManyAsyncContext.prototype.THEN = function() {
    return this.getToken(OParser.THEN, 0);
};

FetchManyAsyncContext.prototype.WITH = function() {
    return this.getToken(OParser.WITH, 0);
};

FetchManyAsyncContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

FetchManyAsyncContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

FetchManyAsyncContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

FetchManyAsyncContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

FetchManyAsyncContext.prototype.WHERE = function() {
    return this.getToken(OParser.WHERE, 0);
};

FetchManyAsyncContext.prototype.LPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.LPAR);
    } else {
        return this.getToken(OParser.LPAR, i);
    }
};


FetchManyAsyncContext.prototype.RPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.RPAR);
    } else {
        return this.getToken(OParser.RPAR, i);
    }
};


FetchManyAsyncContext.prototype.ORDER = function() {
    return this.getToken(OParser.ORDER, 0);
};

FetchManyAsyncContext.prototype.BY = function() {
    return this.getToken(OParser.BY, 0);
};

FetchManyAsyncContext.prototype.ALL = function() {
    return this.getToken(OParser.ALL, 0);
};

FetchManyAsyncContext.prototype.ROWS = function() {
    return this.getToken(OParser.ROWS, 0);
};

FetchManyAsyncContext.prototype.TO = function() {
    return this.getToken(OParser.TO, 0);
};

FetchManyAsyncContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

FetchManyAsyncContext.prototype.order_by_list = function() {
    return this.getTypedRuleContext(Order_by_listContext,0);
};

FetchManyAsyncContext.prototype.mutable_category_type = function() {
    return this.getTypedRuleContext(Mutable_category_typeContext,0);
};
FetchManyAsyncContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterFetchManyAsync(this);
	}
};

FetchManyAsyncContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitFetchManyAsync(this);
	}
};


function FetchOneAsyncContext(parser, ctx) {
	Fetch_statementContext.call(this, parser);
    this.typ = null; // Mutable_category_typeContext;
    this.predicate = null; // ExpressionContext;
    this.name = null; // Variable_identifierContext;
    this.stmts = null; // Statement_listContext;
    Fetch_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FetchOneAsyncContext.prototype = Object.create(Fetch_statementContext.prototype);
FetchOneAsyncContext.prototype.constructor = FetchOneAsyncContext;

OParser.FetchOneAsyncContext = FetchOneAsyncContext;

FetchOneAsyncContext.prototype.FETCH = function() {
    return this.getToken(OParser.FETCH, 0);
};

FetchOneAsyncContext.prototype.ONE = function() {
    return this.getToken(OParser.ONE, 0);
};

FetchOneAsyncContext.prototype.WHERE = function() {
    return this.getToken(OParser.WHERE, 0);
};

FetchOneAsyncContext.prototype.LPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.LPAR);
    } else {
        return this.getToken(OParser.LPAR, i);
    }
};


FetchOneAsyncContext.prototype.RPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.RPAR);
    } else {
        return this.getToken(OParser.RPAR, i);
    }
};


FetchOneAsyncContext.prototype.THEN = function() {
    return this.getToken(OParser.THEN, 0);
};

FetchOneAsyncContext.prototype.WITH = function() {
    return this.getToken(OParser.WITH, 0);
};

FetchOneAsyncContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

FetchOneAsyncContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

FetchOneAsyncContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FetchOneAsyncContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

FetchOneAsyncContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

FetchOneAsyncContext.prototype.mutable_category_type = function() {
    return this.getTypedRuleContext(Mutable_category_typeContext,0);
};
FetchOneAsyncContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterFetchOneAsync(this);
	}
};

FetchOneAsyncContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitFetchOneAsync(this);
	}
};



OParser.Fetch_statementContext = Fetch_statementContext;

OParser.prototype.fetch_statement = function() {

    var localctx = new Fetch_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, OParser.RULE_fetch_statement);
    var _la = 0; // Token type
    try {
        this.state = 1411;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        switch(la_) {
        case 1:
            localctx = new FetchOneAsyncContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1347;
            this.match(OParser.FETCH);
            this.state = 1348;
            this.match(OParser.ONE);
            this.state = 1353;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===OParser.LPAR) {
                this.state = 1349;
                this.match(OParser.LPAR);
                this.state = 1350;
                localctx.typ = this.mutable_category_type();
                this.state = 1351;
                this.match(OParser.RPAR);
            }

            this.state = 1355;
            this.match(OParser.WHERE);
            this.state = 1356;
            this.match(OParser.LPAR);
            this.state = 1357;
            localctx.predicate = this.expression(0);
            this.state = 1358;
            this.match(OParser.RPAR);
            this.state = 1359;
            this.match(OParser.THEN);
            this.state = 1360;
            this.match(OParser.WITH);
            this.state = 1361;
            localctx.name = this.variable_identifier();
            this.state = 1362;
            this.match(OParser.LCURL);
            this.state = 1363;
            localctx.stmts = this.statement_list();
            this.state = 1364;
            this.match(OParser.RCURL);
            break;

        case 2:
            localctx = new FetchManyAsyncContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1366;
            this.match(OParser.FETCH);
            this.state = 1387;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case OParser.ALL:
                this.state = 1367;
                this.match(OParser.ALL);
                this.state = 1372;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===OParser.LPAR) {
                    this.state = 1368;
                    this.match(OParser.LPAR);
                    this.state = 1369;
                    localctx.typ = this.mutable_category_type();
                    this.state = 1370;
                    this.match(OParser.RPAR);
                }

                break;
            case OParser.LPAR:
            case OParser.ROWS:
                this.state = 1378;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===OParser.LPAR) {
                    this.state = 1374;
                    this.match(OParser.LPAR);
                    this.state = 1375;
                    localctx.typ = this.mutable_category_type();
                    this.state = 1376;
                    this.match(OParser.RPAR);
                }

                this.state = 1380;
                this.match(OParser.ROWS);
                this.state = 1381;
                this.match(OParser.LPAR);
                this.state = 1382;
                localctx.xstart = this.expression(0);
                this.state = 1383;
                this.match(OParser.TO);
                this.state = 1384;
                localctx.xstop = this.expression(0);
                this.state = 1385;
                this.match(OParser.RPAR);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1394;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===OParser.WHERE) {
                this.state = 1389;
                this.match(OParser.WHERE);
                this.state = 1390;
                this.match(OParser.LPAR);
                this.state = 1391;
                localctx.predicate = this.expression(0);
                this.state = 1392;
                this.match(OParser.RPAR);
            }

            this.state = 1402;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===OParser.ORDER) {
                this.state = 1396;
                this.match(OParser.ORDER);
                this.state = 1397;
                this.match(OParser.BY);
                this.state = 1398;
                this.match(OParser.LPAR);
                this.state = 1399;
                localctx.orderby = this.order_by_list();
                this.state = 1400;
                this.match(OParser.RPAR);
            }

            this.state = 1404;
            this.match(OParser.THEN);
            this.state = 1405;
            this.match(OParser.WITH);
            this.state = 1406;
            localctx.name = this.variable_identifier();
            this.state = 1407;
            this.match(OParser.LCURL);
            this.state = 1408;
            localctx.stmts = this.statement_list();
            this.state = 1409;
            this.match(OParser.RCURL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sorted_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_sorted_expression;
    this.source = null; // Instance_expressionContext
    this.key = null; // Sorted_keyContext
    return this;
}

Sorted_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sorted_expressionContext.prototype.constructor = Sorted_expressionContext;

Sorted_expressionContext.prototype.SORTED = function() {
    return this.getToken(OParser.SORTED, 0);
};

Sorted_expressionContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Sorted_expressionContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Sorted_expressionContext.prototype.instance_expression = function() {
    return this.getTypedRuleContext(Instance_expressionContext,0);
};

Sorted_expressionContext.prototype.DESC = function() {
    return this.getToken(OParser.DESC, 0);
};

Sorted_expressionContext.prototype.COMMA = function() {
    return this.getToken(OParser.COMMA, 0);
};

Sorted_expressionContext.prototype.key_token = function() {
    return this.getTypedRuleContext(Key_tokenContext,0);
};

Sorted_expressionContext.prototype.EQ = function() {
    return this.getToken(OParser.EQ, 0);
};

Sorted_expressionContext.prototype.sorted_key = function() {
    return this.getTypedRuleContext(Sorted_keyContext,0);
};

Sorted_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSorted_expression(this);
	}
};

Sorted_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSorted_expression(this);
	}
};




OParser.Sorted_expressionContext = Sorted_expressionContext;

OParser.prototype.sorted_expression = function() {

    var localctx = new Sorted_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, OParser.RULE_sorted_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1413;
        this.match(OParser.SORTED);
        this.state = 1415;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.DESC) {
            this.state = 1414;
            this.match(OParser.DESC);
        }

        this.state = 1417;
        this.match(OParser.LPAR);
        this.state = 1418;
        localctx.source = this.instance_expression(0);
        this.state = 1424;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.COMMA) {
            this.state = 1419;
            this.match(OParser.COMMA);
            this.state = 1420;
            this.key_token();
            this.state = 1421;
            this.match(OParser.EQ);
            this.state = 1422;
            localctx.key = this.sorted_key();
        }

        this.state = 1426;
        this.match(OParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Instance_selectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_instance_selector;
    return this;
}

Instance_selectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Instance_selectorContext.prototype.constructor = Instance_selectorContext;


 
Instance_selectorContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SliceSelectorContext(parser, ctx) {
	Instance_selectorContext.call(this, parser);
    this.xslice = null; // Slice_argumentsContext;
    Instance_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceSelectorContext.prototype = Object.create(Instance_selectorContext.prototype);
SliceSelectorContext.prototype.constructor = SliceSelectorContext;

OParser.SliceSelectorContext = SliceSelectorContext;

SliceSelectorContext.prototype.LBRAK = function() {
    return this.getToken(OParser.LBRAK, 0);
};

SliceSelectorContext.prototype.RBRAK = function() {
    return this.getToken(OParser.RBRAK, 0);
};

SliceSelectorContext.prototype.slice_arguments = function() {
    return this.getTypedRuleContext(Slice_argumentsContext,0);
};
SliceSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSliceSelector(this);
	}
};

SliceSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSliceSelector(this);
	}
};


function MethodSelectorContext(parser, ctx) {
	Instance_selectorContext.call(this, parser);
    this.method = null; // Method_call_expressionContext;
    Instance_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodSelectorContext.prototype = Object.create(Instance_selectorContext.prototype);
MethodSelectorContext.prototype.constructor = MethodSelectorContext;

OParser.MethodSelectorContext = MethodSelectorContext;

MethodSelectorContext.prototype.DOT = function() {
    return this.getToken(OParser.DOT, 0);
};

MethodSelectorContext.prototype.method_call_expression = function() {
    return this.getTypedRuleContext(Method_call_expressionContext,0);
};
MethodSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMethodSelector(this);
	}
};

MethodSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMethodSelector(this);
	}
};


function MemberSelectorContext(parser, ctx) {
	Instance_selectorContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    Instance_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberSelectorContext.prototype = Object.create(Instance_selectorContext.prototype);
MemberSelectorContext.prototype.constructor = MemberSelectorContext;

OParser.MemberSelectorContext = MemberSelectorContext;

MemberSelectorContext.prototype.DOT = function() {
    return this.getToken(OParser.DOT, 0);
};

MemberSelectorContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
MemberSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMemberSelector(this);
	}
};

MemberSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMemberSelector(this);
	}
};


function ItemSelectorContext(parser, ctx) {
	Instance_selectorContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Instance_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ItemSelectorContext.prototype = Object.create(Instance_selectorContext.prototype);
ItemSelectorContext.prototype.constructor = ItemSelectorContext;

OParser.ItemSelectorContext = ItemSelectorContext;

ItemSelectorContext.prototype.LBRAK = function() {
    return this.getToken(OParser.LBRAK, 0);
};

ItemSelectorContext.prototype.RBRAK = function() {
    return this.getToken(OParser.RBRAK, 0);
};

ItemSelectorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ItemSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterItemSelector(this);
	}
};

ItemSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitItemSelector(this);
	}
};



OParser.Instance_selectorContext = Instance_selectorContext;

OParser.prototype.instance_selector = function() {

    var localctx = new Instance_selectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, OParser.RULE_instance_selector);
    try {
        this.state = 1440;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MemberSelectorContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1428;
            this.match(OParser.DOT);
            this.state = 1429;
            localctx.name = this.variable_identifier();
            break;

        case 2:
            localctx = new MethodSelectorContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1430;
            this.match(OParser.DOT);
            this.state = 1431;
            localctx.method = this.method_call_expression();
            break;

        case 3:
            localctx = new ItemSelectorContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1432;
            this.match(OParser.LBRAK);
            this.state = 1433;
            localctx.exp = this.expression(0);
            this.state = 1434;
            this.match(OParser.RBRAK);
            break;

        case 4:
            localctx = new SliceSelectorContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1436;
            this.match(OParser.LBRAK);
            this.state = 1437;
            localctx.xslice = this.slice_arguments();
            this.state = 1438;
            this.match(OParser.RBRAK);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constructor_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_constructor_expression;
    return this;
}

Constructor_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constructor_expressionContext.prototype.constructor = Constructor_expressionContext;


 
Constructor_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ConstructorFromContext(parser, ctx) {
	Constructor_expressionContext.call(this, parser);
    this.typ = null; // Mutable_category_typeContext;
    this.copyExp = null; // Copy_fromContext;
    this.args = null; // Argument_assignment_listContext;
    Constructor_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstructorFromContext.prototype = Object.create(Constructor_expressionContext.prototype);
ConstructorFromContext.prototype.constructor = ConstructorFromContext;

OParser.ConstructorFromContext = ConstructorFromContext;

ConstructorFromContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

ConstructorFromContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

ConstructorFromContext.prototype.mutable_category_type = function() {
    return this.getTypedRuleContext(Mutable_category_typeContext,0);
};

ConstructorFromContext.prototype.copy_from = function() {
    return this.getTypedRuleContext(Copy_fromContext,0);
};

ConstructorFromContext.prototype.COMMA = function() {
    return this.getToken(OParser.COMMA, 0);
};

ConstructorFromContext.prototype.argument_assignment_list = function() {
    return this.getTypedRuleContext(Argument_assignment_listContext,0);
};
ConstructorFromContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterConstructorFrom(this);
	}
};

ConstructorFromContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitConstructorFrom(this);
	}
};


function ConstructorNoFromContext(parser, ctx) {
	Constructor_expressionContext.call(this, parser);
    this.typ = null; // Mutable_category_typeContext;
    this.args = null; // Argument_assignment_listContext;
    Constructor_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstructorNoFromContext.prototype = Object.create(Constructor_expressionContext.prototype);
ConstructorNoFromContext.prototype.constructor = ConstructorNoFromContext;

OParser.ConstructorNoFromContext = ConstructorNoFromContext;

ConstructorNoFromContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

ConstructorNoFromContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

ConstructorNoFromContext.prototype.mutable_category_type = function() {
    return this.getTypedRuleContext(Mutable_category_typeContext,0);
};

ConstructorNoFromContext.prototype.argument_assignment_list = function() {
    return this.getTypedRuleContext(Argument_assignment_listContext,0);
};
ConstructorNoFromContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterConstructorNoFrom(this);
	}
};

ConstructorNoFromContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitConstructorNoFrom(this);
	}
};



OParser.Constructor_expressionContext = Constructor_expressionContext;

OParser.prototype.constructor_expression = function() {

    var localctx = new Constructor_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, OParser.RULE_constructor_expression);
    var _la = 0; // Token type
    try {
        this.state = 1458;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ConstructorFromContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1442;
            localctx.typ = this.mutable_category_type();
            this.state = 1443;
            this.match(OParser.LPAR);
            this.state = 1444;
            localctx.copyExp = this.copy_from();
            this.state = 1447;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===OParser.COMMA) {
                this.state = 1445;
                this.match(OParser.COMMA);
                this.state = 1446;
                localctx.args = this.argument_assignment_list(0);
            }

            this.state = 1449;
            this.match(OParser.RPAR);
            break;

        case 2:
            localctx = new ConstructorNoFromContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1451;
            localctx.typ = this.mutable_category_type();
            this.state = 1452;
            this.match(OParser.LPAR);
            this.state = 1454;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTGT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (OParser.EXECUTE - 98)) | (1 << (OParser.FETCH - 98)) | (1 << (OParser.FILTERED - 98)) | (1 << (OParser.MUTABLE - 98)) | (1 << (OParser.NULL - 98)))) !== 0) || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (OParser.READ - 133)) | (1 << (OParser.SELF - 133)) | (1 << (OParser.SORTED - 133)) | (1 << (OParser.THIS - 133)) | (1 << (OParser.BOOLEAN_LITERAL - 133)) | (1 << (OParser.CHAR_LITERAL - 133)) | (1 << (OParser.MIN_INTEGER - 133)) | (1 << (OParser.MAX_INTEGER - 133)) | (1 << (OParser.SYMBOL_IDENTIFIER - 133)) | (1 << (OParser.TYPE_IDENTIFIER - 133)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (OParser.VARIABLE_IDENTIFIER - 165)) | (1 << (OParser.TEXT_LITERAL - 165)) | (1 << (OParser.UUID_LITERAL - 165)) | (1 << (OParser.INTEGER_LITERAL - 165)) | (1 << (OParser.HEXA_LITERAL - 165)) | (1 << (OParser.DECIMAL_LITERAL - 165)) | (1 << (OParser.DATETIME_LITERAL - 165)) | (1 << (OParser.TIME_LITERAL - 165)) | (1 << (OParser.DATE_LITERAL - 165)) | (1 << (OParser.PERIOD_LITERAL - 165)) | (1 << (OParser.VERSION_LITERAL - 165)))) !== 0)) {
                this.state = 1453;
                localctx.args = this.argument_assignment_list(0);
            }

            this.state = 1456;
            this.match(OParser.RPAR);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Copy_fromContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_copy_from;
    this.exp = null; // ExpressionContext
    return this;
}

Copy_fromContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Copy_fromContext.prototype.constructor = Copy_fromContext;

Copy_fromContext.prototype.FROM = function() {
    return this.getToken(OParser.FROM, 0);
};

Copy_fromContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Copy_fromContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Copy_fromContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCopy_from(this);
	}
};

Copy_fromContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCopy_from(this);
	}
};




OParser.Copy_fromContext = Copy_fromContext;

OParser.prototype.copy_from = function() {

    var localctx = new Copy_fromContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, OParser.RULE_copy_from);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1460;
        this.match(OParser.FROM);
        this.state = 1461;
        this.assign();
        this.state = 1462;
        localctx.exp = this.expression(0);
        this.state = 1463;
        if (!( this.willNotBe(this.equalToken()))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.willNotBe($parser.equalToken())");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Argument_assignment_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_argument_assignment_list;
    return this;
}

Argument_assignment_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_assignment_listContext.prototype.constructor = Argument_assignment_listContext;


 
Argument_assignment_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ExpressionAssignmentListContext(parser, ctx) {
	Argument_assignment_listContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Argument_assignment_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExpressionAssignmentListContext.prototype = Object.create(Argument_assignment_listContext.prototype);
ExpressionAssignmentListContext.prototype.constructor = ExpressionAssignmentListContext;

OParser.ExpressionAssignmentListContext = ExpressionAssignmentListContext;

ExpressionAssignmentListContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ExpressionAssignmentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterExpressionAssignmentList(this);
	}
};

ExpressionAssignmentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitExpressionAssignmentList(this);
	}
};


function ArgumentAssignmentListContext(parser, ctx) {
	Argument_assignment_listContext.call(this, parser);
    this.item = null; // Argument_assignmentContext;
    Argument_assignment_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentAssignmentListContext.prototype = Object.create(Argument_assignment_listContext.prototype);
ArgumentAssignmentListContext.prototype.constructor = ArgumentAssignmentListContext;

OParser.ArgumentAssignmentListContext = ArgumentAssignmentListContext;

ArgumentAssignmentListContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};
ArgumentAssignmentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterArgumentAssignmentList(this);
	}
};

ArgumentAssignmentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitArgumentAssignmentList(this);
	}
};


function ArgumentAssignmentListItemContext(parser, ctx) {
	Argument_assignment_listContext.call(this, parser);
    this.items = null; // Argument_assignment_listContext;
    this.item = null; // Argument_assignmentContext;
    Argument_assignment_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentAssignmentListItemContext.prototype = Object.create(Argument_assignment_listContext.prototype);
ArgumentAssignmentListItemContext.prototype.constructor = ArgumentAssignmentListItemContext;

OParser.ArgumentAssignmentListItemContext = ArgumentAssignmentListItemContext;

ArgumentAssignmentListItemContext.prototype.COMMA = function() {
    return this.getToken(OParser.COMMA, 0);
};

ArgumentAssignmentListItemContext.prototype.argument_assignment_list = function() {
    return this.getTypedRuleContext(Argument_assignment_listContext,0);
};

ArgumentAssignmentListItemContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};
ArgumentAssignmentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterArgumentAssignmentListItem(this);
	}
};

ArgumentAssignmentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitArgumentAssignmentListItem(this);
	}
};



OParser.prototype.argument_assignment_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Argument_assignment_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 128;
    this.enterRecursionRule(localctx, 128, OParser.RULE_argument_assignment_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1470;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ExpressionAssignmentListContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1466;
            localctx.exp = this.expression(0);
            this.state = 1467;
            if (!( this.willNotBe(this.equalToken()))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.willNotBe($parser.equalToken())");
            }
            break;

        case 2:
            localctx = new ArgumentAssignmentListContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1469;
            localctx.item = this.argument_assignment();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1477;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,100,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ArgumentAssignmentListItemContext(this, new Argument_assignment_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_argument_assignment_list);
                this.state = 1472;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1473;
                this.match(OParser.COMMA);
                this.state = 1474;
                localctx.item = this.argument_assignment(); 
            }
            this.state = 1479;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,100,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Argument_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_argument_assignment;
    this.name = null; // Variable_identifierContext
    this.exp = null; // ExpressionContext
    return this;
}

Argument_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_assignmentContext.prototype.constructor = Argument_assignmentContext;

Argument_assignmentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Argument_assignmentContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Argument_assignmentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Argument_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterArgument_assignment(this);
	}
};

Argument_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitArgument_assignment(this);
	}
};




OParser.Argument_assignmentContext = Argument_assignmentContext;

OParser.prototype.argument_assignment = function() {

    var localctx = new Argument_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, OParser.RULE_argument_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1480;
        localctx.name = this.variable_identifier();
        this.state = 1484;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
        if(la_===1) {
            this.state = 1481;
            this.assign();
            this.state = 1482;
            localctx.exp = this.expression(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assign_instance_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_assign_instance_statement;
    this.inst = null; // Assignable_instanceContext
    this.exp = null; // ExpressionContext
    return this;
}

Assign_instance_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assign_instance_statementContext.prototype.constructor = Assign_instance_statementContext;

Assign_instance_statementContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Assign_instance_statementContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

Assign_instance_statementContext.prototype.assignable_instance = function() {
    return this.getTypedRuleContext(Assignable_instanceContext,0);
};

Assign_instance_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Assign_instance_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAssign_instance_statement(this);
	}
};

Assign_instance_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAssign_instance_statement(this);
	}
};




OParser.Assign_instance_statementContext = Assign_instance_statementContext;

OParser.prototype.assign_instance_statement = function() {

    var localctx = new Assign_instance_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, OParser.RULE_assign_instance_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1486;
        localctx.inst = this.assignable_instance(0);
        this.state = 1487;
        this.assign();
        this.state = 1488;
        localctx.exp = this.expression(0);
        this.state = 1489;
        this.match(OParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Child_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_child_instance;
    return this;
}

Child_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Child_instanceContext.prototype.constructor = Child_instanceContext;


 
Child_instanceContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MemberInstanceContext(parser, ctx) {
	Child_instanceContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    Child_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberInstanceContext.prototype = Object.create(Child_instanceContext.prototype);
MemberInstanceContext.prototype.constructor = MemberInstanceContext;

OParser.MemberInstanceContext = MemberInstanceContext;

MemberInstanceContext.prototype.DOT = function() {
    return this.getToken(OParser.DOT, 0);
};

MemberInstanceContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
MemberInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMemberInstance(this);
	}
};

MemberInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMemberInstance(this);
	}
};


function ItemInstanceContext(parser, ctx) {
	Child_instanceContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Child_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ItemInstanceContext.prototype = Object.create(Child_instanceContext.prototype);
ItemInstanceContext.prototype.constructor = ItemInstanceContext;

OParser.ItemInstanceContext = ItemInstanceContext;

ItemInstanceContext.prototype.LBRAK = function() {
    return this.getToken(OParser.LBRAK, 0);
};

ItemInstanceContext.prototype.RBRAK = function() {
    return this.getToken(OParser.RBRAK, 0);
};

ItemInstanceContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ItemInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterItemInstance(this);
	}
};

ItemInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitItemInstance(this);
	}
};



OParser.Child_instanceContext = Child_instanceContext;

OParser.prototype.child_instance = function() {

    var localctx = new Child_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, OParser.RULE_child_instance);
    try {
        this.state = 1497;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.DOT:
            localctx = new MemberInstanceContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1491;
            this.match(OParser.DOT);
            this.state = 1492;
            localctx.name = this.variable_identifier();
            break;
        case OParser.LBRAK:
            localctx = new ItemInstanceContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1493;
            this.match(OParser.LBRAK);
            this.state = 1494;
            localctx.exp = this.expression(0);
            this.state = 1495;
            this.match(OParser.RBRAK);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assign_tuple_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_assign_tuple_statement;
    this.items = null; // Variable_identifier_listContext
    this.exp = null; // ExpressionContext
    return this;
}

Assign_tuple_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assign_tuple_statementContext.prototype.constructor = Assign_tuple_statementContext;

Assign_tuple_statementContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Assign_tuple_statementContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

Assign_tuple_statementContext.prototype.variable_identifier_list = function() {
    return this.getTypedRuleContext(Variable_identifier_listContext,0);
};

Assign_tuple_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Assign_tuple_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAssign_tuple_statement(this);
	}
};

Assign_tuple_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAssign_tuple_statement(this);
	}
};




OParser.Assign_tuple_statementContext = Assign_tuple_statementContext;

OParser.prototype.assign_tuple_statement = function() {

    var localctx = new Assign_tuple_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, OParser.RULE_assign_tuple_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1499;
        localctx.items = this.variable_identifier_list();
        this.state = 1500;
        this.assign();
        this.state = 1501;
        localctx.exp = this.expression(0);
        this.state = 1502;
        this.match(OParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Null_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_null_literal;
    return this;
}

Null_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Null_literalContext.prototype.constructor = Null_literalContext;

Null_literalContext.prototype.NULL = function() {
    return this.getToken(OParser.NULL, 0);
};

Null_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNull_literal(this);
	}
};

Null_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNull_literal(this);
	}
};




OParser.Null_literalContext = Null_literalContext;

OParser.prototype.null_literal = function() {

    var localctx = new Null_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, OParser.RULE_null_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1504;
        this.match(OParser.NULL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ws_plusContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_ws_plus;
    return this;
}

Ws_plusContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ws_plusContext.prototype.constructor = Ws_plusContext;

Ws_plusContext.prototype.LF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.LF);
    } else {
        return this.getToken(OParser.LF, i);
    }
};


Ws_plusContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.WS);
    } else {
        return this.getToken(OParser.WS, i);
    }
};


Ws_plusContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterWs_plus(this);
	}
};

Ws_plusContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitWs_plus(this);
	}
};




OParser.Ws_plusContext = Ws_plusContext;

OParser.prototype.ws_plus = function() {

    var localctx = new Ws_plusContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, OParser.RULE_ws_plus);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1509;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.WS || _la===OParser.LF) {
            this.state = 1506;
            _la = this._input.LA(1);
            if(!(_la===OParser.WS || _la===OParser.LF)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1511;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReplContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_repl;
    return this;
}

ReplContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplContext.prototype.constructor = ReplContext;

ReplContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

ReplContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ReplContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReplContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterRepl(this);
	}
};

ReplContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitRepl(this);
	}
};




OParser.ReplContext = ReplContext;

OParser.prototype.repl = function() {

    var localctx = new ReplContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, OParser.RULE_repl);
    try {
        this.state = 1515;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1512;
            this.declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1513;
            this.statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1514;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declaration_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_declaration_list;
    return this;
}

Declaration_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declaration_listContext.prototype.constructor = Declaration_listContext;


 
Declaration_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FullDeclarationListContext(parser, ctx) {
	Declaration_listContext.call(this, parser);
    Declaration_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FullDeclarationListContext.prototype = Object.create(Declaration_listContext.prototype);
FullDeclarationListContext.prototype.constructor = FullDeclarationListContext;

OParser.FullDeclarationListContext = FullDeclarationListContext;

FullDeclarationListContext.prototype.lfs = function() {
    return this.getTypedRuleContext(LfsContext,0);
};

FullDeclarationListContext.prototype.EOF = function() {
    return this.getToken(OParser.EOF, 0);
};

FullDeclarationListContext.prototype.declarations = function() {
    return this.getTypedRuleContext(DeclarationsContext,0);
};
FullDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterFullDeclarationList(this);
	}
};

FullDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitFullDeclarationList(this);
	}
};



OParser.Declaration_listContext = Declaration_listContext;

OParser.prototype.declaration_list = function() {

    var localctx = new Declaration_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, OParser.RULE_declaration_list);
    var _la = 0; // Token type
    try {
        localctx = new FullDeclarationListContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1518;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.COMMENT || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ABSTRACT - 48)) | (1 << (OParser.ANY - 48)) | (1 << (OParser.ATTRIBUTE - 48)))) !== 0) || _la===OParser.CATEGORY || _la===OParser.ENUMERATED || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (OParser.METHOD - 115)) | (1 << (OParser.NATIVE - 115)) | (1 << (OParser.SINGLETON - 115)) | (1 << (OParser.STORABLE - 115)) | (1 << (OParser.TEST - 115)))) !== 0) || ((((_la - 153)) & ~0x1f) == 0 && ((1 << (_la - 153)) & ((1 << (OParser.WIDGET - 153)) | (1 << (OParser.TYPE_IDENTIFIER - 153)) | (1 << (OParser.ARONDBASE_IDENTIFIER - 153)))) !== 0)) {
            this.state = 1517;
            this.declarations();
        }

        this.state = 1520;
        this.lfs();
        this.state = 1521;
        this.match(OParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_declarations;
    return this;
}

DeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationsContext.prototype.constructor = DeclarationsContext;

DeclarationsContext.prototype.declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationContext);
    } else {
        return this.getTypedRuleContext(DeclarationContext,i);
    }
};

DeclarationsContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

DeclarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDeclarations(this);
	}
};

DeclarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDeclarations(this);
	}
};




OParser.DeclarationsContext = DeclarationsContext;

OParser.prototype.declarations = function() {

    var localctx = new DeclarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, OParser.RULE_declarations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1523;
        this.declaration();
        this.state = 1529;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.COMMENT || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ABSTRACT - 48)) | (1 << (OParser.ANY - 48)) | (1 << (OParser.ATTRIBUTE - 48)))) !== 0) || _la===OParser.CATEGORY || _la===OParser.ENUMERATED || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (OParser.METHOD - 115)) | (1 << (OParser.NATIVE - 115)) | (1 << (OParser.SINGLETON - 115)) | (1 << (OParser.STORABLE - 115)) | (1 << (OParser.TEST - 115)))) !== 0) || ((((_la - 153)) & ~0x1f) == 0 && ((1 << (_la - 153)) & ((1 << (OParser.WIDGET - 153)) | (1 << (OParser.TYPE_IDENTIFIER - 153)) | (1 << (OParser.ARONDBASE_IDENTIFIER - 153)))) !== 0)) {
            this.state = 1524;
            this.lfp();
            this.state = 1525;
            this.declaration();
            this.state = 1531;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.attribute_declaration = function() {
    return this.getTypedRuleContext(Attribute_declarationContext,0);
};

DeclarationContext.prototype.category_declaration = function() {
    return this.getTypedRuleContext(Category_declarationContext,0);
};

DeclarationContext.prototype.resource_declaration = function() {
    return this.getTypedRuleContext(Resource_declarationContext,0);
};

DeclarationContext.prototype.enum_declaration = function() {
    return this.getTypedRuleContext(Enum_declarationContext,0);
};

DeclarationContext.prototype.widget_declaration = function() {
    return this.getTypedRuleContext(Widget_declarationContext,0);
};

DeclarationContext.prototype.method_declaration = function() {
    return this.getTypedRuleContext(Method_declarationContext,0);
};

DeclarationContext.prototype.comment_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Comment_statementContext);
    } else {
        return this.getTypedRuleContext(Comment_statementContext,i);
    }
};

DeclarationContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

DeclarationContext.prototype.annotation_constructor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Annotation_constructorContext);
    } else {
        return this.getTypedRuleContext(Annotation_constructorContext,i);
    }
};

DeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDeclaration(this);
	}
};

DeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDeclaration(this);
	}
};




OParser.DeclarationContext = DeclarationContext;

OParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, OParser.RULE_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1537;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.COMMENT) {
            this.state = 1532;
            this.comment_statement();
            this.state = 1533;
            this.lfp();
            this.state = 1539;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1545;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.ARONDBASE_IDENTIFIER) {
            this.state = 1540;
            this.annotation_constructor();
            this.state = 1541;
            this.lfp();
            this.state = 1547;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1554;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1548;
            this.attribute_declaration();
            break;

        case 2:
            this.state = 1549;
            this.category_declaration();
            break;

        case 3:
            this.state = 1550;
            this.resource_declaration();
            break;

        case 4:
            this.state = 1551;
            this.enum_declaration();
            break;

        case 5:
            this.state = 1552;
            this.widget_declaration();
            break;

        case 6:
            this.state = 1553;
            this.method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Annotation_constructorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_annotation_constructor;
    this.name = null; // Annotation_identifierContext
    this.exp = null; // Literal_expressionContext
    return this;
}

Annotation_constructorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Annotation_constructorContext.prototype.constructor = Annotation_constructorContext;

Annotation_constructorContext.prototype.annotation_identifier = function() {
    return this.getTypedRuleContext(Annotation_identifierContext,0);
};

Annotation_constructorContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Annotation_constructorContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Annotation_constructorContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};

Annotation_constructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAnnotation_constructor(this);
	}
};

Annotation_constructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAnnotation_constructor(this);
	}
};




OParser.Annotation_constructorContext = Annotation_constructorContext;

OParser.prototype.annotation_constructor = function() {

    var localctx = new Annotation_constructorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, OParser.RULE_annotation_constructor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1556;
        localctx.name = this.annotation_identifier();
        this.state = 1561;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.LPAR) {
            this.state = 1557;
            this.match(OParser.LPAR);
            this.state = 1558;
            localctx.exp = this.literal_expression();
            this.state = 1559;
            this.match(OParser.RPAR);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Annotation_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_annotation_identifier;
    return this;
}

Annotation_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Annotation_identifierContext.prototype.constructor = Annotation_identifierContext;

Annotation_identifierContext.prototype.ARONDBASE_IDENTIFIER = function() {
    return this.getToken(OParser.ARONDBASE_IDENTIFIER, 0);
};

Annotation_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAnnotation_identifier(this);
	}
};

Annotation_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAnnotation_identifier(this);
	}
};




OParser.Annotation_identifierContext = Annotation_identifierContext;

OParser.prototype.annotation_identifier = function() {

    var localctx = new Annotation_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, OParser.RULE_annotation_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1563;
        this.match(OParser.ARONDBASE_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Resource_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_resource_declaration;
    return this;
}

Resource_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Resource_declarationContext.prototype.constructor = Resource_declarationContext;

Resource_declarationContext.prototype.native_resource_declaration = function() {
    return this.getTypedRuleContext(Native_resource_declarationContext,0);
};

Resource_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterResource_declaration(this);
	}
};

Resource_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitResource_declaration(this);
	}
};




OParser.Resource_declarationContext = Resource_declarationContext;

OParser.prototype.resource_declaration = function() {

    var localctx = new Resource_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, OParser.RULE_resource_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1565;
        this.native_resource_declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enum_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_enum_declaration;
    return this;
}

Enum_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_declarationContext.prototype.constructor = Enum_declarationContext;

Enum_declarationContext.prototype.enum_category_declaration = function() {
    return this.getTypedRuleContext(Enum_category_declarationContext,0);
};

Enum_declarationContext.prototype.enum_native_declaration = function() {
    return this.getTypedRuleContext(Enum_native_declarationContext,0);
};

Enum_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterEnum_declaration(this);
	}
};

Enum_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitEnum_declaration(this);
	}
};




OParser.Enum_declarationContext = Enum_declarationContext;

OParser.prototype.enum_declaration = function() {

    var localctx = new Enum_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, OParser.RULE_enum_declaration);
    try {
        this.state = 1569;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1567;
            this.enum_category_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1568;
            this.enum_native_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_symbol_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_native_symbol_list;
    return this;
}

Native_symbol_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_symbol_listContext.prototype.constructor = Native_symbol_listContext;

Native_symbol_listContext.prototype.native_symbol = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Native_symbolContext);
    } else {
        return this.getTypedRuleContext(Native_symbolContext,i);
    }
};

Native_symbol_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Native_symbol_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNative_symbol_list(this);
	}
};

Native_symbol_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNative_symbol_list(this);
	}
};




OParser.Native_symbol_listContext = Native_symbol_listContext;

OParser.prototype.native_symbol_list = function() {

    var localctx = new Native_symbol_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, OParser.RULE_native_symbol_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1571;
        this.native_symbol();
        this.state = 1577;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.SYMBOL_IDENTIFIER) {
            this.state = 1572;
            this.lfp();
            this.state = 1573;
            this.native_symbol();
            this.state = 1579;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_symbol_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_category_symbol_list;
    return this;
}

Category_symbol_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_symbol_listContext.prototype.constructor = Category_symbol_listContext;

Category_symbol_listContext.prototype.category_symbol = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Category_symbolContext);
    } else {
        return this.getTypedRuleContext(Category_symbolContext,i);
    }
};

Category_symbol_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Category_symbol_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCategory_symbol_list(this);
	}
};

Category_symbol_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCategory_symbol_list(this);
	}
};




OParser.Category_symbol_listContext = Category_symbol_listContext;

OParser.prototype.category_symbol_list = function() {

    var localctx = new Category_symbol_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, OParser.RULE_category_symbol_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1580;
        this.category_symbol();
        this.state = 1586;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.SYMBOL_IDENTIFIER) {
            this.state = 1581;
            this.lfp();
            this.state = 1582;
            this.category_symbol();
            this.state = 1588;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Symbol_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_symbol_list;
    return this;
}

Symbol_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Symbol_listContext.prototype.constructor = Symbol_listContext;

Symbol_listContext.prototype.symbol_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Symbol_identifierContext);
    } else {
        return this.getTypedRuleContext(Symbol_identifierContext,i);
    }
};

Symbol_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.COMMA);
    } else {
        return this.getToken(OParser.COMMA, i);
    }
};


Symbol_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSymbol_list(this);
	}
};

Symbol_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSymbol_list(this);
	}
};




OParser.Symbol_listContext = Symbol_listContext;

OParser.prototype.symbol_list = function() {

    var localctx = new Symbol_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, OParser.RULE_symbol_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1589;
        this.symbol_identifier();
        this.state = 1594;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.COMMA) {
            this.state = 1590;
            this.match(OParser.COMMA);
            this.state = 1591;
            this.symbol_identifier();
            this.state = 1596;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_attribute_constraint;
    return this;
}

Attribute_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_constraintContext.prototype.constructor = Attribute_constraintContext;


 
Attribute_constraintContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MatchingSetContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.source = null; // Set_literalContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingSetContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingSetContext.prototype.constructor = MatchingSetContext;

OParser.MatchingSetContext = MatchingSetContext;

MatchingSetContext.prototype.IN = function() {
    return this.getToken(OParser.IN, 0);
};

MatchingSetContext.prototype.set_literal = function() {
    return this.getTypedRuleContext(Set_literalContext,0);
};
MatchingSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMatchingSet(this);
	}
};

MatchingSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMatchingSet(this);
	}
};


function MatchingPatternContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.text = null; // Token;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingPatternContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingPatternContext.prototype.constructor = MatchingPatternContext;

OParser.MatchingPatternContext = MatchingPatternContext;

MatchingPatternContext.prototype.MATCHING = function() {
    return this.getToken(OParser.MATCHING, 0);
};

MatchingPatternContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(OParser.TEXT_LITERAL, 0);
};
MatchingPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMatchingPattern(this);
	}
};

MatchingPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMatchingPattern(this);
	}
};


function MatchingListContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.source = null; // List_literalContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingListContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingListContext.prototype.constructor = MatchingListContext;

OParser.MatchingListContext = MatchingListContext;

MatchingListContext.prototype.IN = function() {
    return this.getToken(OParser.IN, 0);
};

MatchingListContext.prototype.list_literal = function() {
    return this.getTypedRuleContext(List_literalContext,0);
};
MatchingListContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMatchingList(this);
	}
};

MatchingListContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMatchingList(this);
	}
};


function MatchingRangeContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.source = null; // Range_literalContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingRangeContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingRangeContext.prototype.constructor = MatchingRangeContext;

OParser.MatchingRangeContext = MatchingRangeContext;

MatchingRangeContext.prototype.IN = function() {
    return this.getToken(OParser.IN, 0);
};

MatchingRangeContext.prototype.range_literal = function() {
    return this.getTypedRuleContext(Range_literalContext,0);
};
MatchingRangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMatchingRange(this);
	}
};

MatchingRangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMatchingRange(this);
	}
};


function MatchingExpressionContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingExpressionContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingExpressionContext.prototype.constructor = MatchingExpressionContext;

OParser.MatchingExpressionContext = MatchingExpressionContext;

MatchingExpressionContext.prototype.MATCHING = function() {
    return this.getToken(OParser.MATCHING, 0);
};

MatchingExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
MatchingExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMatchingExpression(this);
	}
};

MatchingExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMatchingExpression(this);
	}
};



OParser.Attribute_constraintContext = Attribute_constraintContext;

OParser.prototype.attribute_constraint = function() {

    var localctx = new Attribute_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, OParser.RULE_attribute_constraint);
    try {
        this.state = 1607;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MatchingListContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1597;
            this.match(OParser.IN);
            this.state = 1598;
            localctx.source = this.list_literal();
            break;

        case 2:
            localctx = new MatchingSetContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1599;
            this.match(OParser.IN);
            this.state = 1600;
            localctx.source = this.set_literal();
            break;

        case 3:
            localctx = new MatchingRangeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1601;
            this.match(OParser.IN);
            this.state = 1602;
            localctx.source = this.range_literal();
            break;

        case 4:
            localctx = new MatchingPatternContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1603;
            this.match(OParser.MATCHING);
            this.state = 1604;
            localctx.text = this.match(OParser.TEXT_LITERAL);
            break;

        case 5:
            localctx = new MatchingExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1605;
            this.match(OParser.MATCHING);
            this.state = 1606;
            localctx.exp = this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function List_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_list_literal;
    return this;
}

List_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_literalContext.prototype.constructor = List_literalContext;

List_literalContext.prototype.LBRAK = function() {
    return this.getToken(OParser.LBRAK, 0);
};

List_literalContext.prototype.RBRAK = function() {
    return this.getToken(OParser.RBRAK, 0);
};

List_literalContext.prototype.MUTABLE = function() {
    return this.getToken(OParser.MUTABLE, 0);
};

List_literalContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

List_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterList_literal(this);
	}
};

List_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitList_literal(this);
	}
};




OParser.List_literalContext = List_literalContext;

OParser.prototype.list_literal = function() {

    var localctx = new List_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, OParser.RULE_list_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1610;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.MUTABLE) {
            this.state = 1609;
            this.match(OParser.MUTABLE);
        }

        this.state = 1612;
        this.match(OParser.LBRAK);
        this.state = 1614;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTGT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (OParser.EXECUTE - 98)) | (1 << (OParser.FETCH - 98)) | (1 << (OParser.FILTERED - 98)) | (1 << (OParser.MUTABLE - 98)) | (1 << (OParser.NULL - 98)))) !== 0) || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (OParser.READ - 133)) | (1 << (OParser.SELF - 133)) | (1 << (OParser.SORTED - 133)) | (1 << (OParser.THIS - 133)) | (1 << (OParser.BOOLEAN_LITERAL - 133)) | (1 << (OParser.CHAR_LITERAL - 133)) | (1 << (OParser.MIN_INTEGER - 133)) | (1 << (OParser.MAX_INTEGER - 133)) | (1 << (OParser.SYMBOL_IDENTIFIER - 133)) | (1 << (OParser.TYPE_IDENTIFIER - 133)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (OParser.VARIABLE_IDENTIFIER - 165)) | (1 << (OParser.TEXT_LITERAL - 165)) | (1 << (OParser.UUID_LITERAL - 165)) | (1 << (OParser.INTEGER_LITERAL - 165)) | (1 << (OParser.HEXA_LITERAL - 165)) | (1 << (OParser.DECIMAL_LITERAL - 165)) | (1 << (OParser.DATETIME_LITERAL - 165)) | (1 << (OParser.TIME_LITERAL - 165)) | (1 << (OParser.DATE_LITERAL - 165)) | (1 << (OParser.PERIOD_LITERAL - 165)) | (1 << (OParser.VERSION_LITERAL - 165)))) !== 0)) {
            this.state = 1613;
            this.expression_list();
        }

        this.state = 1616;
        this.match(OParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_set_literal;
    return this;
}

Set_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_literalContext.prototype.constructor = Set_literalContext;

Set_literalContext.prototype.LT = function() {
    return this.getToken(OParser.LT, 0);
};

Set_literalContext.prototype.GT = function() {
    return this.getToken(OParser.GT, 0);
};

Set_literalContext.prototype.MUTABLE = function() {
    return this.getToken(OParser.MUTABLE, 0);
};

Set_literalContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Set_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSet_literal(this);
	}
};

Set_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSet_literal(this);
	}
};




OParser.Set_literalContext = Set_literalContext;

OParser.prototype.set_literal = function() {

    var localctx = new Set_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, OParser.RULE_set_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1619;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.MUTABLE) {
            this.state = 1618;
            this.match(OParser.MUTABLE);
        }

        this.state = 1621;
        this.match(OParser.LT);
        this.state = 1623;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTGT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (OParser.EXECUTE - 98)) | (1 << (OParser.FETCH - 98)) | (1 << (OParser.FILTERED - 98)) | (1 << (OParser.MUTABLE - 98)) | (1 << (OParser.NULL - 98)))) !== 0) || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (OParser.READ - 133)) | (1 << (OParser.SELF - 133)) | (1 << (OParser.SORTED - 133)) | (1 << (OParser.THIS - 133)) | (1 << (OParser.BOOLEAN_LITERAL - 133)) | (1 << (OParser.CHAR_LITERAL - 133)) | (1 << (OParser.MIN_INTEGER - 133)) | (1 << (OParser.MAX_INTEGER - 133)) | (1 << (OParser.SYMBOL_IDENTIFIER - 133)) | (1 << (OParser.TYPE_IDENTIFIER - 133)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (OParser.VARIABLE_IDENTIFIER - 165)) | (1 << (OParser.TEXT_LITERAL - 165)) | (1 << (OParser.UUID_LITERAL - 165)) | (1 << (OParser.INTEGER_LITERAL - 165)) | (1 << (OParser.HEXA_LITERAL - 165)) | (1 << (OParser.DECIMAL_LITERAL - 165)) | (1 << (OParser.DATETIME_LITERAL - 165)) | (1 << (OParser.TIME_LITERAL - 165)) | (1 << (OParser.DATE_LITERAL - 165)) | (1 << (OParser.PERIOD_LITERAL - 165)) | (1 << (OParser.VERSION_LITERAL - 165)))) !== 0)) {
            this.state = 1622;
            this.expression_list();
        }

        this.state = 1625;
        this.match(OParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_expression_list;
    return this;
}

Expression_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_listContext.prototype.constructor = Expression_listContext;

Expression_listContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Expression_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.COMMA);
    } else {
        return this.getToken(OParser.COMMA, i);
    }
};


Expression_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterExpression_list(this);
	}
};

Expression_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitExpression_list(this);
	}
};




OParser.Expression_listContext = Expression_listContext;

OParser.prototype.expression_list = function() {

    var localctx = new Expression_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, OParser.RULE_expression_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1627;
        this.expression(0);
        this.state = 1632;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.COMMA) {
            this.state = 1628;
            this.match(OParser.COMMA);
            this.state = 1629;
            this.expression(0);
            this.state = 1634;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Range_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_range_literal;
    this.low = null; // ExpressionContext
    this.high = null; // ExpressionContext
    return this;
}

Range_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Range_literalContext.prototype.constructor = Range_literalContext;

Range_literalContext.prototype.LBRAK = function() {
    return this.getToken(OParser.LBRAK, 0);
};

Range_literalContext.prototype.RANGE = function() {
    return this.getToken(OParser.RANGE, 0);
};

Range_literalContext.prototype.RBRAK = function() {
    return this.getToken(OParser.RBRAK, 0);
};

Range_literalContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Range_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterRange_literal(this);
	}
};

Range_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitRange_literal(this);
	}
};




OParser.Range_literalContext = Range_literalContext;

OParser.prototype.range_literal = function() {

    var localctx = new Range_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, OParser.RULE_range_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1635;
        this.match(OParser.LBRAK);
        this.state = 1636;
        localctx.low = this.expression(0);
        this.state = 1637;
        this.match(OParser.RANGE);
        this.state = 1638;
        localctx.high = this.expression(0);
        this.state = 1639;
        this.match(OParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypedefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_typedef;
    return this;
}

TypedefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedefContext.prototype.constructor = TypedefContext;


 
TypedefContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function IteratorTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.i = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IteratorTypeContext.prototype = Object.create(TypedefContext.prototype);
IteratorTypeContext.prototype.constructor = IteratorTypeContext;

OParser.IteratorTypeContext = IteratorTypeContext;

IteratorTypeContext.prototype.ITERATOR = function() {
    return this.getToken(OParser.ITERATOR, 0);
};

IteratorTypeContext.prototype.LT = function() {
    return this.getToken(OParser.LT, 0);
};

IteratorTypeContext.prototype.GT = function() {
    return this.getToken(OParser.GT, 0);
};

IteratorTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
IteratorTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterIteratorType(this);
	}
};

IteratorTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitIteratorType(this);
	}
};


function SetTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.s = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetTypeContext.prototype = Object.create(TypedefContext.prototype);
SetTypeContext.prototype.constructor = SetTypeContext;

OParser.SetTypeContext = SetTypeContext;

SetTypeContext.prototype.LTGT = function() {
    return this.getToken(OParser.LTGT, 0);
};

SetTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
SetTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSetType(this);
	}
};

SetTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSetType(this);
	}
};


function ListTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.l = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListTypeContext.prototype = Object.create(TypedefContext.prototype);
ListTypeContext.prototype.constructor = ListTypeContext;

OParser.ListTypeContext = ListTypeContext;

ListTypeContext.prototype.LBRAK = function() {
    return this.getToken(OParser.LBRAK, 0);
};

ListTypeContext.prototype.RBRAK = function() {
    return this.getToken(OParser.RBRAK, 0);
};

ListTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
ListTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterListType(this);
	}
};

ListTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitListType(this);
	}
};


function DictTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.d = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DictTypeContext.prototype = Object.create(TypedefContext.prototype);
DictTypeContext.prototype.constructor = DictTypeContext;

OParser.DictTypeContext = DictTypeContext;

DictTypeContext.prototype.LTCOLONGT = function() {
    return this.getToken(OParser.LTCOLONGT, 0);
};

DictTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
DictTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDictType(this);
	}
};

DictTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDictType(this);
	}
};


function CursorTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.c = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CursorTypeContext.prototype = Object.create(TypedefContext.prototype);
CursorTypeContext.prototype.constructor = CursorTypeContext;

OParser.CursorTypeContext = CursorTypeContext;

CursorTypeContext.prototype.CURSOR = function() {
    return this.getToken(OParser.CURSOR, 0);
};

CursorTypeContext.prototype.LT = function() {
    return this.getToken(OParser.LT, 0);
};

CursorTypeContext.prototype.GT = function() {
    return this.getToken(OParser.GT, 0);
};

CursorTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
CursorTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCursorType(this);
	}
};

CursorTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCursorType(this);
	}
};


function PrimaryTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.p = null; // Primary_typeContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrimaryTypeContext.prototype = Object.create(TypedefContext.prototype);
PrimaryTypeContext.prototype.constructor = PrimaryTypeContext;

OParser.PrimaryTypeContext = PrimaryTypeContext;

PrimaryTypeContext.prototype.primary_type = function() {
    return this.getTypedRuleContext(Primary_typeContext,0);
};
PrimaryTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPrimaryType(this);
	}
};

PrimaryTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPrimaryType(this);
	}
};



OParser.prototype.typedef = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypedefContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 174;
    this.enterRecursionRule(localctx, 174, OParser.RULE_typedef, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1653;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.BOOLEAN:
        case OParser.CHARACTER:
        case OParser.TEXT:
        case OParser.INTEGER:
        case OParser.DECIMAL:
        case OParser.DATE:
        case OParser.TIME:
        case OParser.DATETIME:
        case OParser.PERIOD:
        case OParser.VERSION:
        case OParser.CODE:
        case OParser.DOCUMENT:
        case OParser.BLOB:
        case OParser.IMAGE:
        case OParser.UUID:
        case OParser.HTML:
        case OParser.TYPE_IDENTIFIER:
            localctx = new PrimaryTypeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1642;
            localctx.p = this.primary_type();
            break;
        case OParser.CURSOR:
            localctx = new CursorTypeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1643;
            this.match(OParser.CURSOR);
            this.state = 1644;
            this.match(OParser.LT);
            this.state = 1645;
            localctx.c = this.typedef(0);
            this.state = 1646;
            this.match(OParser.GT);
            break;
        case OParser.ITERATOR:
            localctx = new IteratorTypeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1648;
            this.match(OParser.ITERATOR);
            this.state = 1649;
            this.match(OParser.LT);
            this.state = 1650;
            localctx.i = this.typedef(0);
            this.state = 1651;
            this.match(OParser.GT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1664;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,123,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1662;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new SetTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
                    localctx.s = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_typedef);
                    this.state = 1655;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1656;
                    this.match(OParser.LTGT);
                    break;

                case 2:
                    localctx = new ListTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
                    localctx.l = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_typedef);
                    this.state = 1657;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 1658;
                    this.match(OParser.LBRAK);
                    this.state = 1659;
                    this.match(OParser.RBRAK);
                    break;

                case 3:
                    localctx = new DictTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
                    localctx.d = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_typedef);
                    this.state = 1660;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1661;
                    this.match(OParser.LTCOLONGT);
                    break;

                } 
            }
            this.state = 1666;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,123,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Primary_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_primary_type;
    return this;
}

Primary_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Primary_typeContext.prototype.constructor = Primary_typeContext;


 
Primary_typeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function NativeTypeContext(parser, ctx) {
	Primary_typeContext.call(this, parser);
    this.n = null; // Native_typeContext;
    Primary_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeTypeContext.prototype = Object.create(Primary_typeContext.prototype);
NativeTypeContext.prototype.constructor = NativeTypeContext;

OParser.NativeTypeContext = NativeTypeContext;

NativeTypeContext.prototype.native_type = function() {
    return this.getTypedRuleContext(Native_typeContext,0);
};
NativeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNativeType(this);
	}
};

NativeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNativeType(this);
	}
};


function CategoryTypeContext(parser, ctx) {
	Primary_typeContext.call(this, parser);
    this.c = null; // Category_typeContext;
    Primary_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CategoryTypeContext.prototype = Object.create(Primary_typeContext.prototype);
CategoryTypeContext.prototype.constructor = CategoryTypeContext;

OParser.CategoryTypeContext = CategoryTypeContext;

CategoryTypeContext.prototype.category_type = function() {
    return this.getTypedRuleContext(Category_typeContext,0);
};
CategoryTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCategoryType(this);
	}
};

CategoryTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCategoryType(this);
	}
};



OParser.Primary_typeContext = Primary_typeContext;

OParser.prototype.primary_type = function() {

    var localctx = new Primary_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, OParser.RULE_primary_type);
    try {
        this.state = 1669;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.BOOLEAN:
        case OParser.CHARACTER:
        case OParser.TEXT:
        case OParser.INTEGER:
        case OParser.DECIMAL:
        case OParser.DATE:
        case OParser.TIME:
        case OParser.DATETIME:
        case OParser.PERIOD:
        case OParser.VERSION:
        case OParser.CODE:
        case OParser.DOCUMENT:
        case OParser.BLOB:
        case OParser.IMAGE:
        case OParser.UUID:
        case OParser.HTML:
            localctx = new NativeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1667;
            localctx.n = this.native_type();
            break;
        case OParser.TYPE_IDENTIFIER:
            localctx = new CategoryTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1668;
            localctx.c = this.category_type();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_native_type;
    return this;
}

Native_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_typeContext.prototype.constructor = Native_typeContext;


 
Native_typeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PeriodTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PeriodTypeContext.prototype = Object.create(Native_typeContext.prototype);
PeriodTypeContext.prototype.constructor = PeriodTypeContext;

OParser.PeriodTypeContext = PeriodTypeContext;

PeriodTypeContext.prototype.PERIOD = function() {
    return this.getToken(OParser.PERIOD, 0);
};
PeriodTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPeriodType(this);
	}
};

PeriodTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPeriodType(this);
	}
};


function HtmlTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HtmlTypeContext.prototype = Object.create(Native_typeContext.prototype);
HtmlTypeContext.prototype.constructor = HtmlTypeContext;

OParser.HtmlTypeContext = HtmlTypeContext;

HtmlTypeContext.prototype.HTML = function() {
    return this.getToken(OParser.HTML, 0);
};
HtmlTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterHtmlType(this);
	}
};

HtmlTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitHtmlType(this);
	}
};


function BooleanTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanTypeContext.prototype = Object.create(Native_typeContext.prototype);
BooleanTypeContext.prototype.constructor = BooleanTypeContext;

OParser.BooleanTypeContext = BooleanTypeContext;

BooleanTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(OParser.BOOLEAN, 0);
};
BooleanTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterBooleanType(this);
	}
};

BooleanTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitBooleanType(this);
	}
};


function DocumentTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocumentTypeContext.prototype = Object.create(Native_typeContext.prototype);
DocumentTypeContext.prototype.constructor = DocumentTypeContext;

OParser.DocumentTypeContext = DocumentTypeContext;

DocumentTypeContext.prototype.DOCUMENT = function() {
    return this.getToken(OParser.DOCUMENT, 0);
};
DocumentTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDocumentType(this);
	}
};

DocumentTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDocumentType(this);
	}
};


function CharacterTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CharacterTypeContext.prototype = Object.create(Native_typeContext.prototype);
CharacterTypeContext.prototype.constructor = CharacterTypeContext;

OParser.CharacterTypeContext = CharacterTypeContext;

CharacterTypeContext.prototype.CHARACTER = function() {
    return this.getToken(OParser.CHARACTER, 0);
};
CharacterTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCharacterType(this);
	}
};

CharacterTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCharacterType(this);
	}
};


function VersionTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VersionTypeContext.prototype = Object.create(Native_typeContext.prototype);
VersionTypeContext.prototype.constructor = VersionTypeContext;

OParser.VersionTypeContext = VersionTypeContext;

VersionTypeContext.prototype.VERSION = function() {
    return this.getToken(OParser.VERSION, 0);
};
VersionTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterVersionType(this);
	}
};

VersionTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitVersionType(this);
	}
};


function TextTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TextTypeContext.prototype = Object.create(Native_typeContext.prototype);
TextTypeContext.prototype.constructor = TextTypeContext;

OParser.TextTypeContext = TextTypeContext;

TextTypeContext.prototype.TEXT = function() {
    return this.getToken(OParser.TEXT, 0);
};
TextTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterTextType(this);
	}
};

TextTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitTextType(this);
	}
};


function ImageTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ImageTypeContext.prototype = Object.create(Native_typeContext.prototype);
ImageTypeContext.prototype.constructor = ImageTypeContext;

OParser.ImageTypeContext = ImageTypeContext;

ImageTypeContext.prototype.IMAGE = function() {
    return this.getToken(OParser.IMAGE, 0);
};
ImageTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterImageType(this);
	}
};

ImageTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitImageType(this);
	}
};


function TimeTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeTypeContext.prototype = Object.create(Native_typeContext.prototype);
TimeTypeContext.prototype.constructor = TimeTypeContext;

OParser.TimeTypeContext = TimeTypeContext;

TimeTypeContext.prototype.TIME = function() {
    return this.getToken(OParser.TIME, 0);
};
TimeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterTimeType(this);
	}
};

TimeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitTimeType(this);
	}
};


function IntegerTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntegerTypeContext.prototype = Object.create(Native_typeContext.prototype);
IntegerTypeContext.prototype.constructor = IntegerTypeContext;

OParser.IntegerTypeContext = IntegerTypeContext;

IntegerTypeContext.prototype.INTEGER = function() {
    return this.getToken(OParser.INTEGER, 0);
};
IntegerTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterIntegerType(this);
	}
};

IntegerTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitIntegerType(this);
	}
};


function DateTimeTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateTimeTypeContext.prototype = Object.create(Native_typeContext.prototype);
DateTimeTypeContext.prototype.constructor = DateTimeTypeContext;

OParser.DateTimeTypeContext = DateTimeTypeContext;

DateTimeTypeContext.prototype.DATETIME = function() {
    return this.getToken(OParser.DATETIME, 0);
};
DateTimeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDateTimeType(this);
	}
};

DateTimeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDateTimeType(this);
	}
};


function BlobTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BlobTypeContext.prototype = Object.create(Native_typeContext.prototype);
BlobTypeContext.prototype.constructor = BlobTypeContext;

OParser.BlobTypeContext = BlobTypeContext;

BlobTypeContext.prototype.BLOB = function() {
    return this.getToken(OParser.BLOB, 0);
};
BlobTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterBlobType(this);
	}
};

BlobTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitBlobType(this);
	}
};


function UUIDTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UUIDTypeContext.prototype = Object.create(Native_typeContext.prototype);
UUIDTypeContext.prototype.constructor = UUIDTypeContext;

OParser.UUIDTypeContext = UUIDTypeContext;

UUIDTypeContext.prototype.UUID = function() {
    return this.getToken(OParser.UUID, 0);
};
UUIDTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterUUIDType(this);
	}
};

UUIDTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitUUIDType(this);
	}
};


function DecimalTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DecimalTypeContext.prototype = Object.create(Native_typeContext.prototype);
DecimalTypeContext.prototype.constructor = DecimalTypeContext;

OParser.DecimalTypeContext = DecimalTypeContext;

DecimalTypeContext.prototype.DECIMAL = function() {
    return this.getToken(OParser.DECIMAL, 0);
};
DecimalTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDecimalType(this);
	}
};

DecimalTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDecimalType(this);
	}
};


function CodeTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CodeTypeContext.prototype = Object.create(Native_typeContext.prototype);
CodeTypeContext.prototype.constructor = CodeTypeContext;

OParser.CodeTypeContext = CodeTypeContext;

CodeTypeContext.prototype.CODE = function() {
    return this.getToken(OParser.CODE, 0);
};
CodeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCodeType(this);
	}
};

CodeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCodeType(this);
	}
};


function DateTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateTypeContext.prototype = Object.create(Native_typeContext.prototype);
DateTypeContext.prototype.constructor = DateTypeContext;

OParser.DateTypeContext = DateTypeContext;

DateTypeContext.prototype.DATE = function() {
    return this.getToken(OParser.DATE, 0);
};
DateTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDateType(this);
	}
};

DateTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDateType(this);
	}
};



OParser.Native_typeContext = Native_typeContext;

OParser.prototype.native_type = function() {

    var localctx = new Native_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, OParser.RULE_native_type);
    try {
        this.state = 1687;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.BOOLEAN:
            localctx = new BooleanTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1671;
            this.match(OParser.BOOLEAN);
            break;
        case OParser.CHARACTER:
            localctx = new CharacterTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1672;
            this.match(OParser.CHARACTER);
            break;
        case OParser.TEXT:
            localctx = new TextTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1673;
            this.match(OParser.TEXT);
            break;
        case OParser.IMAGE:
            localctx = new ImageTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1674;
            this.match(OParser.IMAGE);
            break;
        case OParser.INTEGER:
            localctx = new IntegerTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1675;
            this.match(OParser.INTEGER);
            break;
        case OParser.DECIMAL:
            localctx = new DecimalTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1676;
            this.match(OParser.DECIMAL);
            break;
        case OParser.DOCUMENT:
            localctx = new DocumentTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1677;
            this.match(OParser.DOCUMENT);
            break;
        case OParser.DATE:
            localctx = new DateTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 1678;
            this.match(OParser.DATE);
            break;
        case OParser.DATETIME:
            localctx = new DateTimeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 1679;
            this.match(OParser.DATETIME);
            break;
        case OParser.TIME:
            localctx = new TimeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 1680;
            this.match(OParser.TIME);
            break;
        case OParser.PERIOD:
            localctx = new PeriodTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 1681;
            this.match(OParser.PERIOD);
            break;
        case OParser.VERSION:
            localctx = new VersionTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 1682;
            this.match(OParser.VERSION);
            break;
        case OParser.CODE:
            localctx = new CodeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 1683;
            this.match(OParser.CODE);
            break;
        case OParser.BLOB:
            localctx = new BlobTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 1684;
            this.match(OParser.BLOB);
            break;
        case OParser.UUID:
            localctx = new UUIDTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 1685;
            this.match(OParser.UUID);
            break;
        case OParser.HTML:
            localctx = new HtmlTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 1686;
            this.match(OParser.HTML);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_category_type;
    this.t1 = null; // Token
    return this;
}

Category_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_typeContext.prototype.constructor = Category_typeContext;

Category_typeContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(OParser.TYPE_IDENTIFIER, 0);
};

Category_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCategory_type(this);
	}
};

Category_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCategory_type(this);
	}
};




OParser.Category_typeContext = Category_typeContext;

OParser.prototype.category_type = function() {

    var localctx = new Category_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, OParser.RULE_category_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1689;
        localctx.t1 = this.match(OParser.TYPE_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mutable_category_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_mutable_category_type;
    return this;
}

Mutable_category_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mutable_category_typeContext.prototype.constructor = Mutable_category_typeContext;

Mutable_category_typeContext.prototype.category_type = function() {
    return this.getTypedRuleContext(Category_typeContext,0);
};

Mutable_category_typeContext.prototype.MUTABLE = function() {
    return this.getToken(OParser.MUTABLE, 0);
};

Mutable_category_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMutable_category_type(this);
	}
};

Mutable_category_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMutable_category_type(this);
	}
};




OParser.Mutable_category_typeContext = Mutable_category_typeContext;

OParser.prototype.mutable_category_type = function() {

    var localctx = new Mutable_category_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, OParser.RULE_mutable_category_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1692;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.MUTABLE) {
            this.state = 1691;
            this.match(OParser.MUTABLE);
        }

        this.state = 1694;
        this.category_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Code_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_code_type;
    this.t1 = null; // Token
    return this;
}

Code_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Code_typeContext.prototype.constructor = Code_typeContext;

Code_typeContext.prototype.CODE = function() {
    return this.getToken(OParser.CODE, 0);
};

Code_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCode_type(this);
	}
};

Code_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCode_type(this);
	}
};




OParser.Code_typeContext = Code_typeContext;

OParser.prototype.code_type = function() {

    var localctx = new Code_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, OParser.RULE_code_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1696;
        localctx.t1 = this.match(OParser.CODE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_category_declaration;
    return this;
}

Category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_declarationContext.prototype.constructor = Category_declarationContext;


 
Category_declarationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ConcreteCategoryDeclarationContext(parser, ctx) {
	Category_declarationContext.call(this, parser);
    this.decl = null; // Concrete_category_declarationContext;
    Category_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConcreteCategoryDeclarationContext.prototype = Object.create(Category_declarationContext.prototype);
ConcreteCategoryDeclarationContext.prototype.constructor = ConcreteCategoryDeclarationContext;

OParser.ConcreteCategoryDeclarationContext = ConcreteCategoryDeclarationContext;

ConcreteCategoryDeclarationContext.prototype.concrete_category_declaration = function() {
    return this.getTypedRuleContext(Concrete_category_declarationContext,0);
};
ConcreteCategoryDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterConcreteCategoryDeclaration(this);
	}
};

ConcreteCategoryDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitConcreteCategoryDeclaration(this);
	}
};


function NativeCategoryDeclarationContext(parser, ctx) {
	Category_declarationContext.call(this, parser);
    this.decl = null; // Native_category_declarationContext;
    Category_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeCategoryDeclarationContext.prototype = Object.create(Category_declarationContext.prototype);
NativeCategoryDeclarationContext.prototype.constructor = NativeCategoryDeclarationContext;

OParser.NativeCategoryDeclarationContext = NativeCategoryDeclarationContext;

NativeCategoryDeclarationContext.prototype.native_category_declaration = function() {
    return this.getTypedRuleContext(Native_category_declarationContext,0);
};
NativeCategoryDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNativeCategoryDeclaration(this);
	}
};

NativeCategoryDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNativeCategoryDeclaration(this);
	}
};


function SingletonCategoryDeclarationContext(parser, ctx) {
	Category_declarationContext.call(this, parser);
    this.decl = null; // Singleton_category_declarationContext;
    Category_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SingletonCategoryDeclarationContext.prototype = Object.create(Category_declarationContext.prototype);
SingletonCategoryDeclarationContext.prototype.constructor = SingletonCategoryDeclarationContext;

OParser.SingletonCategoryDeclarationContext = SingletonCategoryDeclarationContext;

SingletonCategoryDeclarationContext.prototype.singleton_category_declaration = function() {
    return this.getTypedRuleContext(Singleton_category_declarationContext,0);
};
SingletonCategoryDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSingletonCategoryDeclaration(this);
	}
};

SingletonCategoryDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSingletonCategoryDeclaration(this);
	}
};



OParser.Category_declarationContext = Category_declarationContext;

OParser.prototype.category_declaration = function() {

    var localctx = new Category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, OParser.RULE_category_declaration);
    try {
        this.state = 1701;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ConcreteCategoryDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1698;
            localctx.decl = this.concrete_category_declaration();
            break;

        case 2:
            localctx = new NativeCategoryDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1699;
            localctx.decl = this.native_category_declaration();
            break;

        case 3:
            localctx = new SingletonCategoryDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1700;
            localctx.decl = this.singleton_category_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Widget_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_widget_declaration;
    return this;
}

Widget_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Widget_declarationContext.prototype.constructor = Widget_declarationContext;


 
Widget_declarationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ConcreteWidgetDeclarationContext(parser, ctx) {
	Widget_declarationContext.call(this, parser);
    this.decl = null; // Concrete_widget_declarationContext;
    Widget_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConcreteWidgetDeclarationContext.prototype = Object.create(Widget_declarationContext.prototype);
ConcreteWidgetDeclarationContext.prototype.constructor = ConcreteWidgetDeclarationContext;

OParser.ConcreteWidgetDeclarationContext = ConcreteWidgetDeclarationContext;

ConcreteWidgetDeclarationContext.prototype.concrete_widget_declaration = function() {
    return this.getTypedRuleContext(Concrete_widget_declarationContext,0);
};
ConcreteWidgetDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterConcreteWidgetDeclaration(this);
	}
};

ConcreteWidgetDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitConcreteWidgetDeclaration(this);
	}
};


function NativeWidgetDeclarationContext(parser, ctx) {
	Widget_declarationContext.call(this, parser);
    this.decl = null; // Native_widget_declarationContext;
    Widget_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeWidgetDeclarationContext.prototype = Object.create(Widget_declarationContext.prototype);
NativeWidgetDeclarationContext.prototype.constructor = NativeWidgetDeclarationContext;

OParser.NativeWidgetDeclarationContext = NativeWidgetDeclarationContext;

NativeWidgetDeclarationContext.prototype.native_widget_declaration = function() {
    return this.getTypedRuleContext(Native_widget_declarationContext,0);
};
NativeWidgetDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNativeWidgetDeclaration(this);
	}
};

NativeWidgetDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNativeWidgetDeclaration(this);
	}
};



OParser.Widget_declarationContext = Widget_declarationContext;

OParser.prototype.widget_declaration = function() {

    var localctx = new Widget_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, OParser.RULE_widget_declaration);
    try {
        this.state = 1705;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.WIDGET:
            localctx = new ConcreteWidgetDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1703;
            localctx.decl = this.concrete_widget_declaration();
            break;
        case OParser.NATIVE:
            localctx = new NativeWidgetDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1704;
            localctx.decl = this.native_widget_declaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_identifier_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_type_identifier_list;
    return this;
}

Type_identifier_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_identifier_listContext.prototype.constructor = Type_identifier_listContext;

Type_identifier_listContext.prototype.type_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_identifierContext);
    } else {
        return this.getTypedRuleContext(Type_identifierContext,i);
    }
};

Type_identifier_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.COMMA);
    } else {
        return this.getToken(OParser.COMMA, i);
    }
};


Type_identifier_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterType_identifier_list(this);
	}
};

Type_identifier_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitType_identifier_list(this);
	}
};




OParser.Type_identifier_listContext = Type_identifier_listContext;

OParser.prototype.type_identifier_list = function() {

    var localctx = new Type_identifier_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, OParser.RULE_type_identifier_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1707;
        this.type_identifier();
        this.state = 1712;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.COMMA) {
            this.state = 1708;
            this.match(OParser.COMMA);
            this.state = 1709;
            this.type_identifier();
            this.state = 1714;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_method_identifier;
    return this;
}

Method_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_identifierContext.prototype.constructor = Method_identifierContext;

Method_identifierContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Method_identifierContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Method_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMethod_identifier(this);
	}
};

Method_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMethod_identifier(this);
	}
};




OParser.Method_identifierContext = Method_identifierContext;

OParser.prototype.method_identifier = function() {

    var localctx = new Method_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, OParser.RULE_method_identifier);
    try {
        this.state = 1717;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.VARIABLE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1715;
            this.variable_identifier();
            break;
        case OParser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 1716;
            this.type_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Identifier_or_keywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_identifier_or_keyword;
    return this;
}

Identifier_or_keywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Identifier_or_keywordContext.prototype.constructor = Identifier_or_keywordContext;

Identifier_or_keywordContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Identifier_or_keywordContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

Identifier_or_keywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterIdentifier_or_keyword(this);
	}
};

Identifier_or_keywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitIdentifier_or_keyword(this);
	}
};




OParser.Identifier_or_keywordContext = Identifier_or_keywordContext;

OParser.prototype.identifier_or_keyword = function() {

    var localctx = new Identifier_or_keywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, OParser.RULE_identifier_or_keyword);
    try {
        this.state = 1721;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.SYMBOL_IDENTIFIER:
        case OParser.TYPE_IDENTIFIER:
        case OParser.VARIABLE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1719;
            this.identifier();
            break;
        case OParser.JAVA:
        case OParser.CSHARP:
        case OParser.PYTHON2:
        case OParser.PYTHON3:
        case OParser.JAVASCRIPT:
        case OParser.SWIFT:
        case OParser.BOOLEAN:
        case OParser.CHARACTER:
        case OParser.TEXT:
        case OParser.INTEGER:
        case OParser.DECIMAL:
        case OParser.DATE:
        case OParser.TIME:
        case OParser.DATETIME:
        case OParser.PERIOD:
        case OParser.VERSION:
        case OParser.METHOD_T:
        case OParser.CODE:
        case OParser.DOCUMENT:
        case OParser.BLOB:
        case OParser.IMAGE:
        case OParser.UUID:
        case OParser.ITERATOR:
        case OParser.CURSOR:
        case OParser.HTML:
        case OParser.ABSTRACT:
        case OParser.ALL:
        case OParser.ALWAYS:
        case OParser.AND:
        case OParser.ANY:
        case OParser.AS:
        case OParser.ASC:
        case OParser.ATTR:
        case OParser.ATTRIBUTE:
        case OParser.ATTRIBUTES:
        case OParser.BINDINGS:
        case OParser.BREAK:
        case OParser.BY:
        case OParser.CASE:
        case OParser.CATCH:
        case OParser.CATEGORY:
        case OParser.CLASS:
        case OParser.CLOSE:
        case OParser.CONTAINS:
        case OParser.DEF:
        case OParser.DEFAULT:
        case OParser.DEFINE:
        case OParser.DELETE:
        case OParser.DESC:
        case OParser.DO:
        case OParser.DOING:
        case OParser.EACH:
        case OParser.ELSE:
        case OParser.ENUM:
        case OParser.ENUMERATED:
        case OParser.EXCEPT:
        case OParser.EXECUTE:
        case OParser.EXPECTING:
        case OParser.EXTENDS:
        case OParser.FETCH:
        case OParser.FILTERED:
        case OParser.FINALLY:
        case OParser.FLUSH:
        case OParser.FOR:
        case OParser.FROM:
        case OParser.GETTER:
        case OParser.HAS:
        case OParser.IF:
        case OParser.IN:
        case OParser.INDEX:
        case OParser.INVOKE:
        case OParser.IS:
        case OParser.MATCHING:
        case OParser.METHOD:
        case OParser.METHODS:
        case OParser.MODULO:
        case OParser.MUTABLE:
        case OParser.NATIVE:
        case OParser.NONE:
        case OParser.NOT:
        case OParser.NOTHING:
        case OParser.NULL:
        case OParser.ON:
        case OParser.ONE:
        case OParser.OPEN:
        case OParser.OPERATOR:
        case OParser.OR:
        case OParser.ORDER:
        case OParser.OTHERWISE:
        case OParser.PASS:
        case OParser.RAISE:
        case OParser.READ:
        case OParser.RECEIVING:
        case OParser.RESOURCE:
        case OParser.RETURN:
        case OParser.RETURNING:
        case OParser.ROWS:
        case OParser.SELF:
        case OParser.SETTER:
        case OParser.SINGLETON:
        case OParser.SORTED:
        case OParser.STORABLE:
        case OParser.STORE:
        case OParser.SWITCH:
        case OParser.TEST:
        case OParser.THIS:
        case OParser.THROW:
        case OParser.TO:
        case OParser.TRY:
        case OParser.VERIFYING:
        case OParser.WIDGET:
        case OParser.WITH:
        case OParser.WHEN:
        case OParser.WHERE:
        case OParser.WHILE:
        case OParser.WRITE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1720;
            this.keyword();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Nospace_hyphen_identifier_or_keywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_nospace_hyphen_identifier_or_keyword;
    return this;
}

Nospace_hyphen_identifier_or_keywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nospace_hyphen_identifier_or_keywordContext.prototype.constructor = Nospace_hyphen_identifier_or_keywordContext;

Nospace_hyphen_identifier_or_keywordContext.prototype.MINUS = function() {
    return this.getToken(OParser.MINUS, 0);
};

Nospace_hyphen_identifier_or_keywordContext.prototype.nospace_identifier_or_keyword = function() {
    return this.getTypedRuleContext(Nospace_identifier_or_keywordContext,0);
};

Nospace_hyphen_identifier_or_keywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNospace_hyphen_identifier_or_keyword(this);
	}
};

Nospace_hyphen_identifier_or_keywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNospace_hyphen_identifier_or_keyword(this);
	}
};




OParser.Nospace_hyphen_identifier_or_keywordContext = Nospace_hyphen_identifier_or_keywordContext;

OParser.prototype.nospace_hyphen_identifier_or_keyword = function() {

    var localctx = new Nospace_hyphen_identifier_or_keywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, OParser.RULE_nospace_hyphen_identifier_or_keyword);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1723;
        if (!( this.wasNotWhiteSpace())) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.wasNotWhiteSpace()");
        }
        this.state = 1724;
        this.match(OParser.MINUS);
        this.state = 1725;
        this.nospace_identifier_or_keyword();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Nospace_identifier_or_keywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_nospace_identifier_or_keyword;
    return this;
}

Nospace_identifier_or_keywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nospace_identifier_or_keywordContext.prototype.constructor = Nospace_identifier_or_keywordContext;

Nospace_identifier_or_keywordContext.prototype.identifier_or_keyword = function() {
    return this.getTypedRuleContext(Identifier_or_keywordContext,0);
};

Nospace_identifier_or_keywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNospace_identifier_or_keyword(this);
	}
};

Nospace_identifier_or_keywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNospace_identifier_or_keyword(this);
	}
};




OParser.Nospace_identifier_or_keywordContext = Nospace_identifier_or_keywordContext;

OParser.prototype.nospace_identifier_or_keyword = function() {

    var localctx = new Nospace_identifier_or_keywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, OParser.RULE_nospace_identifier_or_keyword);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1727;
        if (!( this.wasNotWhiteSpace())) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.wasNotWhiteSpace()");
        }
        this.state = 1728;
        this.identifier_or_keyword();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;


 
IdentifierContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TypeIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
TypeIdentifierContext.prototype.constructor = TypeIdentifierContext;

OParser.TypeIdentifierContext = TypeIdentifierContext;

TypeIdentifierContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};
TypeIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterTypeIdentifier(this);
	}
};

TypeIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitTypeIdentifier(this);
	}
};


function SymbolIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SymbolIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
SymbolIdentifierContext.prototype.constructor = SymbolIdentifierContext;

OParser.SymbolIdentifierContext = SymbolIdentifierContext;

SymbolIdentifierContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};
SymbolIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSymbolIdentifier(this);
	}
};

SymbolIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSymbolIdentifier(this);
	}
};


function VariableIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VariableIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
VariableIdentifierContext.prototype.constructor = VariableIdentifierContext;

OParser.VariableIdentifierContext = VariableIdentifierContext;

VariableIdentifierContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
VariableIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterVariableIdentifier(this);
	}
};

VariableIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitVariableIdentifier(this);
	}
};



OParser.IdentifierContext = IdentifierContext;

OParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, OParser.RULE_identifier);
    try {
        this.state = 1733;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.VARIABLE_IDENTIFIER:
            localctx = new VariableIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1730;
            this.variable_identifier();
            break;
        case OParser.TYPE_IDENTIFIER:
            localctx = new TypeIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1731;
            this.type_identifier();
            break;
        case OParser.SYMBOL_IDENTIFIER:
            localctx = new SymbolIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1732;
            this.symbol_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_variable_identifier;
    return this;
}

Variable_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_identifierContext.prototype.constructor = Variable_identifierContext;

Variable_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(OParser.VARIABLE_IDENTIFIER, 0);
};

Variable_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterVariable_identifier(this);
	}
};

Variable_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitVariable_identifier(this);
	}
};




OParser.Variable_identifierContext = Variable_identifierContext;

OParser.prototype.variable_identifier = function() {

    var localctx = new Variable_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, OParser.RULE_variable_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1735;
        this.match(OParser.VARIABLE_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_attribute_identifier;
    return this;
}

Attribute_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_identifierContext.prototype.constructor = Attribute_identifierContext;

Attribute_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(OParser.VARIABLE_IDENTIFIER, 0);
};

Attribute_identifierContext.prototype.STORABLE = function() {
    return this.getToken(OParser.STORABLE, 0);
};

Attribute_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAttribute_identifier(this);
	}
};

Attribute_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAttribute_identifier(this);
	}
};




OParser.Attribute_identifierContext = Attribute_identifierContext;

OParser.prototype.attribute_identifier = function() {

    var localctx = new Attribute_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, OParser.RULE_attribute_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1737;
        _la = this._input.LA(1);
        if(!(_la===OParser.STORABLE || _la===OParser.VARIABLE_IDENTIFIER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_type_identifier;
    return this;
}

Type_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_identifierContext.prototype.constructor = Type_identifierContext;

Type_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(OParser.TYPE_IDENTIFIER, 0);
};

Type_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterType_identifier(this);
	}
};

Type_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitType_identifier(this);
	}
};




OParser.Type_identifierContext = Type_identifierContext;

OParser.prototype.type_identifier = function() {

    var localctx = new Type_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, OParser.RULE_type_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1739;
        this.match(OParser.TYPE_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Symbol_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_symbol_identifier;
    return this;
}

Symbol_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Symbol_identifierContext.prototype.constructor = Symbol_identifierContext;

Symbol_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(OParser.SYMBOL_IDENTIFIER, 0);
};

Symbol_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSymbol_identifier(this);
	}
};

Symbol_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSymbol_identifier(this);
	}
};




OParser.Symbol_identifierContext = Symbol_identifierContext;

OParser.prototype.symbol_identifier = function() {

    var localctx = new Symbol_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, OParser.RULE_symbol_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1741;
        this.match(OParser.SYMBOL_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Any_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_any_identifier;
    return this;
}

Any_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Any_identifierContext.prototype.constructor = Any_identifierContext;

Any_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(OParser.VARIABLE_IDENTIFIER, 0);
};

Any_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(OParser.TYPE_IDENTIFIER, 0);
};

Any_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(OParser.SYMBOL_IDENTIFIER, 0);
};

Any_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAny_identifier(this);
	}
};

Any_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAny_identifier(this);
	}
};




OParser.Any_identifierContext = Any_identifierContext;

OParser.prototype.any_identifier = function() {

    var localctx = new Any_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, OParser.RULE_any_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1743;
        _la = this._input.LA(1);
        if(!(((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (OParser.SYMBOL_IDENTIFIER - 163)) | (1 << (OParser.TYPE_IDENTIFIER - 163)) | (1 << (OParser.VARIABLE_IDENTIFIER - 163)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_argument_list;
    return this;
}

Argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_listContext.prototype.constructor = Argument_listContext;

Argument_listContext.prototype.argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentContext);
    } else {
        return this.getTypedRuleContext(ArgumentContext,i);
    }
};

Argument_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.COMMA);
    } else {
        return this.getToken(OParser.COMMA, i);
    }
};


Argument_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterArgument_list(this);
	}
};

Argument_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitArgument_list(this);
	}
};




OParser.Argument_listContext = Argument_listContext;

OParser.prototype.argument_list = function() {

    var localctx = new Argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, OParser.RULE_argument_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1745;
        this.argument();
        this.state = 1750;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.COMMA) {
            this.state = 1746;
            this.match(OParser.COMMA);
            this.state = 1747;
            this.argument();
            this.state = 1752;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_argument;
    return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;


 
ArgumentContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function OperatorArgumentContext(parser, ctx) {
	ArgumentContext.call(this, parser);
    this.arg = null; // Operator_argumentContext;
    ArgumentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorArgumentContext.prototype = Object.create(ArgumentContext.prototype);
OperatorArgumentContext.prototype.constructor = OperatorArgumentContext;

OParser.OperatorArgumentContext = OperatorArgumentContext;

OperatorArgumentContext.prototype.operator_argument = function() {
    return this.getTypedRuleContext(Operator_argumentContext,0);
};

OperatorArgumentContext.prototype.MUTABLE = function() {
    return this.getToken(OParser.MUTABLE, 0);
};
OperatorArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterOperatorArgument(this);
	}
};

OperatorArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitOperatorArgument(this);
	}
};


function CodeArgumentContext(parser, ctx) {
	ArgumentContext.call(this, parser);
    this.arg = null; // Code_argumentContext;
    ArgumentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CodeArgumentContext.prototype = Object.create(ArgumentContext.prototype);
CodeArgumentContext.prototype.constructor = CodeArgumentContext;

OParser.CodeArgumentContext = CodeArgumentContext;

CodeArgumentContext.prototype.code_argument = function() {
    return this.getTypedRuleContext(Code_argumentContext,0);
};
CodeArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCodeArgument(this);
	}
};

CodeArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCodeArgument(this);
	}
};



OParser.ArgumentContext = ArgumentContext;

OParser.prototype.argument = function() {

    var localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, OParser.RULE_argument);
    var _la = 0; // Token type
    try {
        this.state = 1758;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
        switch(la_) {
        case 1:
            localctx = new CodeArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1753;
            localctx.arg = this.code_argument();
            break;

        case 2:
            localctx = new OperatorArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1755;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===OParser.MUTABLE) {
                this.state = 1754;
                this.match(OParser.MUTABLE);
            }

            this.state = 1757;
            localctx.arg = this.operator_argument();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Operator_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_operator_argument;
    return this;
}

Operator_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operator_argumentContext.prototype.constructor = Operator_argumentContext;

Operator_argumentContext.prototype.named_argument = function() {
    return this.getTypedRuleContext(Named_argumentContext,0);
};

Operator_argumentContext.prototype.typed_argument = function() {
    return this.getTypedRuleContext(Typed_argumentContext,0);
};

Operator_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterOperator_argument(this);
	}
};

Operator_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitOperator_argument(this);
	}
};




OParser.Operator_argumentContext = Operator_argumentContext;

OParser.prototype.operator_argument = function() {

    var localctx = new Operator_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, OParser.RULE_operator_argument);
    try {
        this.state = 1762;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.VARIABLE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1760;
            this.named_argument();
            break;
        case OParser.BOOLEAN:
        case OParser.CHARACTER:
        case OParser.TEXT:
        case OParser.INTEGER:
        case OParser.DECIMAL:
        case OParser.DATE:
        case OParser.TIME:
        case OParser.DATETIME:
        case OParser.PERIOD:
        case OParser.VERSION:
        case OParser.CODE:
        case OParser.DOCUMENT:
        case OParser.BLOB:
        case OParser.IMAGE:
        case OParser.UUID:
        case OParser.ITERATOR:
        case OParser.CURSOR:
        case OParser.HTML:
        case OParser.ANY:
        case OParser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 1761;
            this.typed_argument();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Named_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_named_argument;
    return this;
}

Named_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Named_argumentContext.prototype.constructor = Named_argumentContext;

Named_argumentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Named_argumentContext.prototype.EQ = function() {
    return this.getToken(OParser.EQ, 0);
};

Named_argumentContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};

Named_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNamed_argument(this);
	}
};

Named_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNamed_argument(this);
	}
};




OParser.Named_argumentContext = Named_argumentContext;

OParser.prototype.named_argument = function() {

    var localctx = new Named_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, OParser.RULE_named_argument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1764;
        this.variable_identifier();
        this.state = 1767;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.EQ) {
            this.state = 1765;
            this.match(OParser.EQ);
            this.state = 1766;
            this.literal_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Code_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_code_argument;
    this.name = null; // Variable_identifierContext
    return this;
}

Code_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Code_argumentContext.prototype.constructor = Code_argumentContext;

Code_argumentContext.prototype.code_type = function() {
    return this.getTypedRuleContext(Code_typeContext,0);
};

Code_argumentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Code_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCode_argument(this);
	}
};

Code_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCode_argument(this);
	}
};




OParser.Code_argumentContext = Code_argumentContext;

OParser.prototype.code_argument = function() {

    var localctx = new Code_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, OParser.RULE_code_argument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1769;
        this.code_type();
        this.state = 1770;
        localctx.name = this.variable_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_or_any_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_category_or_any_type;
    return this;
}

Category_or_any_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_or_any_typeContext.prototype.constructor = Category_or_any_typeContext;

Category_or_any_typeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Category_or_any_typeContext.prototype.any_type = function() {
    return this.getTypedRuleContext(Any_typeContext,0);
};

Category_or_any_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCategory_or_any_type(this);
	}
};

Category_or_any_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCategory_or_any_type(this);
	}
};




OParser.Category_or_any_typeContext = Category_or_any_typeContext;

OParser.prototype.category_or_any_type = function() {

    var localctx = new Category_or_any_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, OParser.RULE_category_or_any_type);
    try {
        this.state = 1774;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.BOOLEAN:
        case OParser.CHARACTER:
        case OParser.TEXT:
        case OParser.INTEGER:
        case OParser.DECIMAL:
        case OParser.DATE:
        case OParser.TIME:
        case OParser.DATETIME:
        case OParser.PERIOD:
        case OParser.VERSION:
        case OParser.CODE:
        case OParser.DOCUMENT:
        case OParser.BLOB:
        case OParser.IMAGE:
        case OParser.UUID:
        case OParser.ITERATOR:
        case OParser.CURSOR:
        case OParser.HTML:
        case OParser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1772;
            this.typedef(0);
            break;
        case OParser.ANY:
            this.enterOuterAlt(localctx, 2);
            this.state = 1773;
            this.any_type(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Any_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_any_type;
    return this;
}

Any_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Any_typeContext.prototype.constructor = Any_typeContext;


 
Any_typeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function AnyListTypeContext(parser, ctx) {
	Any_typeContext.call(this, parser);
    Any_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnyListTypeContext.prototype = Object.create(Any_typeContext.prototype);
AnyListTypeContext.prototype.constructor = AnyListTypeContext;

OParser.AnyListTypeContext = AnyListTypeContext;

AnyListTypeContext.prototype.any_type = function() {
    return this.getTypedRuleContext(Any_typeContext,0);
};

AnyListTypeContext.prototype.LBRAK = function() {
    return this.getToken(OParser.LBRAK, 0);
};

AnyListTypeContext.prototype.RBRAK = function() {
    return this.getToken(OParser.RBRAK, 0);
};
AnyListTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAnyListType(this);
	}
};

AnyListTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAnyListType(this);
	}
};


function AnyTypeContext(parser, ctx) {
	Any_typeContext.call(this, parser);
    Any_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnyTypeContext.prototype = Object.create(Any_typeContext.prototype);
AnyTypeContext.prototype.constructor = AnyTypeContext;

OParser.AnyTypeContext = AnyTypeContext;

AnyTypeContext.prototype.ANY = function() {
    return this.getToken(OParser.ANY, 0);
};
AnyTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAnyType(this);
	}
};

AnyTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAnyType(this);
	}
};


function AnyDictTypeContext(parser, ctx) {
	Any_typeContext.call(this, parser);
    Any_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnyDictTypeContext.prototype = Object.create(Any_typeContext.prototype);
AnyDictTypeContext.prototype.constructor = AnyDictTypeContext;

OParser.AnyDictTypeContext = AnyDictTypeContext;

AnyDictTypeContext.prototype.any_type = function() {
    return this.getTypedRuleContext(Any_typeContext,0);
};

AnyDictTypeContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

AnyDictTypeContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};
AnyDictTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAnyDictType(this);
	}
};

AnyDictTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAnyDictType(this);
	}
};



OParser.prototype.any_type = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Any_typeContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 224;
    this.enterRecursionRule(localctx, 224, OParser.RULE_any_type, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new AnyTypeContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1777;
        this.match(OParser.ANY);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1787;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,140,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1785;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AnyListTypeContext(this, new Any_typeContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_any_type);
                    this.state = 1779;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1780;
                    this.match(OParser.LBRAK);
                    this.state = 1781;
                    this.match(OParser.RBRAK);
                    break;

                case 2:
                    localctx = new AnyDictTypeContext(this, new Any_typeContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, OParser.RULE_any_type);
                    this.state = 1782;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1783;
                    this.match(OParser.LCURL);
                    this.state = 1784;
                    this.match(OParser.RCURL);
                    break;

                } 
            }
            this.state = 1789;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,140,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Member_method_declaration_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_member_method_declaration_list;
    return this;
}

Member_method_declaration_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_method_declaration_listContext.prototype.constructor = Member_method_declaration_listContext;

Member_method_declaration_listContext.prototype.member_method_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Member_method_declarationContext);
    } else {
        return this.getTypedRuleContext(Member_method_declarationContext,i);
    }
};

Member_method_declaration_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Member_method_declaration_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMember_method_declaration_list(this);
	}
};

Member_method_declaration_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMember_method_declaration_list(this);
	}
};




OParser.Member_method_declaration_listContext = Member_method_declaration_listContext;

OParser.prototype.member_method_declaration_list = function() {

    var localctx = new Member_method_declaration_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, OParser.RULE_member_method_declaration_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1790;
        this.member_method_declaration();
        this.state = 1796;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.COMMENT || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ABSTRACT - 48)))) !== 0) || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (OParser.GETTER - 107)) | (1 << (OParser.METHOD - 107)) | (1 << (OParser.OPERATOR - 107)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (OParser.SETTER - 140)) | (1 << (OParser.TYPE_IDENTIFIER - 140)) | (1 << (OParser.ARONDBASE_IDENTIFIER - 140)))) !== 0)) {
            this.state = 1791;
            this.lfp();
            this.state = 1792;
            this.member_method_declaration();
            this.state = 1798;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Member_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_member_method_declaration;
    return this;
}

Member_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_method_declarationContext.prototype.constructor = Member_method_declarationContext;

Member_method_declarationContext.prototype.setter_method_declaration = function() {
    return this.getTypedRuleContext(Setter_method_declarationContext,0);
};

Member_method_declarationContext.prototype.getter_method_declaration = function() {
    return this.getTypedRuleContext(Getter_method_declarationContext,0);
};

Member_method_declarationContext.prototype.concrete_method_declaration = function() {
    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
};

Member_method_declarationContext.prototype.abstract_method_declaration = function() {
    return this.getTypedRuleContext(Abstract_method_declarationContext,0);
};

Member_method_declarationContext.prototype.operator_method_declaration = function() {
    return this.getTypedRuleContext(Operator_method_declarationContext,0);
};

Member_method_declarationContext.prototype.comment_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Comment_statementContext);
    } else {
        return this.getTypedRuleContext(Comment_statementContext,i);
    }
};

Member_method_declarationContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Member_method_declarationContext.prototype.annotation_constructor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Annotation_constructorContext);
    } else {
        return this.getTypedRuleContext(Annotation_constructorContext,i);
    }
};

Member_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMember_method_declaration(this);
	}
};

Member_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMember_method_declaration(this);
	}
};




OParser.Member_method_declarationContext = Member_method_declarationContext;

OParser.prototype.member_method_declaration = function() {

    var localctx = new Member_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, OParser.RULE_member_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1804;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.COMMENT) {
            this.state = 1799;
            this.comment_statement();
            this.state = 1800;
            this.lfp();
            this.state = 1806;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1812;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.ARONDBASE_IDENTIFIER) {
            this.state = 1807;
            this.annotation_constructor();
            this.state = 1808;
            this.lfp();
            this.state = 1814;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1820;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1815;
            this.setter_method_declaration();
            break;

        case 2:
            this.state = 1816;
            this.getter_method_declaration();
            break;

        case 3:
            this.state = 1817;
            this.concrete_method_declaration();
            break;

        case 4:
            this.state = 1818;
            this.abstract_method_declaration();
            break;

        case 5:
            this.state = 1819;
            this.operator_method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_member_method_declaration_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_native_member_method_declaration_list;
    return this;
}

Native_member_method_declaration_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_member_method_declaration_listContext.prototype.constructor = Native_member_method_declaration_listContext;

Native_member_method_declaration_listContext.prototype.native_member_method_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Native_member_method_declarationContext);
    } else {
        return this.getTypedRuleContext(Native_member_method_declarationContext,i);
    }
};

Native_member_method_declaration_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Native_member_method_declaration_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNative_member_method_declaration_list(this);
	}
};

Native_member_method_declaration_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNative_member_method_declaration_list(this);
	}
};




OParser.Native_member_method_declaration_listContext = Native_member_method_declaration_listContext;

OParser.prototype.native_member_method_declaration_list = function() {

    var localctx = new Native_member_method_declaration_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, OParser.RULE_native_member_method_declaration_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1822;
        this.native_member_method_declaration();
        this.state = 1828;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ANY - 48)))) !== 0) || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (OParser.GETTER - 107)) | (1 << (OParser.METHOD - 107)) | (1 << (OParser.NATIVE - 107)))) !== 0) || _la===OParser.SETTER || _la===OParser.TYPE_IDENTIFIER) {
            this.state = 1823;
            this.lfp();
            this.state = 1824;
            this.native_member_method_declaration();
            this.state = 1830;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_member_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_native_member_method_declaration;
    return this;
}

Native_member_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_member_method_declarationContext.prototype.constructor = Native_member_method_declarationContext;

Native_member_method_declarationContext.prototype.native_getter_declaration = function() {
    return this.getTypedRuleContext(Native_getter_declarationContext,0);
};

Native_member_method_declarationContext.prototype.native_setter_declaration = function() {
    return this.getTypedRuleContext(Native_setter_declarationContext,0);
};

Native_member_method_declarationContext.prototype.native_method_declaration = function() {
    return this.getTypedRuleContext(Native_method_declarationContext,0);
};

Native_member_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNative_member_method_declaration(this);
	}
};

Native_member_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNative_member_method_declaration(this);
	}
};




OParser.Native_member_method_declarationContext = Native_member_method_declarationContext;

OParser.prototype.native_member_method_declaration = function() {

    var localctx = new Native_member_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, OParser.RULE_native_member_method_declaration);
    try {
        this.state = 1834;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1831;
            this.native_getter_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1832;
            this.native_setter_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1833;
            this.native_method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_bindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_native_category_binding;
    return this;
}

Native_category_bindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_bindingContext.prototype.constructor = Native_category_bindingContext;


 
Native_category_bindingContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function Python2CategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Python_category_bindingContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python2CategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
Python2CategoryBindingContext.prototype.constructor = Python2CategoryBindingContext;

OParser.Python2CategoryBindingContext = Python2CategoryBindingContext;

Python2CategoryBindingContext.prototype.PYTHON2 = function() {
    return this.getToken(OParser.PYTHON2, 0);
};

Python2CategoryBindingContext.prototype.python_category_binding = function() {
    return this.getTypedRuleContext(Python_category_bindingContext,0);
};
Python2CategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPython2CategoryBinding(this);
	}
};

Python2CategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPython2CategoryBinding(this);
	}
};


function Python3CategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Python_category_bindingContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python3CategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
Python3CategoryBindingContext.prototype.constructor = Python3CategoryBindingContext;

OParser.Python3CategoryBindingContext = Python3CategoryBindingContext;

Python3CategoryBindingContext.prototype.PYTHON3 = function() {
    return this.getToken(OParser.PYTHON3, 0);
};

Python3CategoryBindingContext.prototype.python_category_binding = function() {
    return this.getTypedRuleContext(Python_category_bindingContext,0);
};
Python3CategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPython3CategoryBinding(this);
	}
};

Python3CategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPython3CategoryBinding(this);
	}
};


function JavaCategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Java_class_identifier_expressionContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaCategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
JavaCategoryBindingContext.prototype.constructor = JavaCategoryBindingContext;

OParser.JavaCategoryBindingContext = JavaCategoryBindingContext;

JavaCategoryBindingContext.prototype.JAVA = function() {
    return this.getToken(OParser.JAVA, 0);
};

JavaCategoryBindingContext.prototype.java_class_identifier_expression = function() {
    return this.getTypedRuleContext(Java_class_identifier_expressionContext,0);
};
JavaCategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaCategoryBinding(this);
	}
};

JavaCategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaCategoryBinding(this);
	}
};


function CSharpCategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Csharp_identifier_expressionContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpCategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
CSharpCategoryBindingContext.prototype.constructor = CSharpCategoryBindingContext;

OParser.CSharpCategoryBindingContext = CSharpCategoryBindingContext;

CSharpCategoryBindingContext.prototype.CSHARP = function() {
    return this.getToken(OParser.CSHARP, 0);
};

CSharpCategoryBindingContext.prototype.csharp_identifier_expression = function() {
    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
};
CSharpCategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCSharpCategoryBinding(this);
	}
};

CSharpCategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCSharpCategoryBinding(this);
	}
};


function JavaScriptCategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Javascript_category_bindingContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptCategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
JavaScriptCategoryBindingContext.prototype.constructor = JavaScriptCategoryBindingContext;

OParser.JavaScriptCategoryBindingContext = JavaScriptCategoryBindingContext;

JavaScriptCategoryBindingContext.prototype.JAVASCRIPT = function() {
    return this.getToken(OParser.JAVASCRIPT, 0);
};

JavaScriptCategoryBindingContext.prototype.javascript_category_binding = function() {
    return this.getTypedRuleContext(Javascript_category_bindingContext,0);
};
JavaScriptCategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaScriptCategoryBinding(this);
	}
};

JavaScriptCategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaScriptCategoryBinding(this);
	}
};



OParser.Native_category_bindingContext = Native_category_bindingContext;

OParser.prototype.native_category_binding = function() {

    var localctx = new Native_category_bindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, OParser.RULE_native_category_binding);
    try {
        this.state = 1846;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.JAVA:
            localctx = new JavaCategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1836;
            this.match(OParser.JAVA);
            this.state = 1837;
            localctx.binding = this.java_class_identifier_expression(0);
            break;
        case OParser.CSHARP:
            localctx = new CSharpCategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1838;
            this.match(OParser.CSHARP);
            this.state = 1839;
            localctx.binding = this.csharp_identifier_expression(0);
            break;
        case OParser.PYTHON2:
            localctx = new Python2CategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1840;
            this.match(OParser.PYTHON2);
            this.state = 1841;
            localctx.binding = this.python_category_binding();
            break;
        case OParser.PYTHON3:
            localctx = new Python3CategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1842;
            this.match(OParser.PYTHON3);
            this.state = 1843;
            localctx.binding = this.python_category_binding();
            break;
        case OParser.JAVASCRIPT:
            localctx = new JavaScriptCategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1844;
            this.match(OParser.JAVASCRIPT);
            this.state = 1845;
            localctx.binding = this.javascript_category_binding();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_category_bindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_python_category_binding;
    return this;
}

Python_category_bindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_category_bindingContext.prototype.constructor = Python_category_bindingContext;

Python_category_bindingContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Python_category_bindingContext.prototype.python_module = function() {
    return this.getTypedRuleContext(Python_moduleContext,0);
};

Python_category_bindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPython_category_binding(this);
	}
};

Python_category_bindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPython_category_binding(this);
	}
};




OParser.Python_category_bindingContext = Python_category_bindingContext;

OParser.prototype.python_category_binding = function() {

    var localctx = new Python_category_bindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, OParser.RULE_python_category_binding);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1848;
        this.identifier();
        this.state = 1850;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.FROM) {
            this.state = 1849;
            this.python_module();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_moduleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_python_module;
    return this;
}

Python_moduleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_moduleContext.prototype.constructor = Python_moduleContext;

Python_moduleContext.prototype.FROM = function() {
    return this.getToken(OParser.FROM, 0);
};

Python_moduleContext.prototype.module_token = function() {
    return this.getTypedRuleContext(Module_tokenContext,0);
};

Python_moduleContext.prototype.COLON = function() {
    return this.getToken(OParser.COLON, 0);
};

Python_moduleContext.prototype.python_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Python_identifierContext);
    } else {
        return this.getTypedRuleContext(Python_identifierContext,i);
    }
};

Python_moduleContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.DOT);
    } else {
        return this.getToken(OParser.DOT, i);
    }
};


Python_moduleContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPython_module(this);
	}
};

Python_moduleContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPython_module(this);
	}
};




OParser.Python_moduleContext = Python_moduleContext;

OParser.prototype.python_module = function() {

    var localctx = new Python_moduleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, OParser.RULE_python_module);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1852;
        this.match(OParser.FROM);
        this.state = 1853;
        this.module_token();
        this.state = 1854;
        this.match(OParser.COLON);
        this.state = 1855;
        this.python_identifier();
        this.state = 1860;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.DOT) {
            this.state = 1856;
            this.match(OParser.DOT);
            this.state = 1857;
            this.python_identifier();
            this.state = 1862;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_category_bindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_javascript_category_binding;
    return this;
}

Javascript_category_bindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_category_bindingContext.prototype.constructor = Javascript_category_bindingContext;

Javascript_category_bindingContext.prototype.javascript_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Javascript_identifierContext);
    } else {
        return this.getTypedRuleContext(Javascript_identifierContext,i);
    }
};

Javascript_category_bindingContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.DOT);
    } else {
        return this.getToken(OParser.DOT, i);
    }
};


Javascript_category_bindingContext.prototype.javascript_module = function() {
    return this.getTypedRuleContext(Javascript_moduleContext,0);
};

Javascript_category_bindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascript_category_binding(this);
	}
};

Javascript_category_bindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascript_category_binding(this);
	}
};




OParser.Javascript_category_bindingContext = Javascript_category_bindingContext;

OParser.prototype.javascript_category_binding = function() {

    var localctx = new Javascript_category_bindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, OParser.RULE_javascript_category_binding);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1863;
        this.javascript_identifier();
        this.state = 1868;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.DOT) {
            this.state = 1864;
            this.match(OParser.DOT);
            this.state = 1865;
            this.javascript_identifier();
            this.state = 1870;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1872;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.FROM) {
            this.state = 1871;
            this.javascript_module();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_moduleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_javascript_module;
    return this;
}

Javascript_moduleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_moduleContext.prototype.constructor = Javascript_moduleContext;

Javascript_moduleContext.prototype.FROM = function() {
    return this.getToken(OParser.FROM, 0);
};

Javascript_moduleContext.prototype.module_token = function() {
    return this.getTypedRuleContext(Module_tokenContext,0);
};

Javascript_moduleContext.prototype.COLON = function() {
    return this.getToken(OParser.COLON, 0);
};

Javascript_moduleContext.prototype.javascript_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Javascript_identifierContext);
    } else {
        return this.getTypedRuleContext(Javascript_identifierContext,i);
    }
};

Javascript_moduleContext.prototype.SLASH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.SLASH);
    } else {
        return this.getToken(OParser.SLASH, i);
    }
};


Javascript_moduleContext.prototype.DOT = function() {
    return this.getToken(OParser.DOT, 0);
};

Javascript_moduleContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascript_module(this);
	}
};

Javascript_moduleContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascript_module(this);
	}
};




OParser.Javascript_moduleContext = Javascript_moduleContext;

OParser.prototype.javascript_module = function() {

    var localctx = new Javascript_moduleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, OParser.RULE_javascript_module);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1874;
        this.match(OParser.FROM);
        this.state = 1875;
        this.module_token();
        this.state = 1876;
        this.match(OParser.COLON);
        this.state = 1878;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.SLASH) {
            this.state = 1877;
            this.match(OParser.SLASH);
        }

        this.state = 1880;
        this.javascript_identifier();
        this.state = 1885;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.SLASH) {
            this.state = 1881;
            this.match(OParser.SLASH);
            this.state = 1882;
            this.javascript_identifier();
            this.state = 1887;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1890;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.DOT) {
            this.state = 1888;
            this.match(OParser.DOT);
            this.state = 1889;
            this.javascript_identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_identifier_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_variable_identifier_list;
    return this;
}

Variable_identifier_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_identifier_listContext.prototype.constructor = Variable_identifier_listContext;

Variable_identifier_listContext.prototype.variable_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_identifierContext);
    } else {
        return this.getTypedRuleContext(Variable_identifierContext,i);
    }
};

Variable_identifier_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.COMMA);
    } else {
        return this.getToken(OParser.COMMA, i);
    }
};


Variable_identifier_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterVariable_identifier_list(this);
	}
};

Variable_identifier_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitVariable_identifier_list(this);
	}
};




OParser.Variable_identifier_listContext = Variable_identifier_listContext;

OParser.prototype.variable_identifier_list = function() {

    var localctx = new Variable_identifier_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, OParser.RULE_variable_identifier_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1892;
        this.variable_identifier();
        this.state = 1897;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.COMMA) {
            this.state = 1893;
            this.match(OParser.COMMA);
            this.state = 1894;
            this.variable_identifier();
            this.state = 1899;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_identifier_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_attribute_identifier_list;
    return this;
}

Attribute_identifier_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_identifier_listContext.prototype.constructor = Attribute_identifier_listContext;

Attribute_identifier_listContext.prototype.attribute_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_identifierContext);
    } else {
        return this.getTypedRuleContext(Attribute_identifierContext,i);
    }
};

Attribute_identifier_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.COMMA);
    } else {
        return this.getToken(OParser.COMMA, i);
    }
};


Attribute_identifier_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAttribute_identifier_list(this);
	}
};

Attribute_identifier_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAttribute_identifier_list(this);
	}
};




OParser.Attribute_identifier_listContext = Attribute_identifier_listContext;

OParser.prototype.attribute_identifier_list = function() {

    var localctx = new Attribute_identifier_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, OParser.RULE_attribute_identifier_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1900;
        this.attribute_identifier();
        this.state = 1905;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.COMMA) {
            this.state = 1901;
            this.match(OParser.COMMA);
            this.state = 1902;
            this.attribute_identifier();
            this.state = 1907;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_method_declaration;
    return this;
}

Method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_declarationContext.prototype.constructor = Method_declarationContext;

Method_declarationContext.prototype.abstract_method_declaration = function() {
    return this.getTypedRuleContext(Abstract_method_declarationContext,0);
};

Method_declarationContext.prototype.concrete_method_declaration = function() {
    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
};

Method_declarationContext.prototype.native_method_declaration = function() {
    return this.getTypedRuleContext(Native_method_declarationContext,0);
};

Method_declarationContext.prototype.test_method_declaration = function() {
    return this.getTypedRuleContext(Test_method_declarationContext,0);
};

Method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMethod_declaration(this);
	}
};

Method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMethod_declaration(this);
	}
};




OParser.Method_declarationContext = Method_declarationContext;

OParser.prototype.method_declaration = function() {

    var localctx = new Method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, OParser.RULE_method_declaration);
    try {
        this.state = 1912;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1908;
            this.abstract_method_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1909;
            this.concrete_method_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1910;
            this.native_method_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1911;
            this.test_method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comment_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_comment_statement;
    return this;
}

Comment_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comment_statementContext.prototype.constructor = Comment_statementContext;

Comment_statementContext.prototype.COMMENT = function() {
    return this.getToken(OParser.COMMENT, 0);
};

Comment_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterComment_statement(this);
	}
};

Comment_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitComment_statement(this);
	}
};




OParser.Comment_statementContext = Comment_statementContext;

OParser.prototype.comment_statement = function() {

    var localctx = new Comment_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, OParser.RULE_comment_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1914;
        this.match(OParser.COMMENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_native_statement_list;
    return this;
}

Native_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_statement_listContext.prototype.constructor = Native_statement_listContext;

Native_statement_listContext.prototype.native_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Native_statementContext);
    } else {
        return this.getTypedRuleContext(Native_statementContext,i);
    }
};

Native_statement_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Native_statement_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNative_statement_list(this);
	}
};

Native_statement_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNative_statement_list(this);
	}
};




OParser.Native_statement_listContext = Native_statement_listContext;

OParser.prototype.native_statement_list = function() {

    var localctx = new Native_statement_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, OParser.RULE_native_statement_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1916;
        this.native_statement();
        this.state = 1922;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT))) !== 0)) {
            this.state = 1917;
            this.lfp();
            this.state = 1918;
            this.native_statement();
            this.state = 1924;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_native_statement;
    return this;
}

Native_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_statementContext.prototype.constructor = Native_statementContext;


 
Native_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpNativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpNativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
CSharpNativeStatementContext.prototype.constructor = CSharpNativeStatementContext;

OParser.CSharpNativeStatementContext = CSharpNativeStatementContext;

CSharpNativeStatementContext.prototype.CSHARP = function() {
    return this.getToken(OParser.CSHARP, 0);
};

CSharpNativeStatementContext.prototype.csharp_statement = function() {
    return this.getTypedRuleContext(Csharp_statementContext,0);
};
CSharpNativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCSharpNativeStatement(this);
	}
};

CSharpNativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCSharpNativeStatement(this);
	}
};


function JavaNativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaNativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
JavaNativeStatementContext.prototype.constructor = JavaNativeStatementContext;

OParser.JavaNativeStatementContext = JavaNativeStatementContext;

JavaNativeStatementContext.prototype.JAVA = function() {
    return this.getToken(OParser.JAVA, 0);
};

JavaNativeStatementContext.prototype.java_statement = function() {
    return this.getTypedRuleContext(Java_statementContext,0);
};
JavaNativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaNativeStatement(this);
	}
};

JavaNativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaNativeStatement(this);
	}
};


function JavaScriptNativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptNativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
JavaScriptNativeStatementContext.prototype.constructor = JavaScriptNativeStatementContext;

OParser.JavaScriptNativeStatementContext = JavaScriptNativeStatementContext;

JavaScriptNativeStatementContext.prototype.JAVASCRIPT = function() {
    return this.getToken(OParser.JAVASCRIPT, 0);
};

JavaScriptNativeStatementContext.prototype.javascript_native_statement = function() {
    return this.getTypedRuleContext(Javascript_native_statementContext,0);
};
JavaScriptNativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaScriptNativeStatement(this);
	}
};

JavaScriptNativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaScriptNativeStatement(this);
	}
};


function Python2NativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python2NativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
Python2NativeStatementContext.prototype.constructor = Python2NativeStatementContext;

OParser.Python2NativeStatementContext = Python2NativeStatementContext;

Python2NativeStatementContext.prototype.PYTHON2 = function() {
    return this.getToken(OParser.PYTHON2, 0);
};

Python2NativeStatementContext.prototype.python_native_statement = function() {
    return this.getTypedRuleContext(Python_native_statementContext,0);
};
Python2NativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPython2NativeStatement(this);
	}
};

Python2NativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPython2NativeStatement(this);
	}
};


function Python3NativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python3NativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
Python3NativeStatementContext.prototype.constructor = Python3NativeStatementContext;

OParser.Python3NativeStatementContext = Python3NativeStatementContext;

Python3NativeStatementContext.prototype.PYTHON3 = function() {
    return this.getToken(OParser.PYTHON3, 0);
};

Python3NativeStatementContext.prototype.python_native_statement = function() {
    return this.getTypedRuleContext(Python_native_statementContext,0);
};
Python3NativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPython3NativeStatement(this);
	}
};

Python3NativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPython3NativeStatement(this);
	}
};



OParser.Native_statementContext = Native_statementContext;

OParser.prototype.native_statement = function() {

    var localctx = new Native_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, OParser.RULE_native_statement);
    try {
        this.state = 1935;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.JAVA:
            localctx = new JavaNativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1925;
            this.match(OParser.JAVA);
            this.state = 1926;
            this.java_statement();
            break;
        case OParser.CSHARP:
            localctx = new CSharpNativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1927;
            this.match(OParser.CSHARP);
            this.state = 1928;
            this.csharp_statement();
            break;
        case OParser.PYTHON2:
            localctx = new Python2NativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1929;
            this.match(OParser.PYTHON2);
            this.state = 1930;
            this.python_native_statement();
            break;
        case OParser.PYTHON3:
            localctx = new Python3NativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1931;
            this.match(OParser.PYTHON3);
            this.state = 1932;
            this.python_native_statement();
            break;
        case OParser.JAVASCRIPT:
            localctx = new JavaScriptNativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1933;
            this.match(OParser.JAVASCRIPT);
            this.state = 1934;
            this.javascript_native_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_native_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_python_native_statement;
    return this;
}

Python_native_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_native_statementContext.prototype.constructor = Python_native_statementContext;

Python_native_statementContext.prototype.python_statement = function() {
    return this.getTypedRuleContext(Python_statementContext,0);
};

Python_native_statementContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

Python_native_statementContext.prototype.python_module = function() {
    return this.getTypedRuleContext(Python_moduleContext,0);
};

Python_native_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPython_native_statement(this);
	}
};

Python_native_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPython_native_statement(this);
	}
};




OParser.Python_native_statementContext = Python_native_statementContext;

OParser.prototype.python_native_statement = function() {

    var localctx = new Python_native_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, OParser.RULE_python_native_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1937;
        this.python_statement();
        this.state = 1939;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.SEMI) {
            this.state = 1938;
            this.match(OParser.SEMI);
        }

        this.state = 1942;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.FROM) {
            this.state = 1941;
            this.python_module();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_native_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_javascript_native_statement;
    return this;
}

Javascript_native_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_native_statementContext.prototype.constructor = Javascript_native_statementContext;

Javascript_native_statementContext.prototype.javascript_statement = function() {
    return this.getTypedRuleContext(Javascript_statementContext,0);
};

Javascript_native_statementContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

Javascript_native_statementContext.prototype.javascript_module = function() {
    return this.getTypedRuleContext(Javascript_moduleContext,0);
};

Javascript_native_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascript_native_statement(this);
	}
};

Javascript_native_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascript_native_statement(this);
	}
};




OParser.Javascript_native_statementContext = Javascript_native_statementContext;

OParser.prototype.javascript_native_statement = function() {

    var localctx = new Javascript_native_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, OParser.RULE_javascript_native_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1944;
        this.javascript_statement();
        this.state = 1946;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.SEMI) {
            this.state = 1945;
            this.match(OParser.SEMI);
        }

        this.state = 1949;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.FROM) {
            this.state = 1948;
            this.javascript_module();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_statement_list;
    return this;
}

Statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_listContext.prototype.constructor = Statement_listContext;

Statement_listContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

Statement_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Statement_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterStatement_list(this);
	}
};

Statement_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitStatement_list(this);
	}
};




OParser.Statement_listContext = Statement_listContext;

OParser.prototype.statement_list = function() {

    var localctx = new Statement_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, OParser.RULE_statement_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1951;
        this.statement();
        this.state = 1957;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.BOOLEAN - 36)) | (1 << (OParser.CHARACTER - 36)) | (1 << (OParser.TEXT - 36)) | (1 << (OParser.INTEGER - 36)) | (1 << (OParser.DECIMAL - 36)) | (1 << (OParser.DATE - 36)) | (1 << (OParser.TIME - 36)) | (1 << (OParser.DATETIME - 36)) | (1 << (OParser.PERIOD - 36)) | (1 << (OParser.VERSION - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)) | (1 << (OParser.IMAGE - 36)) | (1 << (OParser.UUID - 36)) | (1 << (OParser.ITERATOR - 36)) | (1 << (OParser.CURSOR - 36)) | (1 << (OParser.HTML - 36)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (OParser.BREAK - 78)) | (1 << (OParser.DELETE - 78)) | (1 << (OParser.DO - 78)) | (1 << (OParser.FETCH - 78)) | (1 << (OParser.FILTERED - 78)) | (1 << (OParser.FLUSH - 78)) | (1 << (OParser.FOR - 78)) | (1 << (OParser.IF - 78)))) !== 0) || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (OParser.METHOD - 115)) | (1 << (OParser.MUTABLE - 115)) | (1 << (OParser.NULL - 115)) | (1 << (OParser.READ - 115)) | (1 << (OParser.RETURN - 115)) | (1 << (OParser.SELF - 115)) | (1 << (OParser.SORTED - 115)) | (1 << (OParser.STORE - 115)) | (1 << (OParser.SWITCH - 115)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (OParser.THIS - 148)) | (1 << (OParser.THROW - 148)) | (1 << (OParser.TRY - 148)) | (1 << (OParser.WITH - 148)) | (1 << (OParser.WHILE - 148)) | (1 << (OParser.WRITE - 148)) | (1 << (OParser.BOOLEAN_LITERAL - 148)) | (1 << (OParser.CHAR_LITERAL - 148)) | (1 << (OParser.MIN_INTEGER - 148)) | (1 << (OParser.MAX_INTEGER - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)) | (1 << (OParser.TEXT_LITERAL - 148)) | (1 << (OParser.UUID_LITERAL - 148)) | (1 << (OParser.INTEGER_LITERAL - 148)) | (1 << (OParser.HEXA_LITERAL - 148)) | (1 << (OParser.DECIMAL_LITERAL - 148)) | (1 << (OParser.DATETIME_LITERAL - 148)) | (1 << (OParser.TIME_LITERAL - 148)) | (1 << (OParser.DATE_LITERAL - 148)) | (1 << (OParser.PERIOD_LITERAL - 148)) | (1 << (OParser.VERSION_LITERAL - 148)))) !== 0)) {
            this.state = 1952;
            this.lfp();
            this.state = 1953;
            this.statement();
            this.state = 1959;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assertion_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_assertion_list;
    return this;
}

Assertion_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assertion_listContext.prototype.constructor = Assertion_listContext;

Assertion_listContext.prototype.assertion = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssertionContext);
    } else {
        return this.getTypedRuleContext(AssertionContext,i);
    }
};

Assertion_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Assertion_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAssertion_list(this);
	}
};

Assertion_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAssertion_list(this);
	}
};




OParser.Assertion_listContext = Assertion_listContext;

OParser.prototype.assertion_list = function() {

    var localctx = new Assertion_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, OParser.RULE_assertion_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1960;
        this.assertion();
        this.state = 1966;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTGT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (OParser.EXECUTE - 98)) | (1 << (OParser.FETCH - 98)) | (1 << (OParser.FILTERED - 98)) | (1 << (OParser.MUTABLE - 98)) | (1 << (OParser.NULL - 98)))) !== 0) || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (OParser.READ - 133)) | (1 << (OParser.SELF - 133)) | (1 << (OParser.SORTED - 133)) | (1 << (OParser.THIS - 133)) | (1 << (OParser.BOOLEAN_LITERAL - 133)) | (1 << (OParser.CHAR_LITERAL - 133)) | (1 << (OParser.MIN_INTEGER - 133)) | (1 << (OParser.MAX_INTEGER - 133)) | (1 << (OParser.SYMBOL_IDENTIFIER - 133)) | (1 << (OParser.TYPE_IDENTIFIER - 133)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (OParser.VARIABLE_IDENTIFIER - 165)) | (1 << (OParser.TEXT_LITERAL - 165)) | (1 << (OParser.UUID_LITERAL - 165)) | (1 << (OParser.INTEGER_LITERAL - 165)) | (1 << (OParser.HEXA_LITERAL - 165)) | (1 << (OParser.DECIMAL_LITERAL - 165)) | (1 << (OParser.DATETIME_LITERAL - 165)) | (1 << (OParser.TIME_LITERAL - 165)) | (1 << (OParser.DATE_LITERAL - 165)) | (1 << (OParser.PERIOD_LITERAL - 165)) | (1 << (OParser.VERSION_LITERAL - 165)))) !== 0)) {
            this.state = 1961;
            this.lfp();
            this.state = 1962;
            this.assertion();
            this.state = 1968;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_case_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_switch_case_statement_list;
    return this;
}

Switch_case_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_case_statement_listContext.prototype.constructor = Switch_case_statement_listContext;

Switch_case_statement_listContext.prototype.switch_case_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Switch_case_statementContext);
    } else {
        return this.getTypedRuleContext(Switch_case_statementContext,i);
    }
};

Switch_case_statement_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Switch_case_statement_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSwitch_case_statement_list(this);
	}
};

Switch_case_statement_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSwitch_case_statement_list(this);
	}
};




OParser.Switch_case_statement_listContext = Switch_case_statement_listContext;

OParser.prototype.switch_case_statement_list = function() {

    var localctx = new Switch_case_statement_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, OParser.RULE_switch_case_statement_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1969;
        this.switch_case_statement();
        this.state = 1975;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.CASE) {
            this.state = 1970;
            this.lfp();
            this.state = 1971;
            this.switch_case_statement();
            this.state = 1977;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Catch_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_catch_statement_list;
    return this;
}

Catch_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Catch_statement_listContext.prototype.constructor = Catch_statement_listContext;

Catch_statement_listContext.prototype.catch_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Catch_statementContext);
    } else {
        return this.getTypedRuleContext(Catch_statementContext,i);
    }
};

Catch_statement_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Catch_statement_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCatch_statement_list(this);
	}
};

Catch_statement_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCatch_statement_list(this);
	}
};




OParser.Catch_statement_listContext = Catch_statement_listContext;

OParser.prototype.catch_statement_list = function() {

    var localctx = new Catch_statement_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, OParser.RULE_catch_statement_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1978;
        this.catch_statement();
        this.state = 1984;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,167,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1979;
                this.lfp();
                this.state = 1980;
                this.catch_statement(); 
            }
            this.state = 1986;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,167,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Literal_collectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_literal_collection;
    return this;
}

Literal_collectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_collectionContext.prototype.constructor = Literal_collectionContext;


 
Literal_collectionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function LiteralListLiteralContext(parser, ctx) {
	Literal_collectionContext.call(this, parser);
    Literal_collectionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralListLiteralContext.prototype = Object.create(Literal_collectionContext.prototype);
LiteralListLiteralContext.prototype.constructor = LiteralListLiteralContext;

OParser.LiteralListLiteralContext = LiteralListLiteralContext;

LiteralListLiteralContext.prototype.LBRAK = function() {
    return this.getToken(OParser.LBRAK, 0);
};

LiteralListLiteralContext.prototype.literal_list_literal = function() {
    return this.getTypedRuleContext(Literal_list_literalContext,0);
};

LiteralListLiteralContext.prototype.RBRAK = function() {
    return this.getToken(OParser.RBRAK, 0);
};
LiteralListLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterLiteralListLiteral(this);
	}
};

LiteralListLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitLiteralListLiteral(this);
	}
};


function LiteralRangeLiteralContext(parser, ctx) {
	Literal_collectionContext.call(this, parser);
    this.low = null; // Atomic_literalContext;
    this.high = null; // Atomic_literalContext;
    Literal_collectionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralRangeLiteralContext.prototype = Object.create(Literal_collectionContext.prototype);
LiteralRangeLiteralContext.prototype.constructor = LiteralRangeLiteralContext;

OParser.LiteralRangeLiteralContext = LiteralRangeLiteralContext;

LiteralRangeLiteralContext.prototype.LBRAK = function() {
    return this.getToken(OParser.LBRAK, 0);
};

LiteralRangeLiteralContext.prototype.RANGE = function() {
    return this.getToken(OParser.RANGE, 0);
};

LiteralRangeLiteralContext.prototype.RBRAK = function() {
    return this.getToken(OParser.RBRAK, 0);
};

LiteralRangeLiteralContext.prototype.atomic_literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Atomic_literalContext);
    } else {
        return this.getTypedRuleContext(Atomic_literalContext,i);
    }
};
LiteralRangeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterLiteralRangeLiteral(this);
	}
};

LiteralRangeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitLiteralRangeLiteral(this);
	}
};


function LiteralSetLiteralContext(parser, ctx) {
	Literal_collectionContext.call(this, parser);
    Literal_collectionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralSetLiteralContext.prototype = Object.create(Literal_collectionContext.prototype);
LiteralSetLiteralContext.prototype.constructor = LiteralSetLiteralContext;

OParser.LiteralSetLiteralContext = LiteralSetLiteralContext;

LiteralSetLiteralContext.prototype.LT = function() {
    return this.getToken(OParser.LT, 0);
};

LiteralSetLiteralContext.prototype.literal_list_literal = function() {
    return this.getTypedRuleContext(Literal_list_literalContext,0);
};

LiteralSetLiteralContext.prototype.GT = function() {
    return this.getToken(OParser.GT, 0);
};
LiteralSetLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterLiteralSetLiteral(this);
	}
};

LiteralSetLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitLiteralSetLiteral(this);
	}
};



OParser.Literal_collectionContext = Literal_collectionContext;

OParser.prototype.literal_collection = function() {

    var localctx = new Literal_collectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, OParser.RULE_literal_collection);
    try {
        this.state = 2001;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LiteralRangeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1987;
            this.match(OParser.LBRAK);
            this.state = 1988;
            localctx.low = this.atomic_literal();
            this.state = 1989;
            this.match(OParser.RANGE);
            this.state = 1990;
            localctx.high = this.atomic_literal();
            this.state = 1991;
            this.match(OParser.RBRAK);
            break;

        case 2:
            localctx = new LiteralListLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1993;
            this.match(OParser.LBRAK);
            this.state = 1994;
            this.literal_list_literal();
            this.state = 1995;
            this.match(OParser.RBRAK);
            break;

        case 3:
            localctx = new LiteralSetLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1997;
            this.match(OParser.LT);
            this.state = 1998;
            this.literal_list_literal();
            this.state = 1999;
            this.match(OParser.GT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Atomic_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_atomic_literal;
    return this;
}

Atomic_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Atomic_literalContext.prototype.constructor = Atomic_literalContext;


 
Atomic_literalContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MinIntegerLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MinIntegerLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
MinIntegerLiteralContext.prototype.constructor = MinIntegerLiteralContext;

OParser.MinIntegerLiteralContext = MinIntegerLiteralContext;

MinIntegerLiteralContext.prototype.MIN_INTEGER = function() {
    return this.getToken(OParser.MIN_INTEGER, 0);
};
MinIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMinIntegerLiteral(this);
	}
};

MinIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMinIntegerLiteral(this);
	}
};


function DateLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
DateLiteralContext.prototype.constructor = DateLiteralContext;

OParser.DateLiteralContext = DateLiteralContext;

DateLiteralContext.prototype.DATE_LITERAL = function() {
    return this.getToken(OParser.DATE_LITERAL, 0);
};
DateLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDateLiteral(this);
	}
};

DateLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDateLiteral(this);
	}
};


function BooleanLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

OParser.BooleanLiteralContext = BooleanLiteralContext;

BooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(OParser.BOOLEAN_LITERAL, 0);
};
BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitBooleanLiteral(this);
	}
};


function VersionLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VersionLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
VersionLiteralContext.prototype.constructor = VersionLiteralContext;

OParser.VersionLiteralContext = VersionLiteralContext;

VersionLiteralContext.prototype.VERSION_LITERAL = function() {
    return this.getToken(OParser.VERSION_LITERAL, 0);
};
VersionLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterVersionLiteral(this);
	}
};

VersionLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitVersionLiteral(this);
	}
};


function HexadecimalLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HexadecimalLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
HexadecimalLiteralContext.prototype.constructor = HexadecimalLiteralContext;

OParser.HexadecimalLiteralContext = HexadecimalLiteralContext;

HexadecimalLiteralContext.prototype.HEXA_LITERAL = function() {
    return this.getToken(OParser.HEXA_LITERAL, 0);
};
HexadecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterHexadecimalLiteral(this);
	}
};

HexadecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitHexadecimalLiteral(this);
	}
};


function UUIDLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UUIDLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
UUIDLiteralContext.prototype.constructor = UUIDLiteralContext;

OParser.UUIDLiteralContext = UUIDLiteralContext;

UUIDLiteralContext.prototype.UUID_LITERAL = function() {
    return this.getToken(OParser.UUID_LITERAL, 0);
};
UUIDLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterUUIDLiteral(this);
	}
};

UUIDLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitUUIDLiteral(this);
	}
};


function MaxIntegerLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MaxIntegerLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
MaxIntegerLiteralContext.prototype.constructor = MaxIntegerLiteralContext;

OParser.MaxIntegerLiteralContext = MaxIntegerLiteralContext;

MaxIntegerLiteralContext.prototype.MAX_INTEGER = function() {
    return this.getToken(OParser.MAX_INTEGER, 0);
};
MaxIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMaxIntegerLiteral(this);
	}
};

MaxIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMaxIntegerLiteral(this);
	}
};


function DateTimeLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateTimeLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
DateTimeLiteralContext.prototype.constructor = DateTimeLiteralContext;

OParser.DateTimeLiteralContext = DateTimeLiteralContext;

DateTimeLiteralContext.prototype.DATETIME_LITERAL = function() {
    return this.getToken(OParser.DATETIME_LITERAL, 0);
};
DateTimeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDateTimeLiteral(this);
	}
};

DateTimeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDateTimeLiteral(this);
	}
};


function PeriodLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PeriodLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
PeriodLiteralContext.prototype.constructor = PeriodLiteralContext;

OParser.PeriodLiteralContext = PeriodLiteralContext;

PeriodLiteralContext.prototype.PERIOD_LITERAL = function() {
    return this.getToken(OParser.PERIOD_LITERAL, 0);
};
PeriodLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPeriodLiteral(this);
	}
};

PeriodLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPeriodLiteral(this);
	}
};


function DecimalLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DecimalLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
DecimalLiteralContext.prototype.constructor = DecimalLiteralContext;

OParser.DecimalLiteralContext = DecimalLiteralContext;

DecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(OParser.DECIMAL_LITERAL, 0);
};
DecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDecimalLiteral(this);
	}
};


function TextLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TextLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
TextLiteralContext.prototype.constructor = TextLiteralContext;

OParser.TextLiteralContext = TextLiteralContext;

TextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(OParser.TEXT_LITERAL, 0);
};
TextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterTextLiteral(this);
	}
};

TextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitTextLiteral(this);
	}
};


function NullLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.n = null; // Null_literalContext;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
NullLiteralContext.prototype.constructor = NullLiteralContext;

OParser.NullLiteralContext = NullLiteralContext;

NullLiteralContext.prototype.null_literal = function() {
    return this.getTypedRuleContext(Null_literalContext,0);
};
NullLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNullLiteral(this);
	}
};

NullLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNullLiteral(this);
	}
};


function IntegerLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntegerLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
IntegerLiteralContext.prototype.constructor = IntegerLiteralContext;

OParser.IntegerLiteralContext = IntegerLiteralContext;

IntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(OParser.INTEGER_LITERAL, 0);
};
IntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterIntegerLiteral(this);
	}
};

IntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitIntegerLiteral(this);
	}
};


function TimeLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
TimeLiteralContext.prototype.constructor = TimeLiteralContext;

OParser.TimeLiteralContext = TimeLiteralContext;

TimeLiteralContext.prototype.TIME_LITERAL = function() {
    return this.getToken(OParser.TIME_LITERAL, 0);
};
TimeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterTimeLiteral(this);
	}
};

TimeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitTimeLiteral(this);
	}
};


function CharacterLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CharacterLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
CharacterLiteralContext.prototype.constructor = CharacterLiteralContext;

OParser.CharacterLiteralContext = CharacterLiteralContext;

CharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(OParser.CHAR_LITERAL, 0);
};
CharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCharacterLiteral(this);
	}
};

CharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCharacterLiteral(this);
	}
};



OParser.Atomic_literalContext = Atomic_literalContext;

OParser.prototype.atomic_literal = function() {

    var localctx = new Atomic_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, OParser.RULE_atomic_literal);
    try {
        this.state = 2018;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.MIN_INTEGER:
            localctx = new MinIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2003;
            localctx.t = this.match(OParser.MIN_INTEGER);
            break;
        case OParser.MAX_INTEGER:
            localctx = new MaxIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2004;
            localctx.t = this.match(OParser.MAX_INTEGER);
            break;
        case OParser.INTEGER_LITERAL:
            localctx = new IntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2005;
            localctx.t = this.match(OParser.INTEGER_LITERAL);
            break;
        case OParser.HEXA_LITERAL:
            localctx = new HexadecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2006;
            localctx.t = this.match(OParser.HEXA_LITERAL);
            break;
        case OParser.CHAR_LITERAL:
            localctx = new CharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2007;
            localctx.t = this.match(OParser.CHAR_LITERAL);
            break;
        case OParser.DATE_LITERAL:
            localctx = new DateLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 2008;
            localctx.t = this.match(OParser.DATE_LITERAL);
            break;
        case OParser.TIME_LITERAL:
            localctx = new TimeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 2009;
            localctx.t = this.match(OParser.TIME_LITERAL);
            break;
        case OParser.TEXT_LITERAL:
            localctx = new TextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 2010;
            localctx.t = this.match(OParser.TEXT_LITERAL);
            break;
        case OParser.DECIMAL_LITERAL:
            localctx = new DecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 2011;
            localctx.t = this.match(OParser.DECIMAL_LITERAL);
            break;
        case OParser.DATETIME_LITERAL:
            localctx = new DateTimeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 2012;
            localctx.t = this.match(OParser.DATETIME_LITERAL);
            break;
        case OParser.BOOLEAN_LITERAL:
            localctx = new BooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 2013;
            localctx.t = this.match(OParser.BOOLEAN_LITERAL);
            break;
        case OParser.PERIOD_LITERAL:
            localctx = new PeriodLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 2014;
            localctx.t = this.match(OParser.PERIOD_LITERAL);
            break;
        case OParser.VERSION_LITERAL:
            localctx = new VersionLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 2015;
            localctx.t = this.match(OParser.VERSION_LITERAL);
            break;
        case OParser.UUID_LITERAL:
            localctx = new UUIDLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 2016;
            localctx.t = this.match(OParser.UUID_LITERAL);
            break;
        case OParser.NULL:
            localctx = new NullLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 2017;
            localctx.n = this.null_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Literal_list_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_literal_list_literal;
    return this;
}

Literal_list_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_list_literalContext.prototype.constructor = Literal_list_literalContext;

Literal_list_literalContext.prototype.atomic_literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Atomic_literalContext);
    } else {
        return this.getTypedRuleContext(Atomic_literalContext,i);
    }
};

Literal_list_literalContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.COMMA);
    } else {
        return this.getToken(OParser.COMMA, i);
    }
};


Literal_list_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterLiteral_list_literal(this);
	}
};

Literal_list_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitLiteral_list_literal(this);
	}
};




OParser.Literal_list_literalContext = Literal_list_literalContext;

OParser.prototype.literal_list_literal = function() {

    var localctx = new Literal_list_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, OParser.RULE_literal_list_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2020;
        this.atomic_literal();
        this.state = 2025;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.COMMA) {
            this.state = 2021;
            this.match(OParser.COMMA);
            this.state = 2022;
            this.atomic_literal();
            this.state = 2027;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function This_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_this_expression;
    return this;
}

This_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
This_expressionContext.prototype.constructor = This_expressionContext;

This_expressionContext.prototype.SELF = function() {
    return this.getToken(OParser.SELF, 0);
};

This_expressionContext.prototype.THIS = function() {
    return this.getToken(OParser.THIS, 0);
};

This_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterThis_expression(this);
	}
};

This_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitThis_expression(this);
	}
};




OParser.This_expressionContext = This_expressionContext;

OParser.prototype.this_expression = function() {

    var localctx = new This_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, OParser.RULE_this_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2028;
        _la = this._input.LA(1);
        if(!(_la===OParser.SELF || _la===OParser.THIS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_parenthesis_expression;
    return this;
}

Parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parenthesis_expressionContext.prototype.constructor = Parenthesis_expressionContext;

Parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Parenthesis_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterParenthesis_expression(this);
	}
};

Parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitParenthesis_expression(this);
	}
};




OParser.Parenthesis_expressionContext = Parenthesis_expressionContext;

OParser.prototype.parenthesis_expression = function() {

    var localctx = new Parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, OParser.RULE_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2030;
        this.match(OParser.LPAR);
        this.state = 2031;
        this.expression(0);
        this.state = 2032;
        this.match(OParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_literal_expression;
    return this;
}

Literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_expressionContext.prototype.constructor = Literal_expressionContext;

Literal_expressionContext.prototype.atomic_literal = function() {
    return this.getTypedRuleContext(Atomic_literalContext,0);
};

Literal_expressionContext.prototype.collection_literal = function() {
    return this.getTypedRuleContext(Collection_literalContext,0);
};

Literal_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterLiteral_expression(this);
	}
};

Literal_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitLiteral_expression(this);
	}
};




OParser.Literal_expressionContext = Literal_expressionContext;

OParser.prototype.literal_expression = function() {

    var localctx = new Literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, OParser.RULE_literal_expression);
    try {
        this.state = 2036;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.NULL:
        case OParser.BOOLEAN_LITERAL:
        case OParser.CHAR_LITERAL:
        case OParser.MIN_INTEGER:
        case OParser.MAX_INTEGER:
        case OParser.TEXT_LITERAL:
        case OParser.UUID_LITERAL:
        case OParser.INTEGER_LITERAL:
        case OParser.HEXA_LITERAL:
        case OParser.DECIMAL_LITERAL:
        case OParser.DATETIME_LITERAL:
        case OParser.TIME_LITERAL:
        case OParser.DATE_LITERAL:
        case OParser.PERIOD_LITERAL:
        case OParser.VERSION_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 2034;
            this.atomic_literal();
            break;
        case OParser.LPAR:
        case OParser.LBRAK:
        case OParser.LCURL:
        case OParser.LT:
        case OParser.LTCOLONGT:
        case OParser.MUTABLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2035;
            this.collection_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collection_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_collection_literal;
    return this;
}

Collection_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collection_literalContext.prototype.constructor = Collection_literalContext;

Collection_literalContext.prototype.range_literal = function() {
    return this.getTypedRuleContext(Range_literalContext,0);
};

Collection_literalContext.prototype.list_literal = function() {
    return this.getTypedRuleContext(List_literalContext,0);
};

Collection_literalContext.prototype.set_literal = function() {
    return this.getTypedRuleContext(Set_literalContext,0);
};

Collection_literalContext.prototype.dict_literal = function() {
    return this.getTypedRuleContext(Dict_literalContext,0);
};

Collection_literalContext.prototype.document_literal = function() {
    return this.getTypedRuleContext(Document_literalContext,0);
};

Collection_literalContext.prototype.tuple_literal = function() {
    return this.getTypedRuleContext(Tuple_literalContext,0);
};

Collection_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCollection_literal(this);
	}
};

Collection_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCollection_literal(this);
	}
};




OParser.Collection_literalContext = Collection_literalContext;

OParser.prototype.collection_literal = function() {

    var localctx = new Collection_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, OParser.RULE_collection_literal);
    try {
        this.state = 2044;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2038;
            this.range_literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2039;
            this.list_literal();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2040;
            this.set_literal();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2041;
            this.dict_literal();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2042;
            this.document_literal();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2043;
            this.tuple_literal();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Tuple_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_tuple_literal;
    return this;
}

Tuple_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tuple_literalContext.prototype.constructor = Tuple_literalContext;

Tuple_literalContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Tuple_literalContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Tuple_literalContext.prototype.MUTABLE = function() {
    return this.getToken(OParser.MUTABLE, 0);
};

Tuple_literalContext.prototype.expression_tuple = function() {
    return this.getTypedRuleContext(Expression_tupleContext,0);
};

Tuple_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterTuple_literal(this);
	}
};

Tuple_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitTuple_literal(this);
	}
};




OParser.Tuple_literalContext = Tuple_literalContext;

OParser.prototype.tuple_literal = function() {

    var localctx = new Tuple_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, OParser.RULE_tuple_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2047;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.MUTABLE) {
            this.state = 2046;
            this.match(OParser.MUTABLE);
        }

        this.state = 2049;
        this.match(OParser.LPAR);
        this.state = 2051;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTGT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (OParser.EXECUTE - 98)) | (1 << (OParser.FETCH - 98)) | (1 << (OParser.FILTERED - 98)) | (1 << (OParser.MUTABLE - 98)) | (1 << (OParser.NULL - 98)))) !== 0) || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (OParser.READ - 133)) | (1 << (OParser.SELF - 133)) | (1 << (OParser.SORTED - 133)) | (1 << (OParser.THIS - 133)) | (1 << (OParser.BOOLEAN_LITERAL - 133)) | (1 << (OParser.CHAR_LITERAL - 133)) | (1 << (OParser.MIN_INTEGER - 133)) | (1 << (OParser.MAX_INTEGER - 133)) | (1 << (OParser.SYMBOL_IDENTIFIER - 133)) | (1 << (OParser.TYPE_IDENTIFIER - 133)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (OParser.VARIABLE_IDENTIFIER - 165)) | (1 << (OParser.TEXT_LITERAL - 165)) | (1 << (OParser.UUID_LITERAL - 165)) | (1 << (OParser.INTEGER_LITERAL - 165)) | (1 << (OParser.HEXA_LITERAL - 165)) | (1 << (OParser.DECIMAL_LITERAL - 165)) | (1 << (OParser.DATETIME_LITERAL - 165)) | (1 << (OParser.TIME_LITERAL - 165)) | (1 << (OParser.DATE_LITERAL - 165)) | (1 << (OParser.PERIOD_LITERAL - 165)) | (1 << (OParser.VERSION_LITERAL - 165)))) !== 0)) {
            this.state = 2050;
            this.expression_tuple();
        }

        this.state = 2053;
        this.match(OParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dict_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_dict_literal;
    return this;
}

Dict_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dict_literalContext.prototype.constructor = Dict_literalContext;

Dict_literalContext.prototype.LTCOLONGT = function() {
    return this.getToken(OParser.LTCOLONGT, 0);
};

Dict_literalContext.prototype.MUTABLE = function() {
    return this.getToken(OParser.MUTABLE, 0);
};

Dict_literalContext.prototype.LT = function() {
    return this.getToken(OParser.LT, 0);
};

Dict_literalContext.prototype.dict_entry_list = function() {
    return this.getTypedRuleContext(Dict_entry_listContext,0);
};

Dict_literalContext.prototype.GT = function() {
    return this.getToken(OParser.GT, 0);
};

Dict_literalContext.prototype.COLON = function() {
    return this.getToken(OParser.COLON, 0);
};

Dict_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDict_literal(this);
	}
};

Dict_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDict_literal(this);
	}
};




OParser.Dict_literalContext = Dict_literalContext;

OParser.prototype.dict_literal = function() {

    var localctx = new Dict_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, OParser.RULE_dict_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2056;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.MUTABLE) {
            this.state = 2055;
            this.match(OParser.MUTABLE);
        }

        this.state = 2066;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2058;
            this.match(OParser.LT);
            this.state = 2059;
            this.dict_entry_list();
            this.state = 2060;
            this.match(OParser.GT);
            break;

        case 2:
            this.state = 2062;
            this.match(OParser.LTCOLONGT);
            break;

        case 3:
            this.state = 2063;
            this.match(OParser.LT);
            this.state = 2064;
            this.match(OParser.COLON);
            this.state = 2065;
            this.match(OParser.GT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Document_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_document_literal;
    return this;
}

Document_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Document_literalContext.prototype.constructor = Document_literalContext;

Document_literalContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

Document_literalContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

Document_literalContext.prototype.dict_entry_list = function() {
    return this.getTypedRuleContext(Dict_entry_listContext,0);
};

Document_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDocument_literal(this);
	}
};

Document_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDocument_literal(this);
	}
};




OParser.Document_literalContext = Document_literalContext;

OParser.prototype.document_literal = function() {

    var localctx = new Document_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, OParser.RULE_document_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2068;
        this.match(OParser.LCURL);
        this.state = 2070;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (OParser.SYMBOL_IDENTIFIER - 163)) | (1 << (OParser.TYPE_IDENTIFIER - 163)) | (1 << (OParser.VARIABLE_IDENTIFIER - 163)) | (1 << (OParser.TEXT_LITERAL - 163)))) !== 0)) {
            this.state = 2069;
            this.dict_entry_list();
        }

        this.state = 2072;
        this.match(OParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_tupleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_expression_tuple;
    return this;
}

Expression_tupleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_tupleContext.prototype.constructor = Expression_tupleContext;

Expression_tupleContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Expression_tupleContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.COMMA);
    } else {
        return this.getToken(OParser.COMMA, i);
    }
};


Expression_tupleContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterExpression_tuple(this);
	}
};

Expression_tupleContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitExpression_tuple(this);
	}
};




OParser.Expression_tupleContext = Expression_tupleContext;

OParser.prototype.expression_tuple = function() {

    var localctx = new Expression_tupleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, OParser.RULE_expression_tuple);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2074;
        this.expression(0);
        this.state = 2075;
        this.match(OParser.COMMA);
        this.state = 2084;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTGT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (OParser.EXECUTE - 98)) | (1 << (OParser.FETCH - 98)) | (1 << (OParser.FILTERED - 98)) | (1 << (OParser.MUTABLE - 98)) | (1 << (OParser.NULL - 98)))) !== 0) || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (OParser.READ - 133)) | (1 << (OParser.SELF - 133)) | (1 << (OParser.SORTED - 133)) | (1 << (OParser.THIS - 133)) | (1 << (OParser.BOOLEAN_LITERAL - 133)) | (1 << (OParser.CHAR_LITERAL - 133)) | (1 << (OParser.MIN_INTEGER - 133)) | (1 << (OParser.MAX_INTEGER - 133)) | (1 << (OParser.SYMBOL_IDENTIFIER - 133)) | (1 << (OParser.TYPE_IDENTIFIER - 133)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (OParser.VARIABLE_IDENTIFIER - 165)) | (1 << (OParser.TEXT_LITERAL - 165)) | (1 << (OParser.UUID_LITERAL - 165)) | (1 << (OParser.INTEGER_LITERAL - 165)) | (1 << (OParser.HEXA_LITERAL - 165)) | (1 << (OParser.DECIMAL_LITERAL - 165)) | (1 << (OParser.DATETIME_LITERAL - 165)) | (1 << (OParser.TIME_LITERAL - 165)) | (1 << (OParser.DATE_LITERAL - 165)) | (1 << (OParser.PERIOD_LITERAL - 165)) | (1 << (OParser.VERSION_LITERAL - 165)))) !== 0)) {
            this.state = 2076;
            this.expression(0);
            this.state = 2081;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===OParser.COMMA) {
                this.state = 2077;
                this.match(OParser.COMMA);
                this.state = 2078;
                this.expression(0);
                this.state = 2083;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dict_entry_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_dict_entry_list;
    return this;
}

Dict_entry_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dict_entry_listContext.prototype.constructor = Dict_entry_listContext;

Dict_entry_listContext.prototype.dict_entry = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dict_entryContext);
    } else {
        return this.getTypedRuleContext(Dict_entryContext,i);
    }
};

Dict_entry_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.COMMA);
    } else {
        return this.getToken(OParser.COMMA, i);
    }
};


Dict_entry_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDict_entry_list(this);
	}
};

Dict_entry_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDict_entry_list(this);
	}
};




OParser.Dict_entry_listContext = Dict_entry_listContext;

OParser.prototype.dict_entry_list = function() {

    var localctx = new Dict_entry_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, OParser.RULE_dict_entry_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2086;
        this.dict_entry();
        this.state = 2091;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.COMMA) {
            this.state = 2087;
            this.match(OParser.COMMA);
            this.state = 2088;
            this.dict_entry();
            this.state = 2093;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dict_entryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_dict_entry;
    this.key = null; // Dict_keyContext
    this.value = null; // ExpressionContext
    return this;
}

Dict_entryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dict_entryContext.prototype.constructor = Dict_entryContext;

Dict_entryContext.prototype.COLON = function() {
    return this.getToken(OParser.COLON, 0);
};

Dict_entryContext.prototype.dict_key = function() {
    return this.getTypedRuleContext(Dict_keyContext,0);
};

Dict_entryContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Dict_entryContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDict_entry(this);
	}
};

Dict_entryContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDict_entry(this);
	}
};




OParser.Dict_entryContext = Dict_entryContext;

OParser.prototype.dict_entry = function() {

    var localctx = new Dict_entryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, OParser.RULE_dict_entry);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2094;
        localctx.key = this.dict_key();
        this.state = 2095;
        this.match(OParser.COLON);
        this.state = 2096;
        localctx.value = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dict_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_dict_key;
    return this;
}

Dict_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dict_keyContext.prototype.constructor = Dict_keyContext;


 
Dict_keyContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DictKeyIdentifierContext(parser, ctx) {
	Dict_keyContext.call(this, parser);
    this.name = null; // Any_identifierContext;
    Dict_keyContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DictKeyIdentifierContext.prototype = Object.create(Dict_keyContext.prototype);
DictKeyIdentifierContext.prototype.constructor = DictKeyIdentifierContext;

OParser.DictKeyIdentifierContext = DictKeyIdentifierContext;

DictKeyIdentifierContext.prototype.any_identifier = function() {
    return this.getTypedRuleContext(Any_identifierContext,0);
};
DictKeyIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDictKeyIdentifier(this);
	}
};

DictKeyIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDictKeyIdentifier(this);
	}
};


function DictKeyTextContext(parser, ctx) {
	Dict_keyContext.call(this, parser);
    this.name = null; // Token;
    Dict_keyContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DictKeyTextContext.prototype = Object.create(Dict_keyContext.prototype);
DictKeyTextContext.prototype.constructor = DictKeyTextContext;

OParser.DictKeyTextContext = DictKeyTextContext;

DictKeyTextContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(OParser.TEXT_LITERAL, 0);
};
DictKeyTextContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDictKeyText(this);
	}
};

DictKeyTextContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDictKeyText(this);
	}
};



OParser.Dict_keyContext = Dict_keyContext;

OParser.prototype.dict_key = function() {

    var localctx = new Dict_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, OParser.RULE_dict_key);
    try {
        this.state = 2100;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.SYMBOL_IDENTIFIER:
        case OParser.TYPE_IDENTIFIER:
        case OParser.VARIABLE_IDENTIFIER:
            localctx = new DictKeyIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2098;
            localctx.name = this.any_identifier();
            break;
        case OParser.TEXT_LITERAL:
            localctx = new DictKeyTextContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2099;
            localctx.name = this.match(OParser.TEXT_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Slice_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_slice_arguments;
    return this;
}

Slice_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Slice_argumentsContext.prototype.constructor = Slice_argumentsContext;


 
Slice_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SliceFirstAndLastContext(parser, ctx) {
	Slice_argumentsContext.call(this, parser);
    this.first = null; // ExpressionContext;
    this.last = null; // ExpressionContext;
    Slice_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceFirstAndLastContext.prototype = Object.create(Slice_argumentsContext.prototype);
SliceFirstAndLastContext.prototype.constructor = SliceFirstAndLastContext;

OParser.SliceFirstAndLastContext = SliceFirstAndLastContext;

SliceFirstAndLastContext.prototype.COLON = function() {
    return this.getToken(OParser.COLON, 0);
};

SliceFirstAndLastContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
SliceFirstAndLastContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSliceFirstAndLast(this);
	}
};

SliceFirstAndLastContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSliceFirstAndLast(this);
	}
};


function SliceLastOnlyContext(parser, ctx) {
	Slice_argumentsContext.call(this, parser);
    this.last = null; // ExpressionContext;
    Slice_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceLastOnlyContext.prototype = Object.create(Slice_argumentsContext.prototype);
SliceLastOnlyContext.prototype.constructor = SliceLastOnlyContext;

OParser.SliceLastOnlyContext = SliceLastOnlyContext;

SliceLastOnlyContext.prototype.COLON = function() {
    return this.getToken(OParser.COLON, 0);
};

SliceLastOnlyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SliceLastOnlyContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSliceLastOnly(this);
	}
};

SliceLastOnlyContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSliceLastOnly(this);
	}
};


function SliceFirstOnlyContext(parser, ctx) {
	Slice_argumentsContext.call(this, parser);
    this.first = null; // ExpressionContext;
    Slice_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceFirstOnlyContext.prototype = Object.create(Slice_argumentsContext.prototype);
SliceFirstOnlyContext.prototype.constructor = SliceFirstOnlyContext;

OParser.SliceFirstOnlyContext = SliceFirstOnlyContext;

SliceFirstOnlyContext.prototype.COLON = function() {
    return this.getToken(OParser.COLON, 0);
};

SliceFirstOnlyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SliceFirstOnlyContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSliceFirstOnly(this);
	}
};

SliceFirstOnlyContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSliceFirstOnly(this);
	}
};



OParser.Slice_argumentsContext = Slice_argumentsContext;

OParser.prototype.slice_arguments = function() {

    var localctx = new Slice_argumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, OParser.RULE_slice_arguments);
    try {
        this.state = 2111;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SliceFirstAndLastContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2102;
            localctx.first = this.expression(0);
            this.state = 2103;
            this.match(OParser.COLON);
            this.state = 2104;
            localctx.last = this.expression(0);
            break;

        case 2:
            localctx = new SliceFirstOnlyContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2106;
            localctx.first = this.expression(0);
            this.state = 2107;
            this.match(OParser.COLON);
            break;

        case 3:
            localctx = new SliceLastOnlyContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2109;
            this.match(OParser.COLON);
            this.state = 2110;
            localctx.last = this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assign_variable_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_assign_variable_statement;
    return this;
}

Assign_variable_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assign_variable_statementContext.prototype.constructor = Assign_variable_statementContext;

Assign_variable_statementContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Assign_variable_statementContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Assign_variable_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Assign_variable_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAssign_variable_statement(this);
	}
};

Assign_variable_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAssign_variable_statement(this);
	}
};




OParser.Assign_variable_statementContext = Assign_variable_statementContext;

OParser.prototype.assign_variable_statement = function() {

    var localctx = new Assign_variable_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, OParser.RULE_assign_variable_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2113;
        this.variable_identifier();
        this.state = 2114;
        this.assign();
        this.state = 2115;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assignable_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_assignable_instance;
    return this;
}

Assignable_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assignable_instanceContext.prototype.constructor = Assignable_instanceContext;


 
Assignable_instanceContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ChildInstanceContext(parser, ctx) {
	Assignable_instanceContext.call(this, parser);
    Assignable_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ChildInstanceContext.prototype = Object.create(Assignable_instanceContext.prototype);
ChildInstanceContext.prototype.constructor = ChildInstanceContext;

OParser.ChildInstanceContext = ChildInstanceContext;

ChildInstanceContext.prototype.assignable_instance = function() {
    return this.getTypedRuleContext(Assignable_instanceContext,0);
};

ChildInstanceContext.prototype.child_instance = function() {
    return this.getTypedRuleContext(Child_instanceContext,0);
};
ChildInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterChildInstance(this);
	}
};

ChildInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitChildInstance(this);
	}
};


function RootInstanceContext(parser, ctx) {
	Assignable_instanceContext.call(this, parser);
    Assignable_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RootInstanceContext.prototype = Object.create(Assignable_instanceContext.prototype);
RootInstanceContext.prototype.constructor = RootInstanceContext;

OParser.RootInstanceContext = RootInstanceContext;

RootInstanceContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
RootInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterRootInstance(this);
	}
};

RootInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitRootInstance(this);
	}
};



OParser.prototype.assignable_instance = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Assignable_instanceContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 300;
    this.enterRecursionRule(localctx, 300, OParser.RULE_assignable_instance, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new RootInstanceContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2118;
        this.variable_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2124;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,183,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ChildInstanceContext(this, new Assignable_instanceContext(this, _parentctx, _parentState));
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_assignable_instance);
                this.state = 2120;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2121;
                this.child_instance(); 
            }
            this.state = 2126;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,183,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Is_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_is_expression;
    return this;
}

Is_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Is_expressionContext.prototype.constructor = Is_expressionContext;


 
Is_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function IsATypeExpressionContext(parser, ctx) {
	Is_expressionContext.call(this, parser);
    Is_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsATypeExpressionContext.prototype = Object.create(Is_expressionContext.prototype);
IsATypeExpressionContext.prototype.constructor = IsATypeExpressionContext;

OParser.IsATypeExpressionContext = IsATypeExpressionContext;

IsATypeExpressionContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(OParser.VARIABLE_IDENTIFIER, 0);
};

IsATypeExpressionContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};
IsATypeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterIsATypeExpression(this);
	}
};

IsATypeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitIsATypeExpression(this);
	}
};


function IsOtherExpressionContext(parser, ctx) {
	Is_expressionContext.call(this, parser);
    Is_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsOtherExpressionContext.prototype = Object.create(Is_expressionContext.prototype);
IsOtherExpressionContext.prototype.constructor = IsOtherExpressionContext;

OParser.IsOtherExpressionContext = IsOtherExpressionContext;

IsOtherExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
IsOtherExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterIsOtherExpression(this);
	}
};

IsOtherExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitIsOtherExpression(this);
	}
};



OParser.Is_expressionContext = Is_expressionContext;

OParser.prototype.is_expression = function() {

    var localctx = new Is_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, OParser.RULE_is_expression);
    try {
        this.state = 2131;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
        switch(la_) {
        case 1:
            localctx = new IsATypeExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2127;
            if (!( this.willBeAOrAn())) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.willBeAOrAn()");
            }
            this.state = 2128;
            this.match(OParser.VARIABLE_IDENTIFIER);
            this.state = 2129;
            this.category_or_any_type();
            break;

        case 2:
            localctx = new IsOtherExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2130;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Arrow_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_arrow_expression;
    return this;
}

Arrow_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Arrow_expressionContext.prototype.constructor = Arrow_expressionContext;


 
Arrow_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ArrowExpressionBodyContext(parser, ctx) {
	Arrow_expressionContext.call(this, parser);
    Arrow_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrowExpressionBodyContext.prototype = Object.create(Arrow_expressionContext.prototype);
ArrowExpressionBodyContext.prototype.constructor = ArrowExpressionBodyContext;

OParser.ArrowExpressionBodyContext = ArrowExpressionBodyContext;

ArrowExpressionBodyContext.prototype.arrow_prefix = function() {
    return this.getTypedRuleContext(Arrow_prefixContext,0);
};

ArrowExpressionBodyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ArrowExpressionBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterArrowExpressionBody(this);
	}
};

ArrowExpressionBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitArrowExpressionBody(this);
	}
};


function ArrowStatementsBodyContext(parser, ctx) {
	Arrow_expressionContext.call(this, parser);
    Arrow_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrowStatementsBodyContext.prototype = Object.create(Arrow_expressionContext.prototype);
ArrowStatementsBodyContext.prototype.constructor = ArrowStatementsBodyContext;

OParser.ArrowStatementsBodyContext = ArrowStatementsBodyContext;

ArrowStatementsBodyContext.prototype.arrow_prefix = function() {
    return this.getTypedRuleContext(Arrow_prefixContext,0);
};

ArrowStatementsBodyContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

ArrowStatementsBodyContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

ArrowStatementsBodyContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};
ArrowStatementsBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterArrowStatementsBody(this);
	}
};

ArrowStatementsBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitArrowStatementsBody(this);
	}
};



OParser.Arrow_expressionContext = Arrow_expressionContext;

OParser.prototype.arrow_expression = function() {

    var localctx = new Arrow_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, OParser.RULE_arrow_expression);
    try {
        this.state = 2141;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ArrowExpressionBodyContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2133;
            this.arrow_prefix();
            this.state = 2134;
            this.expression(0);
            break;

        case 2:
            localctx = new ArrowStatementsBodyContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2136;
            this.arrow_prefix();
            this.state = 2137;
            this.match(OParser.LCURL);
            this.state = 2138;
            this.statement_list();
            this.state = 2139;
            this.match(OParser.RCURL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Arrow_prefixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_arrow_prefix;
    this.s1 = null; // Ws_plusContext
    this.s2 = null; // Ws_plusContext
    return this;
}

Arrow_prefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Arrow_prefixContext.prototype.constructor = Arrow_prefixContext;

Arrow_prefixContext.prototype.arrow_args = function() {
    return this.getTypedRuleContext(Arrow_argsContext,0);
};

Arrow_prefixContext.prototype.EGT = function() {
    return this.getToken(OParser.EGT, 0);
};

Arrow_prefixContext.prototype.ws_plus = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ws_plusContext);
    } else {
        return this.getTypedRuleContext(Ws_plusContext,i);
    }
};

Arrow_prefixContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterArrow_prefix(this);
	}
};

Arrow_prefixContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitArrow_prefix(this);
	}
};




OParser.Arrow_prefixContext = Arrow_prefixContext;

OParser.prototype.arrow_prefix = function() {

    var localctx = new Arrow_prefixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, OParser.RULE_arrow_prefix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2143;
        this.arrow_args();
        this.state = 2144;
        localctx.s1 = this.ws_plus();
        this.state = 2145;
        this.match(OParser.EGT);
        this.state = 2146;
        localctx.s2 = this.ws_plus();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Arrow_argsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_arrow_args;
    return this;
}

Arrow_argsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Arrow_argsContext.prototype.constructor = Arrow_argsContext;


 
Arrow_argsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ArrowListArgContext(parser, ctx) {
	Arrow_argsContext.call(this, parser);
    Arrow_argsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrowListArgContext.prototype = Object.create(Arrow_argsContext.prototype);
ArrowListArgContext.prototype.constructor = ArrowListArgContext;

OParser.ArrowListArgContext = ArrowListArgContext;

ArrowListArgContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

ArrowListArgContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

ArrowListArgContext.prototype.variable_identifier_list = function() {
    return this.getTypedRuleContext(Variable_identifier_listContext,0);
};
ArrowListArgContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterArrowListArg(this);
	}
};

ArrowListArgContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitArrowListArg(this);
	}
};


function ArrowSingleArgContext(parser, ctx) {
	Arrow_argsContext.call(this, parser);
    Arrow_argsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrowSingleArgContext.prototype = Object.create(Arrow_argsContext.prototype);
ArrowSingleArgContext.prototype.constructor = ArrowSingleArgContext;

OParser.ArrowSingleArgContext = ArrowSingleArgContext;

ArrowSingleArgContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
ArrowSingleArgContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterArrowSingleArg(this);
	}
};

ArrowSingleArgContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitArrowSingleArg(this);
	}
};



OParser.Arrow_argsContext = Arrow_argsContext;

OParser.prototype.arrow_args = function() {

    var localctx = new Arrow_argsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, OParser.RULE_arrow_args);
    var _la = 0; // Token type
    try {
        this.state = 2154;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.VARIABLE_IDENTIFIER:
            localctx = new ArrowSingleArgContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2148;
            this.variable_identifier();
            break;
        case OParser.LPAR:
            localctx = new ArrowListArgContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2149;
            this.match(OParser.LPAR);
            this.state = 2151;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===OParser.VARIABLE_IDENTIFIER) {
                this.state = 2150;
                this.variable_identifier_list();
            }

            this.state = 2153;
            this.match(OParser.RPAR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sorted_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_sorted_key;
    return this;
}

Sorted_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sorted_keyContext.prototype.constructor = Sorted_keyContext;

Sorted_keyContext.prototype.instance_expression = function() {
    return this.getTypedRuleContext(Instance_expressionContext,0);
};

Sorted_keyContext.prototype.arrow_expression = function() {
    return this.getTypedRuleContext(Arrow_expressionContext,0);
};

Sorted_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSorted_key(this);
	}
};

Sorted_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSorted_key(this);
	}
};




OParser.Sorted_keyContext = Sorted_keyContext;

OParser.prototype.sorted_key = function() {

    var localctx = new Sorted_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, OParser.RULE_sorted_key);
    try {
        this.state = 2158;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2156;
            this.instance_expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2157;
            this.arrow_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Read_all_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_read_all_expression;
    this.source = null; // ExpressionContext
    return this;
}

Read_all_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Read_all_expressionContext.prototype.constructor = Read_all_expressionContext;

Read_all_expressionContext.prototype.READ = function() {
    return this.getToken(OParser.READ, 0);
};

Read_all_expressionContext.prototype.ALL = function() {
    return this.getToken(OParser.ALL, 0);
};

Read_all_expressionContext.prototype.FROM = function() {
    return this.getToken(OParser.FROM, 0);
};

Read_all_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Read_all_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterRead_all_expression(this);
	}
};

Read_all_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitRead_all_expression(this);
	}
};




OParser.Read_all_expressionContext = Read_all_expressionContext;

OParser.prototype.read_all_expression = function() {

    var localctx = new Read_all_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, OParser.RULE_read_all_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2160;
        this.match(OParser.READ);
        this.state = 2161;
        this.match(OParser.ALL);
        this.state = 2162;
        this.match(OParser.FROM);
        this.state = 2163;
        localctx.source = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Read_one_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_read_one_expression;
    this.source = null; // ExpressionContext
    return this;
}

Read_one_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Read_one_expressionContext.prototype.constructor = Read_one_expressionContext;

Read_one_expressionContext.prototype.READ = function() {
    return this.getToken(OParser.READ, 0);
};

Read_one_expressionContext.prototype.ONE = function() {
    return this.getToken(OParser.ONE, 0);
};

Read_one_expressionContext.prototype.FROM = function() {
    return this.getToken(OParser.FROM, 0);
};

Read_one_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Read_one_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterRead_one_expression(this);
	}
};

Read_one_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitRead_one_expression(this);
	}
};




OParser.Read_one_expressionContext = Read_one_expressionContext;

OParser.prototype.read_one_expression = function() {

    var localctx = new Read_one_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, OParser.RULE_read_one_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2165;
        this.match(OParser.READ);
        this.state = 2166;
        this.match(OParser.ONE);
        this.state = 2167;
        this.match(OParser.FROM);
        this.state = 2168;
        localctx.source = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_by_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_order_by_list;
    return this;
}

Order_by_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_by_listContext.prototype.constructor = Order_by_listContext;

Order_by_listContext.prototype.order_by = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Order_byContext);
    } else {
        return this.getTypedRuleContext(Order_byContext,i);
    }
};

Order_by_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.COMMA);
    } else {
        return this.getToken(OParser.COMMA, i);
    }
};


Order_by_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterOrder_by_list(this);
	}
};

Order_by_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitOrder_by_list(this);
	}
};




OParser.Order_by_listContext = Order_by_listContext;

OParser.prototype.order_by_list = function() {

    var localctx = new Order_by_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, OParser.RULE_order_by_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2170;
        this.order_by();
        this.state = 2175;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.COMMA) {
            this.state = 2171;
            this.match(OParser.COMMA);
            this.state = 2172;
            this.order_by();
            this.state = 2177;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_byContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_order_by;
    return this;
}

Order_byContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_byContext.prototype.constructor = Order_byContext;

Order_byContext.prototype.variable_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_identifierContext);
    } else {
        return this.getTypedRuleContext(Variable_identifierContext,i);
    }
};

Order_byContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.DOT);
    } else {
        return this.getToken(OParser.DOT, i);
    }
};


Order_byContext.prototype.ASC = function() {
    return this.getToken(OParser.ASC, 0);
};

Order_byContext.prototype.DESC = function() {
    return this.getToken(OParser.DESC, 0);
};

Order_byContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterOrder_by(this);
	}
};

Order_byContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitOrder_by(this);
	}
};




OParser.Order_byContext = Order_byContext;

OParser.prototype.order_by = function() {

    var localctx = new Order_byContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, OParser.RULE_order_by);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2178;
        this.variable_identifier();
        this.state = 2183;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.DOT) {
            this.state = 2179;
            this.match(OParser.DOT);
            this.state = 2180;
            this.variable_identifier();
            this.state = 2185;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2187;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.ASC || _la===OParser.DESC) {
            this.state = 2186;
            _la = this._input.LA(1);
            if(!(_la===OParser.ASC || _la===OParser.DESC)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_operator;
    return this;
}

OperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorContext.prototype.constructor = OperatorContext;


 
OperatorContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function OperatorPlusContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorPlusContext.prototype = Object.create(OperatorContext.prototype);
OperatorPlusContext.prototype.constructor = OperatorPlusContext;

OParser.OperatorPlusContext = OperatorPlusContext;

OperatorPlusContext.prototype.PLUS = function() {
    return this.getToken(OParser.PLUS, 0);
};
OperatorPlusContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterOperatorPlus(this);
	}
};

OperatorPlusContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitOperatorPlus(this);
	}
};


function OperatorDivideContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorDivideContext.prototype = Object.create(OperatorContext.prototype);
OperatorDivideContext.prototype.constructor = OperatorDivideContext;

OParser.OperatorDivideContext = OperatorDivideContext;

OperatorDivideContext.prototype.divide = function() {
    return this.getTypedRuleContext(DivideContext,0);
};
OperatorDivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterOperatorDivide(this);
	}
};

OperatorDivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitOperatorDivide(this);
	}
};


function OperatorIDivideContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorIDivideContext.prototype = Object.create(OperatorContext.prototype);
OperatorIDivideContext.prototype.constructor = OperatorIDivideContext;

OParser.OperatorIDivideContext = OperatorIDivideContext;

OperatorIDivideContext.prototype.idivide = function() {
    return this.getTypedRuleContext(IdivideContext,0);
};
OperatorIDivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterOperatorIDivide(this);
	}
};

OperatorIDivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitOperatorIDivide(this);
	}
};


function OperatorMultiplyContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorMultiplyContext.prototype = Object.create(OperatorContext.prototype);
OperatorMultiplyContext.prototype.constructor = OperatorMultiplyContext;

OParser.OperatorMultiplyContext = OperatorMultiplyContext;

OperatorMultiplyContext.prototype.multiply = function() {
    return this.getTypedRuleContext(MultiplyContext,0);
};
OperatorMultiplyContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterOperatorMultiply(this);
	}
};

OperatorMultiplyContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitOperatorMultiply(this);
	}
};


function OperatorMinusContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorMinusContext.prototype = Object.create(OperatorContext.prototype);
OperatorMinusContext.prototype.constructor = OperatorMinusContext;

OParser.OperatorMinusContext = OperatorMinusContext;

OperatorMinusContext.prototype.MINUS = function() {
    return this.getToken(OParser.MINUS, 0);
};
OperatorMinusContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterOperatorMinus(this);
	}
};

OperatorMinusContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitOperatorMinus(this);
	}
};


function OperatorModuloContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorModuloContext.prototype = Object.create(OperatorContext.prototype);
OperatorModuloContext.prototype.constructor = OperatorModuloContext;

OParser.OperatorModuloContext = OperatorModuloContext;

OperatorModuloContext.prototype.modulo = function() {
    return this.getTypedRuleContext(ModuloContext,0);
};
OperatorModuloContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterOperatorModulo(this);
	}
};

OperatorModuloContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitOperatorModulo(this);
	}
};



OParser.OperatorContext = OperatorContext;

OParser.prototype.operator = function() {

    var localctx = new OperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, OParser.RULE_operator);
    try {
        this.state = 2195;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.PLUS:
            localctx = new OperatorPlusContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2189;
            this.match(OParser.PLUS);
            break;
        case OParser.MINUS:
            localctx = new OperatorMinusContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2190;
            this.match(OParser.MINUS);
            break;
        case OParser.STAR:
            localctx = new OperatorMultiplyContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2191;
            this.multiply();
            break;
        case OParser.SLASH:
            localctx = new OperatorDivideContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2192;
            this.divide();
            break;
        case OParser.BSLASH:
            localctx = new OperatorIDivideContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2193;
            this.idivide();
            break;
        case OParser.PERCENT:
        case OParser.MODULO:
            localctx = new OperatorModuloContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 2194;
            this.modulo();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_keyword;
    return this;
}

KeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordContext.prototype.constructor = KeywordContext;

KeywordContext.prototype.JAVA = function() {
    return this.getToken(OParser.JAVA, 0);
};

KeywordContext.prototype.CSHARP = function() {
    return this.getToken(OParser.CSHARP, 0);
};

KeywordContext.prototype.PYTHON2 = function() {
    return this.getToken(OParser.PYTHON2, 0);
};

KeywordContext.prototype.PYTHON3 = function() {
    return this.getToken(OParser.PYTHON3, 0);
};

KeywordContext.prototype.JAVASCRIPT = function() {
    return this.getToken(OParser.JAVASCRIPT, 0);
};

KeywordContext.prototype.SWIFT = function() {
    return this.getToken(OParser.SWIFT, 0);
};

KeywordContext.prototype.BOOLEAN = function() {
    return this.getToken(OParser.BOOLEAN, 0);
};

KeywordContext.prototype.CHARACTER = function() {
    return this.getToken(OParser.CHARACTER, 0);
};

KeywordContext.prototype.TEXT = function() {
    return this.getToken(OParser.TEXT, 0);
};

KeywordContext.prototype.INTEGER = function() {
    return this.getToken(OParser.INTEGER, 0);
};

KeywordContext.prototype.DECIMAL = function() {
    return this.getToken(OParser.DECIMAL, 0);
};

KeywordContext.prototype.DATE = function() {
    return this.getToken(OParser.DATE, 0);
};

KeywordContext.prototype.TIME = function() {
    return this.getToken(OParser.TIME, 0);
};

KeywordContext.prototype.DATETIME = function() {
    return this.getToken(OParser.DATETIME, 0);
};

KeywordContext.prototype.PERIOD = function() {
    return this.getToken(OParser.PERIOD, 0);
};

KeywordContext.prototype.VERSION = function() {
    return this.getToken(OParser.VERSION, 0);
};

KeywordContext.prototype.METHOD_T = function() {
    return this.getToken(OParser.METHOD_T, 0);
};

KeywordContext.prototype.CODE = function() {
    return this.getToken(OParser.CODE, 0);
};

KeywordContext.prototype.DOCUMENT = function() {
    return this.getToken(OParser.DOCUMENT, 0);
};

KeywordContext.prototype.BLOB = function() {
    return this.getToken(OParser.BLOB, 0);
};

KeywordContext.prototype.IMAGE = function() {
    return this.getToken(OParser.IMAGE, 0);
};

KeywordContext.prototype.UUID = function() {
    return this.getToken(OParser.UUID, 0);
};

KeywordContext.prototype.ITERATOR = function() {
    return this.getToken(OParser.ITERATOR, 0);
};

KeywordContext.prototype.CURSOR = function() {
    return this.getToken(OParser.CURSOR, 0);
};

KeywordContext.prototype.HTML = function() {
    return this.getToken(OParser.HTML, 0);
};

KeywordContext.prototype.ABSTRACT = function() {
    return this.getToken(OParser.ABSTRACT, 0);
};

KeywordContext.prototype.ALL = function() {
    return this.getToken(OParser.ALL, 0);
};

KeywordContext.prototype.ALWAYS = function() {
    return this.getToken(OParser.ALWAYS, 0);
};

KeywordContext.prototype.AND = function() {
    return this.getToken(OParser.AND, 0);
};

KeywordContext.prototype.ANY = function() {
    return this.getToken(OParser.ANY, 0);
};

KeywordContext.prototype.AS = function() {
    return this.getToken(OParser.AS, 0);
};

KeywordContext.prototype.ASC = function() {
    return this.getToken(OParser.ASC, 0);
};

KeywordContext.prototype.ATTR = function() {
    return this.getToken(OParser.ATTR, 0);
};

KeywordContext.prototype.ATTRIBUTE = function() {
    return this.getToken(OParser.ATTRIBUTE, 0);
};

KeywordContext.prototype.ATTRIBUTES = function() {
    return this.getToken(OParser.ATTRIBUTES, 0);
};

KeywordContext.prototype.BINDINGS = function() {
    return this.getToken(OParser.BINDINGS, 0);
};

KeywordContext.prototype.BREAK = function() {
    return this.getToken(OParser.BREAK, 0);
};

KeywordContext.prototype.BY = function() {
    return this.getToken(OParser.BY, 0);
};

KeywordContext.prototype.CASE = function() {
    return this.getToken(OParser.CASE, 0);
};

KeywordContext.prototype.CATCH = function() {
    return this.getToken(OParser.CATCH, 0);
};

KeywordContext.prototype.CATEGORY = function() {
    return this.getToken(OParser.CATEGORY, 0);
};

KeywordContext.prototype.CLASS = function() {
    return this.getToken(OParser.CLASS, 0);
};

KeywordContext.prototype.CLOSE = function() {
    return this.getToken(OParser.CLOSE, 0);
};

KeywordContext.prototype.CONTAINS = function() {
    return this.getToken(OParser.CONTAINS, 0);
};

KeywordContext.prototype.DEF = function() {
    return this.getToken(OParser.DEF, 0);
};

KeywordContext.prototype.DEFAULT = function() {
    return this.getToken(OParser.DEFAULT, 0);
};

KeywordContext.prototype.DEFINE = function() {
    return this.getToken(OParser.DEFINE, 0);
};

KeywordContext.prototype.DELETE = function() {
    return this.getToken(OParser.DELETE, 0);
};

KeywordContext.prototype.DESC = function() {
    return this.getToken(OParser.DESC, 0);
};

KeywordContext.prototype.DO = function() {
    return this.getToken(OParser.DO, 0);
};

KeywordContext.prototype.DOING = function() {
    return this.getToken(OParser.DOING, 0);
};

KeywordContext.prototype.EACH = function() {
    return this.getToken(OParser.EACH, 0);
};

KeywordContext.prototype.ELSE = function() {
    return this.getToken(OParser.ELSE, 0);
};

KeywordContext.prototype.ENUM = function() {
    return this.getToken(OParser.ENUM, 0);
};

KeywordContext.prototype.ENUMERATED = function() {
    return this.getToken(OParser.ENUMERATED, 0);
};

KeywordContext.prototype.EXCEPT = function() {
    return this.getToken(OParser.EXCEPT, 0);
};

KeywordContext.prototype.EXECUTE = function() {
    return this.getToken(OParser.EXECUTE, 0);
};

KeywordContext.prototype.EXPECTING = function() {
    return this.getToken(OParser.EXPECTING, 0);
};

KeywordContext.prototype.EXTENDS = function() {
    return this.getToken(OParser.EXTENDS, 0);
};

KeywordContext.prototype.FETCH = function() {
    return this.getToken(OParser.FETCH, 0);
};

KeywordContext.prototype.FILTERED = function() {
    return this.getToken(OParser.FILTERED, 0);
};

KeywordContext.prototype.FINALLY = function() {
    return this.getToken(OParser.FINALLY, 0);
};

KeywordContext.prototype.FLUSH = function() {
    return this.getToken(OParser.FLUSH, 0);
};

KeywordContext.prototype.FOR = function() {
    return this.getToken(OParser.FOR, 0);
};

KeywordContext.prototype.FROM = function() {
    return this.getToken(OParser.FROM, 0);
};

KeywordContext.prototype.GETTER = function() {
    return this.getToken(OParser.GETTER, 0);
};

KeywordContext.prototype.HAS = function() {
    return this.getToken(OParser.HAS, 0);
};

KeywordContext.prototype.IF = function() {
    return this.getToken(OParser.IF, 0);
};

KeywordContext.prototype.IN = function() {
    return this.getToken(OParser.IN, 0);
};

KeywordContext.prototype.INDEX = function() {
    return this.getToken(OParser.INDEX, 0);
};

KeywordContext.prototype.INVOKE = function() {
    return this.getToken(OParser.INVOKE, 0);
};

KeywordContext.prototype.IS = function() {
    return this.getToken(OParser.IS, 0);
};

KeywordContext.prototype.MATCHING = function() {
    return this.getToken(OParser.MATCHING, 0);
};

KeywordContext.prototype.METHOD = function() {
    return this.getToken(OParser.METHOD, 0);
};

KeywordContext.prototype.METHODS = function() {
    return this.getToken(OParser.METHODS, 0);
};

KeywordContext.prototype.MODULO = function() {
    return this.getToken(OParser.MODULO, 0);
};

KeywordContext.prototype.MUTABLE = function() {
    return this.getToken(OParser.MUTABLE, 0);
};

KeywordContext.prototype.NATIVE = function() {
    return this.getToken(OParser.NATIVE, 0);
};

KeywordContext.prototype.NONE = function() {
    return this.getToken(OParser.NONE, 0);
};

KeywordContext.prototype.NOT = function() {
    return this.getToken(OParser.NOT, 0);
};

KeywordContext.prototype.NOTHING = function() {
    return this.getToken(OParser.NOTHING, 0);
};

KeywordContext.prototype.NULL = function() {
    return this.getToken(OParser.NULL, 0);
};

KeywordContext.prototype.ON = function() {
    return this.getToken(OParser.ON, 0);
};

KeywordContext.prototype.ONE = function() {
    return this.getToken(OParser.ONE, 0);
};

KeywordContext.prototype.OPEN = function() {
    return this.getToken(OParser.OPEN, 0);
};

KeywordContext.prototype.OPERATOR = function() {
    return this.getToken(OParser.OPERATOR, 0);
};

KeywordContext.prototype.OR = function() {
    return this.getToken(OParser.OR, 0);
};

KeywordContext.prototype.ORDER = function() {
    return this.getToken(OParser.ORDER, 0);
};

KeywordContext.prototype.OTHERWISE = function() {
    return this.getToken(OParser.OTHERWISE, 0);
};

KeywordContext.prototype.PASS = function() {
    return this.getToken(OParser.PASS, 0);
};

KeywordContext.prototype.RAISE = function() {
    return this.getToken(OParser.RAISE, 0);
};

KeywordContext.prototype.READ = function() {
    return this.getToken(OParser.READ, 0);
};

KeywordContext.prototype.RECEIVING = function() {
    return this.getToken(OParser.RECEIVING, 0);
};

KeywordContext.prototype.RESOURCE = function() {
    return this.getToken(OParser.RESOURCE, 0);
};

KeywordContext.prototype.RETURN = function() {
    return this.getToken(OParser.RETURN, 0);
};

KeywordContext.prototype.RETURNING = function() {
    return this.getToken(OParser.RETURNING, 0);
};

KeywordContext.prototype.ROWS = function() {
    return this.getToken(OParser.ROWS, 0);
};

KeywordContext.prototype.SELF = function() {
    return this.getToken(OParser.SELF, 0);
};

KeywordContext.prototype.SETTER = function() {
    return this.getToken(OParser.SETTER, 0);
};

KeywordContext.prototype.SINGLETON = function() {
    return this.getToken(OParser.SINGLETON, 0);
};

KeywordContext.prototype.SORTED = function() {
    return this.getToken(OParser.SORTED, 0);
};

KeywordContext.prototype.STORABLE = function() {
    return this.getToken(OParser.STORABLE, 0);
};

KeywordContext.prototype.STORE = function() {
    return this.getToken(OParser.STORE, 0);
};

KeywordContext.prototype.SWITCH = function() {
    return this.getToken(OParser.SWITCH, 0);
};

KeywordContext.prototype.TEST = function() {
    return this.getToken(OParser.TEST, 0);
};

KeywordContext.prototype.THIS = function() {
    return this.getToken(OParser.THIS, 0);
};

KeywordContext.prototype.THROW = function() {
    return this.getToken(OParser.THROW, 0);
};

KeywordContext.prototype.TO = function() {
    return this.getToken(OParser.TO, 0);
};

KeywordContext.prototype.TRY = function() {
    return this.getToken(OParser.TRY, 0);
};

KeywordContext.prototype.VERIFYING = function() {
    return this.getToken(OParser.VERIFYING, 0);
};

KeywordContext.prototype.WIDGET = function() {
    return this.getToken(OParser.WIDGET, 0);
};

KeywordContext.prototype.WITH = function() {
    return this.getToken(OParser.WITH, 0);
};

KeywordContext.prototype.WHEN = function() {
    return this.getToken(OParser.WHEN, 0);
};

KeywordContext.prototype.WHERE = function() {
    return this.getToken(OParser.WHERE, 0);
};

KeywordContext.prototype.WHILE = function() {
    return this.getToken(OParser.WHILE, 0);
};

KeywordContext.prototype.WRITE = function() {
    return this.getToken(OParser.WRITE, 0);
};

KeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterKeyword(this);
	}
};

KeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitKeyword(this);
	}
};




OParser.KeywordContext = KeywordContext;

OParser.prototype.keyword = function() {

    var localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, OParser.RULE_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2197;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT) | (1 << OParser.SWIFT))) !== 0) || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.METHOD_T - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ABSTRACT - 48)) | (1 << (OParser.ALL - 48)) | (1 << (OParser.ALWAYS - 48)) | (1 << (OParser.AND - 48)) | (1 << (OParser.ANY - 48)) | (1 << (OParser.AS - 48)) | (1 << (OParser.ASC - 48)) | (1 << (OParser.ATTR - 48)) | (1 << (OParser.ATTRIBUTE - 48)) | (1 << (OParser.ATTRIBUTES - 48)) | (1 << (OParser.BINDINGS - 48)) | (1 << (OParser.BREAK - 48)) | (1 << (OParser.BY - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (OParser.CASE - 80)) | (1 << (OParser.CATCH - 80)) | (1 << (OParser.CATEGORY - 80)) | (1 << (OParser.CLASS - 80)) | (1 << (OParser.CLOSE - 80)) | (1 << (OParser.CONTAINS - 80)) | (1 << (OParser.DEF - 80)) | (1 << (OParser.DEFAULT - 80)) | (1 << (OParser.DEFINE - 80)) | (1 << (OParser.DELETE - 80)) | (1 << (OParser.DESC - 80)) | (1 << (OParser.DO - 80)) | (1 << (OParser.DOING - 80)) | (1 << (OParser.EACH - 80)) | (1 << (OParser.ELSE - 80)) | (1 << (OParser.ENUM - 80)) | (1 << (OParser.ENUMERATED - 80)) | (1 << (OParser.EXCEPT - 80)) | (1 << (OParser.EXECUTE - 80)) | (1 << (OParser.EXPECTING - 80)) | (1 << (OParser.EXTENDS - 80)) | (1 << (OParser.FETCH - 80)) | (1 << (OParser.FILTERED - 80)) | (1 << (OParser.FINALLY - 80)) | (1 << (OParser.FLUSH - 80)) | (1 << (OParser.FOR - 80)) | (1 << (OParser.FROM - 80)) | (1 << (OParser.GETTER - 80)) | (1 << (OParser.HAS - 80)) | (1 << (OParser.IF - 80)) | (1 << (OParser.IN - 80)) | (1 << (OParser.INDEX - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (OParser.INVOKE - 112)) | (1 << (OParser.IS - 112)) | (1 << (OParser.MATCHING - 112)) | (1 << (OParser.METHOD - 112)) | (1 << (OParser.METHODS - 112)) | (1 << (OParser.MODULO - 112)) | (1 << (OParser.MUTABLE - 112)) | (1 << (OParser.NATIVE - 112)) | (1 << (OParser.NONE - 112)) | (1 << (OParser.NOT - 112)) | (1 << (OParser.NOTHING - 112)) | (1 << (OParser.NULL - 112)) | (1 << (OParser.ON - 112)) | (1 << (OParser.ONE - 112)) | (1 << (OParser.OPEN - 112)) | (1 << (OParser.OPERATOR - 112)) | (1 << (OParser.OR - 112)) | (1 << (OParser.ORDER - 112)) | (1 << (OParser.OTHERWISE - 112)) | (1 << (OParser.PASS - 112)) | (1 << (OParser.RAISE - 112)) | (1 << (OParser.READ - 112)) | (1 << (OParser.RECEIVING - 112)) | (1 << (OParser.RESOURCE - 112)) | (1 << (OParser.RETURN - 112)) | (1 << (OParser.RETURNING - 112)) | (1 << (OParser.ROWS - 112)) | (1 << (OParser.SELF - 112)) | (1 << (OParser.SETTER - 112)) | (1 << (OParser.SINGLETON - 112)) | (1 << (OParser.SORTED - 112)) | (1 << (OParser.STORABLE - 112)))) !== 0) || ((((_la - 144)) & ~0x1f) == 0 && ((1 << (_la - 144)) & ((1 << (OParser.STORE - 144)) | (1 << (OParser.SWITCH - 144)) | (1 << (OParser.TEST - 144)) | (1 << (OParser.THIS - 144)) | (1 << (OParser.THROW - 144)) | (1 << (OParser.TO - 144)) | (1 << (OParser.TRY - 144)) | (1 << (OParser.VERIFYING - 144)) | (1 << (OParser.WIDGET - 144)) | (1 << (OParser.WITH - 144)) | (1 << (OParser.WHEN - 144)) | (1 << (OParser.WHERE - 144)) | (1 << (OParser.WHILE - 144)) | (1 << (OParser.WRITE - 144)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function New_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_new_token;
    this.i1 = null; // Token
    return this;
}

New_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
New_tokenContext.prototype.constructor = New_tokenContext;

New_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(OParser.VARIABLE_IDENTIFIER, 0);
};

New_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterNew_token(this);
	}
};

New_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitNew_token(this);
	}
};




OParser.New_tokenContext = New_tokenContext;

OParser.prototype.new_token = function() {

    var localctx = new New_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, OParser.RULE_new_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2199;
        localctx.i1 = this.match(OParser.VARIABLE_IDENTIFIER);
        this.state = 2200;
        if (!( this.isText(localctx.i1,"new"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"new\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Key_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_key_token;
    this.i1 = null; // Token
    return this;
}

Key_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Key_tokenContext.prototype.constructor = Key_tokenContext;

Key_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(OParser.VARIABLE_IDENTIFIER, 0);
};

Key_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterKey_token(this);
	}
};

Key_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitKey_token(this);
	}
};




OParser.Key_tokenContext = Key_tokenContext;

OParser.prototype.key_token = function() {

    var localctx = new Key_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, OParser.RULE_key_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2202;
        localctx.i1 = this.match(OParser.VARIABLE_IDENTIFIER);
        this.state = 2203;
        if (!( this.isText(localctx.i1,"key"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"key\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Module_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_module_token;
    this.i1 = null; // Token
    return this;
}

Module_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_tokenContext.prototype.constructor = Module_tokenContext;

Module_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(OParser.VARIABLE_IDENTIFIER, 0);
};

Module_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterModule_token(this);
	}
};

Module_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitModule_token(this);
	}
};




OParser.Module_tokenContext = Module_tokenContext;

OParser.prototype.module_token = function() {

    var localctx = new Module_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, OParser.RULE_module_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2205;
        localctx.i1 = this.match(OParser.VARIABLE_IDENTIFIER);
        this.state = 2206;
        if (!( this.isText(localctx.i1,"module"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"module\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Value_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_value_token;
    this.i1 = null; // Token
    return this;
}

Value_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Value_tokenContext.prototype.constructor = Value_tokenContext;

Value_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(OParser.VARIABLE_IDENTIFIER, 0);
};

Value_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterValue_token(this);
	}
};

Value_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitValue_token(this);
	}
};




OParser.Value_tokenContext = Value_tokenContext;

OParser.prototype.value_token = function() {

    var localctx = new Value_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, OParser.RULE_value_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2208;
        localctx.i1 = this.match(OParser.VARIABLE_IDENTIFIER);
        this.state = 2209;
        if (!( this.isText(localctx.i1,"value"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"value\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Symbols_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_symbols_token;
    this.i1 = null; // Token
    return this;
}

Symbols_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Symbols_tokenContext.prototype.constructor = Symbols_tokenContext;

Symbols_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(OParser.VARIABLE_IDENTIFIER, 0);
};

Symbols_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterSymbols_token(this);
	}
};

Symbols_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitSymbols_token(this);
	}
};




OParser.Symbols_tokenContext = Symbols_tokenContext;

OParser.prototype.symbols_token = function() {

    var localctx = new Symbols_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, OParser.RULE_symbols_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2211;
        localctx.i1 = this.match(OParser.VARIABLE_IDENTIFIER);
        this.state = 2212;
        if (!( this.isText(localctx.i1,"symbols"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"symbols\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_assign;
    return this;
}

AssignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignContext.prototype.constructor = AssignContext;

AssignContext.prototype.EQ = function() {
    return this.getToken(OParser.EQ, 0);
};

AssignContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterAssign(this);
	}
};

AssignContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitAssign(this);
	}
};




OParser.AssignContext = AssignContext;

OParser.prototype.assign = function() {

    var localctx = new AssignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, OParser.RULE_assign);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2214;
        this.match(OParser.EQ);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiplyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_multiply;
    return this;
}

MultiplyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplyContext.prototype.constructor = MultiplyContext;

MultiplyContext.prototype.STAR = function() {
    return this.getToken(OParser.STAR, 0);
};

MultiplyContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterMultiply(this);
	}
};

MultiplyContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitMultiply(this);
	}
};




OParser.MultiplyContext = MultiplyContext;

OParser.prototype.multiply = function() {

    var localctx = new MultiplyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, OParser.RULE_multiply);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2216;
        this.match(OParser.STAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DivideContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_divide;
    return this;
}

DivideContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DivideContext.prototype.constructor = DivideContext;

DivideContext.prototype.SLASH = function() {
    return this.getToken(OParser.SLASH, 0);
};

DivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterDivide(this);
	}
};

DivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitDivide(this);
	}
};




OParser.DivideContext = DivideContext;

OParser.prototype.divide = function() {

    var localctx = new DivideContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, OParser.RULE_divide);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2218;
        this.match(OParser.SLASH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdivideContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_idivide;
    return this;
}

IdivideContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdivideContext.prototype.constructor = IdivideContext;

IdivideContext.prototype.BSLASH = function() {
    return this.getToken(OParser.BSLASH, 0);
};

IdivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterIdivide(this);
	}
};

IdivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitIdivide(this);
	}
};




OParser.IdivideContext = IdivideContext;

OParser.prototype.idivide = function() {

    var localctx = new IdivideContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, OParser.RULE_idivide);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2220;
        this.match(OParser.BSLASH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuloContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_modulo;
    return this;
}

ModuloContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuloContext.prototype.constructor = ModuloContext;

ModuloContext.prototype.PERCENT = function() {
    return this.getToken(OParser.PERCENT, 0);
};

ModuloContext.prototype.MODULO = function() {
    return this.getToken(OParser.MODULO, 0);
};

ModuloContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterModulo(this);
	}
};

ModuloContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitModulo(this);
	}
};




OParser.ModuloContext = ModuloContext;

OParser.prototype.modulo = function() {

    var localctx = new ModuloContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, OParser.RULE_modulo);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2222;
        _la = this._input.LA(1);
        if(!(_la===OParser.PERCENT || _la===OParser.MODULO)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LfsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_lfs;
    return this;
}

LfsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LfsContext.prototype.constructor = LfsContext;


LfsContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterLfs(this);
	}
};

LfsContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitLfs(this);
	}
};




OParser.LfsContext = LfsContext;

OParser.prototype.lfs = function() {

    var localctx = new LfsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, OParser.RULE_lfs);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LfpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_lfp;
    return this;
}

LfpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LfpContext.prototype.constructor = LfpContext;


LfpContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterLfp(this);
	}
};

LfpContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitLfp(this);
	}
};




OParser.LfpContext = LfpContext;

OParser.prototype.lfp = function() {

    var localctx = new LfpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, OParser.RULE_lfp);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_javascript_statement;
    return this;
}

Javascript_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_statementContext.prototype.constructor = Javascript_statementContext;


 
Javascript_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavascriptStatementContext(parser, ctx) {
	Javascript_statementContext.call(this, parser);
    this.exp = null; // Javascript_expressionContext;
    Javascript_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptStatementContext.prototype = Object.create(Javascript_statementContext.prototype);
JavascriptStatementContext.prototype.constructor = JavascriptStatementContext;

OParser.JavascriptStatementContext = JavascriptStatementContext;

JavascriptStatementContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

JavascriptStatementContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascriptStatement(this);
	}
};

JavascriptStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascriptStatement(this);
	}
};


function JavascriptReturnStatementContext(parser, ctx) {
	Javascript_statementContext.call(this, parser);
    this.exp = null; // Javascript_expressionContext;
    Javascript_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptReturnStatementContext.prototype = Object.create(Javascript_statementContext.prototype);
JavascriptReturnStatementContext.prototype.constructor = JavascriptReturnStatementContext;

OParser.JavascriptReturnStatementContext = JavascriptReturnStatementContext;

JavascriptReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(OParser.RETURN, 0);
};

JavascriptReturnStatementContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

JavascriptReturnStatementContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascriptReturnStatement(this);
	}
};

JavascriptReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascriptReturnStatement(this);
	}
};



OParser.Javascript_statementContext = Javascript_statementContext;

OParser.prototype.javascript_statement = function() {

    var localctx = new Javascript_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, OParser.RULE_javascript_statement);
    try {
        this.state = 2235;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.RETURN:
            localctx = new JavascriptReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2228;
            this.match(OParser.RETURN);
            this.state = 2229;
            localctx.exp = this.javascript_expression(0);
            this.state = 2230;
            this.match(OParser.SEMI);
            break;
        case OParser.LPAR:
        case OParser.LBRAK:
        case OParser.BOOLEAN:
        case OParser.CHARACTER:
        case OParser.TEXT:
        case OParser.INTEGER:
        case OParser.DECIMAL:
        case OParser.DATE:
        case OParser.TIME:
        case OParser.DATETIME:
        case OParser.PERIOD:
        case OParser.VERSION:
        case OParser.UUID:
        case OParser.HTML:
        case OParser.NONE:
        case OParser.NULL:
        case OParser.READ:
        case OParser.SELF:
        case OParser.TEST:
        case OParser.THIS:
        case OParser.WRITE:
        case OParser.BOOLEAN_LITERAL:
        case OParser.CHAR_LITERAL:
        case OParser.SYMBOL_IDENTIFIER:
        case OParser.TYPE_IDENTIFIER:
        case OParser.VARIABLE_IDENTIFIER:
        case OParser.DOLLAR_IDENTIFIER:
        case OParser.TEXT_LITERAL:
        case OParser.INTEGER_LITERAL:
        case OParser.DECIMAL_LITERAL:
            localctx = new JavascriptStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2232;
            localctx.exp = this.javascript_expression(0);
            this.state = 2233;
            this.match(OParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_javascript_expression;
    return this;
}

Javascript_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_expressionContext.prototype.constructor = Javascript_expressionContext;


 
Javascript_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavascriptSelectorExpressionContext(parser, ctx) {
	Javascript_expressionContext.call(this, parser);
    this.parent = null; // Javascript_expressionContext;
    this.child = null; // Javascript_selector_expressionContext;
    Javascript_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptSelectorExpressionContext.prototype = Object.create(Javascript_expressionContext.prototype);
JavascriptSelectorExpressionContext.prototype.constructor = JavascriptSelectorExpressionContext;

OParser.JavascriptSelectorExpressionContext = JavascriptSelectorExpressionContext;

JavascriptSelectorExpressionContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};

JavascriptSelectorExpressionContext.prototype.javascript_selector_expression = function() {
    return this.getTypedRuleContext(Javascript_selector_expressionContext,0);
};
JavascriptSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascriptSelectorExpression(this);
	}
};

JavascriptSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascriptSelectorExpression(this);
	}
};


function JavascriptPrimaryExpressionContext(parser, ctx) {
	Javascript_expressionContext.call(this, parser);
    this.exp = null; // Javascript_primary_expressionContext;
    Javascript_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptPrimaryExpressionContext.prototype = Object.create(Javascript_expressionContext.prototype);
JavascriptPrimaryExpressionContext.prototype.constructor = JavascriptPrimaryExpressionContext;

OParser.JavascriptPrimaryExpressionContext = JavascriptPrimaryExpressionContext;

JavascriptPrimaryExpressionContext.prototype.javascript_primary_expression = function() {
    return this.getTypedRuleContext(Javascript_primary_expressionContext,0);
};
JavascriptPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascriptPrimaryExpression(this);
	}
};

JavascriptPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascriptPrimaryExpression(this);
	}
};



OParser.prototype.javascript_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Javascript_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 350;
    this.enterRecursionRule(localctx, 350, OParser.RULE_javascript_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavascriptPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2238;
        localctx.exp = this.javascript_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2244;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,194,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavascriptSelectorExpressionContext(this, new Javascript_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_javascript_expression);
                this.state = 2240;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2241;
                localctx.child = this.javascript_selector_expression(); 
            }
            this.state = 2246;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,194,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Javascript_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_javascript_primary_expression;
    return this;
}

Javascript_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_primary_expressionContext.prototype.constructor = Javascript_primary_expressionContext;

Javascript_primary_expressionContext.prototype.javascript_this_expression = function() {
    return this.getTypedRuleContext(Javascript_this_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_new_expression = function() {
    return this.getTypedRuleContext(Javascript_new_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_parenthesis_expression = function() {
    return this.getTypedRuleContext(Javascript_parenthesis_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_identifier_expression = function() {
    return this.getTypedRuleContext(Javascript_identifier_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_literal_expression = function() {
    return this.getTypedRuleContext(Javascript_literal_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_method_expression = function() {
    return this.getTypedRuleContext(Javascript_method_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_item_expression = function() {
    return this.getTypedRuleContext(Javascript_item_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascript_primary_expression(this);
	}
};

Javascript_primary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascript_primary_expression(this);
	}
};




OParser.Javascript_primary_expressionContext = Javascript_primary_expressionContext;

OParser.prototype.javascript_primary_expression = function() {

    var localctx = new Javascript_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, OParser.RULE_javascript_primary_expression);
    try {
        this.state = 2254;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2247;
            this.javascript_this_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2248;
            this.javascript_new_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2249;
            this.javascript_parenthesis_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2250;
            this.javascript_identifier_expression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2251;
            this.javascript_literal_expression();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2252;
            this.javascript_method_expression();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2253;
            this.javascript_item_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_this_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_javascript_this_expression;
    return this;
}

Javascript_this_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_this_expressionContext.prototype.constructor = Javascript_this_expressionContext;

Javascript_this_expressionContext.prototype.this_expression = function() {
    return this.getTypedRuleContext(This_expressionContext,0);
};

Javascript_this_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascript_this_expression(this);
	}
};

Javascript_this_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascript_this_expression(this);
	}
};




OParser.Javascript_this_expressionContext = Javascript_this_expressionContext;

OParser.prototype.javascript_this_expression = function() {

    var localctx = new Javascript_this_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, OParser.RULE_javascript_this_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2256;
        this.this_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_new_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_javascript_new_expression;
    return this;
}

Javascript_new_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_new_expressionContext.prototype.constructor = Javascript_new_expressionContext;

Javascript_new_expressionContext.prototype.new_token = function() {
    return this.getTypedRuleContext(New_tokenContext,0);
};

Javascript_new_expressionContext.prototype.javascript_method_expression = function() {
    return this.getTypedRuleContext(Javascript_method_expressionContext,0);
};

Javascript_new_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascript_new_expression(this);
	}
};

Javascript_new_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascript_new_expression(this);
	}
};




OParser.Javascript_new_expressionContext = Javascript_new_expressionContext;

OParser.prototype.javascript_new_expression = function() {

    var localctx = new Javascript_new_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, OParser.RULE_javascript_new_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2258;
        this.new_token();
        this.state = 2259;
        this.javascript_method_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_javascript_selector_expression;
    return this;
}

Javascript_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_selector_expressionContext.prototype.constructor = Javascript_selector_expressionContext;


 
Javascript_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaScriptMemberExpressionContext(parser, ctx) {
	Javascript_selector_expressionContext.call(this, parser);
    this.name = null; // Javascript_identifierContext;
    Javascript_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptMemberExpressionContext.prototype = Object.create(Javascript_selector_expressionContext.prototype);
JavaScriptMemberExpressionContext.prototype.constructor = JavaScriptMemberExpressionContext;

OParser.JavaScriptMemberExpressionContext = JavaScriptMemberExpressionContext;

JavaScriptMemberExpressionContext.prototype.DOT = function() {
    return this.getToken(OParser.DOT, 0);
};

JavaScriptMemberExpressionContext.prototype.javascript_identifier = function() {
    return this.getTypedRuleContext(Javascript_identifierContext,0);
};
JavaScriptMemberExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaScriptMemberExpression(this);
	}
};

JavaScriptMemberExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaScriptMemberExpression(this);
	}
};


function JavaScriptItemExpressionContext(parser, ctx) {
	Javascript_selector_expressionContext.call(this, parser);
    this.exp = null; // Javascript_item_expressionContext;
    Javascript_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptItemExpressionContext.prototype = Object.create(Javascript_selector_expressionContext.prototype);
JavaScriptItemExpressionContext.prototype.constructor = JavaScriptItemExpressionContext;

OParser.JavaScriptItemExpressionContext = JavaScriptItemExpressionContext;

JavaScriptItemExpressionContext.prototype.javascript_item_expression = function() {
    return this.getTypedRuleContext(Javascript_item_expressionContext,0);
};
JavaScriptItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaScriptItemExpression(this);
	}
};

JavaScriptItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaScriptItemExpression(this);
	}
};


function JavaScriptMethodExpressionContext(parser, ctx) {
	Javascript_selector_expressionContext.call(this, parser);
    this.method = null; // Javascript_method_expressionContext;
    Javascript_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptMethodExpressionContext.prototype = Object.create(Javascript_selector_expressionContext.prototype);
JavaScriptMethodExpressionContext.prototype.constructor = JavaScriptMethodExpressionContext;

OParser.JavaScriptMethodExpressionContext = JavaScriptMethodExpressionContext;

JavaScriptMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(OParser.DOT, 0);
};

JavaScriptMethodExpressionContext.prototype.javascript_method_expression = function() {
    return this.getTypedRuleContext(Javascript_method_expressionContext,0);
};
JavaScriptMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaScriptMethodExpression(this);
	}
};

JavaScriptMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaScriptMethodExpression(this);
	}
};



OParser.Javascript_selector_expressionContext = Javascript_selector_expressionContext;

OParser.prototype.javascript_selector_expression = function() {

    var localctx = new Javascript_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, OParser.RULE_javascript_selector_expression);
    try {
        this.state = 2266;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
        switch(la_) {
        case 1:
            localctx = new JavaScriptMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2261;
            this.match(OParser.DOT);
            this.state = 2262;
            localctx.method = this.javascript_method_expression();
            break;

        case 2:
            localctx = new JavaScriptMemberExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2263;
            this.match(OParser.DOT);
            this.state = 2264;
            localctx.name = this.javascript_identifier();
            break;

        case 3:
            localctx = new JavaScriptItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2265;
            localctx.exp = this.javascript_item_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_javascript_method_expression;
    this.name = null; // Javascript_identifierContext
    this.args = null; // Javascript_argumentsContext
    return this;
}

Javascript_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_method_expressionContext.prototype.constructor = Javascript_method_expressionContext;

Javascript_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Javascript_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Javascript_method_expressionContext.prototype.javascript_identifier = function() {
    return this.getTypedRuleContext(Javascript_identifierContext,0);
};

Javascript_method_expressionContext.prototype.javascript_arguments = function() {
    return this.getTypedRuleContext(Javascript_argumentsContext,0);
};

Javascript_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascript_method_expression(this);
	}
};

Javascript_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascript_method_expression(this);
	}
};




OParser.Javascript_method_expressionContext = Javascript_method_expressionContext;

OParser.prototype.javascript_method_expression = function() {

    var localctx = new Javascript_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, OParser.RULE_javascript_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2268;
        localctx.name = this.javascript_identifier();
        this.state = 2269;
        this.match(OParser.LPAR);
        this.state = 2271;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.LPAR || _la===OParser.LBRAK || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.HTML - 48)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (OParser.NONE - 120)) | (1 << (OParser.NULL - 120)) | (1 << (OParser.READ - 120)) | (1 << (OParser.SELF - 120)) | (1 << (OParser.TEST - 120)) | (1 << (OParser.THIS - 120)))) !== 0) || ((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (OParser.WRITE - 158)) | (1 << (OParser.BOOLEAN_LITERAL - 158)) | (1 << (OParser.CHAR_LITERAL - 158)) | (1 << (OParser.SYMBOL_IDENTIFIER - 158)) | (1 << (OParser.TYPE_IDENTIFIER - 158)) | (1 << (OParser.VARIABLE_IDENTIFIER - 158)) | (1 << (OParser.DOLLAR_IDENTIFIER - 158)) | (1 << (OParser.TEXT_LITERAL - 158)) | (1 << (OParser.INTEGER_LITERAL - 158)) | (1 << (OParser.DECIMAL_LITERAL - 158)))) !== 0)) {
            this.state = 2270;
            localctx.args = this.javascript_arguments(0);
        }

        this.state = 2273;
        this.match(OParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_javascript_arguments;
    return this;
}

Javascript_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_argumentsContext.prototype.constructor = Javascript_argumentsContext;


 
Javascript_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavascriptArgumentListContext(parser, ctx) {
	Javascript_argumentsContext.call(this, parser);
    this.item = null; // Javascript_expressionContext;
    Javascript_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptArgumentListContext.prototype = Object.create(Javascript_argumentsContext.prototype);
JavascriptArgumentListContext.prototype.constructor = JavascriptArgumentListContext;

OParser.JavascriptArgumentListContext = JavascriptArgumentListContext;

JavascriptArgumentListContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascriptArgumentList(this);
	}
};

JavascriptArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascriptArgumentList(this);
	}
};


function JavascriptArgumentListItemContext(parser, ctx) {
	Javascript_argumentsContext.call(this, parser);
    this.items = null; // Javascript_argumentsContext;
    this.item = null; // Javascript_expressionContext;
    Javascript_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptArgumentListItemContext.prototype = Object.create(Javascript_argumentsContext.prototype);
JavascriptArgumentListItemContext.prototype.constructor = JavascriptArgumentListItemContext;

OParser.JavascriptArgumentListItemContext = JavascriptArgumentListItemContext;

JavascriptArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(OParser.COMMA, 0);
};

JavascriptArgumentListItemContext.prototype.javascript_arguments = function() {
    return this.getTypedRuleContext(Javascript_argumentsContext,0);
};

JavascriptArgumentListItemContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascriptArgumentListItem(this);
	}
};

JavascriptArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascriptArgumentListItem(this);
	}
};



OParser.prototype.javascript_arguments = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Javascript_argumentsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 362;
    this.enterRecursionRule(localctx, 362, OParser.RULE_javascript_arguments, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavascriptArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2276;
        localctx.item = this.javascript_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2283;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,198,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavascriptArgumentListItemContext(this, new Javascript_argumentsContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_javascript_arguments);
                this.state = 2278;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2279;
                this.match(OParser.COMMA);
                this.state = 2280;
                localctx.item = this.javascript_expression(0); 
            }
            this.state = 2285;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,198,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Javascript_item_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_javascript_item_expression;
    this.exp = null; // Javascript_expressionContext
    return this;
}

Javascript_item_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_item_expressionContext.prototype.constructor = Javascript_item_expressionContext;

Javascript_item_expressionContext.prototype.LBRAK = function() {
    return this.getToken(OParser.LBRAK, 0);
};

Javascript_item_expressionContext.prototype.RBRAK = function() {
    return this.getToken(OParser.RBRAK, 0);
};

Javascript_item_expressionContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};

Javascript_item_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascript_item_expression(this);
	}
};

Javascript_item_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascript_item_expression(this);
	}
};




OParser.Javascript_item_expressionContext = Javascript_item_expressionContext;

OParser.prototype.javascript_item_expression = function() {

    var localctx = new Javascript_item_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, OParser.RULE_javascript_item_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2286;
        this.match(OParser.LBRAK);
        this.state = 2287;
        localctx.exp = this.javascript_expression(0);
        this.state = 2288;
        this.match(OParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_javascript_parenthesis_expression;
    this.exp = null; // Javascript_expressionContext
    return this;
}

Javascript_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_parenthesis_expressionContext.prototype.constructor = Javascript_parenthesis_expressionContext;

Javascript_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Javascript_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Javascript_parenthesis_expressionContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};

Javascript_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascript_parenthesis_expression(this);
	}
};

Javascript_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascript_parenthesis_expression(this);
	}
};




OParser.Javascript_parenthesis_expressionContext = Javascript_parenthesis_expressionContext;

OParser.prototype.javascript_parenthesis_expression = function() {

    var localctx = new Javascript_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, OParser.RULE_javascript_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2290;
        this.match(OParser.LPAR);
        this.state = 2291;
        localctx.exp = this.javascript_expression(0);
        this.state = 2292;
        this.match(OParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_javascript_identifier_expression;
    this.name = null; // Javascript_identifierContext
    return this;
}

Javascript_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_identifier_expressionContext.prototype.constructor = Javascript_identifier_expressionContext;

Javascript_identifier_expressionContext.prototype.javascript_identifier = function() {
    return this.getTypedRuleContext(Javascript_identifierContext,0);
};

Javascript_identifier_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascript_identifier_expression(this);
	}
};

Javascript_identifier_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascript_identifier_expression(this);
	}
};




OParser.Javascript_identifier_expressionContext = Javascript_identifier_expressionContext;

OParser.prototype.javascript_identifier_expression = function() {

    var localctx = new Javascript_identifier_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, OParser.RULE_javascript_identifier_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2294;
        localctx.name = this.javascript_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_javascript_literal_expression;
    return this;
}

Javascript_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_literal_expressionContext.prototype.constructor = Javascript_literal_expressionContext;


 
Javascript_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavascriptIntegerLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptIntegerLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptIntegerLiteralContext.prototype.constructor = JavascriptIntegerLiteralContext;

OParser.JavascriptIntegerLiteralContext = JavascriptIntegerLiteralContext;

JavascriptIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(OParser.INTEGER_LITERAL, 0);
};
JavascriptIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascriptIntegerLiteral(this);
	}
};

JavascriptIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascriptIntegerLiteral(this);
	}
};


function JavascriptBooleanLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptBooleanLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptBooleanLiteralContext.prototype.constructor = JavascriptBooleanLiteralContext;

OParser.JavascriptBooleanLiteralContext = JavascriptBooleanLiteralContext;

JavascriptBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(OParser.BOOLEAN_LITERAL, 0);
};
JavascriptBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascriptBooleanLiteral(this);
	}
};

JavascriptBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascriptBooleanLiteral(this);
	}
};


function JavascriptCharacterLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptCharacterLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptCharacterLiteralContext.prototype.constructor = JavascriptCharacterLiteralContext;

OParser.JavascriptCharacterLiteralContext = JavascriptCharacterLiteralContext;

JavascriptCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(OParser.CHAR_LITERAL, 0);
};
JavascriptCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascriptCharacterLiteral(this);
	}
};

JavascriptCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascriptCharacterLiteral(this);
	}
};


function JavascriptTextLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptTextLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptTextLiteralContext.prototype.constructor = JavascriptTextLiteralContext;

OParser.JavascriptTextLiteralContext = JavascriptTextLiteralContext;

JavascriptTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(OParser.TEXT_LITERAL, 0);
};
JavascriptTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascriptTextLiteral(this);
	}
};

JavascriptTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascriptTextLiteral(this);
	}
};


function JavascriptDecimalLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptDecimalLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptDecimalLiteralContext.prototype.constructor = JavascriptDecimalLiteralContext;

OParser.JavascriptDecimalLiteralContext = JavascriptDecimalLiteralContext;

JavascriptDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(OParser.DECIMAL_LITERAL, 0);
};
JavascriptDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascriptDecimalLiteral(this);
	}
};

JavascriptDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascriptDecimalLiteral(this);
	}
};



OParser.Javascript_literal_expressionContext = Javascript_literal_expressionContext;

OParser.prototype.javascript_literal_expression = function() {

    var localctx = new Javascript_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, OParser.RULE_javascript_literal_expression);
    try {
        this.state = 2301;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.INTEGER_LITERAL:
            localctx = new JavascriptIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2296;
            localctx.t = this.match(OParser.INTEGER_LITERAL);
            break;
        case OParser.DECIMAL_LITERAL:
            localctx = new JavascriptDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2297;
            localctx.t = this.match(OParser.DECIMAL_LITERAL);
            break;
        case OParser.TEXT_LITERAL:
            localctx = new JavascriptTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2298;
            localctx.t = this.match(OParser.TEXT_LITERAL);
            break;
        case OParser.BOOLEAN_LITERAL:
            localctx = new JavascriptBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2299;
            localctx.t = this.match(OParser.BOOLEAN_LITERAL);
            break;
        case OParser.CHAR_LITERAL:
            localctx = new JavascriptCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2300;
            localctx.t = this.match(OParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_javascript_identifier;
    return this;
}

Javascript_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_identifierContext.prototype.constructor = Javascript_identifierContext;

Javascript_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(OParser.VARIABLE_IDENTIFIER, 0);
};

Javascript_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(OParser.SYMBOL_IDENTIFIER, 0);
};

Javascript_identifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(OParser.DOLLAR_IDENTIFIER, 0);
};

Javascript_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(OParser.TYPE_IDENTIFIER, 0);
};

Javascript_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(OParser.BOOLEAN, 0);
};

Javascript_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(OParser.CHARACTER, 0);
};

Javascript_identifierContext.prototype.TEXT = function() {
    return this.getToken(OParser.TEXT, 0);
};

Javascript_identifierContext.prototype.INTEGER = function() {
    return this.getToken(OParser.INTEGER, 0);
};

Javascript_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(OParser.DECIMAL, 0);
};

Javascript_identifierContext.prototype.DATE = function() {
    return this.getToken(OParser.DATE, 0);
};

Javascript_identifierContext.prototype.TIME = function() {
    return this.getToken(OParser.TIME, 0);
};

Javascript_identifierContext.prototype.DATETIME = function() {
    return this.getToken(OParser.DATETIME, 0);
};

Javascript_identifierContext.prototype.PERIOD = function() {
    return this.getToken(OParser.PERIOD, 0);
};

Javascript_identifierContext.prototype.VERSION = function() {
    return this.getToken(OParser.VERSION, 0);
};

Javascript_identifierContext.prototype.UUID = function() {
    return this.getToken(OParser.UUID, 0);
};

Javascript_identifierContext.prototype.HTML = function() {
    return this.getToken(OParser.HTML, 0);
};

Javascript_identifierContext.prototype.READ = function() {
    return this.getToken(OParser.READ, 0);
};

Javascript_identifierContext.prototype.WRITE = function() {
    return this.getToken(OParser.WRITE, 0);
};

Javascript_identifierContext.prototype.TEST = function() {
    return this.getToken(OParser.TEST, 0);
};

Javascript_identifierContext.prototype.SELF = function() {
    return this.getToken(OParser.SELF, 0);
};

Javascript_identifierContext.prototype.NONE = function() {
    return this.getToken(OParser.NONE, 0);
};

Javascript_identifierContext.prototype.NULL = function() {
    return this.getToken(OParser.NULL, 0);
};

Javascript_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavascript_identifier(this);
	}
};

Javascript_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavascript_identifier(this);
	}
};




OParser.Javascript_identifierContext = Javascript_identifierContext;

OParser.prototype.javascript_identifier = function() {

    var localctx = new Javascript_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, OParser.RULE_javascript_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2303;
        _la = this._input.LA(1);
        if(!(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.HTML - 48)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (OParser.NONE - 120)) | (1 << (OParser.NULL - 120)) | (1 << (OParser.READ - 120)) | (1 << (OParser.SELF - 120)) | (1 << (OParser.TEST - 120)))) !== 0) || ((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (OParser.WRITE - 158)) | (1 << (OParser.SYMBOL_IDENTIFIER - 158)) | (1 << (OParser.TYPE_IDENTIFIER - 158)) | (1 << (OParser.VARIABLE_IDENTIFIER - 158)) | (1 << (OParser.DOLLAR_IDENTIFIER - 158)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_python_statement;
    return this;
}

Python_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_statementContext.prototype.constructor = Python_statementContext;


 
Python_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonStatementContext(parser, ctx) {
	Python_statementContext.call(this, parser);
    this.exp = null; // Python_expressionContext;
    Python_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonStatementContext.prototype = Object.create(Python_statementContext.prototype);
PythonStatementContext.prototype.constructor = PythonStatementContext;

OParser.PythonStatementContext = PythonStatementContext;

PythonStatementContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonStatement(this);
	}
};

PythonStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonStatement(this);
	}
};


function PythonReturnStatementContext(parser, ctx) {
	Python_statementContext.call(this, parser);
    this.exp = null; // Python_expressionContext;
    Python_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonReturnStatementContext.prototype = Object.create(Python_statementContext.prototype);
PythonReturnStatementContext.prototype.constructor = PythonReturnStatementContext;

OParser.PythonReturnStatementContext = PythonReturnStatementContext;

PythonReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(OParser.RETURN, 0);
};

PythonReturnStatementContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonReturnStatement(this);
	}
};

PythonReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonReturnStatement(this);
	}
};



OParser.Python_statementContext = Python_statementContext;

OParser.prototype.python_statement = function() {

    var localctx = new Python_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, OParser.RULE_python_statement);
    try {
        this.state = 2308;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.RETURN:
            localctx = new PythonReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2305;
            this.match(OParser.RETURN);
            this.state = 2306;
            localctx.exp = this.python_expression(0);
            break;
        case OParser.LPAR:
        case OParser.BOOLEAN:
        case OParser.CHARACTER:
        case OParser.TEXT:
        case OParser.INTEGER:
        case OParser.DECIMAL:
        case OParser.DATE:
        case OParser.TIME:
        case OParser.DATETIME:
        case OParser.PERIOD:
        case OParser.VERSION:
        case OParser.UUID:
        case OParser.HTML:
        case OParser.NONE:
        case OParser.NULL:
        case OParser.READ:
        case OParser.SELF:
        case OParser.TEST:
        case OParser.THIS:
        case OParser.WRITE:
        case OParser.BOOLEAN_LITERAL:
        case OParser.CHAR_LITERAL:
        case OParser.SYMBOL_IDENTIFIER:
        case OParser.TYPE_IDENTIFIER:
        case OParser.VARIABLE_IDENTIFIER:
        case OParser.DOLLAR_IDENTIFIER:
        case OParser.TEXT_LITERAL:
        case OParser.INTEGER_LITERAL:
        case OParser.DECIMAL_LITERAL:
            localctx = new PythonStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2307;
            localctx.exp = this.python_expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_python_expression;
    return this;
}

Python_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_expressionContext.prototype.constructor = Python_expressionContext;


 
Python_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonSelectorExpressionContext(parser, ctx) {
	Python_expressionContext.call(this, parser);
    this.parent = null; // Python_expressionContext;
    this.child = null; // Python_selector_expressionContext;
    Python_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonSelectorExpressionContext.prototype = Object.create(Python_expressionContext.prototype);
PythonSelectorExpressionContext.prototype.constructor = PythonSelectorExpressionContext;

OParser.PythonSelectorExpressionContext = PythonSelectorExpressionContext;

PythonSelectorExpressionContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};

PythonSelectorExpressionContext.prototype.python_selector_expression = function() {
    return this.getTypedRuleContext(Python_selector_expressionContext,0);
};
PythonSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonSelectorExpression(this);
	}
};

PythonSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonSelectorExpression(this);
	}
};


function PythonPrimaryExpressionContext(parser, ctx) {
	Python_expressionContext.call(this, parser);
    this.exp = null; // Python_primary_expressionContext;
    Python_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonPrimaryExpressionContext.prototype = Object.create(Python_expressionContext.prototype);
PythonPrimaryExpressionContext.prototype.constructor = PythonPrimaryExpressionContext;

OParser.PythonPrimaryExpressionContext = PythonPrimaryExpressionContext;

PythonPrimaryExpressionContext.prototype.python_primary_expression = function() {
    return this.getTypedRuleContext(Python_primary_expressionContext,0);
};
PythonPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonPrimaryExpression(this);
	}
};

PythonPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonPrimaryExpression(this);
	}
};



OParser.prototype.python_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 376;
    this.enterRecursionRule(localctx, 376, OParser.RULE_python_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new PythonPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2311;
        localctx.exp = this.python_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2317;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,201,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonSelectorExpressionContext(this, new Python_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_python_expression);
                this.state = 2313;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2314;
                localctx.child = this.python_selector_expression(); 
            }
            this.state = 2319;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,201,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_python_primary_expression;
    return this;
}

Python_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_primary_expressionContext.prototype.constructor = Python_primary_expressionContext;


 
Python_primary_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonParenthesisExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_parenthesis_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonParenthesisExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonParenthesisExpressionContext.prototype.constructor = PythonParenthesisExpressionContext;

OParser.PythonParenthesisExpressionContext = PythonParenthesisExpressionContext;

PythonParenthesisExpressionContext.prototype.python_parenthesis_expression = function() {
    return this.getTypedRuleContext(Python_parenthesis_expressionContext,0);
};
PythonParenthesisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonParenthesisExpression(this);
	}
};

PythonParenthesisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonParenthesisExpression(this);
	}
};


function PythonIdentifierExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_identifier_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonIdentifierExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonIdentifierExpressionContext.prototype.constructor = PythonIdentifierExpressionContext;

OParser.PythonIdentifierExpressionContext = PythonIdentifierExpressionContext;

PythonIdentifierExpressionContext.prototype.python_identifier_expression = function() {
    return this.getTypedRuleContext(Python_identifier_expressionContext,0);
};
PythonIdentifierExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonIdentifierExpression(this);
	}
};

PythonIdentifierExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonIdentifierExpression(this);
	}
};


function PythonSelfExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_self_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonSelfExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonSelfExpressionContext.prototype.constructor = PythonSelfExpressionContext;

OParser.PythonSelfExpressionContext = PythonSelfExpressionContext;

PythonSelfExpressionContext.prototype.python_self_expression = function() {
    return this.getTypedRuleContext(Python_self_expressionContext,0);
};
PythonSelfExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonSelfExpression(this);
	}
};

PythonSelfExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonSelfExpression(this);
	}
};


function PythonLiteralExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_literal_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonLiteralExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonLiteralExpressionContext.prototype.constructor = PythonLiteralExpressionContext;

OParser.PythonLiteralExpressionContext = PythonLiteralExpressionContext;

PythonLiteralExpressionContext.prototype.python_literal_expression = function() {
    return this.getTypedRuleContext(Python_literal_expressionContext,0);
};
PythonLiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonLiteralExpression(this);
	}
};

PythonLiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonLiteralExpression(this);
	}
};


function PythonGlobalMethodExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_method_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonGlobalMethodExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonGlobalMethodExpressionContext.prototype.constructor = PythonGlobalMethodExpressionContext;

OParser.PythonGlobalMethodExpressionContext = PythonGlobalMethodExpressionContext;

PythonGlobalMethodExpressionContext.prototype.python_method_expression = function() {
    return this.getTypedRuleContext(Python_method_expressionContext,0);
};
PythonGlobalMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonGlobalMethodExpression(this);
	}
};

PythonGlobalMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonGlobalMethodExpression(this);
	}
};



OParser.Python_primary_expressionContext = Python_primary_expressionContext;

OParser.prototype.python_primary_expression = function() {

    var localctx = new Python_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, OParser.RULE_python_primary_expression);
    try {
        this.state = 2325;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PythonSelfExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2320;
            localctx.exp = this.python_self_expression();
            break;

        case 2:
            localctx = new PythonParenthesisExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2321;
            localctx.exp = this.python_parenthesis_expression();
            break;

        case 3:
            localctx = new PythonIdentifierExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2322;
            localctx.exp = this.python_identifier_expression(0);
            break;

        case 4:
            localctx = new PythonLiteralExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2323;
            localctx.exp = this.python_literal_expression();
            break;

        case 5:
            localctx = new PythonGlobalMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2324;
            localctx.exp = this.python_method_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_self_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_python_self_expression;
    return this;
}

Python_self_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_self_expressionContext.prototype.constructor = Python_self_expressionContext;

Python_self_expressionContext.prototype.this_expression = function() {
    return this.getTypedRuleContext(This_expressionContext,0);
};

Python_self_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPython_self_expression(this);
	}
};

Python_self_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPython_self_expression(this);
	}
};




OParser.Python_self_expressionContext = Python_self_expressionContext;

OParser.prototype.python_self_expression = function() {

    var localctx = new Python_self_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, OParser.RULE_python_self_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2327;
        this.this_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_python_selector_expression;
    return this;
}

Python_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_selector_expressionContext.prototype.constructor = Python_selector_expressionContext;


 
Python_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonMethodExpressionContext(parser, ctx) {
	Python_selector_expressionContext.call(this, parser);
    this.exp = null; // Python_method_expressionContext;
    Python_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonMethodExpressionContext.prototype = Object.create(Python_selector_expressionContext.prototype);
PythonMethodExpressionContext.prototype.constructor = PythonMethodExpressionContext;

OParser.PythonMethodExpressionContext = PythonMethodExpressionContext;

PythonMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(OParser.DOT, 0);
};

PythonMethodExpressionContext.prototype.python_method_expression = function() {
    return this.getTypedRuleContext(Python_method_expressionContext,0);
};
PythonMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonMethodExpression(this);
	}
};

PythonMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonMethodExpression(this);
	}
};


function PythonItemExpressionContext(parser, ctx) {
	Python_selector_expressionContext.call(this, parser);
    this.exp = null; // Python_expressionContext;
    Python_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonItemExpressionContext.prototype = Object.create(Python_selector_expressionContext.prototype);
PythonItemExpressionContext.prototype.constructor = PythonItemExpressionContext;

OParser.PythonItemExpressionContext = PythonItemExpressionContext;

PythonItemExpressionContext.prototype.LBRAK = function() {
    return this.getToken(OParser.LBRAK, 0);
};

PythonItemExpressionContext.prototype.RBRAK = function() {
    return this.getToken(OParser.RBRAK, 0);
};

PythonItemExpressionContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonItemExpression(this);
	}
};

PythonItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonItemExpression(this);
	}
};



OParser.Python_selector_expressionContext = Python_selector_expressionContext;

OParser.prototype.python_selector_expression = function() {

    var localctx = new Python_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, OParser.RULE_python_selector_expression);
    try {
        this.state = 2335;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.DOT:
            localctx = new PythonMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2329;
            this.match(OParser.DOT);
            this.state = 2330;
            localctx.exp = this.python_method_expression();
            break;
        case OParser.LBRAK:
            localctx = new PythonItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2331;
            this.match(OParser.LBRAK);
            this.state = 2332;
            localctx.exp = this.python_expression(0);
            this.state = 2333;
            this.match(OParser.RBRAK);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_python_method_expression;
    this.name = null; // Python_identifierContext
    this.args = null; // Python_argument_listContext
    return this;
}

Python_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_method_expressionContext.prototype.constructor = Python_method_expressionContext;

Python_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Python_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Python_method_expressionContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};

Python_method_expressionContext.prototype.python_argument_list = function() {
    return this.getTypedRuleContext(Python_argument_listContext,0);
};

Python_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPython_method_expression(this);
	}
};

Python_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPython_method_expression(this);
	}
};




OParser.Python_method_expressionContext = Python_method_expressionContext;

OParser.prototype.python_method_expression = function() {

    var localctx = new Python_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, OParser.RULE_python_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2337;
        localctx.name = this.python_identifier();
        this.state = 2338;
        this.match(OParser.LPAR);
        this.state = 2340;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.LPAR || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.HTML - 48)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (OParser.NONE - 120)) | (1 << (OParser.NULL - 120)) | (1 << (OParser.READ - 120)) | (1 << (OParser.SELF - 120)) | (1 << (OParser.TEST - 120)) | (1 << (OParser.THIS - 120)))) !== 0) || ((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (OParser.WRITE - 158)) | (1 << (OParser.BOOLEAN_LITERAL - 158)) | (1 << (OParser.CHAR_LITERAL - 158)) | (1 << (OParser.SYMBOL_IDENTIFIER - 158)) | (1 << (OParser.TYPE_IDENTIFIER - 158)) | (1 << (OParser.VARIABLE_IDENTIFIER - 158)) | (1 << (OParser.DOLLAR_IDENTIFIER - 158)) | (1 << (OParser.TEXT_LITERAL - 158)) | (1 << (OParser.INTEGER_LITERAL - 158)) | (1 << (OParser.DECIMAL_LITERAL - 158)))) !== 0)) {
            this.state = 2339;
            localctx.args = this.python_argument_list();
        }

        this.state = 2342;
        this.match(OParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_python_argument_list;
    return this;
}

Python_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_argument_listContext.prototype.constructor = Python_argument_listContext;


 
Python_argument_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonOrdinalOnlyArgumentListContext(parser, ctx) {
	Python_argument_listContext.call(this, parser);
    this.ordinal = null; // Python_ordinal_argument_listContext;
    Python_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonOrdinalOnlyArgumentListContext.prototype = Object.create(Python_argument_listContext.prototype);
PythonOrdinalOnlyArgumentListContext.prototype.constructor = PythonOrdinalOnlyArgumentListContext;

OParser.PythonOrdinalOnlyArgumentListContext = PythonOrdinalOnlyArgumentListContext;

PythonOrdinalOnlyArgumentListContext.prototype.python_ordinal_argument_list = function() {
    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
};
PythonOrdinalOnlyArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonOrdinalOnlyArgumentList(this);
	}
};

PythonOrdinalOnlyArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonOrdinalOnlyArgumentList(this);
	}
};


function PythonNamedOnlyArgumentListContext(parser, ctx) {
	Python_argument_listContext.call(this, parser);
    this.named = null; // Python_named_argument_listContext;
    Python_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonNamedOnlyArgumentListContext.prototype = Object.create(Python_argument_listContext.prototype);
PythonNamedOnlyArgumentListContext.prototype.constructor = PythonNamedOnlyArgumentListContext;

OParser.PythonNamedOnlyArgumentListContext = PythonNamedOnlyArgumentListContext;

PythonNamedOnlyArgumentListContext.prototype.python_named_argument_list = function() {
    return this.getTypedRuleContext(Python_named_argument_listContext,0);
};
PythonNamedOnlyArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonNamedOnlyArgumentList(this);
	}
};

PythonNamedOnlyArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonNamedOnlyArgumentList(this);
	}
};


function PythonArgumentListContext(parser, ctx) {
	Python_argument_listContext.call(this, parser);
    this.ordinal = null; // Python_ordinal_argument_listContext;
    this.named = null; // Python_named_argument_listContext;
    Python_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonArgumentListContext.prototype = Object.create(Python_argument_listContext.prototype);
PythonArgumentListContext.prototype.constructor = PythonArgumentListContext;

OParser.PythonArgumentListContext = PythonArgumentListContext;

PythonArgumentListContext.prototype.COMMA = function() {
    return this.getToken(OParser.COMMA, 0);
};

PythonArgumentListContext.prototype.python_ordinal_argument_list = function() {
    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
};

PythonArgumentListContext.prototype.python_named_argument_list = function() {
    return this.getTypedRuleContext(Python_named_argument_listContext,0);
};
PythonArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonArgumentList(this);
	}
};

PythonArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonArgumentList(this);
	}
};



OParser.Python_argument_listContext = Python_argument_listContext;

OParser.prototype.python_argument_list = function() {

    var localctx = new Python_argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, OParser.RULE_python_argument_list);
    try {
        this.state = 2350;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PythonOrdinalOnlyArgumentListContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2344;
            localctx.ordinal = this.python_ordinal_argument_list(0);
            break;

        case 2:
            localctx = new PythonNamedOnlyArgumentListContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2345;
            localctx.named = this.python_named_argument_list(0);
            break;

        case 3:
            localctx = new PythonArgumentListContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2346;
            localctx.ordinal = this.python_ordinal_argument_list(0);
            this.state = 2347;
            this.match(OParser.COMMA);
            this.state = 2348;
            localctx.named = this.python_named_argument_list(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_ordinal_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_python_ordinal_argument_list;
    return this;
}

Python_ordinal_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_ordinal_argument_listContext.prototype.constructor = Python_ordinal_argument_listContext;


 
Python_ordinal_argument_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonOrdinalArgumentListContext(parser, ctx) {
	Python_ordinal_argument_listContext.call(this, parser);
    this.item = null; // Python_expressionContext;
    Python_ordinal_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonOrdinalArgumentListContext.prototype = Object.create(Python_ordinal_argument_listContext.prototype);
PythonOrdinalArgumentListContext.prototype.constructor = PythonOrdinalArgumentListContext;

OParser.PythonOrdinalArgumentListContext = PythonOrdinalArgumentListContext;

PythonOrdinalArgumentListContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonOrdinalArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonOrdinalArgumentList(this);
	}
};

PythonOrdinalArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonOrdinalArgumentList(this);
	}
};


function PythonOrdinalArgumentListItemContext(parser, ctx) {
	Python_ordinal_argument_listContext.call(this, parser);
    this.items = null; // Python_ordinal_argument_listContext;
    this.item = null; // Python_expressionContext;
    Python_ordinal_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonOrdinalArgumentListItemContext.prototype = Object.create(Python_ordinal_argument_listContext.prototype);
PythonOrdinalArgumentListItemContext.prototype.constructor = PythonOrdinalArgumentListItemContext;

OParser.PythonOrdinalArgumentListItemContext = PythonOrdinalArgumentListItemContext;

PythonOrdinalArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(OParser.COMMA, 0);
};

PythonOrdinalArgumentListItemContext.prototype.python_ordinal_argument_list = function() {
    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
};

PythonOrdinalArgumentListItemContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonOrdinalArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonOrdinalArgumentListItem(this);
	}
};

PythonOrdinalArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonOrdinalArgumentListItem(this);
	}
};



OParser.prototype.python_ordinal_argument_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_ordinal_argument_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 388;
    this.enterRecursionRule(localctx, 388, OParser.RULE_python_ordinal_argument_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new PythonOrdinalArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2353;
        localctx.item = this.python_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2360;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,206,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonOrdinalArgumentListItemContext(this, new Python_ordinal_argument_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_python_ordinal_argument_list);
                this.state = 2355;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2356;
                this.match(OParser.COMMA);
                this.state = 2357;
                localctx.item = this.python_expression(0); 
            }
            this.state = 2362;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,206,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_named_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_python_named_argument_list;
    return this;
}

Python_named_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_named_argument_listContext.prototype.constructor = Python_named_argument_listContext;


 
Python_named_argument_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonNamedArgumentListContext(parser, ctx) {
	Python_named_argument_listContext.call(this, parser);
    this.name = null; // Python_identifierContext;
    this.exp = null; // Python_expressionContext;
    Python_named_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonNamedArgumentListContext.prototype = Object.create(Python_named_argument_listContext.prototype);
PythonNamedArgumentListContext.prototype.constructor = PythonNamedArgumentListContext;

OParser.PythonNamedArgumentListContext = PythonNamedArgumentListContext;

PythonNamedArgumentListContext.prototype.EQ = function() {
    return this.getToken(OParser.EQ, 0);
};

PythonNamedArgumentListContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};

PythonNamedArgumentListContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonNamedArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonNamedArgumentList(this);
	}
};

PythonNamedArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonNamedArgumentList(this);
	}
};


function PythonNamedArgumentListItemContext(parser, ctx) {
	Python_named_argument_listContext.call(this, parser);
    this.items = null; // Python_named_argument_listContext;
    this.name = null; // Python_identifierContext;
    this.exp = null; // Python_expressionContext;
    Python_named_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonNamedArgumentListItemContext.prototype = Object.create(Python_named_argument_listContext.prototype);
PythonNamedArgumentListItemContext.prototype.constructor = PythonNamedArgumentListItemContext;

OParser.PythonNamedArgumentListItemContext = PythonNamedArgumentListItemContext;

PythonNamedArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(OParser.COMMA, 0);
};

PythonNamedArgumentListItemContext.prototype.EQ = function() {
    return this.getToken(OParser.EQ, 0);
};

PythonNamedArgumentListItemContext.prototype.python_named_argument_list = function() {
    return this.getTypedRuleContext(Python_named_argument_listContext,0);
};

PythonNamedArgumentListItemContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};

PythonNamedArgumentListItemContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonNamedArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonNamedArgumentListItem(this);
	}
};

PythonNamedArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonNamedArgumentListItem(this);
	}
};



OParser.prototype.python_named_argument_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_named_argument_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 390;
    this.enterRecursionRule(localctx, 390, OParser.RULE_python_named_argument_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new PythonNamedArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2364;
        localctx.name = this.python_identifier();
        this.state = 2365;
        this.match(OParser.EQ);
        this.state = 2366;
        localctx.exp = this.python_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2376;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,207,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonNamedArgumentListItemContext(this, new Python_named_argument_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_python_named_argument_list);
                this.state = 2368;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2369;
                this.match(OParser.COMMA);
                this.state = 2370;
                localctx.name = this.python_identifier();
                this.state = 2371;
                this.match(OParser.EQ);
                this.state = 2372;
                localctx.exp = this.python_expression(0); 
            }
            this.state = 2378;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,207,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_python_parenthesis_expression;
    this.exp = null; // Python_expressionContext
    return this;
}

Python_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_parenthesis_expressionContext.prototype.constructor = Python_parenthesis_expressionContext;

Python_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Python_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Python_parenthesis_expressionContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};

Python_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPython_parenthesis_expression(this);
	}
};

Python_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPython_parenthesis_expression(this);
	}
};




OParser.Python_parenthesis_expressionContext = Python_parenthesis_expressionContext;

OParser.prototype.python_parenthesis_expression = function() {

    var localctx = new Python_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, OParser.RULE_python_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2379;
        this.match(OParser.LPAR);
        this.state = 2380;
        localctx.exp = this.python_expression(0);
        this.state = 2381;
        this.match(OParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_python_identifier_expression;
    return this;
}

Python_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_identifier_expressionContext.prototype.constructor = Python_identifier_expressionContext;


 
Python_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonChildIdentifierContext(parser, ctx) {
	Python_identifier_expressionContext.call(this, parser);
    this.parent = null; // Python_identifier_expressionContext;
    this.name = null; // Python_identifierContext;
    Python_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonChildIdentifierContext.prototype = Object.create(Python_identifier_expressionContext.prototype);
PythonChildIdentifierContext.prototype.constructor = PythonChildIdentifierContext;

OParser.PythonChildIdentifierContext = PythonChildIdentifierContext;

PythonChildIdentifierContext.prototype.DOT = function() {
    return this.getToken(OParser.DOT, 0);
};

PythonChildIdentifierContext.prototype.python_identifier_expression = function() {
    return this.getTypedRuleContext(Python_identifier_expressionContext,0);
};

PythonChildIdentifierContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};
PythonChildIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonChildIdentifier(this);
	}
};

PythonChildIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonChildIdentifier(this);
	}
};


function PythonPromptoIdentifierContext(parser, ctx) {
	Python_identifier_expressionContext.call(this, parser);
    Python_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonPromptoIdentifierContext.prototype = Object.create(Python_identifier_expressionContext.prototype);
PythonPromptoIdentifierContext.prototype.constructor = PythonPromptoIdentifierContext;

OParser.PythonPromptoIdentifierContext = PythonPromptoIdentifierContext;

PythonPromptoIdentifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(OParser.DOLLAR_IDENTIFIER, 0);
};
PythonPromptoIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonPromptoIdentifier(this);
	}
};

PythonPromptoIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonPromptoIdentifier(this);
	}
};


function PythonIdentifierContext(parser, ctx) {
	Python_identifier_expressionContext.call(this, parser);
    this.name = null; // Python_identifierContext;
    Python_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonIdentifierContext.prototype = Object.create(Python_identifier_expressionContext.prototype);
PythonIdentifierContext.prototype.constructor = PythonIdentifierContext;

OParser.PythonIdentifierContext = PythonIdentifierContext;

PythonIdentifierContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};
PythonIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonIdentifier(this);
	}
};

PythonIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonIdentifier(this);
	}
};



OParser.prototype.python_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 394;
    this.enterRecursionRule(localctx, 394, OParser.RULE_python_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2386;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.DOLLAR_IDENTIFIER:
            localctx = new PythonPromptoIdentifierContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 2384;
            this.match(OParser.DOLLAR_IDENTIFIER);
            break;
        case OParser.BOOLEAN:
        case OParser.CHARACTER:
        case OParser.TEXT:
        case OParser.INTEGER:
        case OParser.DECIMAL:
        case OParser.DATE:
        case OParser.TIME:
        case OParser.DATETIME:
        case OParser.PERIOD:
        case OParser.VERSION:
        case OParser.UUID:
        case OParser.HTML:
        case OParser.NONE:
        case OParser.NULL:
        case OParser.READ:
        case OParser.TEST:
        case OParser.THIS:
        case OParser.WRITE:
        case OParser.SYMBOL_IDENTIFIER:
        case OParser.TYPE_IDENTIFIER:
        case OParser.VARIABLE_IDENTIFIER:
            localctx = new PythonIdentifierContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2385;
            localctx.name = this.python_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2393;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,209,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonChildIdentifierContext(this, new Python_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_python_identifier_expression);
                this.state = 2388;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2389;
                this.match(OParser.DOT);
                this.state = 2390;
                localctx.name = this.python_identifier(); 
            }
            this.state = 2395;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,209,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_python_literal_expression;
    return this;
}

Python_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_literal_expressionContext.prototype.constructor = Python_literal_expressionContext;


 
Python_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonIntegerLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonIntegerLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonIntegerLiteralContext.prototype.constructor = PythonIntegerLiteralContext;

OParser.PythonIntegerLiteralContext = PythonIntegerLiteralContext;

PythonIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(OParser.INTEGER_LITERAL, 0);
};
PythonIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonIntegerLiteral(this);
	}
};

PythonIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonIntegerLiteral(this);
	}
};


function PythonBooleanLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonBooleanLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonBooleanLiteralContext.prototype.constructor = PythonBooleanLiteralContext;

OParser.PythonBooleanLiteralContext = PythonBooleanLiteralContext;

PythonBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(OParser.BOOLEAN_LITERAL, 0);
};
PythonBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonBooleanLiteral(this);
	}
};

PythonBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonBooleanLiteral(this);
	}
};


function PythonCharacterLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonCharacterLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonCharacterLiteralContext.prototype.constructor = PythonCharacterLiteralContext;

OParser.PythonCharacterLiteralContext = PythonCharacterLiteralContext;

PythonCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(OParser.CHAR_LITERAL, 0);
};
PythonCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonCharacterLiteral(this);
	}
};

PythonCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonCharacterLiteral(this);
	}
};


function PythonTextLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonTextLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonTextLiteralContext.prototype.constructor = PythonTextLiteralContext;

OParser.PythonTextLiteralContext = PythonTextLiteralContext;

PythonTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(OParser.TEXT_LITERAL, 0);
};
PythonTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonTextLiteral(this);
	}
};

PythonTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonTextLiteral(this);
	}
};


function PythonDecimalLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonDecimalLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonDecimalLiteralContext.prototype.constructor = PythonDecimalLiteralContext;

OParser.PythonDecimalLiteralContext = PythonDecimalLiteralContext;

PythonDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(OParser.DECIMAL_LITERAL, 0);
};
PythonDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPythonDecimalLiteral(this);
	}
};

PythonDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPythonDecimalLiteral(this);
	}
};



OParser.Python_literal_expressionContext = Python_literal_expressionContext;

OParser.prototype.python_literal_expression = function() {

    var localctx = new Python_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, OParser.RULE_python_literal_expression);
    try {
        this.state = 2401;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.INTEGER_LITERAL:
            localctx = new PythonIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2396;
            localctx.t = this.match(OParser.INTEGER_LITERAL);
            break;
        case OParser.DECIMAL_LITERAL:
            localctx = new PythonDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2397;
            localctx.t = this.match(OParser.DECIMAL_LITERAL);
            break;
        case OParser.TEXT_LITERAL:
            localctx = new PythonTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2398;
            localctx.t = this.match(OParser.TEXT_LITERAL);
            break;
        case OParser.BOOLEAN_LITERAL:
            localctx = new PythonBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2399;
            localctx.t = this.match(OParser.BOOLEAN_LITERAL);
            break;
        case OParser.CHAR_LITERAL:
            localctx = new PythonCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2400;
            localctx.t = this.match(OParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_python_identifier;
    return this;
}

Python_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_identifierContext.prototype.constructor = Python_identifierContext;

Python_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(OParser.VARIABLE_IDENTIFIER, 0);
};

Python_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(OParser.SYMBOL_IDENTIFIER, 0);
};

Python_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(OParser.TYPE_IDENTIFIER, 0);
};

Python_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(OParser.BOOLEAN, 0);
};

Python_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(OParser.CHARACTER, 0);
};

Python_identifierContext.prototype.TEXT = function() {
    return this.getToken(OParser.TEXT, 0);
};

Python_identifierContext.prototype.INTEGER = function() {
    return this.getToken(OParser.INTEGER, 0);
};

Python_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(OParser.DECIMAL, 0);
};

Python_identifierContext.prototype.DATE = function() {
    return this.getToken(OParser.DATE, 0);
};

Python_identifierContext.prototype.TIME = function() {
    return this.getToken(OParser.TIME, 0);
};

Python_identifierContext.prototype.DATETIME = function() {
    return this.getToken(OParser.DATETIME, 0);
};

Python_identifierContext.prototype.PERIOD = function() {
    return this.getToken(OParser.PERIOD, 0);
};

Python_identifierContext.prototype.VERSION = function() {
    return this.getToken(OParser.VERSION, 0);
};

Python_identifierContext.prototype.UUID = function() {
    return this.getToken(OParser.UUID, 0);
};

Python_identifierContext.prototype.HTML = function() {
    return this.getToken(OParser.HTML, 0);
};

Python_identifierContext.prototype.READ = function() {
    return this.getToken(OParser.READ, 0);
};

Python_identifierContext.prototype.WRITE = function() {
    return this.getToken(OParser.WRITE, 0);
};

Python_identifierContext.prototype.TEST = function() {
    return this.getToken(OParser.TEST, 0);
};

Python_identifierContext.prototype.THIS = function() {
    return this.getToken(OParser.THIS, 0);
};

Python_identifierContext.prototype.NONE = function() {
    return this.getToken(OParser.NONE, 0);
};

Python_identifierContext.prototype.NULL = function() {
    return this.getToken(OParser.NULL, 0);
};

Python_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterPython_identifier(this);
	}
};

Python_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitPython_identifier(this);
	}
};




OParser.Python_identifierContext = Python_identifierContext;

OParser.prototype.python_identifier = function() {

    var localctx = new Python_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, OParser.RULE_python_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2403;
        _la = this._input.LA(1);
        if(!(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.HTML - 48)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (OParser.NONE - 120)) | (1 << (OParser.NULL - 120)) | (1 << (OParser.READ - 120)) | (1 << (OParser.TEST - 120)) | (1 << (OParser.THIS - 120)))) !== 0) || ((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (OParser.WRITE - 158)) | (1 << (OParser.SYMBOL_IDENTIFIER - 158)) | (1 << (OParser.TYPE_IDENTIFIER - 158)) | (1 << (OParser.VARIABLE_IDENTIFIER - 158)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_java_statement;
    return this;
}

Java_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_statementContext.prototype.constructor = Java_statementContext;


 
Java_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaReturnStatementContext(parser, ctx) {
	Java_statementContext.call(this, parser);
    this.exp = null; // Java_expressionContext;
    Java_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaReturnStatementContext.prototype = Object.create(Java_statementContext.prototype);
JavaReturnStatementContext.prototype.constructor = JavaReturnStatementContext;

OParser.JavaReturnStatementContext = JavaReturnStatementContext;

JavaReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(OParser.RETURN, 0);
};

JavaReturnStatementContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

JavaReturnStatementContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaReturnStatement(this);
	}
};

JavaReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaReturnStatement(this);
	}
};


function JavaStatementContext(parser, ctx) {
	Java_statementContext.call(this, parser);
    this.exp = null; // Java_expressionContext;
    Java_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaStatementContext.prototype = Object.create(Java_statementContext.prototype);
JavaStatementContext.prototype.constructor = JavaStatementContext;

OParser.JavaStatementContext = JavaStatementContext;

JavaStatementContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

JavaStatementContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaStatement(this);
	}
};

JavaStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaStatement(this);
	}
};



OParser.Java_statementContext = Java_statementContext;

OParser.prototype.java_statement = function() {

    var localctx = new Java_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, OParser.RULE_java_statement);
    try {
        this.state = 2412;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.RETURN:
            localctx = new JavaReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2405;
            this.match(OParser.RETURN);
            this.state = 2406;
            localctx.exp = this.java_expression(0);
            this.state = 2407;
            this.match(OParser.SEMI);
            break;
        case OParser.LPAR:
        case OParser.BOOLEAN:
        case OParser.CHARACTER:
        case OParser.TEXT:
        case OParser.INTEGER:
        case OParser.DECIMAL:
        case OParser.DATE:
        case OParser.TIME:
        case OParser.DATETIME:
        case OParser.PERIOD:
        case OParser.VERSION:
        case OParser.UUID:
        case OParser.HTML:
        case OParser.NONE:
        case OParser.NULL:
        case OParser.READ:
        case OParser.SELF:
        case OParser.TEST:
        case OParser.THIS:
        case OParser.WRITE:
        case OParser.BOOLEAN_LITERAL:
        case OParser.CHAR_LITERAL:
        case OParser.SYMBOL_IDENTIFIER:
        case OParser.TYPE_IDENTIFIER:
        case OParser.VARIABLE_IDENTIFIER:
        case OParser.NATIVE_IDENTIFIER:
        case OParser.DOLLAR_IDENTIFIER:
        case OParser.TEXT_LITERAL:
        case OParser.INTEGER_LITERAL:
        case OParser.DECIMAL_LITERAL:
            localctx = new JavaStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2409;
            localctx.exp = this.java_expression(0);
            this.state = 2410;
            this.match(OParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_java_expression;
    return this;
}

Java_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_expressionContext.prototype.constructor = Java_expressionContext;


 
Java_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaSelectorExpressionContext(parser, ctx) {
	Java_expressionContext.call(this, parser);
    this.parent = null; // Java_expressionContext;
    this.child = null; // Java_selector_expressionContext;
    Java_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaSelectorExpressionContext.prototype = Object.create(Java_expressionContext.prototype);
JavaSelectorExpressionContext.prototype.constructor = JavaSelectorExpressionContext;

OParser.JavaSelectorExpressionContext = JavaSelectorExpressionContext;

JavaSelectorExpressionContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};

JavaSelectorExpressionContext.prototype.java_selector_expression = function() {
    return this.getTypedRuleContext(Java_selector_expressionContext,0);
};
JavaSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaSelectorExpression(this);
	}
};

JavaSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaSelectorExpression(this);
	}
};


function JavaPrimaryExpressionContext(parser, ctx) {
	Java_expressionContext.call(this, parser);
    this.exp = null; // Java_primary_expressionContext;
    Java_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaPrimaryExpressionContext.prototype = Object.create(Java_expressionContext.prototype);
JavaPrimaryExpressionContext.prototype.constructor = JavaPrimaryExpressionContext;

OParser.JavaPrimaryExpressionContext = JavaPrimaryExpressionContext;

JavaPrimaryExpressionContext.prototype.java_primary_expression = function() {
    return this.getTypedRuleContext(Java_primary_expressionContext,0);
};
JavaPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaPrimaryExpression(this);
	}
};

JavaPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaPrimaryExpression(this);
	}
};



OParser.prototype.java_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 402;
    this.enterRecursionRule(localctx, 402, OParser.RULE_java_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2415;
        localctx.exp = this.java_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2421;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,212,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaSelectorExpressionContext(this, new Java_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_java_expression);
                this.state = 2417;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2418;
                localctx.child = this.java_selector_expression(); 
            }
            this.state = 2423;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,212,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_java_primary_expression;
    return this;
}

Java_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_primary_expressionContext.prototype.constructor = Java_primary_expressionContext;

Java_primary_expressionContext.prototype.java_this_expression = function() {
    return this.getTypedRuleContext(Java_this_expressionContext,0);
};

Java_primary_expressionContext.prototype.java_new_expression = function() {
    return this.getTypedRuleContext(Java_new_expressionContext,0);
};

Java_primary_expressionContext.prototype.java_parenthesis_expression = function() {
    return this.getTypedRuleContext(Java_parenthesis_expressionContext,0);
};

Java_primary_expressionContext.prototype.java_identifier_expression = function() {
    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
};

Java_primary_expressionContext.prototype.java_literal_expression = function() {
    return this.getTypedRuleContext(Java_literal_expressionContext,0);
};

Java_primary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJava_primary_expression(this);
	}
};

Java_primary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJava_primary_expression(this);
	}
};




OParser.Java_primary_expressionContext = Java_primary_expressionContext;

OParser.prototype.java_primary_expression = function() {

    var localctx = new Java_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, OParser.RULE_java_primary_expression);
    try {
        this.state = 2429;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2424;
            this.java_this_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2425;
            this.java_new_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2426;
            this.java_parenthesis_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2427;
            this.java_identifier_expression(0);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2428;
            this.java_literal_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_this_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_java_this_expression;
    return this;
}

Java_this_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_this_expressionContext.prototype.constructor = Java_this_expressionContext;

Java_this_expressionContext.prototype.this_expression = function() {
    return this.getTypedRuleContext(This_expressionContext,0);
};

Java_this_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJava_this_expression(this);
	}
};

Java_this_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJava_this_expression(this);
	}
};




OParser.Java_this_expressionContext = Java_this_expressionContext;

OParser.prototype.java_this_expression = function() {

    var localctx = new Java_this_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, OParser.RULE_java_this_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2431;
        this.this_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_new_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_java_new_expression;
    return this;
}

Java_new_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_new_expressionContext.prototype.constructor = Java_new_expressionContext;

Java_new_expressionContext.prototype.new_token = function() {
    return this.getTypedRuleContext(New_tokenContext,0);
};

Java_new_expressionContext.prototype.java_method_expression = function() {
    return this.getTypedRuleContext(Java_method_expressionContext,0);
};

Java_new_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJava_new_expression(this);
	}
};

Java_new_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJava_new_expression(this);
	}
};




OParser.Java_new_expressionContext = Java_new_expressionContext;

OParser.prototype.java_new_expression = function() {

    var localctx = new Java_new_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, OParser.RULE_java_new_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2433;
        this.new_token();
        this.state = 2434;
        this.java_method_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_java_selector_expression;
    return this;
}

Java_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_selector_expressionContext.prototype.constructor = Java_selector_expressionContext;


 
Java_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaItemExpressionContext(parser, ctx) {
	Java_selector_expressionContext.call(this, parser);
    this.exp = null; // Java_item_expressionContext;
    Java_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaItemExpressionContext.prototype = Object.create(Java_selector_expressionContext.prototype);
JavaItemExpressionContext.prototype.constructor = JavaItemExpressionContext;

OParser.JavaItemExpressionContext = JavaItemExpressionContext;

JavaItemExpressionContext.prototype.java_item_expression = function() {
    return this.getTypedRuleContext(Java_item_expressionContext,0);
};
JavaItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaItemExpression(this);
	}
};

JavaItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaItemExpression(this);
	}
};


function JavaMethodExpressionContext(parser, ctx) {
	Java_selector_expressionContext.call(this, parser);
    this.exp = null; // Java_method_expressionContext;
    Java_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaMethodExpressionContext.prototype = Object.create(Java_selector_expressionContext.prototype);
JavaMethodExpressionContext.prototype.constructor = JavaMethodExpressionContext;

OParser.JavaMethodExpressionContext = JavaMethodExpressionContext;

JavaMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(OParser.DOT, 0);
};

JavaMethodExpressionContext.prototype.java_method_expression = function() {
    return this.getTypedRuleContext(Java_method_expressionContext,0);
};
JavaMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaMethodExpression(this);
	}
};

JavaMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaMethodExpression(this);
	}
};



OParser.Java_selector_expressionContext = Java_selector_expressionContext;

OParser.prototype.java_selector_expression = function() {

    var localctx = new Java_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, OParser.RULE_java_selector_expression);
    try {
        this.state = 2439;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.DOT:
            localctx = new JavaMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2436;
            this.match(OParser.DOT);
            this.state = 2437;
            localctx.exp = this.java_method_expression();
            break;
        case OParser.LBRAK:
            localctx = new JavaItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2438;
            localctx.exp = this.java_item_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_java_method_expression;
    this.name = null; // Java_identifierContext
    this.args = null; // Java_argumentsContext
    return this;
}

Java_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_method_expressionContext.prototype.constructor = Java_method_expressionContext;

Java_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Java_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Java_method_expressionContext.prototype.java_identifier = function() {
    return this.getTypedRuleContext(Java_identifierContext,0);
};

Java_method_expressionContext.prototype.java_arguments = function() {
    return this.getTypedRuleContext(Java_argumentsContext,0);
};

Java_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJava_method_expression(this);
	}
};

Java_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJava_method_expression(this);
	}
};




OParser.Java_method_expressionContext = Java_method_expressionContext;

OParser.prototype.java_method_expression = function() {

    var localctx = new Java_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, OParser.RULE_java_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2441;
        localctx.name = this.java_identifier();
        this.state = 2442;
        this.match(OParser.LPAR);
        this.state = 2444;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.LPAR || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.HTML - 48)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (OParser.NONE - 120)) | (1 << (OParser.NULL - 120)) | (1 << (OParser.READ - 120)) | (1 << (OParser.SELF - 120)) | (1 << (OParser.TEST - 120)) | (1 << (OParser.THIS - 120)))) !== 0) || ((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (OParser.WRITE - 158)) | (1 << (OParser.BOOLEAN_LITERAL - 158)) | (1 << (OParser.CHAR_LITERAL - 158)) | (1 << (OParser.SYMBOL_IDENTIFIER - 158)) | (1 << (OParser.TYPE_IDENTIFIER - 158)) | (1 << (OParser.VARIABLE_IDENTIFIER - 158)) | (1 << (OParser.NATIVE_IDENTIFIER - 158)) | (1 << (OParser.DOLLAR_IDENTIFIER - 158)) | (1 << (OParser.TEXT_LITERAL - 158)) | (1 << (OParser.INTEGER_LITERAL - 158)) | (1 << (OParser.DECIMAL_LITERAL - 158)))) !== 0)) {
            this.state = 2443;
            localctx.args = this.java_arguments(0);
        }

        this.state = 2446;
        this.match(OParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_java_arguments;
    return this;
}

Java_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_argumentsContext.prototype.constructor = Java_argumentsContext;


 
Java_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaArgumentListItemContext(parser, ctx) {
	Java_argumentsContext.call(this, parser);
    this.items = null; // Java_argumentsContext;
    this.item = null; // Java_expressionContext;
    Java_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaArgumentListItemContext.prototype = Object.create(Java_argumentsContext.prototype);
JavaArgumentListItemContext.prototype.constructor = JavaArgumentListItemContext;

OParser.JavaArgumentListItemContext = JavaArgumentListItemContext;

JavaArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(OParser.COMMA, 0);
};

JavaArgumentListItemContext.prototype.java_arguments = function() {
    return this.getTypedRuleContext(Java_argumentsContext,0);
};

JavaArgumentListItemContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaArgumentListItem(this);
	}
};

JavaArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaArgumentListItem(this);
	}
};


function JavaArgumentListContext(parser, ctx) {
	Java_argumentsContext.call(this, parser);
    this.item = null; // Java_expressionContext;
    Java_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaArgumentListContext.prototype = Object.create(Java_argumentsContext.prototype);
JavaArgumentListContext.prototype.constructor = JavaArgumentListContext;

OParser.JavaArgumentListContext = JavaArgumentListContext;

JavaArgumentListContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaArgumentList(this);
	}
};

JavaArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaArgumentList(this);
	}
};



OParser.prototype.java_arguments = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_argumentsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 414;
    this.enterRecursionRule(localctx, 414, OParser.RULE_java_arguments, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2449;
        localctx.item = this.java_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2456;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,216,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaArgumentListItemContext(this, new Java_argumentsContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_java_arguments);
                this.state = 2451;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2452;
                this.match(OParser.COMMA);
                this.state = 2453;
                localctx.item = this.java_expression(0); 
            }
            this.state = 2458;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,216,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_item_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_java_item_expression;
    this.exp = null; // Java_expressionContext
    return this;
}

Java_item_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_item_expressionContext.prototype.constructor = Java_item_expressionContext;

Java_item_expressionContext.prototype.LBRAK = function() {
    return this.getToken(OParser.LBRAK, 0);
};

Java_item_expressionContext.prototype.RBRAK = function() {
    return this.getToken(OParser.RBRAK, 0);
};

Java_item_expressionContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};

Java_item_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJava_item_expression(this);
	}
};

Java_item_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJava_item_expression(this);
	}
};




OParser.Java_item_expressionContext = Java_item_expressionContext;

OParser.prototype.java_item_expression = function() {

    var localctx = new Java_item_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, OParser.RULE_java_item_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2459;
        this.match(OParser.LBRAK);
        this.state = 2460;
        localctx.exp = this.java_expression(0);
        this.state = 2461;
        this.match(OParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_java_parenthesis_expression;
    this.exp = null; // Java_expressionContext
    return this;
}

Java_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_parenthesis_expressionContext.prototype.constructor = Java_parenthesis_expressionContext;

Java_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Java_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Java_parenthesis_expressionContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};

Java_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJava_parenthesis_expression(this);
	}
};

Java_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJava_parenthesis_expression(this);
	}
};




OParser.Java_parenthesis_expressionContext = Java_parenthesis_expressionContext;

OParser.prototype.java_parenthesis_expression = function() {

    var localctx = new Java_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, OParser.RULE_java_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2463;
        this.match(OParser.LPAR);
        this.state = 2464;
        localctx.exp = this.java_expression(0);
        this.state = 2465;
        this.match(OParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_java_identifier_expression;
    return this;
}

Java_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_identifier_expressionContext.prototype.constructor = Java_identifier_expressionContext;


 
Java_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaIdentifierContext(parser, ctx) {
	Java_identifier_expressionContext.call(this, parser);
    this.name = null; // Java_identifierContext;
    Java_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaIdentifierContext.prototype = Object.create(Java_identifier_expressionContext.prototype);
JavaIdentifierContext.prototype.constructor = JavaIdentifierContext;

OParser.JavaIdentifierContext = JavaIdentifierContext;

JavaIdentifierContext.prototype.java_identifier = function() {
    return this.getTypedRuleContext(Java_identifierContext,0);
};
JavaIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaIdentifier(this);
	}
};

JavaIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaIdentifier(this);
	}
};


function JavaChildIdentifierContext(parser, ctx) {
	Java_identifier_expressionContext.call(this, parser);
    this.parent = null; // Java_identifier_expressionContext;
    this.name = null; // Java_identifierContext;
    Java_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaChildIdentifierContext.prototype = Object.create(Java_identifier_expressionContext.prototype);
JavaChildIdentifierContext.prototype.constructor = JavaChildIdentifierContext;

OParser.JavaChildIdentifierContext = JavaChildIdentifierContext;

JavaChildIdentifierContext.prototype.DOT = function() {
    return this.getToken(OParser.DOT, 0);
};

JavaChildIdentifierContext.prototype.java_identifier_expression = function() {
    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
};

JavaChildIdentifierContext.prototype.java_identifier = function() {
    return this.getTypedRuleContext(Java_identifierContext,0);
};
JavaChildIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaChildIdentifier(this);
	}
};

JavaChildIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaChildIdentifier(this);
	}
};



OParser.prototype.java_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 420;
    this.enterRecursionRule(localctx, 420, OParser.RULE_java_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaIdentifierContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2468;
        localctx.name = this.java_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2475;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,217,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaChildIdentifierContext(this, new Java_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_java_identifier_expression);
                this.state = 2470;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2471;
                this.match(OParser.DOT);
                this.state = 2472;
                localctx.name = this.java_identifier(); 
            }
            this.state = 2477;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,217,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_class_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_java_class_identifier_expression;
    return this;
}

Java_class_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_class_identifier_expressionContext.prototype.constructor = Java_class_identifier_expressionContext;


 
Java_class_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaClassIdentifierContext(parser, ctx) {
	Java_class_identifier_expressionContext.call(this, parser);
    this.klass = null; // Java_identifier_expressionContext;
    Java_class_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaClassIdentifierContext.prototype = Object.create(Java_class_identifier_expressionContext.prototype);
JavaClassIdentifierContext.prototype.constructor = JavaClassIdentifierContext;

OParser.JavaClassIdentifierContext = JavaClassIdentifierContext;

JavaClassIdentifierContext.prototype.java_identifier_expression = function() {
    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
};
JavaClassIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaClassIdentifier(this);
	}
};

JavaClassIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaClassIdentifier(this);
	}
};


function JavaChildClassIdentifierContext(parser, ctx) {
	Java_class_identifier_expressionContext.call(this, parser);
    this.parent = null; // Java_class_identifier_expressionContext;
    this.name = null; // Token;
    Java_class_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaChildClassIdentifierContext.prototype = Object.create(Java_class_identifier_expressionContext.prototype);
JavaChildClassIdentifierContext.prototype.constructor = JavaChildClassIdentifierContext;

OParser.JavaChildClassIdentifierContext = JavaChildClassIdentifierContext;

JavaChildClassIdentifierContext.prototype.java_class_identifier_expression = function() {
    return this.getTypedRuleContext(Java_class_identifier_expressionContext,0);
};

JavaChildClassIdentifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(OParser.DOLLAR_IDENTIFIER, 0);
};
JavaChildClassIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaChildClassIdentifier(this);
	}
};

JavaChildClassIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaChildClassIdentifier(this);
	}
};



OParser.prototype.java_class_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_class_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 422;
    this.enterRecursionRule(localctx, 422, OParser.RULE_java_class_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaClassIdentifierContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2479;
        localctx.klass = this.java_identifier_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2485;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,218,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaChildClassIdentifierContext(this, new Java_class_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_java_class_identifier_expression);
                this.state = 2481;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2482;
                localctx.name = this.match(OParser.DOLLAR_IDENTIFIER); 
            }
            this.state = 2487;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,218,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_java_literal_expression;
    return this;
}

Java_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_literal_expressionContext.prototype.constructor = Java_literal_expressionContext;


 
Java_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaBooleanLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaBooleanLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaBooleanLiteralContext.prototype.constructor = JavaBooleanLiteralContext;

OParser.JavaBooleanLiteralContext = JavaBooleanLiteralContext;

JavaBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(OParser.BOOLEAN_LITERAL, 0);
};
JavaBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaBooleanLiteral(this);
	}
};

JavaBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaBooleanLiteral(this);
	}
};


function JavaCharacterLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaCharacterLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaCharacterLiteralContext.prototype.constructor = JavaCharacterLiteralContext;

OParser.JavaCharacterLiteralContext = JavaCharacterLiteralContext;

JavaCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(OParser.CHAR_LITERAL, 0);
};
JavaCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaCharacterLiteral(this);
	}
};

JavaCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaCharacterLiteral(this);
	}
};


function JavaIntegerLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaIntegerLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaIntegerLiteralContext.prototype.constructor = JavaIntegerLiteralContext;

OParser.JavaIntegerLiteralContext = JavaIntegerLiteralContext;

JavaIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(OParser.INTEGER_LITERAL, 0);
};
JavaIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaIntegerLiteral(this);
	}
};

JavaIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaIntegerLiteral(this);
	}
};


function JavaTextLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaTextLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaTextLiteralContext.prototype.constructor = JavaTextLiteralContext;

OParser.JavaTextLiteralContext = JavaTextLiteralContext;

JavaTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(OParser.TEXT_LITERAL, 0);
};
JavaTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaTextLiteral(this);
	}
};

JavaTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaTextLiteral(this);
	}
};


function JavaDecimalLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaDecimalLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaDecimalLiteralContext.prototype.constructor = JavaDecimalLiteralContext;

OParser.JavaDecimalLiteralContext = JavaDecimalLiteralContext;

JavaDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(OParser.DECIMAL_LITERAL, 0);
};
JavaDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJavaDecimalLiteral(this);
	}
};

JavaDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJavaDecimalLiteral(this);
	}
};



OParser.Java_literal_expressionContext = Java_literal_expressionContext;

OParser.prototype.java_literal_expression = function() {

    var localctx = new Java_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 424, OParser.RULE_java_literal_expression);
    try {
        this.state = 2493;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.INTEGER_LITERAL:
            localctx = new JavaIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2488;
            localctx.t = this.match(OParser.INTEGER_LITERAL);
            break;
        case OParser.DECIMAL_LITERAL:
            localctx = new JavaDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2489;
            localctx.t = this.match(OParser.DECIMAL_LITERAL);
            break;
        case OParser.TEXT_LITERAL:
            localctx = new JavaTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2490;
            localctx.t = this.match(OParser.TEXT_LITERAL);
            break;
        case OParser.BOOLEAN_LITERAL:
            localctx = new JavaBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2491;
            localctx.t = this.match(OParser.BOOLEAN_LITERAL);
            break;
        case OParser.CHAR_LITERAL:
            localctx = new JavaCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2492;
            localctx.t = this.match(OParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_java_identifier;
    return this;
}

Java_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_identifierContext.prototype.constructor = Java_identifierContext;

Java_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(OParser.VARIABLE_IDENTIFIER, 0);
};

Java_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(OParser.SYMBOL_IDENTIFIER, 0);
};

Java_identifierContext.prototype.NATIVE_IDENTIFIER = function() {
    return this.getToken(OParser.NATIVE_IDENTIFIER, 0);
};

Java_identifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(OParser.DOLLAR_IDENTIFIER, 0);
};

Java_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(OParser.TYPE_IDENTIFIER, 0);
};

Java_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(OParser.BOOLEAN, 0);
};

Java_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(OParser.CHARACTER, 0);
};

Java_identifierContext.prototype.TEXT = function() {
    return this.getToken(OParser.TEXT, 0);
};

Java_identifierContext.prototype.INTEGER = function() {
    return this.getToken(OParser.INTEGER, 0);
};

Java_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(OParser.DECIMAL, 0);
};

Java_identifierContext.prototype.DATE = function() {
    return this.getToken(OParser.DATE, 0);
};

Java_identifierContext.prototype.TIME = function() {
    return this.getToken(OParser.TIME, 0);
};

Java_identifierContext.prototype.DATETIME = function() {
    return this.getToken(OParser.DATETIME, 0);
};

Java_identifierContext.prototype.PERIOD = function() {
    return this.getToken(OParser.PERIOD, 0);
};

Java_identifierContext.prototype.VERSION = function() {
    return this.getToken(OParser.VERSION, 0);
};

Java_identifierContext.prototype.UUID = function() {
    return this.getToken(OParser.UUID, 0);
};

Java_identifierContext.prototype.HTML = function() {
    return this.getToken(OParser.HTML, 0);
};

Java_identifierContext.prototype.READ = function() {
    return this.getToken(OParser.READ, 0);
};

Java_identifierContext.prototype.WRITE = function() {
    return this.getToken(OParser.WRITE, 0);
};

Java_identifierContext.prototype.TEST = function() {
    return this.getToken(OParser.TEST, 0);
};

Java_identifierContext.prototype.SELF = function() {
    return this.getToken(OParser.SELF, 0);
};

Java_identifierContext.prototype.NONE = function() {
    return this.getToken(OParser.NONE, 0);
};

Java_identifierContext.prototype.NULL = function() {
    return this.getToken(OParser.NULL, 0);
};

Java_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJava_identifier(this);
	}
};

Java_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJava_identifier(this);
	}
};




OParser.Java_identifierContext = Java_identifierContext;

OParser.prototype.java_identifier = function() {

    var localctx = new Java_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, OParser.RULE_java_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2495;
        _la = this._input.LA(1);
        if(!(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.HTML - 48)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (OParser.NONE - 120)) | (1 << (OParser.NULL - 120)) | (1 << (OParser.READ - 120)) | (1 << (OParser.SELF - 120)) | (1 << (OParser.TEST - 120)))) !== 0) || ((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (OParser.WRITE - 158)) | (1 << (OParser.SYMBOL_IDENTIFIER - 158)) | (1 << (OParser.TYPE_IDENTIFIER - 158)) | (1 << (OParser.VARIABLE_IDENTIFIER - 158)) | (1 << (OParser.NATIVE_IDENTIFIER - 158)) | (1 << (OParser.DOLLAR_IDENTIFIER - 158)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_csharp_statement;
    return this;
}

Csharp_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_statementContext.prototype.constructor = Csharp_statementContext;


 
Csharp_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpReturnStatementContext(parser, ctx) {
	Csharp_statementContext.call(this, parser);
    this.exp = null; // Csharp_expressionContext;
    Csharp_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpReturnStatementContext.prototype = Object.create(Csharp_statementContext.prototype);
CSharpReturnStatementContext.prototype.constructor = CSharpReturnStatementContext;

OParser.CSharpReturnStatementContext = CSharpReturnStatementContext;

CSharpReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(OParser.RETURN, 0);
};

CSharpReturnStatementContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

CSharpReturnStatementContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCSharpReturnStatement(this);
	}
};

CSharpReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCSharpReturnStatement(this);
	}
};


function CSharpStatementContext(parser, ctx) {
	Csharp_statementContext.call(this, parser);
    this.exp = null; // Csharp_expressionContext;
    Csharp_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpStatementContext.prototype = Object.create(Csharp_statementContext.prototype);
CSharpStatementContext.prototype.constructor = CSharpStatementContext;

OParser.CSharpStatementContext = CSharpStatementContext;

CSharpStatementContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

CSharpStatementContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCSharpStatement(this);
	}
};

CSharpStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCSharpStatement(this);
	}
};



OParser.Csharp_statementContext = Csharp_statementContext;

OParser.prototype.csharp_statement = function() {

    var localctx = new Csharp_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, OParser.RULE_csharp_statement);
    try {
        this.state = 2504;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.RETURN:
            localctx = new CSharpReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2497;
            this.match(OParser.RETURN);
            this.state = 2498;
            localctx.exp = this.csharp_expression(0);
            this.state = 2499;
            this.match(OParser.SEMI);
            break;
        case OParser.LPAR:
        case OParser.BOOLEAN:
        case OParser.CHARACTER:
        case OParser.TEXT:
        case OParser.INTEGER:
        case OParser.DECIMAL:
        case OParser.DATE:
        case OParser.TIME:
        case OParser.DATETIME:
        case OParser.PERIOD:
        case OParser.VERSION:
        case OParser.UUID:
        case OParser.HTML:
        case OParser.NONE:
        case OParser.NULL:
        case OParser.READ:
        case OParser.SELF:
        case OParser.TEST:
        case OParser.THIS:
        case OParser.WRITE:
        case OParser.BOOLEAN_LITERAL:
        case OParser.CHAR_LITERAL:
        case OParser.SYMBOL_IDENTIFIER:
        case OParser.TYPE_IDENTIFIER:
        case OParser.VARIABLE_IDENTIFIER:
        case OParser.DOLLAR_IDENTIFIER:
        case OParser.TEXT_LITERAL:
        case OParser.INTEGER_LITERAL:
        case OParser.DECIMAL_LITERAL:
            localctx = new CSharpStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2501;
            localctx.exp = this.csharp_expression(0);
            this.state = 2502;
            this.match(OParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_csharp_expression;
    return this;
}

Csharp_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_expressionContext.prototype.constructor = Csharp_expressionContext;


 
Csharp_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CSharpSelectorExpressionContext(parser, ctx) {
	Csharp_expressionContext.call(this, parser);
    this.parent = null; // Csharp_expressionContext;
    this.child = null; // Csharp_selector_expressionContext;
    Csharp_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpSelectorExpressionContext.prototype = Object.create(Csharp_expressionContext.prototype);
CSharpSelectorExpressionContext.prototype.constructor = CSharpSelectorExpressionContext;

OParser.CSharpSelectorExpressionContext = CSharpSelectorExpressionContext;

CSharpSelectorExpressionContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};

CSharpSelectorExpressionContext.prototype.csharp_selector_expression = function() {
    return this.getTypedRuleContext(Csharp_selector_expressionContext,0);
};
CSharpSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCSharpSelectorExpression(this);
	}
};

CSharpSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCSharpSelectorExpression(this);
	}
};


function CSharpPrimaryExpressionContext(parser, ctx) {
	Csharp_expressionContext.call(this, parser);
    this.exp = null; // Csharp_primary_expressionContext;
    Csharp_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpPrimaryExpressionContext.prototype = Object.create(Csharp_expressionContext.prototype);
CSharpPrimaryExpressionContext.prototype.constructor = CSharpPrimaryExpressionContext;

OParser.CSharpPrimaryExpressionContext = CSharpPrimaryExpressionContext;

CSharpPrimaryExpressionContext.prototype.csharp_primary_expression = function() {
    return this.getTypedRuleContext(Csharp_primary_expressionContext,0);
};
CSharpPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCSharpPrimaryExpression(this);
	}
};

CSharpPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCSharpPrimaryExpression(this);
	}
};



OParser.prototype.csharp_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Csharp_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 430;
    this.enterRecursionRule(localctx, 430, OParser.RULE_csharp_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new CSharpPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2507;
        localctx.exp = this.csharp_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2513;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,221,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CSharpSelectorExpressionContext(this, new Csharp_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_csharp_expression);
                this.state = 2509;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2510;
                localctx.child = this.csharp_selector_expression(); 
            }
            this.state = 2515;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,221,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Csharp_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_csharp_primary_expression;
    return this;
}

Csharp_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_primary_expressionContext.prototype.constructor = Csharp_primary_expressionContext;

Csharp_primary_expressionContext.prototype.csharp_this_expression = function() {
    return this.getTypedRuleContext(Csharp_this_expressionContext,0);
};

Csharp_primary_expressionContext.prototype.csharp_new_expression = function() {
    return this.getTypedRuleContext(Csharp_new_expressionContext,0);
};

Csharp_primary_expressionContext.prototype.csharp_parenthesis_expression = function() {
    return this.getTypedRuleContext(Csharp_parenthesis_expressionContext,0);
};

Csharp_primary_expressionContext.prototype.csharp_identifier_expression = function() {
    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
};

Csharp_primary_expressionContext.prototype.csharp_literal_expression = function() {
    return this.getTypedRuleContext(Csharp_literal_expressionContext,0);
};

Csharp_primary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCsharp_primary_expression(this);
	}
};

Csharp_primary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCsharp_primary_expression(this);
	}
};




OParser.Csharp_primary_expressionContext = Csharp_primary_expressionContext;

OParser.prototype.csharp_primary_expression = function() {

    var localctx = new Csharp_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, OParser.RULE_csharp_primary_expression);
    try {
        this.state = 2521;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2516;
            this.csharp_this_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2517;
            this.csharp_new_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2518;
            this.csharp_parenthesis_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2519;
            this.csharp_identifier_expression(0);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2520;
            this.csharp_literal_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_this_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_csharp_this_expression;
    return this;
}

Csharp_this_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_this_expressionContext.prototype.constructor = Csharp_this_expressionContext;

Csharp_this_expressionContext.prototype.this_expression = function() {
    return this.getTypedRuleContext(This_expressionContext,0);
};

Csharp_this_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCsharp_this_expression(this);
	}
};

Csharp_this_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCsharp_this_expression(this);
	}
};




OParser.Csharp_this_expressionContext = Csharp_this_expressionContext;

OParser.prototype.csharp_this_expression = function() {

    var localctx = new Csharp_this_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 434, OParser.RULE_csharp_this_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2523;
        this.this_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_new_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_csharp_new_expression;
    return this;
}

Csharp_new_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_new_expressionContext.prototype.constructor = Csharp_new_expressionContext;

Csharp_new_expressionContext.prototype.new_token = function() {
    return this.getTypedRuleContext(New_tokenContext,0);
};

Csharp_new_expressionContext.prototype.csharp_method_expression = function() {
    return this.getTypedRuleContext(Csharp_method_expressionContext,0);
};

Csharp_new_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCsharp_new_expression(this);
	}
};

Csharp_new_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCsharp_new_expression(this);
	}
};




OParser.Csharp_new_expressionContext = Csharp_new_expressionContext;

OParser.prototype.csharp_new_expression = function() {

    var localctx = new Csharp_new_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 436, OParser.RULE_csharp_new_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2525;
        this.new_token();
        this.state = 2526;
        this.csharp_method_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_csharp_selector_expression;
    return this;
}

Csharp_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_selector_expressionContext.prototype.constructor = Csharp_selector_expressionContext;


 
Csharp_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpMethodExpressionContext(parser, ctx) {
	Csharp_selector_expressionContext.call(this, parser);
    this.exp = null; // Csharp_method_expressionContext;
    Csharp_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpMethodExpressionContext.prototype = Object.create(Csharp_selector_expressionContext.prototype);
CSharpMethodExpressionContext.prototype.constructor = CSharpMethodExpressionContext;

OParser.CSharpMethodExpressionContext = CSharpMethodExpressionContext;

CSharpMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(OParser.DOT, 0);
};

CSharpMethodExpressionContext.prototype.csharp_method_expression = function() {
    return this.getTypedRuleContext(Csharp_method_expressionContext,0);
};
CSharpMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCSharpMethodExpression(this);
	}
};

CSharpMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCSharpMethodExpression(this);
	}
};


function CSharpItemExpressionContext(parser, ctx) {
	Csharp_selector_expressionContext.call(this, parser);
    this.exp = null; // Csharp_item_expressionContext;
    Csharp_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpItemExpressionContext.prototype = Object.create(Csharp_selector_expressionContext.prototype);
CSharpItemExpressionContext.prototype.constructor = CSharpItemExpressionContext;

OParser.CSharpItemExpressionContext = CSharpItemExpressionContext;

CSharpItemExpressionContext.prototype.csharp_item_expression = function() {
    return this.getTypedRuleContext(Csharp_item_expressionContext,0);
};
CSharpItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCSharpItemExpression(this);
	}
};

CSharpItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCSharpItemExpression(this);
	}
};



OParser.Csharp_selector_expressionContext = Csharp_selector_expressionContext;

OParser.prototype.csharp_selector_expression = function() {

    var localctx = new Csharp_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, OParser.RULE_csharp_selector_expression);
    try {
        this.state = 2531;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.DOT:
            localctx = new CSharpMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2528;
            this.match(OParser.DOT);
            this.state = 2529;
            localctx.exp = this.csharp_method_expression();
            break;
        case OParser.LBRAK:
            localctx = new CSharpItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2530;
            localctx.exp = this.csharp_item_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_csharp_method_expression;
    this.name = null; // Csharp_identifierContext
    this.args = null; // Csharp_argumentsContext
    return this;
}

Csharp_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_method_expressionContext.prototype.constructor = Csharp_method_expressionContext;

Csharp_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Csharp_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Csharp_method_expressionContext.prototype.csharp_identifier = function() {
    return this.getTypedRuleContext(Csharp_identifierContext,0);
};

Csharp_method_expressionContext.prototype.csharp_arguments = function() {
    return this.getTypedRuleContext(Csharp_argumentsContext,0);
};

Csharp_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCsharp_method_expression(this);
	}
};

Csharp_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCsharp_method_expression(this);
	}
};




OParser.Csharp_method_expressionContext = Csharp_method_expressionContext;

OParser.prototype.csharp_method_expression = function() {

    var localctx = new Csharp_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, OParser.RULE_csharp_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2533;
        localctx.name = this.csharp_identifier();
        this.state = 2534;
        this.match(OParser.LPAR);
        this.state = 2536;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.LPAR || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.HTML - 48)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (OParser.NONE - 120)) | (1 << (OParser.NULL - 120)) | (1 << (OParser.READ - 120)) | (1 << (OParser.SELF - 120)) | (1 << (OParser.TEST - 120)) | (1 << (OParser.THIS - 120)))) !== 0) || ((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (OParser.WRITE - 158)) | (1 << (OParser.BOOLEAN_LITERAL - 158)) | (1 << (OParser.CHAR_LITERAL - 158)) | (1 << (OParser.SYMBOL_IDENTIFIER - 158)) | (1 << (OParser.TYPE_IDENTIFIER - 158)) | (1 << (OParser.VARIABLE_IDENTIFIER - 158)) | (1 << (OParser.DOLLAR_IDENTIFIER - 158)) | (1 << (OParser.TEXT_LITERAL - 158)) | (1 << (OParser.INTEGER_LITERAL - 158)) | (1 << (OParser.DECIMAL_LITERAL - 158)))) !== 0)) {
            this.state = 2535;
            localctx.args = this.csharp_arguments(0);
        }

        this.state = 2538;
        this.match(OParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_csharp_arguments;
    return this;
}

Csharp_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_argumentsContext.prototype.constructor = Csharp_argumentsContext;


 
Csharp_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CSharpArgumentListContext(parser, ctx) {
	Csharp_argumentsContext.call(this, parser);
    this.item = null; // Csharp_expressionContext;
    Csharp_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpArgumentListContext.prototype = Object.create(Csharp_argumentsContext.prototype);
CSharpArgumentListContext.prototype.constructor = CSharpArgumentListContext;

OParser.CSharpArgumentListContext = CSharpArgumentListContext;

CSharpArgumentListContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCSharpArgumentList(this);
	}
};

CSharpArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCSharpArgumentList(this);
	}
};


function CSharpArgumentListItemContext(parser, ctx) {
	Csharp_argumentsContext.call(this, parser);
    this.items = null; // Csharp_argumentsContext;
    this.item = null; // Csharp_expressionContext;
    Csharp_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpArgumentListItemContext.prototype = Object.create(Csharp_argumentsContext.prototype);
CSharpArgumentListItemContext.prototype.constructor = CSharpArgumentListItemContext;

OParser.CSharpArgumentListItemContext = CSharpArgumentListItemContext;

CSharpArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(OParser.COMMA, 0);
};

CSharpArgumentListItemContext.prototype.csharp_arguments = function() {
    return this.getTypedRuleContext(Csharp_argumentsContext,0);
};

CSharpArgumentListItemContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCSharpArgumentListItem(this);
	}
};

CSharpArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCSharpArgumentListItem(this);
	}
};



OParser.prototype.csharp_arguments = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Csharp_argumentsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 442;
    this.enterRecursionRule(localctx, 442, OParser.RULE_csharp_arguments, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new CSharpArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2541;
        localctx.item = this.csharp_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2548;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,225,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CSharpArgumentListItemContext(this, new Csharp_argumentsContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_csharp_arguments);
                this.state = 2543;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2544;
                this.match(OParser.COMMA);
                this.state = 2545;
                localctx.item = this.csharp_expression(0); 
            }
            this.state = 2550;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,225,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Csharp_item_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_csharp_item_expression;
    this.exp = null; // Csharp_expressionContext
    return this;
}

Csharp_item_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_item_expressionContext.prototype.constructor = Csharp_item_expressionContext;

Csharp_item_expressionContext.prototype.LBRAK = function() {
    return this.getToken(OParser.LBRAK, 0);
};

Csharp_item_expressionContext.prototype.RBRAK = function() {
    return this.getToken(OParser.RBRAK, 0);
};

Csharp_item_expressionContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};

Csharp_item_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCsharp_item_expression(this);
	}
};

Csharp_item_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCsharp_item_expression(this);
	}
};




OParser.Csharp_item_expressionContext = Csharp_item_expressionContext;

OParser.prototype.csharp_item_expression = function() {

    var localctx = new Csharp_item_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, OParser.RULE_csharp_item_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2551;
        this.match(OParser.LBRAK);
        this.state = 2552;
        localctx.exp = this.csharp_expression(0);
        this.state = 2553;
        this.match(OParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_csharp_parenthesis_expression;
    this.exp = null; // Csharp_expressionContext
    return this;
}

Csharp_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_parenthesis_expressionContext.prototype.constructor = Csharp_parenthesis_expressionContext;

Csharp_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(OParser.LPAR, 0);
};

Csharp_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(OParser.RPAR, 0);
};

Csharp_parenthesis_expressionContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};

Csharp_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCsharp_parenthesis_expression(this);
	}
};

Csharp_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCsharp_parenthesis_expression(this);
	}
};




OParser.Csharp_parenthesis_expressionContext = Csharp_parenthesis_expressionContext;

OParser.prototype.csharp_parenthesis_expression = function() {

    var localctx = new Csharp_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, OParser.RULE_csharp_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2555;
        this.match(OParser.LPAR);
        this.state = 2556;
        localctx.exp = this.csharp_expression(0);
        this.state = 2557;
        this.match(OParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_csharp_identifier_expression;
    return this;
}

Csharp_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_identifier_expressionContext.prototype.constructor = Csharp_identifier_expressionContext;


 
Csharp_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CSharpIdentifierContext(parser, ctx) {
	Csharp_identifier_expressionContext.call(this, parser);
    this.name = null; // Csharp_identifierContext;
    Csharp_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpIdentifierContext.prototype = Object.create(Csharp_identifier_expressionContext.prototype);
CSharpIdentifierContext.prototype.constructor = CSharpIdentifierContext;

OParser.CSharpIdentifierContext = CSharpIdentifierContext;

CSharpIdentifierContext.prototype.csharp_identifier = function() {
    return this.getTypedRuleContext(Csharp_identifierContext,0);
};
CSharpIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCSharpIdentifier(this);
	}
};

CSharpIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCSharpIdentifier(this);
	}
};


function CSharpChildIdentifierContext(parser, ctx) {
	Csharp_identifier_expressionContext.call(this, parser);
    this.parent = null; // Csharp_identifier_expressionContext;
    this.name = null; // Csharp_identifierContext;
    Csharp_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpChildIdentifierContext.prototype = Object.create(Csharp_identifier_expressionContext.prototype);
CSharpChildIdentifierContext.prototype.constructor = CSharpChildIdentifierContext;

OParser.CSharpChildIdentifierContext = CSharpChildIdentifierContext;

CSharpChildIdentifierContext.prototype.DOT = function() {
    return this.getToken(OParser.DOT, 0);
};

CSharpChildIdentifierContext.prototype.csharp_identifier_expression = function() {
    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
};

CSharpChildIdentifierContext.prototype.csharp_identifier = function() {
    return this.getTypedRuleContext(Csharp_identifierContext,0);
};
CSharpChildIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCSharpChildIdentifier(this);
	}
};

CSharpChildIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCSharpChildIdentifier(this);
	}
};


function CSharpPromptoIdentifierContext(parser, ctx) {
	Csharp_identifier_expressionContext.call(this, parser);
    Csharp_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpPromptoIdentifierContext.prototype = Object.create(Csharp_identifier_expressionContext.prototype);
CSharpPromptoIdentifierContext.prototype.constructor = CSharpPromptoIdentifierContext;

OParser.CSharpPromptoIdentifierContext = CSharpPromptoIdentifierContext;

CSharpPromptoIdentifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(OParser.DOLLAR_IDENTIFIER, 0);
};
CSharpPromptoIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCSharpPromptoIdentifier(this);
	}
};

CSharpPromptoIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCSharpPromptoIdentifier(this);
	}
};



OParser.prototype.csharp_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Csharp_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 448;
    this.enterRecursionRule(localctx, 448, OParser.RULE_csharp_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2562;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.DOLLAR_IDENTIFIER:
            localctx = new CSharpPromptoIdentifierContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 2560;
            this.match(OParser.DOLLAR_IDENTIFIER);
            break;
        case OParser.BOOLEAN:
        case OParser.CHARACTER:
        case OParser.TEXT:
        case OParser.INTEGER:
        case OParser.DECIMAL:
        case OParser.DATE:
        case OParser.TIME:
        case OParser.DATETIME:
        case OParser.PERIOD:
        case OParser.VERSION:
        case OParser.UUID:
        case OParser.HTML:
        case OParser.NONE:
        case OParser.NULL:
        case OParser.READ:
        case OParser.SELF:
        case OParser.TEST:
        case OParser.WRITE:
        case OParser.SYMBOL_IDENTIFIER:
        case OParser.TYPE_IDENTIFIER:
        case OParser.VARIABLE_IDENTIFIER:
            localctx = new CSharpIdentifierContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2561;
            localctx.name = this.csharp_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2569;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,227,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CSharpChildIdentifierContext(this, new Csharp_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_csharp_identifier_expression);
                this.state = 2564;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2565;
                this.match(OParser.DOT);
                this.state = 2566;
                localctx.name = this.csharp_identifier(); 
            }
            this.state = 2571;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,227,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Csharp_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_csharp_literal_expression;
    return this;
}

Csharp_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_literal_expressionContext.prototype.constructor = Csharp_literal_expressionContext;


 
Csharp_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpBooleanLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpBooleanLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpBooleanLiteralContext.prototype.constructor = CSharpBooleanLiteralContext;

OParser.CSharpBooleanLiteralContext = CSharpBooleanLiteralContext;

CSharpBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(OParser.BOOLEAN_LITERAL, 0);
};
CSharpBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCSharpBooleanLiteral(this);
	}
};

CSharpBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCSharpBooleanLiteral(this);
	}
};


function CSharpIntegerLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpIntegerLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpIntegerLiteralContext.prototype.constructor = CSharpIntegerLiteralContext;

OParser.CSharpIntegerLiteralContext = CSharpIntegerLiteralContext;

CSharpIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(OParser.INTEGER_LITERAL, 0);
};
CSharpIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCSharpIntegerLiteral(this);
	}
};

CSharpIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCSharpIntegerLiteral(this);
	}
};


function CSharpDecimalLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpDecimalLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpDecimalLiteralContext.prototype.constructor = CSharpDecimalLiteralContext;

OParser.CSharpDecimalLiteralContext = CSharpDecimalLiteralContext;

CSharpDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(OParser.DECIMAL_LITERAL, 0);
};
CSharpDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCSharpDecimalLiteral(this);
	}
};

CSharpDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCSharpDecimalLiteral(this);
	}
};


function CSharpCharacterLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpCharacterLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpCharacterLiteralContext.prototype.constructor = CSharpCharacterLiteralContext;

OParser.CSharpCharacterLiteralContext = CSharpCharacterLiteralContext;

CSharpCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(OParser.CHAR_LITERAL, 0);
};
CSharpCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCSharpCharacterLiteral(this);
	}
};

CSharpCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCSharpCharacterLiteral(this);
	}
};


function CSharpTextLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpTextLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpTextLiteralContext.prototype.constructor = CSharpTextLiteralContext;

OParser.CSharpTextLiteralContext = CSharpTextLiteralContext;

CSharpTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(OParser.TEXT_LITERAL, 0);
};
CSharpTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCSharpTextLiteral(this);
	}
};

CSharpTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCSharpTextLiteral(this);
	}
};



OParser.Csharp_literal_expressionContext = Csharp_literal_expressionContext;

OParser.prototype.csharp_literal_expression = function() {

    var localctx = new Csharp_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, OParser.RULE_csharp_literal_expression);
    try {
        this.state = 2577;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.INTEGER_LITERAL:
            localctx = new CSharpIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2572;
            this.match(OParser.INTEGER_LITERAL);
            break;
        case OParser.DECIMAL_LITERAL:
            localctx = new CSharpDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2573;
            this.match(OParser.DECIMAL_LITERAL);
            break;
        case OParser.TEXT_LITERAL:
            localctx = new CSharpTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2574;
            this.match(OParser.TEXT_LITERAL);
            break;
        case OParser.BOOLEAN_LITERAL:
            localctx = new CSharpBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2575;
            this.match(OParser.BOOLEAN_LITERAL);
            break;
        case OParser.CHAR_LITERAL:
            localctx = new CSharpCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2576;
            this.match(OParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_csharp_identifier;
    return this;
}

Csharp_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_identifierContext.prototype.constructor = Csharp_identifierContext;

Csharp_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(OParser.VARIABLE_IDENTIFIER, 0);
};

Csharp_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(OParser.SYMBOL_IDENTIFIER, 0);
};

Csharp_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(OParser.TYPE_IDENTIFIER, 0);
};

Csharp_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(OParser.BOOLEAN, 0);
};

Csharp_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(OParser.CHARACTER, 0);
};

Csharp_identifierContext.prototype.TEXT = function() {
    return this.getToken(OParser.TEXT, 0);
};

Csharp_identifierContext.prototype.INTEGER = function() {
    return this.getToken(OParser.INTEGER, 0);
};

Csharp_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(OParser.DECIMAL, 0);
};

Csharp_identifierContext.prototype.DATE = function() {
    return this.getToken(OParser.DATE, 0);
};

Csharp_identifierContext.prototype.TIME = function() {
    return this.getToken(OParser.TIME, 0);
};

Csharp_identifierContext.prototype.DATETIME = function() {
    return this.getToken(OParser.DATETIME, 0);
};

Csharp_identifierContext.prototype.PERIOD = function() {
    return this.getToken(OParser.PERIOD, 0);
};

Csharp_identifierContext.prototype.VERSION = function() {
    return this.getToken(OParser.VERSION, 0);
};

Csharp_identifierContext.prototype.UUID = function() {
    return this.getToken(OParser.UUID, 0);
};

Csharp_identifierContext.prototype.HTML = function() {
    return this.getToken(OParser.HTML, 0);
};

Csharp_identifierContext.prototype.READ = function() {
    return this.getToken(OParser.READ, 0);
};

Csharp_identifierContext.prototype.WRITE = function() {
    return this.getToken(OParser.WRITE, 0);
};

Csharp_identifierContext.prototype.TEST = function() {
    return this.getToken(OParser.TEST, 0);
};

Csharp_identifierContext.prototype.SELF = function() {
    return this.getToken(OParser.SELF, 0);
};

Csharp_identifierContext.prototype.NONE = function() {
    return this.getToken(OParser.NONE, 0);
};

Csharp_identifierContext.prototype.NULL = function() {
    return this.getToken(OParser.NULL, 0);
};

Csharp_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCsharp_identifier(this);
	}
};

Csharp_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCsharp_identifier(this);
	}
};




OParser.Csharp_identifierContext = Csharp_identifierContext;

OParser.prototype.csharp_identifier = function() {

    var localctx = new Csharp_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 452, OParser.RULE_csharp_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2579;
        _la = this._input.LA(1);
        if(!(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.HTML - 48)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (OParser.NONE - 120)) | (1 << (OParser.NULL - 120)) | (1 << (OParser.READ - 120)) | (1 << (OParser.SELF - 120)) | (1 << (OParser.TEST - 120)))) !== 0) || ((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (OParser.WRITE - 158)) | (1 << (OParser.SYMBOL_IDENTIFIER - 158)) | (1 << (OParser.TYPE_IDENTIFIER - 158)) | (1 << (OParser.VARIABLE_IDENTIFIER - 158)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_jsx_expression;
    return this;
}

Jsx_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_expressionContext.prototype.constructor = Jsx_expressionContext;

Jsx_expressionContext.prototype.jsx_element = function() {
    return this.getTypedRuleContext(Jsx_elementContext,0);
};

Jsx_expressionContext.prototype.jsx_fragment = function() {
    return this.getTypedRuleContext(Jsx_fragmentContext,0);
};

Jsx_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsx_expression(this);
	}
};

Jsx_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsx_expression(this);
	}
};




OParser.Jsx_expressionContext = Jsx_expressionContext;

OParser.prototype.jsx_expression = function() {

    var localctx = new Jsx_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, OParser.RULE_jsx_expression);
    try {
        this.state = 2583;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2581;
            this.jsx_element();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2582;
            this.jsx_fragment();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_jsx_element;
    return this;
}

Jsx_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_elementContext.prototype.constructor = Jsx_elementContext;


 
Jsx_elementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JsxSelfClosingContext(parser, ctx) {
	Jsx_elementContext.call(this, parser);
    this.jsx = null; // Jsx_self_closingContext;
    Jsx_elementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JsxSelfClosingContext.prototype = Object.create(Jsx_elementContext.prototype);
JsxSelfClosingContext.prototype.constructor = JsxSelfClosingContext;

OParser.JsxSelfClosingContext = JsxSelfClosingContext;

JsxSelfClosingContext.prototype.jsx_self_closing = function() {
    return this.getTypedRuleContext(Jsx_self_closingContext,0);
};
JsxSelfClosingContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsxSelfClosing(this);
	}
};

JsxSelfClosingContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsxSelfClosing(this);
	}
};


function JsxElementContext(parser, ctx) {
	Jsx_elementContext.call(this, parser);
    this.opening = null; // Jsx_openingContext;
    this.children_ = null; // Jsx_childrenContext;
    this.closing = null; // Jsx_closingContext;
    Jsx_elementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JsxElementContext.prototype = Object.create(Jsx_elementContext.prototype);
JsxElementContext.prototype.constructor = JsxElementContext;

OParser.JsxElementContext = JsxElementContext;

JsxElementContext.prototype.jsx_opening = function() {
    return this.getTypedRuleContext(Jsx_openingContext,0);
};

JsxElementContext.prototype.jsx_closing = function() {
    return this.getTypedRuleContext(Jsx_closingContext,0);
};

JsxElementContext.prototype.jsx_children = function() {
    return this.getTypedRuleContext(Jsx_childrenContext,0);
};
JsxElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsxElement(this);
	}
};

JsxElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsxElement(this);
	}
};



OParser.Jsx_elementContext = Jsx_elementContext;

OParser.prototype.jsx_element = function() {

    var localctx = new Jsx_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, OParser.RULE_jsx_element);
    try {
        this.state = 2592;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
        switch(la_) {
        case 1:
            localctx = new JsxSelfClosingContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2585;
            localctx.jsx = this.jsx_self_closing();
            break;

        case 2:
            localctx = new JsxElementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2586;
            localctx.opening = this.jsx_opening();
            this.state = 2588;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
            if(la_===1) {
                this.state = 2587;
                localctx.children_ = this.jsx_children();

            }
            this.state = 2590;
            localctx.closing = this.jsx_closing();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_fragmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_jsx_fragment;
    this.children_ = null; // Jsx_childrenContext
    return this;
}

Jsx_fragmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_fragmentContext.prototype.constructor = Jsx_fragmentContext;

Jsx_fragmentContext.prototype.jsx_fragment_start = function() {
    return this.getTypedRuleContext(Jsx_fragment_startContext,0);
};

Jsx_fragmentContext.prototype.jsx_fragment_end = function() {
    return this.getTypedRuleContext(Jsx_fragment_endContext,0);
};

Jsx_fragmentContext.prototype.jsx_children = function() {
    return this.getTypedRuleContext(Jsx_childrenContext,0);
};

Jsx_fragmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsx_fragment(this);
	}
};

Jsx_fragmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsx_fragment(this);
	}
};




OParser.Jsx_fragmentContext = Jsx_fragmentContext;

OParser.prototype.jsx_fragment = function() {

    var localctx = new Jsx_fragmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, OParser.RULE_jsx_fragment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2594;
        this.jsx_fragment_start();
        this.state = 2596;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
        if(la_===1) {
            this.state = 2595;
            localctx.children_ = this.jsx_children();

        }
        this.state = 2598;
        this.jsx_fragment_end();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_fragment_startContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_jsx_fragment_start;
    return this;
}

Jsx_fragment_startContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_fragment_startContext.prototype.constructor = Jsx_fragment_startContext;

Jsx_fragment_startContext.prototype.LT = function() {
    return this.getToken(OParser.LT, 0);
};

Jsx_fragment_startContext.prototype.GT = function() {
    return this.getToken(OParser.GT, 0);
};

Jsx_fragment_startContext.prototype.LTGT = function() {
    return this.getToken(OParser.LTGT, 0);
};

Jsx_fragment_startContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsx_fragment_start(this);
	}
};

Jsx_fragment_startContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsx_fragment_start(this);
	}
};




OParser.Jsx_fragment_startContext = Jsx_fragment_startContext;

OParser.prototype.jsx_fragment_start = function() {

    var localctx = new Jsx_fragment_startContext(this, this._ctx, this.state);
    this.enterRule(localctx, 460, OParser.RULE_jsx_fragment_start);
    try {
        this.state = 2603;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.LT:
            this.enterOuterAlt(localctx, 1);
            this.state = 2600;
            this.match(OParser.LT);
            this.state = 2601;
            this.match(OParser.GT);
            break;
        case OParser.LTGT:
            this.enterOuterAlt(localctx, 2);
            this.state = 2602;
            this.match(OParser.LTGT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_fragment_endContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_jsx_fragment_end;
    return this;
}

Jsx_fragment_endContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_fragment_endContext.prototype.constructor = Jsx_fragment_endContext;

Jsx_fragment_endContext.prototype.LT = function() {
    return this.getToken(OParser.LT, 0);
};

Jsx_fragment_endContext.prototype.SLASH = function() {
    return this.getToken(OParser.SLASH, 0);
};

Jsx_fragment_endContext.prototype.GT = function() {
    return this.getToken(OParser.GT, 0);
};

Jsx_fragment_endContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsx_fragment_end(this);
	}
};

Jsx_fragment_endContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsx_fragment_end(this);
	}
};




OParser.Jsx_fragment_endContext = Jsx_fragment_endContext;

OParser.prototype.jsx_fragment_end = function() {

    var localctx = new Jsx_fragment_endContext(this, this._ctx, this.state);
    this.enterRule(localctx, 462, OParser.RULE_jsx_fragment_end);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2605;
        this.match(OParser.LT);
        this.state = 2606;
        this.match(OParser.SLASH);
        this.state = 2607;
        this.match(OParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_self_closingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_jsx_self_closing;
    this.name = null; // Jsx_element_nameContext
    this.attributes = null; // Jsx_attributeContext
    return this;
}

Jsx_self_closingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_self_closingContext.prototype.constructor = Jsx_self_closingContext;

Jsx_self_closingContext.prototype.LT = function() {
    return this.getToken(OParser.LT, 0);
};

Jsx_self_closingContext.prototype.ws_plus = function() {
    return this.getTypedRuleContext(Ws_plusContext,0);
};

Jsx_self_closingContext.prototype.SLASH = function() {
    return this.getToken(OParser.SLASH, 0);
};

Jsx_self_closingContext.prototype.GT = function() {
    return this.getToken(OParser.GT, 0);
};

Jsx_self_closingContext.prototype.jsx_element_name = function() {
    return this.getTypedRuleContext(Jsx_element_nameContext,0);
};

Jsx_self_closingContext.prototype.jsx_attribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Jsx_attributeContext);
    } else {
        return this.getTypedRuleContext(Jsx_attributeContext,i);
    }
};

Jsx_self_closingContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsx_self_closing(this);
	}
};

Jsx_self_closingContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsx_self_closing(this);
	}
};




OParser.Jsx_self_closingContext = Jsx_self_closingContext;

OParser.prototype.jsx_self_closing = function() {

    var localctx = new Jsx_self_closingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 464, OParser.RULE_jsx_self_closing);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2609;
        this.match(OParser.LT);
        this.state = 2610;
        localctx.name = this.jsx_element_name();
        this.state = 2611;
        this.ws_plus();
        this.state = 2615;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT) | (1 << OParser.SWIFT))) !== 0) || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.METHOD_T - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ABSTRACT - 48)) | (1 << (OParser.ALL - 48)) | (1 << (OParser.ALWAYS - 48)) | (1 << (OParser.AND - 48)) | (1 << (OParser.ANY - 48)) | (1 << (OParser.AS - 48)) | (1 << (OParser.ASC - 48)) | (1 << (OParser.ATTR - 48)) | (1 << (OParser.ATTRIBUTE - 48)) | (1 << (OParser.ATTRIBUTES - 48)) | (1 << (OParser.BINDINGS - 48)) | (1 << (OParser.BREAK - 48)) | (1 << (OParser.BY - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (OParser.CASE - 80)) | (1 << (OParser.CATCH - 80)) | (1 << (OParser.CATEGORY - 80)) | (1 << (OParser.CLASS - 80)) | (1 << (OParser.CLOSE - 80)) | (1 << (OParser.CONTAINS - 80)) | (1 << (OParser.DEF - 80)) | (1 << (OParser.DEFAULT - 80)) | (1 << (OParser.DEFINE - 80)) | (1 << (OParser.DELETE - 80)) | (1 << (OParser.DESC - 80)) | (1 << (OParser.DO - 80)) | (1 << (OParser.DOING - 80)) | (1 << (OParser.EACH - 80)) | (1 << (OParser.ELSE - 80)) | (1 << (OParser.ENUM - 80)) | (1 << (OParser.ENUMERATED - 80)) | (1 << (OParser.EXCEPT - 80)) | (1 << (OParser.EXECUTE - 80)) | (1 << (OParser.EXPECTING - 80)) | (1 << (OParser.EXTENDS - 80)) | (1 << (OParser.FETCH - 80)) | (1 << (OParser.FILTERED - 80)) | (1 << (OParser.FINALLY - 80)) | (1 << (OParser.FLUSH - 80)) | (1 << (OParser.FOR - 80)) | (1 << (OParser.FROM - 80)) | (1 << (OParser.GETTER - 80)) | (1 << (OParser.HAS - 80)) | (1 << (OParser.IF - 80)) | (1 << (OParser.IN - 80)) | (1 << (OParser.INDEX - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (OParser.INVOKE - 112)) | (1 << (OParser.IS - 112)) | (1 << (OParser.MATCHING - 112)) | (1 << (OParser.METHOD - 112)) | (1 << (OParser.METHODS - 112)) | (1 << (OParser.MODULO - 112)) | (1 << (OParser.MUTABLE - 112)) | (1 << (OParser.NATIVE - 112)) | (1 << (OParser.NONE - 112)) | (1 << (OParser.NOT - 112)) | (1 << (OParser.NOTHING - 112)) | (1 << (OParser.NULL - 112)) | (1 << (OParser.ON - 112)) | (1 << (OParser.ONE - 112)) | (1 << (OParser.OPEN - 112)) | (1 << (OParser.OPERATOR - 112)) | (1 << (OParser.OR - 112)) | (1 << (OParser.ORDER - 112)) | (1 << (OParser.OTHERWISE - 112)) | (1 << (OParser.PASS - 112)) | (1 << (OParser.RAISE - 112)) | (1 << (OParser.READ - 112)) | (1 << (OParser.RECEIVING - 112)) | (1 << (OParser.RESOURCE - 112)) | (1 << (OParser.RETURN - 112)) | (1 << (OParser.RETURNING - 112)) | (1 << (OParser.ROWS - 112)) | (1 << (OParser.SELF - 112)) | (1 << (OParser.SETTER - 112)) | (1 << (OParser.SINGLETON - 112)) | (1 << (OParser.SORTED - 112)) | (1 << (OParser.STORABLE - 112)))) !== 0) || ((((_la - 144)) & ~0x1f) == 0 && ((1 << (_la - 144)) & ((1 << (OParser.STORE - 144)) | (1 << (OParser.SWITCH - 144)) | (1 << (OParser.TEST - 144)) | (1 << (OParser.THIS - 144)) | (1 << (OParser.THROW - 144)) | (1 << (OParser.TO - 144)) | (1 << (OParser.TRY - 144)) | (1 << (OParser.VERIFYING - 144)) | (1 << (OParser.WIDGET - 144)) | (1 << (OParser.WITH - 144)) | (1 << (OParser.WHEN - 144)) | (1 << (OParser.WHERE - 144)) | (1 << (OParser.WHILE - 144)) | (1 << (OParser.WRITE - 144)) | (1 << (OParser.SYMBOL_IDENTIFIER - 144)) | (1 << (OParser.TYPE_IDENTIFIER - 144)) | (1 << (OParser.VARIABLE_IDENTIFIER - 144)))) !== 0)) {
            this.state = 2612;
            localctx.attributes = this.jsx_attribute();
            this.state = 2617;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2618;
        this.match(OParser.SLASH);
        this.state = 2619;
        this.match(OParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_openingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_jsx_opening;
    this.name = null; // Jsx_element_nameContext
    this.attributes = null; // Jsx_attributeContext
    return this;
}

Jsx_openingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_openingContext.prototype.constructor = Jsx_openingContext;

Jsx_openingContext.prototype.LT = function() {
    return this.getToken(OParser.LT, 0);
};

Jsx_openingContext.prototype.ws_plus = function() {
    return this.getTypedRuleContext(Ws_plusContext,0);
};

Jsx_openingContext.prototype.GT = function() {
    return this.getToken(OParser.GT, 0);
};

Jsx_openingContext.prototype.jsx_element_name = function() {
    return this.getTypedRuleContext(Jsx_element_nameContext,0);
};

Jsx_openingContext.prototype.jsx_attribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Jsx_attributeContext);
    } else {
        return this.getTypedRuleContext(Jsx_attributeContext,i);
    }
};

Jsx_openingContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsx_opening(this);
	}
};

Jsx_openingContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsx_opening(this);
	}
};




OParser.Jsx_openingContext = Jsx_openingContext;

OParser.prototype.jsx_opening = function() {

    var localctx = new Jsx_openingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 466, OParser.RULE_jsx_opening);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2621;
        this.match(OParser.LT);
        this.state = 2622;
        localctx.name = this.jsx_element_name();
        this.state = 2623;
        this.ws_plus();
        this.state = 2627;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT) | (1 << OParser.SWIFT))) !== 0) || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.METHOD_T - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ABSTRACT - 48)) | (1 << (OParser.ALL - 48)) | (1 << (OParser.ALWAYS - 48)) | (1 << (OParser.AND - 48)) | (1 << (OParser.ANY - 48)) | (1 << (OParser.AS - 48)) | (1 << (OParser.ASC - 48)) | (1 << (OParser.ATTR - 48)) | (1 << (OParser.ATTRIBUTE - 48)) | (1 << (OParser.ATTRIBUTES - 48)) | (1 << (OParser.BINDINGS - 48)) | (1 << (OParser.BREAK - 48)) | (1 << (OParser.BY - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (OParser.CASE - 80)) | (1 << (OParser.CATCH - 80)) | (1 << (OParser.CATEGORY - 80)) | (1 << (OParser.CLASS - 80)) | (1 << (OParser.CLOSE - 80)) | (1 << (OParser.CONTAINS - 80)) | (1 << (OParser.DEF - 80)) | (1 << (OParser.DEFAULT - 80)) | (1 << (OParser.DEFINE - 80)) | (1 << (OParser.DELETE - 80)) | (1 << (OParser.DESC - 80)) | (1 << (OParser.DO - 80)) | (1 << (OParser.DOING - 80)) | (1 << (OParser.EACH - 80)) | (1 << (OParser.ELSE - 80)) | (1 << (OParser.ENUM - 80)) | (1 << (OParser.ENUMERATED - 80)) | (1 << (OParser.EXCEPT - 80)) | (1 << (OParser.EXECUTE - 80)) | (1 << (OParser.EXPECTING - 80)) | (1 << (OParser.EXTENDS - 80)) | (1 << (OParser.FETCH - 80)) | (1 << (OParser.FILTERED - 80)) | (1 << (OParser.FINALLY - 80)) | (1 << (OParser.FLUSH - 80)) | (1 << (OParser.FOR - 80)) | (1 << (OParser.FROM - 80)) | (1 << (OParser.GETTER - 80)) | (1 << (OParser.HAS - 80)) | (1 << (OParser.IF - 80)) | (1 << (OParser.IN - 80)) | (1 << (OParser.INDEX - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (OParser.INVOKE - 112)) | (1 << (OParser.IS - 112)) | (1 << (OParser.MATCHING - 112)) | (1 << (OParser.METHOD - 112)) | (1 << (OParser.METHODS - 112)) | (1 << (OParser.MODULO - 112)) | (1 << (OParser.MUTABLE - 112)) | (1 << (OParser.NATIVE - 112)) | (1 << (OParser.NONE - 112)) | (1 << (OParser.NOT - 112)) | (1 << (OParser.NOTHING - 112)) | (1 << (OParser.NULL - 112)) | (1 << (OParser.ON - 112)) | (1 << (OParser.ONE - 112)) | (1 << (OParser.OPEN - 112)) | (1 << (OParser.OPERATOR - 112)) | (1 << (OParser.OR - 112)) | (1 << (OParser.ORDER - 112)) | (1 << (OParser.OTHERWISE - 112)) | (1 << (OParser.PASS - 112)) | (1 << (OParser.RAISE - 112)) | (1 << (OParser.READ - 112)) | (1 << (OParser.RECEIVING - 112)) | (1 << (OParser.RESOURCE - 112)) | (1 << (OParser.RETURN - 112)) | (1 << (OParser.RETURNING - 112)) | (1 << (OParser.ROWS - 112)) | (1 << (OParser.SELF - 112)) | (1 << (OParser.SETTER - 112)) | (1 << (OParser.SINGLETON - 112)) | (1 << (OParser.SORTED - 112)) | (1 << (OParser.STORABLE - 112)))) !== 0) || ((((_la - 144)) & ~0x1f) == 0 && ((1 << (_la - 144)) & ((1 << (OParser.STORE - 144)) | (1 << (OParser.SWITCH - 144)) | (1 << (OParser.TEST - 144)) | (1 << (OParser.THIS - 144)) | (1 << (OParser.THROW - 144)) | (1 << (OParser.TO - 144)) | (1 << (OParser.TRY - 144)) | (1 << (OParser.VERIFYING - 144)) | (1 << (OParser.WIDGET - 144)) | (1 << (OParser.WITH - 144)) | (1 << (OParser.WHEN - 144)) | (1 << (OParser.WHERE - 144)) | (1 << (OParser.WHILE - 144)) | (1 << (OParser.WRITE - 144)) | (1 << (OParser.SYMBOL_IDENTIFIER - 144)) | (1 << (OParser.TYPE_IDENTIFIER - 144)) | (1 << (OParser.VARIABLE_IDENTIFIER - 144)))) !== 0)) {
            this.state = 2624;
            localctx.attributes = this.jsx_attribute();
            this.state = 2629;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2630;
        this.match(OParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_closingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_jsx_closing;
    this.name = null; // Jsx_element_nameContext
    return this;
}

Jsx_closingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_closingContext.prototype.constructor = Jsx_closingContext;

Jsx_closingContext.prototype.LT = function() {
    return this.getToken(OParser.LT, 0);
};

Jsx_closingContext.prototype.SLASH = function() {
    return this.getToken(OParser.SLASH, 0);
};

Jsx_closingContext.prototype.GT = function() {
    return this.getToken(OParser.GT, 0);
};

Jsx_closingContext.prototype.jsx_element_name = function() {
    return this.getTypedRuleContext(Jsx_element_nameContext,0);
};

Jsx_closingContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsx_closing(this);
	}
};

Jsx_closingContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsx_closing(this);
	}
};




OParser.Jsx_closingContext = Jsx_closingContext;

OParser.prototype.jsx_closing = function() {

    var localctx = new Jsx_closingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 468, OParser.RULE_jsx_closing);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2632;
        this.match(OParser.LT);
        this.state = 2633;
        this.match(OParser.SLASH);
        this.state = 2634;
        localctx.name = this.jsx_element_name();
        this.state = 2635;
        this.match(OParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_element_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_jsx_element_name;
    return this;
}

Jsx_element_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_element_nameContext.prototype.constructor = Jsx_element_nameContext;

Jsx_element_nameContext.prototype.jsx_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Jsx_identifierContext);
    } else {
        return this.getTypedRuleContext(Jsx_identifierContext,i);
    }
};

Jsx_element_nameContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.DOT);
    } else {
        return this.getToken(OParser.DOT, i);
    }
};


Jsx_element_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsx_element_name(this);
	}
};

Jsx_element_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsx_element_name(this);
	}
};




OParser.Jsx_element_nameContext = Jsx_element_nameContext;

OParser.prototype.jsx_element_name = function() {

    var localctx = new Jsx_element_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 470, OParser.RULE_jsx_element_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2637;
        this.jsx_identifier();
        this.state = 2642;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===OParser.DOT) {
            this.state = 2638;
            this.match(OParser.DOT);
            this.state = 2639;
            this.jsx_identifier();
            this.state = 2644;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_jsx_identifier;
    return this;
}

Jsx_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_identifierContext.prototype.constructor = Jsx_identifierContext;

Jsx_identifierContext.prototype.identifier_or_keyword = function() {
    return this.getTypedRuleContext(Identifier_or_keywordContext,0);
};

Jsx_identifierContext.prototype.nospace_hyphen_identifier_or_keyword = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Nospace_hyphen_identifier_or_keywordContext);
    } else {
        return this.getTypedRuleContext(Nospace_hyphen_identifier_or_keywordContext,i);
    }
};

Jsx_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsx_identifier(this);
	}
};

Jsx_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsx_identifier(this);
	}
};




OParser.Jsx_identifierContext = Jsx_identifierContext;

OParser.prototype.jsx_identifier = function() {

    var localctx = new Jsx_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 472, OParser.RULE_jsx_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2645;
        this.identifier_or_keyword();
        this.state = 2649;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,237,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2646;
                this.nospace_hyphen_identifier_or_keyword(); 
            }
            this.state = 2651;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,237,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_attributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_jsx_attribute;
    this.name = null; // Jsx_identifierContext
    this.value = null; // Jsx_attribute_valueContext
    return this;
}

Jsx_attributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_attributeContext.prototype.constructor = Jsx_attributeContext;

Jsx_attributeContext.prototype.ws_plus = function() {
    return this.getTypedRuleContext(Ws_plusContext,0);
};

Jsx_attributeContext.prototype.jsx_identifier = function() {
    return this.getTypedRuleContext(Jsx_identifierContext,0);
};

Jsx_attributeContext.prototype.EQ = function() {
    return this.getToken(OParser.EQ, 0);
};

Jsx_attributeContext.prototype.jsx_attribute_value = function() {
    return this.getTypedRuleContext(Jsx_attribute_valueContext,0);
};

Jsx_attributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsx_attribute(this);
	}
};

Jsx_attributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsx_attribute(this);
	}
};




OParser.Jsx_attributeContext = Jsx_attributeContext;

OParser.prototype.jsx_attribute = function() {

    var localctx = new Jsx_attributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 474, OParser.RULE_jsx_attribute);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2652;
        localctx.name = this.jsx_identifier();
        this.state = 2655;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===OParser.EQ) {
            this.state = 2653;
            this.match(OParser.EQ);
            this.state = 2654;
            localctx.value = this.jsx_attribute_value();
        }

        this.state = 2657;
        this.ws_plus();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_attribute_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_jsx_attribute_value;
    return this;
}

Jsx_attribute_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_attribute_valueContext.prototype.constructor = Jsx_attribute_valueContext;


 
Jsx_attribute_valueContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JsxValueContext(parser, ctx) {
	Jsx_attribute_valueContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Jsx_attribute_valueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JsxValueContext.prototype = Object.create(Jsx_attribute_valueContext.prototype);
JsxValueContext.prototype.constructor = JsxValueContext;

OParser.JsxValueContext = JsxValueContext;

JsxValueContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

JsxValueContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

JsxValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
JsxValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsxValue(this);
	}
};

JsxValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsxValue(this);
	}
};


function JsxLiteralContext(parser, ctx) {
	Jsx_attribute_valueContext.call(this, parser);
    Jsx_attribute_valueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JsxLiteralContext.prototype = Object.create(Jsx_attribute_valueContext.prototype);
JsxLiteralContext.prototype.constructor = JsxLiteralContext;

OParser.JsxLiteralContext = JsxLiteralContext;

JsxLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(OParser.TEXT_LITERAL, 0);
};
JsxLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsxLiteral(this);
	}
};

JsxLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsxLiteral(this);
	}
};



OParser.Jsx_attribute_valueContext = Jsx_attribute_valueContext;

OParser.prototype.jsx_attribute_value = function() {

    var localctx = new Jsx_attribute_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 476, OParser.RULE_jsx_attribute_value);
    try {
        this.state = 2664;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.TEXT_LITERAL:
            localctx = new JsxLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2659;
            this.match(OParser.TEXT_LITERAL);
            break;
        case OParser.LCURL:
            localctx = new JsxValueContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2660;
            this.match(OParser.LCURL);
            this.state = 2661;
            localctx.exp = this.expression(0);
            this.state = 2662;
            this.match(OParser.RCURL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_childrenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_jsx_children;
    return this;
}

Jsx_childrenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_childrenContext.prototype.constructor = Jsx_childrenContext;

Jsx_childrenContext.prototype.jsx_child = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Jsx_childContext);
    } else {
        return this.getTypedRuleContext(Jsx_childContext,i);
    }
};

Jsx_childrenContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsx_children(this);
	}
};

Jsx_childrenContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsx_children(this);
	}
};




OParser.Jsx_childrenContext = Jsx_childrenContext;

OParser.prototype.jsx_children = function() {

    var localctx = new Jsx_childrenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 478, OParser.RULE_jsx_children);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2667; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2666;
        		this.jsx_child();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2669; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,240, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_childContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_jsx_child;
    return this;
}

Jsx_childContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_childContext.prototype.constructor = Jsx_childContext;


 
Jsx_childContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JsxTextContext(parser, ctx) {
	Jsx_childContext.call(this, parser);
    this.text = null; // Jsx_textContext;
    Jsx_childContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JsxTextContext.prototype = Object.create(Jsx_childContext.prototype);
JsxTextContext.prototype.constructor = JsxTextContext;

OParser.JsxTextContext = JsxTextContext;

JsxTextContext.prototype.jsx_text = function() {
    return this.getTypedRuleContext(Jsx_textContext,0);
};
JsxTextContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsxText(this);
	}
};

JsxTextContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsxText(this);
	}
};


function JsxChildContext(parser, ctx) {
	Jsx_childContext.call(this, parser);
    this.jsx = null; // Jsx_elementContext;
    Jsx_childContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JsxChildContext.prototype = Object.create(Jsx_childContext.prototype);
JsxChildContext.prototype.constructor = JsxChildContext;

OParser.JsxChildContext = JsxChildContext;

JsxChildContext.prototype.jsx_element = function() {
    return this.getTypedRuleContext(Jsx_elementContext,0);
};
JsxChildContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsxChild(this);
	}
};

JsxChildContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsxChild(this);
	}
};


function JsxCodeContext(parser, ctx) {
	Jsx_childContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Jsx_childContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JsxCodeContext.prototype = Object.create(Jsx_childContext.prototype);
JsxCodeContext.prototype.constructor = JsxCodeContext;

OParser.JsxCodeContext = JsxCodeContext;

JsxCodeContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

JsxCodeContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

JsxCodeContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
JsxCodeContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsxCode(this);
	}
};

JsxCodeContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsxCode(this);
	}
};



OParser.Jsx_childContext = Jsx_childContext;

OParser.prototype.jsx_child = function() {

    var localctx = new Jsx_childContext(this, this._ctx, this.state);
    this.enterRule(localctx, 480, OParser.RULE_jsx_child);
    var _la = 0; // Token type
    try {
        this.state = 2678;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.SPACE:
        case OParser.WS:
        case OParser.LF:
        case OParser.COMMENT:
        case OParser.JAVA:
        case OParser.CSHARP:
        case OParser.PYTHON2:
        case OParser.PYTHON3:
        case OParser.JAVASCRIPT:
        case OParser.SWIFT:
        case OParser.COLON:
        case OParser.SEMI:
        case OParser.COMMA:
        case OParser.RANGE:
        case OParser.DOT:
        case OParser.LPAR:
        case OParser.RPAR:
        case OParser.LBRAK:
        case OParser.RBRAK:
        case OParser.QMARK:
        case OParser.XMARK:
        case OParser.AMP:
        case OParser.AMP2:
        case OParser.PIPE:
        case OParser.PIPE2:
        case OParser.PLUS:
        case OParser.MINUS:
        case OParser.STAR:
        case OParser.SLASH:
        case OParser.BSLASH:
        case OParser.PERCENT:
        case OParser.GTE:
        case OParser.LTE:
        case OParser.LTGT:
        case OParser.LTCOLONGT:
        case OParser.EQ:
        case OParser.XEQ:
        case OParser.EQ2:
        case OParser.TEQ:
        case OParser.TILDE:
        case OParser.LARROW:
        case OParser.RARROW:
        case OParser.EGT:
        case OParser.BOOLEAN:
        case OParser.CHARACTER:
        case OParser.TEXT:
        case OParser.INTEGER:
        case OParser.DECIMAL:
        case OParser.DATE:
        case OParser.TIME:
        case OParser.DATETIME:
        case OParser.PERIOD:
        case OParser.VERSION:
        case OParser.METHOD_T:
        case OParser.CODE:
        case OParser.DOCUMENT:
        case OParser.BLOB:
        case OParser.IMAGE:
        case OParser.UUID:
        case OParser.ITERATOR:
        case OParser.CURSOR:
        case OParser.HTML:
        case OParser.ABSTRACT:
        case OParser.ALL:
        case OParser.ALWAYS:
        case OParser.AND:
        case OParser.ANY:
        case OParser.AS:
        case OParser.ASC:
        case OParser.ATTR:
        case OParser.ATTRIBUTE:
        case OParser.ATTRIBUTES:
        case OParser.BINDINGS:
        case OParser.BREAK:
        case OParser.BY:
        case OParser.CASE:
        case OParser.CATCH:
        case OParser.CATEGORY:
        case OParser.CLASS:
        case OParser.CLOSE:
        case OParser.CONTAINS:
        case OParser.DEF:
        case OParser.DEFAULT:
        case OParser.DEFINE:
        case OParser.DELETE:
        case OParser.DESC:
        case OParser.DO:
        case OParser.DOING:
        case OParser.EACH:
        case OParser.ELSE:
        case OParser.ENUM:
        case OParser.ENUMERATED:
        case OParser.EXCEPT:
        case OParser.EXECUTE:
        case OParser.EXPECTING:
        case OParser.EXTENDS:
        case OParser.FETCH:
        case OParser.FILTERED:
        case OParser.FINALLY:
        case OParser.FLUSH:
        case OParser.FOR:
        case OParser.FROM:
        case OParser.GETTER:
        case OParser.HAS:
        case OParser.IF:
        case OParser.IN:
        case OParser.INDEX:
        case OParser.INVOKE:
        case OParser.IS:
        case OParser.MATCHING:
        case OParser.METHOD:
        case OParser.METHODS:
        case OParser.MODULO:
        case OParser.MUTABLE:
        case OParser.NATIVE:
        case OParser.NONE:
        case OParser.NOT:
        case OParser.NOTHING:
        case OParser.NULL:
        case OParser.ON:
        case OParser.ONE:
        case OParser.OPEN:
        case OParser.OPERATOR:
        case OParser.OR:
        case OParser.ORDER:
        case OParser.OTHERWISE:
        case OParser.PASS:
        case OParser.RAISE:
        case OParser.READ:
        case OParser.RECEIVING:
        case OParser.RESOURCE:
        case OParser.RETURN:
        case OParser.RETURNING:
        case OParser.ROWS:
        case OParser.SELF:
        case OParser.SETTER:
        case OParser.SINGLETON:
        case OParser.SORTED:
        case OParser.STORABLE:
        case OParser.STORE:
        case OParser.SWITCH:
        case OParser.TEST:
        case OParser.THEN:
        case OParser.THIS:
        case OParser.THROW:
        case OParser.TO:
        case OParser.TRY:
        case OParser.VERIFYING:
        case OParser.WIDGET:
        case OParser.WITH:
        case OParser.WHEN:
        case OParser.WHERE:
        case OParser.WHILE:
        case OParser.WRITE:
        case OParser.BOOLEAN_LITERAL:
        case OParser.CHAR_LITERAL:
        case OParser.MIN_INTEGER:
        case OParser.MAX_INTEGER:
        case OParser.SYMBOL_IDENTIFIER:
        case OParser.TYPE_IDENTIFIER:
        case OParser.VARIABLE_IDENTIFIER:
        case OParser.NATIVE_IDENTIFIER:
        case OParser.DOLLAR_IDENTIFIER:
        case OParser.ARONDBASE_IDENTIFIER:
        case OParser.TEXT_LITERAL:
        case OParser.UUID_LITERAL:
        case OParser.INTEGER_LITERAL:
        case OParser.HEXA_LITERAL:
        case OParser.DECIMAL_LITERAL:
        case OParser.DATETIME_LITERAL:
        case OParser.TIME_LITERAL:
        case OParser.DATE_LITERAL:
        case OParser.PERIOD_LITERAL:
        case OParser.VERSION_LITERAL:
        case OParser.INSTRUCTION:
            localctx = new JsxTextContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2671;
            localctx.text = this.jsx_text();
            break;
        case OParser.LT:
            localctx = new JsxChildContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2672;
            localctx.jsx = this.jsx_element();
            break;
        case OParser.LCURL:
            localctx = new JsxCodeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2673;
            this.match(OParser.LCURL);
            this.state = 2675;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (OParser.LT - 36)) | (1 << (OParser.LTGT - 36)) | (1 << (OParser.LTCOLONGT - 36)) | (1 << (OParser.CODE - 36)) | (1 << (OParser.DOCUMENT - 36)) | (1 << (OParser.BLOB - 36)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (OParser.EXECUTE - 98)) | (1 << (OParser.FETCH - 98)) | (1 << (OParser.FILTERED - 98)) | (1 << (OParser.MUTABLE - 98)) | (1 << (OParser.NULL - 98)))) !== 0) || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (OParser.READ - 133)) | (1 << (OParser.SELF - 133)) | (1 << (OParser.SORTED - 133)) | (1 << (OParser.THIS - 133)) | (1 << (OParser.BOOLEAN_LITERAL - 133)) | (1 << (OParser.CHAR_LITERAL - 133)) | (1 << (OParser.MIN_INTEGER - 133)) | (1 << (OParser.MAX_INTEGER - 133)) | (1 << (OParser.SYMBOL_IDENTIFIER - 133)) | (1 << (OParser.TYPE_IDENTIFIER - 133)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (OParser.VARIABLE_IDENTIFIER - 165)) | (1 << (OParser.TEXT_LITERAL - 165)) | (1 << (OParser.UUID_LITERAL - 165)) | (1 << (OParser.INTEGER_LITERAL - 165)) | (1 << (OParser.HEXA_LITERAL - 165)) | (1 << (OParser.DECIMAL_LITERAL - 165)) | (1 << (OParser.DATETIME_LITERAL - 165)) | (1 << (OParser.TIME_LITERAL - 165)) | (1 << (OParser.DATE_LITERAL - 165)) | (1 << (OParser.PERIOD_LITERAL - 165)) | (1 << (OParser.VERSION_LITERAL - 165)))) !== 0)) {
                this.state = 2674;
                localctx.exp = this.expression(0);
            }

            this.state = 2677;
            this.match(OParser.RCURL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_textContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_jsx_text;
    return this;
}

Jsx_textContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_textContext.prototype.constructor = Jsx_textContext;

Jsx_textContext.prototype.LCURL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.LCURL);
    } else {
        return this.getToken(OParser.LCURL, i);
    }
};


Jsx_textContext.prototype.RCURL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.RCURL);
    } else {
        return this.getToken(OParser.RCURL, i);
    }
};


Jsx_textContext.prototype.LT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.LT);
    } else {
        return this.getToken(OParser.LT, i);
    }
};


Jsx_textContext.prototype.GT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.GT);
    } else {
        return this.getToken(OParser.GT, i);
    }
};


Jsx_textContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterJsx_text(this);
	}
};

Jsx_textContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitJsx_text(this);
	}
};




OParser.Jsx_textContext = Jsx_textContext;

OParser.prototype.jsx_text = function() {

    var localctx = new Jsx_textContext(this, this._ctx, this.state);
    this.enterRule(localctx, 482, OParser.RULE_jsx_text);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2681; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2680;
        		_la = this._input.LA(1);
        		if(_la<=0 || ((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (OParser.LCURL - 20)) | (1 << (OParser.RCURL - 20)) | (1 << (OParser.GT - 20)) | (1 << (OParser.LT - 20)))) !== 0)) {
        		this._errHandler.recoverInline(this);
        		}
        		else {
        			this._errHandler.reportMatch(this);
        		    this.consume();
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2683; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,243, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Css_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_css_expression;
    this.field = null; // Css_fieldContext
    return this;
}

Css_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Css_expressionContext.prototype.constructor = Css_expressionContext;

Css_expressionContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

Css_expressionContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

Css_expressionContext.prototype.css_field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Css_fieldContext);
    } else {
        return this.getTypedRuleContext(Css_fieldContext,i);
    }
};

Css_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCss_expression(this);
	}
};

Css_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCss_expression(this);
	}
};




OParser.Css_expressionContext = Css_expressionContext;

OParser.prototype.css_expression = function() {

    var localctx = new Css_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 484, OParser.RULE_css_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2685;
        this.match(OParser.LCURL);
        this.state = 2687; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2686;
            localctx.field = this.css_field();
            this.state = 2689; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT) | (1 << OParser.SWIFT) | (1 << OParser.MINUS))) !== 0) || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.METHOD_T - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ABSTRACT - 48)) | (1 << (OParser.ALL - 48)) | (1 << (OParser.ALWAYS - 48)) | (1 << (OParser.AND - 48)) | (1 << (OParser.ANY - 48)) | (1 << (OParser.AS - 48)) | (1 << (OParser.ASC - 48)) | (1 << (OParser.ATTR - 48)) | (1 << (OParser.ATTRIBUTE - 48)) | (1 << (OParser.ATTRIBUTES - 48)) | (1 << (OParser.BINDINGS - 48)) | (1 << (OParser.BREAK - 48)) | (1 << (OParser.BY - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (OParser.CASE - 80)) | (1 << (OParser.CATCH - 80)) | (1 << (OParser.CATEGORY - 80)) | (1 << (OParser.CLASS - 80)) | (1 << (OParser.CLOSE - 80)) | (1 << (OParser.CONTAINS - 80)) | (1 << (OParser.DEF - 80)) | (1 << (OParser.DEFAULT - 80)) | (1 << (OParser.DEFINE - 80)) | (1 << (OParser.DELETE - 80)) | (1 << (OParser.DESC - 80)) | (1 << (OParser.DO - 80)) | (1 << (OParser.DOING - 80)) | (1 << (OParser.EACH - 80)) | (1 << (OParser.ELSE - 80)) | (1 << (OParser.ENUM - 80)) | (1 << (OParser.ENUMERATED - 80)) | (1 << (OParser.EXCEPT - 80)) | (1 << (OParser.EXECUTE - 80)) | (1 << (OParser.EXPECTING - 80)) | (1 << (OParser.EXTENDS - 80)) | (1 << (OParser.FETCH - 80)) | (1 << (OParser.FILTERED - 80)) | (1 << (OParser.FINALLY - 80)) | (1 << (OParser.FLUSH - 80)) | (1 << (OParser.FOR - 80)) | (1 << (OParser.FROM - 80)) | (1 << (OParser.GETTER - 80)) | (1 << (OParser.HAS - 80)) | (1 << (OParser.IF - 80)) | (1 << (OParser.IN - 80)) | (1 << (OParser.INDEX - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (OParser.INVOKE - 112)) | (1 << (OParser.IS - 112)) | (1 << (OParser.MATCHING - 112)) | (1 << (OParser.METHOD - 112)) | (1 << (OParser.METHODS - 112)) | (1 << (OParser.MODULO - 112)) | (1 << (OParser.MUTABLE - 112)) | (1 << (OParser.NATIVE - 112)) | (1 << (OParser.NONE - 112)) | (1 << (OParser.NOT - 112)) | (1 << (OParser.NOTHING - 112)) | (1 << (OParser.NULL - 112)) | (1 << (OParser.ON - 112)) | (1 << (OParser.ONE - 112)) | (1 << (OParser.OPEN - 112)) | (1 << (OParser.OPERATOR - 112)) | (1 << (OParser.OR - 112)) | (1 << (OParser.ORDER - 112)) | (1 << (OParser.OTHERWISE - 112)) | (1 << (OParser.PASS - 112)) | (1 << (OParser.RAISE - 112)) | (1 << (OParser.READ - 112)) | (1 << (OParser.RECEIVING - 112)) | (1 << (OParser.RESOURCE - 112)) | (1 << (OParser.RETURN - 112)) | (1 << (OParser.RETURNING - 112)) | (1 << (OParser.ROWS - 112)) | (1 << (OParser.SELF - 112)) | (1 << (OParser.SETTER - 112)) | (1 << (OParser.SINGLETON - 112)) | (1 << (OParser.SORTED - 112)) | (1 << (OParser.STORABLE - 112)))) !== 0) || ((((_la - 144)) & ~0x1f) == 0 && ((1 << (_la - 144)) & ((1 << (OParser.STORE - 144)) | (1 << (OParser.SWITCH - 144)) | (1 << (OParser.TEST - 144)) | (1 << (OParser.THIS - 144)) | (1 << (OParser.THROW - 144)) | (1 << (OParser.TO - 144)) | (1 << (OParser.TRY - 144)) | (1 << (OParser.VERIFYING - 144)) | (1 << (OParser.WIDGET - 144)) | (1 << (OParser.WITH - 144)) | (1 << (OParser.WHEN - 144)) | (1 << (OParser.WHERE - 144)) | (1 << (OParser.WHILE - 144)) | (1 << (OParser.WRITE - 144)) | (1 << (OParser.SYMBOL_IDENTIFIER - 144)) | (1 << (OParser.TYPE_IDENTIFIER - 144)) | (1 << (OParser.VARIABLE_IDENTIFIER - 144)))) !== 0));
        this.state = 2691;
        this.match(OParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Css_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_css_field;
    this.name = null; // Css_identifierContext
    this.value = null; // Css_valueContext
    return this;
}

Css_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Css_fieldContext.prototype.constructor = Css_fieldContext;

Css_fieldContext.prototype.COLON = function() {
    return this.getToken(OParser.COLON, 0);
};

Css_fieldContext.prototype.SEMI = function() {
    return this.getToken(OParser.SEMI, 0);
};

Css_fieldContext.prototype.css_identifier = function() {
    return this.getTypedRuleContext(Css_identifierContext,0);
};

Css_fieldContext.prototype.css_value = function() {
    return this.getTypedRuleContext(Css_valueContext,0);
};

Css_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCss_field(this);
	}
};

Css_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCss_field(this);
	}
};




OParser.Css_fieldContext = Css_fieldContext;

OParser.prototype.css_field = function() {

    var localctx = new Css_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 486, OParser.RULE_css_field);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2693;
        localctx.name = this.css_identifier(0);
        this.state = 2694;
        this.match(OParser.COLON);
        this.state = 2695;
        localctx.value = this.css_value();
        this.state = 2696;
        this.match(OParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Css_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_css_identifier;
    return this;
}

Css_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Css_identifierContext.prototype.constructor = Css_identifierContext;

Css_identifierContext.prototype.identifier_or_keyword = function() {
    return this.getTypedRuleContext(Identifier_or_keywordContext,0);
};

Css_identifierContext.prototype.MINUS = function() {
    return this.getToken(OParser.MINUS, 0);
};

Css_identifierContext.prototype.nospace_identifier_or_keyword = function() {
    return this.getTypedRuleContext(Nospace_identifier_or_keywordContext,0);
};

Css_identifierContext.prototype.css_identifier = function() {
    return this.getTypedRuleContext(Css_identifierContext,0);
};

Css_identifierContext.prototype.nospace_hyphen_identifier_or_keyword = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Nospace_hyphen_identifier_or_keywordContext);
    } else {
        return this.getTypedRuleContext(Nospace_hyphen_identifier_or_keywordContext,i);
    }
};

Css_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCss_identifier(this);
	}
};

Css_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCss_identifier(this);
	}
};



OParser.prototype.css_identifier = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Css_identifierContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 488;
    this.enterRecursionRule(localctx, 488, OParser.RULE_css_identifier, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2702;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.JAVA:
        case OParser.CSHARP:
        case OParser.PYTHON2:
        case OParser.PYTHON3:
        case OParser.JAVASCRIPT:
        case OParser.SWIFT:
        case OParser.BOOLEAN:
        case OParser.CHARACTER:
        case OParser.TEXT:
        case OParser.INTEGER:
        case OParser.DECIMAL:
        case OParser.DATE:
        case OParser.TIME:
        case OParser.DATETIME:
        case OParser.PERIOD:
        case OParser.VERSION:
        case OParser.METHOD_T:
        case OParser.CODE:
        case OParser.DOCUMENT:
        case OParser.BLOB:
        case OParser.IMAGE:
        case OParser.UUID:
        case OParser.ITERATOR:
        case OParser.CURSOR:
        case OParser.HTML:
        case OParser.ABSTRACT:
        case OParser.ALL:
        case OParser.ALWAYS:
        case OParser.AND:
        case OParser.ANY:
        case OParser.AS:
        case OParser.ASC:
        case OParser.ATTR:
        case OParser.ATTRIBUTE:
        case OParser.ATTRIBUTES:
        case OParser.BINDINGS:
        case OParser.BREAK:
        case OParser.BY:
        case OParser.CASE:
        case OParser.CATCH:
        case OParser.CATEGORY:
        case OParser.CLASS:
        case OParser.CLOSE:
        case OParser.CONTAINS:
        case OParser.DEF:
        case OParser.DEFAULT:
        case OParser.DEFINE:
        case OParser.DELETE:
        case OParser.DESC:
        case OParser.DO:
        case OParser.DOING:
        case OParser.EACH:
        case OParser.ELSE:
        case OParser.ENUM:
        case OParser.ENUMERATED:
        case OParser.EXCEPT:
        case OParser.EXECUTE:
        case OParser.EXPECTING:
        case OParser.EXTENDS:
        case OParser.FETCH:
        case OParser.FILTERED:
        case OParser.FINALLY:
        case OParser.FLUSH:
        case OParser.FOR:
        case OParser.FROM:
        case OParser.GETTER:
        case OParser.HAS:
        case OParser.IF:
        case OParser.IN:
        case OParser.INDEX:
        case OParser.INVOKE:
        case OParser.IS:
        case OParser.MATCHING:
        case OParser.METHOD:
        case OParser.METHODS:
        case OParser.MODULO:
        case OParser.MUTABLE:
        case OParser.NATIVE:
        case OParser.NONE:
        case OParser.NOT:
        case OParser.NOTHING:
        case OParser.NULL:
        case OParser.ON:
        case OParser.ONE:
        case OParser.OPEN:
        case OParser.OPERATOR:
        case OParser.OR:
        case OParser.ORDER:
        case OParser.OTHERWISE:
        case OParser.PASS:
        case OParser.RAISE:
        case OParser.READ:
        case OParser.RECEIVING:
        case OParser.RESOURCE:
        case OParser.RETURN:
        case OParser.RETURNING:
        case OParser.ROWS:
        case OParser.SELF:
        case OParser.SETTER:
        case OParser.SINGLETON:
        case OParser.SORTED:
        case OParser.STORABLE:
        case OParser.STORE:
        case OParser.SWITCH:
        case OParser.TEST:
        case OParser.THIS:
        case OParser.THROW:
        case OParser.TO:
        case OParser.TRY:
        case OParser.VERIFYING:
        case OParser.WIDGET:
        case OParser.WITH:
        case OParser.WHEN:
        case OParser.WHERE:
        case OParser.WHILE:
        case OParser.WRITE:
        case OParser.SYMBOL_IDENTIFIER:
        case OParser.TYPE_IDENTIFIER:
        case OParser.VARIABLE_IDENTIFIER:
            this.state = 2699;
            this.identifier_or_keyword();
            break;
        case OParser.MINUS:
            this.state = 2700;
            this.match(OParser.MINUS);
            this.state = 2701;
            this.nospace_identifier_or_keyword();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2712;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,247,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Css_identifierContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, OParser.RULE_css_identifier);
                this.state = 2704;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2706; 
                this._errHandler.sync(this);
                var _alt = 1;
                do {
                	switch (_alt) {
                	case 1:
                		this.state = 2705;
                		this.nospace_hyphen_identifier_or_keyword();
                		break;
                	default:
                		throw new antlr4.error.NoViableAltException(this);
                	}
                	this.state = 2708; 
                	this._errHandler.sync(this);
                	_alt = this._interp.adaptivePredict(this._input,246, this._ctx);
                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER ); 
            }
            this.state = 2714;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,247,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Css_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_css_value;
    return this;
}

Css_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Css_valueContext.prototype.constructor = Css_valueContext;


 
Css_valueContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CssTextContext(parser, ctx) {
	Css_valueContext.call(this, parser);
    this.text = null; // Css_textContext;
    Css_valueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CssTextContext.prototype = Object.create(Css_valueContext.prototype);
CssTextContext.prototype.constructor = CssTextContext;

OParser.CssTextContext = CssTextContext;

CssTextContext.prototype.css_text = function() {
    return this.getTypedRuleContext(Css_textContext,0);
};
CssTextContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCssText(this);
	}
};

CssTextContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCssText(this);
	}
};


function CssValueContext(parser, ctx) {
	Css_valueContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Css_valueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CssValueContext.prototype = Object.create(Css_valueContext.prototype);
CssValueContext.prototype.constructor = CssValueContext;

OParser.CssValueContext = CssValueContext;

CssValueContext.prototype.LCURL = function() {
    return this.getToken(OParser.LCURL, 0);
};

CssValueContext.prototype.RCURL = function() {
    return this.getToken(OParser.RCURL, 0);
};

CssValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
CssValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCssValue(this);
	}
};

CssValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCssValue(this);
	}
};



OParser.Css_valueContext = Css_valueContext;

OParser.prototype.css_value = function() {

    var localctx = new Css_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 490, OParser.RULE_css_value);
    try {
        this.state = 2720;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case OParser.LCURL:
            localctx = new CssValueContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2715;
            this.match(OParser.LCURL);
            this.state = 2716;
            localctx.exp = this.expression(0);
            this.state = 2717;
            this.match(OParser.RCURL);
            break;
        case OParser.SPACE:
        case OParser.LF:
        case OParser.COMMENT:
        case OParser.JAVA:
        case OParser.CSHARP:
        case OParser.PYTHON2:
        case OParser.PYTHON3:
        case OParser.JAVASCRIPT:
        case OParser.SWIFT:
        case OParser.COMMA:
        case OParser.RANGE:
        case OParser.DOT:
        case OParser.LPAR:
        case OParser.RPAR:
        case OParser.LBRAK:
        case OParser.RBRAK:
        case OParser.QMARK:
        case OParser.XMARK:
        case OParser.AMP:
        case OParser.AMP2:
        case OParser.PIPE:
        case OParser.PIPE2:
        case OParser.PLUS:
        case OParser.MINUS:
        case OParser.STAR:
        case OParser.SLASH:
        case OParser.BSLASH:
        case OParser.PERCENT:
        case OParser.GT:
        case OParser.GTE:
        case OParser.LT:
        case OParser.LTE:
        case OParser.LTGT:
        case OParser.LTCOLONGT:
        case OParser.EQ:
        case OParser.XEQ:
        case OParser.EQ2:
        case OParser.TEQ:
        case OParser.TILDE:
        case OParser.LARROW:
        case OParser.RARROW:
        case OParser.EGT:
        case OParser.BOOLEAN:
        case OParser.CHARACTER:
        case OParser.TEXT:
        case OParser.INTEGER:
        case OParser.DECIMAL:
        case OParser.DATE:
        case OParser.TIME:
        case OParser.DATETIME:
        case OParser.PERIOD:
        case OParser.VERSION:
        case OParser.METHOD_T:
        case OParser.CODE:
        case OParser.DOCUMENT:
        case OParser.BLOB:
        case OParser.IMAGE:
        case OParser.UUID:
        case OParser.ITERATOR:
        case OParser.CURSOR:
        case OParser.HTML:
        case OParser.ABSTRACT:
        case OParser.ALL:
        case OParser.ALWAYS:
        case OParser.AND:
        case OParser.ANY:
        case OParser.AS:
        case OParser.ASC:
        case OParser.ATTR:
        case OParser.ATTRIBUTE:
        case OParser.ATTRIBUTES:
        case OParser.BINDINGS:
        case OParser.BREAK:
        case OParser.BY:
        case OParser.CASE:
        case OParser.CATCH:
        case OParser.CATEGORY:
        case OParser.CLASS:
        case OParser.CLOSE:
        case OParser.CONTAINS:
        case OParser.DEF:
        case OParser.DEFAULT:
        case OParser.DEFINE:
        case OParser.DELETE:
        case OParser.DESC:
        case OParser.DO:
        case OParser.DOING:
        case OParser.EACH:
        case OParser.ELSE:
        case OParser.ENUM:
        case OParser.ENUMERATED:
        case OParser.EXCEPT:
        case OParser.EXECUTE:
        case OParser.EXPECTING:
        case OParser.EXTENDS:
        case OParser.FETCH:
        case OParser.FILTERED:
        case OParser.FINALLY:
        case OParser.FLUSH:
        case OParser.FOR:
        case OParser.FROM:
        case OParser.GETTER:
        case OParser.HAS:
        case OParser.IF:
        case OParser.IN:
        case OParser.INDEX:
        case OParser.INVOKE:
        case OParser.IS:
        case OParser.MATCHING:
        case OParser.METHOD:
        case OParser.METHODS:
        case OParser.MODULO:
        case OParser.MUTABLE:
        case OParser.NATIVE:
        case OParser.NONE:
        case OParser.NOT:
        case OParser.NOTHING:
        case OParser.NULL:
        case OParser.ON:
        case OParser.ONE:
        case OParser.OPEN:
        case OParser.OPERATOR:
        case OParser.OR:
        case OParser.ORDER:
        case OParser.OTHERWISE:
        case OParser.PASS:
        case OParser.RAISE:
        case OParser.READ:
        case OParser.RECEIVING:
        case OParser.RESOURCE:
        case OParser.RETURN:
        case OParser.RETURNING:
        case OParser.ROWS:
        case OParser.SELF:
        case OParser.SETTER:
        case OParser.SINGLETON:
        case OParser.SORTED:
        case OParser.STORABLE:
        case OParser.STORE:
        case OParser.SWITCH:
        case OParser.TEST:
        case OParser.THEN:
        case OParser.THIS:
        case OParser.THROW:
        case OParser.TO:
        case OParser.TRY:
        case OParser.VERIFYING:
        case OParser.WIDGET:
        case OParser.WITH:
        case OParser.WHEN:
        case OParser.WHERE:
        case OParser.WHILE:
        case OParser.WRITE:
        case OParser.BOOLEAN_LITERAL:
        case OParser.CHAR_LITERAL:
        case OParser.MIN_INTEGER:
        case OParser.MAX_INTEGER:
        case OParser.SYMBOL_IDENTIFIER:
        case OParser.TYPE_IDENTIFIER:
        case OParser.VARIABLE_IDENTIFIER:
        case OParser.NATIVE_IDENTIFIER:
        case OParser.DOLLAR_IDENTIFIER:
        case OParser.ARONDBASE_IDENTIFIER:
        case OParser.TEXT_LITERAL:
        case OParser.UUID_LITERAL:
        case OParser.INTEGER_LITERAL:
        case OParser.HEXA_LITERAL:
        case OParser.DECIMAL_LITERAL:
        case OParser.DATETIME_LITERAL:
        case OParser.TIME_LITERAL:
        case OParser.DATE_LITERAL:
        case OParser.PERIOD_LITERAL:
        case OParser.VERSION_LITERAL:
        case OParser.INSTRUCTION:
            localctx = new CssTextContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2719;
            localctx.text = this.css_text();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Css_textContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = OParser.RULE_css_text;
    return this;
}

Css_textContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Css_textContext.prototype.constructor = Css_textContext;

Css_textContext.prototype.LCURL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.LCURL);
    } else {
        return this.getToken(OParser.LCURL, i);
    }
};


Css_textContext.prototype.RCURL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.RCURL);
    } else {
        return this.getToken(OParser.RCURL, i);
    }
};


Css_textContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.COLON);
    } else {
        return this.getToken(OParser.COLON, i);
    }
};


Css_textContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.SEMI);
    } else {
        return this.getToken(OParser.SEMI, i);
    }
};


Css_textContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(OParser.WS);
    } else {
        return this.getToken(OParser.WS, i);
    }
};


Css_textContext.prototype.enterRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.enterCss_text(this);
	}
};

Css_textContext.prototype.exitRule = function(listener) {
    if(listener instanceof OParserListener ) {
        listener.exitCss_text(this);
	}
};




OParser.Css_textContext = Css_textContext;

OParser.prototype.css_text = function() {

    var localctx = new Css_textContext(this, this._ctx, this.state);
    this.enterRule(localctx, 492, OParser.RULE_css_text);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2723; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2722;
            _la = this._input.LA(1);
            if(_la<=0 || (((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.WS) | (1 << OParser.COLON) | (1 << OParser.SEMI) | (1 << OParser.LCURL) | (1 << OParser.RCURL))) !== 0)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2725; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << OParser.SPACE) | (1 << OParser.LF) | (1 << OParser.COMMENT) | (1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT) | (1 << OParser.SWIFT) | (1 << OParser.COMMA) | (1 << OParser.RANGE) | (1 << OParser.DOT) | (1 << OParser.LPAR) | (1 << OParser.RPAR) | (1 << OParser.LBRAK) | (1 << OParser.RBRAK) | (1 << OParser.QMARK) | (1 << OParser.XMARK) | (1 << OParser.AMP) | (1 << OParser.AMP2) | (1 << OParser.PIPE) | (1 << OParser.PIPE2) | (1 << OParser.PLUS) | (1 << OParser.MINUS) | (1 << OParser.STAR) | (1 << OParser.SLASH))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (OParser.BSLASH - 32)) | (1 << (OParser.PERCENT - 32)) | (1 << (OParser.GT - 32)) | (1 << (OParser.GTE - 32)) | (1 << (OParser.LT - 32)) | (1 << (OParser.LTE - 32)) | (1 << (OParser.LTGT - 32)) | (1 << (OParser.LTCOLONGT - 32)) | (1 << (OParser.EQ - 32)) | (1 << (OParser.XEQ - 32)) | (1 << (OParser.EQ2 - 32)) | (1 << (OParser.TEQ - 32)) | (1 << (OParser.TILDE - 32)) | (1 << (OParser.LARROW - 32)) | (1 << (OParser.RARROW - 32)) | (1 << (OParser.EGT - 32)) | (1 << (OParser.BOOLEAN - 32)) | (1 << (OParser.CHARACTER - 32)) | (1 << (OParser.TEXT - 32)) | (1 << (OParser.INTEGER - 32)) | (1 << (OParser.DECIMAL - 32)) | (1 << (OParser.DATE - 32)) | (1 << (OParser.TIME - 32)) | (1 << (OParser.DATETIME - 32)) | (1 << (OParser.PERIOD - 32)) | (1 << (OParser.VERSION - 32)) | (1 << (OParser.METHOD_T - 32)) | (1 << (OParser.CODE - 32)) | (1 << (OParser.DOCUMENT - 32)) | (1 << (OParser.BLOB - 32)) | (1 << (OParser.IMAGE - 32)) | (1 << (OParser.UUID - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ABSTRACT - 64)) | (1 << (OParser.ALL - 64)) | (1 << (OParser.ALWAYS - 64)) | (1 << (OParser.AND - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.AS - 64)) | (1 << (OParser.ASC - 64)) | (1 << (OParser.ATTR - 64)) | (1 << (OParser.ATTRIBUTE - 64)) | (1 << (OParser.ATTRIBUTES - 64)) | (1 << (OParser.BINDINGS - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.BY - 64)) | (1 << (OParser.CASE - 64)) | (1 << (OParser.CATCH - 64)) | (1 << (OParser.CATEGORY - 64)) | (1 << (OParser.CLASS - 64)) | (1 << (OParser.CLOSE - 64)) | (1 << (OParser.CONTAINS - 64)) | (1 << (OParser.DEF - 64)) | (1 << (OParser.DEFAULT - 64)) | (1 << (OParser.DEFINE - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DESC - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.DOING - 64)) | (1 << (OParser.EACH - 64)) | (1 << (OParser.ELSE - 64)) | (1 << (OParser.ENUM - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (OParser.ENUMERATED - 96)) | (1 << (OParser.EXCEPT - 96)) | (1 << (OParser.EXECUTE - 96)) | (1 << (OParser.EXPECTING - 96)) | (1 << (OParser.EXTENDS - 96)) | (1 << (OParser.FETCH - 96)) | (1 << (OParser.FILTERED - 96)) | (1 << (OParser.FINALLY - 96)) | (1 << (OParser.FLUSH - 96)) | (1 << (OParser.FOR - 96)) | (1 << (OParser.FROM - 96)) | (1 << (OParser.GETTER - 96)) | (1 << (OParser.HAS - 96)) | (1 << (OParser.IF - 96)) | (1 << (OParser.IN - 96)) | (1 << (OParser.INDEX - 96)) | (1 << (OParser.INVOKE - 96)) | (1 << (OParser.IS - 96)) | (1 << (OParser.MATCHING - 96)) | (1 << (OParser.METHOD - 96)) | (1 << (OParser.METHODS - 96)) | (1 << (OParser.MODULO - 96)) | (1 << (OParser.MUTABLE - 96)) | (1 << (OParser.NATIVE - 96)) | (1 << (OParser.NONE - 96)) | (1 << (OParser.NOT - 96)) | (1 << (OParser.NOTHING - 96)) | (1 << (OParser.NULL - 96)) | (1 << (OParser.ON - 96)) | (1 << (OParser.ONE - 96)) | (1 << (OParser.OPEN - 96)) | (1 << (OParser.OPERATOR - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (OParser.OR - 128)) | (1 << (OParser.ORDER - 128)) | (1 << (OParser.OTHERWISE - 128)) | (1 << (OParser.PASS - 128)) | (1 << (OParser.RAISE - 128)) | (1 << (OParser.READ - 128)) | (1 << (OParser.RECEIVING - 128)) | (1 << (OParser.RESOURCE - 128)) | (1 << (OParser.RETURN - 128)) | (1 << (OParser.RETURNING - 128)) | (1 << (OParser.ROWS - 128)) | (1 << (OParser.SELF - 128)) | (1 << (OParser.SETTER - 128)) | (1 << (OParser.SINGLETON - 128)) | (1 << (OParser.SORTED - 128)) | (1 << (OParser.STORABLE - 128)) | (1 << (OParser.STORE - 128)) | (1 << (OParser.SWITCH - 128)) | (1 << (OParser.TEST - 128)) | (1 << (OParser.THEN - 128)) | (1 << (OParser.THIS - 128)) | (1 << (OParser.THROW - 128)) | (1 << (OParser.TO - 128)) | (1 << (OParser.TRY - 128)) | (1 << (OParser.VERIFYING - 128)) | (1 << (OParser.WIDGET - 128)) | (1 << (OParser.WITH - 128)) | (1 << (OParser.WHEN - 128)) | (1 << (OParser.WHERE - 128)) | (1 << (OParser.WHILE - 128)) | (1 << (OParser.WRITE - 128)) | (1 << (OParser.BOOLEAN_LITERAL - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (OParser.CHAR_LITERAL - 160)) | (1 << (OParser.MIN_INTEGER - 160)) | (1 << (OParser.MAX_INTEGER - 160)) | (1 << (OParser.SYMBOL_IDENTIFIER - 160)) | (1 << (OParser.TYPE_IDENTIFIER - 160)) | (1 << (OParser.VARIABLE_IDENTIFIER - 160)) | (1 << (OParser.NATIVE_IDENTIFIER - 160)) | (1 << (OParser.DOLLAR_IDENTIFIER - 160)) | (1 << (OParser.ARONDBASE_IDENTIFIER - 160)) | (1 << (OParser.TEXT_LITERAL - 160)) | (1 << (OParser.UUID_LITERAL - 160)) | (1 << (OParser.INTEGER_LITERAL - 160)) | (1 << (OParser.HEXA_LITERAL - 160)) | (1 << (OParser.DECIMAL_LITERAL - 160)) | (1 << (OParser.DATETIME_LITERAL - 160)) | (1 << (OParser.TIME_LITERAL - 160)) | (1 << (OParser.DATE_LITERAL - 160)) | (1 << (OParser.PERIOD_LITERAL - 160)) | (1 << (OParser.VERSION_LITERAL - 160)) | (1 << (OParser.INSTRUCTION - 160)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


OParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 9:
			return this.derived_list_sempred(localctx, predIndex);
	case 19:
			return this.native_category_binding_list_sempred(localctx, predIndex);
	case 38:
			return this.else_if_statement_list_sempred(localctx, predIndex);
	case 47:
			return this.expression_sempred(localctx, predIndex);
	case 48:
			return this.an_expression_sempred(localctx, predIndex);
	case 51:
			return this.instance_expression_sempred(localctx, predIndex);
	case 52:
			return this.mutable_instance_expression_sempred(localctx, predIndex);
	case 63:
			return this.copy_from_sempred(localctx, predIndex);
	case 64:
			return this.argument_assignment_list_sempred(localctx, predIndex);
	case 87:
			return this.typedef_sempred(localctx, predIndex);
	case 98:
			return this.nospace_hyphen_identifier_or_keyword_sempred(localctx, predIndex);
	case 99:
			return this.nospace_identifier_or_keyword_sempred(localctx, predIndex);
	case 112:
			return this.any_type_sempred(localctx, predIndex);
	case 150:
			return this.assignable_instance_sempred(localctx, predIndex);
	case 151:
			return this.is_expression_sempred(localctx, predIndex);
	case 162:
			return this.new_token_sempred(localctx, predIndex);
	case 163:
			return this.key_token_sempred(localctx, predIndex);
	case 164:
			return this.module_token_sempred(localctx, predIndex);
	case 165:
			return this.value_token_sempred(localctx, predIndex);
	case 166:
			return this.symbols_token_sempred(localctx, predIndex);
	case 175:
			return this.javascript_expression_sempred(localctx, predIndex);
	case 181:
			return this.javascript_arguments_sempred(localctx, predIndex);
	case 188:
			return this.python_expression_sempred(localctx, predIndex);
	case 194:
			return this.python_ordinal_argument_list_sempred(localctx, predIndex);
	case 195:
			return this.python_named_argument_list_sempred(localctx, predIndex);
	case 197:
			return this.python_identifier_expression_sempred(localctx, predIndex);
	case 201:
			return this.java_expression_sempred(localctx, predIndex);
	case 207:
			return this.java_arguments_sempred(localctx, predIndex);
	case 210:
			return this.java_identifier_expression_sempred(localctx, predIndex);
	case 211:
			return this.java_class_identifier_expression_sempred(localctx, predIndex);
	case 215:
			return this.csharp_expression_sempred(localctx, predIndex);
	case 221:
			return this.csharp_arguments_sempred(localctx, predIndex);
	case 224:
			return this.csharp_identifier_expression_sempred(localctx, predIndex);
	case 244:
			return this.css_identifier_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

OParser.prototype.derived_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.native_category_binding_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.else_if_statement_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 34);
		case 4:
			return this.precpred(this._ctx, 33);
		case 5:
			return this.precpred(this._ctx, 32);
		case 6:
			return this.precpred(this._ctx, 31);
		case 7:
			return this.precpred(this._ctx, 30);
		case 8:
			return this.precpred(this._ctx, 28);
		case 9:
			return this.precpred(this._ctx, 27);
		case 10:
			return this.precpred(this._ctx, 26);
		case 11:
			return this.precpred(this._ctx, 25);
		case 12:
			return this.precpred(this._ctx, 22);
		case 13:
			return this.precpred(this._ctx, 21);
		case 14:
			return this.precpred(this._ctx, 20);
		case 15:
			return this.precpred(this._ctx, 19);
		case 16:
			return this.precpred(this._ctx, 18);
		case 17:
			return this.precpred(this._ctx, 17);
		case 18:
			return this.precpred(this._ctx, 16);
		case 19:
			return this.precpred(this._ctx, 15);
		case 20:
			return this.precpred(this._ctx, 14);
		case 21:
			return this.precpred(this._ctx, 13);
		case 22:
			return this.precpred(this._ctx, 12);
		case 23:
			return this.precpred(this._ctx, 11);
		case 24:
			return this.precpred(this._ctx, 10);
		case 25:
			return this.precpred(this._ctx, 9);
		case 26:
			return this.precpred(this._ctx, 8);
		case 27:
			return this.precpred(this._ctx, 7);
		case 28:
			return this.precpred(this._ctx, 6);
		case 29:
			return this.precpred(this._ctx, 5);
		case 30:
			return this.precpred(this._ctx, 24);
		case 31:
			return this.precpred(this._ctx, 23);
		case 32:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.an_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 33:
			return this.willBeAOrAn();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.instance_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 34:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.mutable_instance_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 35:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.copy_from_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 36:
			return this.willNotBe(this.equalToken());
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.argument_assignment_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 37:
			return this.willNotBe(this.equalToken());
		case 38:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.typedef_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 39:
			return this.precpred(this._ctx, 5);
		case 40:
			return this.precpred(this._ctx, 4);
		case 41:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.nospace_hyphen_identifier_or_keyword_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 42:
			return this.wasNotWhiteSpace();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.nospace_identifier_or_keyword_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 43:
			return this.wasNotWhiteSpace();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.any_type_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 44:
			return this.precpred(this._ctx, 2);
		case 45:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.assignable_instance_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 46:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.is_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 47:
			return this.willBeAOrAn();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.new_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 48:
			return this.isText(localctx.i1,"new");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.key_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 49:
			return this.isText(localctx.i1,"key");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.module_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 50:
			return this.isText(localctx.i1,"module");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.value_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 51:
			return this.isText(localctx.i1,"value");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.symbols_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 52:
			return this.isText(localctx.i1,"symbols");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.javascript_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 53:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.javascript_arguments_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 54:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.python_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 55:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.python_ordinal_argument_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 56:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.python_named_argument_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 57:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.python_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 58:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.java_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 59:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.java_arguments_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 60:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.java_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 61:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.java_class_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 62:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.csharp_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 63:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.csharp_arguments_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 64:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.csharp_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 65:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

OParser.prototype.css_identifier_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 66:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.OParser = OParser;
