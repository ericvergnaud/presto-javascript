// Generated from MParser.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var MParserListener = require('./MParserListener').MParserListener;
var AbstractParser = require('./AbstractParser').AbstractParser;

var grammarFileName = "MParser.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00b9\u0ac0\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004",
    "\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t",
    "\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0004",
    "\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004\u00d6\t",
    "\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t\u00d9\u0004",
    "\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004\u00dd\t",
    "\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t\u00e0\u0004",
    "\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004\u00e4\t",
    "\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t\u00e7\u0004",
    "\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004\u00eb\t",
    "\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t\u00ee\u0004",
    "\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004\u00f2\t",
    "\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t\u00f5\u0004",
    "\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004\u00f9\t",
    "\u00f9\u0004\u00fa\t\u00fa\u0003\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0005\u0002\u01fb\n\u0002\u0003\u0002",
    "\u0005\u0002\u01fe\n\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u0217\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0006\u0005\u0006\u021c\n\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u022a\n\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0230\n",
    "\u0006\u0005\u0006\u0232\n\u0006\u0005\u0006\u0234\n\u0006\u0003\u0006",
    "\u0003\u0006\u0005\u0006\u0238\n\u0006\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0005\u0007\u023d\n\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0005\b\u0245\n\b\u0003\b\u0003\b\u0003\b\u0003\b",
    "\u0003\b\u0005\b\u024c\n\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\n\u0005\n\u025d\n\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0005\n\u0268\n\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0005\n\u026f\n\n\u0003\n\u0003\n\u0005\n\u0273\n\n\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u027e\n\u000b\u0003\u000b",
    "\u0003\u000b\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0005\r\u028c\n\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0005\u000f\u02a0\n\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0005\u0011\u02b7\n\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0012\u0005\u0012\u02c2\n\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u02c9\n\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0005\u0012\u02d2\n\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0005",
    "\u0013\u02d7\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0005\u0013\u02de\n\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u02e7",
    "\n\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0007\u0015\u02fa\n\u0015\f\u0015\u000e\u0015\u02fd\u000b\u0015\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0304",
    "\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0309\n\u0016",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u030f\n",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0314\n\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u031a\n",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0005\u0018\u0320",
    "\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u0325\n\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u032a\n\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0342\n\u0019",
    "\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u034d\n\u001b\u0003",
    "\u001b\u0003\u001b\u0005\u001b\u0351\n\u001b\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0005\u001c\u0367\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0377",
    "\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0005\u001e\u037e\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0386\n\u001e\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0005\u001f\u038b\n\u001f\u0003\u001f\u0003",
    "\u001f\u0003 \u0003 \u0003 \u0005 \u0392\n \u0003 \u0003 \u0003 \u0003",
    " \u0005 \u0398\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u039f\n",
    " \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u03bc",
    "\n#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0005$\u03cf\n$\u0003",
    "%\u0003%\u0003%\u0003%\u0005%\u03d5\n%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u03f7",
    "\n(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u0400\n",
    "(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0007",
    ")\u0415\n)\f)\u000e)\u0418\u000b)\u0003*\u0003*\u0003*\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u0425\n+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u042e\n+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0005+\u0437\n+\u0003+\u0003+\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0005,\u044e\n,\u0003",
    "-\u0003-\u0003.\u0003.\u0005.\u0454\n.\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0005/\u046b\n/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0007/\u04db",
    "\n/\f/\u000e/\u04de\u000b/\u00030\u00030\u00031\u00031\u00031\u0003",
    "1\u00031\u00051\u04e7\n1\u00032\u00032\u00032\u00032\u00032\u00072\u04ee",
    "\n2\f2\u000e2\u04f1\u000b2\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00073\u04f9\n3\f3\u000e3\u04fc\u000b3\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00054\u0506\n4\u00035\u00035\u00035\u0003",
    "5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00055\u0514",
    "\n5\u00036\u00036\u00036\u00056\u0519\n6\u00036\u00036\u00037\u0003",
    "7\u00037\u00057\u0520\n7\u00037\u00037\u00038\u00038\u00038\u00038\u0003",
    "8\u00058\u0529\n8\u00038\u00038\u00038\u00038\u00038\u00058\u0530\n",
    "8\u00038\u00038\u00058\u0534\n8\u00039\u00039\u00039\u00039\u00039\u0003",
    ":\u0003:\u0003:\u0003:\u0003:\u0005:\u0540\n:\u0003:\u0003:\u0003:\u0007",
    ":\u0545\n:\f:\u000e:\u0548\u000b:\u0003;\u0003;\u0003;\u0003;\u0005",
    ";\u054e\n;\u0003<\u0003<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0005",
    "=\u0558\n=\u0003=\u0003=\u0003=\u0003>\u0003>\u0003>\u0005>\u0560\n",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0005",
    ">\u056b\n>\u0003>\u0003>\u0005>\u056f\n>\u0003>\u0003>\u0003>\u0005",
    ">\u0574\n>\u0003>\u0003>\u0003>\u0005>\u0579\n>\u0005>\u057b\n>\u0003",
    "?\u0003?\u0003?\u0005?\u0580\n?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0003?\u0005?\u0593\n?\u0003?\u0003?\u0005?\u0597\n?\u0003?\u0003",
    "?\u0003?\u0005?\u059c\n?\u0003?\u0003?\u0003?\u0005?\u05a1\n?\u0003",
    "?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0005?\u05ab\n?\u0003",
    "@\u0003@\u0005@\u05af\n@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0005@\u05b8\n@\u0003@\u0003@\u0003A\u0003A\u0003A\u0003A\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0005B\u05c8\nB\u0003C\u0003",
    "C\u0003C\u0003C\u0003D\u0007D\u05cf\nD\fD\u000eD\u05d2\u000bD\u0003",
    "E\u0006E\u05d5\nE\rE\u000eE\u05d6\u0003F\u0007F\u05da\nF\fF\u000eF\u05dd",
    "\u000bF\u0003G\u0006G\u05e0\nG\rG\u000eG\u05e1\u0003G\u0003G\u0003H",
    "\u0007H\u05e7\nH\fH\u000eH\u05ea\u000bH\u0003H\u0003H\u0003I\u0003I",
    "\u0003J\u0003J\u0003K\u0003K\u0003K\u0005K\u05f5\nK\u0003L\u0005L\u05f8",
    "\nL\u0003L\u0003L\u0003L\u0003M\u0003M\u0003M\u0003M\u0007M\u0601\n",
    "M\fM\u000eM\u0604\u000bM\u0003N\u0003N\u0003N\u0007N\u0609\nN\fN\u000e",
    "N\u060c\u000bN\u0003N\u0003N\u0003N\u0007N\u0611\nN\fN\u000eN\u0614",
    "\u000bN\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0005N\u061c\nN\u0003",
    "O\u0003O\u0003O\u0003O\u0003O\u0003O\u0007O\u0624\nO\fO\u000eO\u0627",
    "\u000bO\u0005O\u0629\nO\u0003O\u0003O\u0005O\u062d\nO\u0003P\u0003P",
    "\u0003Q\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003S\u0003S\u0005S\u0639",
    "\nS\u0003T\u0003T\u0003U\u0003U\u0005U\u063f\nU\u0003V\u0003V\u0003",
    "V\u0003V\u0007V\u0645\nV\fV\u000eV\u0648\u000bV\u0003W\u0003W\u0003",
    "W\u0003W\u0007W\u064e\nW\fW\u000eW\u0651\u000bW\u0003X\u0003X\u0003",
    "X\u0007X\u0656\nX\fX\u000eX\u0659\u000bX\u0003Y\u0003Y\u0003Y\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0005Y\u0665\nY\u0003Z\u0005",
    "Z\u0668\nZ\u0003Z\u0003Z\u0005Z\u066c\nZ\u0003Z\u0003Z\u0003[\u0005",
    "[\u0671\n[\u0003[\u0003[\u0005[\u0675\n[\u0003[\u0003[\u0003\\\u0003",
    "\\\u0003\\\u0007\\\u067c\n\\\f\\\u000e\\\u067f\u000b\\\u0003]\u0003",
    "]\u0003]\u0003]\u0003]\u0003]\u0003^\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0005^\u0693\n^\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0003^\u0007^\u069c\n^\f^\u000e^\u069f",
    "\u000b^\u0003_\u0003_\u0005_\u06a3\n_\u0003`\u0003`\u0003`\u0003`\u0003",
    "`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003",
    "`\u0003`\u0005`\u06b5\n`\u0003a\u0003a\u0003b\u0005b\u06ba\nb\u0003",
    "b\u0003b\u0003c\u0003c\u0003d\u0003d\u0003d\u0005d\u06c3\nd\u0003e\u0003",
    "e\u0005e\u06c7\ne\u0003f\u0003f\u0003f\u0007f\u06cc\nf\ff\u000ef\u06cf",
    "\u000bf\u0003g\u0003g\u0005g\u06d3\ng\u0003h\u0003h\u0005h\u06d7\nh",
    "\u0003i\u0003i\u0003i\u0003i\u0003j\u0003j\u0003j\u0003k\u0003k\u0003",
    "k\u0005k\u06e3\nk\u0003l\u0003l\u0003m\u0003m\u0003n\u0003n\u0003o\u0003",
    "o\u0003p\u0003p\u0003p\u0007p\u06f0\np\fp\u000ep\u06f3\u000bp\u0003",
    "q\u0003q\u0005q\u06f7\nq\u0003q\u0005q\u06fa\nq\u0003r\u0003r\u0005",
    "r\u06fe\nr\u0003s\u0003s\u0003s\u0005s\u0703\ns\u0003t\u0003t\u0003",
    "t\u0003u\u0003u\u0005u\u070a\nu\u0003v\u0003v\u0003v\u0003v\u0003v\u0003",
    "v\u0003v\u0003v\u0003v\u0007v\u0715\nv\fv\u000ev\u0718\u000bv\u0003",
    "w\u0003w\u0003w\u0003w\u0007w\u071e\nw\fw\u000ew\u0721\u000bw\u0003",
    "x\u0003x\u0003x\u0007x\u0726\nx\fx\u000ex\u0729\u000bx\u0003x\u0003",
    "x\u0003x\u0007x\u072e\nx\fx\u000ex\u0731\u000bx\u0003x\u0003x\u0003",
    "x\u0003x\u0003x\u0005x\u0738\nx\u0003y\u0003y\u0003y\u0003y\u0007y\u073e",
    "\ny\fy\u000ey\u0741\u000by\u0003z\u0003z\u0003z\u0005z\u0746\nz\u0003",
    "{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0005",
    "{\u0752\n{\u0003|\u0003|\u0005|\u0756\n|\u0003}\u0003}\u0003}\u0003",
    "}\u0003}\u0003}\u0007}\u075e\n}\f}\u000e}\u0761\u000b}\u0003~\u0003",
    "~\u0003~\u0007~\u0766\n~\f~\u000e~\u0769\u000b~\u0003~\u0005~\u076c",
    "\n~\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0005\u007f\u0772",
    "\n\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0007\u007f\u0777\n\u007f",
    "\f\u007f\u000e\u007f\u077a\u000b\u007f\u0003\u007f\u0003\u007f\u0005",
    "\u007f\u077e\n\u007f\u0003\u0080\u0003\u0080\u0003\u0080\u0007\u0080",
    "\u0783\n\u0080\f\u0080\u000e\u0080\u0786\u000b\u0080\u0003\u0081\u0003",
    "\u0081\u0003\u0081\u0007\u0081\u078b\n\u0081\f\u0081\u000e\u0081\u078e",
    "\u000b\u0081\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0005\u0082",
    "\u0794\n\u0082\u0003\u0083\u0003\u0083\u0003\u0084\u0003\u0084\u0003",
    "\u0084\u0003\u0084\u0007\u0084\u079c\n\u0084\f\u0084\u000e\u0084\u079f",
    "\u000b\u0084\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085",
    "\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0005\u0085",
    "\u07ab\n\u0085\u0003\u0086\u0003\u0086\u0005\u0086\u07af\n\u0086\u0003",
    "\u0086\u0005\u0086\u07b2\n\u0086\u0003\u0087\u0003\u0087\u0005\u0087",
    "\u07b6\n\u0087\u0003\u0087\u0005\u0087\u07b9\n\u0087\u0003\u0088\u0003",
    "\u0088\u0003\u0088\u0003\u0088\u0007\u0088\u07bf\n\u0088\f\u0088\u000e",
    "\u0088\u07c2\u000b\u0088\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089",
    "\u0007\u0089\u07c8\n\u0089\f\u0089\u000e\u0089\u07cb\u000b\u0089\u0003",
    "\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0007\u008a\u07d1\n\u008a",
    "\f\u008a\u000e\u008a\u07d4\u000b\u008a\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0007\u008b\u07da\n\u008b\f\u008b\u000e\u008b\u07dd",
    "\u000b\u008b\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c",
    "\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c",
    "\u0003\u008c\u0003\u008c\u0003\u008c\u0005\u008c\u07ed\n\u008c\u0003",
    "\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003",
    "\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003",
    "\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0005\u008d\u07ff\n\u008d",
    "\u0003\u008e\u0003\u008e\u0003\u008e\u0007\u008e\u0804\n\u008e\f\u008e",
    "\u000e\u008e\u0807\u000b\u008e\u0003\u008f\u0003\u008f\u0003\u0090\u0003",
    "\u0090\u0003\u0090\u0003\u0090\u0003\u0091\u0003\u0091\u0005\u0091\u0811",
    "\n\u0091\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092",
    "\u0003\u0092\u0005\u0092\u0819\n\u0092\u0003\u0093\u0005\u0093\u081c",
    "\n\u0093\u0003\u0093\u0003\u0093\u0005\u0093\u0820\n\u0093\u0003\u0093",
    "\u0003\u0093\u0003\u0094\u0005\u0094\u0825\n\u0094\u0003\u0094\u0003",
    "\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003",
    "\u0094\u0005\u0094\u082f\n\u0094\u0003\u0095\u0003\u0095\u0005\u0095",
    "\u0833\n\u0095\u0003\u0095\u0003\u0095\u0003\u0096\u0003\u0096\u0003",
    "\u0096\u0003\u0096\u0003\u0096\u0007\u0096\u083c\n\u0096\f\u0096\u000e",
    "\u0096\u083f\u000b\u0096\u0005\u0096\u0841\n\u0096\u0003\u0097\u0003",
    "\u0097\u0003\u0097\u0007\u0097\u0846\n\u0097\f\u0097\u000e\u0097\u0849",
    "\u000b\u0097\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0099",
    "\u0003\u0099\u0005\u0099\u0851\n\u0099\u0003\u009a\u0003\u009a\u0003",
    "\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003",
    "\u009a\u0005\u009a\u085c\n\u009a\u0003\u009b\u0003\u009b\u0003\u009b",
    "\u0003\u009b\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c",
    "\u0007\u009c\u0867\n\u009c\f\u009c\u000e\u009c\u086a\u000b\u009c\u0003",
    "\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0005\u009d\u0870\n\u009d",
    "\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e",
    "\u0003\u009e\u0003\u009e\u0005\u009e\u087a\n\u009e\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u00a0\u0003\u00a0\u0003",
    "\u00a0\u0005\u00a0\u0884\n\u00a0\u0003\u00a0\u0005\u00a0\u0887\n\u00a0",
    "\u0003\u00a1\u0003\u00a1\u0005\u00a1\u088b\n\u00a1\u0003\u00a2\u0003",
    "\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a3\u0003\u00a3\u0003",
    "\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0007",
    "\u00a4\u089a\n\u00a4\f\u00a4\u000e\u00a4\u089d\u000b\u00a4\u0003\u00a5",
    "\u0003\u00a5\u0003\u00a5\u0007\u00a5\u08a2\n\u00a5\f\u00a5\u000e\u00a5",
    "\u08a5\u000b\u00a5\u0003\u00a5\u0005\u00a5\u08a8\n\u00a5\u0003\u00a6",
    "\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0005\u00a6",
    "\u08b0\n\u00a6\u0003\u00a7\u0003\u00a7\u0003\u00a8\u0003\u00a8\u0003",
    "\u00a8\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00aa\u0003\u00aa\u0003",
    "\u00aa\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ac\u0003\u00ac\u0003",
    "\u00ac\u0003\u00ad\u0003\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00af\u0003",
    "\u00af\u0003\u00b0\u0003\u00b0\u0003\u00b1\u0003\u00b1\u0003\u00b2\u0003",
    "\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0005",
    "\u00b2\u08d4\n\u00b2\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3",
    "\u0003\u00b3\u0007\u00b3\u08db\n\u00b3\f\u00b3\u000e\u00b3\u08de\u000b",
    "\u00b3\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003",
    "\u00b4\u0003\u00b4\u0005\u00b4\u08e7\n\u00b4\u0003\u00b5\u0003\u00b5",
    "\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b7\u0003\u00b7\u0003\u00b7",
    "\u0003\u00b7\u0003\u00b7\u0005\u00b7\u08f3\n\u00b7\u0003\u00b8\u0003",
    "\u00b8\u0003\u00b8\u0005\u00b8\u08f8\n\u00b8\u0003\u00b8\u0003\u00b8",
    "\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9",
    "\u0007\u00b9\u0902\n\u00b9\f\u00b9\u000e\u00b9\u0905\u000b\u00b9\u0003",
    "\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0003\u00bc\u0003\u00bc\u0003\u00bd\u0003\u00bd\u0003",
    "\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd\u0916\n\u00bd\u0003\u00be",
    "\u0003\u00be\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0005\u00bf\u091d\n",
    "\u00bf\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0007",
    "\u00c0\u0924\n\u00c0\f\u00c0\u000e\u00c0\u0927\u000b\u00c0\u0003\u00c1",
    "\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0005\u00c1\u092e\n",
    "\u00c1\u0003\u00c2\u0003\u00c2\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0005\u00c3\u0938\n\u00c3\u0003\u00c4",
    "\u0003\u00c4\u0003\u00c4\u0005\u00c4\u093d\n\u00c4\u0003\u00c4\u0003",
    "\u00c4\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003",
    "\u00c5\u0005\u00c5\u0947\n\u00c5\u0003\u00c6\u0003\u00c6\u0003\u00c6",
    "\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0007\u00c6\u094f\n\u00c6\f\u00c6",
    "\u000e\u00c6\u0952\u000b\u00c6\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003",
    "\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003",
    "\u00c7\u0003\u00c7\u0007\u00c7\u095f\n\u00c7\f\u00c7\u000e\u00c7\u0962",
    "\u000b\u00c7\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c9",
    "\u0003\u00c9\u0003\u00c9\u0005\u00c9\u096b\n\u00c9\u0003\u00c9\u0003",
    "\u00c9\u0003\u00c9\u0007\u00c9\u0970\n\u00c9\f\u00c9\u000e\u00c9\u0973",
    "\u000b\u00c9\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca",
    "\u0005\u00ca\u097a\n\u00ca\u0003\u00cb\u0003\u00cb\u0003\u00cc\u0003",
    "\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0005",
    "\u00cc\u0985\n\u00cc\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd",
    "\u0003\u00cd\u0007\u00cd\u098c\n\u00cd\f\u00cd\u000e\u00cd\u098f\u000b",
    "\u00cd\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0005",
    "\u00ce\u0996\n\u00ce\u0003\u00cf\u0003\u00cf\u0003\u00d0\u0003\u00d0",
    "\u0003\u00d0\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0005\u00d1\u09a0\n",
    "\u00d1\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0005\u00d2\u09a5\n\u00d2",
    "\u0003\u00d2\u0003\u00d2\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3",
    "\u0003\u00d3\u0003\u00d3\u0007\u00d3\u09af\n\u00d3\f\u00d3\u000e\u00d3",
    "\u09b2\u000b\u00d3\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003",
    "\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d6\u0003\u00d6\u0003",
    "\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0007\u00d6\u09c2\n\u00d6",
    "\f\u00d6\u000e\u00d6\u09c5\u000b\u00d6\u0003\u00d7\u0003\u00d7\u0003",
    "\u00d7\u0003\u00d7\u0003\u00d7\u0007\u00d7\u09cc\n\u00d7\f\u00d7\u000e",
    "\u00d7\u09cf\u000b\u00d7\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8",
    "\u0003\u00d8\u0005\u00d8\u09d6\n\u00d8\u0003\u00d9\u0003\u00d9\u0003",
    "\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003",
    "\u00da\u0005\u00da\u09e1\n\u00da\u0003\u00db\u0003\u00db\u0003\u00db",
    "\u0003\u00db\u0003\u00db\u0007\u00db\u09e8\n\u00db\f\u00db\u000e\u00db",
    "\u09eb\u000b\u00db\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003",
    "\u00dc\u0005\u00dc\u09f2\n\u00dc\u0003\u00dd\u0003\u00dd\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0003\u00df\u0003\u00df\u0003\u00df\u0005\u00df",
    "\u09fc\n\u00df\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0005\u00e0\u0a01",
    "\n\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e1\u0003\u00e1\u0003\u00e1",
    "\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0007\u00e1\u0a0b\n\u00e1\f\u00e1",
    "\u000e\u00e1\u0a0e\u000b\u00e1\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003",
    "\u00e2\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e4\u0003",
    "\u00e4\u0003\u00e4\u0005\u00e4\u0a1b\n\u00e4\u0003\u00e4\u0003\u00e4",
    "\u0003\u00e4\u0007\u00e4\u0a20\n\u00e4\f\u00e4\u000e\u00e4\u0a23\u000b",
    "\u00e4\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0005",
    "\u00e5\u0a2a\n\u00e5\u0003\u00e6\u0003\u00e6\u0003\u00e7\u0003\u00e7",
    "\u0005\u00e7\u0a30\n\u00e7\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0005",
    "\u00e8\u0a35\n\u00e8\u0003\u00e8\u0003\u00e8\u0005\u00e8\u0a39\n\u00e8",
    "\u0003\u00e9\u0003\u00e9\u0005\u00e9\u0a3d\n\u00e9\u0003\u00e9\u0003",
    "\u00e9\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0005\u00ea\u0a44\n\u00ea",
    "\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00ec\u0003\u00ec",
    "\u0003\u00ec\u0003\u00ec\u0007\u00ec\u0a4e\n\u00ec\f\u00ec\u000e\u00ec",
    "\u0a51\u000b\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ed\u0003",
    "\u00ed\u0003\u00ed\u0003\u00ed\u0007\u00ed\u0a5a\n\u00ed\f\u00ed\u000e",
    "\u00ed\u0a5d\u000b\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ee\u0003\u00ee",
    "\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ef\u0003\u00ef\u0003\u00ef",
    "\u0007\u00ef\u0a69\n\u00ef\f\u00ef\u000e\u00ef\u0a6c\u000b\u00ef\u0003",
    "\u00f0\u0003\u00f0\u0007\u00f0\u0a70\n\u00f0\f\u00f0\u000e\u00f0\u0a73",
    "\u000b\u00f0\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0005\u00f1\u0a78\n",
    "\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0003",
    "\u00f2\u0003\u00f2\u0005\u00f2\u0a81\n\u00f2\u0003\u00f3\u0006\u00f3",
    "\u0a84\n\u00f3\r\u00f3\u000e\u00f3\u0a85\u0003\u00f4\u0003\u00f4\u0003",
    "\u00f4\u0003\u00f4\u0005\u00f4\u0a8c\n\u00f4\u0003\u00f4\u0005\u00f4",
    "\u0a8f\n\u00f4\u0003\u00f5\u0006\u00f5\u0a92\n\u00f5\r\u00f5\u000e\u00f5",
    "\u0a93\u0003\u00f6\u0003\u00f6\u0006\u00f6\u0a98\n\u00f6\r\u00f6\u000e",
    "\u00f6\u0a99\u0003\u00f6\u0003\u00f6\u0003\u00f7\u0003\u00f7\u0003\u00f7",
    "\u0003\u00f7\u0003\u00f7\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8",
    "\u0005\u00f8\u0aa7\n\u00f8\u0003\u00f8\u0003\u00f8\u0006\u00f8\u0aab",
    "\n\u00f8\r\u00f8\u000e\u00f8\u0aac\u0007\u00f8\u0aaf\n\u00f8\f\u00f8",
    "\u000e\u00f8\u0ab2\u000b\u00f8\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003",
    "\u00f9\u0003\u00f9\u0005\u00f9\u0ab9\n\u00f9\u0003\u00fa\u0006\u00fa",
    "\u0abc\n\u00fa\r\u00fa\u000e\u00fa\u0abd\u0003\u00fa\u0002\u0019(P\\",
    "bdr\u00ba\u00ea\u0136\u0164\u0170\u017e\u018a\u018c\u0190\u0198\u01a4",
    "\u01aa\u01ac\u01b4\u01c0\u01c6\u01ee\u00fb\u0002\u0004\u0006\b\n\f\u000e",
    "\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@B",
    "DFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a",
    "\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2",
    "\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba",
    "\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2",
    "\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea",
    "\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102",
    "\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a",
    "\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132",
    "\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a",
    "\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162",
    "\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a",
    "\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192",
    "\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa",
    "\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2",
    "\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da",
    "\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2",
    "\u0002\u0011\u0003\u0002YZ\u0003\u0002\"#\u0004\u0002\u0003\u0003\u0007",
    "\t\u0005\u0002rr\u0093\u0093\u00ac\u00ac\u0004\u0002\u0096\u0096\u00ac",
    "\u00ac\u0004\u0002\u0092\u0092\u009b\u009b\u0004\u0002PPaa\b\u0002\u000b",
    "\u00106?AHJvx\u0099\u009b\u00a5\u0004\u0002\'\'||\r\u00026?EEHH\u007f",
    "\u007f\u0082\u0082\u008c\u008c\u0092\u0092\u0099\u0099\u00a5\u00a5\u00aa",
    "\u00ac\u00ae\u00ae\f\u00026?EEHH\u007f\u007f\u0082\u0082\u008c\u008c",
    "\u0099\u0099\u009b\u009b\u00a5\u00a5\u00aa\u00ac\f\u00026?EEHH\u007f",
    "\u007f\u0082\u0082\u008c\u008c\u0092\u0092\u0099\u0099\u00a5\u00a5\u00aa",
    "\u00ae\f\u00026?EEHH\u007f\u007f\u0082\u0082\u008c\u008c\u0092\u0092",
    "\u0099\u0099\u00a5\u00a5\u00aa\u00ac\u0005\u0002\u001a\u001b((**\u0005",
    "\u0002\t\t\u0011\u0012\u001a\u001b\u0002\u0b57\u0002\u01f4\u0003\u0002",
    "\u0002\u0002\u0004\u0205\u0003\u0002\u0002\u0002\u0006\u020f\u0003\u0002",
    "\u0002\u0002\b\u0213\u0003\u0002\u0002\u0002\n\u021b\u0003\u0002\u0002",
    "\u0002\f\u0239\u0003\u0002\u0002\u0002\u000e\u0240\u0003\u0002\u0002",
    "\u0002\u0010\u024f\u0003\u0002\u0002\u0002\u0012\u025c\u0003\u0002\u0002",
    "\u0002\u0014\u0274\u0003\u0002\u0002\u0002\u0016\u0281\u0003\u0002\u0002",
    "\u0002\u0018\u0283\u0003\u0002\u0002\u0002\u001a\u0292\u0003\u0002\u0002",
    "\u0002\u001c\u029c\u0003\u0002\u0002\u0002\u001e\u02a9\u0003\u0002\u0002",
    "\u0002 \u02b3\u0003\u0002\u0002\u0002\"\u02c1\u0003\u0002\u0002\u0002",
    "$\u02d6\u0003\u0002\u0002\u0002&\u02ea\u0003\u0002\u0002\u0002(\u02f2",
    "\u0003\u0002\u0002\u0002*\u02fe\u0003\u0002\u0002\u0002,\u030a\u0003",
    "\u0002\u0002\u0002.\u031d\u0003\u0002\u0002\u00020\u0330\u0003\u0002",
    "\u0002\u00022\u0343\u0003\u0002\u0002\u00024\u0345\u0003\u0002\u0002",
    "\u00026\u0366\u0003\u0002\u0002\u00028\u0368\u0003\u0002\u0002\u0002",
    ":\u037d\u0003\u0002\u0002\u0002<\u0387\u0003\u0002\u0002\u0002>\u0391",
    "\u0003\u0002\u0002\u0002@\u03a0\u0003\u0002\u0002\u0002B\u03a7\u0003",
    "\u0002\u0002\u0002D\u03ae\u0003\u0002\u0002\u0002F\u03ce\u0003\u0002",
    "\u0002\u0002H\u03d0\u0003\u0002\u0002\u0002J\u03dd\u0003\u0002\u0002",
    "\u0002L\u03e6\u0003\u0002\u0002\u0002N\u03ed\u0003\u0002\u0002\u0002",
    "P\u0401\u0003\u0002\u0002\u0002R\u0419\u0003\u0002\u0002\u0002T\u041c",
    "\u0003\u0002\u0002\u0002V\u044d\u0003\u0002\u0002\u0002X\u044f\u0003",
    "\u0002\u0002\u0002Z\u0451\u0003\u0002\u0002\u0002\\\u046a\u0003\u0002",
    "\u0002\u0002^\u04df\u0003\u0002\u0002\u0002`\u04e6\u0003\u0002\u0002",
    "\u0002b\u04e8\u0003\u0002\u0002\u0002d\u04f2\u0003\u0002\u0002\u0002",
    "f\u0505\u0003\u0002\u0002\u0002h\u0513\u0003\u0002\u0002\u0002j\u0515",
    "\u0003\u0002\u0002\u0002l\u051c\u0003\u0002\u0002\u0002n\u0533\u0003",
    "\u0002\u0002\u0002p\u0535\u0003\u0002\u0002\u0002r\u053f\u0003\u0002",
    "\u0002\u0002t\u0549\u0003\u0002\u0002\u0002v\u054f\u0003\u0002\u0002",
    "\u0002x\u0554\u0003\u0002\u0002\u0002z\u057a\u0003\u0002\u0002\u0002",
    "|\u05aa\u0003\u0002\u0002\u0002~\u05ac\u0003\u0002\u0002\u0002\u0080",
    "\u05bb\u0003\u0002\u0002\u0002\u0082\u05c7\u0003\u0002\u0002\u0002\u0084",
    "\u05c9\u0003\u0002\u0002\u0002\u0086\u05d0\u0003\u0002\u0002\u0002\u0088",
    "\u05d4\u0003\u0002\u0002\u0002\u008a\u05db\u0003\u0002\u0002\u0002\u008c",
    "\u05df\u0003\u0002\u0002\u0002\u008e\u05e8\u0003\u0002\u0002\u0002\u0090",
    "\u05ed\u0003\u0002\u0002\u0002\u0092\u05ef\u0003\u0002\u0002\u0002\u0094",
    "\u05f4\u0003\u0002\u0002\u0002\u0096\u05f7\u0003\u0002\u0002\u0002\u0098",
    "\u05fc\u0003\u0002\u0002\u0002\u009a\u060a\u0003\u0002\u0002\u0002\u009c",
    "\u061d\u0003\u0002\u0002\u0002\u009e\u062e\u0003\u0002\u0002\u0002\u00a0",
    "\u0630\u0003\u0002\u0002\u0002\u00a2\u0634\u0003\u0002\u0002\u0002\u00a4",
    "\u0638\u0003\u0002\u0002\u0002\u00a6\u063a\u0003\u0002\u0002\u0002\u00a8",
    "\u063e\u0003\u0002\u0002\u0002\u00aa\u0640\u0003\u0002\u0002\u0002\u00ac",
    "\u0649\u0003\u0002\u0002\u0002\u00ae\u0652\u0003\u0002\u0002\u0002\u00b0",
    "\u0664\u0003\u0002\u0002\u0002\u00b2\u0667\u0003\u0002\u0002\u0002\u00b4",
    "\u0670\u0003\u0002\u0002\u0002\u00b6\u0678\u0003\u0002\u0002\u0002\u00b8",
    "\u0680\u0003\u0002\u0002\u0002\u00ba\u0692\u0003\u0002\u0002\u0002\u00bc",
    "\u06a2\u0003\u0002\u0002\u0002\u00be\u06b4\u0003\u0002\u0002\u0002\u00c0",
    "\u06b6\u0003\u0002\u0002\u0002\u00c2\u06b9\u0003\u0002\u0002\u0002\u00c4",
    "\u06bd\u0003\u0002\u0002\u0002\u00c6\u06c2\u0003\u0002\u0002\u0002\u00c8",
    "\u06c6\u0003\u0002\u0002\u0002\u00ca\u06c8\u0003\u0002\u0002\u0002\u00cc",
    "\u06d2\u0003\u0002\u0002\u0002\u00ce\u06d6\u0003\u0002\u0002\u0002\u00d0",
    "\u06d8\u0003\u0002\u0002\u0002\u00d2\u06dc\u0003\u0002\u0002\u0002\u00d4",
    "\u06e2\u0003\u0002\u0002\u0002\u00d6\u06e4\u0003\u0002\u0002\u0002\u00d8",
    "\u06e6\u0003\u0002\u0002\u0002\u00da\u06e8\u0003\u0002\u0002\u0002\u00dc",
    "\u06ea\u0003\u0002\u0002\u0002\u00de\u06ec\u0003\u0002\u0002\u0002\u00e0",
    "\u06f9\u0003\u0002\u0002\u0002\u00e2\u06fd\u0003\u0002\u0002\u0002\u00e4",
    "\u06ff\u0003\u0002\u0002\u0002\u00e6\u0704\u0003\u0002\u0002\u0002\u00e8",
    "\u0709\u0003\u0002\u0002\u0002\u00ea\u070b\u0003\u0002\u0002\u0002\u00ec",
    "\u0719\u0003\u0002\u0002\u0002\u00ee\u0727\u0003\u0002\u0002\u0002\u00f0",
    "\u0739\u0003\u0002\u0002\u0002\u00f2\u0745\u0003\u0002\u0002\u0002\u00f4",
    "\u0751\u0003\u0002\u0002\u0002\u00f6\u0753\u0003\u0002\u0002\u0002\u00f8",
    "\u0757\u0003\u0002\u0002\u0002\u00fa\u0762\u0003\u0002\u0002\u0002\u00fc",
    "\u076d\u0003\u0002\u0002\u0002\u00fe\u077f\u0003\u0002\u0002\u0002\u0100",
    "\u0787\u0003\u0002\u0002\u0002\u0102\u0793\u0003\u0002\u0002\u0002\u0104",
    "\u0795\u0003\u0002\u0002\u0002\u0106\u0797\u0003\u0002\u0002\u0002\u0108",
    "\u07aa\u0003\u0002\u0002\u0002\u010a\u07ac\u0003\u0002\u0002\u0002\u010c",
    "\u07b3\u0003\u0002\u0002\u0002\u010e\u07ba\u0003\u0002\u0002\u0002\u0110",
    "\u07c3\u0003\u0002\u0002\u0002\u0112\u07cc\u0003\u0002\u0002\u0002\u0114",
    "\u07d5\u0003\u0002\u0002\u0002\u0116\u07ec\u0003\u0002\u0002\u0002\u0118",
    "\u07fe\u0003\u0002\u0002\u0002\u011a\u0800\u0003\u0002\u0002\u0002\u011c",
    "\u0808\u0003\u0002\u0002\u0002\u011e\u080a\u0003\u0002\u0002\u0002\u0120",
    "\u0810\u0003\u0002\u0002\u0002\u0122\u0818\u0003\u0002\u0002\u0002\u0124",
    "\u081b\u0003\u0002\u0002\u0002\u0126\u0824\u0003\u0002\u0002\u0002\u0128",
    "\u0830\u0003\u0002\u0002\u0002\u012a\u0836\u0003\u0002\u0002\u0002\u012c",
    "\u0842\u0003\u0002\u0002\u0002\u012e\u084a\u0003\u0002\u0002\u0002\u0130",
    "\u0850\u0003\u0002\u0002\u0002\u0132\u085b\u0003\u0002\u0002\u0002\u0134",
    "\u085d\u0003\u0002\u0002\u0002\u0136\u0861\u0003\u0002\u0002\u0002\u0138",
    "\u086f\u0003\u0002\u0002\u0002\u013a\u0879\u0003\u0002\u0002\u0002\u013c",
    "\u087b\u0003\u0002\u0002\u0002\u013e\u0886\u0003\u0002\u0002\u0002\u0140",
    "\u088a\u0003\u0002\u0002\u0002\u0142\u088c\u0003\u0002\u0002\u0002\u0144",
    "\u0891\u0003\u0002\u0002\u0002\u0146\u0896\u0003\u0002\u0002\u0002\u0148",
    "\u089e\u0003\u0002\u0002\u0002\u014a\u08af\u0003\u0002\u0002\u0002\u014c",
    "\u08b1\u0003\u0002\u0002\u0002\u014e\u08b3\u0003\u0002\u0002\u0002\u0150",
    "\u08b6\u0003\u0002\u0002\u0002\u0152\u08b9\u0003\u0002\u0002\u0002\u0154",
    "\u08bc\u0003\u0002\u0002\u0002\u0156\u08bf\u0003\u0002\u0002\u0002\u0158",
    "\u08c2\u0003\u0002\u0002\u0002\u015a\u08c4\u0003\u0002\u0002\u0002\u015c",
    "\u08c6\u0003\u0002\u0002\u0002\u015e\u08c8\u0003\u0002\u0002\u0002\u0160",
    "\u08ca\u0003\u0002\u0002\u0002\u0162\u08d3\u0003\u0002\u0002\u0002\u0164",
    "\u08d5\u0003\u0002\u0002\u0002\u0166\u08e6\u0003\u0002\u0002\u0002\u0168",
    "\u08e8\u0003\u0002\u0002\u0002\u016a\u08ea\u0003\u0002\u0002\u0002\u016c",
    "\u08f2\u0003\u0002\u0002\u0002\u016e\u08f4\u0003\u0002\u0002\u0002\u0170",
    "\u08fb\u0003\u0002\u0002\u0002\u0172\u0906\u0003\u0002\u0002\u0002\u0174",
    "\u090a\u0003\u0002\u0002\u0002\u0176\u090e\u0003\u0002\u0002\u0002\u0178",
    "\u0915\u0003\u0002\u0002\u0002\u017a\u0917\u0003\u0002\u0002\u0002\u017c",
    "\u091c\u0003\u0002\u0002\u0002\u017e\u091e\u0003\u0002\u0002\u0002\u0180",
    "\u092d\u0003\u0002\u0002\u0002\u0182\u092f\u0003\u0002\u0002\u0002\u0184",
    "\u0937\u0003\u0002\u0002\u0002\u0186\u0939\u0003\u0002\u0002\u0002\u0188",
    "\u0946\u0003\u0002\u0002\u0002\u018a\u0948\u0003\u0002\u0002\u0002\u018c",
    "\u0953\u0003\u0002\u0002\u0002\u018e\u0963\u0003\u0002\u0002\u0002\u0190",
    "\u096a\u0003\u0002\u0002\u0002\u0192\u0979\u0003\u0002\u0002\u0002\u0194",
    "\u097b\u0003\u0002\u0002\u0002\u0196\u0984\u0003\u0002\u0002\u0002\u0198",
    "\u0986\u0003\u0002\u0002\u0002\u019a\u0995\u0003\u0002\u0002\u0002\u019c",
    "\u0997\u0003\u0002\u0002\u0002\u019e\u0999\u0003\u0002\u0002\u0002\u01a0",
    "\u099f\u0003\u0002\u0002\u0002\u01a2\u09a1\u0003\u0002\u0002\u0002\u01a4",
    "\u09a8\u0003\u0002\u0002\u0002\u01a6\u09b3\u0003\u0002\u0002\u0002\u01a8",
    "\u09b7\u0003\u0002\u0002\u0002\u01aa\u09bb\u0003\u0002\u0002\u0002\u01ac",
    "\u09c6\u0003\u0002\u0002\u0002\u01ae\u09d5\u0003\u0002\u0002\u0002\u01b0",
    "\u09d7\u0003\u0002\u0002\u0002\u01b2\u09e0\u0003\u0002\u0002\u0002\u01b4",
    "\u09e2\u0003\u0002\u0002\u0002\u01b6\u09f1\u0003\u0002\u0002\u0002\u01b8",
    "\u09f3\u0003\u0002\u0002\u0002\u01ba\u09f5\u0003\u0002\u0002\u0002\u01bc",
    "\u09fb\u0003\u0002\u0002\u0002\u01be\u09fd\u0003\u0002\u0002\u0002\u01c0",
    "\u0a04\u0003\u0002\u0002\u0002\u01c2\u0a0f\u0003\u0002\u0002\u0002\u01c4",
    "\u0a13\u0003\u0002\u0002\u0002\u01c6\u0a1a\u0003\u0002\u0002\u0002\u01c8",
    "\u0a29\u0003\u0002\u0002\u0002\u01ca\u0a2b\u0003\u0002\u0002\u0002\u01cc",
    "\u0a2f\u0003\u0002\u0002\u0002\u01ce\u0a38\u0003\u0002\u0002\u0002\u01d0",
    "\u0a3a\u0003\u0002\u0002\u0002\u01d2\u0a43\u0003\u0002\u0002\u0002\u01d4",
    "\u0a45\u0003\u0002\u0002\u0002\u01d6\u0a49\u0003\u0002\u0002\u0002\u01d8",
    "\u0a55\u0003\u0002\u0002\u0002\u01da\u0a60\u0003\u0002\u0002\u0002\u01dc",
    "\u0a65\u0003\u0002\u0002\u0002\u01de\u0a6d\u0003\u0002\u0002\u0002\u01e0",
    "\u0a74\u0003\u0002\u0002\u0002\u01e2\u0a80\u0003\u0002\u0002\u0002\u01e4",
    "\u0a83\u0003\u0002\u0002\u0002\u01e6\u0a8e\u0003\u0002\u0002\u0002\u01e8",
    "\u0a91\u0003\u0002\u0002\u0002\u01ea\u0a95\u0003\u0002\u0002\u0002\u01ec",
    "\u0a9d\u0003\u0002\u0002\u0002\u01ee\u0aa6\u0003\u0002\u0002\u0002\u01f0",
    "\u0ab8\u0003\u0002\u0002\u0002\u01f2\u0abb\u0003\u0002\u0002\u0002\u01f4",
    "\u01f5\u0007f\u0002\u0002\u01f5\u01f6\u0005\u00dan\u0002\u01f6\u01fd",
    "\u0007\u0016\u0002\u0002\u01f7\u01fa\u0005\u00dan\u0002\u01f8\u01f9",
    "\u0007\u0013\u0002\u0002\u01f9\u01fb\u0005\u0100\u0081\u0002\u01fa\u01f8",
    "\u0003\u0002\u0002\u0002\u01fa\u01fb\u0003\u0002\u0002\u0002\u01fb\u01fe",
    "\u0003\u0002\u0002\u0002\u01fc\u01fe\u0005\u0100\u0081\u0002\u01fd\u01f7",
    "\u0003\u0002\u0002\u0002\u01fd\u01fc\u0003\u0002\u0002\u0002\u01fe\u01ff",
    "\u0003\u0002\u0002\u0002\u01ff\u0200\u0007\u0017\u0002\u0002\u0200\u0201",
    "\u0007\u0011\u0002\u0002\u0201\u0202\u0005\u008cG\u0002\u0202\u0203",
    "\u0005\u00acW\u0002\u0203\u0204\u0005\u008eH\u0002\u0204\u0003\u0003",
    "\u0002\u0002\u0002\u0205\u0206\u0007f\u0002\u0002\u0206\u0207\u0005",
    "\u00dan\u0002\u0207\u0208\u0007\u0016\u0002\u0002\u0208\u0209\u0005",
    "\u00be`\u0002\u0209\u020a\u0007\u0017\u0002\u0002\u020a\u020b\u0007",
    "\u0011\u0002\u0002\u020b\u020c\u0005\u008cG\u0002\u020c\u020d\u0005",
    "\u00aaV\u0002\u020d\u020e\u0005\u008eH\u0002\u020e\u0005\u0003\u0002",
    "\u0002\u0002\u020f\u0210\u0005\u00dco\u0002\u0210\u0211\u0007.\u0002",
    "\u0002\u0211\u0212\u0005\\/\u0002\u0212\u0007\u0003\u0002\u0002\u0002",
    "\u0213\u0214\u0005\u00dco\u0002\u0214\u0216\u0007\u0016\u0002\u0002",
    "\u0215\u0217\u0005r:\u0002\u0216\u0215\u0003\u0002\u0002\u0002\u0216",
    "\u0217\u0003\u0002\u0002\u0002\u0217\u0218\u0003\u0002\u0002\u0002\u0218",
    "\u0219\u0007\u0017\u0002\u0002\u0219\t\u0003\u0002\u0002\u0002\u021a",
    "\u021c\u0007\u0096\u0002\u0002\u021b\u021a\u0003\u0002\u0002\u0002\u021b",
    "\u021c\u0003\u0002\u0002\u0002\u021c\u021d\u0003\u0002\u0002\u0002\u021d",
    "\u021e\u0007Q\u0002\u0002\u021e\u021f\u0005\u00d8m\u0002\u021f\u0220",
    "\u0007\u0016\u0002\u0002\u0220\u0221\u0005\u00ba^\u0002\u0221\u0237",
    "\u0007\u0017\u0002\u0002\u0222\u0223\u0007\u0011\u0002\u0002\u0223\u0233",
    "\u0005\u008cG\u0002\u0224\u0234\u0007\u008a\u0002\u0002\u0225\u0229",
    "\u0005\u00b0Y\u0002\u0226\u0227\u0005\u0088E\u0002\u0227\u0228\u0005",
    "\f\u0007\u0002\u0228\u022a\u0003\u0002\u0002\u0002\u0229\u0226\u0003",
    "\u0002\u0002\u0002\u0229\u022a\u0003\u0002\u0002\u0002\u022a\u0232\u0003",
    "\u0002\u0002\u0002\u022b\u022f\u0005\f\u0007\u0002\u022c\u022d\u0005",
    "\u0088E\u0002\u022d\u022e\u0005\u00b0Y\u0002\u022e\u0230\u0003\u0002",
    "\u0002\u0002\u022f\u022c\u0003\u0002\u0002\u0002\u022f\u0230\u0003\u0002",
    "\u0002\u0002\u0230\u0232\u0003\u0002\u0002\u0002\u0231\u0225\u0003\u0002",
    "\u0002\u0002\u0231\u022b\u0003\u0002\u0002\u0002\u0232\u0234\u0003\u0002",
    "\u0002\u0002\u0233\u0224\u0003\u0002\u0002\u0002\u0233\u0231\u0003\u0002",
    "\u0002\u0002\u0234\u0235\u0003\u0002\u0002\u0002\u0235\u0236\u0005\u008e",
    "H\u0002\u0236\u0238\u0003\u0002\u0002\u0002\u0237\u0222\u0003\u0002",
    "\u0002\u0002\u0237\u0238\u0003\u0002\u0002\u0002\u0238\u000b\u0003\u0002",
    "\u0002\u0002\u0239\u023a\u0007v\u0002\u0002\u023a\u023c\u0007\u0016",
    "\u0002\u0002\u023b\u023d\u0005\u00fe\u0080\u0002\u023c\u023b\u0003\u0002",
    "\u0002\u0002\u023c\u023d\u0003\u0002\u0002\u0002\u023d\u023e\u0003\u0002",
    "\u0002\u0002\u023e\u023f\u0007\u0017\u0002\u0002\u023f\r\u0003\u0002",
    "\u0002\u0002\u0240\u0241\u0007\u00a0\u0002\u0002\u0241\u0242\u0005\u00da",
    "n\u0002\u0242\u0244\u0007\u0016\u0002\u0002\u0243\u0245\u0005\u00da",
    "n\u0002\u0244\u0243\u0003\u0002\u0002\u0002\u0244\u0245\u0003\u0002",
    "\u0002\u0002\u0245\u0246\u0003\u0002\u0002\u0002\u0246\u0247\u0007\u0017",
    "\u0002\u0002\u0247\u0248\u0007\u0011\u0002\u0002\u0248\u024b\u0005\u008c",
    "G\u0002\u0249\u024c\u0005\u00ecw\u0002\u024a\u024c\u0007\u008a\u0002",
    "\u0002\u024b\u0249\u0003\u0002\u0002\u0002\u024b\u024a\u0003\u0002\u0002",
    "\u0002\u024c\u024d\u0003\u0002\u0002\u0002\u024d\u024e\u0005\u008eH",
    "\u0002\u024e\u000f\u0003\u0002\u0002\u0002\u024f\u0250\u0007~\u0002",
    "\u0002\u0250\u0251\u0007\u00a0\u0002\u0002\u0251\u0252\u0005\u00dan",
    "\u0002\u0252\u0253\u0007\u0016\u0002\u0002\u0253\u0254\u0007\u0017\u0002",
    "\u0002\u0254\u0255\u0007\u0011\u0002\u0002\u0255\u0256\u0005\u008cG",
    "\u0002\u0256\u0257\u0005&\u0014\u0002\u0257\u0258\u0005\u0088E\u0002",
    "\u0258\u0259\u0005\u00f0y\u0002\u0259\u025a\u0005\u008eH\u0002\u025a",
    "\u0011\u0003\u0002\u0002\u0002\u025b\u025d\u0007\u0096\u0002\u0002\u025c",
    "\u025b\u0003\u0002\u0002\u0002\u025c\u025d\u0003\u0002\u0002\u0002\u025d",
    "\u025e\u0003\u0002\u0002\u0002\u025e\u025f\t\u0002\u0002\u0002\u025f",
    "\u0260\u0005\u00dan\u0002\u0260\u0267\u0007\u0016\u0002\u0002\u0261",
    "\u0268\u0005\u0016\f\u0002\u0262\u0268\u0005\u0100\u0081\u0002\u0263",
    "\u0264\u0005\u0016\f\u0002\u0264\u0265\u0007\u0013\u0002\u0002\u0265",
    "\u0266\u0005\u0100\u0081\u0002\u0266\u0268\u0003\u0002\u0002\u0002\u0267",
    "\u0261\u0003\u0002\u0002\u0002\u0267\u0262\u0003\u0002\u0002\u0002\u0267",
    "\u0263\u0003\u0002\u0002\u0002\u0268\u0269\u0003\u0002\u0002\u0002\u0269",
    "\u0272\u0007\u0017\u0002\u0002\u026a\u026b\u0007\u0011\u0002\u0002\u026b",
    "\u026e\u0005\u008cG\u0002\u026c\u026f\u0005\u00ecw\u0002\u026d\u026f",
    "\u0007\u008a\u0002\u0002\u026e\u026c\u0003\u0002\u0002\u0002\u026e\u026d",
    "\u0003\u0002\u0002\u0002\u026f\u0270\u0003\u0002\u0002\u0002\u0270\u0271",
    "\u0005\u008eH\u0002\u0271\u0273\u0003\u0002\u0002\u0002\u0272\u026a",
    "\u0003\u0002\u0002\u0002\u0272\u0273\u0003\u0002\u0002\u0002\u0273\u0013",
    "\u0003\u0002\u0002\u0002\u0274\u0275\u0007\u0094\u0002\u0002\u0275\u0276",
    "\u0005\u00dan\u0002\u0276\u0277\u0007\u0016\u0002\u0002\u0277\u0278",
    "\u0005\u0100\u0081\u0002\u0278\u0279\u0007\u0017\u0002\u0002\u0279\u027a",
    "\u0007\u0011\u0002\u0002\u027a\u027d\u0005\u008cG\u0002\u027b\u027e",
    "\u0005\u00ecw\u0002\u027c\u027e\u0007\u008a\u0002\u0002\u027d\u027b",
    "\u0003\u0002\u0002\u0002\u027d\u027c\u0003\u0002\u0002\u0002\u027e\u027f",
    "\u0003\u0002\u0002\u0002\u027f\u0280\u0005\u008eH\u0002\u0280\u0015",
    "\u0003\u0002\u0002\u0002\u0281\u0282\u0005\u00caf\u0002\u0282\u0017",
    "\u0003\u0002\u0002\u0002\u0283\u0284\u0007]\u0002\u0002\u0284\u0285",
    "\u0007\u0086\u0002\u0002\u0285\u0286\u0005\u014a\u00a6\u0002\u0286\u0287",
    "\u0007\u0016\u0002\u0002\u0287\u0288\u0005\u00e2r\u0002\u0288\u028b",
    "\u0007\u0017\u0002\u0002\u0289\u028a\u00074\u0002\u0002\u028a\u028c",
    "\u0005\u00ba^\u0002\u028b\u0289\u0003\u0002\u0002\u0002\u028b\u028c",
    "\u0003\u0002\u0002\u0002\u028c\u028d\u0003\u0002\u0002\u0002\u028d\u028e",
    "\u0007\u0011\u0002\u0002\u028e\u028f\u0005\u008cG\u0002\u028f\u0290",
    "\u0005\u010e\u0088\u0002\u0290\u0291\u0005\u008eH\u0002\u0291\u0019",
    "\u0003\u0002\u0002\u0002\u0292\u0293\u0007]\u0002\u0002\u0293\u0294",
    "\u0005\u00d6l\u0002\u0294\u0295\u0007\u0093\u0002\u0002\u0295\u0296",
    "\u0007\u0016\u0002\u0002\u0296\u0297\u0007\u0017\u0002\u0002\u0297\u0298",
    "\u0007\u0011\u0002\u0002\u0298\u0299\u0005\u008cG\u0002\u0299\u029a",
    "\u0005\u010e\u0088\u0002\u029a\u029b\u0005\u008eH\u0002\u029b\u001b",
    "\u0003\u0002\u0002\u0002\u029c\u029d\u0007]\u0002\u0002\u029d\u029f",
    "\u0005\u00d6l\u0002\u029e\u02a0\u0007~\u0002\u0002\u029f\u029e\u0003",
    "\u0002\u0002\u0002\u029f\u02a0\u0003\u0002\u0002\u0002\u02a0\u02a1\u0003",
    "\u0002\u0002\u0002\u02a1\u02a2\u0007\u0093\u0002\u0002\u02a2\u02a3\u0007",
    "\u0016\u0002\u0002\u02a3\u02a4\u0007\u0017\u0002\u0002\u02a4\u02a5\u0007",
    "\u0011\u0002\u0002\u02a5\u02a6\u0005\u008cG\u0002\u02a6\u02a7\u0005",
    "\u0106\u0084\u0002\u02a7\u02a8\u0005\u008eH\u0002\u02a8\u001d\u0003",
    "\u0002\u0002\u0002\u02a9\u02aa\u0007]\u0002\u0002\u02aa\u02ab\u0005",
    "\u00d6l\u0002\u02ab\u02ac\u0007r\u0002\u0002\u02ac\u02ad\u0007\u0016",
    "\u0002\u0002\u02ad\u02ae\u0007\u0017\u0002\u0002\u02ae\u02af\u0007\u0011",
    "\u0002\u0002\u02af\u02b0\u0005\u008cG\u0002\u02b0\u02b1\u0005\u010e",
    "\u0088\u0002\u02b1\u02b2\u0005\u008eH\u0002\u02b2\u001f\u0003\u0002",
    "\u0002\u0002\u02b3\u02b4\u0007]\u0002\u0002\u02b4\u02b6\u0005\u00d6",
    "l\u0002\u02b5\u02b7\u0007~\u0002\u0002\u02b6\u02b5\u0003\u0002\u0002",
    "\u0002\u02b6\u02b7\u0003\u0002\u0002\u0002\u02b7\u02b8\u0003\u0002\u0002",
    "\u0002\u02b8\u02b9\u0007r\u0002\u0002\u02b9\u02ba\u0007\u0016\u0002",
    "\u0002\u02ba\u02bb\u0007\u0017\u0002\u0002\u02bb\u02bc\u0007\u0011\u0002",
    "\u0002\u02bc\u02bd\u0005\u008cG\u0002\u02bd\u02be\u0005\u0106\u0084",
    "\u0002\u02be\u02bf\u0005\u008eH\u0002\u02bf!\u0003\u0002\u0002\u0002",
    "\u02c0\u02c2\u0007\u0096\u0002\u0002\u02c1\u02c0\u0003\u0002\u0002\u0002",
    "\u02c1\u02c2\u0003\u0002\u0002\u0002\u02c2\u02c3\u0003\u0002\u0002\u0002",
    "\u02c3\u02c4\u0007~\u0002\u0002\u02c4\u02c5\t\u0002\u0002\u0002\u02c5",
    "\u02c6\u0005\u00dan\u0002\u02c6\u02c8\u0007\u0016\u0002\u0002\u02c7",
    "\u02c9\u0005\u0100\u0081\u0002\u02c8\u02c7\u0003\u0002\u0002\u0002\u02c8",
    "\u02c9\u0003\u0002\u0002\u0002\u02c9\u02ca\u0003\u0002\u0002\u0002\u02ca",
    "\u02cb\u0007\u0017\u0002\u0002\u02cb\u02cc\u0007\u0011\u0002\u0002\u02cc",
    "\u02cd\u0005\u008cG\u0002\u02cd\u02d1\u0005&\u0014\u0002\u02ce\u02cf",
    "\u0005\u0088E\u0002\u02cf\u02d0\u0005\u00f0y\u0002\u02d0\u02d2\u0003",
    "\u0002\u0002\u0002\u02d1\u02ce\u0003\u0002\u0002\u0002\u02d1\u02d2\u0003",
    "\u0002\u0002\u0002\u02d2\u02d3\u0003\u0002\u0002\u0002\u02d3\u02d4\u0005",
    "\u008eH\u0002\u02d4#\u0003\u0002\u0002\u0002\u02d5\u02d7\u0007\u0096",
    "\u0002\u0002\u02d6\u02d5\u0003\u0002\u0002\u0002\u02d6\u02d7\u0003\u0002",
    "\u0002\u0002\u02d7\u02d8\u0003\u0002\u0002\u0002\u02d8\u02d9\u0007~",
    "\u0002\u0002\u02d9\u02da\u0007\u008e\u0002\u0002\u02da\u02db\u0005\u00da",
    "n\u0002\u02db\u02dd\u0007\u0016\u0002\u0002\u02dc\u02de\u0005\u0100",
    "\u0081\u0002\u02dd\u02dc\u0003\u0002\u0002\u0002\u02dd\u02de\u0003\u0002",
    "\u0002\u0002\u02de\u02df\u0003\u0002\u0002\u0002\u02df\u02e0\u0007\u0017",
    "\u0002\u0002\u02e0\u02e1\u0007\u0011\u0002\u0002\u02e1\u02e2\u0005\u008c",
    "G\u0002\u02e2\u02e6\u0005&\u0014\u0002\u02e3\u02e4\u0005\u0088E\u0002",
    "\u02e4\u02e5\u0005\u00f0y\u0002\u02e5\u02e7\u0003\u0002\u0002\u0002",
    "\u02e6\u02e3\u0003\u0002\u0002\u0002\u02e6\u02e7\u0003\u0002\u0002\u0002",
    "\u02e7\u02e8\u0003\u0002\u0002\u0002\u02e8\u02e9\u0005\u008eH\u0002",
    "\u02e9%\u0003\u0002\u0002\u0002\u02ea\u02eb\u0007]\u0002\u0002\u02eb",
    "\u02ec\t\u0002\u0002\u0002\u02ec\u02ed\u0007T\u0002\u0002\u02ed\u02ee",
    "\u0007\u0011\u0002\u0002\u02ee\u02ef\u0005\u008cG\u0002\u02ef\u02f0",
    "\u0005(\u0015\u0002\u02f0\u02f1\u0005\u008eH\u0002\u02f1\'\u0003\u0002",
    "\u0002\u0002\u02f2\u02f3\b\u0015\u0001\u0002\u02f3\u02f4\u0005\u00f4",
    "{\u0002\u02f4\u02fb\u0003\u0002\u0002\u0002\u02f5\u02f6\f\u0003\u0002",
    "\u0002\u02f6\u02f7\u0005\u0088E\u0002\u02f7\u02f8\u0005\u00f4{\u0002",
    "\u02f8\u02fa\u0003\u0002\u0002\u0002\u02f9\u02f5\u0003\u0002\u0002\u0002",
    "\u02fa\u02fd\u0003\u0002\u0002\u0002\u02fb\u02f9\u0003\u0002\u0002\u0002",
    "\u02fb\u02fc\u0003\u0002\u0002\u0002\u02fc)\u0003\u0002\u0002\u0002",
    "\u02fd\u02fb\u0003\u0002\u0002\u0002\u02fe\u02ff\u0007J\u0002\u0002",
    "\u02ff\u0300\u0007]\u0002\u0002\u0300\u0301\u0005\u00ccg\u0002\u0301",
    "\u0303\u0007\u0016\u0002\u0002\u0302\u0304\u0005\u00dep\u0002\u0303",
    "\u0302\u0003\u0002\u0002\u0002\u0303\u0304\u0003\u0002\u0002\u0002\u0304",
    "\u0305\u0003\u0002\u0002\u0002\u0305\u0308\u0007\u0017\u0002\u0002\u0306",
    "\u0307\u00074\u0002\u0002\u0307\u0309\u0005\u00ba^\u0002\u0308\u0306",
    "\u0003\u0002\u0002\u0002\u0308\u0309\u0003\u0002\u0002\u0002\u0309+",
    "\u0003\u0002\u0002\u0002\u030a\u030b\u0007]\u0002\u0002\u030b\u030c",
    "\u0005\u00ccg\u0002\u030c\u030e\u0007\u0016\u0002\u0002\u030d\u030f",
    "\u0005\u00dep\u0002\u030e\u030d\u0003\u0002\u0002\u0002\u030e\u030f",
    "\u0003\u0002\u0002\u0002\u030f\u0310\u0003\u0002\u0002\u0002\u0310\u0313",
    "\u0007\u0017\u0002\u0002\u0311\u0312\u00074\u0002\u0002\u0312\u0314",
    "\u0005\u00ba^\u0002\u0313\u0311\u0003\u0002\u0002\u0002\u0313\u0314",
    "\u0003\u0002\u0002\u0002\u0314\u0315\u0003\u0002\u0002\u0002\u0315\u0316",
    "\u0007\u0011\u0002\u0002\u0316\u0319\u0005\u008cG\u0002\u0317\u031a",
    "\u0005\u010e\u0088\u0002\u0318\u031a\u0007\u008a\u0002\u0002\u0319\u0317",
    "\u0003\u0002\u0002\u0002\u0319\u0318\u0003\u0002\u0002\u0002\u031a\u031b",
    "\u0003\u0002\u0002\u0002\u031b\u031c\u0005\u008eH\u0002\u031c-\u0003",
    "\u0002\u0002\u0002\u031d\u031f\u0007]\u0002\u0002\u031e\u0320\u0007",
    "~\u0002\u0002\u031f\u031e\u0003\u0002\u0002\u0002\u031f\u0320\u0003",
    "\u0002\u0002\u0002\u0320\u0321\u0003\u0002\u0002\u0002\u0321\u0322\u0005",
    "\u00ccg\u0002\u0322\u0324\u0007\u0016\u0002\u0002\u0323\u0325\u0005",
    "\u00dep\u0002\u0324\u0323\u0003\u0002\u0002\u0002\u0324\u0325\u0003",
    "\u0002\u0002\u0002\u0325\u0326\u0003\u0002\u0002\u0002\u0326\u0329\u0007",
    "\u0017\u0002\u0002\u0327\u0328\u00074\u0002\u0002\u0328\u032a\u0005",
    "\u00e8u\u0002\u0329\u0327\u0003\u0002\u0002\u0002\u0329\u032a\u0003",
    "\u0002\u0002\u0002\u032a\u032b\u0003\u0002\u0002\u0002\u032b\u032c\u0007",
    "\u0011\u0002\u0002\u032c\u032d\u0005\u008cG\u0002\u032d\u032e\u0005",
    "\u0106\u0084\u0002\u032e\u032f\u0005\u008eH\u0002\u032f/\u0003\u0002",
    "\u0002\u0002\u0330\u0331\u0007]\u0002\u0002\u0331\u0332\u0007\u0099",
    "\u0002\u0002\u0332\u0333\u0007\u00b0\u0002\u0002\u0333\u0334\u0007\u0016",
    "\u0002\u0002\u0334\u0335\u0007\u0017\u0002\u0002\u0335\u0336\u0007\u0011",
    "\u0002\u0002\u0336\u0337\u0005\u008cG\u0002\u0337\u0338\u0005\u010e",
    "\u0088\u0002\u0338\u0339\u0005\u008eH\u0002\u0339\u033a\u0005\u0088",
    "E\u0002\u033a\u033b\u0007\u009f\u0002\u0002\u033b\u0341\u0007\u0011",
    "\u0002\u0002\u033c\u033d\u0005\u008cG\u0002\u033d\u033e\u0005\u0110",
    "\u0089\u0002\u033e\u033f\u0005\u008eH\u0002\u033f\u0342\u0003\u0002",
    "\u0002\u0002\u0340\u0342\u0005\u00dco\u0002\u0341\u033c\u0003\u0002",
    "\u0002\u0002\u0341\u0340\u0003\u0002\u0002\u0002\u03421\u0003\u0002",
    "\u0002\u0002\u0343\u0344\u0005\\/\u0002\u03443\u0003\u0002\u0002\u0002",
    "\u0345\u0346\u0005\u00d6l\u0002\u0346\u0347\u0007\u0011\u0002\u0002",
    "\u0347\u034c\u0005\u00e8u\u0002\u0348\u0349\u0007\u0016\u0002\u0002",
    "\u0349\u034a\u0005\u0100\u0081\u0002\u034a\u034b\u0007\u0017\u0002\u0002",
    "\u034b\u034d\u0003\u0002\u0002\u0002\u034c\u0348\u0003\u0002\u0002\u0002",
    "\u034c\u034d\u0003\u0002\u0002\u0002\u034d\u0350\u0003\u0002\u0002\u0002",
    "\u034e\u034f\u0007.\u0002\u0002\u034f\u0351\u0005\u0120\u0091\u0002",
    "\u0350\u034e\u0003\u0002\u0002\u0002\u0350\u0351\u0003\u0002\u0002\u0002",
    "\u03515\u0003\u0002\u0002\u0002\u0352\u0367\u0005> \u0002\u0353\u0367",
    "\u0005\u0080A\u0002\u0354\u0367\u0005\u0084C\u0002\u0355\u0367\u0005",
    ":\u001e\u0002\u0356\u0367\u0005|?\u0002\u0357\u0367\u00058\u001d\u0002",
    "\u0358\u0367\u0005X-\u0002\u0359\u0367\u0005Z.\u0002\u035a\u0367\u0005",
    "N(\u0002\u035b\u0367\u0005D#\u0002\u035c\u0367\u0005H%\u0002\u035d\u0367",
    "\u0005L\'\u0002\u035e\u0367\u0005J&\u0002\u035f\u0367\u0005R*\u0002",
    "\u0360\u0367\u0005T+\u0002\u0361\u0367\u0005v<\u0002\u0362\u0367\u0005",
    "@!\u0002\u0363\u0367\u0005B\"\u0002\u0364\u0367\u0005,\u0017\u0002\u0365",
    "\u0367\u0005\u0104\u0083\u0002\u0366\u0352\u0003\u0002\u0002\u0002\u0366",
    "\u0353\u0003\u0002\u0002\u0002\u0366\u0354\u0003\u0002\u0002\u0002\u0366",
    "\u0355\u0003\u0002\u0002\u0002\u0366\u0356\u0003\u0002\u0002\u0002\u0366",
    "\u0357\u0003\u0002\u0002\u0002\u0366\u0358\u0003\u0002\u0002\u0002\u0366",
    "\u0359\u0003\u0002\u0002\u0002\u0366\u035a\u0003\u0002\u0002\u0002\u0366",
    "\u035b\u0003\u0002\u0002\u0002\u0366\u035c\u0003\u0002\u0002\u0002\u0366",
    "\u035d\u0003\u0002\u0002\u0002\u0366\u035e\u0003\u0002\u0002\u0002\u0366",
    "\u035f\u0003\u0002\u0002\u0002\u0366\u0360\u0003\u0002\u0002\u0002\u0366",
    "\u0361\u0003\u0002\u0002\u0002\u0366\u0362\u0003\u0002\u0002\u0002\u0366",
    "\u0363\u0003\u0002\u0002\u0002\u0366\u0364\u0003\u0002\u0002\u0002\u0366",
    "\u0365\u0003\u0002\u0002\u0002\u03677\u0003\u0002\u0002\u0002\u0368",
    "\u0369\u0007o\u0002\u0002\u0369\u036a\u0007\u0016\u0002\u0002\u036a",
    "\u036b\u0007\u0017\u0002\u0002\u036b9\u0003\u0002\u0002\u0002\u036c",
    "\u036d\u0007`\u0002\u0002\u036d\u036e\u0007\u0016\u0002\u0002\u036e",
    "\u036f\u0005\u00b6\\\u0002\u036f\u0376\u0007\u0017\u0002\u0002\u0370",
    "\u0371\u0007M\u0002\u0002\u0371\u0372\u0007\u0097\u0002\u0002\u0372",
    "\u0373\u0007\u0016\u0002\u0002\u0373\u0374\u0005\u00b6\\\u0002\u0374",
    "\u0375\u0007\u0017\u0002\u0002\u0375\u0377\u0003\u0002\u0002\u0002\u0376",
    "\u0370\u0003\u0002\u0002\u0002\u0376\u0377\u0003\u0002\u0002\u0002\u0377",
    "\u037e\u0003\u0002\u0002\u0002\u0378\u0379\u0007\u0097\u0002\u0002\u0379",
    "\u037a\u0007\u0016\u0002\u0002\u037a\u037b\u0005\u00b6\\\u0002\u037b",
    "\u037c\u0007\u0017\u0002\u0002\u037c\u037e\u0003\u0002\u0002\u0002\u037d",
    "\u036c\u0003\u0002\u0002\u0002\u037d\u0378\u0003\u0002\u0002\u0002\u037e",
    "\u0385\u0003\u0002\u0002\u0002\u037f\u0380\u0007\u009a\u0002\u0002\u0380",
    "\u0381\u0007\u0011\u0002\u0002\u0381\u0382\u0005\u008cG\u0002\u0382",
    "\u0383\u0005\u010e\u0088\u0002\u0383\u0384\u0005\u008eH\u0002\u0384",
    "\u0386\u0003\u0002\u0002\u0002\u0385\u037f\u0003\u0002\u0002\u0002\u0385",
    "\u0386\u0003\u0002\u0002\u0002\u0386;\u0003\u0002\u0002\u0002\u0387",
    "\u0388\u0005\u00ccg\u0002\u0388\u038a\u0007\u0016\u0002\u0002\u0389",
    "\u038b\u0005r:\u0002\u038a\u0389\u0003\u0002\u0002\u0002\u038a\u038b",
    "\u0003\u0002\u0002\u0002\u038b\u038c\u0003\u0002\u0002\u0002\u038c\u038d",
    "\u0007\u0017\u0002\u0002\u038d=\u0003\u0002\u0002\u0002\u038e\u038f",
    "\u0005b2\u0002\u038f\u0390\u0007\u0015\u0002\u0002\u0390\u0392\u0003",
    "\u0002\u0002\u0002\u0391\u038e\u0003\u0002\u0002\u0002\u0391\u0392\u0003",
    "\u0002\u0002\u0002\u0392\u0393\u0003\u0002\u0002\u0002\u0393\u039e\u0005",
    "<\u001f\u0002\u0394\u0397\u0007\u009a\u0002\u0002\u0395\u0396\u0007",
    "\u00a1\u0002\u0002\u0396\u0398\u0005\u00d6l\u0002\u0397\u0395\u0003",
    "\u0002\u0002\u0002\u0397\u0398\u0003\u0002\u0002\u0002\u0398\u0399\u0003",
    "\u0002\u0002\u0002\u0399\u039a\u0007\u0011\u0002\u0002\u039a\u039b\u0005",
    "\u008cG\u0002\u039b\u039c\u0005\u010e\u0088\u0002\u039c\u039d\u0005",
    "\u008eH\u0002\u039d\u039f\u0003\u0002\u0002\u0002\u039e\u0394\u0003",
    "\u0002\u0002\u0002\u039e\u039f\u0003\u0002\u0002\u0002\u039f?\u0003",
    "\u0002\u0002\u0002\u03a0\u03a1\u0007\u00a1\u0002\u0002\u03a1\u03a2\u0005",
    "\u0134\u009b\u0002\u03a2\u03a3\u0007\u0011\u0002\u0002\u03a3\u03a4\u0005",
    "\u008cG\u0002\u03a4\u03a5\u0005\u010e\u0088\u0002\u03a5\u03a6\u0005",
    "\u008eH\u0002\u03a6A\u0003\u0002\u0002\u0002\u03a7\u03a8\u0007\u00a1",
    "\u0002\u0002\u03a8\u03a9\u0005\u00dan\u0002\u03a9\u03aa\u0007\u0011",
    "\u0002\u0002\u03aa\u03ab\u0005\u008cG\u0002\u03ab\u03ac\u0005\u010e",
    "\u0088\u0002\u03ac\u03ad\u0005\u008eH\u0002\u03adC\u0003\u0002\u0002",
    "\u0002\u03ae\u03af\u0007\u0098\u0002\u0002\u03af\u03b0\u0007\u0083\u0002",
    "\u0002\u03b0\u03b1\u0005\\/\u0002\u03b1\u03b2\u0007\u0011\u0002\u0002",
    "\u03b2\u03b3\u0005\u008cG\u0002\u03b3\u03bb\u0005\u0112\u008a\u0002",
    "\u03b4\u03b5\u0005\u0088E\u0002\u03b5\u03b6\u0007\u0089\u0002\u0002",
    "\u03b6\u03b7\u0007\u0011\u0002\u0002\u03b7\u03b8\u0005\u008cG\u0002",
    "\u03b8\u03b9\u0005\u010e\u0088\u0002\u03b9\u03ba\u0005\u008eH\u0002",
    "\u03ba\u03bc\u0003\u0002\u0002\u0002\u03bb\u03b4\u0003\u0002\u0002\u0002",
    "\u03bb\u03bc\u0003\u0002\u0002\u0002\u03bc\u03bd\u0003\u0002\u0002\u0002",
    "\u03bd\u03be\u0005\u008eH\u0002\u03beE\u0003\u0002\u0002\u0002\u03bf",
    "\u03c0\u0007\u00a2\u0002\u0002\u03c0\u03c1\u0005\u0118\u008d\u0002\u03c1",
    "\u03c2\u0007\u0011\u0002\u0002\u03c2\u03c3\u0005\u008cG\u0002\u03c3",
    "\u03c4\u0005\u010e\u0088\u0002\u03c4\u03c5\u0005\u008eH\u0002\u03c5",
    "\u03cf\u0003\u0002\u0002\u0002\u03c6\u03c7\u0007\u00a2\u0002\u0002\u03c7",
    "\u03c8\u0007u\u0002\u0002\u03c8\u03c9\u0005\u0116\u008c\u0002\u03c9",
    "\u03ca\u0007\u0011\u0002\u0002\u03ca\u03cb\u0005\u008cG\u0002\u03cb",
    "\u03cc\u0005\u010e\u0088\u0002\u03cc\u03cd\u0005\u008eH\u0002\u03cd",
    "\u03cf\u0003\u0002\u0002\u0002\u03ce\u03bf\u0003\u0002\u0002\u0002\u03ce",
    "\u03c6\u0003\u0002\u0002\u0002\u03cfG\u0003\u0002\u0002\u0002\u03d0",
    "\u03d1\u0007p\u0002\u0002\u03d1\u03d4\u0005\u00d6l\u0002\u03d2\u03d3",
    "\u0007\u0013\u0002\u0002\u03d3\u03d5\u0005\u00d6l\u0002\u03d4\u03d2",
    "\u0003\u0002\u0002\u0002\u03d4\u03d5\u0003\u0002\u0002\u0002\u03d5\u03d6",
    "\u0003\u0002\u0002\u0002\u03d6\u03d7\u0007u\u0002\u0002\u03d7\u03d8",
    "\u0005\\/\u0002\u03d8\u03d9\u0007\u0011\u0002\u0002\u03d9\u03da\u0005",
    "\u008cG\u0002\u03da\u03db\u0005\u010e\u0088\u0002\u03db\u03dc\u0005",
    "\u008eH\u0002\u03dcI\u0003\u0002\u0002\u0002\u03dd\u03de\u0007b\u0002",
    "\u0002\u03de\u03df\u0007\u0011\u0002\u0002\u03df\u03e0\u0005\u008cG",
    "\u0002\u03e0\u03e1\u0005\u010e\u0088\u0002\u03e1\u03e2\u0005\u008eH",
    "\u0002\u03e2\u03e3\u0005\u0088E\u0002\u03e3\u03e4\u0007\u00a4\u0002",
    "\u0002\u03e4\u03e5\u0005\\/\u0002\u03e5K\u0003\u0002\u0002\u0002\u03e6",
    "\u03e7\u0007\u00a4\u0002\u0002\u03e7\u03e8\u0005\\/\u0002\u03e8\u03e9",
    "\u0007\u0011\u0002\u0002\u03e9\u03ea\u0005\u008cG\u0002\u03ea\u03eb",
    "\u0005\u010e\u0088\u0002\u03eb\u03ec\u0005\u008eH\u0002\u03ecM\u0003",
    "\u0002\u0002\u0002\u03ed\u03ee\u0007t\u0002\u0002\u03ee\u03ef\u0005",
    "\\/\u0002\u03ef\u03f0\u0007\u0011\u0002\u0002\u03f0\u03f1\u0005\u008c",
    "G\u0002\u03f1\u03f2\u0005\u010e\u0088\u0002\u03f2\u03f6\u0005\u008e",
    "H\u0002\u03f3\u03f4\u0005\u0088E\u0002\u03f4\u03f5\u0005P)\u0002\u03f5",
    "\u03f7\u0003\u0002\u0002\u0002\u03f6\u03f3\u0003\u0002\u0002\u0002\u03f6",
    "\u03f7\u0003\u0002\u0002\u0002\u03f7\u03ff\u0003\u0002\u0002\u0002\u03f8",
    "\u03f9\u0005\u0088E\u0002\u03f9\u03fa\u0007e\u0002\u0002\u03fa\u03fb",
    "\u0007\u0011\u0002\u0002\u03fb\u03fc\u0005\u008cG\u0002\u03fc\u03fd",
    "\u0005\u010e\u0088\u0002\u03fd\u03fe\u0005\u008eH\u0002\u03fe\u0400",
    "\u0003\u0002\u0002\u0002\u03ff\u03f8\u0003\u0002\u0002\u0002\u03ff\u0400",
    "\u0003\u0002\u0002\u0002\u0400O\u0003\u0002\u0002\u0002\u0401\u0402",
    "\b)\u0001\u0002\u0402\u0403\u0007e\u0002\u0002\u0403\u0404\u0007t\u0002",
    "\u0002\u0404\u0405\u0005\\/\u0002\u0405\u0406\u0007\u0011\u0002\u0002",
    "\u0406\u0407\u0005\u008cG\u0002\u0407\u0408\u0005\u010e\u0088\u0002",
    "\u0408\u0409\u0005\u008eH\u0002\u0409\u0416\u0003\u0002\u0002\u0002",
    "\u040a\u040b\f\u0003\u0002\u0002\u040b\u040c\u0005\u0088E\u0002\u040c",
    "\u040d\u0007e\u0002\u0002\u040d\u040e\u0007t\u0002\u0002\u040e\u040f",
    "\u0005\\/\u0002\u040f\u0410\u0007\u0011\u0002\u0002\u0410\u0411\u0005",
    "\u008cG\u0002\u0411\u0412\u0005\u010e\u0088\u0002\u0412\u0413\u0005",
    "\u008eH\u0002\u0413\u0415\u0003\u0002\u0002\u0002\u0414\u040a\u0003",
    "\u0002\u0002\u0002\u0415\u0418\u0003\u0002\u0002\u0002\u0416\u0414\u0003",
    "\u0002\u0002\u0002\u0416\u0417\u0003\u0002\u0002\u0002\u0417Q\u0003",
    "\u0002\u0002\u0002\u0418\u0416\u0003\u0002\u0002\u0002\u0419\u041a\u0007",
    "\u008b\u0002\u0002\u041a\u041b\u0005\\/\u0002\u041bS\u0003\u0002\u0002",
    "\u0002\u041c\u041d\u0007\u009e\u0002\u0002\u041d\u041e\u0005\u00d6l",
    "\u0002\u041e\u041f\u0007\u0011\u0002\u0002\u041f\u0420\u0005\u008cG",
    "\u0002\u0420\u0421\u0005\u010e\u0088\u0002\u0421\u0422\u0005\u008eH",
    "\u0002\u0422\u0424\u0005\u0086D\u0002\u0423\u0425\u0005\u0114\u008b",
    "\u0002\u0424\u0423\u0003\u0002\u0002\u0002\u0424\u0425\u0003\u0002\u0002",
    "\u0002\u0425\u042d\u0003\u0002\u0002\u0002\u0426\u0427\u0007h\u0002",
    "\u0002\u0427\u0428\u0007\u0011\u0002\u0002\u0428\u0429\u0005\u008cG",
    "\u0002\u0429\u042a\u0005\u010e\u0088\u0002\u042a\u042b\u0005\u008eH",
    "\u0002\u042b\u042c\u0005\u0086D\u0002\u042c\u042e\u0003\u0002\u0002",
    "\u0002\u042d\u0426\u0003\u0002\u0002\u0002\u042d\u042e\u0003\u0002\u0002",
    "\u0002\u042e\u0436\u0003\u0002\u0002\u0002\u042f\u0430\u0007n\u0002",
    "\u0002\u0430\u0431\u0007\u0011\u0002\u0002\u0431\u0432\u0005\u008cG",
    "\u0002\u0432\u0433\u0005\u010e\u0088\u0002\u0433\u0434\u0005\u008eH",
    "\u0002\u0434\u0435\u0005\u0086D\u0002\u0435\u0437\u0003\u0002\u0002",
    "\u0002\u0436\u042f\u0003\u0002\u0002\u0002\u0436\u0437\u0003\u0002\u0002",
    "\u0002\u0437\u0438\u0003\u0002\u0002\u0002\u0438\u0439\u0005\u0086D",
    "\u0002\u0439U\u0003\u0002\u0002\u0002\u043a\u043b\u0007h\u0002\u0002",
    "\u043b\u043c\u0005\u00dco\u0002\u043c\u043d\u0007\u0011\u0002\u0002",
    "\u043d\u043e\u0005\u008cG\u0002\u043e\u043f\u0005\u010e\u0088\u0002",
    "\u043f\u0440\u0005\u008eH\u0002\u0440\u0441\u0005\u0086D\u0002\u0441",
    "\u044e\u0003\u0002\u0002\u0002\u0442\u0443\u0007h\u0002\u0002\u0443",
    "\u0444\u0007u\u0002\u0002\u0444\u0445\u0007\u0018\u0002\u0002\u0445",
    "\u0446\u0005\u00aeX\u0002\u0446\u0447\u0007\u0019\u0002\u0002\u0447",
    "\u0448\u0007\u0011\u0002\u0002\u0448\u0449\u0005\u008cG\u0002\u0449",
    "\u044a\u0005\u010e\u0088\u0002\u044a\u044b\u0005\u008eH\u0002\u044b",
    "\u044c\u0005\u0086D\u0002\u044c\u044e\u0003\u0002\u0002\u0002\u044d",
    "\u043a\u0003\u0002\u0002\u0002\u044d\u0442\u0003\u0002\u0002\u0002\u044e",
    "W\u0003\u0002\u0002\u0002\u044f\u0450\u0007U\u0002\u0002\u0450Y\u0003",
    "\u0002\u0002\u0002\u0451\u0453\u0007\u008f\u0002\u0002\u0452\u0454\u0005",
    "\\/\u0002\u0453\u0452\u0003\u0002\u0002\u0002\u0453\u0454\u0003\u0002",
    "\u0002\u0002\u0454[\u0003\u0002\u0002\u0002\u0455\u0456\b/\u0001\u0002",
    "\u0456\u046b\u0005\u01ea\u00f6\u0002\u0457\u046b\u0005\u01cc\u00e7\u0002",
    "\u0458\u046b\u0005b2\u0002\u0459\u046b\u0005d3\u0002\u045a\u046b\u0005",
    "\u013a\u009e\u0002\u045b\u045c\u0007#\u0002\u0002\u045c\u046b\u0005",
    "\\/$\u045d\u045e\u0007\u0080\u0002\u0002\u045e\u046b\u0005\\/#\u045f",
    "\u0460\u0007A\u0002\u0002\u0460\u0461\u0007\u0016\u0002\u0002\u0461",
    "\u0462\u0005\\/\u0002\u0462\u0463\u0007\u0017\u0002\u0002\u0463\u046b",
    "\u0003\u0002\u0002\u0002\u0464\u0465\u0007i\u0002\u0002\u0465\u0466",
    "\u0007\u0016\u0002\u0002\u0466\u0467\u0005\u00d6l\u0002\u0467\u0468",
    "\u0007\u0017\u0002\u0002\u0468\u046b\u0003\u0002\u0002\u0002\u0469\u046b",
    "\u0005^0\u0002\u046a\u0455\u0003\u0002\u0002\u0002\u046a\u0457\u0003",
    "\u0002\u0002\u0002\u046a\u0458\u0003\u0002\u0002\u0002\u046a\u0459\u0003",
    "\u0002\u0002\u0002\u046a\u045a\u0003\u0002\u0002\u0002\u046a\u045b\u0003",
    "\u0002\u0002\u0002\u046a\u045d\u0003\u0002\u0002\u0002\u046a\u045f\u0003",
    "\u0002\u0002\u0002\u046a\u0464\u0003\u0002\u0002\u0002\u046a\u0469\u0003",
    "\u0002\u0002\u0002\u046b\u04dc\u0003\u0002\u0002\u0002\u046c\u046d\f",
    "\"\u0002\u0002\u046d\u046e\u0005\u015a\u00ae\u0002\u046e\u046f\u0005",
    "\\/#\u046f\u04db\u0003\u0002\u0002\u0002\u0470\u0471\f!\u0002\u0002",
    "\u0471\u0472\u0005\u015c\u00af\u0002\u0472\u0473\u0005\\/\"\u0473\u04db",
    "\u0003\u0002\u0002\u0002\u0474\u0475\f \u0002\u0002\u0475\u0476\u0005",
    "\u0160\u00b1\u0002\u0476\u0477\u0005\\/!\u0477\u04db\u0003\u0002\u0002",
    "\u0002\u0478\u0479\f\u001f\u0002\u0002\u0479\u047a\u0005\u015e\u00b0",
    "\u0002\u047a\u047b\u0005\\/ \u047b\u04db\u0003\u0002\u0002\u0002\u047c",
    "\u047d\f\u001e\u0002\u0002\u047d\u047e\t\u0003\u0002\u0002\u047e\u04db",
    "\u0005\\/\u001f\u047f\u0480\f\u001c\u0002\u0002\u0480\u0481\u0007*\u0002",
    "\u0002\u0481\u04db\u0005\\/\u001d\u0482\u0483\f\u001b\u0002\u0002\u0483",
    "\u0484\u0007+\u0002\u0002\u0484\u04db\u0005\\/\u001c\u0485\u0486\f\u001a",
    "\u0002\u0002\u0486\u0487\u0007(\u0002\u0002\u0487\u04db\u0005\\/\u001b",
    "\u0488\u0489\f\u0019\u0002\u0002\u0489\u048a\u0007)\u0002\u0002\u048a",
    "\u04db\u0005\\/\u001a\u048b\u048c\f\u0016\u0002\u0002\u048c\u048d\u0007",
    "0\u0002\u0002\u048d\u04db\u0005\\/\u0017\u048e\u048f\f\u0015\u0002\u0002",
    "\u048f\u0490\u0007/\u0002\u0002\u0490\u04db\u0005\\/\u0016\u0491\u0492",
    "\f\u0014\u0002\u0002\u0492\u0493\u00071\u0002\u0002\u0493\u04db\u0005",
    "\\/\u0015\u0494\u0495\f\u0013\u0002\u0002\u0495\u0496\u0007\\\u0002",
    "\u0002\u0496\u04db\u0005\\/\u0014\u0497\u0498\f\u0012\u0002\u0002\u0498",
    "\u0499\u0007u\u0002\u0002\u0499\u04db\u0005\\/\u0013\u049a\u049b\f\u0011",
    "\u0002\u0002\u049b\u049c\u0007s\u0002\u0002\u049c\u04db\u0005\\/\u0012",
    "\u049d\u049e\f\u0010\u0002\u0002\u049e\u049f\u0007s\u0002\u0002\u049f",
    "\u04a0\u0007K\u0002\u0002\u04a0\u04db\u0005\\/\u0011\u04a1\u04a2\f\u000f",
    "\u0002\u0002\u04a2\u04a3\u0007s\u0002\u0002\u04a3\u04a4\u0007N\u0002",
    "\u0002\u04a4\u04db\u0005\\/\u0010\u04a5\u04a6\f\u000e\u0002\u0002\u04a6",
    "\u04a7\u0007\u0080\u0002\u0002\u04a7\u04a8\u0007\\\u0002\u0002\u04a8",
    "\u04db\u0005\\/\u000f\u04a9\u04aa\f\r\u0002\u0002\u04aa\u04ab\u0007",
    "\u0080\u0002\u0002\u04ab\u04ac\u0007u\u0002\u0002\u04ac\u04db\u0005",
    "\\/\u000e\u04ad\u04ae\f\f\u0002\u0002\u04ae\u04af\u0007\u0080\u0002",
    "\u0002\u04af\u04b0\u0007s\u0002\u0002\u04b0\u04db\u0005\\/\r\u04b1\u04b2",
    "\f\u000b\u0002\u0002\u04b2\u04b3\u0007\u0080\u0002\u0002\u04b3\u04b4",
    "\u0007s\u0002\u0002\u04b4\u04b5\u0007K\u0002\u0002\u04b5\u04db\u0005",
    "\\/\f\u04b6\u04b7\f\n\u0002\u0002\u04b7\u04b8\u0007\u0080\u0002\u0002",
    "\u04b8\u04b9\u0007s\u0002\u0002\u04b9\u04ba\u0007N\u0002\u0002\u04ba",
    "\u04db\u0005\\/\u000b\u04bb\u04bc\f\t\u0002\u0002\u04bc\u04bd\u0007",
    "\u0087\u0002\u0002\u04bd\u04db\u0005\\/\n\u04be\u04bf\f\b\u0002\u0002",
    "\u04bf\u04c0\u0007M\u0002\u0002\u04c0\u04db\u0005\\/\t\u04c1\u04c2\f",
    "\u0007\u0002\u0002\u04c2\u04c3\u0007t\u0002\u0002\u04c3\u04c4\u0005",
    "\\/\u0002\u04c4\u04c5\u0007e\u0002\u0002\u04c5\u04c6\u0005\\/\b\u04c6",
    "\u04db\u0003\u0002\u0002\u0002\u04c7\u04c8\f\u0003\u0002\u0002\u04c8",
    "\u04c9\u0007p\u0002\u0002\u04c9\u04ca\u0007d\u0002\u0002\u04ca\u04cb",
    "\u0005\u00d6l\u0002\u04cb\u04cc\u0007u\u0002\u0002\u04cc\u04cd\u0005",
    "\\/\u0004\u04cd\u04db\u0003\u0002\u0002\u0002\u04ce\u04cf\f%\u0002\u0002",
    "\u04cf\u04db\u0005x=\u0002\u04d0\u04d1\f\u001d\u0002\u0002\u04d1\u04d2",
    "\u0007O\u0002\u0002\u04d2\u04db\u0005\u00e8u\u0002\u04d3\u04d4\f\u0018",
    "\u0002\u0002\u04d4\u04d5\u0007x\u0002\u0002\u04d5\u04d6\u0007\u0080",
    "\u0002\u0002\u04d6\u04db\u0005\u0138\u009d\u0002\u04d7\u04d8\f\u0017",
    "\u0002\u0002\u04d8\u04d9\u0007x\u0002\u0002\u04d9\u04db\u0005\u0138",
    "\u009d\u0002\u04da\u046c\u0003\u0002\u0002\u0002\u04da\u0470\u0003\u0002",
    "\u0002\u0002\u04da\u0474\u0003\u0002\u0002\u0002\u04da\u0478\u0003\u0002",
    "\u0002\u0002\u04da\u047c\u0003\u0002\u0002\u0002\u04da\u047f\u0003\u0002",
    "\u0002\u0002\u04da\u0482\u0003\u0002\u0002\u0002\u04da\u0485\u0003\u0002",
    "\u0002\u0002\u04da\u0488\u0003\u0002\u0002\u0002\u04da\u048b\u0003\u0002",
    "\u0002\u0002\u04da\u048e\u0003\u0002\u0002\u0002\u04da\u0491\u0003\u0002",
    "\u0002\u0002\u04da\u0494\u0003\u0002\u0002\u0002\u04da\u0497\u0003\u0002",
    "\u0002\u0002\u04da\u049a\u0003\u0002\u0002\u0002\u04da\u049d\u0003\u0002",
    "\u0002\u0002\u04da\u04a1\u0003\u0002\u0002\u0002\u04da\u04a5\u0003\u0002",
    "\u0002\u0002\u04da\u04a9\u0003\u0002\u0002\u0002\u04da\u04ad\u0003\u0002",
    "\u0002\u0002\u04da\u04b1\u0003\u0002\u0002\u0002\u04da\u04b6\u0003\u0002",
    "\u0002\u0002\u04da\u04bb\u0003\u0002\u0002\u0002\u04da\u04be\u0003\u0002",
    "\u0002\u0002\u04da\u04c1\u0003\u0002\u0002\u0002\u04da\u04c7\u0003\u0002",
    "\u0002\u0002\u04da\u04ce\u0003\u0002\u0002\u0002\u04da\u04d0\u0003\u0002",
    "\u0002\u0002\u04da\u04d3\u0003\u0002\u0002\u0002\u04da\u04d7\u0003\u0002",
    "\u0002\u0002\u04db\u04de\u0003\u0002\u0002\u0002\u04dc\u04da\u0003\u0002",
    "\u0002\u0002\u04dc\u04dd\u0003\u0002\u0002\u0002\u04dd]\u0003\u0002",
    "\u0002\u0002\u04de\u04dc\u0003\u0002\u0002\u0002\u04df\u04e0\u0005\u00da",
    "n\u0002\u04e0_\u0003\u0002\u0002\u0002\u04e1\u04e7\u0005f4\u0002\u04e2",
    "\u04e7\u0005\u011e\u0090\u0002\u04e3\u04e7\u0005\u0120\u0091\u0002\u04e4",
    "\u04e7\u0005\u00d4k\u0002\u04e5\u04e7\u0005\u011c\u008f\u0002\u04e6",
    "\u04e1\u0003\u0002\u0002\u0002\u04e6\u04e2\u0003\u0002\u0002\u0002\u04e6",
    "\u04e3\u0003\u0002\u0002\u0002\u04e6\u04e4\u0003\u0002\u0002\u0002\u04e6",
    "\u04e5\u0003\u0002\u0002\u0002\u04e7a\u0003\u0002\u0002\u0002\u04e8",
    "\u04e9\b2\u0001\u0002\u04e9\u04ea\u0005`1\u0002\u04ea\u04ef\u0003\u0002",
    "\u0002\u0002\u04eb\u04ec\f\u0003\u0002\u0002\u04ec\u04ee\u0005h5\u0002",
    "\u04ed\u04eb\u0003\u0002\u0002\u0002\u04ee\u04f1\u0003\u0002\u0002\u0002",
    "\u04ef\u04ed\u0003\u0002\u0002\u0002\u04ef\u04f0\u0003\u0002\u0002\u0002",
    "\u04f0c\u0003\u0002\u0002\u0002\u04f1\u04ef\u0003\u0002\u0002\u0002",
    "\u04f2\u04f3\b3\u0001\u0002\u04f3\u04f4\u0007}\u0002\u0002\u04f4\u04f5",
    "\u0005\u00d4k\u0002\u04f5\u04fa\u0003\u0002\u0002\u0002\u04f6\u04f7",
    "\f\u0003\u0002\u0002\u04f7\u04f9\u0005h5\u0002\u04f8\u04f6\u0003\u0002",
    "\u0002\u0002\u04f9\u04fc\u0003\u0002\u0002\u0002\u04fa\u04f8\u0003\u0002",
    "\u0002\u0002\u04fa\u04fb\u0003\u0002\u0002\u0002\u04fbe\u0003\u0002",
    "\u0002\u0002\u04fc\u04fa\u0003\u0002\u0002\u0002\u04fd\u0506\u0005j",
    "6\u0002\u04fe\u0506\u0005l7\u0002\u04ff\u0506\u0005z>\u0002\u0500\u0506",
    "\u0005\u0142\u00a2\u0002\u0501\u0506\u0005\u0144\u00a3\u0002\u0502\u0506",
    "\u0005~@\u0002\u0503\u0506\u0005<\u001f\u0002\u0504\u0506\u0005n8\u0002",
    "\u0505\u04fd\u0003\u0002\u0002\u0002\u0505\u04fe\u0003\u0002\u0002\u0002",
    "\u0505\u04ff\u0003\u0002\u0002\u0002\u0505\u0500\u0003\u0002\u0002\u0002",
    "\u0505\u0501\u0003\u0002\u0002\u0002\u0505\u0502\u0003\u0002\u0002\u0002",
    "\u0505\u0503\u0003\u0002\u0002\u0002\u0505\u0504\u0003\u0002\u0002\u0002",
    "\u0506g\u0003\u0002\u0002\u0002\u0507\u0508\u0007\u0015\u0002\u0002",
    "\u0508\u0514\u0005\u00d6l\u0002\u0509\u050a\u0007\u0015\u0002\u0002",
    "\u050a\u0514\u0005<\u001f\u0002\u050b\u050c\u0007\u0018\u0002\u0002",
    "\u050c\u050d\u0005\u0132\u009a\u0002\u050d\u050e\u0007\u0019\u0002\u0002",
    "\u050e\u0514\u0003\u0002\u0002\u0002\u050f\u0510\u0007\u0018\u0002\u0002",
    "\u0510\u0511\u0005\\/\u0002\u0511\u0512\u0007\u0019\u0002\u0002\u0512",
    "\u0514\u0003\u0002\u0002\u0002\u0513\u0507\u0003\u0002\u0002\u0002\u0513",
    "\u0509\u0003\u0002\u0002\u0002\u0513\u050b\u0003\u0002\u0002\u0002\u0513",
    "\u050f\u0003\u0002\u0002\u0002\u0514i\u0003\u0002\u0002\u0002\u0515",
    "\u0516\u0007C\u0002\u0002\u0516\u0518\u0007\u0016\u0002\u0002\u0517",
    "\u0519\u0005\\/\u0002\u0518\u0517\u0003\u0002\u0002\u0002\u0518\u0519",
    "\u0003\u0002\u0002\u0002\u0519\u051a\u0003\u0002\u0002\u0002\u051a\u051b",
    "\u0007\u0017\u0002\u0002\u051bk\u0003\u0002\u0002\u0002\u051c\u051d",
    "\u0007B\u0002\u0002\u051d\u051f\u0007\u0016\u0002\u0002\u051e\u0520",
    "\u0005\\/\u0002\u051f\u051e\u0003\u0002\u0002\u0002\u051f\u0520\u0003",
    "\u0002\u0002\u0002\u0520\u0521\u0003\u0002\u0002\u0002\u0521\u0522\u0007",
    "\u0017\u0002\u0002\u0522m\u0003\u0002\u0002\u0002\u0523\u0524\u0005",
    "\u00c2b\u0002\u0524\u0525\u0007\u0016\u0002\u0002\u0525\u0528\u0005",
    "p9\u0002\u0526\u0527\u0007\u0013\u0002\u0002\u0527\u0529\u0005r:\u0002",
    "\u0528\u0526\u0003\u0002\u0002\u0002\u0528\u0529\u0003\u0002\u0002\u0002",
    "\u0529\u052a\u0003\u0002\u0002\u0002\u052a\u052b\u0007\u0017\u0002\u0002",
    "\u052b\u0534\u0003\u0002\u0002\u0002\u052c\u052d\u0005\u00c2b\u0002",
    "\u052d\u052f\u0007\u0016\u0002\u0002\u052e\u0530\u0005r:\u0002\u052f",
    "\u052e\u0003\u0002\u0002\u0002\u052f\u0530\u0003\u0002\u0002\u0002\u0530",
    "\u0531\u0003\u0002\u0002\u0002\u0531\u0532\u0007\u0017\u0002\u0002\u0532",
    "\u0534\u0003\u0002\u0002\u0002\u0533\u0523\u0003\u0002\u0002\u0002\u0533",
    "\u052c\u0003\u0002\u0002\u0002\u0534o\u0003\u0002\u0002\u0002\u0535",
    "\u0536\u0007q\u0002\u0002\u0536\u0537\u0005\u0158\u00ad\u0002\u0537",
    "\u0538\u0005\\/\u0002\u0538\u0539\u00069$\u0003\u0539q\u0003\u0002\u0002",
    "\u0002\u053a\u053b\b:\u0001\u0002\u053b\u053c\u0005\\/\u0002\u053c\u053d",
    "\u0006:%\u0003\u053d\u0540\u0003\u0002\u0002\u0002\u053e\u0540\u0005",
    "t;\u0002\u053f\u053a\u0003\u0002\u0002\u0002\u053f\u053e\u0003\u0002",
    "\u0002\u0002\u0540\u0546\u0003\u0002\u0002\u0002\u0541\u0542\f\u0003",
    "\u0002\u0002\u0542\u0543\u0007\u0013\u0002\u0002\u0543\u0545\u0005t",
    ";\u0002\u0544\u0541\u0003\u0002\u0002\u0002\u0545\u0548\u0003\u0002",
    "\u0002\u0002\u0546\u0544\u0003\u0002\u0002\u0002\u0546\u0547\u0003\u0002",
    "\u0002\u0002\u0547s\u0003\u0002\u0002\u0002\u0548\u0546\u0003\u0002",
    "\u0002\u0002\u0549\u054d\u0005\u00d6l\u0002\u054a\u054b\u0005\u0158",
    "\u00ad\u0002\u054b\u054c\u0005\\/\u0002\u054c\u054e\u0003\u0002\u0002",
    "\u0002\u054d\u054a\u0003\u0002\u0002\u0002\u054d\u054e\u0003\u0002\u0002",
    "\u0002\u054eu\u0003\u0002\u0002\u0002\u054f\u0550\u0007\u00a5\u0002",
    "\u0002\u0550\u0551\u0005\\/\u0002\u0551\u0552\u0007\u009d\u0002\u0002",
    "\u0552\u0553\u0005\\/\u0002\u0553w\u0003\u0002\u0002\u0002\u0554\u0557",
    "\u0007m\u0002\u0002\u0555\u0556\u0007\u00a1\u0002\u0002\u0556\u0558",
    "\u0005\u00d6l\u0002\u0557\u0555\u0003\u0002\u0002\u0002\u0557\u0558",
    "\u0003\u0002\u0002\u0002\u0558\u0559\u0003\u0002\u0002\u0002\u0559\u055a",
    "\u0007\u00a3\u0002\u0002\u055a\u055b\u0005\\/\u0002\u055by\u0003\u0002",
    "\u0002\u0002\u055c\u055d\u0007l\u0002\u0002\u055d\u055f\u0007\u0084",
    "\u0002\u0002\u055e\u0560\u0005\u00c2b\u0002\u055f\u055e\u0003\u0002",
    "\u0002\u0002\u055f\u0560\u0003\u0002\u0002\u0002\u0560\u0561\u0003\u0002",
    "\u0002\u0002\u0561\u0562\u0007\u00a3\u0002\u0002\u0562\u057b\u0005\\",
    "/\u0002\u0563\u056a\u0007l\u0002\u0002\u0564\u056b\u0007K\u0002\u0002",
    "\u0565\u0566\u0007\u0091\u0002\u0002\u0566\u0567\u0005\\/\u0002\u0567",
    "\u0568\u0007\u009d\u0002\u0002\u0568\u0569\u0005\\/\u0002\u0569\u056b",
    "\u0003\u0002\u0002\u0002\u056a\u0564\u0003\u0002\u0002\u0002\u056a\u0565",
    "\u0003\u0002\u0002\u0002\u056b\u056c\u0003\u0002\u0002\u0002\u056c\u056e",
    "\u0007\u0016\u0002\u0002\u056d\u056f\u0005\u00c2b\u0002\u056e\u056d",
    "\u0003\u0002\u0002\u0002\u056e\u056f\u0003\u0002\u0002\u0002\u056f\u0570",
    "\u0003\u0002\u0002\u0002\u0570\u0573\u0007\u0017\u0002\u0002\u0571\u0572",
    "\u0007\u00a3\u0002\u0002\u0572\u0574\u0005\\/\u0002\u0573\u0571\u0003",
    "\u0002\u0002\u0002\u0573\u0574\u0003\u0002\u0002\u0002\u0574\u0578\u0003",
    "\u0002\u0002\u0002\u0575\u0576\u0007\u0088\u0002\u0002\u0576\u0577\u0007",
    "V\u0002\u0002\u0577\u0579\u0005\u0146\u00a4\u0002\u0578\u0575\u0003",
    "\u0002\u0002\u0002\u0578\u0579\u0003\u0002\u0002\u0002\u0579\u057b\u0003",
    "\u0002\u0002\u0002\u057a\u055c\u0003\u0002\u0002\u0002\u057a\u0563\u0003",
    "\u0002\u0002\u0002\u057b{\u0003\u0002\u0002\u0002\u057c\u057d\u0007",
    "l\u0002\u0002\u057d\u057f\u0007\u0084\u0002\u0002\u057e\u0580\u0005",
    "\u00c2b\u0002\u057f\u057e\u0003\u0002\u0002\u0002\u057f\u0580\u0003",
    "\u0002\u0002\u0002\u0580\u0581\u0003\u0002\u0002\u0002\u0581\u0582\u0007",
    "\u00a3\u0002\u0002\u0582\u0583\u0005\\/\u0002\u0583\u0584\u0007\u009a",
    "\u0002\u0002\u0584\u0585\u0007\u00a1\u0002\u0002\u0585\u0586\u0005\u00d6",
    "l\u0002\u0586\u0587\u0007\u0011\u0002\u0002\u0587\u0588\u0005\u008c",
    "G\u0002\u0588\u0589\u0005\u010e\u0088\u0002\u0589\u058a\u0005\u008e",
    "H\u0002\u058a\u05ab\u0003\u0002\u0002\u0002\u058b\u0592\u0007l\u0002",
    "\u0002\u058c\u0593\u0007K\u0002\u0002\u058d\u058e\u0007\u0091\u0002",
    "\u0002\u058e\u058f\u0005\\/\u0002\u058f\u0590\u0007\u009d\u0002\u0002",
    "\u0590\u0591\u0005\\/\u0002\u0591\u0593\u0003\u0002\u0002\u0002\u0592",
    "\u058c\u0003\u0002\u0002\u0002\u0592\u058d\u0003\u0002\u0002\u0002\u0593",
    "\u0594\u0003\u0002\u0002\u0002\u0594\u0596\u0007\u0016\u0002\u0002\u0595",
    "\u0597\u0005\u00c2b\u0002\u0596\u0595\u0003\u0002\u0002\u0002\u0596",
    "\u0597\u0003\u0002\u0002\u0002\u0597\u0598\u0003\u0002\u0002\u0002\u0598",
    "\u059b\u0007\u0017\u0002\u0002\u0599\u059a\u0007\u00a3\u0002\u0002\u059a",
    "\u059c\u0005\\/\u0002\u059b\u0599\u0003\u0002\u0002\u0002\u059b\u059c",
    "\u0003\u0002\u0002\u0002\u059c\u05a0\u0003\u0002\u0002\u0002\u059d\u059e",
    "\u0007\u0088\u0002\u0002\u059e\u059f\u0007V\u0002\u0002\u059f\u05a1",
    "\u0005\u0146\u00a4\u0002\u05a0\u059d\u0003\u0002\u0002\u0002\u05a0\u05a1",
    "\u0003\u0002\u0002\u0002\u05a1\u05a2\u0003\u0002\u0002\u0002\u05a2\u05a3",
    "\u0007\u009a\u0002\u0002\u05a3\u05a4\u0007\u00a1\u0002\u0002\u05a4\u05a5",
    "\u0005\u00d6l\u0002\u05a5\u05a6\u0007\u0011\u0002\u0002\u05a6\u05a7",
    "\u0005\u008cG\u0002\u05a7\u05a8\u0005\u010e\u0088\u0002\u05a8\u05a9",
    "\u0005\u008eH\u0002\u05a9\u05ab\u0003\u0002\u0002\u0002\u05aa\u057c",
    "\u0003\u0002\u0002\u0002\u05aa\u058b\u0003\u0002\u0002\u0002\u05ab}",
    "\u0003\u0002\u0002\u0002\u05ac\u05ae\u0007\u0095\u0002\u0002\u05ad\u05af",
    "\u0007a\u0002\u0002\u05ae\u05ad\u0003\u0002\u0002\u0002\u05ae\u05af",
    "\u0003\u0002\u0002\u0002\u05af\u05b0\u0003\u0002\u0002\u0002\u05b0\u05b1",
    "\u0007\u0016\u0002\u0002\u05b1\u05b7\u0005b2\u0002\u05b2\u05b3\u0007",
    "\u0013\u0002\u0002\u05b3\u05b4\u0005\u0150\u00a9\u0002\u05b4\u05b5\u0007",
    ".\u0002\u0002\u05b5\u05b6\u0005\u0140\u00a1\u0002\u05b6\u05b8\u0003",
    "\u0002\u0002\u0002\u05b7\u05b2\u0003\u0002\u0002\u0002\u05b7\u05b8\u0003",
    "\u0002\u0002\u0002\u05b8\u05b9\u0003\u0002\u0002\u0002\u05b9\u05ba\u0007",
    "\u0017\u0002\u0002\u05ba\u007f\u0003\u0002\u0002\u0002\u05bb\u05bc\u0005",
    "\u0136\u009c\u0002\u05bc\u05bd\u0005\u0158\u00ad\u0002\u05bd\u05be\u0005",
    "\\/\u0002\u05be\u0081\u0003\u0002\u0002\u0002\u05bf\u05c0\u0006B\'\u0003",
    "\u05c0\u05c1\u0007\u0015\u0002\u0002\u05c1\u05c8\u0005\u00d6l\u0002",
    "\u05c2\u05c3\u0006B(\u0003\u05c3\u05c4\u0007\u0018\u0002\u0002\u05c4",
    "\u05c5\u0005\\/\u0002\u05c5\u05c6\u0007\u0019\u0002\u0002\u05c6\u05c8",
    "\u0003\u0002\u0002\u0002\u05c7\u05bf\u0003\u0002\u0002\u0002\u05c7\u05c2",
    "\u0003\u0002\u0002\u0002\u05c8\u0083\u0003\u0002\u0002\u0002\u05c9\u05ca",
    "\u0005\u00fe\u0080\u0002\u05ca\u05cb\u0005\u0158\u00ad\u0002\u05cb\u05cc",
    "\u0005\\/\u0002\u05cc\u0085\u0003\u0002\u0002\u0002\u05cd\u05cf\u0007",
    "\u0007\u0002\u0002\u05ce\u05cd\u0003\u0002\u0002\u0002\u05cf\u05d2\u0003",
    "\u0002\u0002\u0002\u05d0\u05ce\u0003\u0002\u0002\u0002\u05d0\u05d1\u0003",
    "\u0002\u0002\u0002\u05d1\u0087\u0003\u0002\u0002\u0002\u05d2\u05d0\u0003",
    "\u0002\u0002\u0002\u05d3\u05d5\u0007\u0007\u0002\u0002\u05d4\u05d3\u0003",
    "\u0002\u0002\u0002\u05d5\u05d6\u0003\u0002\u0002\u0002\u05d6\u05d4\u0003",
    "\u0002\u0002\u0002\u05d6\u05d7\u0003\u0002\u0002\u0002\u05d7\u0089\u0003",
    "\u0002\u0002\u0002\u05d8\u05da\t\u0004\u0002\u0002\u05d9\u05d8\u0003",
    "\u0002\u0002\u0002\u05da\u05dd\u0003\u0002\u0002\u0002\u05db\u05d9\u0003",
    "\u0002\u0002\u0002\u05db\u05dc\u0003\u0002\u0002\u0002\u05dc\u008b\u0003",
    "\u0002\u0002\u0002\u05dd\u05db\u0003\u0002\u0002\u0002\u05de\u05e0\u0007",
    "\u0007\u0002\u0002\u05df\u05de\u0003\u0002\u0002\u0002\u05e0\u05e1\u0003",
    "\u0002\u0002\u0002\u05e1\u05df\u0003\u0002\u0002\u0002\u05e1\u05e2\u0003",
    "\u0002\u0002\u0002\u05e2\u05e3\u0003\u0002\u0002\u0002\u05e3\u05e4\u0007",
    "\u0003\u0002\u0002\u05e4\u008d\u0003\u0002\u0002\u0002\u05e5\u05e7\u0007",
    "\u0007\u0002\u0002\u05e6\u05e5\u0003\u0002\u0002\u0002\u05e7\u05ea\u0003",
    "\u0002\u0002\u0002\u05e8\u05e6\u0003\u0002\u0002\u0002\u05e8\u05e9\u0003",
    "\u0002\u0002\u0002\u05e9\u05eb\u0003\u0002\u0002\u0002\u05ea\u05e8\u0003",
    "\u0002\u0002\u0002\u05eb\u05ec\u0007\u0004\u0002\u0002\u05ec\u008f\u0003",
    "\u0002\u0002\u0002\u05ed\u05ee\u0005\u00e8u\u0002\u05ee\u0091\u0003",
    "\u0002\u0002\u0002\u05ef\u05f0\u0007\u007f\u0002\u0002\u05f0\u0093\u0003",
    "\u0002\u0002\u0002\u05f1\u05f5\u0005\u009aN\u0002\u05f2\u05f5\u0005",
    "6\u001c\u0002\u05f3\u05f5\u0005\\/\u0002\u05f4\u05f1\u0003\u0002\u0002",
    "\u0002\u05f4\u05f2\u0003\u0002\u0002\u0002\u05f4\u05f3\u0003\u0002\u0002",
    "\u0002\u05f5\u0095\u0003\u0002\u0002\u0002\u05f6\u05f8\u0005\u0098M",
    "\u0002\u05f7\u05f6\u0003\u0002\u0002\u0002\u05f7\u05f8\u0003\u0002\u0002",
    "\u0002\u05f8\u05f9\u0003\u0002\u0002\u0002\u05f9\u05fa\u0005\u0086D",
    "\u0002\u05fa\u05fb\u0007\u0002\u0002\u0003\u05fb\u0097\u0003\u0002\u0002",
    "\u0002\u05fc\u0602\u0005\u009aN\u0002\u05fd\u05fe\u0005\u0088E\u0002",
    "\u05fe\u05ff\u0005\u009aN\u0002\u05ff\u0601\u0003\u0002\u0002\u0002",
    "\u0600\u05fd\u0003\u0002\u0002\u0002\u0601\u0604\u0003\u0002\u0002\u0002",
    "\u0602\u0600\u0003\u0002\u0002\u0002\u0602\u0603\u0003\u0002\u0002\u0002",
    "\u0603\u0099\u0003\u0002\u0002\u0002\u0604\u0602\u0003\u0002\u0002\u0002",
    "\u0605\u0606\u0005\u0104\u0083\u0002\u0606\u0607\u0005\u0088E\u0002",
    "\u0607\u0609\u0003\u0002\u0002\u0002\u0608\u0605\u0003\u0002\u0002\u0002",
    "\u0609\u060c\u0003\u0002\u0002\u0002\u060a\u0608\u0003\u0002\u0002\u0002",
    "\u060a\u060b\u0003\u0002\u0002\u0002\u060b\u0612\u0003\u0002\u0002\u0002",
    "\u060c\u060a\u0003\u0002\u0002\u0002\u060d\u060e\u0005\u009cO\u0002",
    "\u060e\u060f\u0005\u0088E\u0002\u060f\u0611\u0003\u0002\u0002\u0002",
    "\u0610\u060d\u0003\u0002\u0002\u0002\u0611\u0614\u0003\u0002\u0002\u0002",
    "\u0612\u0610\u0003\u0002\u0002\u0002\u0612\u0613\u0003\u0002\u0002\u0002",
    "\u0613\u061b\u0003\u0002\u0002\u0002\u0614\u0612\u0003\u0002\u0002\u0002",
    "\u0615\u061c\u0005\n\u0006\u0002\u0616\u061c\u0005\u00c6d\u0002\u0617",
    "\u061c\u0005\u00a6T\u0002\u0618\u061c\u0005\u00a8U\u0002\u0619\u061c",
    "\u0005\u00c8e\u0002\u061a\u061c\u0005\u0102\u0082\u0002\u061b\u0615",
    "\u0003\u0002\u0002\u0002\u061b\u0616\u0003\u0002\u0002\u0002\u061b\u0617",
    "\u0003\u0002\u0002\u0002\u061b\u0618\u0003\u0002\u0002\u0002\u061b\u0619",
    "\u0003\u0002\u0002\u0002\u061b\u061a\u0003\u0002\u0002\u0002\u061c\u009b",
    "\u0003\u0002\u0002\u0002\u061d\u062c\u0005\u009eP\u0002\u061e\u0628",
    "\u0007\u0016\u0002\u0002\u061f\u0629\u0005\u00a4S\u0002\u0620\u0625",
    "\u0005\u00a0Q\u0002\u0621\u0622\u0007\u0013\u0002\u0002\u0622\u0624",
    "\u0005\u00a0Q\u0002\u0623\u0621\u0003\u0002\u0002\u0002\u0624\u0627",
    "\u0003\u0002\u0002\u0002\u0625\u0623\u0003\u0002\u0002\u0002\u0625\u0626",
    "\u0003\u0002\u0002\u0002\u0626\u0629\u0003\u0002\u0002\u0002\u0627\u0625",
    "\u0003\u0002\u0002\u0002\u0628\u061f\u0003\u0002\u0002\u0002\u0628\u0620",
    "\u0003\u0002\u0002\u0002\u0629\u062a\u0003\u0002\u0002\u0002\u062a\u062b",
    "\u0007\u0017\u0002\u0002\u062b\u062d\u0003\u0002\u0002\u0002\u062c\u061e",
    "\u0003\u0002\u0002\u0002\u062c\u062d\u0003\u0002\u0002\u0002\u062d\u009d",
    "\u0003\u0002\u0002\u0002\u062e\u062f\u0007\u00af\u0002\u0002\u062f\u009f",
    "\u0003\u0002\u0002\u0002\u0630\u0631\u0005\u00a2R\u0002\u0631\u0632",
    "\u0007.\u0002\u0002\u0632\u0633\u0005\u00a4S\u0002\u0633\u00a1\u0003",
    "\u0002\u0002\u0002\u0634\u0635\t\u0005\u0002\u0002\u0635\u00a3\u0003",
    "\u0002\u0002\u0002\u0636\u0639\u0005\u0120\u0091\u0002\u0637\u0639\u0005",
    "\u00bc_\u0002\u0638\u0636\u0003\u0002\u0002\u0002\u0638\u0637\u0003",
    "\u0002\u0002\u0002\u0639\u00a5\u0003\u0002\u0002\u0002\u063a\u063b\u0005",
    "$\u0013\u0002\u063b\u00a7\u0003\u0002\u0002\u0002\u063c\u063f\u0005",
    "\u0002\u0002\u0002\u063d\u063f\u0005\u0004\u0003\u0002\u063e\u063c\u0003",
    "\u0002\u0002\u0002\u063e\u063d\u0003\u0002\u0002\u0002\u063f\u00a9\u0003",
    "\u0002\u0002\u0002\u0640\u0646\u0005\u0006\u0004\u0002\u0641\u0642\u0005",
    "\u0088E\u0002\u0642\u0643\u0005\u0006\u0004\u0002\u0643\u0645\u0003",
    "\u0002\u0002\u0002\u0644\u0641\u0003\u0002\u0002\u0002\u0645\u0648\u0003",
    "\u0002\u0002\u0002\u0646\u0644\u0003\u0002\u0002\u0002\u0646\u0647\u0003",
    "\u0002\u0002\u0002\u0647\u00ab\u0003\u0002\u0002\u0002\u0648\u0646\u0003",
    "\u0002\u0002\u0002\u0649\u064f\u0005\b\u0005\u0002\u064a\u064b\u0005",
    "\u0088E\u0002\u064b\u064c\u0005\b\u0005\u0002\u064c\u064e\u0003\u0002",
    "\u0002\u0002\u064d\u064a\u0003\u0002\u0002\u0002\u064e\u0651\u0003\u0002",
    "\u0002\u0002\u064f\u064d\u0003\u0002\u0002\u0002\u064f\u0650\u0003\u0002",
    "\u0002\u0002\u0650\u00ad\u0003\u0002\u0002\u0002\u0651\u064f\u0003\u0002",
    "\u0002\u0002\u0652\u0657\u0005\u00dco\u0002\u0653\u0654\u0007\u0013",
    "\u0002\u0002\u0654\u0656\u0005\u00dco\u0002\u0655\u0653\u0003\u0002",
    "\u0002\u0002\u0656\u0659\u0003\u0002\u0002\u0002\u0657\u0655\u0003\u0002",
    "\u0002\u0002\u0657\u0658\u0003\u0002\u0002\u0002\u0658\u00af\u0003\u0002",
    "\u0002\u0002\u0659\u0657\u0003\u0002\u0002\u0002\u065a\u065b\u0007u",
    "\u0002\u0002\u065b\u0665\u0005\u00b2Z\u0002\u065c\u065d\u0007u\u0002",
    "\u0002\u065d\u0665\u0005\u00b4[\u0002\u065e\u065f\u0007u\u0002\u0002",
    "\u065f\u0665\u0005\u00b8]\u0002\u0660\u0661\u0007y\u0002\u0002\u0661",
    "\u0665\u0007\u00b0\u0002\u0002\u0662\u0663\u0007y\u0002\u0002\u0663",
    "\u0665\u0005\\/\u0002\u0664\u065a\u0003\u0002\u0002\u0002\u0664\u065c",
    "\u0003\u0002\u0002\u0002\u0664\u065e\u0003\u0002\u0002\u0002\u0664\u0660",
    "\u0003\u0002\u0002\u0002\u0664\u0662\u0003\u0002\u0002\u0002\u0665\u00b1",
    "\u0003\u0002\u0002\u0002\u0666\u0668\u0007}\u0002\u0002\u0667\u0666",
    "\u0003\u0002\u0002\u0002\u0667\u0668\u0003\u0002\u0002\u0002\u0668\u0669",
    "\u0003\u0002\u0002\u0002\u0669\u066b\u0007\u0018\u0002\u0002\u066a\u066c",
    "\u0005\u00b6\\\u0002\u066b\u066a\u0003\u0002\u0002\u0002\u066b\u066c",
    "\u0003\u0002\u0002\u0002\u066c\u066d\u0003\u0002\u0002\u0002\u066d\u066e",
    "\u0007\u0019\u0002\u0002\u066e\u00b3\u0003\u0002\u0002\u0002\u066f\u0671",
    "\u0007}\u0002\u0002\u0670\u066f\u0003\u0002\u0002\u0002\u0670\u0671",
    "\u0003\u0002\u0002\u0002\u0671\u0672\u0003\u0002\u0002\u0002\u0672\u0674",
    "\u0007*\u0002\u0002\u0673\u0675\u0005\u00b6\\\u0002\u0674\u0673\u0003",
    "\u0002\u0002\u0002\u0674\u0675\u0003\u0002\u0002\u0002\u0675\u0676\u0003",
    "\u0002\u0002\u0002\u0676\u0677\u0007(\u0002\u0002\u0677\u00b5\u0003",
    "\u0002\u0002\u0002\u0678\u067d\u0005\\/\u0002\u0679\u067a\u0007\u0013",
    "\u0002\u0002\u067a\u067c\u0005\\/\u0002\u067b\u0679\u0003\u0002\u0002",
    "\u0002\u067c\u067f\u0003\u0002\u0002\u0002\u067d\u067b\u0003\u0002\u0002",
    "\u0002\u067d\u067e\u0003\u0002\u0002\u0002\u067e\u00b7\u0003\u0002\u0002",
    "\u0002\u067f\u067d\u0003\u0002\u0002\u0002\u0680\u0681\u0007\u0018\u0002",
    "\u0002\u0681\u0682\u0005\\/\u0002\u0682\u0683\u0007\u0014\u0002\u0002",
    "\u0683\u0684\u0005\\/\u0002\u0684\u0685\u0007\u0019\u0002\u0002\u0685",
    "\u00b9\u0003\u0002\u0002\u0002\u0686\u0687\b^\u0001\u0002\u0687\u0693",
    "\u0005\u00bc_\u0002\u0688\u0689\u0007G\u0002\u0002\u0689\u068a\u0007",
    "*\u0002\u0002\u068a\u068b\u0005\u00ba^\u0002\u068b\u068c\u0007(\u0002",
    "\u0002\u068c\u0693\u0003\u0002\u0002\u0002\u068d\u068e\u0007F\u0002",
    "\u0002\u068e\u068f\u0007*\u0002\u0002\u068f\u0690\u0005\u00ba^\u0002",
    "\u0690\u0691\u0007(\u0002\u0002\u0691\u0693\u0003\u0002\u0002\u0002",
    "\u0692\u0686\u0003\u0002\u0002\u0002\u0692\u0688\u0003\u0002\u0002\u0002",
    "\u0692\u068d\u0003\u0002\u0002\u0002\u0693\u069d\u0003\u0002\u0002\u0002",
    "\u0694\u0695\f\u0007\u0002\u0002\u0695\u069c\u0007,\u0002\u0002\u0696",
    "\u0697\f\u0006\u0002\u0002\u0697\u0698\u0007\u0018\u0002\u0002\u0698",
    "\u069c\u0007\u0019\u0002\u0002\u0699\u069a\f\u0005\u0002\u0002\u069a",
    "\u069c\u0007-\u0002\u0002\u069b\u0694\u0003\u0002\u0002\u0002\u069b",
    "\u0696\u0003\u0002\u0002\u0002\u069b\u0699\u0003\u0002\u0002\u0002\u069c",
    "\u069f\u0003\u0002\u0002\u0002\u069d\u069b\u0003\u0002\u0002\u0002\u069d",
    "\u069e\u0003\u0002\u0002\u0002\u069e\u00bb\u0003\u0002\u0002\u0002\u069f",
    "\u069d\u0003\u0002\u0002\u0002\u06a0\u06a3\u0005\u00be`\u0002\u06a1",
    "\u06a3\u0005\u00c0a\u0002\u06a2\u06a0\u0003\u0002\u0002\u0002\u06a2",
    "\u06a1\u0003\u0002\u0002\u0002\u06a3\u00bd\u0003\u0002\u0002\u0002\u06a4",
    "\u06b5\u00076\u0002\u0002\u06a5\u06b5\u00077\u0002\u0002\u06a6\u06b5",
    "\u00078\u0002\u0002\u06a7\u06b5\u0007D\u0002\u0002\u06a8\u06b5\u0007",
    "9\u0002\u0002\u06a9\u06b5\u0007:\u0002\u0002\u06aa\u06b5\u0007B\u0002",
    "\u0002\u06ab\u06b5\u0007;\u0002\u0002\u06ac\u06b5\u0007=\u0002\u0002",
    "\u06ad\u06b5\u0007<\u0002\u0002\u06ae\u06b5\u0007>\u0002\u0002\u06af",
    "\u06b5\u0007?\u0002\u0002\u06b0\u06b5\u0007A\u0002\u0002\u06b1\u06b5",
    "\u0007C\u0002\u0002\u06b2\u06b5\u0007E\u0002\u0002\u06b3\u06b5\u0007",
    "H\u0002\u0002\u06b4\u06a4\u0003\u0002\u0002\u0002\u06b4\u06a5\u0003",
    "\u0002\u0002\u0002\u06b4\u06a6\u0003\u0002\u0002\u0002\u06b4\u06a7\u0003",
    "\u0002\u0002\u0002\u06b4\u06a8\u0003\u0002\u0002\u0002\u06b4\u06a9\u0003",
    "\u0002\u0002\u0002\u06b4\u06aa\u0003\u0002\u0002\u0002\u06b4\u06ab\u0003",
    "\u0002\u0002\u0002\u06b4\u06ac\u0003\u0002\u0002\u0002\u06b4\u06ad\u0003",
    "\u0002\u0002\u0002\u06b4\u06ae\u0003\u0002\u0002\u0002\u06b4\u06af\u0003",
    "\u0002\u0002\u0002\u06b4\u06b0\u0003\u0002\u0002\u0002\u06b4\u06b1\u0003",
    "\u0002\u0002\u0002\u06b4\u06b2\u0003\u0002\u0002\u0002\u06b4\u06b3\u0003",
    "\u0002\u0002\u0002\u06b5\u00bf\u0003\u0002\u0002\u0002\u06b6\u06b7\u0007",
    "\u00ab\u0002\u0002\u06b7\u00c1\u0003\u0002\u0002\u0002\u06b8\u06ba\u0007",
    "}\u0002\u0002\u06b9\u06b8\u0003\u0002\u0002\u0002\u06b9\u06ba\u0003",
    "\u0002\u0002\u0002\u06ba\u06bb\u0003\u0002\u0002\u0002\u06bb\u06bc\u0005",
    "\u00c0a\u0002\u06bc\u00c3\u0003\u0002\u0002\u0002\u06bd\u06be\u0007",
    "A\u0002\u0002\u06be\u00c5\u0003\u0002\u0002\u0002\u06bf\u06c3\u0005",
    "\u0012\n\u0002\u06c0\u06c3\u0005\"\u0012\u0002\u06c1\u06c3\u0005\u0014",
    "\u000b\u0002\u06c2\u06bf\u0003\u0002\u0002\u0002\u06c2\u06c0\u0003\u0002",
    "\u0002\u0002\u06c2\u06c1\u0003\u0002\u0002\u0002\u06c3\u00c7\u0003\u0002",
    "\u0002\u0002\u06c4\u06c7\u0005\u000e\b\u0002\u06c5\u06c7\u0005\u0010",
    "\t\u0002\u06c6\u06c4\u0003\u0002\u0002\u0002\u06c6\u06c5\u0003\u0002",
    "\u0002\u0002\u06c7\u00c9\u0003\u0002\u0002\u0002\u06c8\u06cd\u0005\u00da",
    "n\u0002\u06c9\u06ca\u0007\u0013\u0002\u0002\u06ca\u06cc\u0005\u00da",
    "n\u0002\u06cb\u06c9\u0003\u0002\u0002\u0002\u06cc\u06cf\u0003\u0002",
    "\u0002\u0002\u06cd\u06cb\u0003\u0002\u0002\u0002\u06cd\u06ce\u0003\u0002",
    "\u0002\u0002\u06ce\u00cb\u0003\u0002\u0002\u0002\u06cf\u06cd\u0003\u0002",
    "\u0002\u0002\u06d0\u06d3\u0005\u00d6l\u0002\u06d1\u06d3\u0005\u00da",
    "n\u0002\u06d2\u06d0\u0003\u0002\u0002\u0002\u06d2\u06d1\u0003\u0002",
    "\u0002\u0002\u06d3\u00cd\u0003\u0002\u0002\u0002\u06d4\u06d7\u0005\u00d4",
    "k\u0002\u06d5\u06d7\u0005\u014c\u00a7\u0002\u06d6\u06d4\u0003\u0002",
    "\u0002\u0002\u06d6\u06d5\u0003\u0002\u0002\u0002\u06d7\u00cf\u0003\u0002",
    "\u0002\u0002\u06d8\u06d9\u0006i,\u0003\u06d9\u06da\u0007#\u0002\u0002",
    "\u06da\u06db\u0005\u00d2j\u0002\u06db\u00d1\u0003\u0002\u0002\u0002",
    "\u06dc\u06dd\u0006j-\u0003\u06dd\u06de\u0005\u00ceh\u0002\u06de\u00d3",
    "\u0003\u0002\u0002\u0002\u06df\u06e3\u0005\u00d6l\u0002\u06e0\u06e3",
    "\u0005\u00dan\u0002\u06e1\u06e3\u0005\u00dco\u0002\u06e2\u06df\u0003",
    "\u0002\u0002\u0002\u06e2\u06e0\u0003\u0002\u0002\u0002\u06e2\u06e1\u0003",
    "\u0002\u0002\u0002\u06e3\u00d5\u0003\u0002\u0002\u0002\u06e4\u06e5\u0007",
    "\u00ac\u0002\u0002\u06e5\u00d7\u0003\u0002\u0002\u0002\u06e6\u06e7\t",
    "\u0006\u0002\u0002\u06e7\u00d9\u0003\u0002\u0002\u0002\u06e8\u06e9\u0007",
    "\u00ab\u0002\u0002\u06e9\u00db\u0003\u0002\u0002\u0002\u06ea\u06eb\u0007",
    "\u00aa\u0002\u0002\u06eb\u00dd\u0003\u0002\u0002\u0002\u06ec\u06f1\u0005",
    "\u00e0q\u0002\u06ed\u06ee\u0007\u0013\u0002\u0002\u06ee\u06f0\u0005",
    "\u00e0q\u0002\u06ef\u06ed\u0003\u0002\u0002\u0002\u06f0\u06f3\u0003",
    "\u0002\u0002\u0002\u06f1\u06ef\u0003\u0002\u0002\u0002\u06f1\u06f2\u0003",
    "\u0002\u0002\u0002\u06f2\u00df\u0003\u0002\u0002\u0002\u06f3\u06f1\u0003",
    "\u0002\u0002\u0002\u06f4\u06fa\u0005\u00e6t\u0002\u06f5\u06f7\u0007",
    "}\u0002\u0002\u06f6\u06f5\u0003\u0002\u0002\u0002\u06f6\u06f7\u0003",
    "\u0002\u0002\u0002\u06f7\u06f8\u0003\u0002\u0002\u0002\u06f8\u06fa\u0005",
    "\u00e2r\u0002\u06f9\u06f4\u0003\u0002\u0002\u0002\u06f9\u06f6\u0003",
    "\u0002\u0002\u0002\u06fa\u00e1\u0003\u0002\u0002\u0002\u06fb\u06fe\u0005",
    "\u00e4s\u0002\u06fc\u06fe\u00054\u001b\u0002\u06fd\u06fb\u0003\u0002",
    "\u0002\u0002\u06fd\u06fc\u0003\u0002\u0002\u0002\u06fe\u00e3\u0003\u0002",
    "\u0002\u0002\u06ff\u0702\u0005\u00d6l\u0002\u0700\u0701\u0007.\u0002",
    "\u0002\u0701\u0703\u0005\u0120\u0091\u0002\u0702\u0700\u0003\u0002\u0002",
    "\u0002\u0702\u0703\u0003\u0002\u0002\u0002\u0703\u00e5\u0003\u0002\u0002",
    "\u0002\u0704\u0705\u0005\u00c4c\u0002\u0705\u0706\u0005\u00d6l\u0002",
    "\u0706\u00e7\u0003\u0002\u0002\u0002\u0707\u070a\u0005\u00ba^\u0002",
    "\u0708\u070a\u0005\u00eav\u0002\u0709\u0707\u0003\u0002\u0002\u0002",
    "\u0709\u0708\u0003\u0002\u0002\u0002\u070a\u00e9\u0003\u0002\u0002\u0002",
    "\u070b\u070c\bv\u0001\u0002\u070c\u070d\u0007N\u0002\u0002\u070d\u0716",
    "\u0003\u0002\u0002\u0002\u070e\u070f\f\u0004\u0002\u0002\u070f\u0710",
    "\u0007\u0018\u0002\u0002\u0710\u0715\u0007\u0019\u0002\u0002\u0711\u0712",
    "\f\u0003\u0002\u0002\u0712\u0713\u0007\u001a\u0002\u0002\u0713\u0715",
    "\u0007\u001b\u0002\u0002\u0714\u070e\u0003\u0002\u0002\u0002\u0714\u0711",
    "\u0003\u0002\u0002\u0002\u0715\u0718\u0003\u0002\u0002\u0002\u0716\u0714",
    "\u0003\u0002\u0002\u0002\u0716\u0717\u0003\u0002\u0002\u0002\u0717\u00eb",
    "\u0003\u0002\u0002\u0002\u0718\u0716\u0003\u0002\u0002\u0002\u0719\u071f",
    "\u0005\u00eex\u0002\u071a\u071b\u0005\u0088E\u0002\u071b\u071c\u0005",
    "\u00eex\u0002\u071c\u071e\u0003\u0002\u0002\u0002\u071d\u071a\u0003",
    "\u0002\u0002\u0002\u071e\u0721\u0003\u0002\u0002\u0002\u071f\u071d\u0003",
    "\u0002\u0002\u0002\u071f\u0720\u0003\u0002\u0002\u0002\u0720\u00ed\u0003",
    "\u0002\u0002\u0002\u0721\u071f\u0003\u0002\u0002\u0002\u0722\u0723\u0005",
    "\u0104\u0083\u0002\u0723\u0724\u0005\u0088E\u0002\u0724\u0726\u0003",
    "\u0002\u0002\u0002\u0725\u0722\u0003\u0002\u0002\u0002\u0726\u0729\u0003",
    "\u0002\u0002\u0002\u0727\u0725\u0003\u0002\u0002\u0002\u0727\u0728\u0003",
    "\u0002\u0002\u0002\u0728\u072f\u0003\u0002\u0002\u0002\u0729\u0727\u0003",
    "\u0002\u0002\u0002\u072a\u072b\u0005\u009cO\u0002\u072b\u072c\u0005",
    "\u0088E\u0002\u072c\u072e\u0003\u0002\u0002\u0002\u072d\u072a\u0003",
    "\u0002\u0002\u0002\u072e\u0731\u0003\u0002\u0002\u0002\u072f\u072d\u0003",
    "\u0002\u0002\u0002\u072f\u0730\u0003\u0002\u0002\u0002\u0730\u0737\u0003",
    "\u0002\u0002\u0002\u0731\u072f\u0003\u0002\u0002\u0002\u0732\u0738\u0005",
    "\u001a\u000e\u0002\u0733\u0738\u0005\u001e\u0010\u0002\u0734\u0738\u0005",
    ",\u0017\u0002\u0735\u0738\u0005*\u0016\u0002\u0736\u0738\u0005\u0018",
    "\r\u0002\u0737\u0732\u0003\u0002\u0002\u0002\u0737\u0733\u0003\u0002",
    "\u0002\u0002\u0737\u0734\u0003\u0002\u0002\u0002\u0737\u0735\u0003\u0002",
    "\u0002\u0002\u0737\u0736\u0003\u0002\u0002\u0002\u0738\u00ef\u0003\u0002",
    "\u0002\u0002\u0739\u073f\u0005\u00f2z\u0002\u073a\u073b\u0005\u0088",
    "E\u0002\u073b\u073c\u0005\u00f2z\u0002\u073c\u073e\u0003\u0002\u0002",
    "\u0002\u073d\u073a\u0003\u0002\u0002\u0002\u073e\u0741\u0003\u0002\u0002",
    "\u0002\u073f\u073d\u0003\u0002\u0002\u0002\u073f\u0740\u0003\u0002\u0002",
    "\u0002\u0740\u00f1\u0003\u0002\u0002\u0002\u0741\u073f\u0003\u0002\u0002",
    "\u0002\u0742\u0746\u0005 \u0011\u0002\u0743\u0746\u0005\u001c\u000f",
    "\u0002\u0744\u0746\u0005.\u0018\u0002\u0745\u0742\u0003\u0002\u0002",
    "\u0002\u0745\u0743\u0003\u0002\u0002\u0002\u0745\u0744\u0003\u0002\u0002",
    "\u0002\u0746\u00f3\u0003\u0002\u0002\u0002\u0747\u0748\u0007\u000b\u0002",
    "\u0002\u0748\u0752\u0005\u01ac\u00d7\u0002\u0749\u074a\u0007\f\u0002",
    "\u0002\u074a\u0752\u0005\u01c6\u00e4\u0002\u074b\u074c\u0007\r\u0002",
    "\u0002\u074c\u0752\u0005\u00f6|\u0002\u074d\u074e\u0007\u000e\u0002",
    "\u0002\u074e\u0752\u0005\u00f6|\u0002\u074f\u0750\u0007\u000f\u0002",
    "\u0002\u0750\u0752\u0005\u00fa~\u0002\u0751\u0747\u0003\u0002\u0002",
    "\u0002\u0751\u0749\u0003\u0002\u0002\u0002\u0751\u074b\u0003\u0002\u0002",
    "\u0002\u0751\u074d\u0003\u0002\u0002\u0002\u0751\u074f\u0003\u0002\u0002",
    "\u0002\u0752\u00f5\u0003\u0002\u0002\u0002\u0753\u0755\u0005\u00d4k",
    "\u0002\u0754\u0756\u0005\u00f8}\u0002\u0755\u0754\u0003\u0002\u0002",
    "\u0002\u0755\u0756\u0003\u0002\u0002\u0002\u0756\u00f7\u0003\u0002\u0002",
    "\u0002\u0757\u0758\u0007q\u0002\u0002\u0758\u0759\u0005\u0152\u00aa",
    "\u0002\u0759\u075a\u0007\u0011\u0002\u0002\u075a\u075f\u0005\u0194\u00cb",
    "\u0002\u075b\u075c\u0007\u0015\u0002\u0002\u075c\u075e\u0005\u0194\u00cb",
    "\u0002\u075d\u075b\u0003\u0002\u0002\u0002\u075e\u0761\u0003\u0002\u0002",
    "\u0002\u075f\u075d\u0003\u0002\u0002\u0002\u075f\u0760\u0003\u0002\u0002",
    "\u0002\u0760\u00f9\u0003\u0002\u0002\u0002\u0761\u075f\u0003\u0002\u0002",
    "\u0002\u0762\u0767\u0005\u017a\u00be\u0002\u0763\u0764\u0007\u0015\u0002",
    "\u0002\u0764\u0766\u0005\u017a\u00be\u0002\u0765\u0763\u0003\u0002\u0002",
    "\u0002\u0766\u0769\u0003\u0002\u0002\u0002\u0767\u0765\u0003\u0002\u0002",
    "\u0002\u0767\u0768\u0003\u0002\u0002\u0002\u0768\u076b\u0003\u0002\u0002",
    "\u0002\u0769\u0767\u0003\u0002\u0002\u0002\u076a\u076c\u0005\u00fc\u007f",
    "\u0002\u076b\u076a\u0003\u0002\u0002\u0002\u076b\u076c\u0003\u0002\u0002",
    "\u0002\u076c\u00fb\u0003\u0002\u0002\u0002\u076d\u076e\u0007q\u0002",
    "\u0002\u076e\u076f\u0005\u0152\u00aa\u0002\u076f\u0771\u0007\u0011\u0002",
    "\u0002\u0770\u0772\u0007%\u0002\u0002\u0771\u0770\u0003\u0002\u0002",
    "\u0002\u0771\u0772\u0003\u0002\u0002\u0002\u0772\u0773\u0003\u0002\u0002",
    "\u0002\u0773\u0778\u0005\u017a\u00be\u0002\u0774\u0775\u0007%\u0002",
    "\u0002\u0775\u0777\u0005\u017a\u00be\u0002\u0776\u0774\u0003\u0002\u0002",
    "\u0002\u0777\u077a\u0003\u0002\u0002\u0002\u0778\u0776\u0003\u0002\u0002",
    "\u0002\u0778\u0779\u0003\u0002\u0002\u0002\u0779\u077d\u0003\u0002\u0002",
    "\u0002\u077a\u0778\u0003\u0002\u0002\u0002\u077b\u077c\u0007\u0015\u0002",
    "\u0002\u077c\u077e\u0005\u017a\u00be\u0002\u077d\u077b\u0003\u0002\u0002",
    "\u0002\u077d\u077e\u0003\u0002\u0002\u0002\u077e\u00fd\u0003\u0002\u0002",
    "\u0002\u077f\u0784\u0005\u00d6l\u0002\u0780\u0781\u0007\u0013\u0002",
    "\u0002\u0781\u0783\u0005\u00d6l\u0002\u0782\u0780\u0003\u0002\u0002",
    "\u0002\u0783\u0786\u0003\u0002\u0002\u0002\u0784\u0782\u0003\u0002\u0002",
    "\u0002\u0784\u0785\u0003\u0002\u0002\u0002\u0785\u00ff\u0003\u0002\u0002",
    "\u0002\u0786\u0784\u0003\u0002\u0002\u0002\u0787\u078c\u0005\u00d8m",
    "\u0002\u0788\u0789\u0007\u0013\u0002\u0002\u0789\u078b\u0005\u00d8m",
    "\u0002\u078a\u0788\u0003\u0002\u0002\u0002\u078b\u078e\u0003\u0002\u0002",
    "\u0002\u078c\u078a\u0003\u0002\u0002\u0002\u078c\u078d\u0003\u0002\u0002",
    "\u0002\u078d\u0101\u0003\u0002\u0002\u0002\u078e\u078c\u0003\u0002\u0002",
    "\u0002\u078f\u0794\u0005*\u0016\u0002\u0790\u0794\u0005,\u0017\u0002",
    "\u0791\u0794\u0005.\u0018\u0002\u0792\u0794\u00050\u0019\u0002\u0793",
    "\u078f\u0003\u0002\u0002\u0002\u0793\u0790\u0003\u0002\u0002\u0002\u0793",
    "\u0791\u0003\u0002\u0002\u0002\u0793\u0792\u0003\u0002\u0002\u0002\u0794",
    "\u0103\u0003\u0002\u0002\u0002\u0795\u0796\u0007\n\u0002\u0002\u0796",
    "\u0105\u0003\u0002\u0002\u0002\u0797\u079d\u0005\u0108\u0085\u0002\u0798",
    "\u0799\u0005\u0088E\u0002\u0799\u079a\u0005\u0108\u0085\u0002\u079a",
    "\u079c\u0003\u0002\u0002\u0002\u079b\u0798\u0003\u0002\u0002\u0002\u079c",
    "\u079f\u0003\u0002\u0002\u0002\u079d\u079b\u0003\u0002\u0002\u0002\u079d",
    "\u079e\u0003\u0002\u0002\u0002\u079e\u0107\u0003\u0002\u0002\u0002\u079f",
    "\u079d\u0003\u0002\u0002\u0002\u07a0\u07a1\u0007\u000b\u0002\u0002\u07a1",
    "\u07ab\u0005\u0196\u00cc\u0002\u07a2\u07a3\u0007\f\u0002\u0002\u07a3",
    "\u07ab\u0005\u01b2\u00da\u0002\u07a4\u07a5\u0007\r\u0002\u0002\u07a5",
    "\u07ab\u0005\u010a\u0086\u0002\u07a6\u07a7\u0007\u000e\u0002\u0002\u07a7",
    "\u07ab\u0005\u010a\u0086\u0002\u07a8\u07a9\u0007\u000f\u0002\u0002\u07a9",
    "\u07ab\u0005\u010c\u0087\u0002\u07aa\u07a0\u0003\u0002\u0002\u0002\u07aa",
    "\u07a2\u0003\u0002\u0002\u0002\u07aa\u07a4\u0003\u0002\u0002\u0002\u07aa",
    "\u07a6\u0003\u0002\u0002\u0002\u07aa\u07a8\u0003\u0002\u0002\u0002\u07ab",
    "\u0109\u0003\u0002\u0002\u0002\u07ac\u07ae\u0005\u017c\u00bf\u0002\u07ad",
    "\u07af\u0007\u0012\u0002\u0002\u07ae\u07ad\u0003\u0002\u0002\u0002\u07ae",
    "\u07af\u0003\u0002\u0002\u0002\u07af\u07b1\u0003\u0002\u0002\u0002\u07b0",
    "\u07b2\u0005\u00f8}\u0002\u07b1\u07b0\u0003\u0002\u0002\u0002\u07b1",
    "\u07b2\u0003\u0002\u0002\u0002\u07b2\u010b\u0003\u0002\u0002\u0002\u07b3",
    "\u07b5\u0005\u0162\u00b2\u0002\u07b4\u07b6\u0007\u0012\u0002\u0002\u07b5",
    "\u07b4\u0003\u0002\u0002\u0002\u07b5\u07b6\u0003\u0002\u0002\u0002\u07b6",
    "\u07b8\u0003\u0002\u0002\u0002\u07b7\u07b9\u0005\u00fc\u007f\u0002\u07b8",
    "\u07b7\u0003\u0002\u0002\u0002\u07b8\u07b9\u0003\u0002\u0002\u0002\u07b9",
    "\u010d\u0003\u0002\u0002\u0002\u07ba\u07c0\u00056\u001c\u0002\u07bb",
    "\u07bc\u0005\u0088E\u0002\u07bc\u07bd\u00056\u001c\u0002\u07bd\u07bf",
    "\u0003\u0002\u0002\u0002\u07be\u07bb\u0003\u0002\u0002\u0002\u07bf\u07c2",
    "\u0003\u0002\u0002\u0002\u07c0\u07be\u0003\u0002\u0002\u0002\u07c0\u07c1",
    "\u0003\u0002\u0002\u0002\u07c1\u010f\u0003\u0002\u0002\u0002\u07c2\u07c0",
    "\u0003\u0002\u0002\u0002\u07c3\u07c9\u00052\u001a\u0002\u07c4\u07c5",
    "\u0005\u0088E\u0002\u07c5\u07c6\u00052\u001a\u0002\u07c6\u07c8\u0003",
    "\u0002\u0002\u0002\u07c7\u07c4\u0003\u0002\u0002\u0002\u07c8\u07cb\u0003",
    "\u0002\u0002\u0002\u07c9\u07c7\u0003\u0002\u0002\u0002\u07c9\u07ca\u0003",
    "\u0002\u0002\u0002\u07ca\u0111\u0003\u0002\u0002\u0002\u07cb\u07c9\u0003",
    "\u0002\u0002\u0002\u07cc\u07d2\u0005F$\u0002\u07cd\u07ce\u0005\u0088",
    "E\u0002\u07ce\u07cf\u0005F$\u0002\u07cf\u07d1\u0003\u0002\u0002\u0002",
    "\u07d0\u07cd\u0003\u0002\u0002\u0002\u07d1\u07d4\u0003\u0002\u0002\u0002",
    "\u07d2\u07d0\u0003\u0002\u0002\u0002\u07d2\u07d3\u0003\u0002\u0002\u0002",
    "\u07d3\u0113\u0003\u0002\u0002\u0002\u07d4\u07d2\u0003\u0002\u0002\u0002",
    "\u07d5\u07db\u0005V,\u0002\u07d6\u07d7\u0005\u0088E\u0002\u07d7\u07d8",
    "\u0005V,\u0002\u07d8\u07da\u0003\u0002\u0002\u0002\u07d9\u07d6\u0003",
    "\u0002\u0002\u0002\u07da\u07dd\u0003\u0002\u0002\u0002\u07db\u07d9\u0003",
    "\u0002\u0002\u0002\u07db\u07dc\u0003\u0002\u0002\u0002\u07dc\u0115\u0003",
    "\u0002\u0002\u0002\u07dd\u07db\u0003\u0002\u0002\u0002\u07de\u07df\u0007",
    "\u0018\u0002\u0002\u07df\u07e0\u0005\u0118\u008d\u0002\u07e0\u07e1\u0007",
    "\u0014\u0002\u0002\u07e1\u07e2\u0005\u0118\u008d\u0002\u07e2\u07e3\u0007",
    "\u0019\u0002\u0002\u07e3\u07ed\u0003\u0002\u0002\u0002\u07e4\u07e5\u0007",
    "\u0018\u0002\u0002\u07e5\u07e6\u0005\u011a\u008e\u0002\u07e6\u07e7\u0007",
    "\u0019\u0002\u0002\u07e7\u07ed\u0003\u0002\u0002\u0002\u07e8\u07e9\u0007",
    "*\u0002\u0002\u07e9\u07ea\u0005\u011a\u008e\u0002\u07ea\u07eb\u0007",
    "(\u0002\u0002\u07eb\u07ed\u0003\u0002\u0002\u0002\u07ec\u07de\u0003",
    "\u0002\u0002\u0002\u07ec\u07e4\u0003\u0002\u0002\u0002\u07ec\u07e8\u0003",
    "\u0002\u0002\u0002\u07ed\u0117\u0003\u0002\u0002\u0002\u07ee\u07ff\u0007",
    "\u00a8\u0002\u0002\u07ef\u07ff\u0007\u00a9\u0002\u0002\u07f0\u07ff\u0007",
    "\u00b2\u0002\u0002\u07f1\u07ff\u0007\u00b3\u0002\u0002\u07f2\u07ff\u0007",
    "\u00a7\u0002\u0002\u07f3\u07ff\u0007\u00b7\u0002\u0002\u07f4\u07ff\u0007",
    "\u00b6\u0002\u0002\u07f5\u07ff\u0007\u00b0\u0002\u0002\u07f6\u07ff\u0007",
    "\u00b4\u0002\u0002\u07f7\u07ff\u0007\u00b5\u0002\u0002\u07f8\u07ff\u0007",
    "\u00a6\u0002\u0002\u07f9\u07ff\u0007\u00b8\u0002\u0002\u07fa\u07ff\u0007",
    "\u00b9\u0002\u0002\u07fb\u07ff\u0007\u00b1\u0002\u0002\u07fc\u07ff\u0005",
    "\u0090I\u0002\u07fd\u07ff\u0005\u0092J\u0002\u07fe\u07ee\u0003\u0002",
    "\u0002\u0002\u07fe\u07ef\u0003\u0002\u0002\u0002\u07fe\u07f0\u0003\u0002",
    "\u0002\u0002\u07fe\u07f1\u0003\u0002\u0002\u0002\u07fe\u07f2\u0003\u0002",
    "\u0002\u0002\u07fe\u07f3\u0003\u0002\u0002\u0002\u07fe\u07f4\u0003\u0002",
    "\u0002\u0002\u07fe\u07f5\u0003\u0002\u0002\u0002\u07fe\u07f6\u0003\u0002",
    "\u0002\u0002\u07fe\u07f7\u0003\u0002\u0002\u0002\u07fe\u07f8\u0003\u0002",
    "\u0002\u0002\u07fe\u07f9\u0003\u0002\u0002\u0002\u07fe\u07fa\u0003\u0002",
    "\u0002\u0002\u07fe\u07fb\u0003\u0002\u0002\u0002\u07fe\u07fc\u0003\u0002",
    "\u0002\u0002\u07fe\u07fd\u0003\u0002\u0002\u0002\u07ff\u0119\u0003\u0002",
    "\u0002\u0002\u0800\u0805\u0005\u0118\u008d\u0002\u0801\u0802\u0007\u0013",
    "\u0002\u0002\u0802\u0804\u0005\u0118\u008d\u0002\u0803\u0801\u0003\u0002",
    "\u0002\u0002\u0804\u0807\u0003\u0002\u0002\u0002\u0805\u0803\u0003\u0002",
    "\u0002\u0002\u0805\u0806\u0003\u0002\u0002\u0002\u0806\u011b\u0003\u0002",
    "\u0002\u0002\u0807\u0805\u0003\u0002\u0002\u0002\u0808\u0809\t\u0007",
    "\u0002\u0002\u0809\u011d\u0003\u0002\u0002\u0002\u080a\u080b\u0007\u0016",
    "\u0002\u0002\u080b\u080c\u0005\\/\u0002\u080c\u080d\u0007\u0017\u0002",
    "\u0002\u080d\u011f\u0003\u0002\u0002\u0002\u080e\u0811\u0005\u0118\u008d",
    "\u0002\u080f\u0811\u0005\u0122\u0092\u0002\u0810\u080e\u0003\u0002\u0002",
    "\u0002\u0810\u080f\u0003\u0002\u0002\u0002\u0811\u0121\u0003\u0002\u0002",
    "\u0002\u0812\u0819\u0005\u00b8]\u0002\u0813\u0819\u0005\u00b2Z\u0002",
    "\u0814\u0819\u0005\u00b4[\u0002\u0815\u0819\u0005\u0126\u0094\u0002",
    "\u0816\u0819\u0005\u0128\u0095\u0002\u0817\u0819\u0005\u0124\u0093\u0002",
    "\u0818\u0812\u0003\u0002\u0002\u0002\u0818\u0813\u0003\u0002\u0002\u0002",
    "\u0818\u0814\u0003\u0002\u0002\u0002\u0818\u0815\u0003\u0002\u0002\u0002",
    "\u0818\u0816\u0003\u0002\u0002\u0002\u0818\u0817\u0003\u0002\u0002\u0002",
    "\u0819\u0123\u0003\u0002\u0002\u0002\u081a\u081c\u0007}\u0002\u0002",
    "\u081b\u081a\u0003\u0002\u0002\u0002\u081b\u081c\u0003\u0002\u0002\u0002",
    "\u081c\u081d\u0003\u0002\u0002\u0002\u081d\u081f\u0007\u0016\u0002\u0002",
    "\u081e\u0820\u0005\u012a\u0096\u0002\u081f\u081e\u0003\u0002\u0002\u0002",
    "\u081f\u0820\u0003\u0002\u0002\u0002\u0820\u0821\u0003\u0002\u0002\u0002",
    "\u0821\u0822\u0007\u0017\u0002\u0002\u0822\u0125\u0003\u0002\u0002\u0002",
    "\u0823\u0825\u0007}\u0002\u0002\u0824\u0823\u0003\u0002\u0002\u0002",
    "\u0824\u0825\u0003\u0002\u0002\u0002\u0825\u082e\u0003\u0002\u0002\u0002",
    "\u0826\u0827\u0007*\u0002\u0002\u0827\u0828\u0005\u012c\u0097\u0002",
    "\u0828\u0829\u0007(\u0002\u0002\u0829\u082f\u0003\u0002\u0002\u0002",
    "\u082a\u082f\u0007-\u0002\u0002\u082b\u082c\u0007*\u0002\u0002\u082c",
    "\u082d\u0007\u0011\u0002\u0002\u082d\u082f\u0007(\u0002\u0002\u082e",
    "\u0826\u0003\u0002\u0002\u0002\u082e\u082a\u0003\u0002\u0002\u0002\u082e",
    "\u082b\u0003\u0002\u0002\u0002\u082f\u0127\u0003\u0002\u0002\u0002\u0830",
    "\u0832\u0007\u001a\u0002\u0002\u0831\u0833\u0005\u012c\u0097\u0002\u0832",
    "\u0831\u0003\u0002\u0002\u0002\u0832\u0833\u0003\u0002\u0002\u0002\u0833",
    "\u0834\u0003\u0002\u0002\u0002\u0834\u0835\u0007\u001b\u0002\u0002\u0835",
    "\u0129\u0003\u0002\u0002\u0002\u0836\u0837\u0005\\/\u0002\u0837\u0840",
    "\u0007\u0013\u0002\u0002\u0838\u083d\u0005\\/\u0002\u0839\u083a\u0007",
    "\u0013\u0002\u0002\u083a\u083c\u0005\\/\u0002\u083b\u0839\u0003\u0002",
    "\u0002\u0002\u083c\u083f\u0003\u0002\u0002\u0002\u083d\u083b\u0003\u0002",
    "\u0002\u0002\u083d\u083e\u0003\u0002\u0002\u0002\u083e\u0841\u0003\u0002",
    "\u0002\u0002\u083f\u083d\u0003\u0002\u0002\u0002\u0840\u0838\u0003\u0002",
    "\u0002\u0002\u0840\u0841\u0003\u0002\u0002\u0002\u0841\u012b\u0003\u0002",
    "\u0002\u0002\u0842\u0847\u0005\u012e\u0098\u0002\u0843\u0844\u0007\u0013",
    "\u0002\u0002\u0844\u0846\u0005\u012e\u0098\u0002\u0845\u0843\u0003\u0002",
    "\u0002\u0002\u0846\u0849\u0003\u0002\u0002\u0002\u0847\u0845\u0003\u0002",
    "\u0002\u0002\u0847\u0848\u0003\u0002\u0002\u0002\u0848\u012d\u0003\u0002",
    "\u0002\u0002\u0849\u0847\u0003\u0002\u0002\u0002\u084a\u084b\u0005\u0130",
    "\u0099\u0002\u084b\u084c\u0007\u0011\u0002\u0002\u084c\u084d\u0005\\",
    "/\u0002\u084d\u012f\u0003\u0002\u0002\u0002\u084e\u0851\u0005\u00ce",
    "h\u0002\u084f\u0851\u0007\u00b0\u0002\u0002\u0850\u084e\u0003\u0002",
    "\u0002\u0002\u0850\u084f\u0003\u0002\u0002\u0002\u0851\u0131\u0003\u0002",
    "\u0002\u0002\u0852\u0853\u0005\\/\u0002\u0853\u0854\u0007\u0011\u0002",
    "\u0002\u0854\u0855\u0005\\/\u0002\u0855\u085c\u0003\u0002\u0002\u0002",
    "\u0856\u0857\u0005\\/\u0002\u0857\u0858\u0007\u0011\u0002\u0002\u0858",
    "\u085c\u0003\u0002\u0002\u0002\u0859\u085a\u0007\u0011\u0002\u0002\u085a",
    "\u085c\u0005\\/\u0002\u085b\u0852\u0003\u0002\u0002\u0002\u085b\u0856",
    "\u0003\u0002\u0002\u0002\u085b\u0859\u0003\u0002\u0002\u0002\u085c\u0133",
    "\u0003\u0002\u0002\u0002\u085d\u085e\u0005\u00d6l\u0002\u085e\u085f",
    "\u0005\u0158\u00ad\u0002\u085f\u0860\u0005\\/\u0002\u0860\u0135\u0003",
    "\u0002\u0002\u0002\u0861\u0862\b\u009c\u0001\u0002\u0862\u0863\u0005",
    "\u00d6l\u0002\u0863\u0868\u0003\u0002\u0002\u0002\u0864\u0865\f\u0003",
    "\u0002\u0002\u0865\u0867\u0005\u0082B\u0002\u0866\u0864\u0003\u0002",
    "\u0002\u0002\u0867\u086a\u0003\u0002\u0002\u0002\u0868\u0866\u0003\u0002",
    "\u0002\u0002\u0868\u0869\u0003\u0002\u0002\u0002\u0869\u0137\u0003\u0002",
    "\u0002\u0002\u086a\u0868\u0003\u0002\u0002\u0002\u086b\u086c\u0006\u009d",
    "1\u0003\u086c\u086d\u0007\u00ac\u0002\u0002\u086d\u0870\u0005\u00e8",
    "u\u0002\u086e\u0870\u0005\\/\u0002\u086f\u086b\u0003\u0002\u0002\u0002",
    "\u086f\u086e\u0003\u0002\u0002\u0002\u0870\u0139\u0003\u0002\u0002\u0002",
    "\u0871\u0872\u0005\u013c\u009f\u0002\u0872\u0873\u0005\\/\u0002\u0873",
    "\u087a\u0003\u0002\u0002\u0002\u0874\u0875\u0005\u013c\u009f\u0002\u0875",
    "\u0876\u0007\u001a\u0002\u0002\u0876\u0877\u0005\u010e\u0088\u0002\u0877",
    "\u0878\u0007\u001b\u0002\u0002\u0878\u087a\u0003\u0002\u0002\u0002\u0879",
    "\u0871\u0003\u0002\u0002\u0002\u0879\u0874\u0003\u0002\u0002\u0002\u087a",
    "\u013b\u0003\u0002\u0002\u0002\u087b\u087c\u0005\u013e\u00a0\u0002\u087c",
    "\u087d\u0005\u008aF\u0002\u087d\u087e\u00075\u0002\u0002\u087e\u087f",
    "\u0005\u008aF\u0002\u087f\u013d\u0003\u0002\u0002\u0002\u0880\u0887",
    "\u0005\u00d6l\u0002\u0881\u0883\u0007\u0016\u0002\u0002\u0882\u0884",
    "\u0005\u00fe\u0080\u0002\u0883\u0882\u0003\u0002\u0002\u0002\u0883\u0884",
    "\u0003\u0002\u0002\u0002\u0884\u0885\u0003\u0002\u0002\u0002\u0885\u0887",
    "\u0007\u0017\u0002\u0002\u0886\u0880\u0003\u0002\u0002\u0002\u0886\u0881",
    "\u0003\u0002\u0002\u0002\u0887\u013f\u0003\u0002\u0002\u0002\u0888\u088b",
    "\u0005b2\u0002\u0889\u088b\u0005\u013a\u009e\u0002\u088a\u0888\u0003",
    "\u0002\u0002\u0002\u088a\u0889\u0003\u0002\u0002\u0002\u088b\u0141\u0003",
    "\u0002\u0002\u0002\u088c\u088d\u0007\u008c\u0002\u0002\u088d\u088e\u0007",
    "K\u0002\u0002\u088e\u088f\u0007q\u0002\u0002\u088f\u0890\u0005\\/\u0002",
    "\u0890\u0143\u0003\u0002\u0002\u0002\u0891\u0892\u0007\u008c\u0002\u0002",
    "\u0892\u0893\u0007\u0084\u0002\u0002\u0893\u0894\u0007q\u0002\u0002",
    "\u0894\u0895\u0005\\/\u0002\u0895\u0145\u0003\u0002\u0002\u0002\u0896",
    "\u089b\u0005\u0148\u00a5\u0002\u0897\u0898\u0007\u0013\u0002\u0002\u0898",
    "\u089a\u0005\u0148\u00a5\u0002\u0899\u0897\u0003\u0002\u0002\u0002\u089a",
    "\u089d\u0003\u0002\u0002\u0002\u089b\u0899\u0003\u0002\u0002\u0002\u089b",
    "\u089c\u0003\u0002\u0002\u0002\u089c\u0147\u0003\u0002\u0002\u0002\u089d",
    "\u089b\u0003\u0002\u0002\u0002\u089e\u08a3\u0005\u00d6l\u0002\u089f",
    "\u08a0\u0007\u0015\u0002\u0002\u08a0\u08a2\u0005\u00d6l\u0002\u08a1",
    "\u089f\u0003\u0002\u0002\u0002\u08a2\u08a5\u0003\u0002\u0002\u0002\u08a3",
    "\u08a1\u0003\u0002\u0002\u0002\u08a3\u08a4\u0003\u0002\u0002\u0002\u08a4",
    "\u08a7\u0003\u0002\u0002\u0002\u08a5\u08a3\u0003\u0002\u0002\u0002\u08a6",
    "\u08a8\t\b\u0002\u0002\u08a7\u08a6\u0003\u0002\u0002\u0002\u08a7\u08a8",
    "\u0003\u0002\u0002\u0002\u08a8\u0149\u0003\u0002\u0002\u0002\u08a9\u08b0",
    "\u0007\"\u0002\u0002\u08aa\u08b0\u0007#\u0002\u0002\u08ab\u08b0\u0005",
    "\u015a\u00ae\u0002\u08ac\u08b0\u0005\u015c\u00af\u0002\u08ad\u08b0\u0005",
    "\u015e\u00b0\u0002\u08ae\u08b0\u0005\u0160\u00b1\u0002\u08af\u08a9\u0003",
    "\u0002\u0002\u0002\u08af\u08aa\u0003\u0002\u0002\u0002\u08af\u08ab\u0003",
    "\u0002\u0002\u0002\u08af\u08ac\u0003\u0002\u0002\u0002\u08af\u08ad\u0003",
    "\u0002\u0002\u0002\u08af\u08ae\u0003\u0002\u0002\u0002\u08b0\u014b\u0003",
    "\u0002\u0002\u0002\u08b1\u08b2\t\t\u0002\u0002\u08b2\u014d\u0003\u0002",
    "\u0002\u0002\u08b3\u08b4\u0007\u00ac\u0002\u0002\u08b4\u08b5\u0006\u00a8",
    "2\u0003\u08b5\u014f\u0003\u0002\u0002\u0002\u08b6\u08b7\u0007\u00ac",
    "\u0002\u0002\u08b7\u08b8\u0006\u00a93\u0003\u08b8\u0151\u0003\u0002",
    "\u0002\u0002\u08b9\u08ba\u0007\u00ac\u0002\u0002\u08ba\u08bb\u0006\u00aa",
    "4\u0003\u08bb\u0153\u0003\u0002\u0002\u0002\u08bc\u08bd\u0007\u00ac",
    "\u0002\u0002\u08bd\u08be\u0006\u00ab5\u0003\u08be\u0155\u0003\u0002",
    "\u0002\u0002\u08bf\u08c0\u0007\u00ac\u0002\u0002\u08c0\u08c1\u0006\u00ac",
    "6\u0003\u08c1\u0157\u0003\u0002\u0002\u0002\u08c2\u08c3\u0007.\u0002",
    "\u0002\u08c3\u0159\u0003\u0002\u0002\u0002\u08c4\u08c5\u0007$\u0002",
    "\u0002\u08c5\u015b\u0003\u0002\u0002\u0002\u08c6\u08c7\u0007%\u0002",
    "\u0002\u08c7\u015d\u0003\u0002\u0002\u0002\u08c8\u08c9\u0007&\u0002",
    "\u0002\u08c9\u015f\u0003\u0002\u0002\u0002\u08ca\u08cb\t\n\u0002\u0002",
    "\u08cb\u0161\u0003\u0002\u0002\u0002\u08cc\u08cd\u0007\u008f\u0002\u0002",
    "\u08cd\u08ce\u0005\u0164\u00b3\u0002\u08ce\u08cf\u0007\u0012\u0002\u0002",
    "\u08cf\u08d4\u0003\u0002\u0002\u0002\u08d0\u08d1\u0005\u0164\u00b3\u0002",
    "\u08d1\u08d2\u0007\u0012\u0002\u0002\u08d2\u08d4\u0003\u0002\u0002\u0002",
    "\u08d3\u08cc\u0003\u0002\u0002\u0002\u08d3\u08d0\u0003\u0002\u0002\u0002",
    "\u08d4\u0163\u0003\u0002\u0002\u0002\u08d5\u08d6\b\u00b3\u0001\u0002",
    "\u08d6\u08d7\u0005\u0166\u00b4\u0002\u08d7\u08dc\u0003\u0002\u0002\u0002",
    "\u08d8\u08d9\f\u0003\u0002\u0002\u08d9\u08db\u0005\u016c\u00b7\u0002",
    "\u08da\u08d8\u0003\u0002\u0002\u0002\u08db\u08de\u0003\u0002\u0002\u0002",
    "\u08dc\u08da\u0003\u0002\u0002\u0002\u08dc\u08dd\u0003\u0002\u0002\u0002",
    "\u08dd\u0165\u0003\u0002\u0002\u0002\u08de\u08dc\u0003\u0002\u0002\u0002",
    "\u08df\u08e7\u0005\u0168\u00b5\u0002\u08e0\u08e7\u0005\u016a\u00b6\u0002",
    "\u08e1\u08e7\u0005\u0174\u00bb\u0002\u08e2\u08e7\u0005\u0176\u00bc\u0002",
    "\u08e3\u08e7\u0005\u0178\u00bd\u0002\u08e4\u08e7\u0005\u016e\u00b8\u0002",
    "\u08e5\u08e7\u0005\u0172\u00ba\u0002\u08e6\u08df\u0003\u0002\u0002\u0002",
    "\u08e6\u08e0\u0003\u0002\u0002\u0002\u08e6\u08e1\u0003\u0002\u0002\u0002",
    "\u08e6\u08e2\u0003\u0002\u0002\u0002\u08e6\u08e3\u0003\u0002\u0002\u0002",
    "\u08e6\u08e4\u0003\u0002\u0002\u0002\u08e6\u08e5\u0003\u0002\u0002\u0002",
    "\u08e7\u0167\u0003\u0002\u0002\u0002\u08e8\u08e9\u0005\u011c\u008f\u0002",
    "\u08e9\u0169\u0003\u0002\u0002\u0002\u08ea\u08eb\u0005\u014e\u00a8\u0002",
    "\u08eb\u08ec\u0005\u016e\u00b8\u0002\u08ec\u016b\u0003\u0002\u0002\u0002",
    "\u08ed\u08ee\u0007\u0015\u0002\u0002\u08ee\u08f3\u0005\u016e\u00b8\u0002",
    "\u08ef\u08f0\u0007\u0015\u0002\u0002\u08f0\u08f3\u0005\u017a\u00be\u0002",
    "\u08f1\u08f3\u0005\u0172\u00ba\u0002\u08f2\u08ed\u0003\u0002\u0002\u0002",
    "\u08f2\u08ef\u0003\u0002\u0002\u0002\u08f2\u08f1\u0003\u0002\u0002\u0002",
    "\u08f3\u016d\u0003\u0002\u0002\u0002\u08f4\u08f5\u0005\u017a\u00be\u0002",
    "\u08f5\u08f7\u0007\u0016\u0002\u0002\u08f6\u08f8\u0005\u0170\u00b9\u0002",
    "\u08f7\u08f6\u0003\u0002\u0002\u0002\u08f7\u08f8\u0003\u0002\u0002\u0002",
    "\u08f8\u08f9\u0003\u0002\u0002\u0002\u08f9\u08fa\u0007\u0017\u0002\u0002",
    "\u08fa\u016f\u0003\u0002\u0002\u0002\u08fb\u08fc\b\u00b9\u0001\u0002",
    "\u08fc\u08fd\u0005\u0164\u00b3\u0002\u08fd\u0903\u0003\u0002\u0002\u0002",
    "\u08fe\u08ff\f\u0003\u0002\u0002\u08ff\u0900\u0007\u0013\u0002\u0002",
    "\u0900\u0902\u0005\u0164\u00b3\u0002\u0901\u08fe\u0003\u0002\u0002\u0002",
    "\u0902\u0905\u0003\u0002\u0002\u0002\u0903\u0901\u0003\u0002\u0002\u0002",
    "\u0903\u0904\u0003\u0002\u0002\u0002\u0904\u0171\u0003\u0002\u0002\u0002",
    "\u0905\u0903\u0003\u0002\u0002\u0002\u0906\u0907\u0007\u0018\u0002\u0002",
    "\u0907\u0908\u0005\u0164\u00b3\u0002\u0908\u0909\u0007\u0019\u0002\u0002",
    "\u0909\u0173\u0003\u0002\u0002\u0002\u090a\u090b\u0007\u0016\u0002\u0002",
    "\u090b\u090c\u0005\u0164\u00b3\u0002\u090c\u090d\u0007\u0017\u0002\u0002",
    "\u090d\u0175\u0003\u0002\u0002\u0002\u090e\u090f\u0005\u017a\u00be\u0002",
    "\u090f\u0177\u0003\u0002\u0002\u0002\u0910\u0916\u0007\u00b2\u0002\u0002",
    "\u0911\u0916\u0007\u00b4\u0002\u0002\u0912\u0916\u0007\u00b0\u0002\u0002",
    "\u0913\u0916\u0007\u00a6\u0002\u0002\u0914\u0916\u0007\u00a7\u0002\u0002",
    "\u0915\u0910\u0003\u0002\u0002\u0002\u0915\u0911\u0003\u0002\u0002\u0002",
    "\u0915\u0912\u0003\u0002\u0002\u0002\u0915\u0913\u0003\u0002\u0002\u0002",
    "\u0915\u0914\u0003\u0002\u0002\u0002\u0916\u0179\u0003\u0002\u0002\u0002",
    "\u0917\u0918\t\u000b\u0002\u0002\u0918\u017b\u0003\u0002\u0002\u0002",
    "\u0919\u091a\u0007\u008f\u0002\u0002\u091a\u091d\u0005\u017e\u00c0\u0002",
    "\u091b\u091d\u0005\u017e\u00c0\u0002\u091c\u0919\u0003\u0002\u0002\u0002",
    "\u091c\u091b\u0003\u0002\u0002\u0002\u091d\u017d\u0003\u0002\u0002\u0002",
    "\u091e\u091f\b\u00c0\u0001\u0002\u091f\u0920\u0005\u0180\u00c1\u0002",
    "\u0920\u0925\u0003\u0002\u0002\u0002\u0921\u0922\f\u0003\u0002\u0002",
    "\u0922\u0924\u0005\u0184\u00c3\u0002\u0923\u0921\u0003\u0002\u0002\u0002",
    "\u0924\u0927\u0003\u0002\u0002\u0002\u0925\u0923\u0003\u0002\u0002\u0002",
    "\u0925\u0926\u0003\u0002\u0002\u0002\u0926\u017f\u0003\u0002\u0002\u0002",
    "\u0927\u0925\u0003\u0002\u0002\u0002\u0928\u092e\u0005\u0182\u00c2\u0002",
    "\u0929\u092e\u0005\u018e\u00c8\u0002\u092a\u092e\u0005\u0190\u00c9\u0002",
    "\u092b\u092e\u0005\u0192\u00ca\u0002\u092c\u092e\u0005\u0186\u00c4\u0002",
    "\u092d\u0928\u0003\u0002\u0002\u0002\u092d\u0929\u0003\u0002\u0002\u0002",
    "\u092d\u092a\u0003\u0002\u0002\u0002\u092d\u092b\u0003\u0002\u0002\u0002",
    "\u092d\u092c\u0003\u0002\u0002\u0002\u092e\u0181\u0003\u0002\u0002\u0002",
    "\u092f\u0930\u0005\u011c\u008f\u0002\u0930\u0183\u0003\u0002\u0002\u0002",
    "\u0931\u0932\u0007\u0015\u0002\u0002\u0932\u0938\u0005\u0186\u00c4\u0002",
    "\u0933\u0934\u0007\u0018\u0002\u0002\u0934\u0935\u0005\u017e\u00c0\u0002",
    "\u0935\u0936\u0007\u0019\u0002\u0002\u0936\u0938\u0003\u0002\u0002\u0002",
    "\u0937\u0931\u0003\u0002\u0002\u0002\u0937\u0933\u0003\u0002\u0002\u0002",
    "\u0938\u0185\u0003\u0002\u0002\u0002\u0939\u093a\u0005\u0194\u00cb\u0002",
    "\u093a\u093c\u0007\u0016\u0002\u0002\u093b\u093d\u0005\u0188\u00c5\u0002",
    "\u093c\u093b\u0003\u0002\u0002\u0002\u093c\u093d\u0003\u0002\u0002\u0002",
    "\u093d\u093e\u0003\u0002\u0002\u0002\u093e\u093f\u0007\u0017\u0002\u0002",
    "\u093f\u0187\u0003\u0002\u0002\u0002\u0940\u0947\u0005\u018a\u00c6\u0002",
    "\u0941\u0947\u0005\u018c\u00c7\u0002\u0942\u0943\u0005\u018a\u00c6\u0002",
    "\u0943\u0944\u0007\u0013\u0002\u0002\u0944\u0945\u0005\u018c\u00c7\u0002",
    "\u0945\u0947\u0003\u0002\u0002\u0002\u0946\u0940\u0003\u0002\u0002\u0002",
    "\u0946\u0941\u0003\u0002\u0002\u0002\u0946\u0942\u0003\u0002\u0002\u0002",
    "\u0947\u0189\u0003\u0002\u0002\u0002\u0948\u0949\b\u00c6\u0001\u0002",
    "\u0949\u094a\u0005\u017e\u00c0\u0002\u094a\u0950\u0003\u0002\u0002\u0002",
    "\u094b\u094c\f\u0003\u0002\u0002\u094c\u094d\u0007\u0013\u0002\u0002",
    "\u094d\u094f\u0005\u017e\u00c0\u0002\u094e\u094b\u0003\u0002\u0002\u0002",
    "\u094f\u0952\u0003\u0002\u0002\u0002\u0950\u094e\u0003\u0002\u0002\u0002",
    "\u0950\u0951\u0003\u0002\u0002\u0002\u0951\u018b\u0003\u0002\u0002\u0002",
    "\u0952\u0950\u0003\u0002\u0002\u0002\u0953\u0954\b\u00c7\u0001\u0002",
    "\u0954\u0955\u0005\u0194\u00cb\u0002\u0955\u0956\u0007.\u0002\u0002",
    "\u0956\u0957\u0005\u017e\u00c0\u0002\u0957\u0960\u0003\u0002\u0002\u0002",
    "\u0958\u0959\f\u0003\u0002\u0002\u0959\u095a\u0007\u0013\u0002\u0002",
    "\u095a\u095b\u0005\u0194\u00cb\u0002\u095b\u095c\u0007.\u0002\u0002",
    "\u095c\u095d\u0005\u017e\u00c0\u0002\u095d\u095f\u0003\u0002\u0002\u0002",
    "\u095e\u0958\u0003\u0002\u0002\u0002\u095f\u0962\u0003\u0002\u0002\u0002",
    "\u0960\u095e\u0003\u0002\u0002\u0002\u0960\u0961\u0003\u0002\u0002\u0002",
    "\u0961\u018d\u0003\u0002\u0002\u0002\u0962\u0960\u0003\u0002\u0002\u0002",
    "\u0963\u0964\u0007\u0016\u0002\u0002\u0964\u0965\u0005\u017e\u00c0\u0002",
    "\u0965\u0966\u0007\u0017\u0002\u0002\u0966\u018f\u0003\u0002\u0002\u0002",
    "\u0967\u0968\b\u00c9\u0001\u0002\u0968\u096b\u0007\u00ae\u0002\u0002",
    "\u0969\u096b\u0005\u0194\u00cb\u0002\u096a\u0967\u0003\u0002\u0002\u0002",
    "\u096a\u0969\u0003\u0002\u0002\u0002\u096b\u0971\u0003\u0002\u0002\u0002",
    "\u096c\u096d\f\u0003\u0002\u0002\u096d\u096e\u0007\u0015\u0002\u0002",
    "\u096e\u0970\u0005\u0194\u00cb\u0002\u096f\u096c\u0003\u0002\u0002\u0002",
    "\u0970\u0973\u0003\u0002\u0002\u0002\u0971\u096f\u0003\u0002\u0002\u0002",
    "\u0971\u0972\u0003\u0002\u0002\u0002\u0972\u0191\u0003\u0002\u0002\u0002",
    "\u0973\u0971\u0003\u0002\u0002\u0002\u0974\u097a\u0007\u00b2\u0002\u0002",
    "\u0975\u097a\u0007\u00b4\u0002\u0002\u0976\u097a\u0007\u00b0\u0002\u0002",
    "\u0977\u097a\u0007\u00a6\u0002\u0002\u0978\u097a\u0007\u00a7\u0002\u0002",
    "\u0979\u0974\u0003\u0002\u0002\u0002\u0979\u0975\u0003\u0002\u0002\u0002",
    "\u0979\u0976\u0003\u0002\u0002\u0002\u0979\u0977\u0003\u0002\u0002\u0002",
    "\u0979\u0978\u0003\u0002\u0002\u0002\u097a\u0193\u0003\u0002\u0002\u0002",
    "\u097b\u097c\t\f\u0002\u0002\u097c\u0195\u0003\u0002\u0002\u0002\u097d",
    "\u097e\u0007\u008f\u0002\u0002\u097e\u097f\u0005\u0198\u00cd\u0002\u097f",
    "\u0980\u0007\u0012\u0002\u0002\u0980\u0985\u0003\u0002\u0002\u0002\u0981",
    "\u0982\u0005\u0198\u00cd\u0002\u0982\u0983\u0007\u0012\u0002\u0002\u0983",
    "\u0985\u0003\u0002\u0002\u0002\u0984\u097d\u0003\u0002\u0002\u0002\u0984",
    "\u0981\u0003\u0002\u0002\u0002\u0985\u0197\u0003\u0002\u0002\u0002\u0986",
    "\u0987\b\u00cd\u0001\u0002\u0987\u0988\u0005\u019a\u00ce\u0002\u0988",
    "\u098d\u0003\u0002\u0002\u0002\u0989\u098a\f\u0003\u0002\u0002\u098a",
    "\u098c\u0005\u01a0\u00d1\u0002\u098b\u0989\u0003\u0002\u0002\u0002\u098c",
    "\u098f\u0003\u0002\u0002\u0002\u098d\u098b\u0003\u0002\u0002\u0002\u098d",
    "\u098e\u0003\u0002\u0002\u0002\u098e\u0199\u0003\u0002\u0002\u0002\u098f",
    "\u098d\u0003\u0002\u0002\u0002\u0990\u0996\u0005\u019c\u00cf\u0002\u0991",
    "\u0996\u0005\u019e\u00d0\u0002\u0992\u0996\u0005\u01a8\u00d5\u0002\u0993",
    "\u0996\u0005\u01aa\u00d6\u0002\u0994\u0996\u0005\u01ae\u00d8\u0002\u0995",
    "\u0990\u0003\u0002\u0002\u0002\u0995\u0991\u0003\u0002\u0002\u0002\u0995",
    "\u0992\u0003\u0002\u0002\u0002\u0995\u0993\u0003\u0002\u0002\u0002\u0995",
    "\u0994\u0003\u0002\u0002\u0002\u0996\u019b\u0003\u0002\u0002\u0002\u0997",
    "\u0998\u0005\u011c\u008f\u0002\u0998\u019d\u0003\u0002\u0002\u0002\u0999",
    "\u099a\u0005\u014e\u00a8\u0002\u099a\u099b\u0005\u01a2\u00d2\u0002\u099b",
    "\u019f\u0003\u0002\u0002\u0002\u099c\u099d\u0007\u0015\u0002\u0002\u099d",
    "\u09a0\u0005\u01a2\u00d2\u0002\u099e\u09a0\u0005\u01a6\u00d4\u0002\u099f",
    "\u099c\u0003\u0002\u0002\u0002\u099f\u099e\u0003\u0002\u0002\u0002\u09a0",
    "\u01a1\u0003\u0002\u0002\u0002\u09a1\u09a2\u0005\u01b0\u00d9\u0002\u09a2",
    "\u09a4\u0007\u0016\u0002\u0002\u09a3\u09a5\u0005\u01a4\u00d3\u0002\u09a4",
    "\u09a3\u0003\u0002\u0002\u0002\u09a4\u09a5\u0003\u0002\u0002\u0002\u09a5",
    "\u09a6\u0003\u0002\u0002\u0002\u09a6\u09a7\u0007\u0017\u0002\u0002\u09a7",
    "\u01a3\u0003\u0002\u0002\u0002\u09a8\u09a9\b\u00d3\u0001\u0002\u09a9",
    "\u09aa\u0005\u0198\u00cd\u0002\u09aa\u09b0\u0003\u0002\u0002\u0002\u09ab",
    "\u09ac\f\u0003\u0002\u0002\u09ac\u09ad\u0007\u0013\u0002\u0002\u09ad",
    "\u09af\u0005\u0198\u00cd\u0002\u09ae\u09ab\u0003\u0002\u0002\u0002\u09af",
    "\u09b2\u0003\u0002\u0002\u0002\u09b0\u09ae\u0003\u0002\u0002\u0002\u09b0",
    "\u09b1\u0003\u0002\u0002\u0002\u09b1\u01a5\u0003\u0002\u0002\u0002\u09b2",
    "\u09b0\u0003\u0002\u0002\u0002\u09b3\u09b4\u0007\u0018\u0002\u0002\u09b4",
    "\u09b5\u0005\u0198\u00cd\u0002\u09b5\u09b6\u0007\u0019\u0002\u0002\u09b6",
    "\u01a7\u0003\u0002\u0002\u0002\u09b7\u09b8\u0007\u0016\u0002\u0002\u09b8",
    "\u09b9\u0005\u0198\u00cd\u0002\u09b9\u09ba\u0007\u0017\u0002\u0002\u09ba",
    "\u01a9\u0003\u0002\u0002\u0002\u09bb\u09bc\b\u00d6\u0001\u0002\u09bc",
    "\u09bd\u0005\u01b0\u00d9\u0002\u09bd\u09c3\u0003\u0002\u0002\u0002\u09be",
    "\u09bf\f\u0003\u0002\u0002\u09bf\u09c0\u0007\u0015\u0002\u0002\u09c0",
    "\u09c2\u0005\u01b0\u00d9\u0002\u09c1\u09be\u0003\u0002\u0002\u0002\u09c2",
    "\u09c5\u0003\u0002\u0002\u0002\u09c3\u09c1\u0003\u0002\u0002\u0002\u09c3",
    "\u09c4\u0003\u0002\u0002\u0002\u09c4\u01ab\u0003\u0002\u0002\u0002\u09c5",
    "\u09c3\u0003\u0002\u0002\u0002\u09c6\u09c7\b\u00d7\u0001\u0002\u09c7",
    "\u09c8\u0005\u01aa\u00d6\u0002\u09c8\u09cd\u0003\u0002\u0002\u0002\u09c9",
    "\u09ca\f\u0003\u0002\u0002\u09ca\u09cc\u0007\u00ae\u0002\u0002\u09cb",
    "\u09c9\u0003\u0002\u0002\u0002\u09cc\u09cf\u0003\u0002\u0002\u0002\u09cd",
    "\u09cb\u0003\u0002\u0002\u0002\u09cd\u09ce\u0003\u0002\u0002\u0002\u09ce",
    "\u01ad\u0003\u0002\u0002\u0002\u09cf\u09cd\u0003\u0002\u0002\u0002\u09d0",
    "\u09d6\u0007\u00b2\u0002\u0002\u09d1\u09d6\u0007\u00b4\u0002\u0002\u09d2",
    "\u09d6\u0007\u00b0\u0002\u0002\u09d3\u09d6\u0007\u00a6\u0002\u0002\u09d4",
    "\u09d6\u0007\u00a7\u0002\u0002\u09d5\u09d0\u0003\u0002\u0002\u0002\u09d5",
    "\u09d1\u0003\u0002\u0002\u0002\u09d5\u09d2\u0003\u0002\u0002\u0002\u09d5",
    "\u09d3\u0003\u0002\u0002\u0002\u09d5\u09d4\u0003\u0002\u0002\u0002\u09d6",
    "\u01af\u0003\u0002\u0002\u0002\u09d7\u09d8\t\r\u0002\u0002\u09d8\u01b1",
    "\u0003\u0002\u0002\u0002\u09d9\u09da\u0007\u008f\u0002\u0002\u09da\u09db",
    "\u0005\u01b4\u00db\u0002\u09db\u09dc\u0007\u0012\u0002\u0002\u09dc\u09e1",
    "\u0003\u0002\u0002\u0002\u09dd\u09de\u0005\u01b4\u00db\u0002\u09de\u09df",
    "\u0007\u0012\u0002\u0002\u09df\u09e1\u0003\u0002\u0002\u0002\u09e0\u09d9",
    "\u0003\u0002\u0002\u0002\u09e0\u09dd\u0003\u0002\u0002\u0002\u09e1\u01b3",
    "\u0003\u0002\u0002\u0002\u09e2\u09e3\b\u00db\u0001\u0002\u09e3\u09e4",
    "\u0005\u01b6\u00dc\u0002\u09e4\u09e9\u0003\u0002\u0002\u0002\u09e5\u09e6",
    "\f\u0003\u0002\u0002\u09e6\u09e8\u0005\u01bc\u00df\u0002\u09e7\u09e5",
    "\u0003\u0002\u0002\u0002\u09e8\u09eb\u0003\u0002\u0002\u0002\u09e9\u09e7",
    "\u0003\u0002\u0002\u0002\u09e9\u09ea\u0003\u0002\u0002\u0002\u09ea\u01b5",
    "\u0003\u0002\u0002\u0002\u09eb\u09e9\u0003\u0002\u0002\u0002\u09ec\u09f2",
    "\u0005\u01b8\u00dd\u0002\u09ed\u09f2\u0005\u01ba\u00de\u0002\u09ee\u09f2",
    "\u0005\u01c4\u00e3\u0002\u09ef\u09f2\u0005\u01c6\u00e4\u0002\u09f0\u09f2",
    "\u0005\u01c8\u00e5\u0002\u09f1\u09ec\u0003\u0002\u0002\u0002\u09f1\u09ed",
    "\u0003\u0002\u0002\u0002\u09f1\u09ee\u0003\u0002\u0002\u0002\u09f1\u09ef",
    "\u0003\u0002\u0002\u0002\u09f1\u09f0\u0003\u0002\u0002\u0002\u09f2\u01b7",
    "\u0003\u0002\u0002\u0002\u09f3\u09f4\u0005\u011c\u008f\u0002\u09f4\u01b9",
    "\u0003\u0002\u0002\u0002\u09f5\u09f6\u0005\u014e\u00a8\u0002\u09f6\u09f7",
    "\u0005\u01be\u00e0\u0002\u09f7\u01bb\u0003\u0002\u0002\u0002\u09f8\u09f9",
    "\u0007\u0015\u0002\u0002\u09f9\u09fc\u0005\u01be\u00e0\u0002\u09fa\u09fc",
    "\u0005\u01c2\u00e2\u0002\u09fb\u09f8\u0003\u0002\u0002\u0002\u09fb\u09fa",
    "\u0003\u0002\u0002\u0002\u09fc\u01bd\u0003\u0002\u0002\u0002\u09fd\u09fe",
    "\u0005\u01ca\u00e6\u0002\u09fe\u0a00\u0007\u0016\u0002\u0002\u09ff\u0a01",
    "\u0005\u01c0\u00e1\u0002\u0a00\u09ff\u0003\u0002\u0002\u0002\u0a00\u0a01",
    "\u0003\u0002\u0002\u0002\u0a01\u0a02\u0003\u0002\u0002\u0002\u0a02\u0a03",
    "\u0007\u0017\u0002\u0002\u0a03\u01bf\u0003\u0002\u0002\u0002\u0a04\u0a05",
    "\b\u00e1\u0001\u0002\u0a05\u0a06\u0005\u01b4\u00db\u0002\u0a06\u0a0c",
    "\u0003\u0002\u0002\u0002\u0a07\u0a08\f\u0003\u0002\u0002\u0a08\u0a09",
    "\u0007\u0013\u0002\u0002\u0a09\u0a0b\u0005\u01b4\u00db\u0002\u0a0a\u0a07",
    "\u0003\u0002\u0002\u0002\u0a0b\u0a0e\u0003\u0002\u0002\u0002\u0a0c\u0a0a",
    "\u0003\u0002\u0002\u0002\u0a0c\u0a0d\u0003\u0002\u0002\u0002\u0a0d\u01c1",
    "\u0003\u0002\u0002\u0002\u0a0e\u0a0c\u0003\u0002\u0002\u0002\u0a0f\u0a10",
    "\u0007\u0018\u0002\u0002\u0a10\u0a11\u0005\u01b4\u00db\u0002\u0a11\u0a12",
    "\u0007\u0019\u0002\u0002\u0a12\u01c3\u0003\u0002\u0002\u0002\u0a13\u0a14",
    "\u0007\u0016\u0002\u0002\u0a14\u0a15\u0005\u01b4\u00db\u0002\u0a15\u0a16",
    "\u0007\u0017\u0002\u0002\u0a16\u01c5\u0003\u0002\u0002\u0002\u0a17\u0a18",
    "\b\u00e4\u0001\u0002\u0a18\u0a1b\u0007\u00ae\u0002\u0002\u0a19\u0a1b",
    "\u0005\u01ca\u00e6\u0002\u0a1a\u0a17\u0003\u0002\u0002\u0002\u0a1a\u0a19",
    "\u0003\u0002\u0002\u0002\u0a1b\u0a21\u0003\u0002\u0002\u0002\u0a1c\u0a1d",
    "\f\u0003\u0002\u0002\u0a1d\u0a1e\u0007\u0015\u0002\u0002\u0a1e\u0a20",
    "\u0005\u01ca\u00e6\u0002\u0a1f\u0a1c\u0003\u0002\u0002\u0002\u0a20\u0a23",
    "\u0003\u0002\u0002\u0002\u0a21\u0a1f\u0003\u0002\u0002\u0002\u0a21\u0a22",
    "\u0003\u0002\u0002\u0002\u0a22\u01c7\u0003\u0002\u0002\u0002\u0a23\u0a21",
    "\u0003\u0002\u0002\u0002\u0a24\u0a2a\u0007\u00b2\u0002\u0002\u0a25\u0a2a",
    "\u0007\u00b4\u0002\u0002\u0a26\u0a2a\u0007\u00b0\u0002\u0002\u0a27\u0a2a",
    "\u0007\u00a6\u0002\u0002\u0a28\u0a2a\u0007\u00a7\u0002\u0002\u0a29\u0a24",
    "\u0003\u0002\u0002\u0002\u0a29\u0a25\u0003\u0002\u0002\u0002\u0a29\u0a26",
    "\u0003\u0002\u0002\u0002\u0a29\u0a27\u0003\u0002\u0002\u0002\u0a29\u0a28",
    "\u0003\u0002\u0002\u0002\u0a2a\u01c9\u0003\u0002\u0002\u0002\u0a2b\u0a2c",
    "\t\u000e\u0002\u0002\u0a2c\u01cb\u0003\u0002\u0002\u0002\u0a2d\u0a30",
    "\u0005\u01ce\u00e8\u0002\u0a2e\u0a30\u0005\u01d0\u00e9\u0002\u0a2f\u0a2d",
    "\u0003\u0002\u0002\u0002\u0a2f\u0a2e\u0003\u0002\u0002\u0002\u0a30\u01cd",
    "\u0003\u0002\u0002\u0002\u0a31\u0a39\u0005\u01d6\u00ec\u0002\u0a32\u0a34",
    "\u0005\u01d8\u00ed\u0002\u0a33\u0a35\u0005\u01e4\u00f3\u0002\u0a34\u0a33",
    "\u0003\u0002\u0002\u0002\u0a34\u0a35\u0003\u0002\u0002\u0002\u0a35\u0a36",
    "\u0003\u0002\u0002\u0002\u0a36\u0a37\u0005\u01da\u00ee\u0002\u0a37\u0a39",
    "\u0003\u0002\u0002\u0002\u0a38\u0a31\u0003\u0002\u0002\u0002\u0a38\u0a32",
    "\u0003\u0002\u0002\u0002\u0a39\u01cf\u0003\u0002\u0002\u0002\u0a3a\u0a3c",
    "\u0005\u01d2\u00ea\u0002\u0a3b\u0a3d\u0005\u01e4\u00f3\u0002\u0a3c\u0a3b",
    "\u0003\u0002\u0002\u0002\u0a3c\u0a3d\u0003\u0002\u0002\u0002\u0a3d\u0a3e",
    "\u0003\u0002\u0002\u0002\u0a3e\u0a3f\u0005\u01d4\u00eb\u0002\u0a3f\u01d1",
    "\u0003\u0002\u0002\u0002\u0a40\u0a41\u0007*\u0002\u0002\u0a41\u0a44",
    "\u0007(\u0002\u0002\u0a42\u0a44\u0007,\u0002\u0002\u0a43\u0a40\u0003",
    "\u0002\u0002\u0002\u0a43\u0a42\u0003\u0002\u0002\u0002\u0a44\u01d3\u0003",
    "\u0002\u0002\u0002\u0a45\u0a46\u0007*\u0002\u0002\u0a46\u0a47\u0007",
    "%\u0002\u0002\u0a47\u0a48\u0007(\u0002\u0002\u0a48\u01d5\u0003\u0002",
    "\u0002\u0002\u0a49\u0a4a\u0007*\u0002\u0002\u0a4a\u0a4b\u0005\u01dc",
    "\u00ef\u0002\u0a4b\u0a4f\u0005\u008aF\u0002\u0a4c\u0a4e\u0005\u01e0",
    "\u00f1\u0002\u0a4d\u0a4c\u0003\u0002\u0002\u0002\u0a4e\u0a51\u0003\u0002",
    "\u0002\u0002\u0a4f\u0a4d\u0003\u0002\u0002\u0002\u0a4f\u0a50\u0003\u0002",
    "\u0002\u0002\u0a50\u0a52\u0003\u0002\u0002\u0002\u0a51\u0a4f\u0003\u0002",
    "\u0002\u0002\u0a52\u0a53\u0007%\u0002\u0002\u0a53\u0a54\u0007(\u0002",
    "\u0002\u0a54\u01d7\u0003\u0002\u0002\u0002\u0a55\u0a56\u0007*\u0002",
    "\u0002\u0a56\u0a57\u0005\u01dc\u00ef\u0002\u0a57\u0a5b\u0005\u008aF",
    "\u0002\u0a58\u0a5a\u0005\u01e0\u00f1\u0002\u0a59\u0a58\u0003\u0002\u0002",
    "\u0002\u0a5a\u0a5d\u0003\u0002\u0002\u0002\u0a5b\u0a59\u0003\u0002\u0002",
    "\u0002\u0a5b\u0a5c\u0003\u0002\u0002\u0002\u0a5c\u0a5e\u0003\u0002\u0002",
    "\u0002\u0a5d\u0a5b\u0003\u0002\u0002\u0002\u0a5e\u0a5f\u0007(\u0002",
    "\u0002\u0a5f\u01d9\u0003\u0002\u0002\u0002\u0a60\u0a61\u0007*\u0002",
    "\u0002\u0a61\u0a62\u0007%\u0002\u0002\u0a62\u0a63\u0005\u01dc\u00ef",
    "\u0002\u0a63\u0a64\u0007(\u0002\u0002\u0a64\u01db\u0003\u0002\u0002",
    "\u0002\u0a65\u0a6a\u0005\u01de\u00f0\u0002\u0a66\u0a67\u0007\u0015\u0002",
    "\u0002\u0a67\u0a69\u0005\u01de\u00f0\u0002\u0a68\u0a66\u0003\u0002\u0002",
    "\u0002\u0a69\u0a6c\u0003\u0002\u0002\u0002\u0a6a\u0a68\u0003\u0002\u0002",
    "\u0002\u0a6a\u0a6b\u0003\u0002\u0002\u0002\u0a6b\u01dd\u0003\u0002\u0002",
    "\u0002\u0a6c\u0a6a\u0003\u0002\u0002\u0002\u0a6d\u0a71\u0005\u00ceh",
    "\u0002\u0a6e\u0a70\u0005\u00d0i\u0002\u0a6f\u0a6e\u0003\u0002\u0002",
    "\u0002\u0a70\u0a73\u0003\u0002\u0002\u0002\u0a71\u0a6f\u0003\u0002\u0002",
    "\u0002\u0a71\u0a72\u0003\u0002\u0002\u0002\u0a72\u01df\u0003\u0002\u0002",
    "\u0002\u0a73\u0a71\u0003\u0002\u0002\u0002\u0a74\u0a77\u0005\u01de\u00f0",
    "\u0002\u0a75\u0a76\u0007.\u0002\u0002\u0a76\u0a78\u0005\u01e2\u00f2",
    "\u0002\u0a77\u0a75\u0003\u0002\u0002\u0002\u0a77\u0a78\u0003\u0002\u0002",
    "\u0002\u0a78\u0a79\u0003\u0002\u0002\u0002\u0a79\u0a7a\u0005\u008aF",
    "\u0002\u0a7a\u01e1\u0003\u0002\u0002\u0002\u0a7b\u0a81\u0007\u00b0\u0002",
    "\u0002\u0a7c\u0a7d\u0007\u001a\u0002\u0002\u0a7d\u0a7e\u0005\\/\u0002",
    "\u0a7e\u0a7f\u0007\u001b\u0002\u0002\u0a7f\u0a81\u0003\u0002\u0002\u0002",
    "\u0a80\u0a7b\u0003\u0002\u0002\u0002\u0a80\u0a7c\u0003\u0002\u0002\u0002",
    "\u0a81\u01e3\u0003\u0002\u0002\u0002\u0a82\u0a84\u0005\u01e6\u00f4\u0002",
    "\u0a83\u0a82\u0003\u0002\u0002\u0002\u0a84\u0a85\u0003\u0002\u0002\u0002",
    "\u0a85\u0a83\u0003\u0002\u0002\u0002\u0a85\u0a86\u0003\u0002\u0002\u0002",
    "\u0a86\u01e5\u0003\u0002\u0002\u0002\u0a87\u0a8f\u0005\u01e8\u00f5\u0002",
    "\u0a88\u0a8f\u0005\u01ce\u00e8\u0002\u0a89\u0a8b\u0007\u001a\u0002\u0002",
    "\u0a8a\u0a8c\u0005\\/\u0002\u0a8b\u0a8a\u0003\u0002\u0002\u0002\u0a8b",
    "\u0a8c\u0003\u0002\u0002\u0002\u0a8c\u0a8d\u0003\u0002\u0002\u0002\u0a8d",
    "\u0a8f\u0007\u001b\u0002\u0002\u0a8e\u0a87\u0003\u0002\u0002\u0002\u0a8e",
    "\u0a88\u0003\u0002\u0002\u0002\u0a8e\u0a89\u0003\u0002\u0002\u0002\u0a8f",
    "\u01e7\u0003\u0002\u0002\u0002\u0a90\u0a92\n\u000f\u0002\u0002\u0a91",
    "\u0a90\u0003\u0002\u0002\u0002\u0a92\u0a93\u0003\u0002\u0002\u0002\u0a93",
    "\u0a91\u0003\u0002\u0002\u0002\u0a93\u0a94\u0003\u0002\u0002\u0002\u0a94",
    "\u01e9\u0003\u0002\u0002\u0002\u0a95\u0a97\u0007\u001a\u0002\u0002\u0a96",
    "\u0a98\u0005\u01ec\u00f7\u0002\u0a97\u0a96\u0003\u0002\u0002\u0002\u0a98",
    "\u0a99\u0003\u0002\u0002\u0002\u0a99\u0a97\u0003\u0002\u0002\u0002\u0a99",
    "\u0a9a\u0003\u0002\u0002\u0002\u0a9a\u0a9b\u0003\u0002\u0002\u0002\u0a9b",
    "\u0a9c\u0007\u001b\u0002\u0002\u0a9c\u01eb\u0003\u0002\u0002\u0002\u0a9d",
    "\u0a9e\u0005\u01ee\u00f8\u0002\u0a9e\u0a9f\u0007\u0011\u0002\u0002\u0a9f",
    "\u0aa0\u0005\u01f0\u00f9\u0002\u0aa0\u0aa1\u0007\u0012\u0002\u0002\u0aa1",
    "\u01ed\u0003\u0002\u0002\u0002\u0aa2\u0aa3\b\u00f8\u0001\u0002\u0aa3",
    "\u0aa7\u0005\u00ceh\u0002\u0aa4\u0aa5\u0007#\u0002\u0002\u0aa5\u0aa7",
    "\u0005\u00d2j\u0002\u0aa6\u0aa2\u0003\u0002\u0002\u0002\u0aa6\u0aa4",
    "\u0003\u0002\u0002\u0002\u0aa7\u0ab0\u0003\u0002\u0002\u0002\u0aa8\u0aaa",
    "\f\u0003\u0002\u0002\u0aa9\u0aab\u0005\u00d0i\u0002\u0aaa\u0aa9\u0003",
    "\u0002\u0002\u0002\u0aab\u0aac\u0003\u0002\u0002\u0002\u0aac\u0aaa\u0003",
    "\u0002\u0002\u0002\u0aac\u0aad\u0003\u0002\u0002\u0002\u0aad\u0aaf\u0003",
    "\u0002\u0002\u0002\u0aae\u0aa8\u0003\u0002\u0002\u0002\u0aaf\u0ab2\u0003",
    "\u0002\u0002\u0002\u0ab0\u0aae\u0003\u0002\u0002\u0002\u0ab0\u0ab1\u0003",
    "\u0002\u0002\u0002\u0ab1\u01ef\u0003\u0002\u0002\u0002\u0ab2\u0ab0\u0003",
    "\u0002\u0002\u0002\u0ab3\u0ab4\u0007\u001a\u0002\u0002\u0ab4\u0ab5\u0005",
    "\\/\u0002\u0ab5\u0ab6\u0007\u001b\u0002\u0002\u0ab6\u0ab9\u0003\u0002",
    "\u0002\u0002\u0ab7\u0ab9\u0005\u01f2\u00fa\u0002\u0ab8\u0ab3\u0003\u0002",
    "\u0002\u0002\u0ab8\u0ab7\u0003\u0002\u0002\u0002\u0ab9\u01f1\u0003\u0002",
    "\u0002\u0002\u0aba\u0abc\n\u0010\u0002\u0002\u0abb\u0aba\u0003\u0002",
    "\u0002\u0002\u0abc\u0abd\u0003\u0002\u0002\u0002\u0abd\u0abb\u0003\u0002",
    "\u0002\u0002\u0abd\u0abe\u0003\u0002\u0002\u0002\u0abe\u01f3\u0003\u0002",
    "\u0002\u0002\u00f5\u01fa\u01fd\u0216\u021b\u0229\u022f\u0231\u0233\u0237",
    "\u023c\u0244\u024b\u025c\u0267\u026e\u0272\u027d\u028b\u029f\u02b6\u02c1",
    "\u02c8\u02d1\u02d6\u02dd\u02e6\u02fb\u0303\u0308\u030e\u0313\u0319\u031f",
    "\u0324\u0329\u0341\u034c\u0350\u0366\u0376\u037d\u0385\u038a\u0391\u0397",
    "\u039e\u03bb\u03ce\u03d4\u03f6\u03ff\u0416\u0424\u042d\u0436\u044d\u0453",
    "\u046a\u04da\u04dc\u04e6\u04ef\u04fa\u0505\u0513\u0518\u051f\u0528\u052f",
    "\u0533\u053f\u0546\u054d\u0557\u055f\u056a\u056e\u0573\u0578\u057a\u057f",
    "\u0592\u0596\u059b\u05a0\u05aa\u05ae\u05b7\u05c7\u05d0\u05d6\u05db\u05e1",
    "\u05e8\u05f4\u05f7\u0602\u060a\u0612\u061b\u0625\u0628\u062c\u0638\u063e",
    "\u0646\u064f\u0657\u0664\u0667\u066b\u0670\u0674\u067d\u0692\u069b\u069d",
    "\u06a2\u06b4\u06b9\u06c2\u06c6\u06cd\u06d2\u06d6\u06e2\u06f1\u06f6\u06f9",
    "\u06fd\u0702\u0709\u0714\u0716\u071f\u0727\u072f\u0737\u073f\u0745\u0751",
    "\u0755\u075f\u0767\u076b\u0771\u0778\u077d\u0784\u078c\u0793\u079d\u07aa",
    "\u07ae\u07b1\u07b5\u07b8\u07c0\u07c9\u07d2\u07db\u07ec\u07fe\u0805\u0810",
    "\u0818\u081b\u081f\u0824\u082e\u0832\u083d\u0840\u0847\u0850\u085b\u0868",
    "\u086f\u0879\u0883\u0886\u088a\u089b\u08a3\u08a7\u08af\u08d3\u08dc\u08e6",
    "\u08f2\u08f7\u0903\u0915\u091c\u0925\u092d\u0937\u093c\u0946\u0950\u0960",
    "\u096a\u0971\u0979\u0984\u098d\u0995\u099f\u09a4\u09b0\u09c3\u09cd\u09d5",
    "\u09e0\u09e9\u09f1\u09fb\u0a00\u0a0c\u0a1a\u0a21\u0a29\u0a2f\u0a34\u0a38",
    "\u0a3c\u0a43\u0a4f\u0a5b\u0a6a\u0a71\u0a77\u0a80\u0a85\u0a8b\u0a8e\u0a93",
    "\u0a99\u0aa6\u0aac\u0ab0\u0ab8\u0abd"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, "'\t'", "' '", 
                     null, "'Java:'", "'C#:'", "'Python2:'", "'Python3:'", 
                     "'JavaScript:'", "'Swift:'", "':'", "';'", null, "'..'", 
                     null, null, null, null, null, null, null, null, "'!'", 
                     "'&'", "'&&'", "'|'", "'||'", null, "'-'", "'*'", "'/'", 
                     "'\\'", "'%'", "'>'", "'>='", "'<'", "'<='", "'<>'", 
                     "'<:>'", "'='", "'!='", "'=='", "'~='", "'~'", "'<-'", 
                     "'->'", "'=>'", "'Boolean'", "'Character'", "'Text'", 
                     "'Integer'", "'Decimal'", "'Date'", "'Time'", "'DateTime'", 
                     "'Period'", "'Version'", "'Method:'", "'Code'", "'Document'", 
                     "'Blob'", "'Image'", "'Uuid'", "'Iterator'", "'Cursor'", 
                     "'Html'", "'Type'", "'abstract'", "'all'", "'always'", 
                     "'and'", "'any'", "'as'", null, "'attr'", "'attribute'", 
                     "'attributes'", "'bindings'", "'break'", "'by'", "'case'", 
                     "'catch'", "'category'", "'class'", "'close'", "'contains'", 
                     "'def'", "'default'", "'define'", "'delete'", null, 
                     "'do'", "'doing'", "'each'", "'else'", "'enum'", "'enumerated'", 
                     "'except'", "'execute'", "'expecting'", "'extends'", 
                     "'fetch'", "'filtered'", "'finally'", "'flush'", "'for'", 
                     "'from'", "'getter'", "'has'", "'if'", "'in'", "'index'", 
                     "'invoke:'", "'is'", "'matching'", "'method'", "'methods'", 
                     "'modulo'", "'mutable'", "'native'", "'None'", "'not'", 
                     null, "'null'", "'on'", "'one'", "'open'", "'operator'", 
                     "'or'", "'order'", "'otherwise'", "'pass'", "'raise'", 
                     "'read'", "'receiving'", "'resource'", "'return'", 
                     "'returning'", "'rows'", "'self'", "'setter'", "'singleton'", 
                     "'sorted'", "'storable'", "'store'", "'switch'", "'test'", 
                     "'then'", "'this'", "'throw'", "'to'", "'try'", "'verifying'", 
                     "'widget'", "'with'", "'when'", "'where'", "'while'", 
                     "'write'", null, null, "'MIN_INTEGER'", "'MAX_INTEGER'" ];

var symbolicNames = [ null, "INDENT", "DEDENT", "LF_TAB", "LF_MORE", "LF", 
                      "TAB", "WS", "COMMENT", "JAVA", "CSHARP", "PYTHON2", 
                      "PYTHON3", "JAVASCRIPT", "SWIFT", "COLON", "SEMI", 
                      "COMMA", "RANGE", "DOT", "LPAR", "RPAR", "LBRAK", 
                      "RBRAK", "LCURL", "RCURL", "QMARK", "XMARK", "AMP", 
                      "AMP2", "PIPE", "PIPE2", "PLUS", "MINUS", "STAR", 
                      "SLASH", "BSLASH", "PERCENT", "GT", "GTE", "LT", "LTE", 
                      "LTGT", "LTCOLONGT", "EQ", "XEQ", "EQ2", "TEQ", "TILDE", 
                      "LARROW", "RARROW", "EGT", "BOOLEAN", "CHARACTER", 
                      "TEXT", "INTEGER", "DECIMAL", "DATE", "TIME", "DATETIME", 
                      "PERIOD", "VERSION", "METHOD_COLON", "CODE", "DOCUMENT", 
                      "BLOB", "IMAGE", "UUID", "ITERATOR", "CURSOR", "HTML", 
                      "TYPE", "ABSTRACT", "ALL", "ALWAYS", "AND", "ANY", 
                      "AS", "ASC", "ATTR", "ATTRIBUTE", "ATTRIBUTES", "BINDINGS", 
                      "BREAK", "BY", "CASE", "CATCH", "CATEGORY", "CLASS", 
                      "CLOSE", "CONTAINS", "DEF", "DEFAULT", "DEFINE", "DELETE", 
                      "DESC", "DO", "DOING", "EACH", "ELSE", "ENUM", "ENUMERATED", 
                      "EXCEPT", "EXECUTE", "EXPECTING", "EXTENDS", "FETCH", 
                      "FILTERED", "FINALLY", "FLUSH", "FOR", "FROM", "GETTER", 
                      "HAS", "IF", "IN", "INDEX", "INVOKE_COLON", "IS", 
                      "MATCHING", "METHOD", "METHODS", "MODULO", "MUTABLE", 
                      "NATIVE", "NONE", "NOT", "NOTHING", "NULL", "ON", 
                      "ONE", "OPEN", "OPERATOR", "OR", "ORDER", "OTHERWISE", 
                      "PASS", "RAISE", "READ", "RECEIVING", "RESOURCE", 
                      "RETURN", "RETURNING", "ROWS", "SELF", "SETTER", "SINGLETON", 
                      "SORTED", "STORABLE", "STORE", "SWITCH", "TEST", "THEN", 
                      "THIS", "THROW", "TO", "TRY", "VERIFYING", "WIDGET", 
                      "WITH", "WHEN", "WHERE", "WHILE", "WRITE", "BOOLEAN_LITERAL", 
                      "CHAR_LITERAL", "MIN_INTEGER", "MAX_INTEGER", "SYMBOL_IDENTIFIER", 
                      "TYPE_IDENTIFIER", "VARIABLE_IDENTIFIER", "NATIVE_IDENTIFIER", 
                      "DOLLAR_IDENTIFIER", "ARONDBASE_IDENTIFIER", "TEXT_LITERAL", 
                      "UUID_LITERAL", "INTEGER_LITERAL", "HEXA_LITERAL", 
                      "DECIMAL_LITERAL", "DATETIME_LITERAL", "TIME_LITERAL", 
                      "DATE_LITERAL", "PERIOD_LITERAL", "VERSION_LITERAL" ];

var ruleNames =  [ "enum_category_declaration", "enum_native_declaration", 
                   "native_symbol", "category_symbol", "attribute_declaration", 
                   "index_clause", "concrete_widget_declaration", "native_widget_declaration", 
                   "concrete_category_declaration", "singleton_category_declaration", 
                   "derived_list", "operator_method_declaration", "setter_method_declaration", 
                   "native_setter_declaration", "getter_method_declaration", 
                   "native_getter_declaration", "native_category_declaration", 
                   "native_resource_declaration", "native_category_bindings", 
                   "native_category_binding_list", "abstract_method_declaration", 
                   "concrete_method_declaration", "native_method_declaration", 
                   "test_method_declaration", "assertion", "typed_argument", 
                   "statement", "flush_statement", "store_statement", "method_call_expression", 
                   "method_call_statement", "with_resource_statement", "with_singleton_statement", 
                   "switch_statement", "switch_case_statement", "for_each_statement", 
                   "do_while_statement", "while_statement", "if_statement", 
                   "else_if_statement_list", "raise_statement", "try_statement", 
                   "catch_statement", "break_statement", "return_statement", 
                   "expression", "closure_expression", "selectable_expression", 
                   "instance_expression", "mutable_instance_expression", 
                   "method_expression", "instance_selector", "blob_expression", 
                   "document_expression", "constructor_expression", "copy_from", 
                   "argument_assignment_list", "argument_assignment", "write_statement", 
                   "filtered_list_suffix", "fetch_expression", "fetch_statement", 
                   "sorted_expression", "assign_instance_statement", "child_instance", 
                   "assign_tuple_statement", "lfs", "lfp", "ws_plus", "indent", 
                   "dedent", "type_literal", "null_literal", "repl", "declaration_list", 
                   "declarations", "declaration", "annotation_constructor", 
                   "annotation_identifier", "annotation_argument", "annotation_argument_name", 
                   "annotation_argument_value", "resource_declaration", 
                   "enum_declaration", "native_symbol_list", "category_symbol_list", 
                   "symbol_list", "attribute_constraint", "list_literal", 
                   "set_literal", "expression_list", "range_literal", "typedef", 
                   "primary_type", "native_type", "category_type", "mutable_category_type", 
                   "code_type", "category_declaration", "widget_declaration", 
                   "type_identifier_list", "method_identifier", "identifier_or_keyword", 
                   "nospace_hyphen_identifier_or_keyword", "nospace_identifier_or_keyword", 
                   "identifier", "variable_identifier", "attribute_identifier", 
                   "type_identifier", "symbol_identifier", "argument_list", 
                   "argument", "operator_argument", "named_argument", "code_argument", 
                   "category_or_any_type", "any_type", "member_method_declaration_list", 
                   "member_method_declaration", "native_member_method_declaration_list", 
                   "native_member_method_declaration", "native_category_binding", 
                   "python_category_binding", "python_module", "javascript_category_binding", 
                   "javascript_module", "variable_identifier_list", "attribute_identifier_list", 
                   "method_declaration", "comment_statement", "native_statement_list", 
                   "native_statement", "python_native_statement", "javascript_native_statement", 
                   "statement_list", "assertion_list", "switch_case_statement_list", 
                   "catch_statement_list", "literal_collection", "atomic_literal", 
                   "literal_list_literal", "this_expression", "parenthesis_expression", 
                   "literal_expression", "collection_literal", "tuple_literal", 
                   "dict_literal", "document_literal", "expression_tuple", 
                   "dict_entry_list", "dict_entry", "dict_key", "slice_arguments", 
                   "assign_variable_statement", "assignable_instance", "is_expression", 
                   "arrow_expression", "arrow_prefix", "arrow_args", "sorted_key", 
                   "read_all_expression", "read_one_expression", "order_by_list", 
                   "order_by", "operator", "keyword", "new_token", "key_token", 
                   "module_token", "value_token", "symbols_token", "assign", 
                   "multiply", "divide", "idivide", "modulo", "javascript_statement", 
                   "javascript_expression", "javascript_primary_expression", 
                   "javascript_this_expression", "javascript_new_expression", 
                   "javascript_selector_expression", "javascript_method_expression", 
                   "javascript_arguments", "javascript_item_expression", 
                   "javascript_parenthesis_expression", "javascript_identifier_expression", 
                   "javascript_literal_expression", "javascript_identifier", 
                   "python_statement", "python_expression", "python_primary_expression", 
                   "python_self_expression", "python_selector_expression", 
                   "python_method_expression", "python_argument_list", "python_ordinal_argument_list", 
                   "python_named_argument_list", "python_parenthesis_expression", 
                   "python_identifier_expression", "python_literal_expression", 
                   "python_identifier", "java_statement", "java_expression", 
                   "java_primary_expression", "java_this_expression", "java_new_expression", 
                   "java_selector_expression", "java_method_expression", 
                   "java_arguments", "java_item_expression", "java_parenthesis_expression", 
                   "java_identifier_expression", "java_class_identifier_expression", 
                   "java_literal_expression", "java_identifier", "csharp_statement", 
                   "csharp_expression", "csharp_primary_expression", "csharp_this_expression", 
                   "csharp_new_expression", "csharp_selector_expression", 
                   "csharp_method_expression", "csharp_arguments", "csharp_item_expression", 
                   "csharp_parenthesis_expression", "csharp_identifier_expression", 
                   "csharp_literal_expression", "csharp_identifier", "jsx_expression", 
                   "jsx_element", "jsx_fragment", "jsx_fragment_start", 
                   "jsx_fragment_end", "jsx_self_closing", "jsx_opening", 
                   "jsx_closing", "jsx_element_name", "jsx_identifier", 
                   "jsx_attribute", "jsx_attribute_value", "jsx_children", 
                   "jsx_child", "jsx_text", "css_expression", "css_field", 
                   "css_identifier", "css_value", "css_text" ];

function MParser (input) {
	AbstractParser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

MParser.prototype = Object.create(AbstractParser.prototype);
MParser.prototype.constructor = MParser;

Object.defineProperty(MParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

MParser.EOF = antlr4.Token.EOF;
MParser.INDENT = 1;
MParser.DEDENT = 2;
MParser.LF_TAB = 3;
MParser.LF_MORE = 4;
MParser.LF = 5;
MParser.TAB = 6;
MParser.WS = 7;
MParser.COMMENT = 8;
MParser.JAVA = 9;
MParser.CSHARP = 10;
MParser.PYTHON2 = 11;
MParser.PYTHON3 = 12;
MParser.JAVASCRIPT = 13;
MParser.SWIFT = 14;
MParser.COLON = 15;
MParser.SEMI = 16;
MParser.COMMA = 17;
MParser.RANGE = 18;
MParser.DOT = 19;
MParser.LPAR = 20;
MParser.RPAR = 21;
MParser.LBRAK = 22;
MParser.RBRAK = 23;
MParser.LCURL = 24;
MParser.RCURL = 25;
MParser.QMARK = 26;
MParser.XMARK = 27;
MParser.AMP = 28;
MParser.AMP2 = 29;
MParser.PIPE = 30;
MParser.PIPE2 = 31;
MParser.PLUS = 32;
MParser.MINUS = 33;
MParser.STAR = 34;
MParser.SLASH = 35;
MParser.BSLASH = 36;
MParser.PERCENT = 37;
MParser.GT = 38;
MParser.GTE = 39;
MParser.LT = 40;
MParser.LTE = 41;
MParser.LTGT = 42;
MParser.LTCOLONGT = 43;
MParser.EQ = 44;
MParser.XEQ = 45;
MParser.EQ2 = 46;
MParser.TEQ = 47;
MParser.TILDE = 48;
MParser.LARROW = 49;
MParser.RARROW = 50;
MParser.EGT = 51;
MParser.BOOLEAN = 52;
MParser.CHARACTER = 53;
MParser.TEXT = 54;
MParser.INTEGER = 55;
MParser.DECIMAL = 56;
MParser.DATE = 57;
MParser.TIME = 58;
MParser.DATETIME = 59;
MParser.PERIOD = 60;
MParser.VERSION = 61;
MParser.METHOD_COLON = 62;
MParser.CODE = 63;
MParser.DOCUMENT = 64;
MParser.BLOB = 65;
MParser.IMAGE = 66;
MParser.UUID = 67;
MParser.ITERATOR = 68;
MParser.CURSOR = 69;
MParser.HTML = 70;
MParser.TYPE = 71;
MParser.ABSTRACT = 72;
MParser.ALL = 73;
MParser.ALWAYS = 74;
MParser.AND = 75;
MParser.ANY = 76;
MParser.AS = 77;
MParser.ASC = 78;
MParser.ATTR = 79;
MParser.ATTRIBUTE = 80;
MParser.ATTRIBUTES = 81;
MParser.BINDINGS = 82;
MParser.BREAK = 83;
MParser.BY = 84;
MParser.CASE = 85;
MParser.CATCH = 86;
MParser.CATEGORY = 87;
MParser.CLASS = 88;
MParser.CLOSE = 89;
MParser.CONTAINS = 90;
MParser.DEF = 91;
MParser.DEFAULT = 92;
MParser.DEFINE = 93;
MParser.DELETE = 94;
MParser.DESC = 95;
MParser.DO = 96;
MParser.DOING = 97;
MParser.EACH = 98;
MParser.ELSE = 99;
MParser.ENUM = 100;
MParser.ENUMERATED = 101;
MParser.EXCEPT = 102;
MParser.EXECUTE = 103;
MParser.EXPECTING = 104;
MParser.EXTENDS = 105;
MParser.FETCH = 106;
MParser.FILTERED = 107;
MParser.FINALLY = 108;
MParser.FLUSH = 109;
MParser.FOR = 110;
MParser.FROM = 111;
MParser.GETTER = 112;
MParser.HAS = 113;
MParser.IF = 114;
MParser.IN = 115;
MParser.INDEX = 116;
MParser.INVOKE_COLON = 117;
MParser.IS = 118;
MParser.MATCHING = 119;
MParser.METHOD = 120;
MParser.METHODS = 121;
MParser.MODULO = 122;
MParser.MUTABLE = 123;
MParser.NATIVE = 124;
MParser.NONE = 125;
MParser.NOT = 126;
MParser.NOTHING = 127;
MParser.NULL = 128;
MParser.ON = 129;
MParser.ONE = 130;
MParser.OPEN = 131;
MParser.OPERATOR = 132;
MParser.OR = 133;
MParser.ORDER = 134;
MParser.OTHERWISE = 135;
MParser.PASS = 136;
MParser.RAISE = 137;
MParser.READ = 138;
MParser.RECEIVING = 139;
MParser.RESOURCE = 140;
MParser.RETURN = 141;
MParser.RETURNING = 142;
MParser.ROWS = 143;
MParser.SELF = 144;
MParser.SETTER = 145;
MParser.SINGLETON = 146;
MParser.SORTED = 147;
MParser.STORABLE = 148;
MParser.STORE = 149;
MParser.SWITCH = 150;
MParser.TEST = 151;
MParser.THEN = 152;
MParser.THIS = 153;
MParser.THROW = 154;
MParser.TO = 155;
MParser.TRY = 156;
MParser.VERIFYING = 157;
MParser.WIDGET = 158;
MParser.WITH = 159;
MParser.WHEN = 160;
MParser.WHERE = 161;
MParser.WHILE = 162;
MParser.WRITE = 163;
MParser.BOOLEAN_LITERAL = 164;
MParser.CHAR_LITERAL = 165;
MParser.MIN_INTEGER = 166;
MParser.MAX_INTEGER = 167;
MParser.SYMBOL_IDENTIFIER = 168;
MParser.TYPE_IDENTIFIER = 169;
MParser.VARIABLE_IDENTIFIER = 170;
MParser.NATIVE_IDENTIFIER = 171;
MParser.DOLLAR_IDENTIFIER = 172;
MParser.ARONDBASE_IDENTIFIER = 173;
MParser.TEXT_LITERAL = 174;
MParser.UUID_LITERAL = 175;
MParser.INTEGER_LITERAL = 176;
MParser.HEXA_LITERAL = 177;
MParser.DECIMAL_LITERAL = 178;
MParser.DATETIME_LITERAL = 179;
MParser.TIME_LITERAL = 180;
MParser.DATE_LITERAL = 181;
MParser.PERIOD_LITERAL = 182;
MParser.VERSION_LITERAL = 183;

MParser.RULE_enum_category_declaration = 0;
MParser.RULE_enum_native_declaration = 1;
MParser.RULE_native_symbol = 2;
MParser.RULE_category_symbol = 3;
MParser.RULE_attribute_declaration = 4;
MParser.RULE_index_clause = 5;
MParser.RULE_concrete_widget_declaration = 6;
MParser.RULE_native_widget_declaration = 7;
MParser.RULE_concrete_category_declaration = 8;
MParser.RULE_singleton_category_declaration = 9;
MParser.RULE_derived_list = 10;
MParser.RULE_operator_method_declaration = 11;
MParser.RULE_setter_method_declaration = 12;
MParser.RULE_native_setter_declaration = 13;
MParser.RULE_getter_method_declaration = 14;
MParser.RULE_native_getter_declaration = 15;
MParser.RULE_native_category_declaration = 16;
MParser.RULE_native_resource_declaration = 17;
MParser.RULE_native_category_bindings = 18;
MParser.RULE_native_category_binding_list = 19;
MParser.RULE_abstract_method_declaration = 20;
MParser.RULE_concrete_method_declaration = 21;
MParser.RULE_native_method_declaration = 22;
MParser.RULE_test_method_declaration = 23;
MParser.RULE_assertion = 24;
MParser.RULE_typed_argument = 25;
MParser.RULE_statement = 26;
MParser.RULE_flush_statement = 27;
MParser.RULE_store_statement = 28;
MParser.RULE_method_call_expression = 29;
MParser.RULE_method_call_statement = 30;
MParser.RULE_with_resource_statement = 31;
MParser.RULE_with_singleton_statement = 32;
MParser.RULE_switch_statement = 33;
MParser.RULE_switch_case_statement = 34;
MParser.RULE_for_each_statement = 35;
MParser.RULE_do_while_statement = 36;
MParser.RULE_while_statement = 37;
MParser.RULE_if_statement = 38;
MParser.RULE_else_if_statement_list = 39;
MParser.RULE_raise_statement = 40;
MParser.RULE_try_statement = 41;
MParser.RULE_catch_statement = 42;
MParser.RULE_break_statement = 43;
MParser.RULE_return_statement = 44;
MParser.RULE_expression = 45;
MParser.RULE_closure_expression = 46;
MParser.RULE_selectable_expression = 47;
MParser.RULE_instance_expression = 48;
MParser.RULE_mutable_instance_expression = 49;
MParser.RULE_method_expression = 50;
MParser.RULE_instance_selector = 51;
MParser.RULE_blob_expression = 52;
MParser.RULE_document_expression = 53;
MParser.RULE_constructor_expression = 54;
MParser.RULE_copy_from = 55;
MParser.RULE_argument_assignment_list = 56;
MParser.RULE_argument_assignment = 57;
MParser.RULE_write_statement = 58;
MParser.RULE_filtered_list_suffix = 59;
MParser.RULE_fetch_expression = 60;
MParser.RULE_fetch_statement = 61;
MParser.RULE_sorted_expression = 62;
MParser.RULE_assign_instance_statement = 63;
MParser.RULE_child_instance = 64;
MParser.RULE_assign_tuple_statement = 65;
MParser.RULE_lfs = 66;
MParser.RULE_lfp = 67;
MParser.RULE_ws_plus = 68;
MParser.RULE_indent = 69;
MParser.RULE_dedent = 70;
MParser.RULE_type_literal = 71;
MParser.RULE_null_literal = 72;
MParser.RULE_repl = 73;
MParser.RULE_declaration_list = 74;
MParser.RULE_declarations = 75;
MParser.RULE_declaration = 76;
MParser.RULE_annotation_constructor = 77;
MParser.RULE_annotation_identifier = 78;
MParser.RULE_annotation_argument = 79;
MParser.RULE_annotation_argument_name = 80;
MParser.RULE_annotation_argument_value = 81;
MParser.RULE_resource_declaration = 82;
MParser.RULE_enum_declaration = 83;
MParser.RULE_native_symbol_list = 84;
MParser.RULE_category_symbol_list = 85;
MParser.RULE_symbol_list = 86;
MParser.RULE_attribute_constraint = 87;
MParser.RULE_list_literal = 88;
MParser.RULE_set_literal = 89;
MParser.RULE_expression_list = 90;
MParser.RULE_range_literal = 91;
MParser.RULE_typedef = 92;
MParser.RULE_primary_type = 93;
MParser.RULE_native_type = 94;
MParser.RULE_category_type = 95;
MParser.RULE_mutable_category_type = 96;
MParser.RULE_code_type = 97;
MParser.RULE_category_declaration = 98;
MParser.RULE_widget_declaration = 99;
MParser.RULE_type_identifier_list = 100;
MParser.RULE_method_identifier = 101;
MParser.RULE_identifier_or_keyword = 102;
MParser.RULE_nospace_hyphen_identifier_or_keyword = 103;
MParser.RULE_nospace_identifier_or_keyword = 104;
MParser.RULE_identifier = 105;
MParser.RULE_variable_identifier = 106;
MParser.RULE_attribute_identifier = 107;
MParser.RULE_type_identifier = 108;
MParser.RULE_symbol_identifier = 109;
MParser.RULE_argument_list = 110;
MParser.RULE_argument = 111;
MParser.RULE_operator_argument = 112;
MParser.RULE_named_argument = 113;
MParser.RULE_code_argument = 114;
MParser.RULE_category_or_any_type = 115;
MParser.RULE_any_type = 116;
MParser.RULE_member_method_declaration_list = 117;
MParser.RULE_member_method_declaration = 118;
MParser.RULE_native_member_method_declaration_list = 119;
MParser.RULE_native_member_method_declaration = 120;
MParser.RULE_native_category_binding = 121;
MParser.RULE_python_category_binding = 122;
MParser.RULE_python_module = 123;
MParser.RULE_javascript_category_binding = 124;
MParser.RULE_javascript_module = 125;
MParser.RULE_variable_identifier_list = 126;
MParser.RULE_attribute_identifier_list = 127;
MParser.RULE_method_declaration = 128;
MParser.RULE_comment_statement = 129;
MParser.RULE_native_statement_list = 130;
MParser.RULE_native_statement = 131;
MParser.RULE_python_native_statement = 132;
MParser.RULE_javascript_native_statement = 133;
MParser.RULE_statement_list = 134;
MParser.RULE_assertion_list = 135;
MParser.RULE_switch_case_statement_list = 136;
MParser.RULE_catch_statement_list = 137;
MParser.RULE_literal_collection = 138;
MParser.RULE_atomic_literal = 139;
MParser.RULE_literal_list_literal = 140;
MParser.RULE_this_expression = 141;
MParser.RULE_parenthesis_expression = 142;
MParser.RULE_literal_expression = 143;
MParser.RULE_collection_literal = 144;
MParser.RULE_tuple_literal = 145;
MParser.RULE_dict_literal = 146;
MParser.RULE_document_literal = 147;
MParser.RULE_expression_tuple = 148;
MParser.RULE_dict_entry_list = 149;
MParser.RULE_dict_entry = 150;
MParser.RULE_dict_key = 151;
MParser.RULE_slice_arguments = 152;
MParser.RULE_assign_variable_statement = 153;
MParser.RULE_assignable_instance = 154;
MParser.RULE_is_expression = 155;
MParser.RULE_arrow_expression = 156;
MParser.RULE_arrow_prefix = 157;
MParser.RULE_arrow_args = 158;
MParser.RULE_sorted_key = 159;
MParser.RULE_read_all_expression = 160;
MParser.RULE_read_one_expression = 161;
MParser.RULE_order_by_list = 162;
MParser.RULE_order_by = 163;
MParser.RULE_operator = 164;
MParser.RULE_keyword = 165;
MParser.RULE_new_token = 166;
MParser.RULE_key_token = 167;
MParser.RULE_module_token = 168;
MParser.RULE_value_token = 169;
MParser.RULE_symbols_token = 170;
MParser.RULE_assign = 171;
MParser.RULE_multiply = 172;
MParser.RULE_divide = 173;
MParser.RULE_idivide = 174;
MParser.RULE_modulo = 175;
MParser.RULE_javascript_statement = 176;
MParser.RULE_javascript_expression = 177;
MParser.RULE_javascript_primary_expression = 178;
MParser.RULE_javascript_this_expression = 179;
MParser.RULE_javascript_new_expression = 180;
MParser.RULE_javascript_selector_expression = 181;
MParser.RULE_javascript_method_expression = 182;
MParser.RULE_javascript_arguments = 183;
MParser.RULE_javascript_item_expression = 184;
MParser.RULE_javascript_parenthesis_expression = 185;
MParser.RULE_javascript_identifier_expression = 186;
MParser.RULE_javascript_literal_expression = 187;
MParser.RULE_javascript_identifier = 188;
MParser.RULE_python_statement = 189;
MParser.RULE_python_expression = 190;
MParser.RULE_python_primary_expression = 191;
MParser.RULE_python_self_expression = 192;
MParser.RULE_python_selector_expression = 193;
MParser.RULE_python_method_expression = 194;
MParser.RULE_python_argument_list = 195;
MParser.RULE_python_ordinal_argument_list = 196;
MParser.RULE_python_named_argument_list = 197;
MParser.RULE_python_parenthesis_expression = 198;
MParser.RULE_python_identifier_expression = 199;
MParser.RULE_python_literal_expression = 200;
MParser.RULE_python_identifier = 201;
MParser.RULE_java_statement = 202;
MParser.RULE_java_expression = 203;
MParser.RULE_java_primary_expression = 204;
MParser.RULE_java_this_expression = 205;
MParser.RULE_java_new_expression = 206;
MParser.RULE_java_selector_expression = 207;
MParser.RULE_java_method_expression = 208;
MParser.RULE_java_arguments = 209;
MParser.RULE_java_item_expression = 210;
MParser.RULE_java_parenthesis_expression = 211;
MParser.RULE_java_identifier_expression = 212;
MParser.RULE_java_class_identifier_expression = 213;
MParser.RULE_java_literal_expression = 214;
MParser.RULE_java_identifier = 215;
MParser.RULE_csharp_statement = 216;
MParser.RULE_csharp_expression = 217;
MParser.RULE_csharp_primary_expression = 218;
MParser.RULE_csharp_this_expression = 219;
MParser.RULE_csharp_new_expression = 220;
MParser.RULE_csharp_selector_expression = 221;
MParser.RULE_csharp_method_expression = 222;
MParser.RULE_csharp_arguments = 223;
MParser.RULE_csharp_item_expression = 224;
MParser.RULE_csharp_parenthesis_expression = 225;
MParser.RULE_csharp_identifier_expression = 226;
MParser.RULE_csharp_literal_expression = 227;
MParser.RULE_csharp_identifier = 228;
MParser.RULE_jsx_expression = 229;
MParser.RULE_jsx_element = 230;
MParser.RULE_jsx_fragment = 231;
MParser.RULE_jsx_fragment_start = 232;
MParser.RULE_jsx_fragment_end = 233;
MParser.RULE_jsx_self_closing = 234;
MParser.RULE_jsx_opening = 235;
MParser.RULE_jsx_closing = 236;
MParser.RULE_jsx_element_name = 237;
MParser.RULE_jsx_identifier = 238;
MParser.RULE_jsx_attribute = 239;
MParser.RULE_jsx_attribute_value = 240;
MParser.RULE_jsx_children = 241;
MParser.RULE_jsx_child = 242;
MParser.RULE_jsx_text = 243;
MParser.RULE_css_expression = 244;
MParser.RULE_css_field = 245;
MParser.RULE_css_identifier = 246;
MParser.RULE_css_value = 247;
MParser.RULE_css_text = 248;

function Enum_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_enum_category_declaration;
    this.name = null; // Type_identifierContext
    this.derived = null; // Type_identifierContext
    this.attrs = null; // Attribute_identifier_listContext
    this.symbols = null; // Category_symbol_listContext
    return this;
}

Enum_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_category_declarationContext.prototype.constructor = Enum_category_declarationContext;

Enum_category_declarationContext.prototype.ENUM = function() {
    return this.getToken(MParser.ENUM, 0);
};

Enum_category_declarationContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Enum_category_declarationContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Enum_category_declarationContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Enum_category_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Enum_category_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Enum_category_declarationContext.prototype.type_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_identifierContext);
    } else {
        return this.getTypedRuleContext(Type_identifierContext,i);
    }
};

Enum_category_declarationContext.prototype.category_symbol_list = function() {
    return this.getTypedRuleContext(Category_symbol_listContext,0);
};

Enum_category_declarationContext.prototype.attribute_identifier_list = function() {
    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
};

Enum_category_declarationContext.prototype.COMMA = function() {
    return this.getToken(MParser.COMMA, 0);
};

Enum_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterEnum_category_declaration(this);
	}
};

Enum_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitEnum_category_declaration(this);
	}
};




MParser.Enum_category_declarationContext = Enum_category_declarationContext;

MParser.prototype.enum_category_declaration = function() {

    var localctx = new Enum_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, MParser.RULE_enum_category_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 498;
        this.match(MParser.ENUM);
        this.state = 499;
        localctx.name = this.type_identifier();
        this.state = 500;
        this.match(MParser.LPAR);
        this.state = 507;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.TYPE_IDENTIFIER:
            this.state = 501;
            localctx.derived = this.type_identifier();
            this.state = 504;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MParser.COMMA) {
                this.state = 502;
                this.match(MParser.COMMA);
                this.state = 503;
                localctx.attrs = this.attribute_identifier_list();
            }

            break;
        case MParser.STORABLE:
        case MParser.VARIABLE_IDENTIFIER:
            this.state = 506;
            localctx.attrs = this.attribute_identifier_list();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 509;
        this.match(MParser.RPAR);
        this.state = 510;
        this.match(MParser.COLON);
        this.state = 511;
        this.indent();
        this.state = 512;
        localctx.symbols = this.category_symbol_list();
        this.state = 513;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enum_native_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_enum_native_declaration;
    this.name = null; // Type_identifierContext
    this.typ = null; // Native_typeContext
    this.symbols = null; // Native_symbol_listContext
    return this;
}

Enum_native_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_native_declarationContext.prototype.constructor = Enum_native_declarationContext;

Enum_native_declarationContext.prototype.ENUM = function() {
    return this.getToken(MParser.ENUM, 0);
};

Enum_native_declarationContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Enum_native_declarationContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Enum_native_declarationContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Enum_native_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Enum_native_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Enum_native_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Enum_native_declarationContext.prototype.native_type = function() {
    return this.getTypedRuleContext(Native_typeContext,0);
};

Enum_native_declarationContext.prototype.native_symbol_list = function() {
    return this.getTypedRuleContext(Native_symbol_listContext,0);
};

Enum_native_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterEnum_native_declaration(this);
	}
};

Enum_native_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitEnum_native_declaration(this);
	}
};




MParser.Enum_native_declarationContext = Enum_native_declarationContext;

MParser.prototype.enum_native_declaration = function() {

    var localctx = new Enum_native_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, MParser.RULE_enum_native_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 515;
        this.match(MParser.ENUM);
        this.state = 516;
        localctx.name = this.type_identifier();
        this.state = 517;
        this.match(MParser.LPAR);
        this.state = 518;
        localctx.typ = this.native_type();
        this.state = 519;
        this.match(MParser.RPAR);
        this.state = 520;
        this.match(MParser.COLON);
        this.state = 521;
        this.indent();
        this.state = 522;
        localctx.symbols = this.native_symbol_list();
        this.state = 523;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_symbolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_native_symbol;
    this.name = null; // Symbol_identifierContext
    this.exp = null; // ExpressionContext
    return this;
}

Native_symbolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_symbolContext.prototype.constructor = Native_symbolContext;

Native_symbolContext.prototype.EQ = function() {
    return this.getToken(MParser.EQ, 0);
};

Native_symbolContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};

Native_symbolContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Native_symbolContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNative_symbol(this);
	}
};

Native_symbolContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNative_symbol(this);
	}
};




MParser.Native_symbolContext = Native_symbolContext;

MParser.prototype.native_symbol = function() {

    var localctx = new Native_symbolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, MParser.RULE_native_symbol);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 525;
        localctx.name = this.symbol_identifier();
        this.state = 526;
        this.match(MParser.EQ);
        this.state = 527;
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_symbolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_category_symbol;
    this.name = null; // Symbol_identifierContext
    this.args = null; // Argument_assignment_listContext
    return this;
}

Category_symbolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_symbolContext.prototype.constructor = Category_symbolContext;

Category_symbolContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Category_symbolContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Category_symbolContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};

Category_symbolContext.prototype.argument_assignment_list = function() {
    return this.getTypedRuleContext(Argument_assignment_listContext,0);
};

Category_symbolContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCategory_symbol(this);
	}
};

Category_symbolContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCategory_symbol(this);
	}
};




MParser.Category_symbolContext = Category_symbolContext;

MParser.prototype.category_symbol = function() {

    var localctx = new Category_symbolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, MParser.RULE_category_symbol);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 529;
        localctx.name = this.symbol_identifier();
        this.state = 530;
        this.match(MParser.LPAR);
        this.state = 532;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MParser.LPAR - 20)) | (1 << (MParser.LBRAK - 20)) | (1 << (MParser.LCURL - 20)) | (1 << (MParser.MINUS - 20)) | (1 << (MParser.LT - 20)) | (1 << (MParser.LTGT - 20)) | (1 << (MParser.LTCOLONGT - 20)))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.CODE - 52)) | (1 << (MParser.DOCUMENT - 52)) | (1 << (MParser.BLOB - 52)) | (1 << (MParser.IMAGE - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.ITERATOR - 52)) | (1 << (MParser.CURSOR - 52)) | (1 << (MParser.HTML - 52)) | (1 << (MParser.ANY - 52)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (MParser.EXECUTE - 103)) | (1 << (MParser.FETCH - 103)) | (1 << (MParser.MUTABLE - 103)) | (1 << (MParser.NONE - 103)) | (1 << (MParser.NOT - 103)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (MParser.READ - 138)) | (1 << (MParser.SELF - 138)) | (1 << (MParser.SORTED - 138)) | (1 << (MParser.THIS - 138)) | (1 << (MParser.BOOLEAN_LITERAL - 138)) | (1 << (MParser.CHAR_LITERAL - 138)) | (1 << (MParser.MIN_INTEGER - 138)) | (1 << (MParser.MAX_INTEGER - 138)) | (1 << (MParser.SYMBOL_IDENTIFIER - 138)) | (1 << (MParser.TYPE_IDENTIFIER - 138)))) !== 0) || ((((_la - 170)) & ~0x1f) == 0 && ((1 << (_la - 170)) & ((1 << (MParser.VARIABLE_IDENTIFIER - 170)) | (1 << (MParser.TEXT_LITERAL - 170)) | (1 << (MParser.UUID_LITERAL - 170)) | (1 << (MParser.INTEGER_LITERAL - 170)) | (1 << (MParser.HEXA_LITERAL - 170)) | (1 << (MParser.DECIMAL_LITERAL - 170)) | (1 << (MParser.DATETIME_LITERAL - 170)) | (1 << (MParser.TIME_LITERAL - 170)) | (1 << (MParser.DATE_LITERAL - 170)) | (1 << (MParser.PERIOD_LITERAL - 170)) | (1 << (MParser.VERSION_LITERAL - 170)))) !== 0)) {
            this.state = 531;
            localctx.args = this.argument_assignment_list(0);
        }

        this.state = 534;
        this.match(MParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_attribute_declaration;
    this.name = null; // Attribute_identifierContext
    this.typ = null; // TypedefContext
    this.match = null; // Attribute_constraintContext
    this.indices = null; // Index_clauseContext
    return this;
}

Attribute_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_declarationContext.prototype.constructor = Attribute_declarationContext;

Attribute_declarationContext.prototype.ATTR = function() {
    return this.getToken(MParser.ATTR, 0);
};

Attribute_declarationContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Attribute_declarationContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Attribute_declarationContext.prototype.attribute_identifier = function() {
    return this.getTypedRuleContext(Attribute_identifierContext,0);
};

Attribute_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Attribute_declarationContext.prototype.STORABLE = function() {
    return this.getToken(MParser.STORABLE, 0);
};

Attribute_declarationContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Attribute_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Attribute_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Attribute_declarationContext.prototype.PASS = function() {
    return this.getToken(MParser.PASS, 0);
};

Attribute_declarationContext.prototype.attribute_constraint = function() {
    return this.getTypedRuleContext(Attribute_constraintContext,0);
};

Attribute_declarationContext.prototype.index_clause = function() {
    return this.getTypedRuleContext(Index_clauseContext,0);
};

Attribute_declarationContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

Attribute_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAttribute_declaration(this);
	}
};

Attribute_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAttribute_declaration(this);
	}
};




MParser.Attribute_declarationContext = Attribute_declarationContext;

MParser.prototype.attribute_declaration = function() {

    var localctx = new Attribute_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, MParser.RULE_attribute_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 537;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.STORABLE) {
            this.state = 536;
            this.match(MParser.STORABLE);
        }

        this.state = 539;
        this.match(MParser.ATTR);
        this.state = 540;
        localctx.name = this.attribute_identifier();
        this.state = 541;
        this.match(MParser.LPAR);
        this.state = 542;
        localctx.typ = this.typedef(0);
        this.state = 543;
        this.match(MParser.RPAR);
        this.state = 565;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.COLON) {
            this.state = 544;
            this.match(MParser.COLON);
            this.state = 545;
            this.indent();
            this.state = 561;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MParser.PASS:
                this.state = 546;
                this.match(MParser.PASS);
                break;
            case MParser.IN:
            case MParser.INDEX:
            case MParser.MATCHING:
                this.state = 559;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case MParser.IN:
                case MParser.MATCHING:
                    this.state = 547;
                    localctx.match = this.attribute_constraint();
                    this.state = 551;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
                    if(la_===1) {
                        this.state = 548;
                        this.lfp();
                        this.state = 549;
                        localctx.indices = this.index_clause();

                    }
                    break;
                case MParser.INDEX:
                    this.state = 553;
                    localctx.indices = this.index_clause();
                    this.state = 557;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
                    if(la_===1) {
                        this.state = 554;
                        this.lfp();
                        this.state = 555;
                        localctx.match = this.attribute_constraint();

                    }
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 563;
            this.dedent();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Index_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_index_clause;
    this.indices = null; // Variable_identifier_listContext
    return this;
}

Index_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Index_clauseContext.prototype.constructor = Index_clauseContext;

Index_clauseContext.prototype.INDEX = function() {
    return this.getToken(MParser.INDEX, 0);
};

Index_clauseContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Index_clauseContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Index_clauseContext.prototype.variable_identifier_list = function() {
    return this.getTypedRuleContext(Variable_identifier_listContext,0);
};

Index_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterIndex_clause(this);
	}
};

Index_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitIndex_clause(this);
	}
};




MParser.Index_clauseContext = Index_clauseContext;

MParser.prototype.index_clause = function() {

    var localctx = new Index_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, MParser.RULE_index_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 567;
        this.match(MParser.INDEX);
        this.state = 568;
        this.match(MParser.LPAR);
        this.state = 570;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.VARIABLE_IDENTIFIER) {
            this.state = 569;
            localctx.indices = this.variable_identifier_list();
        }

        this.state = 572;
        this.match(MParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Concrete_widget_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_concrete_widget_declaration;
    this.name = null; // Type_identifierContext
    this.derived = null; // Type_identifierContext
    this.methods = null; // Member_method_declaration_listContext
    return this;
}

Concrete_widget_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concrete_widget_declarationContext.prototype.constructor = Concrete_widget_declarationContext;

Concrete_widget_declarationContext.prototype.WIDGET = function() {
    return this.getToken(MParser.WIDGET, 0);
};

Concrete_widget_declarationContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Concrete_widget_declarationContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Concrete_widget_declarationContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Concrete_widget_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Concrete_widget_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Concrete_widget_declarationContext.prototype.type_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_identifierContext);
    } else {
        return this.getTypedRuleContext(Type_identifierContext,i);
    }
};

Concrete_widget_declarationContext.prototype.PASS = function() {
    return this.getToken(MParser.PASS, 0);
};

Concrete_widget_declarationContext.prototype.member_method_declaration_list = function() {
    return this.getTypedRuleContext(Member_method_declaration_listContext,0);
};

Concrete_widget_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterConcrete_widget_declaration(this);
	}
};

Concrete_widget_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitConcrete_widget_declaration(this);
	}
};




MParser.Concrete_widget_declarationContext = Concrete_widget_declarationContext;

MParser.prototype.concrete_widget_declaration = function() {

    var localctx = new Concrete_widget_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, MParser.RULE_concrete_widget_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 574;
        this.match(MParser.WIDGET);
        this.state = 575;
        localctx.name = this.type_identifier();
        this.state = 576;
        this.match(MParser.LPAR);
        this.state = 578;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.TYPE_IDENTIFIER) {
            this.state = 577;
            localctx.derived = this.type_identifier();
        }

        this.state = 580;
        this.match(MParser.RPAR);
        this.state = 581;
        this.match(MParser.COLON);
        this.state = 582;
        this.indent();
        this.state = 585;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.COMMENT:
        case MParser.ABSTRACT:
        case MParser.DEF:
        case MParser.ARONDBASE_IDENTIFIER:
            this.state = 583;
            localctx.methods = this.member_method_declaration_list();
            break;
        case MParser.PASS:
            this.state = 584;
            this.match(MParser.PASS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 587;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_widget_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_native_widget_declaration;
    this.name = null; // Type_identifierContext
    this.bindings = null; // Native_category_bindingsContext
    this.methods = null; // Native_member_method_declaration_listContext
    return this;
}

Native_widget_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_widget_declarationContext.prototype.constructor = Native_widget_declarationContext;

Native_widget_declarationContext.prototype.NATIVE = function() {
    return this.getToken(MParser.NATIVE, 0);
};

Native_widget_declarationContext.prototype.WIDGET = function() {
    return this.getToken(MParser.WIDGET, 0);
};

Native_widget_declarationContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Native_widget_declarationContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Native_widget_declarationContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Native_widget_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Native_widget_declarationContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

Native_widget_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Native_widget_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Native_widget_declarationContext.prototype.native_category_bindings = function() {
    return this.getTypedRuleContext(Native_category_bindingsContext,0);
};

Native_widget_declarationContext.prototype.native_member_method_declaration_list = function() {
    return this.getTypedRuleContext(Native_member_method_declaration_listContext,0);
};

Native_widget_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNative_widget_declaration(this);
	}
};

Native_widget_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNative_widget_declaration(this);
	}
};




MParser.Native_widget_declarationContext = Native_widget_declarationContext;

MParser.prototype.native_widget_declaration = function() {

    var localctx = new Native_widget_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, MParser.RULE_native_widget_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 589;
        this.match(MParser.NATIVE);
        this.state = 590;
        this.match(MParser.WIDGET);
        this.state = 591;
        localctx.name = this.type_identifier();
        this.state = 592;
        this.match(MParser.LPAR);
        this.state = 593;
        this.match(MParser.RPAR);
        this.state = 594;
        this.match(MParser.COLON);
        this.state = 595;
        this.indent();
        this.state = 596;
        localctx.bindings = this.native_category_bindings();
        this.state = 597;
        this.lfp();
        this.state = 598;
        localctx.methods = this.native_member_method_declaration_list();
        this.state = 599;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Concrete_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_concrete_category_declaration;
    this.name = null; // Type_identifierContext
    this.derived = null; // Derived_listContext
    this.attrs = null; // Attribute_identifier_listContext
    this.methods = null; // Member_method_declaration_listContext
    return this;
}

Concrete_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concrete_category_declarationContext.prototype.constructor = Concrete_category_declarationContext;

Concrete_category_declarationContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Concrete_category_declarationContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Concrete_category_declarationContext.prototype.CLASS = function() {
    return this.getToken(MParser.CLASS, 0);
};

Concrete_category_declarationContext.prototype.CATEGORY = function() {
    return this.getToken(MParser.CATEGORY, 0);
};

Concrete_category_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Concrete_category_declarationContext.prototype.COMMA = function() {
    return this.getToken(MParser.COMMA, 0);
};

Concrete_category_declarationContext.prototype.STORABLE = function() {
    return this.getToken(MParser.STORABLE, 0);
};

Concrete_category_declarationContext.prototype.derived_list = function() {
    return this.getTypedRuleContext(Derived_listContext,0);
};

Concrete_category_declarationContext.prototype.attribute_identifier_list = function() {
    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
};

Concrete_category_declarationContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Concrete_category_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Concrete_category_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Concrete_category_declarationContext.prototype.PASS = function() {
    return this.getToken(MParser.PASS, 0);
};

Concrete_category_declarationContext.prototype.member_method_declaration_list = function() {
    return this.getTypedRuleContext(Member_method_declaration_listContext,0);
};

Concrete_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterConcrete_category_declaration(this);
	}
};

Concrete_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitConcrete_category_declaration(this);
	}
};




MParser.Concrete_category_declarationContext = Concrete_category_declarationContext;

MParser.prototype.concrete_category_declaration = function() {

    var localctx = new Concrete_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, MParser.RULE_concrete_category_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 602;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.STORABLE) {
            this.state = 601;
            this.match(MParser.STORABLE);
        }

        this.state = 604;
        _la = this._input.LA(1);
        if(!(_la===MParser.CATEGORY || _la===MParser.CLASS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 605;
        localctx.name = this.type_identifier();
        this.state = 606;
        this.match(MParser.LPAR);
        this.state = 613;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        switch(la_) {
        case 1:
            this.state = 607;
            localctx.derived = this.derived_list();
            break;

        case 2:
            this.state = 608;
            localctx.attrs = this.attribute_identifier_list();
            break;

        case 3:
            this.state = 609;
            localctx.derived = this.derived_list();
            this.state = 610;
            this.match(MParser.COMMA);
            this.state = 611;
            localctx.attrs = this.attribute_identifier_list();
            break;

        }
        this.state = 615;
        this.match(MParser.RPAR);
        this.state = 624;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.COLON) {
            this.state = 616;
            this.match(MParser.COLON);
            this.state = 617;
            this.indent();
            this.state = 620;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MParser.COMMENT:
            case MParser.ABSTRACT:
            case MParser.DEF:
            case MParser.ARONDBASE_IDENTIFIER:
                this.state = 618;
                localctx.methods = this.member_method_declaration_list();
                break;
            case MParser.PASS:
                this.state = 619;
                this.match(MParser.PASS);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 622;
            this.dedent();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Singleton_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_singleton_category_declaration;
    this.name = null; // Type_identifierContext
    this.attrs = null; // Attribute_identifier_listContext
    this.methods = null; // Member_method_declaration_listContext
    return this;
}

Singleton_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Singleton_category_declarationContext.prototype.constructor = Singleton_category_declarationContext;

Singleton_category_declarationContext.prototype.SINGLETON = function() {
    return this.getToken(MParser.SINGLETON, 0);
};

Singleton_category_declarationContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Singleton_category_declarationContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Singleton_category_declarationContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Singleton_category_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Singleton_category_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Singleton_category_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Singleton_category_declarationContext.prototype.attribute_identifier_list = function() {
    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
};

Singleton_category_declarationContext.prototype.PASS = function() {
    return this.getToken(MParser.PASS, 0);
};

Singleton_category_declarationContext.prototype.member_method_declaration_list = function() {
    return this.getTypedRuleContext(Member_method_declaration_listContext,0);
};

Singleton_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSingleton_category_declaration(this);
	}
};

Singleton_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSingleton_category_declaration(this);
	}
};




MParser.Singleton_category_declarationContext = Singleton_category_declarationContext;

MParser.prototype.singleton_category_declaration = function() {

    var localctx = new Singleton_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, MParser.RULE_singleton_category_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 626;
        this.match(MParser.SINGLETON);
        this.state = 627;
        localctx.name = this.type_identifier();
        this.state = 628;
        this.match(MParser.LPAR);
        this.state = 629;
        localctx.attrs = this.attribute_identifier_list();
        this.state = 630;
        this.match(MParser.RPAR);
        this.state = 631;
        this.match(MParser.COLON);
        this.state = 632;
        this.indent();
        this.state = 635;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.COMMENT:
        case MParser.ABSTRACT:
        case MParser.DEF:
        case MParser.ARONDBASE_IDENTIFIER:
            this.state = 633;
            localctx.methods = this.member_method_declaration_list();
            break;
        case MParser.PASS:
            this.state = 634;
            this.match(MParser.PASS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 637;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Derived_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_derived_list;
    this.items = null; // Type_identifier_listContext
    return this;
}

Derived_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Derived_listContext.prototype.constructor = Derived_listContext;

Derived_listContext.prototype.type_identifier_list = function() {
    return this.getTypedRuleContext(Type_identifier_listContext,0);
};

Derived_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDerived_list(this);
	}
};

Derived_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDerived_list(this);
	}
};




MParser.Derived_listContext = Derived_listContext;

MParser.prototype.derived_list = function() {

    var localctx = new Derived_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, MParser.RULE_derived_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 639;
        localctx.items = this.type_identifier_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Operator_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_operator_method_declaration;
    this.op = null; // OperatorContext
    this.arg = null; // Operator_argumentContext
    this.typ = null; // TypedefContext
    this.stmts = null; // Statement_listContext
    return this;
}

Operator_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operator_method_declarationContext.prototype.constructor = Operator_method_declarationContext;

Operator_method_declarationContext.prototype.DEF = function() {
    return this.getToken(MParser.DEF, 0);
};

Operator_method_declarationContext.prototype.OPERATOR = function() {
    return this.getToken(MParser.OPERATOR, 0);
};

Operator_method_declarationContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Operator_method_declarationContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Operator_method_declarationContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Operator_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Operator_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Operator_method_declarationContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Operator_method_declarationContext.prototype.operator_argument = function() {
    return this.getTypedRuleContext(Operator_argumentContext,0);
};

Operator_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Operator_method_declarationContext.prototype.RARROW = function() {
    return this.getToken(MParser.RARROW, 0);
};

Operator_method_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Operator_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterOperator_method_declaration(this);
	}
};

Operator_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitOperator_method_declaration(this);
	}
};




MParser.Operator_method_declarationContext = Operator_method_declarationContext;

MParser.prototype.operator_method_declaration = function() {

    var localctx = new Operator_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, MParser.RULE_operator_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 641;
        this.match(MParser.DEF);
        this.state = 642;
        this.match(MParser.OPERATOR);
        this.state = 643;
        localctx.op = this.operator();
        this.state = 644;
        this.match(MParser.LPAR);
        this.state = 645;
        localctx.arg = this.operator_argument();
        this.state = 646;
        this.match(MParser.RPAR);
        this.state = 649;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.RARROW) {
            this.state = 647;
            this.match(MParser.RARROW);
            this.state = 648;
            localctx.typ = this.typedef(0);
        }

        this.state = 651;
        this.match(MParser.COLON);
        this.state = 652;
        this.indent();
        this.state = 653;
        localctx.stmts = this.statement_list();
        this.state = 654;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Setter_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_setter_method_declaration;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Statement_listContext
    return this;
}

Setter_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Setter_method_declarationContext.prototype.constructor = Setter_method_declarationContext;

Setter_method_declarationContext.prototype.DEF = function() {
    return this.getToken(MParser.DEF, 0);
};

Setter_method_declarationContext.prototype.SETTER = function() {
    return this.getToken(MParser.SETTER, 0);
};

Setter_method_declarationContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Setter_method_declarationContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Setter_method_declarationContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Setter_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Setter_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Setter_method_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Setter_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Setter_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSetter_method_declaration(this);
	}
};

Setter_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSetter_method_declaration(this);
	}
};




MParser.Setter_method_declarationContext = Setter_method_declarationContext;

MParser.prototype.setter_method_declaration = function() {

    var localctx = new Setter_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, MParser.RULE_setter_method_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 656;
        this.match(MParser.DEF);
        this.state = 657;
        localctx.name = this.variable_identifier();
        this.state = 658;
        this.match(MParser.SETTER);
        this.state = 659;
        this.match(MParser.LPAR);
        this.state = 660;
        this.match(MParser.RPAR);
        this.state = 661;
        this.match(MParser.COLON);
        this.state = 662;
        this.indent();
        this.state = 663;
        localctx.stmts = this.statement_list();
        this.state = 664;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_setter_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_native_setter_declaration;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Native_statement_listContext
    return this;
}

Native_setter_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_setter_declarationContext.prototype.constructor = Native_setter_declarationContext;

Native_setter_declarationContext.prototype.DEF = function() {
    return this.getToken(MParser.DEF, 0);
};

Native_setter_declarationContext.prototype.SETTER = function() {
    return this.getToken(MParser.SETTER, 0);
};

Native_setter_declarationContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Native_setter_declarationContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Native_setter_declarationContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Native_setter_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Native_setter_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Native_setter_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Native_setter_declarationContext.prototype.native_statement_list = function() {
    return this.getTypedRuleContext(Native_statement_listContext,0);
};

Native_setter_declarationContext.prototype.NATIVE = function() {
    return this.getToken(MParser.NATIVE, 0);
};

Native_setter_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNative_setter_declaration(this);
	}
};

Native_setter_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNative_setter_declaration(this);
	}
};




MParser.Native_setter_declarationContext = Native_setter_declarationContext;

MParser.prototype.native_setter_declaration = function() {

    var localctx = new Native_setter_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, MParser.RULE_native_setter_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 666;
        this.match(MParser.DEF);
        this.state = 667;
        localctx.name = this.variable_identifier();
        this.state = 669;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.NATIVE) {
            this.state = 668;
            this.match(MParser.NATIVE);
        }

        this.state = 671;
        this.match(MParser.SETTER);
        this.state = 672;
        this.match(MParser.LPAR);
        this.state = 673;
        this.match(MParser.RPAR);
        this.state = 674;
        this.match(MParser.COLON);
        this.state = 675;
        this.indent();
        this.state = 676;
        localctx.stmts = this.native_statement_list();
        this.state = 677;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Getter_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_getter_method_declaration;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Statement_listContext
    return this;
}

Getter_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Getter_method_declarationContext.prototype.constructor = Getter_method_declarationContext;

Getter_method_declarationContext.prototype.DEF = function() {
    return this.getToken(MParser.DEF, 0);
};

Getter_method_declarationContext.prototype.GETTER = function() {
    return this.getToken(MParser.GETTER, 0);
};

Getter_method_declarationContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Getter_method_declarationContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Getter_method_declarationContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Getter_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Getter_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Getter_method_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Getter_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Getter_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterGetter_method_declaration(this);
	}
};

Getter_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitGetter_method_declaration(this);
	}
};




MParser.Getter_method_declarationContext = Getter_method_declarationContext;

MParser.prototype.getter_method_declaration = function() {

    var localctx = new Getter_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, MParser.RULE_getter_method_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 679;
        this.match(MParser.DEF);
        this.state = 680;
        localctx.name = this.variable_identifier();
        this.state = 681;
        this.match(MParser.GETTER);
        this.state = 682;
        this.match(MParser.LPAR);
        this.state = 683;
        this.match(MParser.RPAR);
        this.state = 684;
        this.match(MParser.COLON);
        this.state = 685;
        this.indent();
        this.state = 686;
        localctx.stmts = this.statement_list();
        this.state = 687;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_getter_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_native_getter_declaration;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Native_statement_listContext
    return this;
}

Native_getter_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_getter_declarationContext.prototype.constructor = Native_getter_declarationContext;

Native_getter_declarationContext.prototype.DEF = function() {
    return this.getToken(MParser.DEF, 0);
};

Native_getter_declarationContext.prototype.GETTER = function() {
    return this.getToken(MParser.GETTER, 0);
};

Native_getter_declarationContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Native_getter_declarationContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Native_getter_declarationContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Native_getter_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Native_getter_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Native_getter_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Native_getter_declarationContext.prototype.native_statement_list = function() {
    return this.getTypedRuleContext(Native_statement_listContext,0);
};

Native_getter_declarationContext.prototype.NATIVE = function() {
    return this.getToken(MParser.NATIVE, 0);
};

Native_getter_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNative_getter_declaration(this);
	}
};

Native_getter_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNative_getter_declaration(this);
	}
};




MParser.Native_getter_declarationContext = Native_getter_declarationContext;

MParser.prototype.native_getter_declaration = function() {

    var localctx = new Native_getter_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, MParser.RULE_native_getter_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 689;
        this.match(MParser.DEF);
        this.state = 690;
        localctx.name = this.variable_identifier();
        this.state = 692;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.NATIVE) {
            this.state = 691;
            this.match(MParser.NATIVE);
        }

        this.state = 694;
        this.match(MParser.GETTER);
        this.state = 695;
        this.match(MParser.LPAR);
        this.state = 696;
        this.match(MParser.RPAR);
        this.state = 697;
        this.match(MParser.COLON);
        this.state = 698;
        this.indent();
        this.state = 699;
        localctx.stmts = this.native_statement_list();
        this.state = 700;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_native_category_declaration;
    this.name = null; // Type_identifierContext
    this.attrs = null; // Attribute_identifier_listContext
    this.bindings = null; // Native_category_bindingsContext
    this.methods = null; // Native_member_method_declaration_listContext
    return this;
}

Native_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_declarationContext.prototype.constructor = Native_category_declarationContext;

Native_category_declarationContext.prototype.NATIVE = function() {
    return this.getToken(MParser.NATIVE, 0);
};

Native_category_declarationContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Native_category_declarationContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Native_category_declarationContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Native_category_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Native_category_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Native_category_declarationContext.prototype.CLASS = function() {
    return this.getToken(MParser.CLASS, 0);
};

Native_category_declarationContext.prototype.CATEGORY = function() {
    return this.getToken(MParser.CATEGORY, 0);
};

Native_category_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Native_category_declarationContext.prototype.native_category_bindings = function() {
    return this.getTypedRuleContext(Native_category_bindingsContext,0);
};

Native_category_declarationContext.prototype.STORABLE = function() {
    return this.getToken(MParser.STORABLE, 0);
};

Native_category_declarationContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

Native_category_declarationContext.prototype.attribute_identifier_list = function() {
    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
};

Native_category_declarationContext.prototype.native_member_method_declaration_list = function() {
    return this.getTypedRuleContext(Native_member_method_declaration_listContext,0);
};

Native_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNative_category_declaration(this);
	}
};

Native_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNative_category_declaration(this);
	}
};




MParser.Native_category_declarationContext = Native_category_declarationContext;

MParser.prototype.native_category_declaration = function() {

    var localctx = new Native_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, MParser.RULE_native_category_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 703;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.STORABLE) {
            this.state = 702;
            this.match(MParser.STORABLE);
        }

        this.state = 705;
        this.match(MParser.NATIVE);
        this.state = 706;
        _la = this._input.LA(1);
        if(!(_la===MParser.CATEGORY || _la===MParser.CLASS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 707;
        localctx.name = this.type_identifier();
        this.state = 708;
        this.match(MParser.LPAR);
        this.state = 710;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.STORABLE || _la===MParser.VARIABLE_IDENTIFIER) {
            this.state = 709;
            localctx.attrs = this.attribute_identifier_list();
        }

        this.state = 712;
        this.match(MParser.RPAR);
        this.state = 713;
        this.match(MParser.COLON);
        this.state = 714;
        this.indent();
        this.state = 715;
        localctx.bindings = this.native_category_bindings();
        this.state = 719;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        if(la_===1) {
            this.state = 716;
            this.lfp();
            this.state = 717;
            localctx.methods = this.native_member_method_declaration_list();

        }
        this.state = 721;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_resource_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_native_resource_declaration;
    this.name = null; // Type_identifierContext
    this.attrs = null; // Attribute_identifier_listContext
    this.bindings = null; // Native_category_bindingsContext
    this.methods = null; // Native_member_method_declaration_listContext
    return this;
}

Native_resource_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_resource_declarationContext.prototype.constructor = Native_resource_declarationContext;

Native_resource_declarationContext.prototype.NATIVE = function() {
    return this.getToken(MParser.NATIVE, 0);
};

Native_resource_declarationContext.prototype.RESOURCE = function() {
    return this.getToken(MParser.RESOURCE, 0);
};

Native_resource_declarationContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Native_resource_declarationContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Native_resource_declarationContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Native_resource_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Native_resource_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Native_resource_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Native_resource_declarationContext.prototype.native_category_bindings = function() {
    return this.getTypedRuleContext(Native_category_bindingsContext,0);
};

Native_resource_declarationContext.prototype.STORABLE = function() {
    return this.getToken(MParser.STORABLE, 0);
};

Native_resource_declarationContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

Native_resource_declarationContext.prototype.attribute_identifier_list = function() {
    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
};

Native_resource_declarationContext.prototype.native_member_method_declaration_list = function() {
    return this.getTypedRuleContext(Native_member_method_declaration_listContext,0);
};

Native_resource_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNative_resource_declaration(this);
	}
};

Native_resource_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNative_resource_declaration(this);
	}
};




MParser.Native_resource_declarationContext = Native_resource_declarationContext;

MParser.prototype.native_resource_declaration = function() {

    var localctx = new Native_resource_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, MParser.RULE_native_resource_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 724;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.STORABLE) {
            this.state = 723;
            this.match(MParser.STORABLE);
        }

        this.state = 726;
        this.match(MParser.NATIVE);
        this.state = 727;
        this.match(MParser.RESOURCE);
        this.state = 728;
        localctx.name = this.type_identifier();
        this.state = 729;
        this.match(MParser.LPAR);
        this.state = 731;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.STORABLE || _la===MParser.VARIABLE_IDENTIFIER) {
            this.state = 730;
            localctx.attrs = this.attribute_identifier_list();
        }

        this.state = 733;
        this.match(MParser.RPAR);
        this.state = 734;
        this.match(MParser.COLON);
        this.state = 735;
        this.indent();
        this.state = 736;
        localctx.bindings = this.native_category_bindings();
        this.state = 740;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        if(la_===1) {
            this.state = 737;
            this.lfp();
            this.state = 738;
            localctx.methods = this.native_member_method_declaration_list();

        }
        this.state = 742;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_bindingsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_native_category_bindings;
    this.items = null; // Native_category_binding_listContext
    return this;
}

Native_category_bindingsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_bindingsContext.prototype.constructor = Native_category_bindingsContext;

Native_category_bindingsContext.prototype.DEF = function() {
    return this.getToken(MParser.DEF, 0);
};

Native_category_bindingsContext.prototype.BINDINGS = function() {
    return this.getToken(MParser.BINDINGS, 0);
};

Native_category_bindingsContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Native_category_bindingsContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Native_category_bindingsContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Native_category_bindingsContext.prototype.CLASS = function() {
    return this.getToken(MParser.CLASS, 0);
};

Native_category_bindingsContext.prototype.CATEGORY = function() {
    return this.getToken(MParser.CATEGORY, 0);
};

Native_category_bindingsContext.prototype.native_category_binding_list = function() {
    return this.getTypedRuleContext(Native_category_binding_listContext,0);
};

Native_category_bindingsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNative_category_bindings(this);
	}
};

Native_category_bindingsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNative_category_bindings(this);
	}
};




MParser.Native_category_bindingsContext = Native_category_bindingsContext;

MParser.prototype.native_category_bindings = function() {

    var localctx = new Native_category_bindingsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, MParser.RULE_native_category_bindings);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 744;
        this.match(MParser.DEF);
        this.state = 745;
        _la = this._input.LA(1);
        if(!(_la===MParser.CATEGORY || _la===MParser.CLASS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 746;
        this.match(MParser.BINDINGS);
        this.state = 747;
        this.match(MParser.COLON);
        this.state = 748;
        this.indent();
        this.state = 749;
        localctx.items = this.native_category_binding_list(0);
        this.state = 750;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_binding_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_native_category_binding_list;
    return this;
}

Native_category_binding_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_binding_listContext.prototype.constructor = Native_category_binding_listContext;


 
Native_category_binding_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function NativeCategoryBindingListItemContext(parser, ctx) {
	Native_category_binding_listContext.call(this, parser);
    this.items = null; // Native_category_binding_listContext;
    this.item = null; // Native_category_bindingContext;
    Native_category_binding_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeCategoryBindingListItemContext.prototype = Object.create(Native_category_binding_listContext.prototype);
NativeCategoryBindingListItemContext.prototype.constructor = NativeCategoryBindingListItemContext;

MParser.NativeCategoryBindingListItemContext = NativeCategoryBindingListItemContext;

NativeCategoryBindingListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

NativeCategoryBindingListItemContext.prototype.native_category_binding_list = function() {
    return this.getTypedRuleContext(Native_category_binding_listContext,0);
};

NativeCategoryBindingListItemContext.prototype.native_category_binding = function() {
    return this.getTypedRuleContext(Native_category_bindingContext,0);
};
NativeCategoryBindingListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNativeCategoryBindingListItem(this);
	}
};

NativeCategoryBindingListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNativeCategoryBindingListItem(this);
	}
};


function NativeCategoryBindingListContext(parser, ctx) {
	Native_category_binding_listContext.call(this, parser);
    this.item = null; // Native_category_bindingContext;
    Native_category_binding_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeCategoryBindingListContext.prototype = Object.create(Native_category_binding_listContext.prototype);
NativeCategoryBindingListContext.prototype.constructor = NativeCategoryBindingListContext;

MParser.NativeCategoryBindingListContext = NativeCategoryBindingListContext;

NativeCategoryBindingListContext.prototype.native_category_binding = function() {
    return this.getTypedRuleContext(Native_category_bindingContext,0);
};
NativeCategoryBindingListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNativeCategoryBindingList(this);
	}
};

NativeCategoryBindingListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNativeCategoryBindingList(this);
	}
};



MParser.prototype.native_category_binding_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Native_category_binding_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 38;
    this.enterRecursionRule(localctx, 38, MParser.RULE_native_category_binding_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new NativeCategoryBindingListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 753;
        localctx.item = this.native_category_binding();
        this._ctx.stop = this._input.LT(-1);
        this.state = 761;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new NativeCategoryBindingListItemContext(this, new Native_category_binding_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_native_category_binding_list);
                this.state = 755;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 756;
                this.lfp();
                this.state = 757;
                localctx.item = this.native_category_binding(); 
            }
            this.state = 763;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Abstract_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_abstract_method_declaration;
    this.name = null; // Method_identifierContext
    this.args = null; // Argument_listContext
    this.typ = null; // TypedefContext
    return this;
}

Abstract_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Abstract_method_declarationContext.prototype.constructor = Abstract_method_declarationContext;

Abstract_method_declarationContext.prototype.ABSTRACT = function() {
    return this.getToken(MParser.ABSTRACT, 0);
};

Abstract_method_declarationContext.prototype.DEF = function() {
    return this.getToken(MParser.DEF, 0);
};

Abstract_method_declarationContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Abstract_method_declarationContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Abstract_method_declarationContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};

Abstract_method_declarationContext.prototype.RARROW = function() {
    return this.getToken(MParser.RARROW, 0);
};

Abstract_method_declarationContext.prototype.argument_list = function() {
    return this.getTypedRuleContext(Argument_listContext,0);
};

Abstract_method_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Abstract_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAbstract_method_declaration(this);
	}
};

Abstract_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAbstract_method_declaration(this);
	}
};




MParser.Abstract_method_declarationContext = Abstract_method_declarationContext;

MParser.prototype.abstract_method_declaration = function() {

    var localctx = new Abstract_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, MParser.RULE_abstract_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 764;
        this.match(MParser.ABSTRACT);
        this.state = 765;
        this.match(MParser.DEF);
        this.state = 766;
        localctx.name = this.method_identifier();
        this.state = 767;
        this.match(MParser.LPAR);
        this.state = 769;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.CODE || _la===MParser.MUTABLE || _la===MParser.VARIABLE_IDENTIFIER) {
            this.state = 768;
            localctx.args = this.argument_list();
        }

        this.state = 771;
        this.match(MParser.RPAR);
        this.state = 774;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.RARROW) {
            this.state = 772;
            this.match(MParser.RARROW);
            this.state = 773;
            localctx.typ = this.typedef(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Concrete_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_concrete_method_declaration;
    this.name = null; // Method_identifierContext
    this.args = null; // Argument_listContext
    this.typ = null; // TypedefContext
    this.stmts = null; // Statement_listContext
    return this;
}

Concrete_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concrete_method_declarationContext.prototype.constructor = Concrete_method_declarationContext;

Concrete_method_declarationContext.prototype.DEF = function() {
    return this.getToken(MParser.DEF, 0);
};

Concrete_method_declarationContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Concrete_method_declarationContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Concrete_method_declarationContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Concrete_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Concrete_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Concrete_method_declarationContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};

Concrete_method_declarationContext.prototype.PASS = function() {
    return this.getToken(MParser.PASS, 0);
};

Concrete_method_declarationContext.prototype.RARROW = function() {
    return this.getToken(MParser.RARROW, 0);
};

Concrete_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Concrete_method_declarationContext.prototype.argument_list = function() {
    return this.getTypedRuleContext(Argument_listContext,0);
};

Concrete_method_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Concrete_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterConcrete_method_declaration(this);
	}
};

Concrete_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitConcrete_method_declaration(this);
	}
};




MParser.Concrete_method_declarationContext = Concrete_method_declarationContext;

MParser.prototype.concrete_method_declaration = function() {

    var localctx = new Concrete_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, MParser.RULE_concrete_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 776;
        this.match(MParser.DEF);
        this.state = 777;
        localctx.name = this.method_identifier();
        this.state = 778;
        this.match(MParser.LPAR);
        this.state = 780;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.CODE || _la===MParser.MUTABLE || _la===MParser.VARIABLE_IDENTIFIER) {
            this.state = 779;
            localctx.args = this.argument_list();
        }

        this.state = 782;
        this.match(MParser.RPAR);
        this.state = 785;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.RARROW) {
            this.state = 783;
            this.match(MParser.RARROW);
            this.state = 784;
            localctx.typ = this.typedef(0);
        }

        this.state = 787;
        this.match(MParser.COLON);
        this.state = 788;
        this.indent();
        this.state = 791;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.COMMENT:
        case MParser.LPAR:
        case MParser.LBRAK:
        case MParser.LCURL:
        case MParser.LT:
        case MParser.LTCOLONGT:
        case MParser.BOOLEAN:
        case MParser.CHARACTER:
        case MParser.TEXT:
        case MParser.INTEGER:
        case MParser.DECIMAL:
        case MParser.DATE:
        case MParser.TIME:
        case MParser.DATETIME:
        case MParser.PERIOD:
        case MParser.VERSION:
        case MParser.CODE:
        case MParser.DOCUMENT:
        case MParser.BLOB:
        case MParser.IMAGE:
        case MParser.UUID:
        case MParser.ITERATOR:
        case MParser.CURSOR:
        case MParser.HTML:
        case MParser.ANY:
        case MParser.BREAK:
        case MParser.DEF:
        case MParser.DELETE:
        case MParser.DO:
        case MParser.FETCH:
        case MParser.FLUSH:
        case MParser.FOR:
        case MParser.IF:
        case MParser.MUTABLE:
        case MParser.NONE:
        case MParser.RAISE:
        case MParser.READ:
        case MParser.RETURN:
        case MParser.SELF:
        case MParser.SORTED:
        case MParser.STORE:
        case MParser.SWITCH:
        case MParser.THIS:
        case MParser.TRY:
        case MParser.WITH:
        case MParser.WHILE:
        case MParser.WRITE:
        case MParser.BOOLEAN_LITERAL:
        case MParser.CHAR_LITERAL:
        case MParser.MIN_INTEGER:
        case MParser.MAX_INTEGER:
        case MParser.SYMBOL_IDENTIFIER:
        case MParser.TYPE_IDENTIFIER:
        case MParser.VARIABLE_IDENTIFIER:
        case MParser.TEXT_LITERAL:
        case MParser.UUID_LITERAL:
        case MParser.INTEGER_LITERAL:
        case MParser.HEXA_LITERAL:
        case MParser.DECIMAL_LITERAL:
        case MParser.DATETIME_LITERAL:
        case MParser.TIME_LITERAL:
        case MParser.DATE_LITERAL:
        case MParser.PERIOD_LITERAL:
        case MParser.VERSION_LITERAL:
            this.state = 789;
            localctx.stmts = this.statement_list();
            break;
        case MParser.PASS:
            this.state = 790;
            this.match(MParser.PASS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 793;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_native_method_declaration;
    this.name = null; // Method_identifierContext
    this.args = null; // Argument_listContext
    this.typ = null; // Category_or_any_typeContext
    this.stmts = null; // Native_statement_listContext
    return this;
}

Native_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_method_declarationContext.prototype.constructor = Native_method_declarationContext;

Native_method_declarationContext.prototype.DEF = function() {
    return this.getToken(MParser.DEF, 0);
};

Native_method_declarationContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Native_method_declarationContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Native_method_declarationContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Native_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Native_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Native_method_declarationContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};

Native_method_declarationContext.prototype.native_statement_list = function() {
    return this.getTypedRuleContext(Native_statement_listContext,0);
};

Native_method_declarationContext.prototype.NATIVE = function() {
    return this.getToken(MParser.NATIVE, 0);
};

Native_method_declarationContext.prototype.RARROW = function() {
    return this.getToken(MParser.RARROW, 0);
};

Native_method_declarationContext.prototype.argument_list = function() {
    return this.getTypedRuleContext(Argument_listContext,0);
};

Native_method_declarationContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};

Native_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNative_method_declaration(this);
	}
};

Native_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNative_method_declaration(this);
	}
};




MParser.Native_method_declarationContext = Native_method_declarationContext;

MParser.prototype.native_method_declaration = function() {

    var localctx = new Native_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, MParser.RULE_native_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 795;
        this.match(MParser.DEF);
        this.state = 797;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.NATIVE) {
            this.state = 796;
            this.match(MParser.NATIVE);
        }

        this.state = 799;
        localctx.name = this.method_identifier();
        this.state = 800;
        this.match(MParser.LPAR);
        this.state = 802;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.CODE || _la===MParser.MUTABLE || _la===MParser.VARIABLE_IDENTIFIER) {
            this.state = 801;
            localctx.args = this.argument_list();
        }

        this.state = 804;
        this.match(MParser.RPAR);
        this.state = 807;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.RARROW) {
            this.state = 805;
            this.match(MParser.RARROW);
            this.state = 806;
            localctx.typ = this.category_or_any_type();
        }

        this.state = 809;
        this.match(MParser.COLON);
        this.state = 810;
        this.indent();
        this.state = 811;
        localctx.stmts = this.native_statement_list();
        this.state = 812;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Test_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_test_method_declaration;
    this.name = null; // Token
    this.stmts = null; // Statement_listContext
    this.exps = null; // Assertion_listContext
    this.error = null; // Symbol_identifierContext
    return this;
}

Test_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Test_method_declarationContext.prototype.constructor = Test_method_declarationContext;

Test_method_declarationContext.prototype.DEF = function() {
    return this.getToken(MParser.DEF, 0);
};

Test_method_declarationContext.prototype.TEST = function() {
    return this.getToken(MParser.TEST, 0);
};

Test_method_declarationContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Test_method_declarationContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Test_method_declarationContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.COLON);
    } else {
        return this.getToken(MParser.COLON, i);
    }
};


Test_method_declarationContext.prototype.indent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndentContext);
    } else {
        return this.getTypedRuleContext(IndentContext,i);
    }
};

Test_method_declarationContext.prototype.dedent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DedentContext);
    } else {
        return this.getTypedRuleContext(DedentContext,i);
    }
};

Test_method_declarationContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

Test_method_declarationContext.prototype.VERIFYING = function() {
    return this.getToken(MParser.VERIFYING, 0);
};

Test_method_declarationContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(MParser.TEXT_LITERAL, 0);
};

Test_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Test_method_declarationContext.prototype.assertion_list = function() {
    return this.getTypedRuleContext(Assertion_listContext,0);
};

Test_method_declarationContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};

Test_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterTest_method_declaration(this);
	}
};

Test_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitTest_method_declaration(this);
	}
};




MParser.Test_method_declarationContext = Test_method_declarationContext;

MParser.prototype.test_method_declaration = function() {

    var localctx = new Test_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, MParser.RULE_test_method_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 814;
        this.match(MParser.DEF);
        this.state = 815;
        this.match(MParser.TEST);
        this.state = 816;
        localctx.name = this.match(MParser.TEXT_LITERAL);
        this.state = 817;
        this.match(MParser.LPAR);
        this.state = 818;
        this.match(MParser.RPAR);
        this.state = 819;
        this.match(MParser.COLON);
        this.state = 820;
        this.indent();
        this.state = 821;
        localctx.stmts = this.statement_list();
        this.state = 822;
        this.dedent();
        this.state = 823;
        this.lfp();
        this.state = 824;
        this.match(MParser.VERIFYING);
        this.state = 825;
        this.match(MParser.COLON);
        this.state = 831;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.LF:
            this.state = 826;
            this.indent();
            this.state = 827;
            localctx.exps = this.assertion_list();
            this.state = 828;
            this.dedent();
            break;
        case MParser.SYMBOL_IDENTIFIER:
            this.state = 830;
            localctx.error = this.symbol_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssertionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_assertion;
    this.exp = null; // ExpressionContext
    return this;
}

AssertionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssertionContext.prototype.constructor = AssertionContext;

AssertionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AssertionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAssertion(this);
	}
};

AssertionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAssertion(this);
	}
};




MParser.AssertionContext = AssertionContext;

MParser.prototype.assertion = function() {

    var localctx = new AssertionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, MParser.RULE_assertion);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 833;
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Typed_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_typed_argument;
    this.name = null; // Variable_identifierContext
    this.typ = null; // Category_or_any_typeContext
    this.attrs = null; // Attribute_identifier_listContext
    this.value = null; // Literal_expressionContext
    return this;
}

Typed_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Typed_argumentContext.prototype.constructor = Typed_argumentContext;

Typed_argumentContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Typed_argumentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Typed_argumentContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};

Typed_argumentContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Typed_argumentContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Typed_argumentContext.prototype.EQ = function() {
    return this.getToken(MParser.EQ, 0);
};

Typed_argumentContext.prototype.attribute_identifier_list = function() {
    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
};

Typed_argumentContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};

Typed_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterTyped_argument(this);
	}
};

Typed_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitTyped_argument(this);
	}
};




MParser.Typed_argumentContext = Typed_argumentContext;

MParser.prototype.typed_argument = function() {

    var localctx = new Typed_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, MParser.RULE_typed_argument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 835;
        localctx.name = this.variable_identifier();
        this.state = 836;
        this.match(MParser.COLON);
        this.state = 837;
        localctx.typ = this.category_or_any_type();
        this.state = 842;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.LPAR) {
            this.state = 838;
            this.match(MParser.LPAR);
            this.state = 839;
            localctx.attrs = this.attribute_identifier_list();
            this.state = 840;
            this.match(MParser.RPAR);
        }

        this.state = 846;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.EQ) {
            this.state = 844;
            this.match(MParser.EQ);
            this.state = 845;
            localctx.value = this.literal_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;


 
StatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CommentStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.decl = null; // Comment_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CommentStatementContext.prototype = Object.create(StatementContext.prototype);
CommentStatementContext.prototype.constructor = CommentStatementContext;

MParser.CommentStatementContext = CommentStatementContext;

CommentStatementContext.prototype.comment_statement = function() {
    return this.getTypedRuleContext(Comment_statementContext,0);
};
CommentStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCommentStatement(this);
	}
};

CommentStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCommentStatement(this);
	}
};


function StoreStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Store_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StoreStatementContext.prototype = Object.create(StatementContext.prototype);
StoreStatementContext.prototype.constructor = StoreStatementContext;

MParser.StoreStatementContext = StoreStatementContext;

StoreStatementContext.prototype.store_statement = function() {
    return this.getTypedRuleContext(Store_statementContext,0);
};
StoreStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterStoreStatement(this);
	}
};

StoreStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitStoreStatement(this);
	}
};


function WithSingletonStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // With_singleton_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WithSingletonStatementContext.prototype = Object.create(StatementContext.prototype);
WithSingletonStatementContext.prototype.constructor = WithSingletonStatementContext;

MParser.WithSingletonStatementContext = WithSingletonStatementContext;

WithSingletonStatementContext.prototype.with_singleton_statement = function() {
    return this.getTypedRuleContext(With_singleton_statementContext,0);
};
WithSingletonStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterWithSingletonStatement(this);
	}
};

WithSingletonStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitWithSingletonStatement(this);
	}
};


function WriteStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Write_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WriteStatementContext.prototype = Object.create(StatementContext.prototype);
WriteStatementContext.prototype.constructor = WriteStatementContext;

MParser.WriteStatementContext = WriteStatementContext;

WriteStatementContext.prototype.write_statement = function() {
    return this.getTypedRuleContext(Write_statementContext,0);
};
WriteStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterWriteStatement(this);
	}
};

WriteStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitWriteStatement(this);
	}
};


function WhileStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // While_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WhileStatementContext.prototype = Object.create(StatementContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

MParser.WhileStatementContext = WhileStatementContext;

WhileStatementContext.prototype.while_statement = function() {
    return this.getTypedRuleContext(While_statementContext,0);
};
WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitWhileStatement(this);
	}
};


function WithResourceStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // With_resource_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WithResourceStatementContext.prototype = Object.create(StatementContext.prototype);
WithResourceStatementContext.prototype.constructor = WithResourceStatementContext;

MParser.WithResourceStatementContext = WithResourceStatementContext;

WithResourceStatementContext.prototype.with_resource_statement = function() {
    return this.getTypedRuleContext(With_resource_statementContext,0);
};
WithResourceStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterWithResourceStatement(this);
	}
};

WithResourceStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitWithResourceStatement(this);
	}
};


function RaiseStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Raise_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RaiseStatementContext.prototype = Object.create(StatementContext.prototype);
RaiseStatementContext.prototype.constructor = RaiseStatementContext;

MParser.RaiseStatementContext = RaiseStatementContext;

RaiseStatementContext.prototype.raise_statement = function() {
    return this.getTypedRuleContext(Raise_statementContext,0);
};
RaiseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterRaiseStatement(this);
	}
};

RaiseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitRaiseStatement(this);
	}
};


function FetchStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Fetch_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FetchStatementContext.prototype = Object.create(StatementContext.prototype);
FetchStatementContext.prototype.constructor = FetchStatementContext;

MParser.FetchStatementContext = FetchStatementContext;

FetchStatementContext.prototype.fetch_statement = function() {
    return this.getTypedRuleContext(Fetch_statementContext,0);
};
FetchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterFetchStatement(this);
	}
};

FetchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitFetchStatement(this);
	}
};


function BreakStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Break_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BreakStatementContext.prototype = Object.create(StatementContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

MParser.BreakStatementContext = BreakStatementContext;

BreakStatementContext.prototype.break_statement = function() {
    return this.getTypedRuleContext(Break_statementContext,0);
};
BreakStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterBreakStatement(this);
	}
};

BreakStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitBreakStatement(this);
	}
};


function AssignInstanceStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Assign_instance_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignInstanceStatementContext.prototype = Object.create(StatementContext.prototype);
AssignInstanceStatementContext.prototype.constructor = AssignInstanceStatementContext;

MParser.AssignInstanceStatementContext = AssignInstanceStatementContext;

AssignInstanceStatementContext.prototype.assign_instance_statement = function() {
    return this.getTypedRuleContext(Assign_instance_statementContext,0);
};
AssignInstanceStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAssignInstanceStatement(this);
	}
};

AssignInstanceStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAssignInstanceStatement(this);
	}
};


function IfStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // If_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IfStatementContext.prototype = Object.create(StatementContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

MParser.IfStatementContext = IfStatementContext;

IfStatementContext.prototype.if_statement = function() {
    return this.getTypedRuleContext(If_statementContext,0);
};
IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitIfStatement(this);
	}
};


function SwitchStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Switch_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SwitchStatementContext.prototype = Object.create(StatementContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

MParser.SwitchStatementContext = SwitchStatementContext;

SwitchStatementContext.prototype.switch_statement = function() {
    return this.getTypedRuleContext(Switch_statementContext,0);
};
SwitchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSwitchStatement(this);
	}
};

SwitchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSwitchStatement(this);
	}
};


function TryStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Try_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TryStatementContext.prototype = Object.create(StatementContext.prototype);
TryStatementContext.prototype.constructor = TryStatementContext;

MParser.TryStatementContext = TryStatementContext;

TryStatementContext.prototype.try_statement = function() {
    return this.getTypedRuleContext(Try_statementContext,0);
};
TryStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterTryStatement(this);
	}
};

TryStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitTryStatement(this);
	}
};


function MethodCallStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Method_call_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodCallStatementContext.prototype = Object.create(StatementContext.prototype);
MethodCallStatementContext.prototype.constructor = MethodCallStatementContext;

MParser.MethodCallStatementContext = MethodCallStatementContext;

MethodCallStatementContext.prototype.method_call_statement = function() {
    return this.getTypedRuleContext(Method_call_statementContext,0);
};
MethodCallStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMethodCallStatement(this);
	}
};

MethodCallStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMethodCallStatement(this);
	}
};


function ReturnStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Return_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReturnStatementContext.prototype = Object.create(StatementContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

MParser.ReturnStatementContext = ReturnStatementContext;

ReturnStatementContext.prototype.return_statement = function() {
    return this.getTypedRuleContext(Return_statementContext,0);
};
ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitReturnStatement(this);
	}
};


function AssignTupleStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Assign_tuple_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignTupleStatementContext.prototype = Object.create(StatementContext.prototype);
AssignTupleStatementContext.prototype.constructor = AssignTupleStatementContext;

MParser.AssignTupleStatementContext = AssignTupleStatementContext;

AssignTupleStatementContext.prototype.assign_tuple_statement = function() {
    return this.getTypedRuleContext(Assign_tuple_statementContext,0);
};
AssignTupleStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAssignTupleStatement(this);
	}
};

AssignTupleStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAssignTupleStatement(this);
	}
};


function ClosureStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.decl = null; // Concrete_method_declarationContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClosureStatementContext.prototype = Object.create(StatementContext.prototype);
ClosureStatementContext.prototype.constructor = ClosureStatementContext;

MParser.ClosureStatementContext = ClosureStatementContext;

ClosureStatementContext.prototype.concrete_method_declaration = function() {
    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
};
ClosureStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterClosureStatement(this);
	}
};

ClosureStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitClosureStatement(this);
	}
};


function FlushStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Flush_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FlushStatementContext.prototype = Object.create(StatementContext.prototype);
FlushStatementContext.prototype.constructor = FlushStatementContext;

MParser.FlushStatementContext = FlushStatementContext;

FlushStatementContext.prototype.flush_statement = function() {
    return this.getTypedRuleContext(Flush_statementContext,0);
};
FlushStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterFlushStatement(this);
	}
};

FlushStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitFlushStatement(this);
	}
};


function DoWhileStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Do_while_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DoWhileStatementContext.prototype = Object.create(StatementContext.prototype);
DoWhileStatementContext.prototype.constructor = DoWhileStatementContext;

MParser.DoWhileStatementContext = DoWhileStatementContext;

DoWhileStatementContext.prototype.do_while_statement = function() {
    return this.getTypedRuleContext(Do_while_statementContext,0);
};
DoWhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDoWhileStatement(this);
	}
};

DoWhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDoWhileStatement(this);
	}
};


function ForEachStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // For_each_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForEachStatementContext.prototype = Object.create(StatementContext.prototype);
ForEachStatementContext.prototype.constructor = ForEachStatementContext;

MParser.ForEachStatementContext = ForEachStatementContext;

ForEachStatementContext.prototype.for_each_statement = function() {
    return this.getTypedRuleContext(For_each_statementContext,0);
};
ForEachStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterForEachStatement(this);
	}
};

ForEachStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitForEachStatement(this);
	}
};



MParser.StatementContext = StatementContext;

MParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, MParser.RULE_statement);
    try {
        this.state = 868;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MethodCallStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 848;
            localctx.stmt = this.method_call_statement();
            break;

        case 2:
            localctx = new AssignInstanceStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 849;
            localctx.stmt = this.assign_instance_statement();
            break;

        case 3:
            localctx = new AssignTupleStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 850;
            localctx.stmt = this.assign_tuple_statement();
            break;

        case 4:
            localctx = new StoreStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 851;
            localctx.stmt = this.store_statement();
            break;

        case 5:
            localctx = new FetchStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 852;
            localctx.stmt = this.fetch_statement();
            break;

        case 6:
            localctx = new FlushStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 853;
            localctx.stmt = this.flush_statement();
            break;

        case 7:
            localctx = new BreakStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 854;
            localctx.stmt = this.break_statement();
            break;

        case 8:
            localctx = new ReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 855;
            localctx.stmt = this.return_statement();
            break;

        case 9:
            localctx = new IfStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 856;
            localctx.stmt = this.if_statement();
            break;

        case 10:
            localctx = new SwitchStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 857;
            localctx.stmt = this.switch_statement();
            break;

        case 11:
            localctx = new ForEachStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 858;
            localctx.stmt = this.for_each_statement();
            break;

        case 12:
            localctx = new WhileStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 859;
            localctx.stmt = this.while_statement();
            break;

        case 13:
            localctx = new DoWhileStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 860;
            localctx.stmt = this.do_while_statement();
            break;

        case 14:
            localctx = new RaiseStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 861;
            localctx.stmt = this.raise_statement();
            break;

        case 15:
            localctx = new TryStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 862;
            localctx.stmt = this.try_statement();
            break;

        case 16:
            localctx = new WriteStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 863;
            localctx.stmt = this.write_statement();
            break;

        case 17:
            localctx = new WithResourceStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 864;
            localctx.stmt = this.with_resource_statement();
            break;

        case 18:
            localctx = new WithSingletonStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 865;
            localctx.stmt = this.with_singleton_statement();
            break;

        case 19:
            localctx = new ClosureStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 866;
            localctx.decl = this.concrete_method_declaration();
            break;

        case 20:
            localctx = new CommentStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 867;
            localctx.decl = this.comment_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Flush_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_flush_statement;
    return this;
}

Flush_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Flush_statementContext.prototype.constructor = Flush_statementContext;

Flush_statementContext.prototype.FLUSH = function() {
    return this.getToken(MParser.FLUSH, 0);
};

Flush_statementContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Flush_statementContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Flush_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterFlush_statement(this);
	}
};

Flush_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitFlush_statement(this);
	}
};




MParser.Flush_statementContext = Flush_statementContext;

MParser.prototype.flush_statement = function() {

    var localctx = new Flush_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, MParser.RULE_flush_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 870;
        this.match(MParser.FLUSH);
        this.state = 871;
        this.match(MParser.LPAR);
        this.state = 872;
        this.match(MParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Store_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_store_statement;
    this.to_del = null; // Expression_listContext
    this.to_add = null; // Expression_listContext
    this.stmts = null; // Statement_listContext
    return this;
}

Store_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Store_statementContext.prototype.constructor = Store_statementContext;

Store_statementContext.prototype.DELETE = function() {
    return this.getToken(MParser.DELETE, 0);
};

Store_statementContext.prototype.LPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.LPAR);
    } else {
        return this.getToken(MParser.LPAR, i);
    }
};


Store_statementContext.prototype.RPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.RPAR);
    } else {
        return this.getToken(MParser.RPAR, i);
    }
};


Store_statementContext.prototype.STORE = function() {
    return this.getToken(MParser.STORE, 0);
};

Store_statementContext.prototype.expression_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expression_listContext);
    } else {
        return this.getTypedRuleContext(Expression_listContext,i);
    }
};

Store_statementContext.prototype.THEN = function() {
    return this.getToken(MParser.THEN, 0);
};

Store_statementContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Store_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Store_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Store_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Store_statementContext.prototype.AND = function() {
    return this.getToken(MParser.AND, 0);
};

Store_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterStore_statement(this);
	}
};

Store_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitStore_statement(this);
	}
};




MParser.Store_statementContext = Store_statementContext;

MParser.prototype.store_statement = function() {

    var localctx = new Store_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, MParser.RULE_store_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 891;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.DELETE:
            this.state = 874;
            this.match(MParser.DELETE);
            this.state = 875;
            this.match(MParser.LPAR);
            this.state = 876;
            localctx.to_del = this.expression_list();
            this.state = 877;
            this.match(MParser.RPAR);
            this.state = 884;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MParser.AND) {
                this.state = 878;
                this.match(MParser.AND);
                this.state = 879;
                this.match(MParser.STORE);
                this.state = 880;
                this.match(MParser.LPAR);
                this.state = 881;
                localctx.to_add = this.expression_list();
                this.state = 882;
                this.match(MParser.RPAR);
            }

            break;
        case MParser.STORE:
            this.state = 886;
            this.match(MParser.STORE);
            this.state = 887;
            this.match(MParser.LPAR);
            this.state = 888;
            localctx.to_add = this.expression_list();
            this.state = 889;
            this.match(MParser.RPAR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 899;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.THEN) {
            this.state = 893;
            this.match(MParser.THEN);
            this.state = 894;
            this.match(MParser.COLON);
            this.state = 895;
            this.indent();
            this.state = 896;
            localctx.stmts = this.statement_list();
            this.state = 897;
            this.dedent();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_call_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_method_call_expression;
    this.name = null; // Method_identifierContext
    this.args = null; // Argument_assignment_listContext
    return this;
}

Method_call_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_call_expressionContext.prototype.constructor = Method_call_expressionContext;

Method_call_expressionContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Method_call_expressionContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Method_call_expressionContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};

Method_call_expressionContext.prototype.argument_assignment_list = function() {
    return this.getTypedRuleContext(Argument_assignment_listContext,0);
};

Method_call_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMethod_call_expression(this);
	}
};

Method_call_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMethod_call_expression(this);
	}
};




MParser.Method_call_expressionContext = Method_call_expressionContext;

MParser.prototype.method_call_expression = function() {

    var localctx = new Method_call_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, MParser.RULE_method_call_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 901;
        localctx.name = this.method_identifier();
        this.state = 902;
        this.match(MParser.LPAR);
        this.state = 904;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MParser.LPAR - 20)) | (1 << (MParser.LBRAK - 20)) | (1 << (MParser.LCURL - 20)) | (1 << (MParser.MINUS - 20)) | (1 << (MParser.LT - 20)) | (1 << (MParser.LTGT - 20)) | (1 << (MParser.LTCOLONGT - 20)))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.CODE - 52)) | (1 << (MParser.DOCUMENT - 52)) | (1 << (MParser.BLOB - 52)) | (1 << (MParser.IMAGE - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.ITERATOR - 52)) | (1 << (MParser.CURSOR - 52)) | (1 << (MParser.HTML - 52)) | (1 << (MParser.ANY - 52)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (MParser.EXECUTE - 103)) | (1 << (MParser.FETCH - 103)) | (1 << (MParser.MUTABLE - 103)) | (1 << (MParser.NONE - 103)) | (1 << (MParser.NOT - 103)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (MParser.READ - 138)) | (1 << (MParser.SELF - 138)) | (1 << (MParser.SORTED - 138)) | (1 << (MParser.THIS - 138)) | (1 << (MParser.BOOLEAN_LITERAL - 138)) | (1 << (MParser.CHAR_LITERAL - 138)) | (1 << (MParser.MIN_INTEGER - 138)) | (1 << (MParser.MAX_INTEGER - 138)) | (1 << (MParser.SYMBOL_IDENTIFIER - 138)) | (1 << (MParser.TYPE_IDENTIFIER - 138)))) !== 0) || ((((_la - 170)) & ~0x1f) == 0 && ((1 << (_la - 170)) & ((1 << (MParser.VARIABLE_IDENTIFIER - 170)) | (1 << (MParser.TEXT_LITERAL - 170)) | (1 << (MParser.UUID_LITERAL - 170)) | (1 << (MParser.INTEGER_LITERAL - 170)) | (1 << (MParser.HEXA_LITERAL - 170)) | (1 << (MParser.DECIMAL_LITERAL - 170)) | (1 << (MParser.DATETIME_LITERAL - 170)) | (1 << (MParser.TIME_LITERAL - 170)) | (1 << (MParser.DATE_LITERAL - 170)) | (1 << (MParser.PERIOD_LITERAL - 170)) | (1 << (MParser.VERSION_LITERAL - 170)))) !== 0)) {
            this.state = 903;
            localctx.args = this.argument_assignment_list(0);
        }

        this.state = 906;
        this.match(MParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_call_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_method_call_statement;
    this.parent = null; // Instance_expressionContext
    this.method = null; // Method_call_expressionContext
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Statement_listContext
    return this;
}

Method_call_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_call_statementContext.prototype.constructor = Method_call_statementContext;

Method_call_statementContext.prototype.method_call_expression = function() {
    return this.getTypedRuleContext(Method_call_expressionContext,0);
};

Method_call_statementContext.prototype.DOT = function() {
    return this.getToken(MParser.DOT, 0);
};

Method_call_statementContext.prototype.THEN = function() {
    return this.getToken(MParser.THEN, 0);
};

Method_call_statementContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Method_call_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Method_call_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Method_call_statementContext.prototype.instance_expression = function() {
    return this.getTypedRuleContext(Instance_expressionContext,0);
};

Method_call_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Method_call_statementContext.prototype.WITH = function() {
    return this.getToken(MParser.WITH, 0);
};

Method_call_statementContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Method_call_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMethod_call_statement(this);
	}
};

Method_call_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMethod_call_statement(this);
	}
};




MParser.Method_call_statementContext = Method_call_statementContext;

MParser.prototype.method_call_statement = function() {

    var localctx = new Method_call_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, MParser.RULE_method_call_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 911;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        if(la_===1) {
            this.state = 908;
            localctx.parent = this.instance_expression(0);
            this.state = 909;
            this.match(MParser.DOT);

        }
        this.state = 913;
        localctx.method = this.method_call_expression();
        this.state = 924;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.THEN) {
            this.state = 914;
            this.match(MParser.THEN);
            this.state = 917;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MParser.WITH) {
                this.state = 915;
                this.match(MParser.WITH);
                this.state = 916;
                localctx.name = this.variable_identifier();
            }

            this.state = 919;
            this.match(MParser.COLON);
            this.state = 920;
            this.indent();
            this.state = 921;
            localctx.stmts = this.statement_list();
            this.state = 922;
            this.dedent();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_resource_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_with_resource_statement;
    this.stmt = null; // Assign_variable_statementContext
    this.stmts = null; // Statement_listContext
    return this;
}

With_resource_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_resource_statementContext.prototype.constructor = With_resource_statementContext;

With_resource_statementContext.prototype.WITH = function() {
    return this.getToken(MParser.WITH, 0);
};

With_resource_statementContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

With_resource_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

With_resource_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

With_resource_statementContext.prototype.assign_variable_statement = function() {
    return this.getTypedRuleContext(Assign_variable_statementContext,0);
};

With_resource_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

With_resource_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterWith_resource_statement(this);
	}
};

With_resource_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitWith_resource_statement(this);
	}
};




MParser.With_resource_statementContext = With_resource_statementContext;

MParser.prototype.with_resource_statement = function() {

    var localctx = new With_resource_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, MParser.RULE_with_resource_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 926;
        this.match(MParser.WITH);
        this.state = 927;
        localctx.stmt = this.assign_variable_statement();
        this.state = 928;
        this.match(MParser.COLON);
        this.state = 929;
        this.indent();
        this.state = 930;
        localctx.stmts = this.statement_list();
        this.state = 931;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_singleton_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_with_singleton_statement;
    this.typ = null; // Type_identifierContext
    this.stmts = null; // Statement_listContext
    return this;
}

With_singleton_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_singleton_statementContext.prototype.constructor = With_singleton_statementContext;

With_singleton_statementContext.prototype.WITH = function() {
    return this.getToken(MParser.WITH, 0);
};

With_singleton_statementContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

With_singleton_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

With_singleton_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

With_singleton_statementContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

With_singleton_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

With_singleton_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterWith_singleton_statement(this);
	}
};

With_singleton_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitWith_singleton_statement(this);
	}
};




MParser.With_singleton_statementContext = With_singleton_statementContext;

MParser.prototype.with_singleton_statement = function() {

    var localctx = new With_singleton_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, MParser.RULE_with_singleton_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 933;
        this.match(MParser.WITH);
        this.state = 934;
        localctx.typ = this.type_identifier();
        this.state = 935;
        this.match(MParser.COLON);
        this.state = 936;
        this.indent();
        this.state = 937;
        localctx.stmts = this.statement_list();
        this.state = 938;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_switch_statement;
    this.exp = null; // ExpressionContext
    this.cases = null; // Switch_case_statement_listContext
    this.stmts = null; // Statement_listContext
    return this;
}

Switch_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_statementContext.prototype.constructor = Switch_statementContext;

Switch_statementContext.prototype.SWITCH = function() {
    return this.getToken(MParser.SWITCH, 0);
};

Switch_statementContext.prototype.ON = function() {
    return this.getToken(MParser.ON, 0);
};

Switch_statementContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.COLON);
    } else {
        return this.getToken(MParser.COLON, i);
    }
};


Switch_statementContext.prototype.indent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndentContext);
    } else {
        return this.getTypedRuleContext(IndentContext,i);
    }
};

Switch_statementContext.prototype.dedent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DedentContext);
    } else {
        return this.getTypedRuleContext(DedentContext,i);
    }
};

Switch_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Switch_statementContext.prototype.switch_case_statement_list = function() {
    return this.getTypedRuleContext(Switch_case_statement_listContext,0);
};

Switch_statementContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

Switch_statementContext.prototype.OTHERWISE = function() {
    return this.getToken(MParser.OTHERWISE, 0);
};

Switch_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Switch_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSwitch_statement(this);
	}
};

Switch_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSwitch_statement(this);
	}
};




MParser.Switch_statementContext = Switch_statementContext;

MParser.prototype.switch_statement = function() {

    var localctx = new Switch_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, MParser.RULE_switch_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 940;
        this.match(MParser.SWITCH);
        this.state = 941;
        this.match(MParser.ON);
        this.state = 942;
        localctx.exp = this.expression(0);
        this.state = 943;
        this.match(MParser.COLON);
        this.state = 944;
        this.indent();
        this.state = 945;
        localctx.cases = this.switch_case_statement_list();
        this.state = 953;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        if(la_===1) {
            this.state = 946;
            this.lfp();
            this.state = 947;
            this.match(MParser.OTHERWISE);
            this.state = 948;
            this.match(MParser.COLON);
            this.state = 949;
            this.indent();
            this.state = 950;
            localctx.stmts = this.statement_list();
            this.state = 951;
            this.dedent();

        }
        this.state = 955;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_case_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_switch_case_statement;
    return this;
}

Switch_case_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_case_statementContext.prototype.constructor = Switch_case_statementContext;


 
Switch_case_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AtomicSwitchCaseContext(parser, ctx) {
	Switch_case_statementContext.call(this, parser);
    this.exp = null; // Atomic_literalContext;
    this.stmts = null; // Statement_listContext;
    Switch_case_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtomicSwitchCaseContext.prototype = Object.create(Switch_case_statementContext.prototype);
AtomicSwitchCaseContext.prototype.constructor = AtomicSwitchCaseContext;

MParser.AtomicSwitchCaseContext = AtomicSwitchCaseContext;

AtomicSwitchCaseContext.prototype.WHEN = function() {
    return this.getToken(MParser.WHEN, 0);
};

AtomicSwitchCaseContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

AtomicSwitchCaseContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

AtomicSwitchCaseContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

AtomicSwitchCaseContext.prototype.atomic_literal = function() {
    return this.getTypedRuleContext(Atomic_literalContext,0);
};

AtomicSwitchCaseContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
AtomicSwitchCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAtomicSwitchCase(this);
	}
};

AtomicSwitchCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAtomicSwitchCase(this);
	}
};


function CollectionSwitchCaseContext(parser, ctx) {
	Switch_case_statementContext.call(this, parser);
    this.exp = null; // Literal_collectionContext;
    this.stmts = null; // Statement_listContext;
    Switch_case_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CollectionSwitchCaseContext.prototype = Object.create(Switch_case_statementContext.prototype);
CollectionSwitchCaseContext.prototype.constructor = CollectionSwitchCaseContext;

MParser.CollectionSwitchCaseContext = CollectionSwitchCaseContext;

CollectionSwitchCaseContext.prototype.WHEN = function() {
    return this.getToken(MParser.WHEN, 0);
};

CollectionSwitchCaseContext.prototype.IN = function() {
    return this.getToken(MParser.IN, 0);
};

CollectionSwitchCaseContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

CollectionSwitchCaseContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

CollectionSwitchCaseContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

CollectionSwitchCaseContext.prototype.literal_collection = function() {
    return this.getTypedRuleContext(Literal_collectionContext,0);
};

CollectionSwitchCaseContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
CollectionSwitchCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCollectionSwitchCase(this);
	}
};

CollectionSwitchCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCollectionSwitchCase(this);
	}
};



MParser.Switch_case_statementContext = Switch_case_statementContext;

MParser.prototype.switch_case_statement = function() {

    var localctx = new Switch_case_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, MParser.RULE_switch_case_statement);
    try {
        this.state = 972;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AtomicSwitchCaseContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 957;
            this.match(MParser.WHEN);
            this.state = 958;
            localctx.exp = this.atomic_literal();
            this.state = 959;
            this.match(MParser.COLON);
            this.state = 960;
            this.indent();
            this.state = 961;
            localctx.stmts = this.statement_list();
            this.state = 962;
            this.dedent();
            break;

        case 2:
            localctx = new CollectionSwitchCaseContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 964;
            this.match(MParser.WHEN);
            this.state = 965;
            this.match(MParser.IN);
            this.state = 966;
            localctx.exp = this.literal_collection();
            this.state = 967;
            this.match(MParser.COLON);
            this.state = 968;
            this.indent();
            this.state = 969;
            localctx.stmts = this.statement_list();
            this.state = 970;
            this.dedent();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_each_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_for_each_statement;
    this.name1 = null; // Variable_identifierContext
    this.name2 = null; // Variable_identifierContext
    this.source = null; // ExpressionContext
    this.stmts = null; // Statement_listContext
    return this;
}

For_each_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_each_statementContext.prototype.constructor = For_each_statementContext;

For_each_statementContext.prototype.FOR = function() {
    return this.getToken(MParser.FOR, 0);
};

For_each_statementContext.prototype.IN = function() {
    return this.getToken(MParser.IN, 0);
};

For_each_statementContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

For_each_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

For_each_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

For_each_statementContext.prototype.variable_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_identifierContext);
    } else {
        return this.getTypedRuleContext(Variable_identifierContext,i);
    }
};

For_each_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

For_each_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

For_each_statementContext.prototype.COMMA = function() {
    return this.getToken(MParser.COMMA, 0);
};

For_each_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterFor_each_statement(this);
	}
};

For_each_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitFor_each_statement(this);
	}
};




MParser.For_each_statementContext = For_each_statementContext;

MParser.prototype.for_each_statement = function() {

    var localctx = new For_each_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, MParser.RULE_for_each_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 974;
        this.match(MParser.FOR);
        this.state = 975;
        localctx.name1 = this.variable_identifier();
        this.state = 978;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.COMMA) {
            this.state = 976;
            this.match(MParser.COMMA);
            this.state = 977;
            localctx.name2 = this.variable_identifier();
        }

        this.state = 980;
        this.match(MParser.IN);
        this.state = 981;
        localctx.source = this.expression(0);
        this.state = 982;
        this.match(MParser.COLON);
        this.state = 983;
        this.indent();
        this.state = 984;
        localctx.stmts = this.statement_list();
        this.state = 985;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Do_while_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_do_while_statement;
    this.stmts = null; // Statement_listContext
    this.exp = null; // ExpressionContext
    return this;
}

Do_while_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Do_while_statementContext.prototype.constructor = Do_while_statementContext;

Do_while_statementContext.prototype.DO = function() {
    return this.getToken(MParser.DO, 0);
};

Do_while_statementContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Do_while_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Do_while_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Do_while_statementContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

Do_while_statementContext.prototype.WHILE = function() {
    return this.getToken(MParser.WHILE, 0);
};

Do_while_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Do_while_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Do_while_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDo_while_statement(this);
	}
};

Do_while_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDo_while_statement(this);
	}
};




MParser.Do_while_statementContext = Do_while_statementContext;

MParser.prototype.do_while_statement = function() {

    var localctx = new Do_while_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, MParser.RULE_do_while_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 987;
        this.match(MParser.DO);
        this.state = 988;
        this.match(MParser.COLON);
        this.state = 989;
        this.indent();
        this.state = 990;
        localctx.stmts = this.statement_list();
        this.state = 991;
        this.dedent();
        this.state = 992;
        this.lfp();
        this.state = 993;
        this.match(MParser.WHILE);
        this.state = 994;
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function While_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_while_statement;
    this.exp = null; // ExpressionContext
    this.stmts = null; // Statement_listContext
    return this;
}

While_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
While_statementContext.prototype.constructor = While_statementContext;

While_statementContext.prototype.WHILE = function() {
    return this.getToken(MParser.WHILE, 0);
};

While_statementContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

While_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

While_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

While_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

While_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

While_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterWhile_statement(this);
	}
};

While_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitWhile_statement(this);
	}
};




MParser.While_statementContext = While_statementContext;

MParser.prototype.while_statement = function() {

    var localctx = new While_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, MParser.RULE_while_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 996;
        this.match(MParser.WHILE);
        this.state = 997;
        localctx.exp = this.expression(0);
        this.state = 998;
        this.match(MParser.COLON);
        this.state = 999;
        this.indent();
        this.state = 1000;
        localctx.stmts = this.statement_list();
        this.state = 1001;
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function If_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_if_statement;
    this.exp = null; // ExpressionContext
    this.stmts = null; // Statement_listContext
    this.elseIfs = null; // Else_if_statement_listContext
    this.elseStmts = null; // Statement_listContext
    return this;
}

If_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_statementContext.prototype.constructor = If_statementContext;

If_statementContext.prototype.IF = function() {
    return this.getToken(MParser.IF, 0);
};

If_statementContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.COLON);
    } else {
        return this.getToken(MParser.COLON, i);
    }
};


If_statementContext.prototype.indent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndentContext);
    } else {
        return this.getTypedRuleContext(IndentContext,i);
    }
};

If_statementContext.prototype.dedent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DedentContext);
    } else {
        return this.getTypedRuleContext(DedentContext,i);
    }
};

If_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

If_statementContext.prototype.statement_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Statement_listContext);
    } else {
        return this.getTypedRuleContext(Statement_listContext,i);
    }
};

If_statementContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

If_statementContext.prototype.ELSE = function() {
    return this.getToken(MParser.ELSE, 0);
};

If_statementContext.prototype.else_if_statement_list = function() {
    return this.getTypedRuleContext(Else_if_statement_listContext,0);
};

If_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterIf_statement(this);
	}
};

If_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitIf_statement(this);
	}
};




MParser.If_statementContext = If_statementContext;

MParser.prototype.if_statement = function() {

    var localctx = new If_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, MParser.RULE_if_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1003;
        this.match(MParser.IF);
        this.state = 1004;
        localctx.exp = this.expression(0);
        this.state = 1005;
        this.match(MParser.COLON);
        this.state = 1006;
        this.indent();
        this.state = 1007;
        localctx.stmts = this.statement_list();
        this.state = 1008;
        this.dedent();
        this.state = 1012;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
        if(la_===1) {
            this.state = 1009;
            this.lfp();
            this.state = 1010;
            localctx.elseIfs = this.else_if_statement_list(0);

        }
        this.state = 1021;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        if(la_===1) {
            this.state = 1014;
            this.lfp();
            this.state = 1015;
            this.match(MParser.ELSE);
            this.state = 1016;
            this.match(MParser.COLON);
            this.state = 1017;
            this.indent();
            this.state = 1018;
            localctx.elseStmts = this.statement_list();
            this.state = 1019;
            this.dedent();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Else_if_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_else_if_statement_list;
    return this;
}

Else_if_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Else_if_statement_listContext.prototype.constructor = Else_if_statement_listContext;


 
Else_if_statement_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ElseIfStatementListContext(parser, ctx) {
	Else_if_statement_listContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    this.stmts = null; // Statement_listContext;
    Else_if_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ElseIfStatementListContext.prototype = Object.create(Else_if_statement_listContext.prototype);
ElseIfStatementListContext.prototype.constructor = ElseIfStatementListContext;

MParser.ElseIfStatementListContext = ElseIfStatementListContext;

ElseIfStatementListContext.prototype.ELSE = function() {
    return this.getToken(MParser.ELSE, 0);
};

ElseIfStatementListContext.prototype.IF = function() {
    return this.getToken(MParser.IF, 0);
};

ElseIfStatementListContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

ElseIfStatementListContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

ElseIfStatementListContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

ElseIfStatementListContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElseIfStatementListContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
ElseIfStatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterElseIfStatementList(this);
	}
};

ElseIfStatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitElseIfStatementList(this);
	}
};


function ElseIfStatementListItemContext(parser, ctx) {
	Else_if_statement_listContext.call(this, parser);
    this.items = null; // Else_if_statement_listContext;
    this.exp = null; // ExpressionContext;
    this.stmts = null; // Statement_listContext;
    Else_if_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ElseIfStatementListItemContext.prototype = Object.create(Else_if_statement_listContext.prototype);
ElseIfStatementListItemContext.prototype.constructor = ElseIfStatementListItemContext;

MParser.ElseIfStatementListItemContext = ElseIfStatementListItemContext;

ElseIfStatementListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

ElseIfStatementListItemContext.prototype.ELSE = function() {
    return this.getToken(MParser.ELSE, 0);
};

ElseIfStatementListItemContext.prototype.IF = function() {
    return this.getToken(MParser.IF, 0);
};

ElseIfStatementListItemContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

ElseIfStatementListItemContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

ElseIfStatementListItemContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

ElseIfStatementListItemContext.prototype.else_if_statement_list = function() {
    return this.getTypedRuleContext(Else_if_statement_listContext,0);
};

ElseIfStatementListItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElseIfStatementListItemContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
ElseIfStatementListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterElseIfStatementListItem(this);
	}
};

ElseIfStatementListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitElseIfStatementListItem(this);
	}
};



MParser.prototype.else_if_statement_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Else_if_statement_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 78;
    this.enterRecursionRule(localctx, 78, MParser.RULE_else_if_statement_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new ElseIfStatementListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1024;
        this.match(MParser.ELSE);
        this.state = 1025;
        this.match(MParser.IF);
        this.state = 1026;
        localctx.exp = this.expression(0);
        this.state = 1027;
        this.match(MParser.COLON);
        this.state = 1028;
        this.indent();
        this.state = 1029;
        localctx.stmts = this.statement_list();
        this.state = 1030;
        this.dedent();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1044;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ElseIfStatementListItemContext(this, new Else_if_statement_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_else_if_statement_list);
                this.state = 1032;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1033;
                this.lfp();
                this.state = 1034;
                this.match(MParser.ELSE);
                this.state = 1035;
                this.match(MParser.IF);
                this.state = 1036;
                localctx.exp = this.expression(0);
                this.state = 1037;
                this.match(MParser.COLON);
                this.state = 1038;
                this.indent();
                this.state = 1039;
                localctx.stmts = this.statement_list();
                this.state = 1040;
                this.dedent(); 
            }
            this.state = 1046;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Raise_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_raise_statement;
    this.exp = null; // ExpressionContext
    return this;
}

Raise_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raise_statementContext.prototype.constructor = Raise_statementContext;

Raise_statementContext.prototype.RAISE = function() {
    return this.getToken(MParser.RAISE, 0);
};

Raise_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Raise_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterRaise_statement(this);
	}
};

Raise_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitRaise_statement(this);
	}
};




MParser.Raise_statementContext = Raise_statementContext;

MParser.prototype.raise_statement = function() {

    var localctx = new Raise_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, MParser.RULE_raise_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1047;
        this.match(MParser.RAISE);
        this.state = 1048;
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Try_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_try_statement;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Statement_listContext
    this.handlers = null; // Catch_statement_listContext
    this.anyStmts = null; // Statement_listContext
    this.finalStmts = null; // Statement_listContext
    return this;
}

Try_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Try_statementContext.prototype.constructor = Try_statementContext;

Try_statementContext.prototype.TRY = function() {
    return this.getToken(MParser.TRY, 0);
};

Try_statementContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.COLON);
    } else {
        return this.getToken(MParser.COLON, i);
    }
};


Try_statementContext.prototype.indent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndentContext);
    } else {
        return this.getTypedRuleContext(IndentContext,i);
    }
};

Try_statementContext.prototype.dedent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DedentContext);
    } else {
        return this.getTypedRuleContext(DedentContext,i);
    }
};

Try_statementContext.prototype.lfs = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfsContext);
    } else {
        return this.getTypedRuleContext(LfsContext,i);
    }
};

Try_statementContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Try_statementContext.prototype.statement_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Statement_listContext);
    } else {
        return this.getTypedRuleContext(Statement_listContext,i);
    }
};

Try_statementContext.prototype.EXCEPT = function() {
    return this.getToken(MParser.EXCEPT, 0);
};

Try_statementContext.prototype.FINALLY = function() {
    return this.getToken(MParser.FINALLY, 0);
};

Try_statementContext.prototype.catch_statement_list = function() {
    return this.getTypedRuleContext(Catch_statement_listContext,0);
};

Try_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterTry_statement(this);
	}
};

Try_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitTry_statement(this);
	}
};




MParser.Try_statementContext = Try_statementContext;

MParser.prototype.try_statement = function() {

    var localctx = new Try_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, MParser.RULE_try_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1050;
        this.match(MParser.TRY);
        this.state = 1051;
        localctx.name = this.variable_identifier();
        this.state = 1052;
        this.match(MParser.COLON);
        this.state = 1053;
        this.indent();
        this.state = 1054;
        localctx.stmts = this.statement_list();
        this.state = 1055;
        this.dedent();
        this.state = 1056;
        this.lfs();
        this.state = 1058;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        if(la_===1) {
            this.state = 1057;
            localctx.handlers = this.catch_statement_list();

        }
        this.state = 1067;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.EXCEPT) {
            this.state = 1060;
            this.match(MParser.EXCEPT);
            this.state = 1061;
            this.match(MParser.COLON);
            this.state = 1062;
            this.indent();
            this.state = 1063;
            localctx.anyStmts = this.statement_list();
            this.state = 1064;
            this.dedent();
            this.state = 1065;
            this.lfs();
        }

        this.state = 1076;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.FINALLY) {
            this.state = 1069;
            this.match(MParser.FINALLY);
            this.state = 1070;
            this.match(MParser.COLON);
            this.state = 1071;
            this.indent();
            this.state = 1072;
            localctx.finalStmts = this.statement_list();
            this.state = 1073;
            this.dedent();
            this.state = 1074;
            this.lfs();
        }

        this.state = 1078;
        this.lfs();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Catch_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_catch_statement;
    return this;
}

Catch_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Catch_statementContext.prototype.constructor = Catch_statementContext;


 
Catch_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CatchAtomicStatementContext(parser, ctx) {
	Catch_statementContext.call(this, parser);
    this.name = null; // Symbol_identifierContext;
    this.stmts = null; // Statement_listContext;
    Catch_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CatchAtomicStatementContext.prototype = Object.create(Catch_statementContext.prototype);
CatchAtomicStatementContext.prototype.constructor = CatchAtomicStatementContext;

MParser.CatchAtomicStatementContext = CatchAtomicStatementContext;

CatchAtomicStatementContext.prototype.EXCEPT = function() {
    return this.getToken(MParser.EXCEPT, 0);
};

CatchAtomicStatementContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

CatchAtomicStatementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

CatchAtomicStatementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

CatchAtomicStatementContext.prototype.lfs = function() {
    return this.getTypedRuleContext(LfsContext,0);
};

CatchAtomicStatementContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};

CatchAtomicStatementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
CatchAtomicStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCatchAtomicStatement(this);
	}
};

CatchAtomicStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCatchAtomicStatement(this);
	}
};


function CatchCollectionStatementContext(parser, ctx) {
	Catch_statementContext.call(this, parser);
    this.exp = null; // Symbol_listContext;
    this.stmts = null; // Statement_listContext;
    Catch_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CatchCollectionStatementContext.prototype = Object.create(Catch_statementContext.prototype);
CatchCollectionStatementContext.prototype.constructor = CatchCollectionStatementContext;

MParser.CatchCollectionStatementContext = CatchCollectionStatementContext;

CatchCollectionStatementContext.prototype.EXCEPT = function() {
    return this.getToken(MParser.EXCEPT, 0);
};

CatchCollectionStatementContext.prototype.IN = function() {
    return this.getToken(MParser.IN, 0);
};

CatchCollectionStatementContext.prototype.LBRAK = function() {
    return this.getToken(MParser.LBRAK, 0);
};

CatchCollectionStatementContext.prototype.RBRAK = function() {
    return this.getToken(MParser.RBRAK, 0);
};

CatchCollectionStatementContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

CatchCollectionStatementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

CatchCollectionStatementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

CatchCollectionStatementContext.prototype.lfs = function() {
    return this.getTypedRuleContext(LfsContext,0);
};

CatchCollectionStatementContext.prototype.symbol_list = function() {
    return this.getTypedRuleContext(Symbol_listContext,0);
};

CatchCollectionStatementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
CatchCollectionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCatchCollectionStatement(this);
	}
};

CatchCollectionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCatchCollectionStatement(this);
	}
};



MParser.Catch_statementContext = Catch_statementContext;

MParser.prototype.catch_statement = function() {

    var localctx = new Catch_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, MParser.RULE_catch_statement);
    try {
        this.state = 1099;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        switch(la_) {
        case 1:
            localctx = new CatchAtomicStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1080;
            this.match(MParser.EXCEPT);
            this.state = 1081;
            localctx.name = this.symbol_identifier();
            this.state = 1082;
            this.match(MParser.COLON);
            this.state = 1083;
            this.indent();
            this.state = 1084;
            localctx.stmts = this.statement_list();
            this.state = 1085;
            this.dedent();
            this.state = 1086;
            this.lfs();
            break;

        case 2:
            localctx = new CatchCollectionStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1088;
            this.match(MParser.EXCEPT);
            this.state = 1089;
            this.match(MParser.IN);
            this.state = 1090;
            this.match(MParser.LBRAK);
            this.state = 1091;
            localctx.exp = this.symbol_list();
            this.state = 1092;
            this.match(MParser.RBRAK);
            this.state = 1093;
            this.match(MParser.COLON);
            this.state = 1094;
            this.indent();
            this.state = 1095;
            localctx.stmts = this.statement_list();
            this.state = 1096;
            this.dedent();
            this.state = 1097;
            this.lfs();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Break_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_break_statement;
    return this;
}

Break_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Break_statementContext.prototype.constructor = Break_statementContext;

Break_statementContext.prototype.BREAK = function() {
    return this.getToken(MParser.BREAK, 0);
};

Break_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterBreak_statement(this);
	}
};

Break_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitBreak_statement(this);
	}
};




MParser.Break_statementContext = Break_statementContext;

MParser.prototype.break_statement = function() {

    var localctx = new Break_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, MParser.RULE_break_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1101;
        this.match(MParser.BREAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Return_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_return_statement;
    this.exp = null; // ExpressionContext
    return this;
}

Return_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_statementContext.prototype.constructor = Return_statementContext;

Return_statementContext.prototype.RETURN = function() {
    return this.getToken(MParser.RETURN, 0);
};

Return_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Return_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterReturn_statement(this);
	}
};

Return_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitReturn_statement(this);
	}
};




MParser.Return_statementContext = Return_statementContext;

MParser.prototype.return_statement = function() {

    var localctx = new Return_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, MParser.RULE_return_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1103;
        this.match(MParser.RETURN);
        this.state = 1105;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MParser.LPAR - 20)) | (1 << (MParser.LBRAK - 20)) | (1 << (MParser.LCURL - 20)) | (1 << (MParser.MINUS - 20)) | (1 << (MParser.LT - 20)) | (1 << (MParser.LTGT - 20)) | (1 << (MParser.LTCOLONGT - 20)))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.CODE - 52)) | (1 << (MParser.DOCUMENT - 52)) | (1 << (MParser.BLOB - 52)) | (1 << (MParser.IMAGE - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.ITERATOR - 52)) | (1 << (MParser.CURSOR - 52)) | (1 << (MParser.HTML - 52)) | (1 << (MParser.ANY - 52)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (MParser.EXECUTE - 103)) | (1 << (MParser.FETCH - 103)) | (1 << (MParser.MUTABLE - 103)) | (1 << (MParser.NONE - 103)) | (1 << (MParser.NOT - 103)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (MParser.READ - 138)) | (1 << (MParser.SELF - 138)) | (1 << (MParser.SORTED - 138)) | (1 << (MParser.THIS - 138)) | (1 << (MParser.BOOLEAN_LITERAL - 138)) | (1 << (MParser.CHAR_LITERAL - 138)) | (1 << (MParser.MIN_INTEGER - 138)) | (1 << (MParser.MAX_INTEGER - 138)) | (1 << (MParser.SYMBOL_IDENTIFIER - 138)) | (1 << (MParser.TYPE_IDENTIFIER - 138)))) !== 0) || ((((_la - 170)) & ~0x1f) == 0 && ((1 << (_la - 170)) & ((1 << (MParser.VARIABLE_IDENTIFIER - 170)) | (1 << (MParser.TEXT_LITERAL - 170)) | (1 << (MParser.UUID_LITERAL - 170)) | (1 << (MParser.INTEGER_LITERAL - 170)) | (1 << (MParser.HEXA_LITERAL - 170)) | (1 << (MParser.DECIMAL_LITERAL - 170)) | (1 << (MParser.DATETIME_LITERAL - 170)) | (1 << (MParser.TIME_LITERAL - 170)) | (1 << (MParser.DATE_LITERAL - 170)) | (1 << (MParser.PERIOD_LITERAL - 170)) | (1 << (MParser.VERSION_LITERAL - 170)))) !== 0)) {
            this.state = 1104;
            localctx.exp = this.expression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function IntDivideExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntDivideExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IntDivideExpressionContext.prototype.constructor = IntDivideExpressionContext;

MParser.IntDivideExpressionContext = IntDivideExpressionContext;

IntDivideExpressionContext.prototype.idivide = function() {
    return this.getTypedRuleContext(IdivideContext,0);
};

IntDivideExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
IntDivideExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterIntDivideExpression(this);
	}
};

IntDivideExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitIntDivideExpression(this);
	}
};


function HasAnyExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HasAnyExpressionContext.prototype = Object.create(ExpressionContext.prototype);
HasAnyExpressionContext.prototype.constructor = HasAnyExpressionContext;

MParser.HasAnyExpressionContext = HasAnyExpressionContext;

HasAnyExpressionContext.prototype.HAS = function() {
    return this.getToken(MParser.HAS, 0);
};

HasAnyExpressionContext.prototype.ANY = function() {
    return this.getToken(MParser.ANY, 0);
};

HasAnyExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
HasAnyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterHasAnyExpression(this);
	}
};

HasAnyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitHasAnyExpression(this);
	}
};


function HasExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HasExpressionContext.prototype = Object.create(ExpressionContext.prototype);
HasExpressionContext.prototype.constructor = HasExpressionContext;

MParser.HasExpressionContext = HasExpressionContext;

HasExpressionContext.prototype.HAS = function() {
    return this.getToken(MParser.HAS, 0);
};

HasExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
HasExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterHasExpression(this);
	}
};

HasExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitHasExpression(this);
	}
};


function TernaryExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.ifTrue = null; // ExpressionContext;
    this.test = null; // ExpressionContext;
    this.ifFalse = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TernaryExpressionContext.prototype = Object.create(ExpressionContext.prototype);
TernaryExpressionContext.prototype.constructor = TernaryExpressionContext;

MParser.TernaryExpressionContext = TernaryExpressionContext;

TernaryExpressionContext.prototype.IF = function() {
    return this.getToken(MParser.IF, 0);
};

TernaryExpressionContext.prototype.ELSE = function() {
    return this.getToken(MParser.ELSE, 0);
};

TernaryExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
TernaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterTernaryExpression(this);
	}
};

TernaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitTernaryExpression(this);
	}
};


function NotEqualsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotEqualsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotEqualsExpressionContext.prototype.constructor = NotEqualsExpressionContext;

MParser.NotEqualsExpressionContext = NotEqualsExpressionContext;

NotEqualsExpressionContext.prototype.XEQ = function() {
    return this.getToken(MParser.XEQ, 0);
};

NotEqualsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotEqualsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNotEqualsExpression(this);
	}
};

NotEqualsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNotEqualsExpression(this);
	}
};


function InExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InExpressionContext.prototype = Object.create(ExpressionContext.prototype);
InExpressionContext.prototype.constructor = InExpressionContext;

MParser.InExpressionContext = InExpressionContext;

InExpressionContext.prototype.IN = function() {
    return this.getToken(MParser.IN, 0);
};

InExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
InExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterInExpression(this);
	}
};

InExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitInExpression(this);
	}
};


function JsxExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Jsx_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JsxExpressionContext.prototype = Object.create(ExpressionContext.prototype);
JsxExpressionContext.prototype.constructor = JsxExpressionContext;

MParser.JsxExpressionContext = JsxExpressionContext;

JsxExpressionContext.prototype.jsx_expression = function() {
    return this.getTypedRuleContext(Jsx_expressionContext,0);
};
JsxExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsxExpression(this);
	}
};

JsxExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsxExpression(this);
	}
};


function NotExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotExpressionContext.prototype.constructor = NotExpressionContext;

MParser.NotExpressionContext = NotExpressionContext;

NotExpressionContext.prototype.NOT = function() {
    return this.getToken(MParser.NOT, 0);
};

NotExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
NotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNotExpression(this);
	}
};

NotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNotExpression(this);
	}
};


function GreaterThanExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GreaterThanExpressionContext.prototype = Object.create(ExpressionContext.prototype);
GreaterThanExpressionContext.prototype.constructor = GreaterThanExpressionContext;

MParser.GreaterThanExpressionContext = GreaterThanExpressionContext;

GreaterThanExpressionContext.prototype.GT = function() {
    return this.getToken(MParser.GT, 0);
};

GreaterThanExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
GreaterThanExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterGreaterThanExpression(this);
	}
};

GreaterThanExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitGreaterThanExpression(this);
	}
};


function OrExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OrExpressionContext.prototype = Object.create(ExpressionContext.prototype);
OrExpressionContext.prototype.constructor = OrExpressionContext;

MParser.OrExpressionContext = OrExpressionContext;

OrExpressionContext.prototype.OR = function() {
    return this.getToken(MParser.OR, 0);
};

OrExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
OrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterOrExpression(this);
	}
};

OrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitOrExpression(this);
	}
};


function CodeExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CodeExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CodeExpressionContext.prototype.constructor = CodeExpressionContext;

MParser.CodeExpressionContext = CodeExpressionContext;

CodeExpressionContext.prototype.CODE = function() {
    return this.getToken(MParser.CODE, 0);
};

CodeExpressionContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

CodeExpressionContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

CodeExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
CodeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCodeExpression(this);
	}
};

CodeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCodeExpression(this);
	}
};


function LessThanOrEqualExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LessThanOrEqualExpressionContext.prototype = Object.create(ExpressionContext.prototype);
LessThanOrEqualExpressionContext.prototype.constructor = LessThanOrEqualExpressionContext;

MParser.LessThanOrEqualExpressionContext = LessThanOrEqualExpressionContext;

LessThanOrEqualExpressionContext.prototype.LTE = function() {
    return this.getToken(MParser.LTE, 0);
};

LessThanOrEqualExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
LessThanOrEqualExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterLessThanOrEqualExpression(this);
	}
};

LessThanOrEqualExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitLessThanOrEqualExpression(this);
	}
};


function NotHasAnyExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotHasAnyExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotHasAnyExpressionContext.prototype.constructor = NotHasAnyExpressionContext;

MParser.NotHasAnyExpressionContext = NotHasAnyExpressionContext;

NotHasAnyExpressionContext.prototype.NOT = function() {
    return this.getToken(MParser.NOT, 0);
};

NotHasAnyExpressionContext.prototype.HAS = function() {
    return this.getToken(MParser.HAS, 0);
};

NotHasAnyExpressionContext.prototype.ANY = function() {
    return this.getToken(MParser.ANY, 0);
};

NotHasAnyExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotHasAnyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNotHasAnyExpression(this);
	}
};

NotHasAnyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNotHasAnyExpression(this);
	}
};


function AndExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AndExpressionContext.prototype = Object.create(ExpressionContext.prototype);
AndExpressionContext.prototype.constructor = AndExpressionContext;

MParser.AndExpressionContext = AndExpressionContext;

AndExpressionContext.prototype.AND = function() {
    return this.getToken(MParser.AND, 0);
};

AndExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
AndExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAndExpression(this);
	}
};

AndExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAndExpression(this);
	}
};


function ArrowExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Arrow_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrowExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ArrowExpressionContext.prototype.constructor = ArrowExpressionContext;

MParser.ArrowExpressionContext = ArrowExpressionContext;

ArrowExpressionContext.prototype.arrow_expression = function() {
    return this.getTypedRuleContext(Arrow_expressionContext,0);
};
ArrowExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterArrowExpression(this);
	}
};

ArrowExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitArrowExpression(this);
	}
};


function NotHasExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotHasExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotHasExpressionContext.prototype.constructor = NotHasExpressionContext;

MParser.NotHasExpressionContext = NotHasExpressionContext;

NotHasExpressionContext.prototype.NOT = function() {
    return this.getToken(MParser.NOT, 0);
};

NotHasExpressionContext.prototype.HAS = function() {
    return this.getToken(MParser.HAS, 0);
};

NotHasExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotHasExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNotHasExpression(this);
	}
};

NotHasExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNotHasExpression(this);
	}
};


function ClosureExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Closure_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClosureExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ClosureExpressionContext.prototype.constructor = ClosureExpressionContext;

MParser.ClosureExpressionContext = ClosureExpressionContext;

ClosureExpressionContext.prototype.closure_expression = function() {
    return this.getTypedRuleContext(Closure_expressionContext,0);
};
ClosureExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterClosureExpression(this);
	}
};

ClosureExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitClosureExpression(this);
	}
};


function NotHasAllExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotHasAllExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotHasAllExpressionContext.prototype.constructor = NotHasAllExpressionContext;

MParser.NotHasAllExpressionContext = NotHasAllExpressionContext;

NotHasAllExpressionContext.prototype.NOT = function() {
    return this.getToken(MParser.NOT, 0);
};

NotHasAllExpressionContext.prototype.HAS = function() {
    return this.getToken(MParser.HAS, 0);
};

NotHasAllExpressionContext.prototype.ALL = function() {
    return this.getToken(MParser.ALL, 0);
};

NotHasAllExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotHasAllExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNotHasAllExpression(this);
	}
};

NotHasAllExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNotHasAllExpression(this);
	}
};


function ContainsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ContainsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ContainsExpressionContext.prototype.constructor = ContainsExpressionContext;

MParser.ContainsExpressionContext = ContainsExpressionContext;

ContainsExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(MParser.CONTAINS, 0);
};

ContainsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ContainsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterContainsExpression(this);
	}
};

ContainsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitContainsExpression(this);
	}
};


function FilteredListExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.src = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FilteredListExpressionContext.prototype = Object.create(ExpressionContext.prototype);
FilteredListExpressionContext.prototype.constructor = FilteredListExpressionContext;

MParser.FilteredListExpressionContext = FilteredListExpressionContext;

FilteredListExpressionContext.prototype.filtered_list_suffix = function() {
    return this.getTypedRuleContext(Filtered_list_suffixContext,0);
};

FilteredListExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
FilteredListExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterFilteredListExpression(this);
	}
};

FilteredListExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitFilteredListExpression(this);
	}
};


function NotContainsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotContainsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotContainsExpressionContext.prototype.constructor = NotContainsExpressionContext;

MParser.NotContainsExpressionContext = NotContainsExpressionContext;

NotContainsExpressionContext.prototype.NOT = function() {
    return this.getToken(MParser.NOT, 0);
};

NotContainsExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(MParser.CONTAINS, 0);
};

NotContainsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotContainsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNotContainsExpression(this);
	}
};

NotContainsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNotContainsExpression(this);
	}
};


function MultiplyExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiplyExpressionContext.prototype = Object.create(ExpressionContext.prototype);
MultiplyExpressionContext.prototype.constructor = MultiplyExpressionContext;

MParser.MultiplyExpressionContext = MultiplyExpressionContext;

MultiplyExpressionContext.prototype.multiply = function() {
    return this.getTypedRuleContext(MultiplyContext,0);
};

MultiplyExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
MultiplyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMultiplyExpression(this);
	}
};

MultiplyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMultiplyExpression(this);
	}
};


function RoughlyEqualsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RoughlyEqualsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
RoughlyEqualsExpressionContext.prototype.constructor = RoughlyEqualsExpressionContext;

MParser.RoughlyEqualsExpressionContext = RoughlyEqualsExpressionContext;

RoughlyEqualsExpressionContext.prototype.TEQ = function() {
    return this.getToken(MParser.TEQ, 0);
};

RoughlyEqualsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
RoughlyEqualsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterRoughlyEqualsExpression(this);
	}
};

RoughlyEqualsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitRoughlyEqualsExpression(this);
	}
};


function ExecuteExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExecuteExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ExecuteExpressionContext.prototype.constructor = ExecuteExpressionContext;

MParser.ExecuteExpressionContext = ExecuteExpressionContext;

ExecuteExpressionContext.prototype.EXECUTE = function() {
    return this.getToken(MParser.EXECUTE, 0);
};

ExecuteExpressionContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

ExecuteExpressionContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

ExecuteExpressionContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
ExecuteExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterExecuteExpression(this);
	}
};

ExecuteExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitExecuteExpression(this);
	}
};


function GreaterThanOrEqualExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GreaterThanOrEqualExpressionContext.prototype = Object.create(ExpressionContext.prototype);
GreaterThanOrEqualExpressionContext.prototype.constructor = GreaterThanOrEqualExpressionContext;

MParser.GreaterThanOrEqualExpressionContext = GreaterThanOrEqualExpressionContext;

GreaterThanOrEqualExpressionContext.prototype.GTE = function() {
    return this.getToken(MParser.GTE, 0);
};

GreaterThanOrEqualExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
GreaterThanOrEqualExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterGreaterThanOrEqualExpression(this);
	}
};

GreaterThanOrEqualExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitGreaterThanOrEqualExpression(this);
	}
};


function NotInExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotInExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotInExpressionContext.prototype.constructor = NotInExpressionContext;

MParser.NotInExpressionContext = NotInExpressionContext;

NotInExpressionContext.prototype.NOT = function() {
    return this.getToken(MParser.NOT, 0);
};

NotInExpressionContext.prototype.IN = function() {
    return this.getToken(MParser.IN, 0);
};

NotInExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotInExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNotInExpression(this);
	}
};

NotInExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNotInExpression(this);
	}
};


function IteratorExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    this.name = null; // Variable_identifierContext;
    this.source = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IteratorExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IteratorExpressionContext.prototype.constructor = IteratorExpressionContext;

MParser.IteratorExpressionContext = IteratorExpressionContext;

IteratorExpressionContext.prototype.FOR = function() {
    return this.getToken(MParser.FOR, 0);
};

IteratorExpressionContext.prototype.EACH = function() {
    return this.getToken(MParser.EACH, 0);
};

IteratorExpressionContext.prototype.IN = function() {
    return this.getToken(MParser.IN, 0);
};

IteratorExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

IteratorExpressionContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
IteratorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterIteratorExpression(this);
	}
};

IteratorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitIteratorExpression(this);
	}
};


function IsNotExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // Is_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsNotExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IsNotExpressionContext.prototype.constructor = IsNotExpressionContext;

MParser.IsNotExpressionContext = IsNotExpressionContext;

IsNotExpressionContext.prototype.IS = function() {
    return this.getToken(MParser.IS, 0);
};

IsNotExpressionContext.prototype.NOT = function() {
    return this.getToken(MParser.NOT, 0);
};

IsNotExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IsNotExpressionContext.prototype.is_expression = function() {
    return this.getTypedRuleContext(Is_expressionContext,0);
};
IsNotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterIsNotExpression(this);
	}
};

IsNotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitIsNotExpression(this);
	}
};


function DivideExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DivideExpressionContext.prototype = Object.create(ExpressionContext.prototype);
DivideExpressionContext.prototype.constructor = DivideExpressionContext;

MParser.DivideExpressionContext = DivideExpressionContext;

DivideExpressionContext.prototype.divide = function() {
    return this.getTypedRuleContext(DivideContext,0);
};

DivideExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
DivideExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDivideExpression(this);
	}
};

DivideExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDivideExpression(this);
	}
};


function IsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // Is_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IsExpressionContext.prototype.constructor = IsExpressionContext;

MParser.IsExpressionContext = IsExpressionContext;

IsExpressionContext.prototype.IS = function() {
    return this.getToken(MParser.IS, 0);
};

IsExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IsExpressionContext.prototype.is_expression = function() {
    return this.getTypedRuleContext(Is_expressionContext,0);
};
IsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterIsExpression(this);
	}
};

IsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitIsExpression(this);
	}
};


function MinusExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MinusExpressionContext.prototype = Object.create(ExpressionContext.prototype);
MinusExpressionContext.prototype.constructor = MinusExpressionContext;

MParser.MinusExpressionContext = MinusExpressionContext;

MinusExpressionContext.prototype.MINUS = function() {
    return this.getToken(MParser.MINUS, 0);
};

MinusExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
MinusExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMinusExpression(this);
	}
};

MinusExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMinusExpression(this);
	}
};


function AddExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.op = null; // Token;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AddExpressionContext.prototype = Object.create(ExpressionContext.prototype);
AddExpressionContext.prototype.constructor = AddExpressionContext;

MParser.AddExpressionContext = AddExpressionContext;

AddExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AddExpressionContext.prototype.PLUS = function() {
    return this.getToken(MParser.PLUS, 0);
};

AddExpressionContext.prototype.MINUS = function() {
    return this.getToken(MParser.MINUS, 0);
};
AddExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAddExpression(this);
	}
};

AddExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAddExpression(this);
	}
};


function HasAllExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HasAllExpressionContext.prototype = Object.create(ExpressionContext.prototype);
HasAllExpressionContext.prototype.constructor = HasAllExpressionContext;

MParser.HasAllExpressionContext = HasAllExpressionContext;

HasAllExpressionContext.prototype.HAS = function() {
    return this.getToken(MParser.HAS, 0);
};

HasAllExpressionContext.prototype.ALL = function() {
    return this.getToken(MParser.ALL, 0);
};

HasAllExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
HasAllExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterHasAllExpression(this);
	}
};

HasAllExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitHasAllExpression(this);
	}
};


function InstanceExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Instance_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstanceExpressionContext.prototype = Object.create(ExpressionContext.prototype);
InstanceExpressionContext.prototype.constructor = InstanceExpressionContext;

MParser.InstanceExpressionContext = InstanceExpressionContext;

InstanceExpressionContext.prototype.instance_expression = function() {
    return this.getTypedRuleContext(Instance_expressionContext,0);
};
InstanceExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterInstanceExpression(this);
	}
};

InstanceExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitInstanceExpression(this);
	}
};


function MutableInstanceExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Mutable_instance_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MutableInstanceExpressionContext.prototype = Object.create(ExpressionContext.prototype);
MutableInstanceExpressionContext.prototype.constructor = MutableInstanceExpressionContext;

MParser.MutableInstanceExpressionContext = MutableInstanceExpressionContext;

MutableInstanceExpressionContext.prototype.mutable_instance_expression = function() {
    return this.getTypedRuleContext(Mutable_instance_expressionContext,0);
};
MutableInstanceExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMutableInstanceExpression(this);
	}
};

MutableInstanceExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMutableInstanceExpression(this);
	}
};


function CssExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Css_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CssExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CssExpressionContext.prototype.constructor = CssExpressionContext;

MParser.CssExpressionContext = CssExpressionContext;

CssExpressionContext.prototype.css_expression = function() {
    return this.getTypedRuleContext(Css_expressionContext,0);
};
CssExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCssExpression(this);
	}
};

CssExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCssExpression(this);
	}
};


function CastExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // Category_or_any_typeContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CastExpressionContext.prototype.constructor = CastExpressionContext;

MParser.CastExpressionContext = CastExpressionContext;

CastExpressionContext.prototype.AS = function() {
    return this.getToken(MParser.AS, 0);
};

CastExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CastExpressionContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};
CastExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCastExpression(this);
	}
};

CastExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCastExpression(this);
	}
};


function ModuloExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ModuloExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ModuloExpressionContext.prototype.constructor = ModuloExpressionContext;

MParser.ModuloExpressionContext = ModuloExpressionContext;

ModuloExpressionContext.prototype.modulo = function() {
    return this.getTypedRuleContext(ModuloContext,0);
};

ModuloExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ModuloExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterModuloExpression(this);
	}
};

ModuloExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitModuloExpression(this);
	}
};


function LessThanExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LessThanExpressionContext.prototype = Object.create(ExpressionContext.prototype);
LessThanExpressionContext.prototype.constructor = LessThanExpressionContext;

MParser.LessThanExpressionContext = LessThanExpressionContext;

LessThanExpressionContext.prototype.LT = function() {
    return this.getToken(MParser.LT, 0);
};

LessThanExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
LessThanExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterLessThanExpression(this);
	}
};

LessThanExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitLessThanExpression(this);
	}
};


function EqualsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
EqualsExpressionContext.prototype.constructor = EqualsExpressionContext;

MParser.EqualsExpressionContext = EqualsExpressionContext;

EqualsExpressionContext.prototype.EQ2 = function() {
    return this.getToken(MParser.EQ2, 0);
};

EqualsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
EqualsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterEqualsExpression(this);
	}
};

EqualsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitEqualsExpression(this);
	}
};



MParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 90;
    this.enterRecursionRule(localctx, 90, MParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1128;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        switch(la_) {
        case 1:
            localctx = new CssExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1108;
            localctx.exp = this.css_expression();
            break;

        case 2:
            localctx = new JsxExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1109;
            localctx.exp = this.jsx_expression();
            break;

        case 3:
            localctx = new InstanceExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1110;
            localctx.exp = this.instance_expression(0);
            break;

        case 4:
            localctx = new MutableInstanceExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1111;
            localctx.exp = this.mutable_instance_expression(0);
            break;

        case 5:
            localctx = new ArrowExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1112;
            localctx.exp = this.arrow_expression();
            break;

        case 6:
            localctx = new MinusExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1113;
            this.match(MParser.MINUS);
            this.state = 1114;
            localctx.exp = this.expression(34);
            break;

        case 7:
            localctx = new NotExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1115;
            this.match(MParser.NOT);
            this.state = 1116;
            localctx.exp = this.expression(33);
            break;

        case 8:
            localctx = new CodeExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1117;
            this.match(MParser.CODE);
            this.state = 1118;
            this.match(MParser.LPAR);
            this.state = 1119;
            localctx.exp = this.expression(0);
            this.state = 1120;
            this.match(MParser.RPAR);
            break;

        case 9:
            localctx = new ExecuteExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1122;
            this.match(MParser.EXECUTE);
            this.state = 1123;
            this.match(MParser.LPAR);
            this.state = 1124;
            localctx.name = this.variable_identifier();
            this.state = 1125;
            this.match(MParser.RPAR);
            break;

        case 10:
            localctx = new ClosureExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1127;
            localctx.exp = this.closure_expression();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1242;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,59,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1240;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new MultiplyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1130;
                    if (!( this.precpred(this._ctx, 32))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 32)");
                    }
                    this.state = 1131;
                    this.multiply();
                    this.state = 1132;
                    localctx.right = this.expression(33);
                    break;

                case 2:
                    localctx = new DivideExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1134;
                    if (!( this.precpred(this._ctx, 31))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 31)");
                    }
                    this.state = 1135;
                    this.divide();
                    this.state = 1136;
                    localctx.right = this.expression(32);
                    break;

                case 3:
                    localctx = new ModuloExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1138;
                    if (!( this.precpred(this._ctx, 30))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 30)");
                    }
                    this.state = 1139;
                    this.modulo();
                    this.state = 1140;
                    localctx.right = this.expression(31);
                    break;

                case 4:
                    localctx = new IntDivideExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1142;
                    if (!( this.precpred(this._ctx, 29))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 29)");
                    }
                    this.state = 1143;
                    this.idivide();
                    this.state = 1144;
                    localctx.right = this.expression(30);
                    break;

                case 5:
                    localctx = new AddExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1146;
                    if (!( this.precpred(this._ctx, 28))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
                    }
                    this.state = 1147;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===MParser.PLUS || _la===MParser.MINUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1148;
                    localctx.right = this.expression(29);
                    break;

                case 6:
                    localctx = new LessThanExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1149;
                    if (!( this.precpred(this._ctx, 26))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
                    }
                    this.state = 1150;
                    this.match(MParser.LT);
                    this.state = 1151;
                    localctx.right = this.expression(27);
                    break;

                case 7:
                    localctx = new LessThanOrEqualExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1152;
                    if (!( this.precpred(this._ctx, 25))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                    }
                    this.state = 1153;
                    this.match(MParser.LTE);
                    this.state = 1154;
                    localctx.right = this.expression(26);
                    break;

                case 8:
                    localctx = new GreaterThanExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1155;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 1156;
                    this.match(MParser.GT);
                    this.state = 1157;
                    localctx.right = this.expression(25);
                    break;

                case 9:
                    localctx = new GreaterThanOrEqualExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1158;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 1159;
                    this.match(MParser.GTE);
                    this.state = 1160;
                    localctx.right = this.expression(24);
                    break;

                case 10:
                    localctx = new EqualsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1161;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 1162;
                    this.match(MParser.EQ2);
                    this.state = 1163;
                    localctx.right = this.expression(21);
                    break;

                case 11:
                    localctx = new NotEqualsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1164;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 1165;
                    this.match(MParser.XEQ);
                    this.state = 1166;
                    localctx.right = this.expression(20);
                    break;

                case 12:
                    localctx = new RoughlyEqualsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1167;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 1168;
                    this.match(MParser.TEQ);
                    this.state = 1169;
                    localctx.right = this.expression(19);
                    break;

                case 13:
                    localctx = new ContainsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1170;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 1171;
                    this.match(MParser.CONTAINS);
                    this.state = 1172;
                    localctx.right = this.expression(18);
                    break;

                case 14:
                    localctx = new InExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1173;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 1174;
                    this.match(MParser.IN);
                    this.state = 1175;
                    localctx.right = this.expression(17);
                    break;

                case 15:
                    localctx = new HasExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1176;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 1177;
                    this.match(MParser.HAS);
                    this.state = 1178;
                    localctx.right = this.expression(16);
                    break;

                case 16:
                    localctx = new HasAllExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1179;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 1180;
                    this.match(MParser.HAS);
                    this.state = 1181;
                    this.match(MParser.ALL);
                    this.state = 1182;
                    localctx.right = this.expression(15);
                    break;

                case 17:
                    localctx = new HasAnyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1183;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 1184;
                    this.match(MParser.HAS);
                    this.state = 1185;
                    this.match(MParser.ANY);
                    this.state = 1186;
                    localctx.right = this.expression(14);
                    break;

                case 18:
                    localctx = new NotContainsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1187;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 1188;
                    this.match(MParser.NOT);
                    this.state = 1189;
                    this.match(MParser.CONTAINS);
                    this.state = 1190;
                    localctx.right = this.expression(13);
                    break;

                case 19:
                    localctx = new NotInExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1191;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 1192;
                    this.match(MParser.NOT);
                    this.state = 1193;
                    this.match(MParser.IN);
                    this.state = 1194;
                    localctx.right = this.expression(12);
                    break;

                case 20:
                    localctx = new NotHasExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1195;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 1196;
                    this.match(MParser.NOT);
                    this.state = 1197;
                    this.match(MParser.HAS);
                    this.state = 1198;
                    localctx.right = this.expression(11);
                    break;

                case 21:
                    localctx = new NotHasAllExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1199;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 1200;
                    this.match(MParser.NOT);
                    this.state = 1201;
                    this.match(MParser.HAS);
                    this.state = 1202;
                    this.match(MParser.ALL);
                    this.state = 1203;
                    localctx.right = this.expression(10);
                    break;

                case 22:
                    localctx = new NotHasAnyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1204;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 1205;
                    this.match(MParser.NOT);
                    this.state = 1206;
                    this.match(MParser.HAS);
                    this.state = 1207;
                    this.match(MParser.ANY);
                    this.state = 1208;
                    localctx.right = this.expression(9);
                    break;

                case 23:
                    localctx = new OrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1209;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 1210;
                    this.match(MParser.OR);
                    this.state = 1211;
                    localctx.right = this.expression(8);
                    break;

                case 24:
                    localctx = new AndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1212;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 1213;
                    this.match(MParser.AND);
                    this.state = 1214;
                    localctx.right = this.expression(7);
                    break;

                case 25:
                    localctx = new TernaryExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.ifTrue = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1215;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1216;
                    this.match(MParser.IF);
                    this.state = 1217;
                    localctx.test = this.expression(0);
                    this.state = 1218;
                    this.match(MParser.ELSE);
                    this.state = 1219;
                    localctx.ifFalse = this.expression(6);
                    break;

                case 26:
                    localctx = new IteratorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.exp = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1221;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1222;
                    this.match(MParser.FOR);
                    this.state = 1223;
                    this.match(MParser.EACH);
                    this.state = 1224;
                    localctx.name = this.variable_identifier();
                    this.state = 1225;
                    this.match(MParser.IN);
                    this.state = 1226;
                    localctx.source = this.expression(2);
                    break;

                case 27:
                    localctx = new FilteredListExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.src = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1228;
                    if (!( this.precpred(this._ctx, 35))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 35)");
                    }
                    this.state = 1229;
                    this.filtered_list_suffix();
                    break;

                case 28:
                    localctx = new CastExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1230;
                    if (!( this.precpred(this._ctx, 27))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
                    }
                    this.state = 1231;
                    this.match(MParser.AS);
                    this.state = 1232;
                    localctx.right = this.category_or_any_type();
                    break;

                case 29:
                    localctx = new IsNotExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1233;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 1234;
                    this.match(MParser.IS);
                    this.state = 1235;
                    this.match(MParser.NOT);
                    this.state = 1236;
                    localctx.right = this.is_expression();
                    break;

                case 30:
                    localctx = new IsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_expression);
                    this.state = 1237;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 1238;
                    this.match(MParser.IS);
                    this.state = 1239;
                    localctx.right = this.is_expression();
                    break;

                } 
            }
            this.state = 1244;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,59,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Closure_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_closure_expression;
    this.name = null; // Type_identifierContext
    return this;
}

Closure_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Closure_expressionContext.prototype.constructor = Closure_expressionContext;

Closure_expressionContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Closure_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterClosure_expression(this);
	}
};

Closure_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitClosure_expression(this);
	}
};




MParser.Closure_expressionContext = Closure_expressionContext;

MParser.prototype.closure_expression = function() {

    var localctx = new Closure_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, MParser.RULE_closure_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1245;
        localctx.name = this.type_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Selectable_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_selectable_expression;
    return this;
}

Selectable_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Selectable_expressionContext.prototype.constructor = Selectable_expressionContext;


 
Selectable_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ThisExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // This_expressionContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ThisExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
ThisExpressionContext.prototype.constructor = ThisExpressionContext;

MParser.ThisExpressionContext = ThisExpressionContext;

ThisExpressionContext.prototype.this_expression = function() {
    return this.getTypedRuleContext(This_expressionContext,0);
};
ThisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterThisExpression(this);
	}
};

ThisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitThisExpression(this);
	}
};


function ParenthesisExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // Parenthesis_expressionContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesisExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
ParenthesisExpressionContext.prototype.constructor = ParenthesisExpressionContext;

MParser.ParenthesisExpressionContext = ParenthesisExpressionContext;

ParenthesisExpressionContext.prototype.parenthesis_expression = function() {
    return this.getTypedRuleContext(Parenthesis_expressionContext,0);
};
ParenthesisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterParenthesisExpression(this);
	}
};

ParenthesisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitParenthesisExpression(this);
	}
};


function LiteralExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // Literal_expressionContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
LiteralExpressionContext.prototype.constructor = LiteralExpressionContext;

MParser.LiteralExpressionContext = LiteralExpressionContext;

LiteralExpressionContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};
LiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterLiteralExpression(this);
	}
};

LiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitLiteralExpression(this);
	}
};


function MethodExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // Method_expressionContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
MethodExpressionContext.prototype.constructor = MethodExpressionContext;

MParser.MethodExpressionContext = MethodExpressionContext;

MethodExpressionContext.prototype.method_expression = function() {
    return this.getTypedRuleContext(Method_expressionContext,0);
};
MethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMethodExpression(this);
	}
};

MethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMethodExpression(this);
	}
};


function IdentifierExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // IdentifierContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdentifierExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
IdentifierExpressionContext.prototype.constructor = IdentifierExpressionContext;

MParser.IdentifierExpressionContext = IdentifierExpressionContext;

IdentifierExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
IdentifierExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterIdentifierExpression(this);
	}
};

IdentifierExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitIdentifierExpression(this);
	}
};



MParser.Selectable_expressionContext = Selectable_expressionContext;

MParser.prototype.selectable_expression = function() {

    var localctx = new Selectable_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, MParser.RULE_selectable_expression);
    try {
        this.state = 1252;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1247;
            localctx.exp = this.method_expression();
            break;

        case 2:
            localctx = new ParenthesisExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1248;
            localctx.exp = this.parenthesis_expression();
            break;

        case 3:
            localctx = new LiteralExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1249;
            localctx.exp = this.literal_expression();
            break;

        case 4:
            localctx = new IdentifierExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1250;
            localctx.exp = this.identifier();
            break;

        case 5:
            localctx = new ThisExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1251;
            localctx.exp = this.this_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Instance_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_instance_expression;
    return this;
}

Instance_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Instance_expressionContext.prototype.constructor = Instance_expressionContext;


 
Instance_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function SelectorExpressionContext(parser, ctx) {
	Instance_expressionContext.call(this, parser);
    this.parent = null; // Instance_expressionContext;
    this.selector = null; // Instance_selectorContext;
    Instance_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectorExpressionContext.prototype = Object.create(Instance_expressionContext.prototype);
SelectorExpressionContext.prototype.constructor = SelectorExpressionContext;

MParser.SelectorExpressionContext = SelectorExpressionContext;

SelectorExpressionContext.prototype.instance_expression = function() {
    return this.getTypedRuleContext(Instance_expressionContext,0);
};

SelectorExpressionContext.prototype.instance_selector = function() {
    return this.getTypedRuleContext(Instance_selectorContext,0);
};
SelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSelectorExpression(this);
	}
};

SelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSelectorExpression(this);
	}
};


function SelectableExpressionContext(parser, ctx) {
	Instance_expressionContext.call(this, parser);
    this.parent = null; // Selectable_expressionContext;
    Instance_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectableExpressionContext.prototype = Object.create(Instance_expressionContext.prototype);
SelectableExpressionContext.prototype.constructor = SelectableExpressionContext;

MParser.SelectableExpressionContext = SelectableExpressionContext;

SelectableExpressionContext.prototype.selectable_expression = function() {
    return this.getTypedRuleContext(Selectable_expressionContext,0);
};
SelectableExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSelectableExpression(this);
	}
};

SelectableExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSelectableExpression(this);
	}
};



MParser.prototype.instance_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Instance_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 96;
    this.enterRecursionRule(localctx, 96, MParser.RULE_instance_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new SelectableExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1255;
        localctx.parent = this.selectable_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1261;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new SelectorExpressionContext(this, new Instance_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_instance_expression);
                this.state = 1257;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1258;
                localctx.selector = this.instance_selector(); 
            }
            this.state = 1263;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Mutable_instance_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_mutable_instance_expression;
    return this;
}

Mutable_instance_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mutable_instance_expressionContext.prototype.constructor = Mutable_instance_expressionContext;


 
Mutable_instance_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function MutableSelectableExpressionContext(parser, ctx) {
	Mutable_instance_expressionContext.call(this, parser);
    this.exp = null; // IdentifierContext;
    Mutable_instance_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MutableSelectableExpressionContext.prototype = Object.create(Mutable_instance_expressionContext.prototype);
MutableSelectableExpressionContext.prototype.constructor = MutableSelectableExpressionContext;

MParser.MutableSelectableExpressionContext = MutableSelectableExpressionContext;

MutableSelectableExpressionContext.prototype.MUTABLE = function() {
    return this.getToken(MParser.MUTABLE, 0);
};

MutableSelectableExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
MutableSelectableExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMutableSelectableExpression(this);
	}
};

MutableSelectableExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMutableSelectableExpression(this);
	}
};


function MutableSelectorExpressionContext(parser, ctx) {
	Mutable_instance_expressionContext.call(this, parser);
    this.parent = null; // Mutable_instance_expressionContext;
    this.selector = null; // Instance_selectorContext;
    Mutable_instance_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MutableSelectorExpressionContext.prototype = Object.create(Mutable_instance_expressionContext.prototype);
MutableSelectorExpressionContext.prototype.constructor = MutableSelectorExpressionContext;

MParser.MutableSelectorExpressionContext = MutableSelectorExpressionContext;

MutableSelectorExpressionContext.prototype.mutable_instance_expression = function() {
    return this.getTypedRuleContext(Mutable_instance_expressionContext,0);
};

MutableSelectorExpressionContext.prototype.instance_selector = function() {
    return this.getTypedRuleContext(Instance_selectorContext,0);
};
MutableSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMutableSelectorExpression(this);
	}
};

MutableSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMutableSelectorExpression(this);
	}
};



MParser.prototype.mutable_instance_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Mutable_instance_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 98;
    this.enterRecursionRule(localctx, 98, MParser.RULE_mutable_instance_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new MutableSelectableExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1265;
        this.match(MParser.MUTABLE);
        this.state = 1266;
        localctx.exp = this.identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1272;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new MutableSelectorExpressionContext(this, new Mutable_instance_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_mutable_instance_expression);
                this.state = 1268;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1269;
                localctx.selector = this.instance_selector(); 
            }
            this.state = 1274;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_method_expression;
    return this;
}

Method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_expressionContext.prototype.constructor = Method_expressionContext;

Method_expressionContext.prototype.blob_expression = function() {
    return this.getTypedRuleContext(Blob_expressionContext,0);
};

Method_expressionContext.prototype.document_expression = function() {
    return this.getTypedRuleContext(Document_expressionContext,0);
};

Method_expressionContext.prototype.fetch_expression = function() {
    return this.getTypedRuleContext(Fetch_expressionContext,0);
};

Method_expressionContext.prototype.read_all_expression = function() {
    return this.getTypedRuleContext(Read_all_expressionContext,0);
};

Method_expressionContext.prototype.read_one_expression = function() {
    return this.getTypedRuleContext(Read_one_expressionContext,0);
};

Method_expressionContext.prototype.sorted_expression = function() {
    return this.getTypedRuleContext(Sorted_expressionContext,0);
};

Method_expressionContext.prototype.method_call_expression = function() {
    return this.getTypedRuleContext(Method_call_expressionContext,0);
};

Method_expressionContext.prototype.constructor_expression = function() {
    return this.getTypedRuleContext(Constructor_expressionContext,0);
};

Method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMethod_expression(this);
	}
};

Method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMethod_expression(this);
	}
};




MParser.Method_expressionContext = Method_expressionContext;

MParser.prototype.method_expression = function() {

    var localctx = new Method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, MParser.RULE_method_expression);
    try {
        this.state = 1283;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1275;
            this.blob_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1276;
            this.document_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1277;
            this.fetch_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1278;
            this.read_all_expression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1279;
            this.read_one_expression();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1280;
            this.sorted_expression();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1281;
            this.method_call_expression();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1282;
            this.constructor_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Instance_selectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_instance_selector;
    return this;
}

Instance_selectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Instance_selectorContext.prototype.constructor = Instance_selectorContext;


 
Instance_selectorContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SliceSelectorContext(parser, ctx) {
	Instance_selectorContext.call(this, parser);
    this.xslice = null; // Slice_argumentsContext;
    Instance_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceSelectorContext.prototype = Object.create(Instance_selectorContext.prototype);
SliceSelectorContext.prototype.constructor = SliceSelectorContext;

MParser.SliceSelectorContext = SliceSelectorContext;

SliceSelectorContext.prototype.LBRAK = function() {
    return this.getToken(MParser.LBRAK, 0);
};

SliceSelectorContext.prototype.RBRAK = function() {
    return this.getToken(MParser.RBRAK, 0);
};

SliceSelectorContext.prototype.slice_arguments = function() {
    return this.getTypedRuleContext(Slice_argumentsContext,0);
};
SliceSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSliceSelector(this);
	}
};

SliceSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSliceSelector(this);
	}
};


function MethodSelectorContext(parser, ctx) {
	Instance_selectorContext.call(this, parser);
    this.method = null; // Method_call_expressionContext;
    Instance_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodSelectorContext.prototype = Object.create(Instance_selectorContext.prototype);
MethodSelectorContext.prototype.constructor = MethodSelectorContext;

MParser.MethodSelectorContext = MethodSelectorContext;

MethodSelectorContext.prototype.DOT = function() {
    return this.getToken(MParser.DOT, 0);
};

MethodSelectorContext.prototype.method_call_expression = function() {
    return this.getTypedRuleContext(Method_call_expressionContext,0);
};
MethodSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMethodSelector(this);
	}
};

MethodSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMethodSelector(this);
	}
};


function MemberSelectorContext(parser, ctx) {
	Instance_selectorContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    Instance_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberSelectorContext.prototype = Object.create(Instance_selectorContext.prototype);
MemberSelectorContext.prototype.constructor = MemberSelectorContext;

MParser.MemberSelectorContext = MemberSelectorContext;

MemberSelectorContext.prototype.DOT = function() {
    return this.getToken(MParser.DOT, 0);
};

MemberSelectorContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
MemberSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMemberSelector(this);
	}
};

MemberSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMemberSelector(this);
	}
};


function ItemSelectorContext(parser, ctx) {
	Instance_selectorContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Instance_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ItemSelectorContext.prototype = Object.create(Instance_selectorContext.prototype);
ItemSelectorContext.prototype.constructor = ItemSelectorContext;

MParser.ItemSelectorContext = ItemSelectorContext;

ItemSelectorContext.prototype.LBRAK = function() {
    return this.getToken(MParser.LBRAK, 0);
};

ItemSelectorContext.prototype.RBRAK = function() {
    return this.getToken(MParser.RBRAK, 0);
};

ItemSelectorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ItemSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterItemSelector(this);
	}
};

ItemSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitItemSelector(this);
	}
};



MParser.Instance_selectorContext = Instance_selectorContext;

MParser.prototype.instance_selector = function() {

    var localctx = new Instance_selectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, MParser.RULE_instance_selector);
    try {
        this.state = 1297;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MemberSelectorContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1285;
            this.match(MParser.DOT);
            this.state = 1286;
            localctx.name = this.variable_identifier();
            break;

        case 2:
            localctx = new MethodSelectorContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1287;
            this.match(MParser.DOT);
            this.state = 1288;
            localctx.method = this.method_call_expression();
            break;

        case 3:
            localctx = new SliceSelectorContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1289;
            this.match(MParser.LBRAK);
            this.state = 1290;
            localctx.xslice = this.slice_arguments();
            this.state = 1291;
            this.match(MParser.RBRAK);
            break;

        case 4:
            localctx = new ItemSelectorContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1293;
            this.match(MParser.LBRAK);
            this.state = 1294;
            localctx.exp = this.expression(0);
            this.state = 1295;
            this.match(MParser.RBRAK);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Blob_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_blob_expression;
    return this;
}

Blob_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Blob_expressionContext.prototype.constructor = Blob_expressionContext;

Blob_expressionContext.prototype.BLOB = function() {
    return this.getToken(MParser.BLOB, 0);
};

Blob_expressionContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Blob_expressionContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Blob_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Blob_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterBlob_expression(this);
	}
};

Blob_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitBlob_expression(this);
	}
};




MParser.Blob_expressionContext = Blob_expressionContext;

MParser.prototype.blob_expression = function() {

    var localctx = new Blob_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, MParser.RULE_blob_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1299;
        this.match(MParser.BLOB);
        this.state = 1300;
        this.match(MParser.LPAR);
        this.state = 1302;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MParser.LPAR - 20)) | (1 << (MParser.LBRAK - 20)) | (1 << (MParser.LCURL - 20)) | (1 << (MParser.MINUS - 20)) | (1 << (MParser.LT - 20)) | (1 << (MParser.LTGT - 20)) | (1 << (MParser.LTCOLONGT - 20)))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.CODE - 52)) | (1 << (MParser.DOCUMENT - 52)) | (1 << (MParser.BLOB - 52)) | (1 << (MParser.IMAGE - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.ITERATOR - 52)) | (1 << (MParser.CURSOR - 52)) | (1 << (MParser.HTML - 52)) | (1 << (MParser.ANY - 52)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (MParser.EXECUTE - 103)) | (1 << (MParser.FETCH - 103)) | (1 << (MParser.MUTABLE - 103)) | (1 << (MParser.NONE - 103)) | (1 << (MParser.NOT - 103)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (MParser.READ - 138)) | (1 << (MParser.SELF - 138)) | (1 << (MParser.SORTED - 138)) | (1 << (MParser.THIS - 138)) | (1 << (MParser.BOOLEAN_LITERAL - 138)) | (1 << (MParser.CHAR_LITERAL - 138)) | (1 << (MParser.MIN_INTEGER - 138)) | (1 << (MParser.MAX_INTEGER - 138)) | (1 << (MParser.SYMBOL_IDENTIFIER - 138)) | (1 << (MParser.TYPE_IDENTIFIER - 138)))) !== 0) || ((((_la - 170)) & ~0x1f) == 0 && ((1 << (_la - 170)) & ((1 << (MParser.VARIABLE_IDENTIFIER - 170)) | (1 << (MParser.TEXT_LITERAL - 170)) | (1 << (MParser.UUID_LITERAL - 170)) | (1 << (MParser.INTEGER_LITERAL - 170)) | (1 << (MParser.HEXA_LITERAL - 170)) | (1 << (MParser.DECIMAL_LITERAL - 170)) | (1 << (MParser.DATETIME_LITERAL - 170)) | (1 << (MParser.TIME_LITERAL - 170)) | (1 << (MParser.DATE_LITERAL - 170)) | (1 << (MParser.PERIOD_LITERAL - 170)) | (1 << (MParser.VERSION_LITERAL - 170)))) !== 0)) {
            this.state = 1301;
            this.expression(0);
        }

        this.state = 1304;
        this.match(MParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Document_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_document_expression;
    return this;
}

Document_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Document_expressionContext.prototype.constructor = Document_expressionContext;

Document_expressionContext.prototype.DOCUMENT = function() {
    return this.getToken(MParser.DOCUMENT, 0);
};

Document_expressionContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Document_expressionContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Document_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Document_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDocument_expression(this);
	}
};

Document_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDocument_expression(this);
	}
};




MParser.Document_expressionContext = Document_expressionContext;

MParser.prototype.document_expression = function() {

    var localctx = new Document_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, MParser.RULE_document_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1306;
        this.match(MParser.DOCUMENT);
        this.state = 1307;
        this.match(MParser.LPAR);
        this.state = 1309;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MParser.LPAR - 20)) | (1 << (MParser.LBRAK - 20)) | (1 << (MParser.LCURL - 20)) | (1 << (MParser.MINUS - 20)) | (1 << (MParser.LT - 20)) | (1 << (MParser.LTGT - 20)) | (1 << (MParser.LTCOLONGT - 20)))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.CODE - 52)) | (1 << (MParser.DOCUMENT - 52)) | (1 << (MParser.BLOB - 52)) | (1 << (MParser.IMAGE - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.ITERATOR - 52)) | (1 << (MParser.CURSOR - 52)) | (1 << (MParser.HTML - 52)) | (1 << (MParser.ANY - 52)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (MParser.EXECUTE - 103)) | (1 << (MParser.FETCH - 103)) | (1 << (MParser.MUTABLE - 103)) | (1 << (MParser.NONE - 103)) | (1 << (MParser.NOT - 103)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (MParser.READ - 138)) | (1 << (MParser.SELF - 138)) | (1 << (MParser.SORTED - 138)) | (1 << (MParser.THIS - 138)) | (1 << (MParser.BOOLEAN_LITERAL - 138)) | (1 << (MParser.CHAR_LITERAL - 138)) | (1 << (MParser.MIN_INTEGER - 138)) | (1 << (MParser.MAX_INTEGER - 138)) | (1 << (MParser.SYMBOL_IDENTIFIER - 138)) | (1 << (MParser.TYPE_IDENTIFIER - 138)))) !== 0) || ((((_la - 170)) & ~0x1f) == 0 && ((1 << (_la - 170)) & ((1 << (MParser.VARIABLE_IDENTIFIER - 170)) | (1 << (MParser.TEXT_LITERAL - 170)) | (1 << (MParser.UUID_LITERAL - 170)) | (1 << (MParser.INTEGER_LITERAL - 170)) | (1 << (MParser.HEXA_LITERAL - 170)) | (1 << (MParser.DECIMAL_LITERAL - 170)) | (1 << (MParser.DATETIME_LITERAL - 170)) | (1 << (MParser.TIME_LITERAL - 170)) | (1 << (MParser.DATE_LITERAL - 170)) | (1 << (MParser.PERIOD_LITERAL - 170)) | (1 << (MParser.VERSION_LITERAL - 170)))) !== 0)) {
            this.state = 1308;
            this.expression(0);
        }

        this.state = 1311;
        this.match(MParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constructor_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_constructor_expression;
    return this;
}

Constructor_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constructor_expressionContext.prototype.constructor = Constructor_expressionContext;


 
Constructor_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ConstructorFromContext(parser, ctx) {
	Constructor_expressionContext.call(this, parser);
    this.typ = null; // Mutable_category_typeContext;
    this.copyExp = null; // Copy_fromContext;
    this.args = null; // Argument_assignment_listContext;
    Constructor_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstructorFromContext.prototype = Object.create(Constructor_expressionContext.prototype);
ConstructorFromContext.prototype.constructor = ConstructorFromContext;

MParser.ConstructorFromContext = ConstructorFromContext;

ConstructorFromContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

ConstructorFromContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

ConstructorFromContext.prototype.mutable_category_type = function() {
    return this.getTypedRuleContext(Mutable_category_typeContext,0);
};

ConstructorFromContext.prototype.copy_from = function() {
    return this.getTypedRuleContext(Copy_fromContext,0);
};

ConstructorFromContext.prototype.COMMA = function() {
    return this.getToken(MParser.COMMA, 0);
};

ConstructorFromContext.prototype.argument_assignment_list = function() {
    return this.getTypedRuleContext(Argument_assignment_listContext,0);
};
ConstructorFromContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterConstructorFrom(this);
	}
};

ConstructorFromContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitConstructorFrom(this);
	}
};


function ConstructorNoFromContext(parser, ctx) {
	Constructor_expressionContext.call(this, parser);
    this.typ = null; // Mutable_category_typeContext;
    this.args = null; // Argument_assignment_listContext;
    Constructor_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstructorNoFromContext.prototype = Object.create(Constructor_expressionContext.prototype);
ConstructorNoFromContext.prototype.constructor = ConstructorNoFromContext;

MParser.ConstructorNoFromContext = ConstructorNoFromContext;

ConstructorNoFromContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

ConstructorNoFromContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

ConstructorNoFromContext.prototype.mutable_category_type = function() {
    return this.getTypedRuleContext(Mutable_category_typeContext,0);
};

ConstructorNoFromContext.prototype.argument_assignment_list = function() {
    return this.getTypedRuleContext(Argument_assignment_listContext,0);
};
ConstructorNoFromContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterConstructorNoFrom(this);
	}
};

ConstructorNoFromContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitConstructorNoFrom(this);
	}
};



MParser.Constructor_expressionContext = Constructor_expressionContext;

MParser.prototype.constructor_expression = function() {

    var localctx = new Constructor_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, MParser.RULE_constructor_expression);
    var _la = 0; // Token type
    try {
        this.state = 1329;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ConstructorFromContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1313;
            localctx.typ = this.mutable_category_type();
            this.state = 1314;
            this.match(MParser.LPAR);
            this.state = 1315;
            localctx.copyExp = this.copy_from();
            this.state = 1318;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MParser.COMMA) {
                this.state = 1316;
                this.match(MParser.COMMA);
                this.state = 1317;
                localctx.args = this.argument_assignment_list(0);
            }

            this.state = 1320;
            this.match(MParser.RPAR);
            break;

        case 2:
            localctx = new ConstructorNoFromContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1322;
            localctx.typ = this.mutable_category_type();
            this.state = 1323;
            this.match(MParser.LPAR);
            this.state = 1325;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MParser.LPAR - 20)) | (1 << (MParser.LBRAK - 20)) | (1 << (MParser.LCURL - 20)) | (1 << (MParser.MINUS - 20)) | (1 << (MParser.LT - 20)) | (1 << (MParser.LTGT - 20)) | (1 << (MParser.LTCOLONGT - 20)))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.CODE - 52)) | (1 << (MParser.DOCUMENT - 52)) | (1 << (MParser.BLOB - 52)) | (1 << (MParser.IMAGE - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.ITERATOR - 52)) | (1 << (MParser.CURSOR - 52)) | (1 << (MParser.HTML - 52)) | (1 << (MParser.ANY - 52)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (MParser.EXECUTE - 103)) | (1 << (MParser.FETCH - 103)) | (1 << (MParser.MUTABLE - 103)) | (1 << (MParser.NONE - 103)) | (1 << (MParser.NOT - 103)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (MParser.READ - 138)) | (1 << (MParser.SELF - 138)) | (1 << (MParser.SORTED - 138)) | (1 << (MParser.THIS - 138)) | (1 << (MParser.BOOLEAN_LITERAL - 138)) | (1 << (MParser.CHAR_LITERAL - 138)) | (1 << (MParser.MIN_INTEGER - 138)) | (1 << (MParser.MAX_INTEGER - 138)) | (1 << (MParser.SYMBOL_IDENTIFIER - 138)) | (1 << (MParser.TYPE_IDENTIFIER - 138)))) !== 0) || ((((_la - 170)) & ~0x1f) == 0 && ((1 << (_la - 170)) & ((1 << (MParser.VARIABLE_IDENTIFIER - 170)) | (1 << (MParser.TEXT_LITERAL - 170)) | (1 << (MParser.UUID_LITERAL - 170)) | (1 << (MParser.INTEGER_LITERAL - 170)) | (1 << (MParser.HEXA_LITERAL - 170)) | (1 << (MParser.DECIMAL_LITERAL - 170)) | (1 << (MParser.DATETIME_LITERAL - 170)) | (1 << (MParser.TIME_LITERAL - 170)) | (1 << (MParser.DATE_LITERAL - 170)) | (1 << (MParser.PERIOD_LITERAL - 170)) | (1 << (MParser.VERSION_LITERAL - 170)))) !== 0)) {
                this.state = 1324;
                localctx.args = this.argument_assignment_list(0);
            }

            this.state = 1327;
            this.match(MParser.RPAR);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Copy_fromContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_copy_from;
    this.exp = null; // ExpressionContext
    return this;
}

Copy_fromContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Copy_fromContext.prototype.constructor = Copy_fromContext;

Copy_fromContext.prototype.FROM = function() {
    return this.getToken(MParser.FROM, 0);
};

Copy_fromContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Copy_fromContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Copy_fromContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCopy_from(this);
	}
};

Copy_fromContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCopy_from(this);
	}
};




MParser.Copy_fromContext = Copy_fromContext;

MParser.prototype.copy_from = function() {

    var localctx = new Copy_fromContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, MParser.RULE_copy_from);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1331;
        this.match(MParser.FROM);
        this.state = 1332;
        this.assign();
        this.state = 1333;
        localctx.exp = this.expression(0);
        this.state = 1334;
        if (!( this.willNotBe(this.equalToken()))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.willNotBe($parser.equalToken())");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Argument_assignment_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_argument_assignment_list;
    return this;
}

Argument_assignment_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_assignment_listContext.prototype.constructor = Argument_assignment_listContext;


 
Argument_assignment_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ExpressionAssignmentListContext(parser, ctx) {
	Argument_assignment_listContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Argument_assignment_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExpressionAssignmentListContext.prototype = Object.create(Argument_assignment_listContext.prototype);
ExpressionAssignmentListContext.prototype.constructor = ExpressionAssignmentListContext;

MParser.ExpressionAssignmentListContext = ExpressionAssignmentListContext;

ExpressionAssignmentListContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ExpressionAssignmentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterExpressionAssignmentList(this);
	}
};

ExpressionAssignmentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitExpressionAssignmentList(this);
	}
};


function ArgumentAssignmentListContext(parser, ctx) {
	Argument_assignment_listContext.call(this, parser);
    this.item = null; // Argument_assignmentContext;
    Argument_assignment_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentAssignmentListContext.prototype = Object.create(Argument_assignment_listContext.prototype);
ArgumentAssignmentListContext.prototype.constructor = ArgumentAssignmentListContext;

MParser.ArgumentAssignmentListContext = ArgumentAssignmentListContext;

ArgumentAssignmentListContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};
ArgumentAssignmentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterArgumentAssignmentList(this);
	}
};

ArgumentAssignmentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitArgumentAssignmentList(this);
	}
};


function ArgumentAssignmentListItemContext(parser, ctx) {
	Argument_assignment_listContext.call(this, parser);
    this.items = null; // Argument_assignment_listContext;
    this.item = null; // Argument_assignmentContext;
    Argument_assignment_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentAssignmentListItemContext.prototype = Object.create(Argument_assignment_listContext.prototype);
ArgumentAssignmentListItemContext.prototype.constructor = ArgumentAssignmentListItemContext;

MParser.ArgumentAssignmentListItemContext = ArgumentAssignmentListItemContext;

ArgumentAssignmentListItemContext.prototype.COMMA = function() {
    return this.getToken(MParser.COMMA, 0);
};

ArgumentAssignmentListItemContext.prototype.argument_assignment_list = function() {
    return this.getTypedRuleContext(Argument_assignment_listContext,0);
};

ArgumentAssignmentListItemContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};
ArgumentAssignmentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterArgumentAssignmentListItem(this);
	}
};

ArgumentAssignmentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitArgumentAssignmentListItem(this);
	}
};



MParser.prototype.argument_assignment_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Argument_assignment_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 112;
    this.enterRecursionRule(localctx, 112, MParser.RULE_argument_assignment_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1341;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ExpressionAssignmentListContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1337;
            localctx.exp = this.expression(0);
            this.state = 1338;
            if (!( this.willNotBe(this.equalToken()))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.willNotBe($parser.equalToken())");
            }
            break;

        case 2:
            localctx = new ArgumentAssignmentListContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1340;
            localctx.item = this.argument_assignment();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1348;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ArgumentAssignmentListItemContext(this, new Argument_assignment_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_argument_assignment_list);
                this.state = 1343;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1344;
                this.match(MParser.COMMA);
                this.state = 1345;
                localctx.item = this.argument_assignment(); 
            }
            this.state = 1350;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Argument_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_argument_assignment;
    this.name = null; // Variable_identifierContext
    this.exp = null; // ExpressionContext
    return this;
}

Argument_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_assignmentContext.prototype.constructor = Argument_assignmentContext;

Argument_assignmentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Argument_assignmentContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Argument_assignmentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Argument_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterArgument_assignment(this);
	}
};

Argument_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitArgument_assignment(this);
	}
};




MParser.Argument_assignmentContext = Argument_assignmentContext;

MParser.prototype.argument_assignment = function() {

    var localctx = new Argument_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, MParser.RULE_argument_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1351;
        localctx.name = this.variable_identifier();
        this.state = 1355;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        if(la_===1) {
            this.state = 1352;
            this.assign();
            this.state = 1353;
            localctx.exp = this.expression(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Write_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_write_statement;
    this.what = null; // ExpressionContext
    this.target = null; // ExpressionContext
    return this;
}

Write_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Write_statementContext.prototype.constructor = Write_statementContext;

Write_statementContext.prototype.WRITE = function() {
    return this.getToken(MParser.WRITE, 0);
};

Write_statementContext.prototype.TO = function() {
    return this.getToken(MParser.TO, 0);
};

Write_statementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Write_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterWrite_statement(this);
	}
};

Write_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitWrite_statement(this);
	}
};




MParser.Write_statementContext = Write_statementContext;

MParser.prototype.write_statement = function() {

    var localctx = new Write_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, MParser.RULE_write_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1357;
        this.match(MParser.WRITE);
        this.state = 1358;
        localctx.what = this.expression(0);
        this.state = 1359;
        this.match(MParser.TO);
        this.state = 1360;
        localctx.target = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Filtered_list_suffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_filtered_list_suffix;
    this.name = null; // Variable_identifierContext
    this.predicate = null; // ExpressionContext
    return this;
}

Filtered_list_suffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Filtered_list_suffixContext.prototype.constructor = Filtered_list_suffixContext;

Filtered_list_suffixContext.prototype.FILTERED = function() {
    return this.getToken(MParser.FILTERED, 0);
};

Filtered_list_suffixContext.prototype.WHERE = function() {
    return this.getToken(MParser.WHERE, 0);
};

Filtered_list_suffixContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Filtered_list_suffixContext.prototype.WITH = function() {
    return this.getToken(MParser.WITH, 0);
};

Filtered_list_suffixContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Filtered_list_suffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterFiltered_list_suffix(this);
	}
};

Filtered_list_suffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitFiltered_list_suffix(this);
	}
};




MParser.Filtered_list_suffixContext = Filtered_list_suffixContext;

MParser.prototype.filtered_list_suffix = function() {

    var localctx = new Filtered_list_suffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, MParser.RULE_filtered_list_suffix);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1362;
        this.match(MParser.FILTERED);
        this.state = 1365;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.WITH) {
            this.state = 1363;
            this.match(MParser.WITH);
            this.state = 1364;
            localctx.name = this.variable_identifier();
        }

        this.state = 1367;
        this.match(MParser.WHERE);
        this.state = 1368;
        localctx.predicate = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fetch_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_fetch_expression;
    return this;
}

Fetch_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fetch_expressionContext.prototype.constructor = Fetch_expressionContext;


 
Fetch_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FetchOneContext(parser, ctx) {
	Fetch_expressionContext.call(this, parser);
    this.typ = null; // Mutable_category_typeContext;
    this.predicate = null; // ExpressionContext;
    Fetch_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FetchOneContext.prototype = Object.create(Fetch_expressionContext.prototype);
FetchOneContext.prototype.constructor = FetchOneContext;

MParser.FetchOneContext = FetchOneContext;

FetchOneContext.prototype.FETCH = function() {
    return this.getToken(MParser.FETCH, 0);
};

FetchOneContext.prototype.ONE = function() {
    return this.getToken(MParser.ONE, 0);
};

FetchOneContext.prototype.WHERE = function() {
    return this.getToken(MParser.WHERE, 0);
};

FetchOneContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FetchOneContext.prototype.mutable_category_type = function() {
    return this.getTypedRuleContext(Mutable_category_typeContext,0);
};
FetchOneContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterFetchOne(this);
	}
};

FetchOneContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitFetchOne(this);
	}
};


function FetchManyContext(parser, ctx) {
	Fetch_expressionContext.call(this, parser);
    this.xstart = null; // ExpressionContext;
    this.xstop = null; // ExpressionContext;
    this.typ = null; // Mutable_category_typeContext;
    this.predicate = null; // ExpressionContext;
    this.orderby = null; // Order_by_listContext;
    Fetch_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FetchManyContext.prototype = Object.create(Fetch_expressionContext.prototype);
FetchManyContext.prototype.constructor = FetchManyContext;

MParser.FetchManyContext = FetchManyContext;

FetchManyContext.prototype.FETCH = function() {
    return this.getToken(MParser.FETCH, 0);
};

FetchManyContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

FetchManyContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

FetchManyContext.prototype.ALL = function() {
    return this.getToken(MParser.ALL, 0);
};

FetchManyContext.prototype.ROWS = function() {
    return this.getToken(MParser.ROWS, 0);
};

FetchManyContext.prototype.TO = function() {
    return this.getToken(MParser.TO, 0);
};

FetchManyContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

FetchManyContext.prototype.WHERE = function() {
    return this.getToken(MParser.WHERE, 0);
};

FetchManyContext.prototype.ORDER = function() {
    return this.getToken(MParser.ORDER, 0);
};

FetchManyContext.prototype.BY = function() {
    return this.getToken(MParser.BY, 0);
};

FetchManyContext.prototype.mutable_category_type = function() {
    return this.getTypedRuleContext(Mutable_category_typeContext,0);
};

FetchManyContext.prototype.order_by_list = function() {
    return this.getTypedRuleContext(Order_by_listContext,0);
};
FetchManyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterFetchMany(this);
	}
};

FetchManyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitFetchMany(this);
	}
};



MParser.Fetch_expressionContext = Fetch_expressionContext;

MParser.prototype.fetch_expression = function() {

    var localctx = new Fetch_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, MParser.RULE_fetch_expression);
    var _la = 0; // Token type
    try {
        this.state = 1400;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
        switch(la_) {
        case 1:
            localctx = new FetchOneContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1370;
            this.match(MParser.FETCH);
            this.state = 1371;
            this.match(MParser.ONE);
            this.state = 1373;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MParser.MUTABLE || _la===MParser.TYPE_IDENTIFIER) {
                this.state = 1372;
                localctx.typ = this.mutable_category_type();
            }

            this.state = 1375;
            this.match(MParser.WHERE);
            this.state = 1376;
            localctx.predicate = this.expression(0);
            break;

        case 2:
            localctx = new FetchManyContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1377;
            this.match(MParser.FETCH);
            this.state = 1384;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MParser.ALL:
                this.state = 1378;
                this.match(MParser.ALL);
                break;
            case MParser.ROWS:
                this.state = 1379;
                this.match(MParser.ROWS);
                this.state = 1380;
                localctx.xstart = this.expression(0);
                this.state = 1381;
                this.match(MParser.TO);
                this.state = 1382;
                localctx.xstop = this.expression(0);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1386;
            this.match(MParser.LPAR);
            this.state = 1388;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MParser.MUTABLE || _la===MParser.TYPE_IDENTIFIER) {
                this.state = 1387;
                localctx.typ = this.mutable_category_type();
            }

            this.state = 1390;
            this.match(MParser.RPAR);
            this.state = 1393;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
            if(la_===1) {
                this.state = 1391;
                this.match(MParser.WHERE);
                this.state = 1392;
                localctx.predicate = this.expression(0);

            }
            this.state = 1398;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
            if(la_===1) {
                this.state = 1395;
                this.match(MParser.ORDER);
                this.state = 1396;
                this.match(MParser.BY);
                this.state = 1397;
                localctx.orderby = this.order_by_list();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fetch_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_fetch_statement;
    return this;
}

Fetch_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fetch_statementContext.prototype.constructor = Fetch_statementContext;


 
Fetch_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FetchManyAsyncContext(parser, ctx) {
	Fetch_statementContext.call(this, parser);
    this.xstart = null; // ExpressionContext;
    this.xstop = null; // ExpressionContext;
    this.typ = null; // Mutable_category_typeContext;
    this.predicate = null; // ExpressionContext;
    this.orderby = null; // Order_by_listContext;
    this.name = null; // Variable_identifierContext;
    this.stmts = null; // Statement_listContext;
    Fetch_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FetchManyAsyncContext.prototype = Object.create(Fetch_statementContext.prototype);
FetchManyAsyncContext.prototype.constructor = FetchManyAsyncContext;

MParser.FetchManyAsyncContext = FetchManyAsyncContext;

FetchManyAsyncContext.prototype.FETCH = function() {
    return this.getToken(MParser.FETCH, 0);
};

FetchManyAsyncContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

FetchManyAsyncContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

FetchManyAsyncContext.prototype.THEN = function() {
    return this.getToken(MParser.THEN, 0);
};

FetchManyAsyncContext.prototype.WITH = function() {
    return this.getToken(MParser.WITH, 0);
};

FetchManyAsyncContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

FetchManyAsyncContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

FetchManyAsyncContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

FetchManyAsyncContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

FetchManyAsyncContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

FetchManyAsyncContext.prototype.ALL = function() {
    return this.getToken(MParser.ALL, 0);
};

FetchManyAsyncContext.prototype.ROWS = function() {
    return this.getToken(MParser.ROWS, 0);
};

FetchManyAsyncContext.prototype.TO = function() {
    return this.getToken(MParser.TO, 0);
};

FetchManyAsyncContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

FetchManyAsyncContext.prototype.WHERE = function() {
    return this.getToken(MParser.WHERE, 0);
};

FetchManyAsyncContext.prototype.ORDER = function() {
    return this.getToken(MParser.ORDER, 0);
};

FetchManyAsyncContext.prototype.BY = function() {
    return this.getToken(MParser.BY, 0);
};

FetchManyAsyncContext.prototype.mutable_category_type = function() {
    return this.getTypedRuleContext(Mutable_category_typeContext,0);
};

FetchManyAsyncContext.prototype.order_by_list = function() {
    return this.getTypedRuleContext(Order_by_listContext,0);
};
FetchManyAsyncContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterFetchManyAsync(this);
	}
};

FetchManyAsyncContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitFetchManyAsync(this);
	}
};


function FetchOneAsyncContext(parser, ctx) {
	Fetch_statementContext.call(this, parser);
    this.typ = null; // Mutable_category_typeContext;
    this.predicate = null; // ExpressionContext;
    this.name = null; // Variable_identifierContext;
    this.stmts = null; // Statement_listContext;
    Fetch_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FetchOneAsyncContext.prototype = Object.create(Fetch_statementContext.prototype);
FetchOneAsyncContext.prototype.constructor = FetchOneAsyncContext;

MParser.FetchOneAsyncContext = FetchOneAsyncContext;

FetchOneAsyncContext.prototype.FETCH = function() {
    return this.getToken(MParser.FETCH, 0);
};

FetchOneAsyncContext.prototype.ONE = function() {
    return this.getToken(MParser.ONE, 0);
};

FetchOneAsyncContext.prototype.WHERE = function() {
    return this.getToken(MParser.WHERE, 0);
};

FetchOneAsyncContext.prototype.THEN = function() {
    return this.getToken(MParser.THEN, 0);
};

FetchOneAsyncContext.prototype.WITH = function() {
    return this.getToken(MParser.WITH, 0);
};

FetchOneAsyncContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

FetchOneAsyncContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

FetchOneAsyncContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

FetchOneAsyncContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FetchOneAsyncContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

FetchOneAsyncContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

FetchOneAsyncContext.prototype.mutable_category_type = function() {
    return this.getTypedRuleContext(Mutable_category_typeContext,0);
};
FetchOneAsyncContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterFetchOneAsync(this);
	}
};

FetchOneAsyncContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitFetchOneAsync(this);
	}
};



MParser.Fetch_statementContext = Fetch_statementContext;

MParser.prototype.fetch_statement = function() {

    var localctx = new Fetch_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, MParser.RULE_fetch_statement);
    var _la = 0; // Token type
    try {
        this.state = 1448;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        switch(la_) {
        case 1:
            localctx = new FetchOneAsyncContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1402;
            this.match(MParser.FETCH);
            this.state = 1403;
            this.match(MParser.ONE);
            this.state = 1405;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MParser.MUTABLE || _la===MParser.TYPE_IDENTIFIER) {
                this.state = 1404;
                localctx.typ = this.mutable_category_type();
            }

            this.state = 1407;
            this.match(MParser.WHERE);
            this.state = 1408;
            localctx.predicate = this.expression(0);
            this.state = 1409;
            this.match(MParser.THEN);
            this.state = 1410;
            this.match(MParser.WITH);
            this.state = 1411;
            localctx.name = this.variable_identifier();
            this.state = 1412;
            this.match(MParser.COLON);
            this.state = 1413;
            this.indent();
            this.state = 1414;
            localctx.stmts = this.statement_list();
            this.state = 1415;
            this.dedent();
            break;

        case 2:
            localctx = new FetchManyAsyncContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1417;
            this.match(MParser.FETCH);
            this.state = 1424;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MParser.ALL:
                this.state = 1418;
                this.match(MParser.ALL);
                break;
            case MParser.ROWS:
                this.state = 1419;
                this.match(MParser.ROWS);
                this.state = 1420;
                localctx.xstart = this.expression(0);
                this.state = 1421;
                this.match(MParser.TO);
                this.state = 1422;
                localctx.xstop = this.expression(0);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1426;
            this.match(MParser.LPAR);
            this.state = 1428;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MParser.MUTABLE || _la===MParser.TYPE_IDENTIFIER) {
                this.state = 1427;
                localctx.typ = this.mutable_category_type();
            }

            this.state = 1430;
            this.match(MParser.RPAR);
            this.state = 1433;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MParser.WHERE) {
                this.state = 1431;
                this.match(MParser.WHERE);
                this.state = 1432;
                localctx.predicate = this.expression(0);
            }

            this.state = 1438;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MParser.ORDER) {
                this.state = 1435;
                this.match(MParser.ORDER);
                this.state = 1436;
                this.match(MParser.BY);
                this.state = 1437;
                localctx.orderby = this.order_by_list();
            }

            this.state = 1440;
            this.match(MParser.THEN);
            this.state = 1441;
            this.match(MParser.WITH);
            this.state = 1442;
            localctx.name = this.variable_identifier();
            this.state = 1443;
            this.match(MParser.COLON);
            this.state = 1444;
            this.indent();
            this.state = 1445;
            localctx.stmts = this.statement_list();
            this.state = 1446;
            this.dedent();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sorted_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_sorted_expression;
    this.source = null; // Instance_expressionContext
    this.key = null; // Sorted_keyContext
    return this;
}

Sorted_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sorted_expressionContext.prototype.constructor = Sorted_expressionContext;

Sorted_expressionContext.prototype.SORTED = function() {
    return this.getToken(MParser.SORTED, 0);
};

Sorted_expressionContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Sorted_expressionContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Sorted_expressionContext.prototype.instance_expression = function() {
    return this.getTypedRuleContext(Instance_expressionContext,0);
};

Sorted_expressionContext.prototype.DESC = function() {
    return this.getToken(MParser.DESC, 0);
};

Sorted_expressionContext.prototype.COMMA = function() {
    return this.getToken(MParser.COMMA, 0);
};

Sorted_expressionContext.prototype.key_token = function() {
    return this.getTypedRuleContext(Key_tokenContext,0);
};

Sorted_expressionContext.prototype.EQ = function() {
    return this.getToken(MParser.EQ, 0);
};

Sorted_expressionContext.prototype.sorted_key = function() {
    return this.getTypedRuleContext(Sorted_keyContext,0);
};

Sorted_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSorted_expression(this);
	}
};

Sorted_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSorted_expression(this);
	}
};




MParser.Sorted_expressionContext = Sorted_expressionContext;

MParser.prototype.sorted_expression = function() {

    var localctx = new Sorted_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, MParser.RULE_sorted_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1450;
        this.match(MParser.SORTED);
        this.state = 1452;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.DESC) {
            this.state = 1451;
            this.match(MParser.DESC);
        }

        this.state = 1454;
        this.match(MParser.LPAR);
        this.state = 1455;
        localctx.source = this.instance_expression(0);
        this.state = 1461;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.COMMA) {
            this.state = 1456;
            this.match(MParser.COMMA);
            this.state = 1457;
            this.key_token();
            this.state = 1458;
            this.match(MParser.EQ);
            this.state = 1459;
            localctx.key = this.sorted_key();
        }

        this.state = 1463;
        this.match(MParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assign_instance_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_assign_instance_statement;
    this.inst = null; // Assignable_instanceContext
    this.exp = null; // ExpressionContext
    return this;
}

Assign_instance_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assign_instance_statementContext.prototype.constructor = Assign_instance_statementContext;

Assign_instance_statementContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Assign_instance_statementContext.prototype.assignable_instance = function() {
    return this.getTypedRuleContext(Assignable_instanceContext,0);
};

Assign_instance_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Assign_instance_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAssign_instance_statement(this);
	}
};

Assign_instance_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAssign_instance_statement(this);
	}
};




MParser.Assign_instance_statementContext = Assign_instance_statementContext;

MParser.prototype.assign_instance_statement = function() {

    var localctx = new Assign_instance_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, MParser.RULE_assign_instance_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1465;
        localctx.inst = this.assignable_instance(0);
        this.state = 1466;
        this.assign();
        this.state = 1467;
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Child_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_child_instance;
    return this;
}

Child_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Child_instanceContext.prototype.constructor = Child_instanceContext;


 
Child_instanceContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MemberInstanceContext(parser, ctx) {
	Child_instanceContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    Child_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberInstanceContext.prototype = Object.create(Child_instanceContext.prototype);
MemberInstanceContext.prototype.constructor = MemberInstanceContext;

MParser.MemberInstanceContext = MemberInstanceContext;

MemberInstanceContext.prototype.DOT = function() {
    return this.getToken(MParser.DOT, 0);
};

MemberInstanceContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
MemberInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMemberInstance(this);
	}
};

MemberInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMemberInstance(this);
	}
};


function ItemInstanceContext(parser, ctx) {
	Child_instanceContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Child_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ItemInstanceContext.prototype = Object.create(Child_instanceContext.prototype);
ItemInstanceContext.prototype.constructor = ItemInstanceContext;

MParser.ItemInstanceContext = ItemInstanceContext;

ItemInstanceContext.prototype.LBRAK = function() {
    return this.getToken(MParser.LBRAK, 0);
};

ItemInstanceContext.prototype.RBRAK = function() {
    return this.getToken(MParser.RBRAK, 0);
};

ItemInstanceContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ItemInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterItemInstance(this);
	}
};

ItemInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitItemInstance(this);
	}
};



MParser.Child_instanceContext = Child_instanceContext;

MParser.prototype.child_instance = function() {

    var localctx = new Child_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, MParser.RULE_child_instance);
    try {
        this.state = 1477;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MemberInstanceContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1469;
            if (!( this.wasNot(MParser.WS))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(MParser.WS)");
            }
            this.state = 1470;
            this.match(MParser.DOT);
            this.state = 1471;
            localctx.name = this.variable_identifier();
            break;

        case 2:
            localctx = new ItemInstanceContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1472;
            if (!( this.wasNot(MParser.WS))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(MParser.WS)");
            }
            this.state = 1473;
            this.match(MParser.LBRAK);
            this.state = 1474;
            localctx.exp = this.expression(0);
            this.state = 1475;
            this.match(MParser.RBRAK);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assign_tuple_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_assign_tuple_statement;
    this.items = null; // Variable_identifier_listContext
    this.exp = null; // ExpressionContext
    return this;
}

Assign_tuple_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assign_tuple_statementContext.prototype.constructor = Assign_tuple_statementContext;

Assign_tuple_statementContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Assign_tuple_statementContext.prototype.variable_identifier_list = function() {
    return this.getTypedRuleContext(Variable_identifier_listContext,0);
};

Assign_tuple_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Assign_tuple_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAssign_tuple_statement(this);
	}
};

Assign_tuple_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAssign_tuple_statement(this);
	}
};




MParser.Assign_tuple_statementContext = Assign_tuple_statementContext;

MParser.prototype.assign_tuple_statement = function() {

    var localctx = new Assign_tuple_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, MParser.RULE_assign_tuple_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1479;
        localctx.items = this.variable_identifier_list();
        this.state = 1480;
        this.assign();
        this.state = 1481;
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LfsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_lfs;
    return this;
}

LfsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LfsContext.prototype.constructor = LfsContext;

LfsContext.prototype.LF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.LF);
    } else {
        return this.getToken(MParser.LF, i);
    }
};


LfsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterLfs(this);
	}
};

LfsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitLfs(this);
	}
};




MParser.LfsContext = LfsContext;

MParser.prototype.lfs = function() {

    var localctx = new LfsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, MParser.RULE_lfs);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1486;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1483;
                this.match(MParser.LF); 
            }
            this.state = 1488;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LfpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_lfp;
    return this;
}

LfpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LfpContext.prototype.constructor = LfpContext;

LfpContext.prototype.LF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.LF);
    } else {
        return this.getToken(MParser.LF, i);
    }
};


LfpContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterLfp(this);
	}
};

LfpContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitLfp(this);
	}
};




MParser.LfpContext = LfpContext;

MParser.prototype.lfp = function() {

    var localctx = new LfpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, MParser.RULE_lfp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1490; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1489;
            this.match(MParser.LF);
            this.state = 1492; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===MParser.LF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ws_plusContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_ws_plus;
    return this;
}

Ws_plusContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ws_plusContext.prototype.constructor = Ws_plusContext;

Ws_plusContext.prototype.LF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.LF);
    } else {
        return this.getToken(MParser.LF, i);
    }
};


Ws_plusContext.prototype.TAB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.TAB);
    } else {
        return this.getToken(MParser.TAB, i);
    }
};


Ws_plusContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.WS);
    } else {
        return this.getToken(MParser.WS, i);
    }
};


Ws_plusContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.INDENT);
    } else {
        return this.getToken(MParser.INDENT, i);
    }
};


Ws_plusContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterWs_plus(this);
	}
};

Ws_plusContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitWs_plus(this);
	}
};




MParser.Ws_plusContext = Ws_plusContext;

MParser.prototype.ws_plus = function() {

    var localctx = new Ws_plusContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, MParser.RULE_ws_plus);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1497;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MParser.INDENT) | (1 << MParser.LF) | (1 << MParser.TAB) | (1 << MParser.WS))) !== 0)) {
            this.state = 1494;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MParser.INDENT) | (1 << MParser.LF) | (1 << MParser.TAB) | (1 << MParser.WS))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1499;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_indent;
    return this;
}

IndentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndentContext.prototype.constructor = IndentContext;

IndentContext.prototype.INDENT = function() {
    return this.getToken(MParser.INDENT, 0);
};

IndentContext.prototype.LF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.LF);
    } else {
        return this.getToken(MParser.LF, i);
    }
};


IndentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterIndent(this);
	}
};

IndentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitIndent(this);
	}
};




MParser.IndentContext = IndentContext;

MParser.prototype.indent = function() {

    var localctx = new IndentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, MParser.RULE_indent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1501; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1500;
            this.match(MParser.LF);
            this.state = 1503; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===MParser.LF);
        this.state = 1505;
        this.match(MParser.INDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DedentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_dedent;
    return this;
}

DedentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DedentContext.prototype.constructor = DedentContext;

DedentContext.prototype.DEDENT = function() {
    return this.getToken(MParser.DEDENT, 0);
};

DedentContext.prototype.LF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.LF);
    } else {
        return this.getToken(MParser.LF, i);
    }
};


DedentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDedent(this);
	}
};

DedentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDedent(this);
	}
};




MParser.DedentContext = DedentContext;

MParser.prototype.dedent = function() {

    var localctx = new DedentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, MParser.RULE_dedent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1510;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MParser.LF) {
            this.state = 1507;
            this.match(MParser.LF);
            this.state = 1512;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1513;
        this.match(MParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_type_literal;
    return this;
}

Type_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_literalContext.prototype.constructor = Type_literalContext;

Type_literalContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};

Type_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterType_literal(this);
	}
};

Type_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitType_literal(this);
	}
};




MParser.Type_literalContext = Type_literalContext;

MParser.prototype.type_literal = function() {

    var localctx = new Type_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, MParser.RULE_type_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1515;
        this.category_or_any_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Null_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_null_literal;
    return this;
}

Null_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Null_literalContext.prototype.constructor = Null_literalContext;

Null_literalContext.prototype.NONE = function() {
    return this.getToken(MParser.NONE, 0);
};

Null_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNull_literal(this);
	}
};

Null_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNull_literal(this);
	}
};




MParser.Null_literalContext = Null_literalContext;

MParser.prototype.null_literal = function() {

    var localctx = new Null_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, MParser.RULE_null_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1517;
        this.match(MParser.NONE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReplContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_repl;
    return this;
}

ReplContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplContext.prototype.constructor = ReplContext;

ReplContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

ReplContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ReplContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReplContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterRepl(this);
	}
};

ReplContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitRepl(this);
	}
};




MParser.ReplContext = ReplContext;

MParser.prototype.repl = function() {

    var localctx = new ReplContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, MParser.RULE_repl);
    try {
        this.state = 1522;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1519;
            this.declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1520;
            this.statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1521;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declaration_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_declaration_list;
    return this;
}

Declaration_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declaration_listContext.prototype.constructor = Declaration_listContext;


 
Declaration_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FullDeclarationListContext(parser, ctx) {
	Declaration_listContext.call(this, parser);
    Declaration_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FullDeclarationListContext.prototype = Object.create(Declaration_listContext.prototype);
FullDeclarationListContext.prototype.constructor = FullDeclarationListContext;

MParser.FullDeclarationListContext = FullDeclarationListContext;

FullDeclarationListContext.prototype.lfs = function() {
    return this.getTypedRuleContext(LfsContext,0);
};

FullDeclarationListContext.prototype.EOF = function() {
    return this.getToken(MParser.EOF, 0);
};

FullDeclarationListContext.prototype.declarations = function() {
    return this.getTypedRuleContext(DeclarationsContext,0);
};
FullDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterFullDeclarationList(this);
	}
};

FullDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitFullDeclarationList(this);
	}
};



MParser.Declaration_listContext = Declaration_listContext;

MParser.prototype.declaration_list = function() {

    var localctx = new Declaration_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, MParser.RULE_declaration_list);
    var _la = 0; // Token type
    try {
        localctx = new FullDeclarationListContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1525;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.COMMENT || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (MParser.ABSTRACT - 72)) | (1 << (MParser.ATTR - 72)) | (1 << (MParser.CATEGORY - 72)) | (1 << (MParser.CLASS - 72)) | (1 << (MParser.DEF - 72)) | (1 << (MParser.ENUM - 72)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (MParser.NATIVE - 124)) | (1 << (MParser.SINGLETON - 124)) | (1 << (MParser.STORABLE - 124)))) !== 0) || _la===MParser.WIDGET || _la===MParser.ARONDBASE_IDENTIFIER) {
            this.state = 1524;
            this.declarations();
        }

        this.state = 1527;
        this.lfs();
        this.state = 1528;
        this.match(MParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_declarations;
    return this;
}

DeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationsContext.prototype.constructor = DeclarationsContext;

DeclarationsContext.prototype.declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationContext);
    } else {
        return this.getTypedRuleContext(DeclarationContext,i);
    }
};

DeclarationsContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

DeclarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDeclarations(this);
	}
};

DeclarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDeclarations(this);
	}
};




MParser.DeclarationsContext = DeclarationsContext;

MParser.prototype.declarations = function() {

    var localctx = new DeclarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, MParser.RULE_declarations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1530;
        this.declaration();
        this.state = 1536;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,96,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1531;
                this.lfp();
                this.state = 1532;
                this.declaration(); 
            }
            this.state = 1538;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,96,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.attribute_declaration = function() {
    return this.getTypedRuleContext(Attribute_declarationContext,0);
};

DeclarationContext.prototype.category_declaration = function() {
    return this.getTypedRuleContext(Category_declarationContext,0);
};

DeclarationContext.prototype.resource_declaration = function() {
    return this.getTypedRuleContext(Resource_declarationContext,0);
};

DeclarationContext.prototype.enum_declaration = function() {
    return this.getTypedRuleContext(Enum_declarationContext,0);
};

DeclarationContext.prototype.widget_declaration = function() {
    return this.getTypedRuleContext(Widget_declarationContext,0);
};

DeclarationContext.prototype.method_declaration = function() {
    return this.getTypedRuleContext(Method_declarationContext,0);
};

DeclarationContext.prototype.comment_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Comment_statementContext);
    } else {
        return this.getTypedRuleContext(Comment_statementContext,i);
    }
};

DeclarationContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

DeclarationContext.prototype.annotation_constructor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Annotation_constructorContext);
    } else {
        return this.getTypedRuleContext(Annotation_constructorContext,i);
    }
};

DeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDeclaration(this);
	}
};

DeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDeclaration(this);
	}
};




MParser.DeclarationContext = DeclarationContext;

MParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, MParser.RULE_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1544;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MParser.COMMENT) {
            this.state = 1539;
            this.comment_statement();
            this.state = 1540;
            this.lfp();
            this.state = 1546;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1552;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MParser.ARONDBASE_IDENTIFIER) {
            this.state = 1547;
            this.annotation_constructor();
            this.state = 1548;
            this.lfp();
            this.state = 1554;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1561;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1555;
            this.attribute_declaration();
            break;

        case 2:
            this.state = 1556;
            this.category_declaration();
            break;

        case 3:
            this.state = 1557;
            this.resource_declaration();
            break;

        case 4:
            this.state = 1558;
            this.enum_declaration();
            break;

        case 5:
            this.state = 1559;
            this.widget_declaration();
            break;

        case 6:
            this.state = 1560;
            this.method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Annotation_constructorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_annotation_constructor;
    this.name = null; // Annotation_identifierContext
    this.exp = null; // Annotation_argument_valueContext
    return this;
}

Annotation_constructorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Annotation_constructorContext.prototype.constructor = Annotation_constructorContext;

Annotation_constructorContext.prototype.annotation_identifier = function() {
    return this.getTypedRuleContext(Annotation_identifierContext,0);
};

Annotation_constructorContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Annotation_constructorContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Annotation_constructorContext.prototype.annotation_argument_value = function() {
    return this.getTypedRuleContext(Annotation_argument_valueContext,0);
};

Annotation_constructorContext.prototype.annotation_argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Annotation_argumentContext);
    } else {
        return this.getTypedRuleContext(Annotation_argumentContext,i);
    }
};

Annotation_constructorContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.COMMA);
    } else {
        return this.getToken(MParser.COMMA, i);
    }
};


Annotation_constructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAnnotation_constructor(this);
	}
};

Annotation_constructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAnnotation_constructor(this);
	}
};




MParser.Annotation_constructorContext = Annotation_constructorContext;

MParser.prototype.annotation_constructor = function() {

    var localctx = new Annotation_constructorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, MParser.RULE_annotation_constructor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1563;
        localctx.name = this.annotation_identifier();
        this.state = 1578;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.LPAR) {
            this.state = 1564;
            this.match(MParser.LPAR);
            this.state = 1574;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MParser.LPAR:
            case MParser.LBRAK:
            case MParser.LCURL:
            case MParser.LT:
            case MParser.LTCOLONGT:
            case MParser.BOOLEAN:
            case MParser.CHARACTER:
            case MParser.TEXT:
            case MParser.INTEGER:
            case MParser.DECIMAL:
            case MParser.DATE:
            case MParser.TIME:
            case MParser.DATETIME:
            case MParser.PERIOD:
            case MParser.VERSION:
            case MParser.CODE:
            case MParser.DOCUMENT:
            case MParser.BLOB:
            case MParser.IMAGE:
            case MParser.UUID:
            case MParser.ITERATOR:
            case MParser.CURSOR:
            case MParser.HTML:
            case MParser.ANY:
            case MParser.MUTABLE:
            case MParser.NONE:
            case MParser.BOOLEAN_LITERAL:
            case MParser.CHAR_LITERAL:
            case MParser.MIN_INTEGER:
            case MParser.MAX_INTEGER:
            case MParser.TYPE_IDENTIFIER:
            case MParser.TEXT_LITERAL:
            case MParser.UUID_LITERAL:
            case MParser.INTEGER_LITERAL:
            case MParser.HEXA_LITERAL:
            case MParser.DECIMAL_LITERAL:
            case MParser.DATETIME_LITERAL:
            case MParser.TIME_LITERAL:
            case MParser.DATE_LITERAL:
            case MParser.PERIOD_LITERAL:
            case MParser.VERSION_LITERAL:
                this.state = 1565;
                localctx.exp = this.annotation_argument_value();
                break;
            case MParser.GETTER:
            case MParser.SETTER:
            case MParser.VARIABLE_IDENTIFIER:
                this.state = 1566;
                this.annotation_argument();
                this.state = 1571;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===MParser.COMMA) {
                    this.state = 1567;
                    this.match(MParser.COMMA);
                    this.state = 1568;
                    this.annotation_argument();
                    this.state = 1573;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1576;
            this.match(MParser.RPAR);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Annotation_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_annotation_identifier;
    return this;
}

Annotation_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Annotation_identifierContext.prototype.constructor = Annotation_identifierContext;

Annotation_identifierContext.prototype.ARONDBASE_IDENTIFIER = function() {
    return this.getToken(MParser.ARONDBASE_IDENTIFIER, 0);
};

Annotation_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAnnotation_identifier(this);
	}
};

Annotation_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAnnotation_identifier(this);
	}
};




MParser.Annotation_identifierContext = Annotation_identifierContext;

MParser.prototype.annotation_identifier = function() {

    var localctx = new Annotation_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, MParser.RULE_annotation_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1580;
        this.match(MParser.ARONDBASE_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Annotation_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_annotation_argument;
    this.name = null; // Annotation_argument_nameContext
    this.exp = null; // Annotation_argument_valueContext
    return this;
}

Annotation_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Annotation_argumentContext.prototype.constructor = Annotation_argumentContext;

Annotation_argumentContext.prototype.EQ = function() {
    return this.getToken(MParser.EQ, 0);
};

Annotation_argumentContext.prototype.annotation_argument_name = function() {
    return this.getTypedRuleContext(Annotation_argument_nameContext,0);
};

Annotation_argumentContext.prototype.annotation_argument_value = function() {
    return this.getTypedRuleContext(Annotation_argument_valueContext,0);
};

Annotation_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAnnotation_argument(this);
	}
};

Annotation_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAnnotation_argument(this);
	}
};




MParser.Annotation_argumentContext = Annotation_argumentContext;

MParser.prototype.annotation_argument = function() {

    var localctx = new Annotation_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, MParser.RULE_annotation_argument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1582;
        localctx.name = this.annotation_argument_name();
        this.state = 1583;
        this.match(MParser.EQ);
        this.state = 1584;
        localctx.exp = this.annotation_argument_value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Annotation_argument_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_annotation_argument_name;
    return this;
}

Annotation_argument_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Annotation_argument_nameContext.prototype.constructor = Annotation_argument_nameContext;

Annotation_argument_nameContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
};

Annotation_argument_nameContext.prototype.GETTER = function() {
    return this.getToken(MParser.GETTER, 0);
};

Annotation_argument_nameContext.prototype.SETTER = function() {
    return this.getToken(MParser.SETTER, 0);
};

Annotation_argument_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAnnotation_argument_name(this);
	}
};

Annotation_argument_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAnnotation_argument_name(this);
	}
};




MParser.Annotation_argument_nameContext = Annotation_argument_nameContext;

MParser.prototype.annotation_argument_name = function() {

    var localctx = new Annotation_argument_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, MParser.RULE_annotation_argument_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1586;
        _la = this._input.LA(1);
        if(!(_la===MParser.GETTER || _la===MParser.SETTER || _la===MParser.VARIABLE_IDENTIFIER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Annotation_argument_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_annotation_argument_value;
    return this;
}

Annotation_argument_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Annotation_argument_valueContext.prototype.constructor = Annotation_argument_valueContext;


 
Annotation_argument_valueContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AnnotationLiteralValueContext(parser, ctx) {
	Annotation_argument_valueContext.call(this, parser);
    this.exp = null; // Literal_expressionContext;
    Annotation_argument_valueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnnotationLiteralValueContext.prototype = Object.create(Annotation_argument_valueContext.prototype);
AnnotationLiteralValueContext.prototype.constructor = AnnotationLiteralValueContext;

MParser.AnnotationLiteralValueContext = AnnotationLiteralValueContext;

AnnotationLiteralValueContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};
AnnotationLiteralValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAnnotationLiteralValue(this);
	}
};

AnnotationLiteralValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAnnotationLiteralValue(this);
	}
};


function AnnotationTypeValueContext(parser, ctx) {
	Annotation_argument_valueContext.call(this, parser);
    this.typ = null; // Primary_typeContext;
    Annotation_argument_valueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnnotationTypeValueContext.prototype = Object.create(Annotation_argument_valueContext.prototype);
AnnotationTypeValueContext.prototype.constructor = AnnotationTypeValueContext;

MParser.AnnotationTypeValueContext = AnnotationTypeValueContext;

AnnotationTypeValueContext.prototype.primary_type = function() {
    return this.getTypedRuleContext(Primary_typeContext,0);
};
AnnotationTypeValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAnnotationTypeValue(this);
	}
};

AnnotationTypeValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAnnotationTypeValue(this);
	}
};



MParser.Annotation_argument_valueContext = Annotation_argument_valueContext;

MParser.prototype.annotation_argument_value = function() {

    var localctx = new Annotation_argument_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, MParser.RULE_annotation_argument_value);
    try {
        this.state = 1590;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AnnotationLiteralValueContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1588;
            localctx.exp = this.literal_expression();
            break;

        case 2:
            localctx = new AnnotationTypeValueContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1589;
            localctx.typ = this.primary_type();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Resource_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_resource_declaration;
    return this;
}

Resource_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Resource_declarationContext.prototype.constructor = Resource_declarationContext;

Resource_declarationContext.prototype.native_resource_declaration = function() {
    return this.getTypedRuleContext(Native_resource_declarationContext,0);
};

Resource_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterResource_declaration(this);
	}
};

Resource_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitResource_declaration(this);
	}
};




MParser.Resource_declarationContext = Resource_declarationContext;

MParser.prototype.resource_declaration = function() {

    var localctx = new Resource_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, MParser.RULE_resource_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1592;
        this.native_resource_declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enum_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_enum_declaration;
    return this;
}

Enum_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_declarationContext.prototype.constructor = Enum_declarationContext;

Enum_declarationContext.prototype.enum_category_declaration = function() {
    return this.getTypedRuleContext(Enum_category_declarationContext,0);
};

Enum_declarationContext.prototype.enum_native_declaration = function() {
    return this.getTypedRuleContext(Enum_native_declarationContext,0);
};

Enum_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterEnum_declaration(this);
	}
};

Enum_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitEnum_declaration(this);
	}
};




MParser.Enum_declarationContext = Enum_declarationContext;

MParser.prototype.enum_declaration = function() {

    var localctx = new Enum_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, MParser.RULE_enum_declaration);
    try {
        this.state = 1596;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1594;
            this.enum_category_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1595;
            this.enum_native_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_symbol_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_native_symbol_list;
    return this;
}

Native_symbol_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_symbol_listContext.prototype.constructor = Native_symbol_listContext;

Native_symbol_listContext.prototype.native_symbol = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Native_symbolContext);
    } else {
        return this.getTypedRuleContext(Native_symbolContext,i);
    }
};

Native_symbol_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Native_symbol_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNative_symbol_list(this);
	}
};

Native_symbol_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNative_symbol_list(this);
	}
};




MParser.Native_symbol_listContext = Native_symbol_listContext;

MParser.prototype.native_symbol_list = function() {

    var localctx = new Native_symbol_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, MParser.RULE_native_symbol_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1598;
        this.native_symbol();
        this.state = 1604;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,105,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1599;
                this.lfp();
                this.state = 1600;
                this.native_symbol(); 
            }
            this.state = 1606;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,105,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_symbol_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_category_symbol_list;
    return this;
}

Category_symbol_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_symbol_listContext.prototype.constructor = Category_symbol_listContext;

Category_symbol_listContext.prototype.category_symbol = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Category_symbolContext);
    } else {
        return this.getTypedRuleContext(Category_symbolContext,i);
    }
};

Category_symbol_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Category_symbol_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCategory_symbol_list(this);
	}
};

Category_symbol_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCategory_symbol_list(this);
	}
};




MParser.Category_symbol_listContext = Category_symbol_listContext;

MParser.prototype.category_symbol_list = function() {

    var localctx = new Category_symbol_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, MParser.RULE_category_symbol_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1607;
        this.category_symbol();
        this.state = 1613;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,106,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1608;
                this.lfp();
                this.state = 1609;
                this.category_symbol(); 
            }
            this.state = 1615;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,106,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Symbol_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_symbol_list;
    return this;
}

Symbol_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Symbol_listContext.prototype.constructor = Symbol_listContext;

Symbol_listContext.prototype.symbol_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Symbol_identifierContext);
    } else {
        return this.getTypedRuleContext(Symbol_identifierContext,i);
    }
};

Symbol_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.COMMA);
    } else {
        return this.getToken(MParser.COMMA, i);
    }
};


Symbol_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSymbol_list(this);
	}
};

Symbol_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSymbol_list(this);
	}
};




MParser.Symbol_listContext = Symbol_listContext;

MParser.prototype.symbol_list = function() {

    var localctx = new Symbol_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, MParser.RULE_symbol_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1616;
        this.symbol_identifier();
        this.state = 1621;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MParser.COMMA) {
            this.state = 1617;
            this.match(MParser.COMMA);
            this.state = 1618;
            this.symbol_identifier();
            this.state = 1623;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_attribute_constraint;
    return this;
}

Attribute_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_constraintContext.prototype.constructor = Attribute_constraintContext;


 
Attribute_constraintContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MatchingSetContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.source = null; // Set_literalContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingSetContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingSetContext.prototype.constructor = MatchingSetContext;

MParser.MatchingSetContext = MatchingSetContext;

MatchingSetContext.prototype.IN = function() {
    return this.getToken(MParser.IN, 0);
};

MatchingSetContext.prototype.set_literal = function() {
    return this.getTypedRuleContext(Set_literalContext,0);
};
MatchingSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMatchingSet(this);
	}
};

MatchingSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMatchingSet(this);
	}
};


function MatchingPatternContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.text = null; // Token;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingPatternContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingPatternContext.prototype.constructor = MatchingPatternContext;

MParser.MatchingPatternContext = MatchingPatternContext;

MatchingPatternContext.prototype.MATCHING = function() {
    return this.getToken(MParser.MATCHING, 0);
};

MatchingPatternContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(MParser.TEXT_LITERAL, 0);
};
MatchingPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMatchingPattern(this);
	}
};

MatchingPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMatchingPattern(this);
	}
};


function MatchingListContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.source = null; // List_literalContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingListContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingListContext.prototype.constructor = MatchingListContext;

MParser.MatchingListContext = MatchingListContext;

MatchingListContext.prototype.IN = function() {
    return this.getToken(MParser.IN, 0);
};

MatchingListContext.prototype.list_literal = function() {
    return this.getTypedRuleContext(List_literalContext,0);
};
MatchingListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMatchingList(this);
	}
};

MatchingListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMatchingList(this);
	}
};


function MatchingRangeContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.source = null; // Range_literalContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingRangeContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingRangeContext.prototype.constructor = MatchingRangeContext;

MParser.MatchingRangeContext = MatchingRangeContext;

MatchingRangeContext.prototype.IN = function() {
    return this.getToken(MParser.IN, 0);
};

MatchingRangeContext.prototype.range_literal = function() {
    return this.getTypedRuleContext(Range_literalContext,0);
};
MatchingRangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMatchingRange(this);
	}
};

MatchingRangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMatchingRange(this);
	}
};


function MatchingExpressionContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingExpressionContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingExpressionContext.prototype.constructor = MatchingExpressionContext;

MParser.MatchingExpressionContext = MatchingExpressionContext;

MatchingExpressionContext.prototype.MATCHING = function() {
    return this.getToken(MParser.MATCHING, 0);
};

MatchingExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
MatchingExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMatchingExpression(this);
	}
};

MatchingExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMatchingExpression(this);
	}
};



MParser.Attribute_constraintContext = Attribute_constraintContext;

MParser.prototype.attribute_constraint = function() {

    var localctx = new Attribute_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, MParser.RULE_attribute_constraint);
    try {
        this.state = 1634;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MatchingListContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1624;
            this.match(MParser.IN);
            this.state = 1625;
            localctx.source = this.list_literal();
            break;

        case 2:
            localctx = new MatchingSetContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1626;
            this.match(MParser.IN);
            this.state = 1627;
            localctx.source = this.set_literal();
            break;

        case 3:
            localctx = new MatchingRangeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1628;
            this.match(MParser.IN);
            this.state = 1629;
            localctx.source = this.range_literal();
            break;

        case 4:
            localctx = new MatchingPatternContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1630;
            this.match(MParser.MATCHING);
            this.state = 1631;
            localctx.text = this.match(MParser.TEXT_LITERAL);
            break;

        case 5:
            localctx = new MatchingExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1632;
            this.match(MParser.MATCHING);
            this.state = 1633;
            localctx.exp = this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function List_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_list_literal;
    return this;
}

List_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_literalContext.prototype.constructor = List_literalContext;

List_literalContext.prototype.LBRAK = function() {
    return this.getToken(MParser.LBRAK, 0);
};

List_literalContext.prototype.RBRAK = function() {
    return this.getToken(MParser.RBRAK, 0);
};

List_literalContext.prototype.MUTABLE = function() {
    return this.getToken(MParser.MUTABLE, 0);
};

List_literalContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

List_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterList_literal(this);
	}
};

List_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitList_literal(this);
	}
};




MParser.List_literalContext = List_literalContext;

MParser.prototype.list_literal = function() {

    var localctx = new List_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, MParser.RULE_list_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1637;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.MUTABLE) {
            this.state = 1636;
            this.match(MParser.MUTABLE);
        }

        this.state = 1639;
        this.match(MParser.LBRAK);
        this.state = 1641;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MParser.LPAR - 20)) | (1 << (MParser.LBRAK - 20)) | (1 << (MParser.LCURL - 20)) | (1 << (MParser.MINUS - 20)) | (1 << (MParser.LT - 20)) | (1 << (MParser.LTGT - 20)) | (1 << (MParser.LTCOLONGT - 20)))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.CODE - 52)) | (1 << (MParser.DOCUMENT - 52)) | (1 << (MParser.BLOB - 52)) | (1 << (MParser.IMAGE - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.ITERATOR - 52)) | (1 << (MParser.CURSOR - 52)) | (1 << (MParser.HTML - 52)) | (1 << (MParser.ANY - 52)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (MParser.EXECUTE - 103)) | (1 << (MParser.FETCH - 103)) | (1 << (MParser.MUTABLE - 103)) | (1 << (MParser.NONE - 103)) | (1 << (MParser.NOT - 103)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (MParser.READ - 138)) | (1 << (MParser.SELF - 138)) | (1 << (MParser.SORTED - 138)) | (1 << (MParser.THIS - 138)) | (1 << (MParser.BOOLEAN_LITERAL - 138)) | (1 << (MParser.CHAR_LITERAL - 138)) | (1 << (MParser.MIN_INTEGER - 138)) | (1 << (MParser.MAX_INTEGER - 138)) | (1 << (MParser.SYMBOL_IDENTIFIER - 138)) | (1 << (MParser.TYPE_IDENTIFIER - 138)))) !== 0) || ((((_la - 170)) & ~0x1f) == 0 && ((1 << (_la - 170)) & ((1 << (MParser.VARIABLE_IDENTIFIER - 170)) | (1 << (MParser.TEXT_LITERAL - 170)) | (1 << (MParser.UUID_LITERAL - 170)) | (1 << (MParser.INTEGER_LITERAL - 170)) | (1 << (MParser.HEXA_LITERAL - 170)) | (1 << (MParser.DECIMAL_LITERAL - 170)) | (1 << (MParser.DATETIME_LITERAL - 170)) | (1 << (MParser.TIME_LITERAL - 170)) | (1 << (MParser.DATE_LITERAL - 170)) | (1 << (MParser.PERIOD_LITERAL - 170)) | (1 << (MParser.VERSION_LITERAL - 170)))) !== 0)) {
            this.state = 1640;
            this.expression_list();
        }

        this.state = 1643;
        this.match(MParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_set_literal;
    return this;
}

Set_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_literalContext.prototype.constructor = Set_literalContext;

Set_literalContext.prototype.LT = function() {
    return this.getToken(MParser.LT, 0);
};

Set_literalContext.prototype.GT = function() {
    return this.getToken(MParser.GT, 0);
};

Set_literalContext.prototype.MUTABLE = function() {
    return this.getToken(MParser.MUTABLE, 0);
};

Set_literalContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Set_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSet_literal(this);
	}
};

Set_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSet_literal(this);
	}
};




MParser.Set_literalContext = Set_literalContext;

MParser.prototype.set_literal = function() {

    var localctx = new Set_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, MParser.RULE_set_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1646;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.MUTABLE) {
            this.state = 1645;
            this.match(MParser.MUTABLE);
        }

        this.state = 1648;
        this.match(MParser.LT);
        this.state = 1650;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MParser.LPAR - 20)) | (1 << (MParser.LBRAK - 20)) | (1 << (MParser.LCURL - 20)) | (1 << (MParser.MINUS - 20)) | (1 << (MParser.LT - 20)) | (1 << (MParser.LTGT - 20)) | (1 << (MParser.LTCOLONGT - 20)))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.CODE - 52)) | (1 << (MParser.DOCUMENT - 52)) | (1 << (MParser.BLOB - 52)) | (1 << (MParser.IMAGE - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.ITERATOR - 52)) | (1 << (MParser.CURSOR - 52)) | (1 << (MParser.HTML - 52)) | (1 << (MParser.ANY - 52)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (MParser.EXECUTE - 103)) | (1 << (MParser.FETCH - 103)) | (1 << (MParser.MUTABLE - 103)) | (1 << (MParser.NONE - 103)) | (1 << (MParser.NOT - 103)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (MParser.READ - 138)) | (1 << (MParser.SELF - 138)) | (1 << (MParser.SORTED - 138)) | (1 << (MParser.THIS - 138)) | (1 << (MParser.BOOLEAN_LITERAL - 138)) | (1 << (MParser.CHAR_LITERAL - 138)) | (1 << (MParser.MIN_INTEGER - 138)) | (1 << (MParser.MAX_INTEGER - 138)) | (1 << (MParser.SYMBOL_IDENTIFIER - 138)) | (1 << (MParser.TYPE_IDENTIFIER - 138)))) !== 0) || ((((_la - 170)) & ~0x1f) == 0 && ((1 << (_la - 170)) & ((1 << (MParser.VARIABLE_IDENTIFIER - 170)) | (1 << (MParser.TEXT_LITERAL - 170)) | (1 << (MParser.UUID_LITERAL - 170)) | (1 << (MParser.INTEGER_LITERAL - 170)) | (1 << (MParser.HEXA_LITERAL - 170)) | (1 << (MParser.DECIMAL_LITERAL - 170)) | (1 << (MParser.DATETIME_LITERAL - 170)) | (1 << (MParser.TIME_LITERAL - 170)) | (1 << (MParser.DATE_LITERAL - 170)) | (1 << (MParser.PERIOD_LITERAL - 170)) | (1 << (MParser.VERSION_LITERAL - 170)))) !== 0)) {
            this.state = 1649;
            this.expression_list();
        }

        this.state = 1652;
        this.match(MParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_expression_list;
    return this;
}

Expression_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_listContext.prototype.constructor = Expression_listContext;

Expression_listContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Expression_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.COMMA);
    } else {
        return this.getToken(MParser.COMMA, i);
    }
};


Expression_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterExpression_list(this);
	}
};

Expression_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitExpression_list(this);
	}
};




MParser.Expression_listContext = Expression_listContext;

MParser.prototype.expression_list = function() {

    var localctx = new Expression_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, MParser.RULE_expression_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1654;
        this.expression(0);
        this.state = 1659;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MParser.COMMA) {
            this.state = 1655;
            this.match(MParser.COMMA);
            this.state = 1656;
            this.expression(0);
            this.state = 1661;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Range_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_range_literal;
    this.low = null; // ExpressionContext
    this.high = null; // ExpressionContext
    return this;
}

Range_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Range_literalContext.prototype.constructor = Range_literalContext;

Range_literalContext.prototype.LBRAK = function() {
    return this.getToken(MParser.LBRAK, 0);
};

Range_literalContext.prototype.RANGE = function() {
    return this.getToken(MParser.RANGE, 0);
};

Range_literalContext.prototype.RBRAK = function() {
    return this.getToken(MParser.RBRAK, 0);
};

Range_literalContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Range_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterRange_literal(this);
	}
};

Range_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitRange_literal(this);
	}
};




MParser.Range_literalContext = Range_literalContext;

MParser.prototype.range_literal = function() {

    var localctx = new Range_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, MParser.RULE_range_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1662;
        this.match(MParser.LBRAK);
        this.state = 1663;
        localctx.low = this.expression(0);
        this.state = 1664;
        this.match(MParser.RANGE);
        this.state = 1665;
        localctx.high = this.expression(0);
        this.state = 1666;
        this.match(MParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypedefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_typedef;
    return this;
}

TypedefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedefContext.prototype.constructor = TypedefContext;


 
TypedefContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function IteratorTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.i = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IteratorTypeContext.prototype = Object.create(TypedefContext.prototype);
IteratorTypeContext.prototype.constructor = IteratorTypeContext;

MParser.IteratorTypeContext = IteratorTypeContext;

IteratorTypeContext.prototype.ITERATOR = function() {
    return this.getToken(MParser.ITERATOR, 0);
};

IteratorTypeContext.prototype.LT = function() {
    return this.getToken(MParser.LT, 0);
};

IteratorTypeContext.prototype.GT = function() {
    return this.getToken(MParser.GT, 0);
};

IteratorTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
IteratorTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterIteratorType(this);
	}
};

IteratorTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitIteratorType(this);
	}
};


function SetTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.s = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetTypeContext.prototype = Object.create(TypedefContext.prototype);
SetTypeContext.prototype.constructor = SetTypeContext;

MParser.SetTypeContext = SetTypeContext;

SetTypeContext.prototype.LTGT = function() {
    return this.getToken(MParser.LTGT, 0);
};

SetTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
SetTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSetType(this);
	}
};

SetTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSetType(this);
	}
};


function ListTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.l = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListTypeContext.prototype = Object.create(TypedefContext.prototype);
ListTypeContext.prototype.constructor = ListTypeContext;

MParser.ListTypeContext = ListTypeContext;

ListTypeContext.prototype.LBRAK = function() {
    return this.getToken(MParser.LBRAK, 0);
};

ListTypeContext.prototype.RBRAK = function() {
    return this.getToken(MParser.RBRAK, 0);
};

ListTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
ListTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterListType(this);
	}
};

ListTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitListType(this);
	}
};


function DictTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.d = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DictTypeContext.prototype = Object.create(TypedefContext.prototype);
DictTypeContext.prototype.constructor = DictTypeContext;

MParser.DictTypeContext = DictTypeContext;

DictTypeContext.prototype.LTCOLONGT = function() {
    return this.getToken(MParser.LTCOLONGT, 0);
};

DictTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
DictTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDictType(this);
	}
};

DictTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDictType(this);
	}
};


function CursorTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.c = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CursorTypeContext.prototype = Object.create(TypedefContext.prototype);
CursorTypeContext.prototype.constructor = CursorTypeContext;

MParser.CursorTypeContext = CursorTypeContext;

CursorTypeContext.prototype.CURSOR = function() {
    return this.getToken(MParser.CURSOR, 0);
};

CursorTypeContext.prototype.LT = function() {
    return this.getToken(MParser.LT, 0);
};

CursorTypeContext.prototype.GT = function() {
    return this.getToken(MParser.GT, 0);
};

CursorTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
CursorTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCursorType(this);
	}
};

CursorTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCursorType(this);
	}
};


function PrimaryTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.p = null; // Primary_typeContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrimaryTypeContext.prototype = Object.create(TypedefContext.prototype);
PrimaryTypeContext.prototype.constructor = PrimaryTypeContext;

MParser.PrimaryTypeContext = PrimaryTypeContext;

PrimaryTypeContext.prototype.primary_type = function() {
    return this.getTypedRuleContext(Primary_typeContext,0);
};
PrimaryTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPrimaryType(this);
	}
};

PrimaryTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPrimaryType(this);
	}
};



MParser.prototype.typedef = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypedefContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 184;
    this.enterRecursionRule(localctx, 184, MParser.RULE_typedef, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1680;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.BOOLEAN:
        case MParser.CHARACTER:
        case MParser.TEXT:
        case MParser.INTEGER:
        case MParser.DECIMAL:
        case MParser.DATE:
        case MParser.TIME:
        case MParser.DATETIME:
        case MParser.PERIOD:
        case MParser.VERSION:
        case MParser.CODE:
        case MParser.DOCUMENT:
        case MParser.BLOB:
        case MParser.IMAGE:
        case MParser.UUID:
        case MParser.HTML:
        case MParser.TYPE_IDENTIFIER:
            localctx = new PrimaryTypeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1669;
            localctx.p = this.primary_type();
            break;
        case MParser.CURSOR:
            localctx = new CursorTypeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1670;
            this.match(MParser.CURSOR);
            this.state = 1671;
            this.match(MParser.LT);
            this.state = 1672;
            localctx.c = this.typedef(0);
            this.state = 1673;
            this.match(MParser.GT);
            break;
        case MParser.ITERATOR:
            localctx = new IteratorTypeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1675;
            this.match(MParser.ITERATOR);
            this.state = 1676;
            this.match(MParser.LT);
            this.state = 1677;
            localctx.i = this.typedef(0);
            this.state = 1678;
            this.match(MParser.GT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1691;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,116,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1689;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new SetTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
                    localctx.s = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_typedef);
                    this.state = 1682;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1683;
                    this.match(MParser.LTGT);
                    break;

                case 2:
                    localctx = new ListTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
                    localctx.l = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_typedef);
                    this.state = 1684;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 1685;
                    this.match(MParser.LBRAK);
                    this.state = 1686;
                    this.match(MParser.RBRAK);
                    break;

                case 3:
                    localctx = new DictTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
                    localctx.d = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_typedef);
                    this.state = 1687;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1688;
                    this.match(MParser.LTCOLONGT);
                    break;

                } 
            }
            this.state = 1693;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,116,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Primary_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_primary_type;
    return this;
}

Primary_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Primary_typeContext.prototype.constructor = Primary_typeContext;


 
Primary_typeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function NativeTypeContext(parser, ctx) {
	Primary_typeContext.call(this, parser);
    this.n = null; // Native_typeContext;
    Primary_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeTypeContext.prototype = Object.create(Primary_typeContext.prototype);
NativeTypeContext.prototype.constructor = NativeTypeContext;

MParser.NativeTypeContext = NativeTypeContext;

NativeTypeContext.prototype.native_type = function() {
    return this.getTypedRuleContext(Native_typeContext,0);
};
NativeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNativeType(this);
	}
};

NativeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNativeType(this);
	}
};


function CategoryTypeContext(parser, ctx) {
	Primary_typeContext.call(this, parser);
    this.c = null; // Category_typeContext;
    Primary_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CategoryTypeContext.prototype = Object.create(Primary_typeContext.prototype);
CategoryTypeContext.prototype.constructor = CategoryTypeContext;

MParser.CategoryTypeContext = CategoryTypeContext;

CategoryTypeContext.prototype.category_type = function() {
    return this.getTypedRuleContext(Category_typeContext,0);
};
CategoryTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCategoryType(this);
	}
};

CategoryTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCategoryType(this);
	}
};



MParser.Primary_typeContext = Primary_typeContext;

MParser.prototype.primary_type = function() {

    var localctx = new Primary_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, MParser.RULE_primary_type);
    try {
        this.state = 1696;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.BOOLEAN:
        case MParser.CHARACTER:
        case MParser.TEXT:
        case MParser.INTEGER:
        case MParser.DECIMAL:
        case MParser.DATE:
        case MParser.TIME:
        case MParser.DATETIME:
        case MParser.PERIOD:
        case MParser.VERSION:
        case MParser.CODE:
        case MParser.DOCUMENT:
        case MParser.BLOB:
        case MParser.IMAGE:
        case MParser.UUID:
        case MParser.HTML:
            localctx = new NativeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1694;
            localctx.n = this.native_type();
            break;
        case MParser.TYPE_IDENTIFIER:
            localctx = new CategoryTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1695;
            localctx.c = this.category_type();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_native_type;
    return this;
}

Native_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_typeContext.prototype.constructor = Native_typeContext;


 
Native_typeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PeriodTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PeriodTypeContext.prototype = Object.create(Native_typeContext.prototype);
PeriodTypeContext.prototype.constructor = PeriodTypeContext;

MParser.PeriodTypeContext = PeriodTypeContext;

PeriodTypeContext.prototype.PERIOD = function() {
    return this.getToken(MParser.PERIOD, 0);
};
PeriodTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPeriodType(this);
	}
};

PeriodTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPeriodType(this);
	}
};


function HtmlTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HtmlTypeContext.prototype = Object.create(Native_typeContext.prototype);
HtmlTypeContext.prototype.constructor = HtmlTypeContext;

MParser.HtmlTypeContext = HtmlTypeContext;

HtmlTypeContext.prototype.HTML = function() {
    return this.getToken(MParser.HTML, 0);
};
HtmlTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterHtmlType(this);
	}
};

HtmlTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitHtmlType(this);
	}
};


function BooleanTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanTypeContext.prototype = Object.create(Native_typeContext.prototype);
BooleanTypeContext.prototype.constructor = BooleanTypeContext;

MParser.BooleanTypeContext = BooleanTypeContext;

BooleanTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(MParser.BOOLEAN, 0);
};
BooleanTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterBooleanType(this);
	}
};

BooleanTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitBooleanType(this);
	}
};


function DocumentTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocumentTypeContext.prototype = Object.create(Native_typeContext.prototype);
DocumentTypeContext.prototype.constructor = DocumentTypeContext;

MParser.DocumentTypeContext = DocumentTypeContext;

DocumentTypeContext.prototype.DOCUMENT = function() {
    return this.getToken(MParser.DOCUMENT, 0);
};
DocumentTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDocumentType(this);
	}
};

DocumentTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDocumentType(this);
	}
};


function CharacterTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CharacterTypeContext.prototype = Object.create(Native_typeContext.prototype);
CharacterTypeContext.prototype.constructor = CharacterTypeContext;

MParser.CharacterTypeContext = CharacterTypeContext;

CharacterTypeContext.prototype.CHARACTER = function() {
    return this.getToken(MParser.CHARACTER, 0);
};
CharacterTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCharacterType(this);
	}
};

CharacterTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCharacterType(this);
	}
};


function VersionTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VersionTypeContext.prototype = Object.create(Native_typeContext.prototype);
VersionTypeContext.prototype.constructor = VersionTypeContext;

MParser.VersionTypeContext = VersionTypeContext;

VersionTypeContext.prototype.VERSION = function() {
    return this.getToken(MParser.VERSION, 0);
};
VersionTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterVersionType(this);
	}
};

VersionTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitVersionType(this);
	}
};


function TextTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TextTypeContext.prototype = Object.create(Native_typeContext.prototype);
TextTypeContext.prototype.constructor = TextTypeContext;

MParser.TextTypeContext = TextTypeContext;

TextTypeContext.prototype.TEXT = function() {
    return this.getToken(MParser.TEXT, 0);
};
TextTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterTextType(this);
	}
};

TextTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitTextType(this);
	}
};


function ImageTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ImageTypeContext.prototype = Object.create(Native_typeContext.prototype);
ImageTypeContext.prototype.constructor = ImageTypeContext;

MParser.ImageTypeContext = ImageTypeContext;

ImageTypeContext.prototype.IMAGE = function() {
    return this.getToken(MParser.IMAGE, 0);
};
ImageTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterImageType(this);
	}
};

ImageTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitImageType(this);
	}
};


function TimeTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeTypeContext.prototype = Object.create(Native_typeContext.prototype);
TimeTypeContext.prototype.constructor = TimeTypeContext;

MParser.TimeTypeContext = TimeTypeContext;

TimeTypeContext.prototype.TIME = function() {
    return this.getToken(MParser.TIME, 0);
};
TimeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterTimeType(this);
	}
};

TimeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitTimeType(this);
	}
};


function IntegerTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntegerTypeContext.prototype = Object.create(Native_typeContext.prototype);
IntegerTypeContext.prototype.constructor = IntegerTypeContext;

MParser.IntegerTypeContext = IntegerTypeContext;

IntegerTypeContext.prototype.INTEGER = function() {
    return this.getToken(MParser.INTEGER, 0);
};
IntegerTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterIntegerType(this);
	}
};

IntegerTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitIntegerType(this);
	}
};


function DateTimeTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateTimeTypeContext.prototype = Object.create(Native_typeContext.prototype);
DateTimeTypeContext.prototype.constructor = DateTimeTypeContext;

MParser.DateTimeTypeContext = DateTimeTypeContext;

DateTimeTypeContext.prototype.DATETIME = function() {
    return this.getToken(MParser.DATETIME, 0);
};
DateTimeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDateTimeType(this);
	}
};

DateTimeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDateTimeType(this);
	}
};


function BlobTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BlobTypeContext.prototype = Object.create(Native_typeContext.prototype);
BlobTypeContext.prototype.constructor = BlobTypeContext;

MParser.BlobTypeContext = BlobTypeContext;

BlobTypeContext.prototype.BLOB = function() {
    return this.getToken(MParser.BLOB, 0);
};
BlobTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterBlobType(this);
	}
};

BlobTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitBlobType(this);
	}
};


function UUIDTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UUIDTypeContext.prototype = Object.create(Native_typeContext.prototype);
UUIDTypeContext.prototype.constructor = UUIDTypeContext;

MParser.UUIDTypeContext = UUIDTypeContext;

UUIDTypeContext.prototype.UUID = function() {
    return this.getToken(MParser.UUID, 0);
};
UUIDTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterUUIDType(this);
	}
};

UUIDTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitUUIDType(this);
	}
};


function DecimalTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DecimalTypeContext.prototype = Object.create(Native_typeContext.prototype);
DecimalTypeContext.prototype.constructor = DecimalTypeContext;

MParser.DecimalTypeContext = DecimalTypeContext;

DecimalTypeContext.prototype.DECIMAL = function() {
    return this.getToken(MParser.DECIMAL, 0);
};
DecimalTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDecimalType(this);
	}
};

DecimalTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDecimalType(this);
	}
};


function CodeTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CodeTypeContext.prototype = Object.create(Native_typeContext.prototype);
CodeTypeContext.prototype.constructor = CodeTypeContext;

MParser.CodeTypeContext = CodeTypeContext;

CodeTypeContext.prototype.CODE = function() {
    return this.getToken(MParser.CODE, 0);
};
CodeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCodeType(this);
	}
};

CodeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCodeType(this);
	}
};


function DateTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateTypeContext.prototype = Object.create(Native_typeContext.prototype);
DateTypeContext.prototype.constructor = DateTypeContext;

MParser.DateTypeContext = DateTypeContext;

DateTypeContext.prototype.DATE = function() {
    return this.getToken(MParser.DATE, 0);
};
DateTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDateType(this);
	}
};

DateTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDateType(this);
	}
};



MParser.Native_typeContext = Native_typeContext;

MParser.prototype.native_type = function() {

    var localctx = new Native_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, MParser.RULE_native_type);
    try {
        this.state = 1714;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.BOOLEAN:
            localctx = new BooleanTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1698;
            this.match(MParser.BOOLEAN);
            break;
        case MParser.CHARACTER:
            localctx = new CharacterTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1699;
            this.match(MParser.CHARACTER);
            break;
        case MParser.TEXT:
            localctx = new TextTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1700;
            this.match(MParser.TEXT);
            break;
        case MParser.IMAGE:
            localctx = new ImageTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1701;
            this.match(MParser.IMAGE);
            break;
        case MParser.INTEGER:
            localctx = new IntegerTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1702;
            this.match(MParser.INTEGER);
            break;
        case MParser.DECIMAL:
            localctx = new DecimalTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1703;
            this.match(MParser.DECIMAL);
            break;
        case MParser.DOCUMENT:
            localctx = new DocumentTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1704;
            this.match(MParser.DOCUMENT);
            break;
        case MParser.DATE:
            localctx = new DateTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 1705;
            this.match(MParser.DATE);
            break;
        case MParser.DATETIME:
            localctx = new DateTimeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 1706;
            this.match(MParser.DATETIME);
            break;
        case MParser.TIME:
            localctx = new TimeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 1707;
            this.match(MParser.TIME);
            break;
        case MParser.PERIOD:
            localctx = new PeriodTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 1708;
            this.match(MParser.PERIOD);
            break;
        case MParser.VERSION:
            localctx = new VersionTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 1709;
            this.match(MParser.VERSION);
            break;
        case MParser.CODE:
            localctx = new CodeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 1710;
            this.match(MParser.CODE);
            break;
        case MParser.BLOB:
            localctx = new BlobTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 1711;
            this.match(MParser.BLOB);
            break;
        case MParser.UUID:
            localctx = new UUIDTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 1712;
            this.match(MParser.UUID);
            break;
        case MParser.HTML:
            localctx = new HtmlTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 1713;
            this.match(MParser.HTML);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_category_type;
    this.t1 = null; // Token
    return this;
}

Category_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_typeContext.prototype.constructor = Category_typeContext;

Category_typeContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(MParser.TYPE_IDENTIFIER, 0);
};

Category_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCategory_type(this);
	}
};

Category_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCategory_type(this);
	}
};




MParser.Category_typeContext = Category_typeContext;

MParser.prototype.category_type = function() {

    var localctx = new Category_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, MParser.RULE_category_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1716;
        localctx.t1 = this.match(MParser.TYPE_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mutable_category_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_mutable_category_type;
    return this;
}

Mutable_category_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mutable_category_typeContext.prototype.constructor = Mutable_category_typeContext;

Mutable_category_typeContext.prototype.category_type = function() {
    return this.getTypedRuleContext(Category_typeContext,0);
};

Mutable_category_typeContext.prototype.MUTABLE = function() {
    return this.getToken(MParser.MUTABLE, 0);
};

Mutable_category_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMutable_category_type(this);
	}
};

Mutable_category_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMutable_category_type(this);
	}
};




MParser.Mutable_category_typeContext = Mutable_category_typeContext;

MParser.prototype.mutable_category_type = function() {

    var localctx = new Mutable_category_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, MParser.RULE_mutable_category_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1719;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.MUTABLE) {
            this.state = 1718;
            this.match(MParser.MUTABLE);
        }

        this.state = 1721;
        this.category_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Code_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_code_type;
    this.t1 = null; // Token
    return this;
}

Code_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Code_typeContext.prototype.constructor = Code_typeContext;

Code_typeContext.prototype.CODE = function() {
    return this.getToken(MParser.CODE, 0);
};

Code_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCode_type(this);
	}
};

Code_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCode_type(this);
	}
};




MParser.Code_typeContext = Code_typeContext;

MParser.prototype.code_type = function() {

    var localctx = new Code_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, MParser.RULE_code_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1723;
        localctx.t1 = this.match(MParser.CODE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_category_declaration;
    return this;
}

Category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_declarationContext.prototype.constructor = Category_declarationContext;


 
Category_declarationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ConcreteCategoryDeclarationContext(parser, ctx) {
	Category_declarationContext.call(this, parser);
    this.decl = null; // Concrete_category_declarationContext;
    Category_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConcreteCategoryDeclarationContext.prototype = Object.create(Category_declarationContext.prototype);
ConcreteCategoryDeclarationContext.prototype.constructor = ConcreteCategoryDeclarationContext;

MParser.ConcreteCategoryDeclarationContext = ConcreteCategoryDeclarationContext;

ConcreteCategoryDeclarationContext.prototype.concrete_category_declaration = function() {
    return this.getTypedRuleContext(Concrete_category_declarationContext,0);
};
ConcreteCategoryDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterConcreteCategoryDeclaration(this);
	}
};

ConcreteCategoryDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitConcreteCategoryDeclaration(this);
	}
};


function NativeCategoryDeclarationContext(parser, ctx) {
	Category_declarationContext.call(this, parser);
    this.decl = null; // Native_category_declarationContext;
    Category_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeCategoryDeclarationContext.prototype = Object.create(Category_declarationContext.prototype);
NativeCategoryDeclarationContext.prototype.constructor = NativeCategoryDeclarationContext;

MParser.NativeCategoryDeclarationContext = NativeCategoryDeclarationContext;

NativeCategoryDeclarationContext.prototype.native_category_declaration = function() {
    return this.getTypedRuleContext(Native_category_declarationContext,0);
};
NativeCategoryDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNativeCategoryDeclaration(this);
	}
};

NativeCategoryDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNativeCategoryDeclaration(this);
	}
};


function SingletonCategoryDeclarationContext(parser, ctx) {
	Category_declarationContext.call(this, parser);
    this.decl = null; // Singleton_category_declarationContext;
    Category_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SingletonCategoryDeclarationContext.prototype = Object.create(Category_declarationContext.prototype);
SingletonCategoryDeclarationContext.prototype.constructor = SingletonCategoryDeclarationContext;

MParser.SingletonCategoryDeclarationContext = SingletonCategoryDeclarationContext;

SingletonCategoryDeclarationContext.prototype.singleton_category_declaration = function() {
    return this.getTypedRuleContext(Singleton_category_declarationContext,0);
};
SingletonCategoryDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSingletonCategoryDeclaration(this);
	}
};

SingletonCategoryDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSingletonCategoryDeclaration(this);
	}
};



MParser.Category_declarationContext = Category_declarationContext;

MParser.prototype.category_declaration = function() {

    var localctx = new Category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, MParser.RULE_category_declaration);
    try {
        this.state = 1728;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ConcreteCategoryDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1725;
            localctx.decl = this.concrete_category_declaration();
            break;

        case 2:
            localctx = new NativeCategoryDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1726;
            localctx.decl = this.native_category_declaration();
            break;

        case 3:
            localctx = new SingletonCategoryDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1727;
            localctx.decl = this.singleton_category_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Widget_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_widget_declaration;
    return this;
}

Widget_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Widget_declarationContext.prototype.constructor = Widget_declarationContext;


 
Widget_declarationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ConcreteWidgetDeclarationContext(parser, ctx) {
	Widget_declarationContext.call(this, parser);
    this.decl = null; // Concrete_widget_declarationContext;
    Widget_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConcreteWidgetDeclarationContext.prototype = Object.create(Widget_declarationContext.prototype);
ConcreteWidgetDeclarationContext.prototype.constructor = ConcreteWidgetDeclarationContext;

MParser.ConcreteWidgetDeclarationContext = ConcreteWidgetDeclarationContext;

ConcreteWidgetDeclarationContext.prototype.concrete_widget_declaration = function() {
    return this.getTypedRuleContext(Concrete_widget_declarationContext,0);
};
ConcreteWidgetDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterConcreteWidgetDeclaration(this);
	}
};

ConcreteWidgetDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitConcreteWidgetDeclaration(this);
	}
};


function NativeWidgetDeclarationContext(parser, ctx) {
	Widget_declarationContext.call(this, parser);
    this.decl = null; // Native_widget_declarationContext;
    Widget_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeWidgetDeclarationContext.prototype = Object.create(Widget_declarationContext.prototype);
NativeWidgetDeclarationContext.prototype.constructor = NativeWidgetDeclarationContext;

MParser.NativeWidgetDeclarationContext = NativeWidgetDeclarationContext;

NativeWidgetDeclarationContext.prototype.native_widget_declaration = function() {
    return this.getTypedRuleContext(Native_widget_declarationContext,0);
};
NativeWidgetDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNativeWidgetDeclaration(this);
	}
};

NativeWidgetDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNativeWidgetDeclaration(this);
	}
};



MParser.Widget_declarationContext = Widget_declarationContext;

MParser.prototype.widget_declaration = function() {

    var localctx = new Widget_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, MParser.RULE_widget_declaration);
    try {
        this.state = 1732;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.WIDGET:
            localctx = new ConcreteWidgetDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1730;
            localctx.decl = this.concrete_widget_declaration();
            break;
        case MParser.NATIVE:
            localctx = new NativeWidgetDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1731;
            localctx.decl = this.native_widget_declaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_identifier_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_type_identifier_list;
    return this;
}

Type_identifier_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_identifier_listContext.prototype.constructor = Type_identifier_listContext;

Type_identifier_listContext.prototype.type_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_identifierContext);
    } else {
        return this.getTypedRuleContext(Type_identifierContext,i);
    }
};

Type_identifier_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.COMMA);
    } else {
        return this.getToken(MParser.COMMA, i);
    }
};


Type_identifier_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterType_identifier_list(this);
	}
};

Type_identifier_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitType_identifier_list(this);
	}
};




MParser.Type_identifier_listContext = Type_identifier_listContext;

MParser.prototype.type_identifier_list = function() {

    var localctx = new Type_identifier_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, MParser.RULE_type_identifier_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1734;
        this.type_identifier();
        this.state = 1739;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,122,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1735;
                this.match(MParser.COMMA);
                this.state = 1736;
                this.type_identifier(); 
            }
            this.state = 1741;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,122,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_method_identifier;
    return this;
}

Method_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_identifierContext.prototype.constructor = Method_identifierContext;

Method_identifierContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Method_identifierContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Method_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMethod_identifier(this);
	}
};

Method_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMethod_identifier(this);
	}
};




MParser.Method_identifierContext = Method_identifierContext;

MParser.prototype.method_identifier = function() {

    var localctx = new Method_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, MParser.RULE_method_identifier);
    try {
        this.state = 1744;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.VARIABLE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1742;
            this.variable_identifier();
            break;
        case MParser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 1743;
            this.type_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Identifier_or_keywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_identifier_or_keyword;
    return this;
}

Identifier_or_keywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Identifier_or_keywordContext.prototype.constructor = Identifier_or_keywordContext;

Identifier_or_keywordContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Identifier_or_keywordContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

Identifier_or_keywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterIdentifier_or_keyword(this);
	}
};

Identifier_or_keywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitIdentifier_or_keyword(this);
	}
};




MParser.Identifier_or_keywordContext = Identifier_or_keywordContext;

MParser.prototype.identifier_or_keyword = function() {

    var localctx = new Identifier_or_keywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, MParser.RULE_identifier_or_keyword);
    try {
        this.state = 1748;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.SYMBOL_IDENTIFIER:
        case MParser.TYPE_IDENTIFIER:
        case MParser.VARIABLE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1746;
            this.identifier();
            break;
        case MParser.JAVA:
        case MParser.CSHARP:
        case MParser.PYTHON2:
        case MParser.PYTHON3:
        case MParser.JAVASCRIPT:
        case MParser.SWIFT:
        case MParser.BOOLEAN:
        case MParser.CHARACTER:
        case MParser.TEXT:
        case MParser.INTEGER:
        case MParser.DECIMAL:
        case MParser.DATE:
        case MParser.TIME:
        case MParser.DATETIME:
        case MParser.PERIOD:
        case MParser.VERSION:
        case MParser.CODE:
        case MParser.DOCUMENT:
        case MParser.BLOB:
        case MParser.IMAGE:
        case MParser.UUID:
        case MParser.ITERATOR:
        case MParser.CURSOR:
        case MParser.HTML:
        case MParser.ABSTRACT:
        case MParser.ALL:
        case MParser.ALWAYS:
        case MParser.AND:
        case MParser.ANY:
        case MParser.AS:
        case MParser.ASC:
        case MParser.ATTR:
        case MParser.ATTRIBUTE:
        case MParser.ATTRIBUTES:
        case MParser.BINDINGS:
        case MParser.BREAK:
        case MParser.BY:
        case MParser.CASE:
        case MParser.CATCH:
        case MParser.CATEGORY:
        case MParser.CLASS:
        case MParser.CLOSE:
        case MParser.CONTAINS:
        case MParser.DEF:
        case MParser.DEFAULT:
        case MParser.DEFINE:
        case MParser.DELETE:
        case MParser.DESC:
        case MParser.DO:
        case MParser.DOING:
        case MParser.EACH:
        case MParser.ELSE:
        case MParser.ENUM:
        case MParser.ENUMERATED:
        case MParser.EXCEPT:
        case MParser.EXECUTE:
        case MParser.EXPECTING:
        case MParser.EXTENDS:
        case MParser.FETCH:
        case MParser.FILTERED:
        case MParser.FINALLY:
        case MParser.FLUSH:
        case MParser.FOR:
        case MParser.FROM:
        case MParser.GETTER:
        case MParser.HAS:
        case MParser.IF:
        case MParser.IN:
        case MParser.INDEX:
        case MParser.IS:
        case MParser.MATCHING:
        case MParser.METHOD:
        case MParser.METHODS:
        case MParser.MODULO:
        case MParser.MUTABLE:
        case MParser.NATIVE:
        case MParser.NONE:
        case MParser.NOT:
        case MParser.NOTHING:
        case MParser.NULL:
        case MParser.ON:
        case MParser.ONE:
        case MParser.OPEN:
        case MParser.OPERATOR:
        case MParser.OR:
        case MParser.ORDER:
        case MParser.OTHERWISE:
        case MParser.PASS:
        case MParser.RAISE:
        case MParser.READ:
        case MParser.RECEIVING:
        case MParser.RESOURCE:
        case MParser.RETURN:
        case MParser.RETURNING:
        case MParser.ROWS:
        case MParser.SELF:
        case MParser.SETTER:
        case MParser.SINGLETON:
        case MParser.SORTED:
        case MParser.STORABLE:
        case MParser.STORE:
        case MParser.SWITCH:
        case MParser.TEST:
        case MParser.THIS:
        case MParser.THROW:
        case MParser.TO:
        case MParser.TRY:
        case MParser.VERIFYING:
        case MParser.WIDGET:
        case MParser.WITH:
        case MParser.WHEN:
        case MParser.WHERE:
        case MParser.WHILE:
        case MParser.WRITE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1747;
            this.keyword();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Nospace_hyphen_identifier_or_keywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_nospace_hyphen_identifier_or_keyword;
    return this;
}

Nospace_hyphen_identifier_or_keywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nospace_hyphen_identifier_or_keywordContext.prototype.constructor = Nospace_hyphen_identifier_or_keywordContext;

Nospace_hyphen_identifier_or_keywordContext.prototype.MINUS = function() {
    return this.getToken(MParser.MINUS, 0);
};

Nospace_hyphen_identifier_or_keywordContext.prototype.nospace_identifier_or_keyword = function() {
    return this.getTypedRuleContext(Nospace_identifier_or_keywordContext,0);
};

Nospace_hyphen_identifier_or_keywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNospace_hyphen_identifier_or_keyword(this);
	}
};

Nospace_hyphen_identifier_or_keywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNospace_hyphen_identifier_or_keyword(this);
	}
};




MParser.Nospace_hyphen_identifier_or_keywordContext = Nospace_hyphen_identifier_or_keywordContext;

MParser.prototype.nospace_hyphen_identifier_or_keyword = function() {

    var localctx = new Nospace_hyphen_identifier_or_keywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, MParser.RULE_nospace_hyphen_identifier_or_keyword);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1750;
        if (!( this.wasNotWhiteSpace())) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.wasNotWhiteSpace()");
        }
        this.state = 1751;
        this.match(MParser.MINUS);
        this.state = 1752;
        this.nospace_identifier_or_keyword();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Nospace_identifier_or_keywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_nospace_identifier_or_keyword;
    return this;
}

Nospace_identifier_or_keywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nospace_identifier_or_keywordContext.prototype.constructor = Nospace_identifier_or_keywordContext;

Nospace_identifier_or_keywordContext.prototype.identifier_or_keyword = function() {
    return this.getTypedRuleContext(Identifier_or_keywordContext,0);
};

Nospace_identifier_or_keywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNospace_identifier_or_keyword(this);
	}
};

Nospace_identifier_or_keywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNospace_identifier_or_keyword(this);
	}
};




MParser.Nospace_identifier_or_keywordContext = Nospace_identifier_or_keywordContext;

MParser.prototype.nospace_identifier_or_keyword = function() {

    var localctx = new Nospace_identifier_or_keywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, MParser.RULE_nospace_identifier_or_keyword);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1754;
        if (!( this.wasNotWhiteSpace())) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.wasNotWhiteSpace()");
        }
        this.state = 1755;
        this.identifier_or_keyword();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;


 
IdentifierContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TypeIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
TypeIdentifierContext.prototype.constructor = TypeIdentifierContext;

MParser.TypeIdentifierContext = TypeIdentifierContext;

TypeIdentifierContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};
TypeIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterTypeIdentifier(this);
	}
};

TypeIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitTypeIdentifier(this);
	}
};


function SymbolIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SymbolIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
SymbolIdentifierContext.prototype.constructor = SymbolIdentifierContext;

MParser.SymbolIdentifierContext = SymbolIdentifierContext;

SymbolIdentifierContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};
SymbolIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSymbolIdentifier(this);
	}
};

SymbolIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSymbolIdentifier(this);
	}
};


function VariableIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VariableIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
VariableIdentifierContext.prototype.constructor = VariableIdentifierContext;

MParser.VariableIdentifierContext = VariableIdentifierContext;

VariableIdentifierContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
VariableIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterVariableIdentifier(this);
	}
};

VariableIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitVariableIdentifier(this);
	}
};



MParser.IdentifierContext = IdentifierContext;

MParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, MParser.RULE_identifier);
    try {
        this.state = 1760;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.VARIABLE_IDENTIFIER:
            localctx = new VariableIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1757;
            this.variable_identifier();
            break;
        case MParser.TYPE_IDENTIFIER:
            localctx = new TypeIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1758;
            this.type_identifier();
            break;
        case MParser.SYMBOL_IDENTIFIER:
            localctx = new SymbolIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1759;
            this.symbol_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_variable_identifier;
    return this;
}

Variable_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_identifierContext.prototype.constructor = Variable_identifierContext;

Variable_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
};

Variable_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterVariable_identifier(this);
	}
};

Variable_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitVariable_identifier(this);
	}
};




MParser.Variable_identifierContext = Variable_identifierContext;

MParser.prototype.variable_identifier = function() {

    var localctx = new Variable_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, MParser.RULE_variable_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1762;
        this.match(MParser.VARIABLE_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_attribute_identifier;
    return this;
}

Attribute_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_identifierContext.prototype.constructor = Attribute_identifierContext;

Attribute_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
};

Attribute_identifierContext.prototype.STORABLE = function() {
    return this.getToken(MParser.STORABLE, 0);
};

Attribute_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAttribute_identifier(this);
	}
};

Attribute_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAttribute_identifier(this);
	}
};




MParser.Attribute_identifierContext = Attribute_identifierContext;

MParser.prototype.attribute_identifier = function() {

    var localctx = new Attribute_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, MParser.RULE_attribute_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1764;
        _la = this._input.LA(1);
        if(!(_la===MParser.STORABLE || _la===MParser.VARIABLE_IDENTIFIER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_type_identifier;
    return this;
}

Type_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_identifierContext.prototype.constructor = Type_identifierContext;

Type_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(MParser.TYPE_IDENTIFIER, 0);
};

Type_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterType_identifier(this);
	}
};

Type_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitType_identifier(this);
	}
};




MParser.Type_identifierContext = Type_identifierContext;

MParser.prototype.type_identifier = function() {

    var localctx = new Type_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, MParser.RULE_type_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1766;
        this.match(MParser.TYPE_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Symbol_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_symbol_identifier;
    return this;
}

Symbol_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Symbol_identifierContext.prototype.constructor = Symbol_identifierContext;

Symbol_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(MParser.SYMBOL_IDENTIFIER, 0);
};

Symbol_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSymbol_identifier(this);
	}
};

Symbol_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSymbol_identifier(this);
	}
};




MParser.Symbol_identifierContext = Symbol_identifierContext;

MParser.prototype.symbol_identifier = function() {

    var localctx = new Symbol_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, MParser.RULE_symbol_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1768;
        this.match(MParser.SYMBOL_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_argument_list;
    return this;
}

Argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_listContext.prototype.constructor = Argument_listContext;

Argument_listContext.prototype.argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentContext);
    } else {
        return this.getTypedRuleContext(ArgumentContext,i);
    }
};

Argument_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.COMMA);
    } else {
        return this.getToken(MParser.COMMA, i);
    }
};


Argument_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterArgument_list(this);
	}
};

Argument_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitArgument_list(this);
	}
};




MParser.Argument_listContext = Argument_listContext;

MParser.prototype.argument_list = function() {

    var localctx = new Argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, MParser.RULE_argument_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1770;
        this.argument();
        this.state = 1775;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MParser.COMMA) {
            this.state = 1771;
            this.match(MParser.COMMA);
            this.state = 1772;
            this.argument();
            this.state = 1777;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_argument;
    return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;


 
ArgumentContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function OperatorArgumentContext(parser, ctx) {
	ArgumentContext.call(this, parser);
    this.arg = null; // Operator_argumentContext;
    ArgumentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorArgumentContext.prototype = Object.create(ArgumentContext.prototype);
OperatorArgumentContext.prototype.constructor = OperatorArgumentContext;

MParser.OperatorArgumentContext = OperatorArgumentContext;

OperatorArgumentContext.prototype.operator_argument = function() {
    return this.getTypedRuleContext(Operator_argumentContext,0);
};

OperatorArgumentContext.prototype.MUTABLE = function() {
    return this.getToken(MParser.MUTABLE, 0);
};
OperatorArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterOperatorArgument(this);
	}
};

OperatorArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitOperatorArgument(this);
	}
};


function CodeArgumentContext(parser, ctx) {
	ArgumentContext.call(this, parser);
    this.arg = null; // Code_argumentContext;
    ArgumentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CodeArgumentContext.prototype = Object.create(ArgumentContext.prototype);
CodeArgumentContext.prototype.constructor = CodeArgumentContext;

MParser.CodeArgumentContext = CodeArgumentContext;

CodeArgumentContext.prototype.code_argument = function() {
    return this.getTypedRuleContext(Code_argumentContext,0);
};
CodeArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCodeArgument(this);
	}
};

CodeArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCodeArgument(this);
	}
};



MParser.ArgumentContext = ArgumentContext;

MParser.prototype.argument = function() {

    var localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, MParser.RULE_argument);
    var _la = 0; // Token type
    try {
        this.state = 1783;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.CODE:
            localctx = new CodeArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1778;
            localctx.arg = this.code_argument();
            break;
        case MParser.MUTABLE:
        case MParser.VARIABLE_IDENTIFIER:
            localctx = new OperatorArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1780;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MParser.MUTABLE) {
                this.state = 1779;
                this.match(MParser.MUTABLE);
            }

            this.state = 1782;
            localctx.arg = this.operator_argument();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Operator_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_operator_argument;
    return this;
}

Operator_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operator_argumentContext.prototype.constructor = Operator_argumentContext;

Operator_argumentContext.prototype.named_argument = function() {
    return this.getTypedRuleContext(Named_argumentContext,0);
};

Operator_argumentContext.prototype.typed_argument = function() {
    return this.getTypedRuleContext(Typed_argumentContext,0);
};

Operator_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterOperator_argument(this);
	}
};

Operator_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitOperator_argument(this);
	}
};




MParser.Operator_argumentContext = Operator_argumentContext;

MParser.prototype.operator_argument = function() {

    var localctx = new Operator_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, MParser.RULE_operator_argument);
    try {
        this.state = 1787;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1785;
            this.named_argument();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1786;
            this.typed_argument();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Named_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_named_argument;
    return this;
}

Named_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Named_argumentContext.prototype.constructor = Named_argumentContext;

Named_argumentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Named_argumentContext.prototype.EQ = function() {
    return this.getToken(MParser.EQ, 0);
};

Named_argumentContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};

Named_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNamed_argument(this);
	}
};

Named_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNamed_argument(this);
	}
};




MParser.Named_argumentContext = Named_argumentContext;

MParser.prototype.named_argument = function() {

    var localctx = new Named_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, MParser.RULE_named_argument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1789;
        this.variable_identifier();
        this.state = 1792;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.EQ) {
            this.state = 1790;
            this.match(MParser.EQ);
            this.state = 1791;
            this.literal_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Code_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_code_argument;
    this.name = null; // Variable_identifierContext
    return this;
}

Code_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Code_argumentContext.prototype.constructor = Code_argumentContext;

Code_argumentContext.prototype.code_type = function() {
    return this.getTypedRuleContext(Code_typeContext,0);
};

Code_argumentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Code_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCode_argument(this);
	}
};

Code_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCode_argument(this);
	}
};




MParser.Code_argumentContext = Code_argumentContext;

MParser.prototype.code_argument = function() {

    var localctx = new Code_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, MParser.RULE_code_argument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1794;
        this.code_type();
        this.state = 1795;
        localctx.name = this.variable_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_or_any_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_category_or_any_type;
    return this;
}

Category_or_any_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_or_any_typeContext.prototype.constructor = Category_or_any_typeContext;

Category_or_any_typeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Category_or_any_typeContext.prototype.any_type = function() {
    return this.getTypedRuleContext(Any_typeContext,0);
};

Category_or_any_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCategory_or_any_type(this);
	}
};

Category_or_any_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCategory_or_any_type(this);
	}
};




MParser.Category_or_any_typeContext = Category_or_any_typeContext;

MParser.prototype.category_or_any_type = function() {

    var localctx = new Category_or_any_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, MParser.RULE_category_or_any_type);
    try {
        this.state = 1799;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.BOOLEAN:
        case MParser.CHARACTER:
        case MParser.TEXT:
        case MParser.INTEGER:
        case MParser.DECIMAL:
        case MParser.DATE:
        case MParser.TIME:
        case MParser.DATETIME:
        case MParser.PERIOD:
        case MParser.VERSION:
        case MParser.CODE:
        case MParser.DOCUMENT:
        case MParser.BLOB:
        case MParser.IMAGE:
        case MParser.UUID:
        case MParser.ITERATOR:
        case MParser.CURSOR:
        case MParser.HTML:
        case MParser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1797;
            this.typedef(0);
            break;
        case MParser.ANY:
            this.enterOuterAlt(localctx, 2);
            this.state = 1798;
            this.any_type(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Any_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_any_type;
    return this;
}

Any_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Any_typeContext.prototype.constructor = Any_typeContext;


 
Any_typeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function AnyListTypeContext(parser, ctx) {
	Any_typeContext.call(this, parser);
    Any_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnyListTypeContext.prototype = Object.create(Any_typeContext.prototype);
AnyListTypeContext.prototype.constructor = AnyListTypeContext;

MParser.AnyListTypeContext = AnyListTypeContext;

AnyListTypeContext.prototype.any_type = function() {
    return this.getTypedRuleContext(Any_typeContext,0);
};

AnyListTypeContext.prototype.LBRAK = function() {
    return this.getToken(MParser.LBRAK, 0);
};

AnyListTypeContext.prototype.RBRAK = function() {
    return this.getToken(MParser.RBRAK, 0);
};
AnyListTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAnyListType(this);
	}
};

AnyListTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAnyListType(this);
	}
};


function AnyTypeContext(parser, ctx) {
	Any_typeContext.call(this, parser);
    Any_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnyTypeContext.prototype = Object.create(Any_typeContext.prototype);
AnyTypeContext.prototype.constructor = AnyTypeContext;

MParser.AnyTypeContext = AnyTypeContext;

AnyTypeContext.prototype.ANY = function() {
    return this.getToken(MParser.ANY, 0);
};
AnyTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAnyType(this);
	}
};

AnyTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAnyType(this);
	}
};


function AnyDictTypeContext(parser, ctx) {
	Any_typeContext.call(this, parser);
    Any_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnyDictTypeContext.prototype = Object.create(Any_typeContext.prototype);
AnyDictTypeContext.prototype.constructor = AnyDictTypeContext;

MParser.AnyDictTypeContext = AnyDictTypeContext;

AnyDictTypeContext.prototype.any_type = function() {
    return this.getTypedRuleContext(Any_typeContext,0);
};

AnyDictTypeContext.prototype.LCURL = function() {
    return this.getToken(MParser.LCURL, 0);
};

AnyDictTypeContext.prototype.RCURL = function() {
    return this.getToken(MParser.RCURL, 0);
};
AnyDictTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAnyDictType(this);
	}
};

AnyDictTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAnyDictType(this);
	}
};



MParser.prototype.any_type = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Any_typeContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 232;
    this.enterRecursionRule(localctx, 232, MParser.RULE_any_type, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new AnyTypeContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1802;
        this.match(MParser.ANY);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1812;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,133,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1810;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AnyListTypeContext(this, new Any_typeContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_any_type);
                    this.state = 1804;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1805;
                    this.match(MParser.LBRAK);
                    this.state = 1806;
                    this.match(MParser.RBRAK);
                    break;

                case 2:
                    localctx = new AnyDictTypeContext(this, new Any_typeContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, MParser.RULE_any_type);
                    this.state = 1807;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1808;
                    this.match(MParser.LCURL);
                    this.state = 1809;
                    this.match(MParser.RCURL);
                    break;

                } 
            }
            this.state = 1814;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,133,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Member_method_declaration_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_member_method_declaration_list;
    return this;
}

Member_method_declaration_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_method_declaration_listContext.prototype.constructor = Member_method_declaration_listContext;

Member_method_declaration_listContext.prototype.member_method_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Member_method_declarationContext);
    } else {
        return this.getTypedRuleContext(Member_method_declarationContext,i);
    }
};

Member_method_declaration_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Member_method_declaration_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMember_method_declaration_list(this);
	}
};

Member_method_declaration_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMember_method_declaration_list(this);
	}
};




MParser.Member_method_declaration_listContext = Member_method_declaration_listContext;

MParser.prototype.member_method_declaration_list = function() {

    var localctx = new Member_method_declaration_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, MParser.RULE_member_method_declaration_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1815;
        this.member_method_declaration();
        this.state = 1821;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,134,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1816;
                this.lfp();
                this.state = 1817;
                this.member_method_declaration(); 
            }
            this.state = 1823;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,134,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Member_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_member_method_declaration;
    return this;
}

Member_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_method_declarationContext.prototype.constructor = Member_method_declarationContext;

Member_method_declarationContext.prototype.setter_method_declaration = function() {
    return this.getTypedRuleContext(Setter_method_declarationContext,0);
};

Member_method_declarationContext.prototype.getter_method_declaration = function() {
    return this.getTypedRuleContext(Getter_method_declarationContext,0);
};

Member_method_declarationContext.prototype.concrete_method_declaration = function() {
    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
};

Member_method_declarationContext.prototype.abstract_method_declaration = function() {
    return this.getTypedRuleContext(Abstract_method_declarationContext,0);
};

Member_method_declarationContext.prototype.operator_method_declaration = function() {
    return this.getTypedRuleContext(Operator_method_declarationContext,0);
};

Member_method_declarationContext.prototype.comment_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Comment_statementContext);
    } else {
        return this.getTypedRuleContext(Comment_statementContext,i);
    }
};

Member_method_declarationContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Member_method_declarationContext.prototype.annotation_constructor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Annotation_constructorContext);
    } else {
        return this.getTypedRuleContext(Annotation_constructorContext,i);
    }
};

Member_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMember_method_declaration(this);
	}
};

Member_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMember_method_declaration(this);
	}
};




MParser.Member_method_declarationContext = Member_method_declarationContext;

MParser.prototype.member_method_declaration = function() {

    var localctx = new Member_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, MParser.RULE_member_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1829;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MParser.COMMENT) {
            this.state = 1824;
            this.comment_statement();
            this.state = 1825;
            this.lfp();
            this.state = 1831;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1837;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MParser.ARONDBASE_IDENTIFIER) {
            this.state = 1832;
            this.annotation_constructor();
            this.state = 1833;
            this.lfp();
            this.state = 1839;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1845;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1840;
            this.setter_method_declaration();
            break;

        case 2:
            this.state = 1841;
            this.getter_method_declaration();
            break;

        case 3:
            this.state = 1842;
            this.concrete_method_declaration();
            break;

        case 4:
            this.state = 1843;
            this.abstract_method_declaration();
            break;

        case 5:
            this.state = 1844;
            this.operator_method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_member_method_declaration_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_native_member_method_declaration_list;
    return this;
}

Native_member_method_declaration_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_member_method_declaration_listContext.prototype.constructor = Native_member_method_declaration_listContext;

Native_member_method_declaration_listContext.prototype.native_member_method_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Native_member_method_declarationContext);
    } else {
        return this.getTypedRuleContext(Native_member_method_declarationContext,i);
    }
};

Native_member_method_declaration_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Native_member_method_declaration_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNative_member_method_declaration_list(this);
	}
};

Native_member_method_declaration_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNative_member_method_declaration_list(this);
	}
};




MParser.Native_member_method_declaration_listContext = Native_member_method_declaration_listContext;

MParser.prototype.native_member_method_declaration_list = function() {

    var localctx = new Native_member_method_declaration_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, MParser.RULE_native_member_method_declaration_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1847;
        this.native_member_method_declaration();
        this.state = 1853;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,138,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1848;
                this.lfp();
                this.state = 1849;
                this.native_member_method_declaration(); 
            }
            this.state = 1855;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,138,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_member_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_native_member_method_declaration;
    return this;
}

Native_member_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_member_method_declarationContext.prototype.constructor = Native_member_method_declarationContext;

Native_member_method_declarationContext.prototype.native_getter_declaration = function() {
    return this.getTypedRuleContext(Native_getter_declarationContext,0);
};

Native_member_method_declarationContext.prototype.native_setter_declaration = function() {
    return this.getTypedRuleContext(Native_setter_declarationContext,0);
};

Native_member_method_declarationContext.prototype.native_method_declaration = function() {
    return this.getTypedRuleContext(Native_method_declarationContext,0);
};

Native_member_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNative_member_method_declaration(this);
	}
};

Native_member_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNative_member_method_declaration(this);
	}
};




MParser.Native_member_method_declarationContext = Native_member_method_declarationContext;

MParser.prototype.native_member_method_declaration = function() {

    var localctx = new Native_member_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, MParser.RULE_native_member_method_declaration);
    try {
        this.state = 1859;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1856;
            this.native_getter_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1857;
            this.native_setter_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1858;
            this.native_method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_bindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_native_category_binding;
    return this;
}

Native_category_bindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_bindingContext.prototype.constructor = Native_category_bindingContext;


 
Native_category_bindingContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function Python2CategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Python_category_bindingContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python2CategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
Python2CategoryBindingContext.prototype.constructor = Python2CategoryBindingContext;

MParser.Python2CategoryBindingContext = Python2CategoryBindingContext;

Python2CategoryBindingContext.prototype.PYTHON2 = function() {
    return this.getToken(MParser.PYTHON2, 0);
};

Python2CategoryBindingContext.prototype.python_category_binding = function() {
    return this.getTypedRuleContext(Python_category_bindingContext,0);
};
Python2CategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPython2CategoryBinding(this);
	}
};

Python2CategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPython2CategoryBinding(this);
	}
};


function Python3CategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Python_category_bindingContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python3CategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
Python3CategoryBindingContext.prototype.constructor = Python3CategoryBindingContext;

MParser.Python3CategoryBindingContext = Python3CategoryBindingContext;

Python3CategoryBindingContext.prototype.PYTHON3 = function() {
    return this.getToken(MParser.PYTHON3, 0);
};

Python3CategoryBindingContext.prototype.python_category_binding = function() {
    return this.getTypedRuleContext(Python_category_bindingContext,0);
};
Python3CategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPython3CategoryBinding(this);
	}
};

Python3CategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPython3CategoryBinding(this);
	}
};


function JavaCategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Java_class_identifier_expressionContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaCategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
JavaCategoryBindingContext.prototype.constructor = JavaCategoryBindingContext;

MParser.JavaCategoryBindingContext = JavaCategoryBindingContext;

JavaCategoryBindingContext.prototype.JAVA = function() {
    return this.getToken(MParser.JAVA, 0);
};

JavaCategoryBindingContext.prototype.java_class_identifier_expression = function() {
    return this.getTypedRuleContext(Java_class_identifier_expressionContext,0);
};
JavaCategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaCategoryBinding(this);
	}
};

JavaCategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaCategoryBinding(this);
	}
};


function CSharpCategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Csharp_identifier_expressionContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpCategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
CSharpCategoryBindingContext.prototype.constructor = CSharpCategoryBindingContext;

MParser.CSharpCategoryBindingContext = CSharpCategoryBindingContext;

CSharpCategoryBindingContext.prototype.CSHARP = function() {
    return this.getToken(MParser.CSHARP, 0);
};

CSharpCategoryBindingContext.prototype.csharp_identifier_expression = function() {
    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
};
CSharpCategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCSharpCategoryBinding(this);
	}
};

CSharpCategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCSharpCategoryBinding(this);
	}
};


function JavaScriptCategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Javascript_category_bindingContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptCategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
JavaScriptCategoryBindingContext.prototype.constructor = JavaScriptCategoryBindingContext;

MParser.JavaScriptCategoryBindingContext = JavaScriptCategoryBindingContext;

JavaScriptCategoryBindingContext.prototype.JAVASCRIPT = function() {
    return this.getToken(MParser.JAVASCRIPT, 0);
};

JavaScriptCategoryBindingContext.prototype.javascript_category_binding = function() {
    return this.getTypedRuleContext(Javascript_category_bindingContext,0);
};
JavaScriptCategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaScriptCategoryBinding(this);
	}
};

JavaScriptCategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaScriptCategoryBinding(this);
	}
};



MParser.Native_category_bindingContext = Native_category_bindingContext;

MParser.prototype.native_category_binding = function() {

    var localctx = new Native_category_bindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, MParser.RULE_native_category_binding);
    try {
        this.state = 1871;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.JAVA:
            localctx = new JavaCategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1861;
            this.match(MParser.JAVA);
            this.state = 1862;
            localctx.binding = this.java_class_identifier_expression(0);
            break;
        case MParser.CSHARP:
            localctx = new CSharpCategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1863;
            this.match(MParser.CSHARP);
            this.state = 1864;
            localctx.binding = this.csharp_identifier_expression(0);
            break;
        case MParser.PYTHON2:
            localctx = new Python2CategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1865;
            this.match(MParser.PYTHON2);
            this.state = 1866;
            localctx.binding = this.python_category_binding();
            break;
        case MParser.PYTHON3:
            localctx = new Python3CategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1867;
            this.match(MParser.PYTHON3);
            this.state = 1868;
            localctx.binding = this.python_category_binding();
            break;
        case MParser.JAVASCRIPT:
            localctx = new JavaScriptCategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1869;
            this.match(MParser.JAVASCRIPT);
            this.state = 1870;
            localctx.binding = this.javascript_category_binding();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_category_bindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_python_category_binding;
    return this;
}

Python_category_bindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_category_bindingContext.prototype.constructor = Python_category_bindingContext;

Python_category_bindingContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Python_category_bindingContext.prototype.python_module = function() {
    return this.getTypedRuleContext(Python_moduleContext,0);
};

Python_category_bindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPython_category_binding(this);
	}
};

Python_category_bindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPython_category_binding(this);
	}
};




MParser.Python_category_bindingContext = Python_category_bindingContext;

MParser.prototype.python_category_binding = function() {

    var localctx = new Python_category_bindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, MParser.RULE_python_category_binding);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1873;
        this.identifier();
        this.state = 1875;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
        if(la_===1) {
            this.state = 1874;
            this.python_module();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_moduleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_python_module;
    return this;
}

Python_moduleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_moduleContext.prototype.constructor = Python_moduleContext;

Python_moduleContext.prototype.FROM = function() {
    return this.getToken(MParser.FROM, 0);
};

Python_moduleContext.prototype.module_token = function() {
    return this.getTypedRuleContext(Module_tokenContext,0);
};

Python_moduleContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Python_moduleContext.prototype.python_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Python_identifierContext);
    } else {
        return this.getTypedRuleContext(Python_identifierContext,i);
    }
};

Python_moduleContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.DOT);
    } else {
        return this.getToken(MParser.DOT, i);
    }
};


Python_moduleContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPython_module(this);
	}
};

Python_moduleContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPython_module(this);
	}
};




MParser.Python_moduleContext = Python_moduleContext;

MParser.prototype.python_module = function() {

    var localctx = new Python_moduleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, MParser.RULE_python_module);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1877;
        this.match(MParser.FROM);
        this.state = 1878;
        this.module_token();
        this.state = 1879;
        this.match(MParser.COLON);
        this.state = 1880;
        this.python_identifier();
        this.state = 1885;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,142,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1881;
                this.match(MParser.DOT);
                this.state = 1882;
                this.python_identifier(); 
            }
            this.state = 1887;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,142,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_category_bindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_javascript_category_binding;
    return this;
}

Javascript_category_bindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_category_bindingContext.prototype.constructor = Javascript_category_bindingContext;

Javascript_category_bindingContext.prototype.javascript_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Javascript_identifierContext);
    } else {
        return this.getTypedRuleContext(Javascript_identifierContext,i);
    }
};

Javascript_category_bindingContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.DOT);
    } else {
        return this.getToken(MParser.DOT, i);
    }
};


Javascript_category_bindingContext.prototype.javascript_module = function() {
    return this.getTypedRuleContext(Javascript_moduleContext,0);
};

Javascript_category_bindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascript_category_binding(this);
	}
};

Javascript_category_bindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascript_category_binding(this);
	}
};




MParser.Javascript_category_bindingContext = Javascript_category_bindingContext;

MParser.prototype.javascript_category_binding = function() {

    var localctx = new Javascript_category_bindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, MParser.RULE_javascript_category_binding);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1888;
        this.javascript_identifier();
        this.state = 1893;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,143,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1889;
                this.match(MParser.DOT);
                this.state = 1890;
                this.javascript_identifier(); 
            }
            this.state = 1895;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,143,this._ctx);
        }

        this.state = 1897;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
        if(la_===1) {
            this.state = 1896;
            this.javascript_module();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_moduleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_javascript_module;
    return this;
}

Javascript_moduleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_moduleContext.prototype.constructor = Javascript_moduleContext;

Javascript_moduleContext.prototype.FROM = function() {
    return this.getToken(MParser.FROM, 0);
};

Javascript_moduleContext.prototype.module_token = function() {
    return this.getTypedRuleContext(Module_tokenContext,0);
};

Javascript_moduleContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Javascript_moduleContext.prototype.javascript_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Javascript_identifierContext);
    } else {
        return this.getTypedRuleContext(Javascript_identifierContext,i);
    }
};

Javascript_moduleContext.prototype.SLASH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.SLASH);
    } else {
        return this.getToken(MParser.SLASH, i);
    }
};


Javascript_moduleContext.prototype.DOT = function() {
    return this.getToken(MParser.DOT, 0);
};

Javascript_moduleContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascript_module(this);
	}
};

Javascript_moduleContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascript_module(this);
	}
};




MParser.Javascript_moduleContext = Javascript_moduleContext;

MParser.prototype.javascript_module = function() {

    var localctx = new Javascript_moduleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, MParser.RULE_javascript_module);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1899;
        this.match(MParser.FROM);
        this.state = 1900;
        this.module_token();
        this.state = 1901;
        this.match(MParser.COLON);
        this.state = 1903;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.SLASH) {
            this.state = 1902;
            this.match(MParser.SLASH);
        }

        this.state = 1905;
        this.javascript_identifier();
        this.state = 1910;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,146,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1906;
                this.match(MParser.SLASH);
                this.state = 1907;
                this.javascript_identifier(); 
            }
            this.state = 1912;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,146,this._ctx);
        }

        this.state = 1915;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
        if(la_===1) {
            this.state = 1913;
            this.match(MParser.DOT);
            this.state = 1914;
            this.javascript_identifier();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_identifier_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_variable_identifier_list;
    return this;
}

Variable_identifier_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_identifier_listContext.prototype.constructor = Variable_identifier_listContext;

Variable_identifier_listContext.prototype.variable_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_identifierContext);
    } else {
        return this.getTypedRuleContext(Variable_identifierContext,i);
    }
};

Variable_identifier_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.COMMA);
    } else {
        return this.getToken(MParser.COMMA, i);
    }
};


Variable_identifier_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterVariable_identifier_list(this);
	}
};

Variable_identifier_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitVariable_identifier_list(this);
	}
};




MParser.Variable_identifier_listContext = Variable_identifier_listContext;

MParser.prototype.variable_identifier_list = function() {

    var localctx = new Variable_identifier_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, MParser.RULE_variable_identifier_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1917;
        this.variable_identifier();
        this.state = 1922;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MParser.COMMA) {
            this.state = 1918;
            this.match(MParser.COMMA);
            this.state = 1919;
            this.variable_identifier();
            this.state = 1924;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_identifier_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_attribute_identifier_list;
    return this;
}

Attribute_identifier_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_identifier_listContext.prototype.constructor = Attribute_identifier_listContext;

Attribute_identifier_listContext.prototype.attribute_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_identifierContext);
    } else {
        return this.getTypedRuleContext(Attribute_identifierContext,i);
    }
};

Attribute_identifier_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.COMMA);
    } else {
        return this.getToken(MParser.COMMA, i);
    }
};


Attribute_identifier_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAttribute_identifier_list(this);
	}
};

Attribute_identifier_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAttribute_identifier_list(this);
	}
};




MParser.Attribute_identifier_listContext = Attribute_identifier_listContext;

MParser.prototype.attribute_identifier_list = function() {

    var localctx = new Attribute_identifier_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, MParser.RULE_attribute_identifier_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1925;
        this.attribute_identifier();
        this.state = 1930;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MParser.COMMA) {
            this.state = 1926;
            this.match(MParser.COMMA);
            this.state = 1927;
            this.attribute_identifier();
            this.state = 1932;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_method_declaration;
    return this;
}

Method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_declarationContext.prototype.constructor = Method_declarationContext;

Method_declarationContext.prototype.abstract_method_declaration = function() {
    return this.getTypedRuleContext(Abstract_method_declarationContext,0);
};

Method_declarationContext.prototype.concrete_method_declaration = function() {
    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
};

Method_declarationContext.prototype.native_method_declaration = function() {
    return this.getTypedRuleContext(Native_method_declarationContext,0);
};

Method_declarationContext.prototype.test_method_declaration = function() {
    return this.getTypedRuleContext(Test_method_declarationContext,0);
};

Method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMethod_declaration(this);
	}
};

Method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMethod_declaration(this);
	}
};




MParser.Method_declarationContext = Method_declarationContext;

MParser.prototype.method_declaration = function() {

    var localctx = new Method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, MParser.RULE_method_declaration);
    try {
        this.state = 1937;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1933;
            this.abstract_method_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1934;
            this.concrete_method_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1935;
            this.native_method_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1936;
            this.test_method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comment_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_comment_statement;
    return this;
}

Comment_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comment_statementContext.prototype.constructor = Comment_statementContext;

Comment_statementContext.prototype.COMMENT = function() {
    return this.getToken(MParser.COMMENT, 0);
};

Comment_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterComment_statement(this);
	}
};

Comment_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitComment_statement(this);
	}
};




MParser.Comment_statementContext = Comment_statementContext;

MParser.prototype.comment_statement = function() {

    var localctx = new Comment_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, MParser.RULE_comment_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1939;
        this.match(MParser.COMMENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_native_statement_list;
    return this;
}

Native_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_statement_listContext.prototype.constructor = Native_statement_listContext;

Native_statement_listContext.prototype.native_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Native_statementContext);
    } else {
        return this.getTypedRuleContext(Native_statementContext,i);
    }
};

Native_statement_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Native_statement_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNative_statement_list(this);
	}
};

Native_statement_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNative_statement_list(this);
	}
};




MParser.Native_statement_listContext = Native_statement_listContext;

MParser.prototype.native_statement_list = function() {

    var localctx = new Native_statement_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, MParser.RULE_native_statement_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1941;
        this.native_statement();
        this.state = 1947;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,151,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1942;
                this.lfp();
                this.state = 1943;
                this.native_statement(); 
            }
            this.state = 1949;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,151,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_native_statement;
    return this;
}

Native_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_statementContext.prototype.constructor = Native_statementContext;


 
Native_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpNativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpNativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
CSharpNativeStatementContext.prototype.constructor = CSharpNativeStatementContext;

MParser.CSharpNativeStatementContext = CSharpNativeStatementContext;

CSharpNativeStatementContext.prototype.CSHARP = function() {
    return this.getToken(MParser.CSHARP, 0);
};

CSharpNativeStatementContext.prototype.csharp_statement = function() {
    return this.getTypedRuleContext(Csharp_statementContext,0);
};
CSharpNativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCSharpNativeStatement(this);
	}
};

CSharpNativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCSharpNativeStatement(this);
	}
};


function JavaNativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaNativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
JavaNativeStatementContext.prototype.constructor = JavaNativeStatementContext;

MParser.JavaNativeStatementContext = JavaNativeStatementContext;

JavaNativeStatementContext.prototype.JAVA = function() {
    return this.getToken(MParser.JAVA, 0);
};

JavaNativeStatementContext.prototype.java_statement = function() {
    return this.getTypedRuleContext(Java_statementContext,0);
};
JavaNativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaNativeStatement(this);
	}
};

JavaNativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaNativeStatement(this);
	}
};


function JavaScriptNativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptNativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
JavaScriptNativeStatementContext.prototype.constructor = JavaScriptNativeStatementContext;

MParser.JavaScriptNativeStatementContext = JavaScriptNativeStatementContext;

JavaScriptNativeStatementContext.prototype.JAVASCRIPT = function() {
    return this.getToken(MParser.JAVASCRIPT, 0);
};

JavaScriptNativeStatementContext.prototype.javascript_native_statement = function() {
    return this.getTypedRuleContext(Javascript_native_statementContext,0);
};
JavaScriptNativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaScriptNativeStatement(this);
	}
};

JavaScriptNativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaScriptNativeStatement(this);
	}
};


function Python2NativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python2NativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
Python2NativeStatementContext.prototype.constructor = Python2NativeStatementContext;

MParser.Python2NativeStatementContext = Python2NativeStatementContext;

Python2NativeStatementContext.prototype.PYTHON2 = function() {
    return this.getToken(MParser.PYTHON2, 0);
};

Python2NativeStatementContext.prototype.python_native_statement = function() {
    return this.getTypedRuleContext(Python_native_statementContext,0);
};
Python2NativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPython2NativeStatement(this);
	}
};

Python2NativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPython2NativeStatement(this);
	}
};


function Python3NativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python3NativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
Python3NativeStatementContext.prototype.constructor = Python3NativeStatementContext;

MParser.Python3NativeStatementContext = Python3NativeStatementContext;

Python3NativeStatementContext.prototype.PYTHON3 = function() {
    return this.getToken(MParser.PYTHON3, 0);
};

Python3NativeStatementContext.prototype.python_native_statement = function() {
    return this.getTypedRuleContext(Python_native_statementContext,0);
};
Python3NativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPython3NativeStatement(this);
	}
};

Python3NativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPython3NativeStatement(this);
	}
};



MParser.Native_statementContext = Native_statementContext;

MParser.prototype.native_statement = function() {

    var localctx = new Native_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, MParser.RULE_native_statement);
    try {
        this.state = 1960;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.JAVA:
            localctx = new JavaNativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1950;
            this.match(MParser.JAVA);
            this.state = 1951;
            this.java_statement();
            break;
        case MParser.CSHARP:
            localctx = new CSharpNativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1952;
            this.match(MParser.CSHARP);
            this.state = 1953;
            this.csharp_statement();
            break;
        case MParser.PYTHON2:
            localctx = new Python2NativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1954;
            this.match(MParser.PYTHON2);
            this.state = 1955;
            this.python_native_statement();
            break;
        case MParser.PYTHON3:
            localctx = new Python3NativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1956;
            this.match(MParser.PYTHON3);
            this.state = 1957;
            this.python_native_statement();
            break;
        case MParser.JAVASCRIPT:
            localctx = new JavaScriptNativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1958;
            this.match(MParser.JAVASCRIPT);
            this.state = 1959;
            this.javascript_native_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_native_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_python_native_statement;
    return this;
}

Python_native_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_native_statementContext.prototype.constructor = Python_native_statementContext;

Python_native_statementContext.prototype.python_statement = function() {
    return this.getTypedRuleContext(Python_statementContext,0);
};

Python_native_statementContext.prototype.SEMI = function() {
    return this.getToken(MParser.SEMI, 0);
};

Python_native_statementContext.prototype.python_module = function() {
    return this.getTypedRuleContext(Python_moduleContext,0);
};

Python_native_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPython_native_statement(this);
	}
};

Python_native_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPython_native_statement(this);
	}
};




MParser.Python_native_statementContext = Python_native_statementContext;

MParser.prototype.python_native_statement = function() {

    var localctx = new Python_native_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, MParser.RULE_python_native_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1962;
        this.python_statement();
        this.state = 1964;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.SEMI) {
            this.state = 1963;
            this.match(MParser.SEMI);
        }

        this.state = 1967;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.FROM) {
            this.state = 1966;
            this.python_module();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_native_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_javascript_native_statement;
    return this;
}

Javascript_native_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_native_statementContext.prototype.constructor = Javascript_native_statementContext;

Javascript_native_statementContext.prototype.javascript_statement = function() {
    return this.getTypedRuleContext(Javascript_statementContext,0);
};

Javascript_native_statementContext.prototype.SEMI = function() {
    return this.getToken(MParser.SEMI, 0);
};

Javascript_native_statementContext.prototype.javascript_module = function() {
    return this.getTypedRuleContext(Javascript_moduleContext,0);
};

Javascript_native_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascript_native_statement(this);
	}
};

Javascript_native_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascript_native_statement(this);
	}
};




MParser.Javascript_native_statementContext = Javascript_native_statementContext;

MParser.prototype.javascript_native_statement = function() {

    var localctx = new Javascript_native_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, MParser.RULE_javascript_native_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1969;
        this.javascript_statement();
        this.state = 1971;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.SEMI) {
            this.state = 1970;
            this.match(MParser.SEMI);
        }

        this.state = 1974;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.FROM) {
            this.state = 1973;
            this.javascript_module();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_statement_list;
    return this;
}

Statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_listContext.prototype.constructor = Statement_listContext;

Statement_listContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

Statement_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Statement_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterStatement_list(this);
	}
};

Statement_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitStatement_list(this);
	}
};




MParser.Statement_listContext = Statement_listContext;

MParser.prototype.statement_list = function() {

    var localctx = new Statement_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, MParser.RULE_statement_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1976;
        this.statement();
        this.state = 1982;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,157,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1977;
                this.lfp();
                this.state = 1978;
                this.statement(); 
            }
            this.state = 1984;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,157,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assertion_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_assertion_list;
    return this;
}

Assertion_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assertion_listContext.prototype.constructor = Assertion_listContext;

Assertion_listContext.prototype.assertion = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssertionContext);
    } else {
        return this.getTypedRuleContext(AssertionContext,i);
    }
};

Assertion_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Assertion_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAssertion_list(this);
	}
};

Assertion_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAssertion_list(this);
	}
};




MParser.Assertion_listContext = Assertion_listContext;

MParser.prototype.assertion_list = function() {

    var localctx = new Assertion_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, MParser.RULE_assertion_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1985;
        this.assertion();
        this.state = 1991;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,158,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1986;
                this.lfp();
                this.state = 1987;
                this.assertion(); 
            }
            this.state = 1993;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,158,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_case_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_switch_case_statement_list;
    return this;
}

Switch_case_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_case_statement_listContext.prototype.constructor = Switch_case_statement_listContext;

Switch_case_statement_listContext.prototype.switch_case_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Switch_case_statementContext);
    } else {
        return this.getTypedRuleContext(Switch_case_statementContext,i);
    }
};

Switch_case_statement_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Switch_case_statement_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSwitch_case_statement_list(this);
	}
};

Switch_case_statement_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSwitch_case_statement_list(this);
	}
};




MParser.Switch_case_statement_listContext = Switch_case_statement_listContext;

MParser.prototype.switch_case_statement_list = function() {

    var localctx = new Switch_case_statement_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, MParser.RULE_switch_case_statement_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1994;
        this.switch_case_statement();
        this.state = 2000;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,159,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1995;
                this.lfp();
                this.state = 1996;
                this.switch_case_statement(); 
            }
            this.state = 2002;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,159,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Catch_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_catch_statement_list;
    return this;
}

Catch_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Catch_statement_listContext.prototype.constructor = Catch_statement_listContext;

Catch_statement_listContext.prototype.catch_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Catch_statementContext);
    } else {
        return this.getTypedRuleContext(Catch_statementContext,i);
    }
};

Catch_statement_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Catch_statement_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCatch_statement_list(this);
	}
};

Catch_statement_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCatch_statement_list(this);
	}
};




MParser.Catch_statement_listContext = Catch_statement_listContext;

MParser.prototype.catch_statement_list = function() {

    var localctx = new Catch_statement_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, MParser.RULE_catch_statement_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2003;
        this.catch_statement();
        this.state = 2009;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,160,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2004;
                this.lfp();
                this.state = 2005;
                this.catch_statement(); 
            }
            this.state = 2011;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,160,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Literal_collectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_literal_collection;
    return this;
}

Literal_collectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_collectionContext.prototype.constructor = Literal_collectionContext;


 
Literal_collectionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function LiteralListLiteralContext(parser, ctx) {
	Literal_collectionContext.call(this, parser);
    Literal_collectionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralListLiteralContext.prototype = Object.create(Literal_collectionContext.prototype);
LiteralListLiteralContext.prototype.constructor = LiteralListLiteralContext;

MParser.LiteralListLiteralContext = LiteralListLiteralContext;

LiteralListLiteralContext.prototype.LBRAK = function() {
    return this.getToken(MParser.LBRAK, 0);
};

LiteralListLiteralContext.prototype.literal_list_literal = function() {
    return this.getTypedRuleContext(Literal_list_literalContext,0);
};

LiteralListLiteralContext.prototype.RBRAK = function() {
    return this.getToken(MParser.RBRAK, 0);
};
LiteralListLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterLiteralListLiteral(this);
	}
};

LiteralListLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitLiteralListLiteral(this);
	}
};


function LiteralRangeLiteralContext(parser, ctx) {
	Literal_collectionContext.call(this, parser);
    this.low = null; // Atomic_literalContext;
    this.high = null; // Atomic_literalContext;
    Literal_collectionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralRangeLiteralContext.prototype = Object.create(Literal_collectionContext.prototype);
LiteralRangeLiteralContext.prototype.constructor = LiteralRangeLiteralContext;

MParser.LiteralRangeLiteralContext = LiteralRangeLiteralContext;

LiteralRangeLiteralContext.prototype.LBRAK = function() {
    return this.getToken(MParser.LBRAK, 0);
};

LiteralRangeLiteralContext.prototype.RANGE = function() {
    return this.getToken(MParser.RANGE, 0);
};

LiteralRangeLiteralContext.prototype.RBRAK = function() {
    return this.getToken(MParser.RBRAK, 0);
};

LiteralRangeLiteralContext.prototype.atomic_literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Atomic_literalContext);
    } else {
        return this.getTypedRuleContext(Atomic_literalContext,i);
    }
};
LiteralRangeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterLiteralRangeLiteral(this);
	}
};

LiteralRangeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitLiteralRangeLiteral(this);
	}
};


function LiteralSetLiteralContext(parser, ctx) {
	Literal_collectionContext.call(this, parser);
    Literal_collectionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralSetLiteralContext.prototype = Object.create(Literal_collectionContext.prototype);
LiteralSetLiteralContext.prototype.constructor = LiteralSetLiteralContext;

MParser.LiteralSetLiteralContext = LiteralSetLiteralContext;

LiteralSetLiteralContext.prototype.LT = function() {
    return this.getToken(MParser.LT, 0);
};

LiteralSetLiteralContext.prototype.literal_list_literal = function() {
    return this.getTypedRuleContext(Literal_list_literalContext,0);
};

LiteralSetLiteralContext.prototype.GT = function() {
    return this.getToken(MParser.GT, 0);
};
LiteralSetLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterLiteralSetLiteral(this);
	}
};

LiteralSetLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitLiteralSetLiteral(this);
	}
};



MParser.Literal_collectionContext = Literal_collectionContext;

MParser.prototype.literal_collection = function() {

    var localctx = new Literal_collectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, MParser.RULE_literal_collection);
    try {
        this.state = 2026;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LiteralRangeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2012;
            this.match(MParser.LBRAK);
            this.state = 2013;
            localctx.low = this.atomic_literal();
            this.state = 2014;
            this.match(MParser.RANGE);
            this.state = 2015;
            localctx.high = this.atomic_literal();
            this.state = 2016;
            this.match(MParser.RBRAK);
            break;

        case 2:
            localctx = new LiteralListLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2018;
            this.match(MParser.LBRAK);
            this.state = 2019;
            this.literal_list_literal();
            this.state = 2020;
            this.match(MParser.RBRAK);
            break;

        case 3:
            localctx = new LiteralSetLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2022;
            this.match(MParser.LT);
            this.state = 2023;
            this.literal_list_literal();
            this.state = 2024;
            this.match(MParser.GT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Atomic_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_atomic_literal;
    return this;
}

Atomic_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Atomic_literalContext.prototype.constructor = Atomic_literalContext;


 
Atomic_literalContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MinIntegerLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MinIntegerLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
MinIntegerLiteralContext.prototype.constructor = MinIntegerLiteralContext;

MParser.MinIntegerLiteralContext = MinIntegerLiteralContext;

MinIntegerLiteralContext.prototype.MIN_INTEGER = function() {
    return this.getToken(MParser.MIN_INTEGER, 0);
};
MinIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMinIntegerLiteral(this);
	}
};

MinIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMinIntegerLiteral(this);
	}
};


function DateLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
DateLiteralContext.prototype.constructor = DateLiteralContext;

MParser.DateLiteralContext = DateLiteralContext;

DateLiteralContext.prototype.DATE_LITERAL = function() {
    return this.getToken(MParser.DATE_LITERAL, 0);
};
DateLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDateLiteral(this);
	}
};

DateLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDateLiteral(this);
	}
};


function BooleanLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

MParser.BooleanLiteralContext = BooleanLiteralContext;

BooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(MParser.BOOLEAN_LITERAL, 0);
};
BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitBooleanLiteral(this);
	}
};


function VersionLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VersionLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
VersionLiteralContext.prototype.constructor = VersionLiteralContext;

MParser.VersionLiteralContext = VersionLiteralContext;

VersionLiteralContext.prototype.VERSION_LITERAL = function() {
    return this.getToken(MParser.VERSION_LITERAL, 0);
};
VersionLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterVersionLiteral(this);
	}
};

VersionLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitVersionLiteral(this);
	}
};


function HexadecimalLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HexadecimalLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
HexadecimalLiteralContext.prototype.constructor = HexadecimalLiteralContext;

MParser.HexadecimalLiteralContext = HexadecimalLiteralContext;

HexadecimalLiteralContext.prototype.HEXA_LITERAL = function() {
    return this.getToken(MParser.HEXA_LITERAL, 0);
};
HexadecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterHexadecimalLiteral(this);
	}
};

HexadecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitHexadecimalLiteral(this);
	}
};


function UUIDLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UUIDLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
UUIDLiteralContext.prototype.constructor = UUIDLiteralContext;

MParser.UUIDLiteralContext = UUIDLiteralContext;

UUIDLiteralContext.prototype.UUID_LITERAL = function() {
    return this.getToken(MParser.UUID_LITERAL, 0);
};
UUIDLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterUUIDLiteral(this);
	}
};

UUIDLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitUUIDLiteral(this);
	}
};


function MaxIntegerLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MaxIntegerLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
MaxIntegerLiteralContext.prototype.constructor = MaxIntegerLiteralContext;

MParser.MaxIntegerLiteralContext = MaxIntegerLiteralContext;

MaxIntegerLiteralContext.prototype.MAX_INTEGER = function() {
    return this.getToken(MParser.MAX_INTEGER, 0);
};
MaxIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMaxIntegerLiteral(this);
	}
};

MaxIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMaxIntegerLiteral(this);
	}
};


function TypeLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
TypeLiteralContext.prototype.constructor = TypeLiteralContext;

MParser.TypeLiteralContext = TypeLiteralContext;

TypeLiteralContext.prototype.type_literal = function() {
    return this.getTypedRuleContext(Type_literalContext,0);
};
TypeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterTypeLiteral(this);
	}
};

TypeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitTypeLiteral(this);
	}
};


function DateTimeLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateTimeLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
DateTimeLiteralContext.prototype.constructor = DateTimeLiteralContext;

MParser.DateTimeLiteralContext = DateTimeLiteralContext;

DateTimeLiteralContext.prototype.DATETIME_LITERAL = function() {
    return this.getToken(MParser.DATETIME_LITERAL, 0);
};
DateTimeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDateTimeLiteral(this);
	}
};

DateTimeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDateTimeLiteral(this);
	}
};


function PeriodLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PeriodLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
PeriodLiteralContext.prototype.constructor = PeriodLiteralContext;

MParser.PeriodLiteralContext = PeriodLiteralContext;

PeriodLiteralContext.prototype.PERIOD_LITERAL = function() {
    return this.getToken(MParser.PERIOD_LITERAL, 0);
};
PeriodLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPeriodLiteral(this);
	}
};

PeriodLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPeriodLiteral(this);
	}
};


function DecimalLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DecimalLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
DecimalLiteralContext.prototype.constructor = DecimalLiteralContext;

MParser.DecimalLiteralContext = DecimalLiteralContext;

DecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(MParser.DECIMAL_LITERAL, 0);
};
DecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDecimalLiteral(this);
	}
};


function TextLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TextLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
TextLiteralContext.prototype.constructor = TextLiteralContext;

MParser.TextLiteralContext = TextLiteralContext;

TextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(MParser.TEXT_LITERAL, 0);
};
TextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterTextLiteral(this);
	}
};

TextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitTextLiteral(this);
	}
};


function NullLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
NullLiteralContext.prototype.constructor = NullLiteralContext;

MParser.NullLiteralContext = NullLiteralContext;

NullLiteralContext.prototype.null_literal = function() {
    return this.getTypedRuleContext(Null_literalContext,0);
};
NullLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNullLiteral(this);
	}
};

NullLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNullLiteral(this);
	}
};


function IntegerLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntegerLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
IntegerLiteralContext.prototype.constructor = IntegerLiteralContext;

MParser.IntegerLiteralContext = IntegerLiteralContext;

IntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(MParser.INTEGER_LITERAL, 0);
};
IntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterIntegerLiteral(this);
	}
};

IntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitIntegerLiteral(this);
	}
};


function TimeLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
TimeLiteralContext.prototype.constructor = TimeLiteralContext;

MParser.TimeLiteralContext = TimeLiteralContext;

TimeLiteralContext.prototype.TIME_LITERAL = function() {
    return this.getToken(MParser.TIME_LITERAL, 0);
};
TimeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterTimeLiteral(this);
	}
};

TimeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitTimeLiteral(this);
	}
};


function CharacterLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CharacterLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
CharacterLiteralContext.prototype.constructor = CharacterLiteralContext;

MParser.CharacterLiteralContext = CharacterLiteralContext;

CharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(MParser.CHAR_LITERAL, 0);
};
CharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCharacterLiteral(this);
	}
};

CharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCharacterLiteral(this);
	}
};



MParser.Atomic_literalContext = Atomic_literalContext;

MParser.prototype.atomic_literal = function() {

    var localctx = new Atomic_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, MParser.RULE_atomic_literal);
    try {
        this.state = 2044;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.MIN_INTEGER:
            localctx = new MinIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2028;
            this.match(MParser.MIN_INTEGER);
            break;
        case MParser.MAX_INTEGER:
            localctx = new MaxIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2029;
            this.match(MParser.MAX_INTEGER);
            break;
        case MParser.INTEGER_LITERAL:
            localctx = new IntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2030;
            this.match(MParser.INTEGER_LITERAL);
            break;
        case MParser.HEXA_LITERAL:
            localctx = new HexadecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2031;
            this.match(MParser.HEXA_LITERAL);
            break;
        case MParser.CHAR_LITERAL:
            localctx = new CharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2032;
            this.match(MParser.CHAR_LITERAL);
            break;
        case MParser.DATE_LITERAL:
            localctx = new DateLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 2033;
            this.match(MParser.DATE_LITERAL);
            break;
        case MParser.TIME_LITERAL:
            localctx = new TimeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 2034;
            this.match(MParser.TIME_LITERAL);
            break;
        case MParser.TEXT_LITERAL:
            localctx = new TextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 2035;
            this.match(MParser.TEXT_LITERAL);
            break;
        case MParser.DECIMAL_LITERAL:
            localctx = new DecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 2036;
            this.match(MParser.DECIMAL_LITERAL);
            break;
        case MParser.DATETIME_LITERAL:
            localctx = new DateTimeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 2037;
            this.match(MParser.DATETIME_LITERAL);
            break;
        case MParser.BOOLEAN_LITERAL:
            localctx = new BooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 2038;
            this.match(MParser.BOOLEAN_LITERAL);
            break;
        case MParser.PERIOD_LITERAL:
            localctx = new PeriodLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 2039;
            this.match(MParser.PERIOD_LITERAL);
            break;
        case MParser.VERSION_LITERAL:
            localctx = new VersionLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 2040;
            this.match(MParser.VERSION_LITERAL);
            break;
        case MParser.UUID_LITERAL:
            localctx = new UUIDLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 2041;
            this.match(MParser.UUID_LITERAL);
            break;
        case MParser.BOOLEAN:
        case MParser.CHARACTER:
        case MParser.TEXT:
        case MParser.INTEGER:
        case MParser.DECIMAL:
        case MParser.DATE:
        case MParser.TIME:
        case MParser.DATETIME:
        case MParser.PERIOD:
        case MParser.VERSION:
        case MParser.CODE:
        case MParser.DOCUMENT:
        case MParser.BLOB:
        case MParser.IMAGE:
        case MParser.UUID:
        case MParser.ITERATOR:
        case MParser.CURSOR:
        case MParser.HTML:
        case MParser.ANY:
        case MParser.TYPE_IDENTIFIER:
            localctx = new TypeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 2042;
            this.type_literal();
            break;
        case MParser.NONE:
            localctx = new NullLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 2043;
            this.null_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Literal_list_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_literal_list_literal;
    return this;
}

Literal_list_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_list_literalContext.prototype.constructor = Literal_list_literalContext;

Literal_list_literalContext.prototype.atomic_literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Atomic_literalContext);
    } else {
        return this.getTypedRuleContext(Atomic_literalContext,i);
    }
};

Literal_list_literalContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.COMMA);
    } else {
        return this.getToken(MParser.COMMA, i);
    }
};


Literal_list_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterLiteral_list_literal(this);
	}
};

Literal_list_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitLiteral_list_literal(this);
	}
};




MParser.Literal_list_literalContext = Literal_list_literalContext;

MParser.prototype.literal_list_literal = function() {

    var localctx = new Literal_list_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, MParser.RULE_literal_list_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2046;
        this.atomic_literal();
        this.state = 2051;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MParser.COMMA) {
            this.state = 2047;
            this.match(MParser.COMMA);
            this.state = 2048;
            this.atomic_literal();
            this.state = 2053;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function This_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_this_expression;
    return this;
}

This_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
This_expressionContext.prototype.constructor = This_expressionContext;

This_expressionContext.prototype.SELF = function() {
    return this.getToken(MParser.SELF, 0);
};

This_expressionContext.prototype.THIS = function() {
    return this.getToken(MParser.THIS, 0);
};

This_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterThis_expression(this);
	}
};

This_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitThis_expression(this);
	}
};




MParser.This_expressionContext = This_expressionContext;

MParser.prototype.this_expression = function() {

    var localctx = new This_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, MParser.RULE_this_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2054;
        _la = this._input.LA(1);
        if(!(_la===MParser.SELF || _la===MParser.THIS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_parenthesis_expression;
    return this;
}

Parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parenthesis_expressionContext.prototype.constructor = Parenthesis_expressionContext;

Parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Parenthesis_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterParenthesis_expression(this);
	}
};

Parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitParenthesis_expression(this);
	}
};




MParser.Parenthesis_expressionContext = Parenthesis_expressionContext;

MParser.prototype.parenthesis_expression = function() {

    var localctx = new Parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, MParser.RULE_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2056;
        this.match(MParser.LPAR);
        this.state = 2057;
        this.expression(0);
        this.state = 2058;
        this.match(MParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_literal_expression;
    return this;
}

Literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_expressionContext.prototype.constructor = Literal_expressionContext;

Literal_expressionContext.prototype.atomic_literal = function() {
    return this.getTypedRuleContext(Atomic_literalContext,0);
};

Literal_expressionContext.prototype.collection_literal = function() {
    return this.getTypedRuleContext(Collection_literalContext,0);
};

Literal_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterLiteral_expression(this);
	}
};

Literal_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitLiteral_expression(this);
	}
};




MParser.Literal_expressionContext = Literal_expressionContext;

MParser.prototype.literal_expression = function() {

    var localctx = new Literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, MParser.RULE_literal_expression);
    try {
        this.state = 2062;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.BOOLEAN:
        case MParser.CHARACTER:
        case MParser.TEXT:
        case MParser.INTEGER:
        case MParser.DECIMAL:
        case MParser.DATE:
        case MParser.TIME:
        case MParser.DATETIME:
        case MParser.PERIOD:
        case MParser.VERSION:
        case MParser.CODE:
        case MParser.DOCUMENT:
        case MParser.BLOB:
        case MParser.IMAGE:
        case MParser.UUID:
        case MParser.ITERATOR:
        case MParser.CURSOR:
        case MParser.HTML:
        case MParser.ANY:
        case MParser.NONE:
        case MParser.BOOLEAN_LITERAL:
        case MParser.CHAR_LITERAL:
        case MParser.MIN_INTEGER:
        case MParser.MAX_INTEGER:
        case MParser.TYPE_IDENTIFIER:
        case MParser.TEXT_LITERAL:
        case MParser.UUID_LITERAL:
        case MParser.INTEGER_LITERAL:
        case MParser.HEXA_LITERAL:
        case MParser.DECIMAL_LITERAL:
        case MParser.DATETIME_LITERAL:
        case MParser.TIME_LITERAL:
        case MParser.DATE_LITERAL:
        case MParser.PERIOD_LITERAL:
        case MParser.VERSION_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 2060;
            this.atomic_literal();
            break;
        case MParser.LPAR:
        case MParser.LBRAK:
        case MParser.LCURL:
        case MParser.LT:
        case MParser.LTCOLONGT:
        case MParser.MUTABLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2061;
            this.collection_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collection_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_collection_literal;
    return this;
}

Collection_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collection_literalContext.prototype.constructor = Collection_literalContext;

Collection_literalContext.prototype.range_literal = function() {
    return this.getTypedRuleContext(Range_literalContext,0);
};

Collection_literalContext.prototype.list_literal = function() {
    return this.getTypedRuleContext(List_literalContext,0);
};

Collection_literalContext.prototype.set_literal = function() {
    return this.getTypedRuleContext(Set_literalContext,0);
};

Collection_literalContext.prototype.dict_literal = function() {
    return this.getTypedRuleContext(Dict_literalContext,0);
};

Collection_literalContext.prototype.document_literal = function() {
    return this.getTypedRuleContext(Document_literalContext,0);
};

Collection_literalContext.prototype.tuple_literal = function() {
    return this.getTypedRuleContext(Tuple_literalContext,0);
};

Collection_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCollection_literal(this);
	}
};

Collection_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCollection_literal(this);
	}
};




MParser.Collection_literalContext = Collection_literalContext;

MParser.prototype.collection_literal = function() {

    var localctx = new Collection_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, MParser.RULE_collection_literal);
    try {
        this.state = 2070;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2064;
            this.range_literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2065;
            this.list_literal();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2066;
            this.set_literal();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2067;
            this.dict_literal();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2068;
            this.document_literal();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2069;
            this.tuple_literal();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Tuple_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_tuple_literal;
    return this;
}

Tuple_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tuple_literalContext.prototype.constructor = Tuple_literalContext;

Tuple_literalContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Tuple_literalContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Tuple_literalContext.prototype.MUTABLE = function() {
    return this.getToken(MParser.MUTABLE, 0);
};

Tuple_literalContext.prototype.expression_tuple = function() {
    return this.getTypedRuleContext(Expression_tupleContext,0);
};

Tuple_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterTuple_literal(this);
	}
};

Tuple_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitTuple_literal(this);
	}
};




MParser.Tuple_literalContext = Tuple_literalContext;

MParser.prototype.tuple_literal = function() {

    var localctx = new Tuple_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, MParser.RULE_tuple_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2073;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.MUTABLE) {
            this.state = 2072;
            this.match(MParser.MUTABLE);
        }

        this.state = 2075;
        this.match(MParser.LPAR);
        this.state = 2077;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MParser.LPAR - 20)) | (1 << (MParser.LBRAK - 20)) | (1 << (MParser.LCURL - 20)) | (1 << (MParser.MINUS - 20)) | (1 << (MParser.LT - 20)) | (1 << (MParser.LTGT - 20)) | (1 << (MParser.LTCOLONGT - 20)))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.CODE - 52)) | (1 << (MParser.DOCUMENT - 52)) | (1 << (MParser.BLOB - 52)) | (1 << (MParser.IMAGE - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.ITERATOR - 52)) | (1 << (MParser.CURSOR - 52)) | (1 << (MParser.HTML - 52)) | (1 << (MParser.ANY - 52)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (MParser.EXECUTE - 103)) | (1 << (MParser.FETCH - 103)) | (1 << (MParser.MUTABLE - 103)) | (1 << (MParser.NONE - 103)) | (1 << (MParser.NOT - 103)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (MParser.READ - 138)) | (1 << (MParser.SELF - 138)) | (1 << (MParser.SORTED - 138)) | (1 << (MParser.THIS - 138)) | (1 << (MParser.BOOLEAN_LITERAL - 138)) | (1 << (MParser.CHAR_LITERAL - 138)) | (1 << (MParser.MIN_INTEGER - 138)) | (1 << (MParser.MAX_INTEGER - 138)) | (1 << (MParser.SYMBOL_IDENTIFIER - 138)) | (1 << (MParser.TYPE_IDENTIFIER - 138)))) !== 0) || ((((_la - 170)) & ~0x1f) == 0 && ((1 << (_la - 170)) & ((1 << (MParser.VARIABLE_IDENTIFIER - 170)) | (1 << (MParser.TEXT_LITERAL - 170)) | (1 << (MParser.UUID_LITERAL - 170)) | (1 << (MParser.INTEGER_LITERAL - 170)) | (1 << (MParser.HEXA_LITERAL - 170)) | (1 << (MParser.DECIMAL_LITERAL - 170)) | (1 << (MParser.DATETIME_LITERAL - 170)) | (1 << (MParser.TIME_LITERAL - 170)) | (1 << (MParser.DATE_LITERAL - 170)) | (1 << (MParser.PERIOD_LITERAL - 170)) | (1 << (MParser.VERSION_LITERAL - 170)))) !== 0)) {
            this.state = 2076;
            this.expression_tuple();
        }

        this.state = 2079;
        this.match(MParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dict_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_dict_literal;
    return this;
}

Dict_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dict_literalContext.prototype.constructor = Dict_literalContext;

Dict_literalContext.prototype.LTCOLONGT = function() {
    return this.getToken(MParser.LTCOLONGT, 0);
};

Dict_literalContext.prototype.MUTABLE = function() {
    return this.getToken(MParser.MUTABLE, 0);
};

Dict_literalContext.prototype.LT = function() {
    return this.getToken(MParser.LT, 0);
};

Dict_literalContext.prototype.dict_entry_list = function() {
    return this.getTypedRuleContext(Dict_entry_listContext,0);
};

Dict_literalContext.prototype.GT = function() {
    return this.getToken(MParser.GT, 0);
};

Dict_literalContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Dict_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDict_literal(this);
	}
};

Dict_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDict_literal(this);
	}
};




MParser.Dict_literalContext = Dict_literalContext;

MParser.prototype.dict_literal = function() {

    var localctx = new Dict_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, MParser.RULE_dict_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2082;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.MUTABLE) {
            this.state = 2081;
            this.match(MParser.MUTABLE);
        }

        this.state = 2092;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2084;
            this.match(MParser.LT);
            this.state = 2085;
            this.dict_entry_list();
            this.state = 2086;
            this.match(MParser.GT);
            break;

        case 2:
            this.state = 2088;
            this.match(MParser.LTCOLONGT);
            break;

        case 3:
            this.state = 2089;
            this.match(MParser.LT);
            this.state = 2090;
            this.match(MParser.COLON);
            this.state = 2091;
            this.match(MParser.GT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Document_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_document_literal;
    return this;
}

Document_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Document_literalContext.prototype.constructor = Document_literalContext;

Document_literalContext.prototype.LCURL = function() {
    return this.getToken(MParser.LCURL, 0);
};

Document_literalContext.prototype.RCURL = function() {
    return this.getToken(MParser.RCURL, 0);
};

Document_literalContext.prototype.dict_entry_list = function() {
    return this.getTypedRuleContext(Dict_entry_listContext,0);
};

Document_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDocument_literal(this);
	}
};

Document_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDocument_literal(this);
	}
};




MParser.Document_literalContext = Document_literalContext;

MParser.prototype.document_literal = function() {

    var localctx = new Document_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, MParser.RULE_document_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2094;
        this.match(MParser.LCURL);
        this.state = 2096;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MParser.JAVA) | (1 << MParser.CSHARP) | (1 << MParser.PYTHON2) | (1 << MParser.PYTHON3) | (1 << MParser.JAVASCRIPT) | (1 << MParser.SWIFT))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.CODE - 52)) | (1 << (MParser.DOCUMENT - 52)) | (1 << (MParser.BLOB - 52)) | (1 << (MParser.IMAGE - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.ITERATOR - 52)) | (1 << (MParser.CURSOR - 52)) | (1 << (MParser.HTML - 52)) | (1 << (MParser.ABSTRACT - 52)) | (1 << (MParser.ALL - 52)) | (1 << (MParser.ALWAYS - 52)) | (1 << (MParser.AND - 52)) | (1 << (MParser.ANY - 52)) | (1 << (MParser.AS - 52)) | (1 << (MParser.ASC - 52)) | (1 << (MParser.ATTR - 52)) | (1 << (MParser.ATTRIBUTE - 52)) | (1 << (MParser.ATTRIBUTES - 52)) | (1 << (MParser.BINDINGS - 52)) | (1 << (MParser.BREAK - 52)))) !== 0) || ((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (MParser.BY - 84)) | (1 << (MParser.CASE - 84)) | (1 << (MParser.CATCH - 84)) | (1 << (MParser.CATEGORY - 84)) | (1 << (MParser.CLASS - 84)) | (1 << (MParser.CLOSE - 84)) | (1 << (MParser.CONTAINS - 84)) | (1 << (MParser.DEF - 84)) | (1 << (MParser.DEFAULT - 84)) | (1 << (MParser.DEFINE - 84)) | (1 << (MParser.DELETE - 84)) | (1 << (MParser.DESC - 84)) | (1 << (MParser.DO - 84)) | (1 << (MParser.DOING - 84)) | (1 << (MParser.EACH - 84)) | (1 << (MParser.ELSE - 84)) | (1 << (MParser.ENUM - 84)) | (1 << (MParser.ENUMERATED - 84)) | (1 << (MParser.EXCEPT - 84)) | (1 << (MParser.EXECUTE - 84)) | (1 << (MParser.EXPECTING - 84)) | (1 << (MParser.EXTENDS - 84)) | (1 << (MParser.FETCH - 84)) | (1 << (MParser.FILTERED - 84)) | (1 << (MParser.FINALLY - 84)) | (1 << (MParser.FLUSH - 84)) | (1 << (MParser.FOR - 84)) | (1 << (MParser.FROM - 84)) | (1 << (MParser.GETTER - 84)) | (1 << (MParser.HAS - 84)) | (1 << (MParser.IF - 84)) | (1 << (MParser.IN - 84)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (MParser.INDEX - 116)) | (1 << (MParser.IS - 116)) | (1 << (MParser.MATCHING - 116)) | (1 << (MParser.METHOD - 116)) | (1 << (MParser.METHODS - 116)) | (1 << (MParser.MODULO - 116)) | (1 << (MParser.MUTABLE - 116)) | (1 << (MParser.NATIVE - 116)) | (1 << (MParser.NONE - 116)) | (1 << (MParser.NOT - 116)) | (1 << (MParser.NOTHING - 116)) | (1 << (MParser.NULL - 116)) | (1 << (MParser.ON - 116)) | (1 << (MParser.ONE - 116)) | (1 << (MParser.OPEN - 116)) | (1 << (MParser.OPERATOR - 116)) | (1 << (MParser.OR - 116)) | (1 << (MParser.ORDER - 116)) | (1 << (MParser.OTHERWISE - 116)) | (1 << (MParser.PASS - 116)) | (1 << (MParser.RAISE - 116)) | (1 << (MParser.READ - 116)) | (1 << (MParser.RECEIVING - 116)) | (1 << (MParser.RESOURCE - 116)) | (1 << (MParser.RETURN - 116)) | (1 << (MParser.RETURNING - 116)) | (1 << (MParser.ROWS - 116)) | (1 << (MParser.SELF - 116)) | (1 << (MParser.SETTER - 116)) | (1 << (MParser.SINGLETON - 116)) | (1 << (MParser.SORTED - 116)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (MParser.STORABLE - 148)) | (1 << (MParser.STORE - 148)) | (1 << (MParser.SWITCH - 148)) | (1 << (MParser.TEST - 148)) | (1 << (MParser.THIS - 148)) | (1 << (MParser.THROW - 148)) | (1 << (MParser.TO - 148)) | (1 << (MParser.TRY - 148)) | (1 << (MParser.VERIFYING - 148)) | (1 << (MParser.WIDGET - 148)) | (1 << (MParser.WITH - 148)) | (1 << (MParser.WHEN - 148)) | (1 << (MParser.WHERE - 148)) | (1 << (MParser.WHILE - 148)) | (1 << (MParser.WRITE - 148)) | (1 << (MParser.SYMBOL_IDENTIFIER - 148)) | (1 << (MParser.TYPE_IDENTIFIER - 148)) | (1 << (MParser.VARIABLE_IDENTIFIER - 148)) | (1 << (MParser.TEXT_LITERAL - 148)))) !== 0)) {
            this.state = 2095;
            this.dict_entry_list();
        }

        this.state = 2098;
        this.match(MParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_tupleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_expression_tuple;
    return this;
}

Expression_tupleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_tupleContext.prototype.constructor = Expression_tupleContext;

Expression_tupleContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Expression_tupleContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.COMMA);
    } else {
        return this.getToken(MParser.COMMA, i);
    }
};


Expression_tupleContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterExpression_tuple(this);
	}
};

Expression_tupleContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitExpression_tuple(this);
	}
};




MParser.Expression_tupleContext = Expression_tupleContext;

MParser.prototype.expression_tuple = function() {

    var localctx = new Expression_tupleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, MParser.RULE_expression_tuple);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2100;
        this.expression(0);
        this.state = 2101;
        this.match(MParser.COMMA);
        this.state = 2110;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MParser.LPAR - 20)) | (1 << (MParser.LBRAK - 20)) | (1 << (MParser.LCURL - 20)) | (1 << (MParser.MINUS - 20)) | (1 << (MParser.LT - 20)) | (1 << (MParser.LTGT - 20)) | (1 << (MParser.LTCOLONGT - 20)))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.CODE - 52)) | (1 << (MParser.DOCUMENT - 52)) | (1 << (MParser.BLOB - 52)) | (1 << (MParser.IMAGE - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.ITERATOR - 52)) | (1 << (MParser.CURSOR - 52)) | (1 << (MParser.HTML - 52)) | (1 << (MParser.ANY - 52)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (MParser.EXECUTE - 103)) | (1 << (MParser.FETCH - 103)) | (1 << (MParser.MUTABLE - 103)) | (1 << (MParser.NONE - 103)) | (1 << (MParser.NOT - 103)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (MParser.READ - 138)) | (1 << (MParser.SELF - 138)) | (1 << (MParser.SORTED - 138)) | (1 << (MParser.THIS - 138)) | (1 << (MParser.BOOLEAN_LITERAL - 138)) | (1 << (MParser.CHAR_LITERAL - 138)) | (1 << (MParser.MIN_INTEGER - 138)) | (1 << (MParser.MAX_INTEGER - 138)) | (1 << (MParser.SYMBOL_IDENTIFIER - 138)) | (1 << (MParser.TYPE_IDENTIFIER - 138)))) !== 0) || ((((_la - 170)) & ~0x1f) == 0 && ((1 << (_la - 170)) & ((1 << (MParser.VARIABLE_IDENTIFIER - 170)) | (1 << (MParser.TEXT_LITERAL - 170)) | (1 << (MParser.UUID_LITERAL - 170)) | (1 << (MParser.INTEGER_LITERAL - 170)) | (1 << (MParser.HEXA_LITERAL - 170)) | (1 << (MParser.DECIMAL_LITERAL - 170)) | (1 << (MParser.DATETIME_LITERAL - 170)) | (1 << (MParser.TIME_LITERAL - 170)) | (1 << (MParser.DATE_LITERAL - 170)) | (1 << (MParser.PERIOD_LITERAL - 170)) | (1 << (MParser.VERSION_LITERAL - 170)))) !== 0)) {
            this.state = 2102;
            this.expression(0);
            this.state = 2107;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MParser.COMMA) {
                this.state = 2103;
                this.match(MParser.COMMA);
                this.state = 2104;
                this.expression(0);
                this.state = 2109;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dict_entry_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_dict_entry_list;
    return this;
}

Dict_entry_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dict_entry_listContext.prototype.constructor = Dict_entry_listContext;

Dict_entry_listContext.prototype.dict_entry = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dict_entryContext);
    } else {
        return this.getTypedRuleContext(Dict_entryContext,i);
    }
};

Dict_entry_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.COMMA);
    } else {
        return this.getToken(MParser.COMMA, i);
    }
};


Dict_entry_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDict_entry_list(this);
	}
};

Dict_entry_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDict_entry_list(this);
	}
};




MParser.Dict_entry_listContext = Dict_entry_listContext;

MParser.prototype.dict_entry_list = function() {

    var localctx = new Dict_entry_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, MParser.RULE_dict_entry_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2112;
        this.dict_entry();
        this.state = 2117;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MParser.COMMA) {
            this.state = 2113;
            this.match(MParser.COMMA);
            this.state = 2114;
            this.dict_entry();
            this.state = 2119;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dict_entryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_dict_entry;
    this.key = null; // Dict_keyContext
    this.value = null; // ExpressionContext
    return this;
}

Dict_entryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dict_entryContext.prototype.constructor = Dict_entryContext;

Dict_entryContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Dict_entryContext.prototype.dict_key = function() {
    return this.getTypedRuleContext(Dict_keyContext,0);
};

Dict_entryContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Dict_entryContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDict_entry(this);
	}
};

Dict_entryContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDict_entry(this);
	}
};




MParser.Dict_entryContext = Dict_entryContext;

MParser.prototype.dict_entry = function() {

    var localctx = new Dict_entryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, MParser.RULE_dict_entry);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2120;
        localctx.key = this.dict_key();
        this.state = 2121;
        this.match(MParser.COLON);
        this.state = 2122;
        localctx.value = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dict_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_dict_key;
    return this;
}

Dict_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dict_keyContext.prototype.constructor = Dict_keyContext;


 
Dict_keyContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DictKeyIdentifierContext(parser, ctx) {
	Dict_keyContext.call(this, parser);
    this.name = null; // Identifier_or_keywordContext;
    Dict_keyContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DictKeyIdentifierContext.prototype = Object.create(Dict_keyContext.prototype);
DictKeyIdentifierContext.prototype.constructor = DictKeyIdentifierContext;

MParser.DictKeyIdentifierContext = DictKeyIdentifierContext;

DictKeyIdentifierContext.prototype.identifier_or_keyword = function() {
    return this.getTypedRuleContext(Identifier_or_keywordContext,0);
};
DictKeyIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDictKeyIdentifier(this);
	}
};

DictKeyIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDictKeyIdentifier(this);
	}
};


function DictKeyTextContext(parser, ctx) {
	Dict_keyContext.call(this, parser);
    this.name = null; // Token;
    Dict_keyContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DictKeyTextContext.prototype = Object.create(Dict_keyContext.prototype);
DictKeyTextContext.prototype.constructor = DictKeyTextContext;

MParser.DictKeyTextContext = DictKeyTextContext;

DictKeyTextContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(MParser.TEXT_LITERAL, 0);
};
DictKeyTextContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDictKeyText(this);
	}
};

DictKeyTextContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDictKeyText(this);
	}
};



MParser.Dict_keyContext = Dict_keyContext;

MParser.prototype.dict_key = function() {

    var localctx = new Dict_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, MParser.RULE_dict_key);
    try {
        this.state = 2126;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.JAVA:
        case MParser.CSHARP:
        case MParser.PYTHON2:
        case MParser.PYTHON3:
        case MParser.JAVASCRIPT:
        case MParser.SWIFT:
        case MParser.BOOLEAN:
        case MParser.CHARACTER:
        case MParser.TEXT:
        case MParser.INTEGER:
        case MParser.DECIMAL:
        case MParser.DATE:
        case MParser.TIME:
        case MParser.DATETIME:
        case MParser.PERIOD:
        case MParser.VERSION:
        case MParser.CODE:
        case MParser.DOCUMENT:
        case MParser.BLOB:
        case MParser.IMAGE:
        case MParser.UUID:
        case MParser.ITERATOR:
        case MParser.CURSOR:
        case MParser.HTML:
        case MParser.ABSTRACT:
        case MParser.ALL:
        case MParser.ALWAYS:
        case MParser.AND:
        case MParser.ANY:
        case MParser.AS:
        case MParser.ASC:
        case MParser.ATTR:
        case MParser.ATTRIBUTE:
        case MParser.ATTRIBUTES:
        case MParser.BINDINGS:
        case MParser.BREAK:
        case MParser.BY:
        case MParser.CASE:
        case MParser.CATCH:
        case MParser.CATEGORY:
        case MParser.CLASS:
        case MParser.CLOSE:
        case MParser.CONTAINS:
        case MParser.DEF:
        case MParser.DEFAULT:
        case MParser.DEFINE:
        case MParser.DELETE:
        case MParser.DESC:
        case MParser.DO:
        case MParser.DOING:
        case MParser.EACH:
        case MParser.ELSE:
        case MParser.ENUM:
        case MParser.ENUMERATED:
        case MParser.EXCEPT:
        case MParser.EXECUTE:
        case MParser.EXPECTING:
        case MParser.EXTENDS:
        case MParser.FETCH:
        case MParser.FILTERED:
        case MParser.FINALLY:
        case MParser.FLUSH:
        case MParser.FOR:
        case MParser.FROM:
        case MParser.GETTER:
        case MParser.HAS:
        case MParser.IF:
        case MParser.IN:
        case MParser.INDEX:
        case MParser.IS:
        case MParser.MATCHING:
        case MParser.METHOD:
        case MParser.METHODS:
        case MParser.MODULO:
        case MParser.MUTABLE:
        case MParser.NATIVE:
        case MParser.NONE:
        case MParser.NOT:
        case MParser.NOTHING:
        case MParser.NULL:
        case MParser.ON:
        case MParser.ONE:
        case MParser.OPEN:
        case MParser.OPERATOR:
        case MParser.OR:
        case MParser.ORDER:
        case MParser.OTHERWISE:
        case MParser.PASS:
        case MParser.RAISE:
        case MParser.READ:
        case MParser.RECEIVING:
        case MParser.RESOURCE:
        case MParser.RETURN:
        case MParser.RETURNING:
        case MParser.ROWS:
        case MParser.SELF:
        case MParser.SETTER:
        case MParser.SINGLETON:
        case MParser.SORTED:
        case MParser.STORABLE:
        case MParser.STORE:
        case MParser.SWITCH:
        case MParser.TEST:
        case MParser.THIS:
        case MParser.THROW:
        case MParser.TO:
        case MParser.TRY:
        case MParser.VERIFYING:
        case MParser.WIDGET:
        case MParser.WITH:
        case MParser.WHEN:
        case MParser.WHERE:
        case MParser.WHILE:
        case MParser.WRITE:
        case MParser.SYMBOL_IDENTIFIER:
        case MParser.TYPE_IDENTIFIER:
        case MParser.VARIABLE_IDENTIFIER:
            localctx = new DictKeyIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2124;
            localctx.name = this.identifier_or_keyword();
            break;
        case MParser.TEXT_LITERAL:
            localctx = new DictKeyTextContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2125;
            localctx.name = this.match(MParser.TEXT_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Slice_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_slice_arguments;
    return this;
}

Slice_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Slice_argumentsContext.prototype.constructor = Slice_argumentsContext;


 
Slice_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SliceFirstAndLastContext(parser, ctx) {
	Slice_argumentsContext.call(this, parser);
    this.first = null; // ExpressionContext;
    this.last = null; // ExpressionContext;
    Slice_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceFirstAndLastContext.prototype = Object.create(Slice_argumentsContext.prototype);
SliceFirstAndLastContext.prototype.constructor = SliceFirstAndLastContext;

MParser.SliceFirstAndLastContext = SliceFirstAndLastContext;

SliceFirstAndLastContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

SliceFirstAndLastContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
SliceFirstAndLastContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSliceFirstAndLast(this);
	}
};

SliceFirstAndLastContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSliceFirstAndLast(this);
	}
};


function SliceLastOnlyContext(parser, ctx) {
	Slice_argumentsContext.call(this, parser);
    this.last = null; // ExpressionContext;
    Slice_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceLastOnlyContext.prototype = Object.create(Slice_argumentsContext.prototype);
SliceLastOnlyContext.prototype.constructor = SliceLastOnlyContext;

MParser.SliceLastOnlyContext = SliceLastOnlyContext;

SliceLastOnlyContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

SliceLastOnlyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SliceLastOnlyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSliceLastOnly(this);
	}
};

SliceLastOnlyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSliceLastOnly(this);
	}
};


function SliceFirstOnlyContext(parser, ctx) {
	Slice_argumentsContext.call(this, parser);
    this.first = null; // ExpressionContext;
    Slice_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceFirstOnlyContext.prototype = Object.create(Slice_argumentsContext.prototype);
SliceFirstOnlyContext.prototype.constructor = SliceFirstOnlyContext;

MParser.SliceFirstOnlyContext = SliceFirstOnlyContext;

SliceFirstOnlyContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

SliceFirstOnlyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SliceFirstOnlyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSliceFirstOnly(this);
	}
};

SliceFirstOnlyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSliceFirstOnly(this);
	}
};



MParser.Slice_argumentsContext = Slice_argumentsContext;

MParser.prototype.slice_arguments = function() {

    var localctx = new Slice_argumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, MParser.RULE_slice_arguments);
    try {
        this.state = 2137;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SliceFirstAndLastContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2128;
            localctx.first = this.expression(0);
            this.state = 2129;
            this.match(MParser.COLON);
            this.state = 2130;
            localctx.last = this.expression(0);
            break;

        case 2:
            localctx = new SliceFirstOnlyContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2132;
            localctx.first = this.expression(0);
            this.state = 2133;
            this.match(MParser.COLON);
            break;

        case 3:
            localctx = new SliceLastOnlyContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2135;
            this.match(MParser.COLON);
            this.state = 2136;
            localctx.last = this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assign_variable_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_assign_variable_statement;
    return this;
}

Assign_variable_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assign_variable_statementContext.prototype.constructor = Assign_variable_statementContext;

Assign_variable_statementContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Assign_variable_statementContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Assign_variable_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Assign_variable_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAssign_variable_statement(this);
	}
};

Assign_variable_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAssign_variable_statement(this);
	}
};




MParser.Assign_variable_statementContext = Assign_variable_statementContext;

MParser.prototype.assign_variable_statement = function() {

    var localctx = new Assign_variable_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, MParser.RULE_assign_variable_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2139;
        this.variable_identifier();
        this.state = 2140;
        this.assign();
        this.state = 2141;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assignable_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_assignable_instance;
    return this;
}

Assignable_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assignable_instanceContext.prototype.constructor = Assignable_instanceContext;


 
Assignable_instanceContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ChildInstanceContext(parser, ctx) {
	Assignable_instanceContext.call(this, parser);
    Assignable_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ChildInstanceContext.prototype = Object.create(Assignable_instanceContext.prototype);
ChildInstanceContext.prototype.constructor = ChildInstanceContext;

MParser.ChildInstanceContext = ChildInstanceContext;

ChildInstanceContext.prototype.assignable_instance = function() {
    return this.getTypedRuleContext(Assignable_instanceContext,0);
};

ChildInstanceContext.prototype.child_instance = function() {
    return this.getTypedRuleContext(Child_instanceContext,0);
};
ChildInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterChildInstance(this);
	}
};

ChildInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitChildInstance(this);
	}
};


function RootInstanceContext(parser, ctx) {
	Assignable_instanceContext.call(this, parser);
    Assignable_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RootInstanceContext.prototype = Object.create(Assignable_instanceContext.prototype);
RootInstanceContext.prototype.constructor = RootInstanceContext;

MParser.RootInstanceContext = RootInstanceContext;

RootInstanceContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
RootInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterRootInstance(this);
	}
};

RootInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitRootInstance(this);
	}
};



MParser.prototype.assignable_instance = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Assignable_instanceContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 308;
    this.enterRecursionRule(localctx, 308, MParser.RULE_assignable_instance, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new RootInstanceContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2144;
        this.variable_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2150;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,176,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ChildInstanceContext(this, new Assignable_instanceContext(this, _parentctx, _parentState));
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_assignable_instance);
                this.state = 2146;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2147;
                this.child_instance(); 
            }
            this.state = 2152;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,176,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Is_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_is_expression;
    return this;
}

Is_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Is_expressionContext.prototype.constructor = Is_expressionContext;


 
Is_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function IsATypeExpressionContext(parser, ctx) {
	Is_expressionContext.call(this, parser);
    Is_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsATypeExpressionContext.prototype = Object.create(Is_expressionContext.prototype);
IsATypeExpressionContext.prototype.constructor = IsATypeExpressionContext;

MParser.IsATypeExpressionContext = IsATypeExpressionContext;

IsATypeExpressionContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
};

IsATypeExpressionContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};
IsATypeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterIsATypeExpression(this);
	}
};

IsATypeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitIsATypeExpression(this);
	}
};


function IsOtherExpressionContext(parser, ctx) {
	Is_expressionContext.call(this, parser);
    Is_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsOtherExpressionContext.prototype = Object.create(Is_expressionContext.prototype);
IsOtherExpressionContext.prototype.constructor = IsOtherExpressionContext;

MParser.IsOtherExpressionContext = IsOtherExpressionContext;

IsOtherExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
IsOtherExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterIsOtherExpression(this);
	}
};

IsOtherExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitIsOtherExpression(this);
	}
};



MParser.Is_expressionContext = Is_expressionContext;

MParser.prototype.is_expression = function() {

    var localctx = new Is_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, MParser.RULE_is_expression);
    try {
        this.state = 2157;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
        switch(la_) {
        case 1:
            localctx = new IsATypeExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2153;
            if (!( this.willBeAOrAn())) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.willBeAOrAn()");
            }
            this.state = 2154;
            this.match(MParser.VARIABLE_IDENTIFIER);
            this.state = 2155;
            this.category_or_any_type();
            break;

        case 2:
            localctx = new IsOtherExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2156;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Arrow_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_arrow_expression;
    return this;
}

Arrow_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Arrow_expressionContext.prototype.constructor = Arrow_expressionContext;


 
Arrow_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ArrowExpressionBodyContext(parser, ctx) {
	Arrow_expressionContext.call(this, parser);
    Arrow_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrowExpressionBodyContext.prototype = Object.create(Arrow_expressionContext.prototype);
ArrowExpressionBodyContext.prototype.constructor = ArrowExpressionBodyContext;

MParser.ArrowExpressionBodyContext = ArrowExpressionBodyContext;

ArrowExpressionBodyContext.prototype.arrow_prefix = function() {
    return this.getTypedRuleContext(Arrow_prefixContext,0);
};

ArrowExpressionBodyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ArrowExpressionBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterArrowExpressionBody(this);
	}
};

ArrowExpressionBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitArrowExpressionBody(this);
	}
};


function ArrowStatementsBodyContext(parser, ctx) {
	Arrow_expressionContext.call(this, parser);
    Arrow_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrowStatementsBodyContext.prototype = Object.create(Arrow_expressionContext.prototype);
ArrowStatementsBodyContext.prototype.constructor = ArrowStatementsBodyContext;

MParser.ArrowStatementsBodyContext = ArrowStatementsBodyContext;

ArrowStatementsBodyContext.prototype.arrow_prefix = function() {
    return this.getTypedRuleContext(Arrow_prefixContext,0);
};

ArrowStatementsBodyContext.prototype.LCURL = function() {
    return this.getToken(MParser.LCURL, 0);
};

ArrowStatementsBodyContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

ArrowStatementsBodyContext.prototype.RCURL = function() {
    return this.getToken(MParser.RCURL, 0);
};
ArrowStatementsBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterArrowStatementsBody(this);
	}
};

ArrowStatementsBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitArrowStatementsBody(this);
	}
};



MParser.Arrow_expressionContext = Arrow_expressionContext;

MParser.prototype.arrow_expression = function() {

    var localctx = new Arrow_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, MParser.RULE_arrow_expression);
    try {
        this.state = 2167;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ArrowExpressionBodyContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2159;
            this.arrow_prefix();
            this.state = 2160;
            this.expression(0);
            break;

        case 2:
            localctx = new ArrowStatementsBodyContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2162;
            this.arrow_prefix();
            this.state = 2163;
            this.match(MParser.LCURL);
            this.state = 2164;
            this.statement_list();
            this.state = 2165;
            this.match(MParser.RCURL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Arrow_prefixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_arrow_prefix;
    this.s1 = null; // Ws_plusContext
    this.s2 = null; // Ws_plusContext
    return this;
}

Arrow_prefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Arrow_prefixContext.prototype.constructor = Arrow_prefixContext;

Arrow_prefixContext.prototype.arrow_args = function() {
    return this.getTypedRuleContext(Arrow_argsContext,0);
};

Arrow_prefixContext.prototype.EGT = function() {
    return this.getToken(MParser.EGT, 0);
};

Arrow_prefixContext.prototype.ws_plus = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ws_plusContext);
    } else {
        return this.getTypedRuleContext(Ws_plusContext,i);
    }
};

Arrow_prefixContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterArrow_prefix(this);
	}
};

Arrow_prefixContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitArrow_prefix(this);
	}
};




MParser.Arrow_prefixContext = Arrow_prefixContext;

MParser.prototype.arrow_prefix = function() {

    var localctx = new Arrow_prefixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, MParser.RULE_arrow_prefix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2169;
        this.arrow_args();
        this.state = 2170;
        localctx.s1 = this.ws_plus();
        this.state = 2171;
        this.match(MParser.EGT);
        this.state = 2172;
        localctx.s2 = this.ws_plus();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Arrow_argsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_arrow_args;
    return this;
}

Arrow_argsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Arrow_argsContext.prototype.constructor = Arrow_argsContext;


 
Arrow_argsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ArrowListArgContext(parser, ctx) {
	Arrow_argsContext.call(this, parser);
    Arrow_argsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrowListArgContext.prototype = Object.create(Arrow_argsContext.prototype);
ArrowListArgContext.prototype.constructor = ArrowListArgContext;

MParser.ArrowListArgContext = ArrowListArgContext;

ArrowListArgContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

ArrowListArgContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

ArrowListArgContext.prototype.variable_identifier_list = function() {
    return this.getTypedRuleContext(Variable_identifier_listContext,0);
};
ArrowListArgContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterArrowListArg(this);
	}
};

ArrowListArgContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitArrowListArg(this);
	}
};


function ArrowSingleArgContext(parser, ctx) {
	Arrow_argsContext.call(this, parser);
    Arrow_argsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrowSingleArgContext.prototype = Object.create(Arrow_argsContext.prototype);
ArrowSingleArgContext.prototype.constructor = ArrowSingleArgContext;

MParser.ArrowSingleArgContext = ArrowSingleArgContext;

ArrowSingleArgContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
ArrowSingleArgContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterArrowSingleArg(this);
	}
};

ArrowSingleArgContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitArrowSingleArg(this);
	}
};



MParser.Arrow_argsContext = Arrow_argsContext;

MParser.prototype.arrow_args = function() {

    var localctx = new Arrow_argsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, MParser.RULE_arrow_args);
    var _la = 0; // Token type
    try {
        this.state = 2180;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.VARIABLE_IDENTIFIER:
            localctx = new ArrowSingleArgContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2174;
            this.variable_identifier();
            break;
        case MParser.LPAR:
            localctx = new ArrowListArgContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2175;
            this.match(MParser.LPAR);
            this.state = 2177;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MParser.VARIABLE_IDENTIFIER) {
                this.state = 2176;
                this.variable_identifier_list();
            }

            this.state = 2179;
            this.match(MParser.RPAR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sorted_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_sorted_key;
    return this;
}

Sorted_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sorted_keyContext.prototype.constructor = Sorted_keyContext;

Sorted_keyContext.prototype.instance_expression = function() {
    return this.getTypedRuleContext(Instance_expressionContext,0);
};

Sorted_keyContext.prototype.arrow_expression = function() {
    return this.getTypedRuleContext(Arrow_expressionContext,0);
};

Sorted_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSorted_key(this);
	}
};

Sorted_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSorted_key(this);
	}
};




MParser.Sorted_keyContext = Sorted_keyContext;

MParser.prototype.sorted_key = function() {

    var localctx = new Sorted_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, MParser.RULE_sorted_key);
    try {
        this.state = 2184;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2182;
            this.instance_expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2183;
            this.arrow_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Read_all_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_read_all_expression;
    this.source = null; // ExpressionContext
    return this;
}

Read_all_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Read_all_expressionContext.prototype.constructor = Read_all_expressionContext;

Read_all_expressionContext.prototype.READ = function() {
    return this.getToken(MParser.READ, 0);
};

Read_all_expressionContext.prototype.ALL = function() {
    return this.getToken(MParser.ALL, 0);
};

Read_all_expressionContext.prototype.FROM = function() {
    return this.getToken(MParser.FROM, 0);
};

Read_all_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Read_all_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterRead_all_expression(this);
	}
};

Read_all_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitRead_all_expression(this);
	}
};




MParser.Read_all_expressionContext = Read_all_expressionContext;

MParser.prototype.read_all_expression = function() {

    var localctx = new Read_all_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, MParser.RULE_read_all_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2186;
        this.match(MParser.READ);
        this.state = 2187;
        this.match(MParser.ALL);
        this.state = 2188;
        this.match(MParser.FROM);
        this.state = 2189;
        localctx.source = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Read_one_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_read_one_expression;
    this.source = null; // ExpressionContext
    return this;
}

Read_one_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Read_one_expressionContext.prototype.constructor = Read_one_expressionContext;

Read_one_expressionContext.prototype.READ = function() {
    return this.getToken(MParser.READ, 0);
};

Read_one_expressionContext.prototype.ONE = function() {
    return this.getToken(MParser.ONE, 0);
};

Read_one_expressionContext.prototype.FROM = function() {
    return this.getToken(MParser.FROM, 0);
};

Read_one_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Read_one_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterRead_one_expression(this);
	}
};

Read_one_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitRead_one_expression(this);
	}
};




MParser.Read_one_expressionContext = Read_one_expressionContext;

MParser.prototype.read_one_expression = function() {

    var localctx = new Read_one_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, MParser.RULE_read_one_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2191;
        this.match(MParser.READ);
        this.state = 2192;
        this.match(MParser.ONE);
        this.state = 2193;
        this.match(MParser.FROM);
        this.state = 2194;
        localctx.source = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_by_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_order_by_list;
    return this;
}

Order_by_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_by_listContext.prototype.constructor = Order_by_listContext;

Order_by_listContext.prototype.order_by = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Order_byContext);
    } else {
        return this.getTypedRuleContext(Order_byContext,i);
    }
};

Order_by_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.COMMA);
    } else {
        return this.getToken(MParser.COMMA, i);
    }
};


Order_by_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterOrder_by_list(this);
	}
};

Order_by_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitOrder_by_list(this);
	}
};




MParser.Order_by_listContext = Order_by_listContext;

MParser.prototype.order_by_list = function() {

    var localctx = new Order_by_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, MParser.RULE_order_by_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2196;
        this.order_by();
        this.state = 2201;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,182,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2197;
                this.match(MParser.COMMA);
                this.state = 2198;
                this.order_by(); 
            }
            this.state = 2203;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,182,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_byContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_order_by;
    return this;
}

Order_byContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_byContext.prototype.constructor = Order_byContext;

Order_byContext.prototype.variable_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_identifierContext);
    } else {
        return this.getTypedRuleContext(Variable_identifierContext,i);
    }
};

Order_byContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.DOT);
    } else {
        return this.getToken(MParser.DOT, i);
    }
};


Order_byContext.prototype.ASC = function() {
    return this.getToken(MParser.ASC, 0);
};

Order_byContext.prototype.DESC = function() {
    return this.getToken(MParser.DESC, 0);
};

Order_byContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterOrder_by(this);
	}
};

Order_byContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitOrder_by(this);
	}
};




MParser.Order_byContext = Order_byContext;

MParser.prototype.order_by = function() {

    var localctx = new Order_byContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, MParser.RULE_order_by);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2204;
        this.variable_identifier();
        this.state = 2209;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,183,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2205;
                this.match(MParser.DOT);
                this.state = 2206;
                this.variable_identifier(); 
            }
            this.state = 2211;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,183,this._ctx);
        }

        this.state = 2213;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
        if(la_===1) {
            this.state = 2212;
            _la = this._input.LA(1);
            if(!(_la===MParser.ASC || _la===MParser.DESC)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_operator;
    return this;
}

OperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorContext.prototype.constructor = OperatorContext;


 
OperatorContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function OperatorPlusContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorPlusContext.prototype = Object.create(OperatorContext.prototype);
OperatorPlusContext.prototype.constructor = OperatorPlusContext;

MParser.OperatorPlusContext = OperatorPlusContext;

OperatorPlusContext.prototype.PLUS = function() {
    return this.getToken(MParser.PLUS, 0);
};
OperatorPlusContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterOperatorPlus(this);
	}
};

OperatorPlusContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitOperatorPlus(this);
	}
};


function OperatorDivideContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorDivideContext.prototype = Object.create(OperatorContext.prototype);
OperatorDivideContext.prototype.constructor = OperatorDivideContext;

MParser.OperatorDivideContext = OperatorDivideContext;

OperatorDivideContext.prototype.divide = function() {
    return this.getTypedRuleContext(DivideContext,0);
};
OperatorDivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterOperatorDivide(this);
	}
};

OperatorDivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitOperatorDivide(this);
	}
};


function OperatorIDivideContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorIDivideContext.prototype = Object.create(OperatorContext.prototype);
OperatorIDivideContext.prototype.constructor = OperatorIDivideContext;

MParser.OperatorIDivideContext = OperatorIDivideContext;

OperatorIDivideContext.prototype.idivide = function() {
    return this.getTypedRuleContext(IdivideContext,0);
};
OperatorIDivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterOperatorIDivide(this);
	}
};

OperatorIDivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitOperatorIDivide(this);
	}
};


function OperatorMultiplyContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorMultiplyContext.prototype = Object.create(OperatorContext.prototype);
OperatorMultiplyContext.prototype.constructor = OperatorMultiplyContext;

MParser.OperatorMultiplyContext = OperatorMultiplyContext;

OperatorMultiplyContext.prototype.multiply = function() {
    return this.getTypedRuleContext(MultiplyContext,0);
};
OperatorMultiplyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterOperatorMultiply(this);
	}
};

OperatorMultiplyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitOperatorMultiply(this);
	}
};


function OperatorMinusContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorMinusContext.prototype = Object.create(OperatorContext.prototype);
OperatorMinusContext.prototype.constructor = OperatorMinusContext;

MParser.OperatorMinusContext = OperatorMinusContext;

OperatorMinusContext.prototype.MINUS = function() {
    return this.getToken(MParser.MINUS, 0);
};
OperatorMinusContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterOperatorMinus(this);
	}
};

OperatorMinusContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitOperatorMinus(this);
	}
};


function OperatorModuloContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorModuloContext.prototype = Object.create(OperatorContext.prototype);
OperatorModuloContext.prototype.constructor = OperatorModuloContext;

MParser.OperatorModuloContext = OperatorModuloContext;

OperatorModuloContext.prototype.modulo = function() {
    return this.getTypedRuleContext(ModuloContext,0);
};
OperatorModuloContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterOperatorModulo(this);
	}
};

OperatorModuloContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitOperatorModulo(this);
	}
};



MParser.OperatorContext = OperatorContext;

MParser.prototype.operator = function() {

    var localctx = new OperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, MParser.RULE_operator);
    try {
        this.state = 2221;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.PLUS:
            localctx = new OperatorPlusContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2215;
            this.match(MParser.PLUS);
            break;
        case MParser.MINUS:
            localctx = new OperatorMinusContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2216;
            this.match(MParser.MINUS);
            break;
        case MParser.STAR:
            localctx = new OperatorMultiplyContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2217;
            this.multiply();
            break;
        case MParser.SLASH:
            localctx = new OperatorDivideContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2218;
            this.divide();
            break;
        case MParser.BSLASH:
            localctx = new OperatorIDivideContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2219;
            this.idivide();
            break;
        case MParser.PERCENT:
        case MParser.MODULO:
            localctx = new OperatorModuloContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 2220;
            this.modulo();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_keyword;
    return this;
}

KeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordContext.prototype.constructor = KeywordContext;

KeywordContext.prototype.JAVA = function() {
    return this.getToken(MParser.JAVA, 0);
};

KeywordContext.prototype.CSHARP = function() {
    return this.getToken(MParser.CSHARP, 0);
};

KeywordContext.prototype.PYTHON2 = function() {
    return this.getToken(MParser.PYTHON2, 0);
};

KeywordContext.prototype.PYTHON3 = function() {
    return this.getToken(MParser.PYTHON3, 0);
};

KeywordContext.prototype.JAVASCRIPT = function() {
    return this.getToken(MParser.JAVASCRIPT, 0);
};

KeywordContext.prototype.SWIFT = function() {
    return this.getToken(MParser.SWIFT, 0);
};

KeywordContext.prototype.BOOLEAN = function() {
    return this.getToken(MParser.BOOLEAN, 0);
};

KeywordContext.prototype.CHARACTER = function() {
    return this.getToken(MParser.CHARACTER, 0);
};

KeywordContext.prototype.TEXT = function() {
    return this.getToken(MParser.TEXT, 0);
};

KeywordContext.prototype.INTEGER = function() {
    return this.getToken(MParser.INTEGER, 0);
};

KeywordContext.prototype.DECIMAL = function() {
    return this.getToken(MParser.DECIMAL, 0);
};

KeywordContext.prototype.DATE = function() {
    return this.getToken(MParser.DATE, 0);
};

KeywordContext.prototype.TIME = function() {
    return this.getToken(MParser.TIME, 0);
};

KeywordContext.prototype.DATETIME = function() {
    return this.getToken(MParser.DATETIME, 0);
};

KeywordContext.prototype.PERIOD = function() {
    return this.getToken(MParser.PERIOD, 0);
};

KeywordContext.prototype.VERSION = function() {
    return this.getToken(MParser.VERSION, 0);
};

KeywordContext.prototype.CODE = function() {
    return this.getToken(MParser.CODE, 0);
};

KeywordContext.prototype.DOCUMENT = function() {
    return this.getToken(MParser.DOCUMENT, 0);
};

KeywordContext.prototype.BLOB = function() {
    return this.getToken(MParser.BLOB, 0);
};

KeywordContext.prototype.IMAGE = function() {
    return this.getToken(MParser.IMAGE, 0);
};

KeywordContext.prototype.UUID = function() {
    return this.getToken(MParser.UUID, 0);
};

KeywordContext.prototype.ITERATOR = function() {
    return this.getToken(MParser.ITERATOR, 0);
};

KeywordContext.prototype.CURSOR = function() {
    return this.getToken(MParser.CURSOR, 0);
};

KeywordContext.prototype.HTML = function() {
    return this.getToken(MParser.HTML, 0);
};

KeywordContext.prototype.ABSTRACT = function() {
    return this.getToken(MParser.ABSTRACT, 0);
};

KeywordContext.prototype.ALL = function() {
    return this.getToken(MParser.ALL, 0);
};

KeywordContext.prototype.ALWAYS = function() {
    return this.getToken(MParser.ALWAYS, 0);
};

KeywordContext.prototype.AND = function() {
    return this.getToken(MParser.AND, 0);
};

KeywordContext.prototype.ANY = function() {
    return this.getToken(MParser.ANY, 0);
};

KeywordContext.prototype.AS = function() {
    return this.getToken(MParser.AS, 0);
};

KeywordContext.prototype.ASC = function() {
    return this.getToken(MParser.ASC, 0);
};

KeywordContext.prototype.ATTR = function() {
    return this.getToken(MParser.ATTR, 0);
};

KeywordContext.prototype.ATTRIBUTE = function() {
    return this.getToken(MParser.ATTRIBUTE, 0);
};

KeywordContext.prototype.ATTRIBUTES = function() {
    return this.getToken(MParser.ATTRIBUTES, 0);
};

KeywordContext.prototype.BINDINGS = function() {
    return this.getToken(MParser.BINDINGS, 0);
};

KeywordContext.prototype.BREAK = function() {
    return this.getToken(MParser.BREAK, 0);
};

KeywordContext.prototype.BY = function() {
    return this.getToken(MParser.BY, 0);
};

KeywordContext.prototype.CASE = function() {
    return this.getToken(MParser.CASE, 0);
};

KeywordContext.prototype.CATCH = function() {
    return this.getToken(MParser.CATCH, 0);
};

KeywordContext.prototype.CATEGORY = function() {
    return this.getToken(MParser.CATEGORY, 0);
};

KeywordContext.prototype.CLASS = function() {
    return this.getToken(MParser.CLASS, 0);
};

KeywordContext.prototype.CLOSE = function() {
    return this.getToken(MParser.CLOSE, 0);
};

KeywordContext.prototype.CONTAINS = function() {
    return this.getToken(MParser.CONTAINS, 0);
};

KeywordContext.prototype.DEF = function() {
    return this.getToken(MParser.DEF, 0);
};

KeywordContext.prototype.DEFAULT = function() {
    return this.getToken(MParser.DEFAULT, 0);
};

KeywordContext.prototype.DEFINE = function() {
    return this.getToken(MParser.DEFINE, 0);
};

KeywordContext.prototype.DELETE = function() {
    return this.getToken(MParser.DELETE, 0);
};

KeywordContext.prototype.DESC = function() {
    return this.getToken(MParser.DESC, 0);
};

KeywordContext.prototype.DO = function() {
    return this.getToken(MParser.DO, 0);
};

KeywordContext.prototype.DOING = function() {
    return this.getToken(MParser.DOING, 0);
};

KeywordContext.prototype.EACH = function() {
    return this.getToken(MParser.EACH, 0);
};

KeywordContext.prototype.ELSE = function() {
    return this.getToken(MParser.ELSE, 0);
};

KeywordContext.prototype.ENUM = function() {
    return this.getToken(MParser.ENUM, 0);
};

KeywordContext.prototype.ENUMERATED = function() {
    return this.getToken(MParser.ENUMERATED, 0);
};

KeywordContext.prototype.EXCEPT = function() {
    return this.getToken(MParser.EXCEPT, 0);
};

KeywordContext.prototype.EXECUTE = function() {
    return this.getToken(MParser.EXECUTE, 0);
};

KeywordContext.prototype.EXPECTING = function() {
    return this.getToken(MParser.EXPECTING, 0);
};

KeywordContext.prototype.EXTENDS = function() {
    return this.getToken(MParser.EXTENDS, 0);
};

KeywordContext.prototype.FETCH = function() {
    return this.getToken(MParser.FETCH, 0);
};

KeywordContext.prototype.FILTERED = function() {
    return this.getToken(MParser.FILTERED, 0);
};

KeywordContext.prototype.FINALLY = function() {
    return this.getToken(MParser.FINALLY, 0);
};

KeywordContext.prototype.FLUSH = function() {
    return this.getToken(MParser.FLUSH, 0);
};

KeywordContext.prototype.FOR = function() {
    return this.getToken(MParser.FOR, 0);
};

KeywordContext.prototype.FROM = function() {
    return this.getToken(MParser.FROM, 0);
};

KeywordContext.prototype.GETTER = function() {
    return this.getToken(MParser.GETTER, 0);
};

KeywordContext.prototype.HAS = function() {
    return this.getToken(MParser.HAS, 0);
};

KeywordContext.prototype.IF = function() {
    return this.getToken(MParser.IF, 0);
};

KeywordContext.prototype.IN = function() {
    return this.getToken(MParser.IN, 0);
};

KeywordContext.prototype.INDEX = function() {
    return this.getToken(MParser.INDEX, 0);
};

KeywordContext.prototype.IS = function() {
    return this.getToken(MParser.IS, 0);
};

KeywordContext.prototype.MATCHING = function() {
    return this.getToken(MParser.MATCHING, 0);
};

KeywordContext.prototype.METHOD = function() {
    return this.getToken(MParser.METHOD, 0);
};

KeywordContext.prototype.METHODS = function() {
    return this.getToken(MParser.METHODS, 0);
};

KeywordContext.prototype.MODULO = function() {
    return this.getToken(MParser.MODULO, 0);
};

KeywordContext.prototype.MUTABLE = function() {
    return this.getToken(MParser.MUTABLE, 0);
};

KeywordContext.prototype.NATIVE = function() {
    return this.getToken(MParser.NATIVE, 0);
};

KeywordContext.prototype.NONE = function() {
    return this.getToken(MParser.NONE, 0);
};

KeywordContext.prototype.NOT = function() {
    return this.getToken(MParser.NOT, 0);
};

KeywordContext.prototype.NOTHING = function() {
    return this.getToken(MParser.NOTHING, 0);
};

KeywordContext.prototype.NULL = function() {
    return this.getToken(MParser.NULL, 0);
};

KeywordContext.prototype.ON = function() {
    return this.getToken(MParser.ON, 0);
};

KeywordContext.prototype.ONE = function() {
    return this.getToken(MParser.ONE, 0);
};

KeywordContext.prototype.OPEN = function() {
    return this.getToken(MParser.OPEN, 0);
};

KeywordContext.prototype.OPERATOR = function() {
    return this.getToken(MParser.OPERATOR, 0);
};

KeywordContext.prototype.OR = function() {
    return this.getToken(MParser.OR, 0);
};

KeywordContext.prototype.ORDER = function() {
    return this.getToken(MParser.ORDER, 0);
};

KeywordContext.prototype.OTHERWISE = function() {
    return this.getToken(MParser.OTHERWISE, 0);
};

KeywordContext.prototype.PASS = function() {
    return this.getToken(MParser.PASS, 0);
};

KeywordContext.prototype.RAISE = function() {
    return this.getToken(MParser.RAISE, 0);
};

KeywordContext.prototype.READ = function() {
    return this.getToken(MParser.READ, 0);
};

KeywordContext.prototype.RECEIVING = function() {
    return this.getToken(MParser.RECEIVING, 0);
};

KeywordContext.prototype.RESOURCE = function() {
    return this.getToken(MParser.RESOURCE, 0);
};

KeywordContext.prototype.RETURN = function() {
    return this.getToken(MParser.RETURN, 0);
};

KeywordContext.prototype.RETURNING = function() {
    return this.getToken(MParser.RETURNING, 0);
};

KeywordContext.prototype.ROWS = function() {
    return this.getToken(MParser.ROWS, 0);
};

KeywordContext.prototype.SELF = function() {
    return this.getToken(MParser.SELF, 0);
};

KeywordContext.prototype.SETTER = function() {
    return this.getToken(MParser.SETTER, 0);
};

KeywordContext.prototype.SINGLETON = function() {
    return this.getToken(MParser.SINGLETON, 0);
};

KeywordContext.prototype.SORTED = function() {
    return this.getToken(MParser.SORTED, 0);
};

KeywordContext.prototype.STORABLE = function() {
    return this.getToken(MParser.STORABLE, 0);
};

KeywordContext.prototype.STORE = function() {
    return this.getToken(MParser.STORE, 0);
};

KeywordContext.prototype.SWITCH = function() {
    return this.getToken(MParser.SWITCH, 0);
};

KeywordContext.prototype.TEST = function() {
    return this.getToken(MParser.TEST, 0);
};

KeywordContext.prototype.THIS = function() {
    return this.getToken(MParser.THIS, 0);
};

KeywordContext.prototype.THROW = function() {
    return this.getToken(MParser.THROW, 0);
};

KeywordContext.prototype.TO = function() {
    return this.getToken(MParser.TO, 0);
};

KeywordContext.prototype.TRY = function() {
    return this.getToken(MParser.TRY, 0);
};

KeywordContext.prototype.VERIFYING = function() {
    return this.getToken(MParser.VERIFYING, 0);
};

KeywordContext.prototype.WIDGET = function() {
    return this.getToken(MParser.WIDGET, 0);
};

KeywordContext.prototype.WITH = function() {
    return this.getToken(MParser.WITH, 0);
};

KeywordContext.prototype.WHEN = function() {
    return this.getToken(MParser.WHEN, 0);
};

KeywordContext.prototype.WHERE = function() {
    return this.getToken(MParser.WHERE, 0);
};

KeywordContext.prototype.WHILE = function() {
    return this.getToken(MParser.WHILE, 0);
};

KeywordContext.prototype.WRITE = function() {
    return this.getToken(MParser.WRITE, 0);
};

KeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterKeyword(this);
	}
};

KeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitKeyword(this);
	}
};




MParser.KeywordContext = KeywordContext;

MParser.prototype.keyword = function() {

    var localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, MParser.RULE_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2223;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MParser.JAVA) | (1 << MParser.CSHARP) | (1 << MParser.PYTHON2) | (1 << MParser.PYTHON3) | (1 << MParser.JAVASCRIPT) | (1 << MParser.SWIFT))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.CODE - 52)) | (1 << (MParser.DOCUMENT - 52)) | (1 << (MParser.BLOB - 52)) | (1 << (MParser.IMAGE - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.ITERATOR - 52)) | (1 << (MParser.CURSOR - 52)) | (1 << (MParser.HTML - 52)) | (1 << (MParser.ABSTRACT - 52)) | (1 << (MParser.ALL - 52)) | (1 << (MParser.ALWAYS - 52)) | (1 << (MParser.AND - 52)) | (1 << (MParser.ANY - 52)) | (1 << (MParser.AS - 52)) | (1 << (MParser.ASC - 52)) | (1 << (MParser.ATTR - 52)) | (1 << (MParser.ATTRIBUTE - 52)) | (1 << (MParser.ATTRIBUTES - 52)) | (1 << (MParser.BINDINGS - 52)) | (1 << (MParser.BREAK - 52)))) !== 0) || ((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (MParser.BY - 84)) | (1 << (MParser.CASE - 84)) | (1 << (MParser.CATCH - 84)) | (1 << (MParser.CATEGORY - 84)) | (1 << (MParser.CLASS - 84)) | (1 << (MParser.CLOSE - 84)) | (1 << (MParser.CONTAINS - 84)) | (1 << (MParser.DEF - 84)) | (1 << (MParser.DEFAULT - 84)) | (1 << (MParser.DEFINE - 84)) | (1 << (MParser.DELETE - 84)) | (1 << (MParser.DESC - 84)) | (1 << (MParser.DO - 84)) | (1 << (MParser.DOING - 84)) | (1 << (MParser.EACH - 84)) | (1 << (MParser.ELSE - 84)) | (1 << (MParser.ENUM - 84)) | (1 << (MParser.ENUMERATED - 84)) | (1 << (MParser.EXCEPT - 84)) | (1 << (MParser.EXECUTE - 84)) | (1 << (MParser.EXPECTING - 84)) | (1 << (MParser.EXTENDS - 84)) | (1 << (MParser.FETCH - 84)) | (1 << (MParser.FILTERED - 84)) | (1 << (MParser.FINALLY - 84)) | (1 << (MParser.FLUSH - 84)) | (1 << (MParser.FOR - 84)) | (1 << (MParser.FROM - 84)) | (1 << (MParser.GETTER - 84)) | (1 << (MParser.HAS - 84)) | (1 << (MParser.IF - 84)) | (1 << (MParser.IN - 84)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (MParser.INDEX - 116)) | (1 << (MParser.IS - 116)) | (1 << (MParser.MATCHING - 116)) | (1 << (MParser.METHOD - 116)) | (1 << (MParser.METHODS - 116)) | (1 << (MParser.MODULO - 116)) | (1 << (MParser.MUTABLE - 116)) | (1 << (MParser.NATIVE - 116)) | (1 << (MParser.NONE - 116)) | (1 << (MParser.NOT - 116)) | (1 << (MParser.NOTHING - 116)) | (1 << (MParser.NULL - 116)) | (1 << (MParser.ON - 116)) | (1 << (MParser.ONE - 116)) | (1 << (MParser.OPEN - 116)) | (1 << (MParser.OPERATOR - 116)) | (1 << (MParser.OR - 116)) | (1 << (MParser.ORDER - 116)) | (1 << (MParser.OTHERWISE - 116)) | (1 << (MParser.PASS - 116)) | (1 << (MParser.RAISE - 116)) | (1 << (MParser.READ - 116)) | (1 << (MParser.RECEIVING - 116)) | (1 << (MParser.RESOURCE - 116)) | (1 << (MParser.RETURN - 116)) | (1 << (MParser.RETURNING - 116)) | (1 << (MParser.ROWS - 116)) | (1 << (MParser.SELF - 116)) | (1 << (MParser.SETTER - 116)) | (1 << (MParser.SINGLETON - 116)) | (1 << (MParser.SORTED - 116)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (MParser.STORABLE - 148)) | (1 << (MParser.STORE - 148)) | (1 << (MParser.SWITCH - 148)) | (1 << (MParser.TEST - 148)) | (1 << (MParser.THIS - 148)) | (1 << (MParser.THROW - 148)) | (1 << (MParser.TO - 148)) | (1 << (MParser.TRY - 148)) | (1 << (MParser.VERIFYING - 148)) | (1 << (MParser.WIDGET - 148)) | (1 << (MParser.WITH - 148)) | (1 << (MParser.WHEN - 148)) | (1 << (MParser.WHERE - 148)) | (1 << (MParser.WHILE - 148)) | (1 << (MParser.WRITE - 148)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function New_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_new_token;
    this.i1 = null; // Token
    return this;
}

New_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
New_tokenContext.prototype.constructor = New_tokenContext;

New_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
};

New_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterNew_token(this);
	}
};

New_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitNew_token(this);
	}
};




MParser.New_tokenContext = New_tokenContext;

MParser.prototype.new_token = function() {

    var localctx = new New_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, MParser.RULE_new_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2225;
        localctx.i1 = this.match(MParser.VARIABLE_IDENTIFIER);
        this.state = 2226;
        if (!( this.isText(localctx.i1,"new"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"new\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Key_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_key_token;
    this.i1 = null; // Token
    return this;
}

Key_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Key_tokenContext.prototype.constructor = Key_tokenContext;

Key_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
};

Key_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterKey_token(this);
	}
};

Key_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitKey_token(this);
	}
};




MParser.Key_tokenContext = Key_tokenContext;

MParser.prototype.key_token = function() {

    var localctx = new Key_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, MParser.RULE_key_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2228;
        localctx.i1 = this.match(MParser.VARIABLE_IDENTIFIER);
        this.state = 2229;
        if (!( this.isText(localctx.i1,"key"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"key\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Module_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_module_token;
    this.i1 = null; // Token
    return this;
}

Module_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_tokenContext.prototype.constructor = Module_tokenContext;

Module_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
};

Module_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterModule_token(this);
	}
};

Module_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitModule_token(this);
	}
};




MParser.Module_tokenContext = Module_tokenContext;

MParser.prototype.module_token = function() {

    var localctx = new Module_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, MParser.RULE_module_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2231;
        localctx.i1 = this.match(MParser.VARIABLE_IDENTIFIER);
        this.state = 2232;
        if (!( this.isText(localctx.i1,"module"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"module\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Value_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_value_token;
    this.i1 = null; // Token
    return this;
}

Value_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Value_tokenContext.prototype.constructor = Value_tokenContext;

Value_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
};

Value_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterValue_token(this);
	}
};

Value_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitValue_token(this);
	}
};




MParser.Value_tokenContext = Value_tokenContext;

MParser.prototype.value_token = function() {

    var localctx = new Value_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, MParser.RULE_value_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2234;
        localctx.i1 = this.match(MParser.VARIABLE_IDENTIFIER);
        this.state = 2235;
        if (!( this.isText(localctx.i1,"value"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"value\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Symbols_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_symbols_token;
    this.i1 = null; // Token
    return this;
}

Symbols_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Symbols_tokenContext.prototype.constructor = Symbols_tokenContext;

Symbols_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
};

Symbols_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterSymbols_token(this);
	}
};

Symbols_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitSymbols_token(this);
	}
};




MParser.Symbols_tokenContext = Symbols_tokenContext;

MParser.prototype.symbols_token = function() {

    var localctx = new Symbols_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, MParser.RULE_symbols_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2237;
        localctx.i1 = this.match(MParser.VARIABLE_IDENTIFIER);
        this.state = 2238;
        if (!( this.isText(localctx.i1,"symbols"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"symbols\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_assign;
    return this;
}

AssignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignContext.prototype.constructor = AssignContext;

AssignContext.prototype.EQ = function() {
    return this.getToken(MParser.EQ, 0);
};

AssignContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterAssign(this);
	}
};

AssignContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitAssign(this);
	}
};




MParser.AssignContext = AssignContext;

MParser.prototype.assign = function() {

    var localctx = new AssignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, MParser.RULE_assign);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2240;
        this.match(MParser.EQ);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiplyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_multiply;
    return this;
}

MultiplyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplyContext.prototype.constructor = MultiplyContext;

MultiplyContext.prototype.STAR = function() {
    return this.getToken(MParser.STAR, 0);
};

MultiplyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterMultiply(this);
	}
};

MultiplyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitMultiply(this);
	}
};




MParser.MultiplyContext = MultiplyContext;

MParser.prototype.multiply = function() {

    var localctx = new MultiplyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, MParser.RULE_multiply);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2242;
        this.match(MParser.STAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DivideContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_divide;
    return this;
}

DivideContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DivideContext.prototype.constructor = DivideContext;

DivideContext.prototype.SLASH = function() {
    return this.getToken(MParser.SLASH, 0);
};

DivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterDivide(this);
	}
};

DivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitDivide(this);
	}
};




MParser.DivideContext = DivideContext;

MParser.prototype.divide = function() {

    var localctx = new DivideContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, MParser.RULE_divide);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2244;
        this.match(MParser.SLASH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdivideContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_idivide;
    return this;
}

IdivideContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdivideContext.prototype.constructor = IdivideContext;

IdivideContext.prototype.BSLASH = function() {
    return this.getToken(MParser.BSLASH, 0);
};

IdivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterIdivide(this);
	}
};

IdivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitIdivide(this);
	}
};




MParser.IdivideContext = IdivideContext;

MParser.prototype.idivide = function() {

    var localctx = new IdivideContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, MParser.RULE_idivide);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2246;
        this.match(MParser.BSLASH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuloContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_modulo;
    return this;
}

ModuloContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuloContext.prototype.constructor = ModuloContext;

ModuloContext.prototype.PERCENT = function() {
    return this.getToken(MParser.PERCENT, 0);
};

ModuloContext.prototype.MODULO = function() {
    return this.getToken(MParser.MODULO, 0);
};

ModuloContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterModulo(this);
	}
};

ModuloContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitModulo(this);
	}
};




MParser.ModuloContext = ModuloContext;

MParser.prototype.modulo = function() {

    var localctx = new ModuloContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, MParser.RULE_modulo);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2248;
        _la = this._input.LA(1);
        if(!(_la===MParser.PERCENT || _la===MParser.MODULO)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_javascript_statement;
    return this;
}

Javascript_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_statementContext.prototype.constructor = Javascript_statementContext;


 
Javascript_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavascriptStatementContext(parser, ctx) {
	Javascript_statementContext.call(this, parser);
    this.exp = null; // Javascript_expressionContext;
    Javascript_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptStatementContext.prototype = Object.create(Javascript_statementContext.prototype);
JavascriptStatementContext.prototype.constructor = JavascriptStatementContext;

MParser.JavascriptStatementContext = JavascriptStatementContext;

JavascriptStatementContext.prototype.SEMI = function() {
    return this.getToken(MParser.SEMI, 0);
};

JavascriptStatementContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascriptStatement(this);
	}
};

JavascriptStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascriptStatement(this);
	}
};


function JavascriptReturnStatementContext(parser, ctx) {
	Javascript_statementContext.call(this, parser);
    this.exp = null; // Javascript_expressionContext;
    Javascript_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptReturnStatementContext.prototype = Object.create(Javascript_statementContext.prototype);
JavascriptReturnStatementContext.prototype.constructor = JavascriptReturnStatementContext;

MParser.JavascriptReturnStatementContext = JavascriptReturnStatementContext;

JavascriptReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(MParser.RETURN, 0);
};

JavascriptReturnStatementContext.prototype.SEMI = function() {
    return this.getToken(MParser.SEMI, 0);
};

JavascriptReturnStatementContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascriptReturnStatement(this);
	}
};

JavascriptReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascriptReturnStatement(this);
	}
};



MParser.Javascript_statementContext = Javascript_statementContext;

MParser.prototype.javascript_statement = function() {

    var localctx = new Javascript_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, MParser.RULE_javascript_statement);
    try {
        this.state = 2257;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.RETURN:
            localctx = new JavascriptReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2250;
            this.match(MParser.RETURN);
            this.state = 2251;
            localctx.exp = this.javascript_expression(0);
            this.state = 2252;
            this.match(MParser.SEMI);
            break;
        case MParser.LPAR:
        case MParser.LBRAK:
        case MParser.BOOLEAN:
        case MParser.CHARACTER:
        case MParser.TEXT:
        case MParser.INTEGER:
        case MParser.DECIMAL:
        case MParser.DATE:
        case MParser.TIME:
        case MParser.DATETIME:
        case MParser.PERIOD:
        case MParser.VERSION:
        case MParser.UUID:
        case MParser.HTML:
        case MParser.NONE:
        case MParser.NULL:
        case MParser.READ:
        case MParser.SELF:
        case MParser.TEST:
        case MParser.THIS:
        case MParser.WRITE:
        case MParser.BOOLEAN_LITERAL:
        case MParser.CHAR_LITERAL:
        case MParser.SYMBOL_IDENTIFIER:
        case MParser.TYPE_IDENTIFIER:
        case MParser.VARIABLE_IDENTIFIER:
        case MParser.DOLLAR_IDENTIFIER:
        case MParser.TEXT_LITERAL:
        case MParser.INTEGER_LITERAL:
        case MParser.DECIMAL_LITERAL:
            localctx = new JavascriptStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2254;
            localctx.exp = this.javascript_expression(0);
            this.state = 2255;
            this.match(MParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_javascript_expression;
    return this;
}

Javascript_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_expressionContext.prototype.constructor = Javascript_expressionContext;


 
Javascript_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavascriptSelectorExpressionContext(parser, ctx) {
	Javascript_expressionContext.call(this, parser);
    this.parent = null; // Javascript_expressionContext;
    this.child = null; // Javascript_selector_expressionContext;
    Javascript_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptSelectorExpressionContext.prototype = Object.create(Javascript_expressionContext.prototype);
JavascriptSelectorExpressionContext.prototype.constructor = JavascriptSelectorExpressionContext;

MParser.JavascriptSelectorExpressionContext = JavascriptSelectorExpressionContext;

JavascriptSelectorExpressionContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};

JavascriptSelectorExpressionContext.prototype.javascript_selector_expression = function() {
    return this.getTypedRuleContext(Javascript_selector_expressionContext,0);
};
JavascriptSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascriptSelectorExpression(this);
	}
};

JavascriptSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascriptSelectorExpression(this);
	}
};


function JavascriptPrimaryExpressionContext(parser, ctx) {
	Javascript_expressionContext.call(this, parser);
    this.exp = null; // Javascript_primary_expressionContext;
    Javascript_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptPrimaryExpressionContext.prototype = Object.create(Javascript_expressionContext.prototype);
JavascriptPrimaryExpressionContext.prototype.constructor = JavascriptPrimaryExpressionContext;

MParser.JavascriptPrimaryExpressionContext = JavascriptPrimaryExpressionContext;

JavascriptPrimaryExpressionContext.prototype.javascript_primary_expression = function() {
    return this.getTypedRuleContext(Javascript_primary_expressionContext,0);
};
JavascriptPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascriptPrimaryExpression(this);
	}
};

JavascriptPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascriptPrimaryExpression(this);
	}
};



MParser.prototype.javascript_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Javascript_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 354;
    this.enterRecursionRule(localctx, 354, MParser.RULE_javascript_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavascriptPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2260;
        localctx.exp = this.javascript_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2266;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,187,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavascriptSelectorExpressionContext(this, new Javascript_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_javascript_expression);
                this.state = 2262;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2263;
                localctx.child = this.javascript_selector_expression(); 
            }
            this.state = 2268;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,187,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Javascript_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_javascript_primary_expression;
    return this;
}

Javascript_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_primary_expressionContext.prototype.constructor = Javascript_primary_expressionContext;

Javascript_primary_expressionContext.prototype.javascript_this_expression = function() {
    return this.getTypedRuleContext(Javascript_this_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_new_expression = function() {
    return this.getTypedRuleContext(Javascript_new_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_parenthesis_expression = function() {
    return this.getTypedRuleContext(Javascript_parenthesis_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_identifier_expression = function() {
    return this.getTypedRuleContext(Javascript_identifier_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_literal_expression = function() {
    return this.getTypedRuleContext(Javascript_literal_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_method_expression = function() {
    return this.getTypedRuleContext(Javascript_method_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_item_expression = function() {
    return this.getTypedRuleContext(Javascript_item_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascript_primary_expression(this);
	}
};

Javascript_primary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascript_primary_expression(this);
	}
};




MParser.Javascript_primary_expressionContext = Javascript_primary_expressionContext;

MParser.prototype.javascript_primary_expression = function() {

    var localctx = new Javascript_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, MParser.RULE_javascript_primary_expression);
    try {
        this.state = 2276;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2269;
            this.javascript_this_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2270;
            this.javascript_new_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2271;
            this.javascript_parenthesis_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2272;
            this.javascript_identifier_expression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2273;
            this.javascript_literal_expression();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2274;
            this.javascript_method_expression();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2275;
            this.javascript_item_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_this_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_javascript_this_expression;
    return this;
}

Javascript_this_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_this_expressionContext.prototype.constructor = Javascript_this_expressionContext;

Javascript_this_expressionContext.prototype.this_expression = function() {
    return this.getTypedRuleContext(This_expressionContext,0);
};

Javascript_this_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascript_this_expression(this);
	}
};

Javascript_this_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascript_this_expression(this);
	}
};




MParser.Javascript_this_expressionContext = Javascript_this_expressionContext;

MParser.prototype.javascript_this_expression = function() {

    var localctx = new Javascript_this_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, MParser.RULE_javascript_this_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2278;
        this.this_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_new_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_javascript_new_expression;
    return this;
}

Javascript_new_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_new_expressionContext.prototype.constructor = Javascript_new_expressionContext;

Javascript_new_expressionContext.prototype.new_token = function() {
    return this.getTypedRuleContext(New_tokenContext,0);
};

Javascript_new_expressionContext.prototype.javascript_method_expression = function() {
    return this.getTypedRuleContext(Javascript_method_expressionContext,0);
};

Javascript_new_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascript_new_expression(this);
	}
};

Javascript_new_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascript_new_expression(this);
	}
};




MParser.Javascript_new_expressionContext = Javascript_new_expressionContext;

MParser.prototype.javascript_new_expression = function() {

    var localctx = new Javascript_new_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, MParser.RULE_javascript_new_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2280;
        this.new_token();
        this.state = 2281;
        this.javascript_method_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_javascript_selector_expression;
    return this;
}

Javascript_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_selector_expressionContext.prototype.constructor = Javascript_selector_expressionContext;


 
Javascript_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaScriptMemberExpressionContext(parser, ctx) {
	Javascript_selector_expressionContext.call(this, parser);
    this.name = null; // Javascript_identifierContext;
    Javascript_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptMemberExpressionContext.prototype = Object.create(Javascript_selector_expressionContext.prototype);
JavaScriptMemberExpressionContext.prototype.constructor = JavaScriptMemberExpressionContext;

MParser.JavaScriptMemberExpressionContext = JavaScriptMemberExpressionContext;

JavaScriptMemberExpressionContext.prototype.DOT = function() {
    return this.getToken(MParser.DOT, 0);
};

JavaScriptMemberExpressionContext.prototype.javascript_identifier = function() {
    return this.getTypedRuleContext(Javascript_identifierContext,0);
};
JavaScriptMemberExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaScriptMemberExpression(this);
	}
};

JavaScriptMemberExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaScriptMemberExpression(this);
	}
};


function JavaScriptItemExpressionContext(parser, ctx) {
	Javascript_selector_expressionContext.call(this, parser);
    this.exp = null; // Javascript_item_expressionContext;
    Javascript_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptItemExpressionContext.prototype = Object.create(Javascript_selector_expressionContext.prototype);
JavaScriptItemExpressionContext.prototype.constructor = JavaScriptItemExpressionContext;

MParser.JavaScriptItemExpressionContext = JavaScriptItemExpressionContext;

JavaScriptItemExpressionContext.prototype.javascript_item_expression = function() {
    return this.getTypedRuleContext(Javascript_item_expressionContext,0);
};
JavaScriptItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaScriptItemExpression(this);
	}
};

JavaScriptItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaScriptItemExpression(this);
	}
};


function JavaScriptMethodExpressionContext(parser, ctx) {
	Javascript_selector_expressionContext.call(this, parser);
    this.method = null; // Javascript_method_expressionContext;
    Javascript_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptMethodExpressionContext.prototype = Object.create(Javascript_selector_expressionContext.prototype);
JavaScriptMethodExpressionContext.prototype.constructor = JavaScriptMethodExpressionContext;

MParser.JavaScriptMethodExpressionContext = JavaScriptMethodExpressionContext;

JavaScriptMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(MParser.DOT, 0);
};

JavaScriptMethodExpressionContext.prototype.javascript_method_expression = function() {
    return this.getTypedRuleContext(Javascript_method_expressionContext,0);
};
JavaScriptMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaScriptMethodExpression(this);
	}
};

JavaScriptMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaScriptMethodExpression(this);
	}
};



MParser.Javascript_selector_expressionContext = Javascript_selector_expressionContext;

MParser.prototype.javascript_selector_expression = function() {

    var localctx = new Javascript_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, MParser.RULE_javascript_selector_expression);
    try {
        this.state = 2288;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
        switch(la_) {
        case 1:
            localctx = new JavaScriptMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2283;
            this.match(MParser.DOT);
            this.state = 2284;
            localctx.method = this.javascript_method_expression();
            break;

        case 2:
            localctx = new JavaScriptMemberExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2285;
            this.match(MParser.DOT);
            this.state = 2286;
            localctx.name = this.javascript_identifier();
            break;

        case 3:
            localctx = new JavaScriptItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2287;
            localctx.exp = this.javascript_item_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_javascript_method_expression;
    this.name = null; // Javascript_identifierContext
    this.args = null; // Javascript_argumentsContext
    return this;
}

Javascript_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_method_expressionContext.prototype.constructor = Javascript_method_expressionContext;

Javascript_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Javascript_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Javascript_method_expressionContext.prototype.javascript_identifier = function() {
    return this.getTypedRuleContext(Javascript_identifierContext,0);
};

Javascript_method_expressionContext.prototype.javascript_arguments = function() {
    return this.getTypedRuleContext(Javascript_argumentsContext,0);
};

Javascript_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascript_method_expression(this);
	}
};

Javascript_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascript_method_expression(this);
	}
};




MParser.Javascript_method_expressionContext = Javascript_method_expressionContext;

MParser.prototype.javascript_method_expression = function() {

    var localctx = new Javascript_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, MParser.RULE_javascript_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2290;
        localctx.name = this.javascript_identifier();
        this.state = 2291;
        this.match(MParser.LPAR);
        this.state = 2293;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.LPAR || _la===MParser.LBRAK || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.HTML - 52)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (MParser.NONE - 125)) | (1 << (MParser.NULL - 125)) | (1 << (MParser.READ - 125)) | (1 << (MParser.SELF - 125)) | (1 << (MParser.TEST - 125)) | (1 << (MParser.THIS - 125)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (MParser.WRITE - 163)) | (1 << (MParser.BOOLEAN_LITERAL - 163)) | (1 << (MParser.CHAR_LITERAL - 163)) | (1 << (MParser.SYMBOL_IDENTIFIER - 163)) | (1 << (MParser.TYPE_IDENTIFIER - 163)) | (1 << (MParser.VARIABLE_IDENTIFIER - 163)) | (1 << (MParser.DOLLAR_IDENTIFIER - 163)) | (1 << (MParser.TEXT_LITERAL - 163)) | (1 << (MParser.INTEGER_LITERAL - 163)) | (1 << (MParser.DECIMAL_LITERAL - 163)))) !== 0)) {
            this.state = 2292;
            localctx.args = this.javascript_arguments(0);
        }

        this.state = 2295;
        this.match(MParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_javascript_arguments;
    return this;
}

Javascript_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_argumentsContext.prototype.constructor = Javascript_argumentsContext;


 
Javascript_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavascriptArgumentListContext(parser, ctx) {
	Javascript_argumentsContext.call(this, parser);
    this.item = null; // Javascript_expressionContext;
    Javascript_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptArgumentListContext.prototype = Object.create(Javascript_argumentsContext.prototype);
JavascriptArgumentListContext.prototype.constructor = JavascriptArgumentListContext;

MParser.JavascriptArgumentListContext = JavascriptArgumentListContext;

JavascriptArgumentListContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascriptArgumentList(this);
	}
};

JavascriptArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascriptArgumentList(this);
	}
};


function JavascriptArgumentListItemContext(parser, ctx) {
	Javascript_argumentsContext.call(this, parser);
    this.items = null; // Javascript_argumentsContext;
    this.item = null; // Javascript_expressionContext;
    Javascript_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptArgumentListItemContext.prototype = Object.create(Javascript_argumentsContext.prototype);
JavascriptArgumentListItemContext.prototype.constructor = JavascriptArgumentListItemContext;

MParser.JavascriptArgumentListItemContext = JavascriptArgumentListItemContext;

JavascriptArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(MParser.COMMA, 0);
};

JavascriptArgumentListItemContext.prototype.javascript_arguments = function() {
    return this.getTypedRuleContext(Javascript_argumentsContext,0);
};

JavascriptArgumentListItemContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascriptArgumentListItem(this);
	}
};

JavascriptArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascriptArgumentListItem(this);
	}
};



MParser.prototype.javascript_arguments = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Javascript_argumentsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 366;
    this.enterRecursionRule(localctx, 366, MParser.RULE_javascript_arguments, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavascriptArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2298;
        localctx.item = this.javascript_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2305;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,191,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavascriptArgumentListItemContext(this, new Javascript_argumentsContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_javascript_arguments);
                this.state = 2300;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2301;
                this.match(MParser.COMMA);
                this.state = 2302;
                localctx.item = this.javascript_expression(0); 
            }
            this.state = 2307;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,191,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Javascript_item_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_javascript_item_expression;
    this.exp = null; // Javascript_expressionContext
    return this;
}

Javascript_item_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_item_expressionContext.prototype.constructor = Javascript_item_expressionContext;

Javascript_item_expressionContext.prototype.LBRAK = function() {
    return this.getToken(MParser.LBRAK, 0);
};

Javascript_item_expressionContext.prototype.RBRAK = function() {
    return this.getToken(MParser.RBRAK, 0);
};

Javascript_item_expressionContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};

Javascript_item_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascript_item_expression(this);
	}
};

Javascript_item_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascript_item_expression(this);
	}
};




MParser.Javascript_item_expressionContext = Javascript_item_expressionContext;

MParser.prototype.javascript_item_expression = function() {

    var localctx = new Javascript_item_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, MParser.RULE_javascript_item_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2308;
        this.match(MParser.LBRAK);
        this.state = 2309;
        localctx.exp = this.javascript_expression(0);
        this.state = 2310;
        this.match(MParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_javascript_parenthesis_expression;
    this.exp = null; // Javascript_expressionContext
    return this;
}

Javascript_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_parenthesis_expressionContext.prototype.constructor = Javascript_parenthesis_expressionContext;

Javascript_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Javascript_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Javascript_parenthesis_expressionContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};

Javascript_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascript_parenthesis_expression(this);
	}
};

Javascript_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascript_parenthesis_expression(this);
	}
};




MParser.Javascript_parenthesis_expressionContext = Javascript_parenthesis_expressionContext;

MParser.prototype.javascript_parenthesis_expression = function() {

    var localctx = new Javascript_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, MParser.RULE_javascript_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2312;
        this.match(MParser.LPAR);
        this.state = 2313;
        localctx.exp = this.javascript_expression(0);
        this.state = 2314;
        this.match(MParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_javascript_identifier_expression;
    this.name = null; // Javascript_identifierContext
    return this;
}

Javascript_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_identifier_expressionContext.prototype.constructor = Javascript_identifier_expressionContext;

Javascript_identifier_expressionContext.prototype.javascript_identifier = function() {
    return this.getTypedRuleContext(Javascript_identifierContext,0);
};

Javascript_identifier_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascript_identifier_expression(this);
	}
};

Javascript_identifier_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascript_identifier_expression(this);
	}
};




MParser.Javascript_identifier_expressionContext = Javascript_identifier_expressionContext;

MParser.prototype.javascript_identifier_expression = function() {

    var localctx = new Javascript_identifier_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, MParser.RULE_javascript_identifier_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2316;
        localctx.name = this.javascript_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_javascript_literal_expression;
    return this;
}

Javascript_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_literal_expressionContext.prototype.constructor = Javascript_literal_expressionContext;


 
Javascript_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavascriptIntegerLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptIntegerLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptIntegerLiteralContext.prototype.constructor = JavascriptIntegerLiteralContext;

MParser.JavascriptIntegerLiteralContext = JavascriptIntegerLiteralContext;

JavascriptIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(MParser.INTEGER_LITERAL, 0);
};
JavascriptIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascriptIntegerLiteral(this);
	}
};

JavascriptIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascriptIntegerLiteral(this);
	}
};


function JavascriptBooleanLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptBooleanLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptBooleanLiteralContext.prototype.constructor = JavascriptBooleanLiteralContext;

MParser.JavascriptBooleanLiteralContext = JavascriptBooleanLiteralContext;

JavascriptBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(MParser.BOOLEAN_LITERAL, 0);
};
JavascriptBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascriptBooleanLiteral(this);
	}
};

JavascriptBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascriptBooleanLiteral(this);
	}
};


function JavascriptCharacterLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptCharacterLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptCharacterLiteralContext.prototype.constructor = JavascriptCharacterLiteralContext;

MParser.JavascriptCharacterLiteralContext = JavascriptCharacterLiteralContext;

JavascriptCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(MParser.CHAR_LITERAL, 0);
};
JavascriptCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascriptCharacterLiteral(this);
	}
};

JavascriptCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascriptCharacterLiteral(this);
	}
};


function JavascriptTextLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptTextLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptTextLiteralContext.prototype.constructor = JavascriptTextLiteralContext;

MParser.JavascriptTextLiteralContext = JavascriptTextLiteralContext;

JavascriptTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(MParser.TEXT_LITERAL, 0);
};
JavascriptTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascriptTextLiteral(this);
	}
};

JavascriptTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascriptTextLiteral(this);
	}
};


function JavascriptDecimalLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptDecimalLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptDecimalLiteralContext.prototype.constructor = JavascriptDecimalLiteralContext;

MParser.JavascriptDecimalLiteralContext = JavascriptDecimalLiteralContext;

JavascriptDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(MParser.DECIMAL_LITERAL, 0);
};
JavascriptDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascriptDecimalLiteral(this);
	}
};

JavascriptDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascriptDecimalLiteral(this);
	}
};



MParser.Javascript_literal_expressionContext = Javascript_literal_expressionContext;

MParser.prototype.javascript_literal_expression = function() {

    var localctx = new Javascript_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, MParser.RULE_javascript_literal_expression);
    try {
        this.state = 2323;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.INTEGER_LITERAL:
            localctx = new JavascriptIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2318;
            localctx.t = this.match(MParser.INTEGER_LITERAL);
            break;
        case MParser.DECIMAL_LITERAL:
            localctx = new JavascriptDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2319;
            localctx.t = this.match(MParser.DECIMAL_LITERAL);
            break;
        case MParser.TEXT_LITERAL:
            localctx = new JavascriptTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2320;
            localctx.t = this.match(MParser.TEXT_LITERAL);
            break;
        case MParser.BOOLEAN_LITERAL:
            localctx = new JavascriptBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2321;
            localctx.t = this.match(MParser.BOOLEAN_LITERAL);
            break;
        case MParser.CHAR_LITERAL:
            localctx = new JavascriptCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2322;
            localctx.t = this.match(MParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_javascript_identifier;
    return this;
}

Javascript_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_identifierContext.prototype.constructor = Javascript_identifierContext;

Javascript_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
};

Javascript_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(MParser.SYMBOL_IDENTIFIER, 0);
};

Javascript_identifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(MParser.DOLLAR_IDENTIFIER, 0);
};

Javascript_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(MParser.TYPE_IDENTIFIER, 0);
};

Javascript_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(MParser.BOOLEAN, 0);
};

Javascript_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(MParser.CHARACTER, 0);
};

Javascript_identifierContext.prototype.TEXT = function() {
    return this.getToken(MParser.TEXT, 0);
};

Javascript_identifierContext.prototype.INTEGER = function() {
    return this.getToken(MParser.INTEGER, 0);
};

Javascript_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(MParser.DECIMAL, 0);
};

Javascript_identifierContext.prototype.DATE = function() {
    return this.getToken(MParser.DATE, 0);
};

Javascript_identifierContext.prototype.TIME = function() {
    return this.getToken(MParser.TIME, 0);
};

Javascript_identifierContext.prototype.DATETIME = function() {
    return this.getToken(MParser.DATETIME, 0);
};

Javascript_identifierContext.prototype.PERIOD = function() {
    return this.getToken(MParser.PERIOD, 0);
};

Javascript_identifierContext.prototype.VERSION = function() {
    return this.getToken(MParser.VERSION, 0);
};

Javascript_identifierContext.prototype.UUID = function() {
    return this.getToken(MParser.UUID, 0);
};

Javascript_identifierContext.prototype.HTML = function() {
    return this.getToken(MParser.HTML, 0);
};

Javascript_identifierContext.prototype.READ = function() {
    return this.getToken(MParser.READ, 0);
};

Javascript_identifierContext.prototype.WRITE = function() {
    return this.getToken(MParser.WRITE, 0);
};

Javascript_identifierContext.prototype.TEST = function() {
    return this.getToken(MParser.TEST, 0);
};

Javascript_identifierContext.prototype.SELF = function() {
    return this.getToken(MParser.SELF, 0);
};

Javascript_identifierContext.prototype.NONE = function() {
    return this.getToken(MParser.NONE, 0);
};

Javascript_identifierContext.prototype.NULL = function() {
    return this.getToken(MParser.NULL, 0);
};

Javascript_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavascript_identifier(this);
	}
};

Javascript_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavascript_identifier(this);
	}
};




MParser.Javascript_identifierContext = Javascript_identifierContext;

MParser.prototype.javascript_identifier = function() {

    var localctx = new Javascript_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, MParser.RULE_javascript_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2325;
        _la = this._input.LA(1);
        if(!(((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.HTML - 52)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (MParser.NONE - 125)) | (1 << (MParser.NULL - 125)) | (1 << (MParser.READ - 125)) | (1 << (MParser.SELF - 125)) | (1 << (MParser.TEST - 125)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (MParser.WRITE - 163)) | (1 << (MParser.SYMBOL_IDENTIFIER - 163)) | (1 << (MParser.TYPE_IDENTIFIER - 163)) | (1 << (MParser.VARIABLE_IDENTIFIER - 163)) | (1 << (MParser.DOLLAR_IDENTIFIER - 163)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_python_statement;
    return this;
}

Python_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_statementContext.prototype.constructor = Python_statementContext;


 
Python_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonStatementContext(parser, ctx) {
	Python_statementContext.call(this, parser);
    this.exp = null; // Python_expressionContext;
    Python_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonStatementContext.prototype = Object.create(Python_statementContext.prototype);
PythonStatementContext.prototype.constructor = PythonStatementContext;

MParser.PythonStatementContext = PythonStatementContext;

PythonStatementContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonStatement(this);
	}
};

PythonStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonStatement(this);
	}
};


function PythonReturnStatementContext(parser, ctx) {
	Python_statementContext.call(this, parser);
    this.exp = null; // Python_expressionContext;
    Python_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonReturnStatementContext.prototype = Object.create(Python_statementContext.prototype);
PythonReturnStatementContext.prototype.constructor = PythonReturnStatementContext;

MParser.PythonReturnStatementContext = PythonReturnStatementContext;

PythonReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(MParser.RETURN, 0);
};

PythonReturnStatementContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonReturnStatement(this);
	}
};

PythonReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonReturnStatement(this);
	}
};



MParser.Python_statementContext = Python_statementContext;

MParser.prototype.python_statement = function() {

    var localctx = new Python_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, MParser.RULE_python_statement);
    try {
        this.state = 2330;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.RETURN:
            localctx = new PythonReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2327;
            this.match(MParser.RETURN);
            this.state = 2328;
            localctx.exp = this.python_expression(0);
            break;
        case MParser.LPAR:
        case MParser.BOOLEAN:
        case MParser.CHARACTER:
        case MParser.TEXT:
        case MParser.INTEGER:
        case MParser.DECIMAL:
        case MParser.DATE:
        case MParser.TIME:
        case MParser.DATETIME:
        case MParser.PERIOD:
        case MParser.VERSION:
        case MParser.UUID:
        case MParser.HTML:
        case MParser.NONE:
        case MParser.NULL:
        case MParser.READ:
        case MParser.SELF:
        case MParser.TEST:
        case MParser.THIS:
        case MParser.WRITE:
        case MParser.BOOLEAN_LITERAL:
        case MParser.CHAR_LITERAL:
        case MParser.SYMBOL_IDENTIFIER:
        case MParser.TYPE_IDENTIFIER:
        case MParser.VARIABLE_IDENTIFIER:
        case MParser.DOLLAR_IDENTIFIER:
        case MParser.TEXT_LITERAL:
        case MParser.INTEGER_LITERAL:
        case MParser.DECIMAL_LITERAL:
            localctx = new PythonStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2329;
            localctx.exp = this.python_expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_python_expression;
    return this;
}

Python_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_expressionContext.prototype.constructor = Python_expressionContext;


 
Python_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonSelectorExpressionContext(parser, ctx) {
	Python_expressionContext.call(this, parser);
    this.parent = null; // Python_expressionContext;
    this.child = null; // Python_selector_expressionContext;
    Python_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonSelectorExpressionContext.prototype = Object.create(Python_expressionContext.prototype);
PythonSelectorExpressionContext.prototype.constructor = PythonSelectorExpressionContext;

MParser.PythonSelectorExpressionContext = PythonSelectorExpressionContext;

PythonSelectorExpressionContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};

PythonSelectorExpressionContext.prototype.python_selector_expression = function() {
    return this.getTypedRuleContext(Python_selector_expressionContext,0);
};
PythonSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonSelectorExpression(this);
	}
};

PythonSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonSelectorExpression(this);
	}
};


function PythonPrimaryExpressionContext(parser, ctx) {
	Python_expressionContext.call(this, parser);
    this.exp = null; // Python_primary_expressionContext;
    Python_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonPrimaryExpressionContext.prototype = Object.create(Python_expressionContext.prototype);
PythonPrimaryExpressionContext.prototype.constructor = PythonPrimaryExpressionContext;

MParser.PythonPrimaryExpressionContext = PythonPrimaryExpressionContext;

PythonPrimaryExpressionContext.prototype.python_primary_expression = function() {
    return this.getTypedRuleContext(Python_primary_expressionContext,0);
};
PythonPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonPrimaryExpression(this);
	}
};

PythonPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonPrimaryExpression(this);
	}
};



MParser.prototype.python_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 380;
    this.enterRecursionRule(localctx, 380, MParser.RULE_python_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new PythonPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2333;
        localctx.exp = this.python_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2339;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,194,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonSelectorExpressionContext(this, new Python_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_python_expression);
                this.state = 2335;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2336;
                localctx.child = this.python_selector_expression(); 
            }
            this.state = 2341;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,194,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_python_primary_expression;
    return this;
}

Python_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_primary_expressionContext.prototype.constructor = Python_primary_expressionContext;


 
Python_primary_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonParenthesisExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_parenthesis_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonParenthesisExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonParenthesisExpressionContext.prototype.constructor = PythonParenthesisExpressionContext;

MParser.PythonParenthesisExpressionContext = PythonParenthesisExpressionContext;

PythonParenthesisExpressionContext.prototype.python_parenthesis_expression = function() {
    return this.getTypedRuleContext(Python_parenthesis_expressionContext,0);
};
PythonParenthesisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonParenthesisExpression(this);
	}
};

PythonParenthesisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonParenthesisExpression(this);
	}
};


function PythonIdentifierExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_identifier_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonIdentifierExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonIdentifierExpressionContext.prototype.constructor = PythonIdentifierExpressionContext;

MParser.PythonIdentifierExpressionContext = PythonIdentifierExpressionContext;

PythonIdentifierExpressionContext.prototype.python_identifier_expression = function() {
    return this.getTypedRuleContext(Python_identifier_expressionContext,0);
};
PythonIdentifierExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonIdentifierExpression(this);
	}
};

PythonIdentifierExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonIdentifierExpression(this);
	}
};


function PythonSelfExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_self_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonSelfExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonSelfExpressionContext.prototype.constructor = PythonSelfExpressionContext;

MParser.PythonSelfExpressionContext = PythonSelfExpressionContext;

PythonSelfExpressionContext.prototype.python_self_expression = function() {
    return this.getTypedRuleContext(Python_self_expressionContext,0);
};
PythonSelfExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonSelfExpression(this);
	}
};

PythonSelfExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonSelfExpression(this);
	}
};


function PythonLiteralExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_literal_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonLiteralExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonLiteralExpressionContext.prototype.constructor = PythonLiteralExpressionContext;

MParser.PythonLiteralExpressionContext = PythonLiteralExpressionContext;

PythonLiteralExpressionContext.prototype.python_literal_expression = function() {
    return this.getTypedRuleContext(Python_literal_expressionContext,0);
};
PythonLiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonLiteralExpression(this);
	}
};

PythonLiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonLiteralExpression(this);
	}
};


function PythonGlobalMethodExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_method_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonGlobalMethodExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonGlobalMethodExpressionContext.prototype.constructor = PythonGlobalMethodExpressionContext;

MParser.PythonGlobalMethodExpressionContext = PythonGlobalMethodExpressionContext;

PythonGlobalMethodExpressionContext.prototype.python_method_expression = function() {
    return this.getTypedRuleContext(Python_method_expressionContext,0);
};
PythonGlobalMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonGlobalMethodExpression(this);
	}
};

PythonGlobalMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonGlobalMethodExpression(this);
	}
};



MParser.Python_primary_expressionContext = Python_primary_expressionContext;

MParser.prototype.python_primary_expression = function() {

    var localctx = new Python_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, MParser.RULE_python_primary_expression);
    try {
        this.state = 2347;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PythonSelfExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2342;
            localctx.exp = this.python_self_expression();
            break;

        case 2:
            localctx = new PythonParenthesisExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2343;
            localctx.exp = this.python_parenthesis_expression();
            break;

        case 3:
            localctx = new PythonIdentifierExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2344;
            localctx.exp = this.python_identifier_expression(0);
            break;

        case 4:
            localctx = new PythonLiteralExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2345;
            localctx.exp = this.python_literal_expression();
            break;

        case 5:
            localctx = new PythonGlobalMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2346;
            localctx.exp = this.python_method_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_self_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_python_self_expression;
    return this;
}

Python_self_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_self_expressionContext.prototype.constructor = Python_self_expressionContext;

Python_self_expressionContext.prototype.this_expression = function() {
    return this.getTypedRuleContext(This_expressionContext,0);
};

Python_self_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPython_self_expression(this);
	}
};

Python_self_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPython_self_expression(this);
	}
};




MParser.Python_self_expressionContext = Python_self_expressionContext;

MParser.prototype.python_self_expression = function() {

    var localctx = new Python_self_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, MParser.RULE_python_self_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2349;
        this.this_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_python_selector_expression;
    return this;
}

Python_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_selector_expressionContext.prototype.constructor = Python_selector_expressionContext;


 
Python_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonMethodExpressionContext(parser, ctx) {
	Python_selector_expressionContext.call(this, parser);
    this.exp = null; // Python_method_expressionContext;
    Python_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonMethodExpressionContext.prototype = Object.create(Python_selector_expressionContext.prototype);
PythonMethodExpressionContext.prototype.constructor = PythonMethodExpressionContext;

MParser.PythonMethodExpressionContext = PythonMethodExpressionContext;

PythonMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(MParser.DOT, 0);
};

PythonMethodExpressionContext.prototype.python_method_expression = function() {
    return this.getTypedRuleContext(Python_method_expressionContext,0);
};
PythonMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonMethodExpression(this);
	}
};

PythonMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonMethodExpression(this);
	}
};


function PythonItemExpressionContext(parser, ctx) {
	Python_selector_expressionContext.call(this, parser);
    this.exp = null; // Python_expressionContext;
    Python_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonItemExpressionContext.prototype = Object.create(Python_selector_expressionContext.prototype);
PythonItemExpressionContext.prototype.constructor = PythonItemExpressionContext;

MParser.PythonItemExpressionContext = PythonItemExpressionContext;

PythonItemExpressionContext.prototype.LBRAK = function() {
    return this.getToken(MParser.LBRAK, 0);
};

PythonItemExpressionContext.prototype.RBRAK = function() {
    return this.getToken(MParser.RBRAK, 0);
};

PythonItemExpressionContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonItemExpression(this);
	}
};

PythonItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonItemExpression(this);
	}
};



MParser.Python_selector_expressionContext = Python_selector_expressionContext;

MParser.prototype.python_selector_expression = function() {

    var localctx = new Python_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, MParser.RULE_python_selector_expression);
    try {
        this.state = 2357;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.DOT:
            localctx = new PythonMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2351;
            this.match(MParser.DOT);
            this.state = 2352;
            localctx.exp = this.python_method_expression();
            break;
        case MParser.LBRAK:
            localctx = new PythonItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2353;
            this.match(MParser.LBRAK);
            this.state = 2354;
            localctx.exp = this.python_expression(0);
            this.state = 2355;
            this.match(MParser.RBRAK);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_python_method_expression;
    this.name = null; // Python_identifierContext
    this.args = null; // Python_argument_listContext
    return this;
}

Python_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_method_expressionContext.prototype.constructor = Python_method_expressionContext;

Python_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Python_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Python_method_expressionContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};

Python_method_expressionContext.prototype.python_argument_list = function() {
    return this.getTypedRuleContext(Python_argument_listContext,0);
};

Python_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPython_method_expression(this);
	}
};

Python_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPython_method_expression(this);
	}
};




MParser.Python_method_expressionContext = Python_method_expressionContext;

MParser.prototype.python_method_expression = function() {

    var localctx = new Python_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, MParser.RULE_python_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2359;
        localctx.name = this.python_identifier();
        this.state = 2360;
        this.match(MParser.LPAR);
        this.state = 2362;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.LPAR || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.HTML - 52)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (MParser.NONE - 125)) | (1 << (MParser.NULL - 125)) | (1 << (MParser.READ - 125)) | (1 << (MParser.SELF - 125)) | (1 << (MParser.TEST - 125)) | (1 << (MParser.THIS - 125)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (MParser.WRITE - 163)) | (1 << (MParser.BOOLEAN_LITERAL - 163)) | (1 << (MParser.CHAR_LITERAL - 163)) | (1 << (MParser.SYMBOL_IDENTIFIER - 163)) | (1 << (MParser.TYPE_IDENTIFIER - 163)) | (1 << (MParser.VARIABLE_IDENTIFIER - 163)) | (1 << (MParser.DOLLAR_IDENTIFIER - 163)) | (1 << (MParser.TEXT_LITERAL - 163)) | (1 << (MParser.INTEGER_LITERAL - 163)) | (1 << (MParser.DECIMAL_LITERAL - 163)))) !== 0)) {
            this.state = 2361;
            localctx.args = this.python_argument_list();
        }

        this.state = 2364;
        this.match(MParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_python_argument_list;
    return this;
}

Python_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_argument_listContext.prototype.constructor = Python_argument_listContext;


 
Python_argument_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonOrdinalOnlyArgumentListContext(parser, ctx) {
	Python_argument_listContext.call(this, parser);
    this.ordinal = null; // Python_ordinal_argument_listContext;
    Python_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonOrdinalOnlyArgumentListContext.prototype = Object.create(Python_argument_listContext.prototype);
PythonOrdinalOnlyArgumentListContext.prototype.constructor = PythonOrdinalOnlyArgumentListContext;

MParser.PythonOrdinalOnlyArgumentListContext = PythonOrdinalOnlyArgumentListContext;

PythonOrdinalOnlyArgumentListContext.prototype.python_ordinal_argument_list = function() {
    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
};
PythonOrdinalOnlyArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonOrdinalOnlyArgumentList(this);
	}
};

PythonOrdinalOnlyArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonOrdinalOnlyArgumentList(this);
	}
};


function PythonNamedOnlyArgumentListContext(parser, ctx) {
	Python_argument_listContext.call(this, parser);
    this.named = null; // Python_named_argument_listContext;
    Python_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonNamedOnlyArgumentListContext.prototype = Object.create(Python_argument_listContext.prototype);
PythonNamedOnlyArgumentListContext.prototype.constructor = PythonNamedOnlyArgumentListContext;

MParser.PythonNamedOnlyArgumentListContext = PythonNamedOnlyArgumentListContext;

PythonNamedOnlyArgumentListContext.prototype.python_named_argument_list = function() {
    return this.getTypedRuleContext(Python_named_argument_listContext,0);
};
PythonNamedOnlyArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonNamedOnlyArgumentList(this);
	}
};

PythonNamedOnlyArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonNamedOnlyArgumentList(this);
	}
};


function PythonArgumentListContext(parser, ctx) {
	Python_argument_listContext.call(this, parser);
    this.ordinal = null; // Python_ordinal_argument_listContext;
    this.named = null; // Python_named_argument_listContext;
    Python_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonArgumentListContext.prototype = Object.create(Python_argument_listContext.prototype);
PythonArgumentListContext.prototype.constructor = PythonArgumentListContext;

MParser.PythonArgumentListContext = PythonArgumentListContext;

PythonArgumentListContext.prototype.COMMA = function() {
    return this.getToken(MParser.COMMA, 0);
};

PythonArgumentListContext.prototype.python_ordinal_argument_list = function() {
    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
};

PythonArgumentListContext.prototype.python_named_argument_list = function() {
    return this.getTypedRuleContext(Python_named_argument_listContext,0);
};
PythonArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonArgumentList(this);
	}
};

PythonArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonArgumentList(this);
	}
};



MParser.Python_argument_listContext = Python_argument_listContext;

MParser.prototype.python_argument_list = function() {

    var localctx = new Python_argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, MParser.RULE_python_argument_list);
    try {
        this.state = 2372;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PythonOrdinalOnlyArgumentListContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2366;
            localctx.ordinal = this.python_ordinal_argument_list(0);
            break;

        case 2:
            localctx = new PythonNamedOnlyArgumentListContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2367;
            localctx.named = this.python_named_argument_list(0);
            break;

        case 3:
            localctx = new PythonArgumentListContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2368;
            localctx.ordinal = this.python_ordinal_argument_list(0);
            this.state = 2369;
            this.match(MParser.COMMA);
            this.state = 2370;
            localctx.named = this.python_named_argument_list(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_ordinal_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_python_ordinal_argument_list;
    return this;
}

Python_ordinal_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_ordinal_argument_listContext.prototype.constructor = Python_ordinal_argument_listContext;


 
Python_ordinal_argument_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonOrdinalArgumentListContext(parser, ctx) {
	Python_ordinal_argument_listContext.call(this, parser);
    this.item = null; // Python_expressionContext;
    Python_ordinal_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonOrdinalArgumentListContext.prototype = Object.create(Python_ordinal_argument_listContext.prototype);
PythonOrdinalArgumentListContext.prototype.constructor = PythonOrdinalArgumentListContext;

MParser.PythonOrdinalArgumentListContext = PythonOrdinalArgumentListContext;

PythonOrdinalArgumentListContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonOrdinalArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonOrdinalArgumentList(this);
	}
};

PythonOrdinalArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonOrdinalArgumentList(this);
	}
};


function PythonOrdinalArgumentListItemContext(parser, ctx) {
	Python_ordinal_argument_listContext.call(this, parser);
    this.items = null; // Python_ordinal_argument_listContext;
    this.item = null; // Python_expressionContext;
    Python_ordinal_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonOrdinalArgumentListItemContext.prototype = Object.create(Python_ordinal_argument_listContext.prototype);
PythonOrdinalArgumentListItemContext.prototype.constructor = PythonOrdinalArgumentListItemContext;

MParser.PythonOrdinalArgumentListItemContext = PythonOrdinalArgumentListItemContext;

PythonOrdinalArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(MParser.COMMA, 0);
};

PythonOrdinalArgumentListItemContext.prototype.python_ordinal_argument_list = function() {
    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
};

PythonOrdinalArgumentListItemContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonOrdinalArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonOrdinalArgumentListItem(this);
	}
};

PythonOrdinalArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonOrdinalArgumentListItem(this);
	}
};



MParser.prototype.python_ordinal_argument_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_ordinal_argument_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 392;
    this.enterRecursionRule(localctx, 392, MParser.RULE_python_ordinal_argument_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new PythonOrdinalArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2375;
        localctx.item = this.python_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2382;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,199,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonOrdinalArgumentListItemContext(this, new Python_ordinal_argument_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_python_ordinal_argument_list);
                this.state = 2377;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2378;
                this.match(MParser.COMMA);
                this.state = 2379;
                localctx.item = this.python_expression(0); 
            }
            this.state = 2384;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,199,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_named_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_python_named_argument_list;
    return this;
}

Python_named_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_named_argument_listContext.prototype.constructor = Python_named_argument_listContext;


 
Python_named_argument_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonNamedArgumentListContext(parser, ctx) {
	Python_named_argument_listContext.call(this, parser);
    this.name = null; // Python_identifierContext;
    this.exp = null; // Python_expressionContext;
    Python_named_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonNamedArgumentListContext.prototype = Object.create(Python_named_argument_listContext.prototype);
PythonNamedArgumentListContext.prototype.constructor = PythonNamedArgumentListContext;

MParser.PythonNamedArgumentListContext = PythonNamedArgumentListContext;

PythonNamedArgumentListContext.prototype.EQ = function() {
    return this.getToken(MParser.EQ, 0);
};

PythonNamedArgumentListContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};

PythonNamedArgumentListContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonNamedArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonNamedArgumentList(this);
	}
};

PythonNamedArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonNamedArgumentList(this);
	}
};


function PythonNamedArgumentListItemContext(parser, ctx) {
	Python_named_argument_listContext.call(this, parser);
    this.items = null; // Python_named_argument_listContext;
    this.name = null; // Python_identifierContext;
    this.exp = null; // Python_expressionContext;
    Python_named_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonNamedArgumentListItemContext.prototype = Object.create(Python_named_argument_listContext.prototype);
PythonNamedArgumentListItemContext.prototype.constructor = PythonNamedArgumentListItemContext;

MParser.PythonNamedArgumentListItemContext = PythonNamedArgumentListItemContext;

PythonNamedArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(MParser.COMMA, 0);
};

PythonNamedArgumentListItemContext.prototype.EQ = function() {
    return this.getToken(MParser.EQ, 0);
};

PythonNamedArgumentListItemContext.prototype.python_named_argument_list = function() {
    return this.getTypedRuleContext(Python_named_argument_listContext,0);
};

PythonNamedArgumentListItemContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};

PythonNamedArgumentListItemContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonNamedArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonNamedArgumentListItem(this);
	}
};

PythonNamedArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonNamedArgumentListItem(this);
	}
};



MParser.prototype.python_named_argument_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_named_argument_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 394;
    this.enterRecursionRule(localctx, 394, MParser.RULE_python_named_argument_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new PythonNamedArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2386;
        localctx.name = this.python_identifier();
        this.state = 2387;
        this.match(MParser.EQ);
        this.state = 2388;
        localctx.exp = this.python_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2398;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,200,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonNamedArgumentListItemContext(this, new Python_named_argument_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_python_named_argument_list);
                this.state = 2390;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2391;
                this.match(MParser.COMMA);
                this.state = 2392;
                localctx.name = this.python_identifier();
                this.state = 2393;
                this.match(MParser.EQ);
                this.state = 2394;
                localctx.exp = this.python_expression(0); 
            }
            this.state = 2400;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,200,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_python_parenthesis_expression;
    this.exp = null; // Python_expressionContext
    return this;
}

Python_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_parenthesis_expressionContext.prototype.constructor = Python_parenthesis_expressionContext;

Python_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Python_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Python_parenthesis_expressionContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};

Python_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPython_parenthesis_expression(this);
	}
};

Python_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPython_parenthesis_expression(this);
	}
};




MParser.Python_parenthesis_expressionContext = Python_parenthesis_expressionContext;

MParser.prototype.python_parenthesis_expression = function() {

    var localctx = new Python_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, MParser.RULE_python_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2401;
        this.match(MParser.LPAR);
        this.state = 2402;
        localctx.exp = this.python_expression(0);
        this.state = 2403;
        this.match(MParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_python_identifier_expression;
    return this;
}

Python_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_identifier_expressionContext.prototype.constructor = Python_identifier_expressionContext;


 
Python_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonChildIdentifierContext(parser, ctx) {
	Python_identifier_expressionContext.call(this, parser);
    this.parent = null; // Python_identifier_expressionContext;
    this.name = null; // Python_identifierContext;
    Python_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonChildIdentifierContext.prototype = Object.create(Python_identifier_expressionContext.prototype);
PythonChildIdentifierContext.prototype.constructor = PythonChildIdentifierContext;

MParser.PythonChildIdentifierContext = PythonChildIdentifierContext;

PythonChildIdentifierContext.prototype.DOT = function() {
    return this.getToken(MParser.DOT, 0);
};

PythonChildIdentifierContext.prototype.python_identifier_expression = function() {
    return this.getTypedRuleContext(Python_identifier_expressionContext,0);
};

PythonChildIdentifierContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};
PythonChildIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonChildIdentifier(this);
	}
};

PythonChildIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonChildIdentifier(this);
	}
};


function PythonPromptoIdentifierContext(parser, ctx) {
	Python_identifier_expressionContext.call(this, parser);
    Python_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonPromptoIdentifierContext.prototype = Object.create(Python_identifier_expressionContext.prototype);
PythonPromptoIdentifierContext.prototype.constructor = PythonPromptoIdentifierContext;

MParser.PythonPromptoIdentifierContext = PythonPromptoIdentifierContext;

PythonPromptoIdentifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(MParser.DOLLAR_IDENTIFIER, 0);
};
PythonPromptoIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonPromptoIdentifier(this);
	}
};

PythonPromptoIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonPromptoIdentifier(this);
	}
};


function PythonIdentifierContext(parser, ctx) {
	Python_identifier_expressionContext.call(this, parser);
    this.name = null; // Python_identifierContext;
    Python_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonIdentifierContext.prototype = Object.create(Python_identifier_expressionContext.prototype);
PythonIdentifierContext.prototype.constructor = PythonIdentifierContext;

MParser.PythonIdentifierContext = PythonIdentifierContext;

PythonIdentifierContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};
PythonIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonIdentifier(this);
	}
};

PythonIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonIdentifier(this);
	}
};



MParser.prototype.python_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 398;
    this.enterRecursionRule(localctx, 398, MParser.RULE_python_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2408;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.DOLLAR_IDENTIFIER:
            localctx = new PythonPromptoIdentifierContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 2406;
            this.match(MParser.DOLLAR_IDENTIFIER);
            break;
        case MParser.BOOLEAN:
        case MParser.CHARACTER:
        case MParser.TEXT:
        case MParser.INTEGER:
        case MParser.DECIMAL:
        case MParser.DATE:
        case MParser.TIME:
        case MParser.DATETIME:
        case MParser.PERIOD:
        case MParser.VERSION:
        case MParser.UUID:
        case MParser.HTML:
        case MParser.NONE:
        case MParser.NULL:
        case MParser.READ:
        case MParser.TEST:
        case MParser.THIS:
        case MParser.WRITE:
        case MParser.SYMBOL_IDENTIFIER:
        case MParser.TYPE_IDENTIFIER:
        case MParser.VARIABLE_IDENTIFIER:
            localctx = new PythonIdentifierContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2407;
            localctx.name = this.python_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2415;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,202,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonChildIdentifierContext(this, new Python_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_python_identifier_expression);
                this.state = 2410;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2411;
                this.match(MParser.DOT);
                this.state = 2412;
                localctx.name = this.python_identifier(); 
            }
            this.state = 2417;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,202,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_python_literal_expression;
    return this;
}

Python_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_literal_expressionContext.prototype.constructor = Python_literal_expressionContext;


 
Python_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonIntegerLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonIntegerLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonIntegerLiteralContext.prototype.constructor = PythonIntegerLiteralContext;

MParser.PythonIntegerLiteralContext = PythonIntegerLiteralContext;

PythonIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(MParser.INTEGER_LITERAL, 0);
};
PythonIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonIntegerLiteral(this);
	}
};

PythonIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonIntegerLiteral(this);
	}
};


function PythonBooleanLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonBooleanLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonBooleanLiteralContext.prototype.constructor = PythonBooleanLiteralContext;

MParser.PythonBooleanLiteralContext = PythonBooleanLiteralContext;

PythonBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(MParser.BOOLEAN_LITERAL, 0);
};
PythonBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonBooleanLiteral(this);
	}
};

PythonBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonBooleanLiteral(this);
	}
};


function PythonCharacterLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonCharacterLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonCharacterLiteralContext.prototype.constructor = PythonCharacterLiteralContext;

MParser.PythonCharacterLiteralContext = PythonCharacterLiteralContext;

PythonCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(MParser.CHAR_LITERAL, 0);
};
PythonCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonCharacterLiteral(this);
	}
};

PythonCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonCharacterLiteral(this);
	}
};


function PythonTextLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonTextLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonTextLiteralContext.prototype.constructor = PythonTextLiteralContext;

MParser.PythonTextLiteralContext = PythonTextLiteralContext;

PythonTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(MParser.TEXT_LITERAL, 0);
};
PythonTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonTextLiteral(this);
	}
};

PythonTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonTextLiteral(this);
	}
};


function PythonDecimalLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonDecimalLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonDecimalLiteralContext.prototype.constructor = PythonDecimalLiteralContext;

MParser.PythonDecimalLiteralContext = PythonDecimalLiteralContext;

PythonDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(MParser.DECIMAL_LITERAL, 0);
};
PythonDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPythonDecimalLiteral(this);
	}
};

PythonDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPythonDecimalLiteral(this);
	}
};



MParser.Python_literal_expressionContext = Python_literal_expressionContext;

MParser.prototype.python_literal_expression = function() {

    var localctx = new Python_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, MParser.RULE_python_literal_expression);
    try {
        this.state = 2423;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.INTEGER_LITERAL:
            localctx = new PythonIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2418;
            localctx.t = this.match(MParser.INTEGER_LITERAL);
            break;
        case MParser.DECIMAL_LITERAL:
            localctx = new PythonDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2419;
            localctx.t = this.match(MParser.DECIMAL_LITERAL);
            break;
        case MParser.TEXT_LITERAL:
            localctx = new PythonTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2420;
            localctx.t = this.match(MParser.TEXT_LITERAL);
            break;
        case MParser.BOOLEAN_LITERAL:
            localctx = new PythonBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2421;
            localctx.t = this.match(MParser.BOOLEAN_LITERAL);
            break;
        case MParser.CHAR_LITERAL:
            localctx = new PythonCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2422;
            localctx.t = this.match(MParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_python_identifier;
    return this;
}

Python_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_identifierContext.prototype.constructor = Python_identifierContext;

Python_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
};

Python_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(MParser.SYMBOL_IDENTIFIER, 0);
};

Python_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(MParser.TYPE_IDENTIFIER, 0);
};

Python_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(MParser.BOOLEAN, 0);
};

Python_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(MParser.CHARACTER, 0);
};

Python_identifierContext.prototype.TEXT = function() {
    return this.getToken(MParser.TEXT, 0);
};

Python_identifierContext.prototype.INTEGER = function() {
    return this.getToken(MParser.INTEGER, 0);
};

Python_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(MParser.DECIMAL, 0);
};

Python_identifierContext.prototype.DATE = function() {
    return this.getToken(MParser.DATE, 0);
};

Python_identifierContext.prototype.TIME = function() {
    return this.getToken(MParser.TIME, 0);
};

Python_identifierContext.prototype.DATETIME = function() {
    return this.getToken(MParser.DATETIME, 0);
};

Python_identifierContext.prototype.PERIOD = function() {
    return this.getToken(MParser.PERIOD, 0);
};

Python_identifierContext.prototype.VERSION = function() {
    return this.getToken(MParser.VERSION, 0);
};

Python_identifierContext.prototype.UUID = function() {
    return this.getToken(MParser.UUID, 0);
};

Python_identifierContext.prototype.HTML = function() {
    return this.getToken(MParser.HTML, 0);
};

Python_identifierContext.prototype.READ = function() {
    return this.getToken(MParser.READ, 0);
};

Python_identifierContext.prototype.WRITE = function() {
    return this.getToken(MParser.WRITE, 0);
};

Python_identifierContext.prototype.TEST = function() {
    return this.getToken(MParser.TEST, 0);
};

Python_identifierContext.prototype.THIS = function() {
    return this.getToken(MParser.THIS, 0);
};

Python_identifierContext.prototype.NONE = function() {
    return this.getToken(MParser.NONE, 0);
};

Python_identifierContext.prototype.NULL = function() {
    return this.getToken(MParser.NULL, 0);
};

Python_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterPython_identifier(this);
	}
};

Python_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitPython_identifier(this);
	}
};




MParser.Python_identifierContext = Python_identifierContext;

MParser.prototype.python_identifier = function() {

    var localctx = new Python_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, MParser.RULE_python_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2425;
        _la = this._input.LA(1);
        if(!(((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.HTML - 52)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (MParser.NONE - 125)) | (1 << (MParser.NULL - 125)) | (1 << (MParser.READ - 125)) | (1 << (MParser.TEST - 125)) | (1 << (MParser.THIS - 125)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (MParser.WRITE - 163)) | (1 << (MParser.SYMBOL_IDENTIFIER - 163)) | (1 << (MParser.TYPE_IDENTIFIER - 163)) | (1 << (MParser.VARIABLE_IDENTIFIER - 163)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_java_statement;
    return this;
}

Java_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_statementContext.prototype.constructor = Java_statementContext;


 
Java_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaReturnStatementContext(parser, ctx) {
	Java_statementContext.call(this, parser);
    this.exp = null; // Java_expressionContext;
    Java_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaReturnStatementContext.prototype = Object.create(Java_statementContext.prototype);
JavaReturnStatementContext.prototype.constructor = JavaReturnStatementContext;

MParser.JavaReturnStatementContext = JavaReturnStatementContext;

JavaReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(MParser.RETURN, 0);
};

JavaReturnStatementContext.prototype.SEMI = function() {
    return this.getToken(MParser.SEMI, 0);
};

JavaReturnStatementContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaReturnStatement(this);
	}
};

JavaReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaReturnStatement(this);
	}
};


function JavaStatementContext(parser, ctx) {
	Java_statementContext.call(this, parser);
    this.exp = null; // Java_expressionContext;
    Java_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaStatementContext.prototype = Object.create(Java_statementContext.prototype);
JavaStatementContext.prototype.constructor = JavaStatementContext;

MParser.JavaStatementContext = JavaStatementContext;

JavaStatementContext.prototype.SEMI = function() {
    return this.getToken(MParser.SEMI, 0);
};

JavaStatementContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaStatement(this);
	}
};

JavaStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaStatement(this);
	}
};



MParser.Java_statementContext = Java_statementContext;

MParser.prototype.java_statement = function() {

    var localctx = new Java_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, MParser.RULE_java_statement);
    try {
        this.state = 2434;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.RETURN:
            localctx = new JavaReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2427;
            this.match(MParser.RETURN);
            this.state = 2428;
            localctx.exp = this.java_expression(0);
            this.state = 2429;
            this.match(MParser.SEMI);
            break;
        case MParser.LPAR:
        case MParser.BOOLEAN:
        case MParser.CHARACTER:
        case MParser.TEXT:
        case MParser.INTEGER:
        case MParser.DECIMAL:
        case MParser.DATE:
        case MParser.TIME:
        case MParser.DATETIME:
        case MParser.PERIOD:
        case MParser.VERSION:
        case MParser.UUID:
        case MParser.HTML:
        case MParser.NONE:
        case MParser.NULL:
        case MParser.READ:
        case MParser.SELF:
        case MParser.TEST:
        case MParser.THIS:
        case MParser.WRITE:
        case MParser.BOOLEAN_LITERAL:
        case MParser.CHAR_LITERAL:
        case MParser.SYMBOL_IDENTIFIER:
        case MParser.TYPE_IDENTIFIER:
        case MParser.VARIABLE_IDENTIFIER:
        case MParser.NATIVE_IDENTIFIER:
        case MParser.DOLLAR_IDENTIFIER:
        case MParser.TEXT_LITERAL:
        case MParser.INTEGER_LITERAL:
        case MParser.DECIMAL_LITERAL:
            localctx = new JavaStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2431;
            localctx.exp = this.java_expression(0);
            this.state = 2432;
            this.match(MParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_java_expression;
    return this;
}

Java_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_expressionContext.prototype.constructor = Java_expressionContext;


 
Java_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaSelectorExpressionContext(parser, ctx) {
	Java_expressionContext.call(this, parser);
    this.parent = null; // Java_expressionContext;
    this.child = null; // Java_selector_expressionContext;
    Java_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaSelectorExpressionContext.prototype = Object.create(Java_expressionContext.prototype);
JavaSelectorExpressionContext.prototype.constructor = JavaSelectorExpressionContext;

MParser.JavaSelectorExpressionContext = JavaSelectorExpressionContext;

JavaSelectorExpressionContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};

JavaSelectorExpressionContext.prototype.java_selector_expression = function() {
    return this.getTypedRuleContext(Java_selector_expressionContext,0);
};
JavaSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaSelectorExpression(this);
	}
};

JavaSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaSelectorExpression(this);
	}
};


function JavaPrimaryExpressionContext(parser, ctx) {
	Java_expressionContext.call(this, parser);
    this.exp = null; // Java_primary_expressionContext;
    Java_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaPrimaryExpressionContext.prototype = Object.create(Java_expressionContext.prototype);
JavaPrimaryExpressionContext.prototype.constructor = JavaPrimaryExpressionContext;

MParser.JavaPrimaryExpressionContext = JavaPrimaryExpressionContext;

JavaPrimaryExpressionContext.prototype.java_primary_expression = function() {
    return this.getTypedRuleContext(Java_primary_expressionContext,0);
};
JavaPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaPrimaryExpression(this);
	}
};

JavaPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaPrimaryExpression(this);
	}
};



MParser.prototype.java_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 406;
    this.enterRecursionRule(localctx, 406, MParser.RULE_java_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2437;
        localctx.exp = this.java_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2443;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,205,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaSelectorExpressionContext(this, new Java_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_java_expression);
                this.state = 2439;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2440;
                localctx.child = this.java_selector_expression(); 
            }
            this.state = 2445;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,205,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_java_primary_expression;
    return this;
}

Java_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_primary_expressionContext.prototype.constructor = Java_primary_expressionContext;

Java_primary_expressionContext.prototype.java_this_expression = function() {
    return this.getTypedRuleContext(Java_this_expressionContext,0);
};

Java_primary_expressionContext.prototype.java_new_expression = function() {
    return this.getTypedRuleContext(Java_new_expressionContext,0);
};

Java_primary_expressionContext.prototype.java_parenthesis_expression = function() {
    return this.getTypedRuleContext(Java_parenthesis_expressionContext,0);
};

Java_primary_expressionContext.prototype.java_identifier_expression = function() {
    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
};

Java_primary_expressionContext.prototype.java_literal_expression = function() {
    return this.getTypedRuleContext(Java_literal_expressionContext,0);
};

Java_primary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJava_primary_expression(this);
	}
};

Java_primary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJava_primary_expression(this);
	}
};




MParser.Java_primary_expressionContext = Java_primary_expressionContext;

MParser.prototype.java_primary_expression = function() {

    var localctx = new Java_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, MParser.RULE_java_primary_expression);
    try {
        this.state = 2451;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2446;
            this.java_this_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2447;
            this.java_new_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2448;
            this.java_parenthesis_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2449;
            this.java_identifier_expression(0);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2450;
            this.java_literal_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_this_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_java_this_expression;
    return this;
}

Java_this_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_this_expressionContext.prototype.constructor = Java_this_expressionContext;

Java_this_expressionContext.prototype.this_expression = function() {
    return this.getTypedRuleContext(This_expressionContext,0);
};

Java_this_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJava_this_expression(this);
	}
};

Java_this_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJava_this_expression(this);
	}
};




MParser.Java_this_expressionContext = Java_this_expressionContext;

MParser.prototype.java_this_expression = function() {

    var localctx = new Java_this_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, MParser.RULE_java_this_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2453;
        this.this_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_new_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_java_new_expression;
    return this;
}

Java_new_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_new_expressionContext.prototype.constructor = Java_new_expressionContext;

Java_new_expressionContext.prototype.new_token = function() {
    return this.getTypedRuleContext(New_tokenContext,0);
};

Java_new_expressionContext.prototype.java_method_expression = function() {
    return this.getTypedRuleContext(Java_method_expressionContext,0);
};

Java_new_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJava_new_expression(this);
	}
};

Java_new_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJava_new_expression(this);
	}
};




MParser.Java_new_expressionContext = Java_new_expressionContext;

MParser.prototype.java_new_expression = function() {

    var localctx = new Java_new_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, MParser.RULE_java_new_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2455;
        this.new_token();
        this.state = 2456;
        this.java_method_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_java_selector_expression;
    return this;
}

Java_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_selector_expressionContext.prototype.constructor = Java_selector_expressionContext;


 
Java_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaItemExpressionContext(parser, ctx) {
	Java_selector_expressionContext.call(this, parser);
    this.exp = null; // Java_item_expressionContext;
    Java_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaItemExpressionContext.prototype = Object.create(Java_selector_expressionContext.prototype);
JavaItemExpressionContext.prototype.constructor = JavaItemExpressionContext;

MParser.JavaItemExpressionContext = JavaItemExpressionContext;

JavaItemExpressionContext.prototype.java_item_expression = function() {
    return this.getTypedRuleContext(Java_item_expressionContext,0);
};
JavaItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaItemExpression(this);
	}
};

JavaItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaItemExpression(this);
	}
};


function JavaMethodExpressionContext(parser, ctx) {
	Java_selector_expressionContext.call(this, parser);
    this.exp = null; // Java_method_expressionContext;
    Java_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaMethodExpressionContext.prototype = Object.create(Java_selector_expressionContext.prototype);
JavaMethodExpressionContext.prototype.constructor = JavaMethodExpressionContext;

MParser.JavaMethodExpressionContext = JavaMethodExpressionContext;

JavaMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(MParser.DOT, 0);
};

JavaMethodExpressionContext.prototype.java_method_expression = function() {
    return this.getTypedRuleContext(Java_method_expressionContext,0);
};
JavaMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaMethodExpression(this);
	}
};

JavaMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaMethodExpression(this);
	}
};



MParser.Java_selector_expressionContext = Java_selector_expressionContext;

MParser.prototype.java_selector_expression = function() {

    var localctx = new Java_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, MParser.RULE_java_selector_expression);
    try {
        this.state = 2461;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.DOT:
            localctx = new JavaMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2458;
            this.match(MParser.DOT);
            this.state = 2459;
            localctx.exp = this.java_method_expression();
            break;
        case MParser.LBRAK:
            localctx = new JavaItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2460;
            localctx.exp = this.java_item_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_java_method_expression;
    this.name = null; // Java_identifierContext
    this.args = null; // Java_argumentsContext
    return this;
}

Java_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_method_expressionContext.prototype.constructor = Java_method_expressionContext;

Java_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Java_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Java_method_expressionContext.prototype.java_identifier = function() {
    return this.getTypedRuleContext(Java_identifierContext,0);
};

Java_method_expressionContext.prototype.java_arguments = function() {
    return this.getTypedRuleContext(Java_argumentsContext,0);
};

Java_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJava_method_expression(this);
	}
};

Java_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJava_method_expression(this);
	}
};




MParser.Java_method_expressionContext = Java_method_expressionContext;

MParser.prototype.java_method_expression = function() {

    var localctx = new Java_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, MParser.RULE_java_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2463;
        localctx.name = this.java_identifier();
        this.state = 2464;
        this.match(MParser.LPAR);
        this.state = 2466;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.LPAR || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.HTML - 52)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (MParser.NONE - 125)) | (1 << (MParser.NULL - 125)) | (1 << (MParser.READ - 125)) | (1 << (MParser.SELF - 125)) | (1 << (MParser.TEST - 125)) | (1 << (MParser.THIS - 125)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (MParser.WRITE - 163)) | (1 << (MParser.BOOLEAN_LITERAL - 163)) | (1 << (MParser.CHAR_LITERAL - 163)) | (1 << (MParser.SYMBOL_IDENTIFIER - 163)) | (1 << (MParser.TYPE_IDENTIFIER - 163)) | (1 << (MParser.VARIABLE_IDENTIFIER - 163)) | (1 << (MParser.NATIVE_IDENTIFIER - 163)) | (1 << (MParser.DOLLAR_IDENTIFIER - 163)) | (1 << (MParser.TEXT_LITERAL - 163)) | (1 << (MParser.INTEGER_LITERAL - 163)) | (1 << (MParser.DECIMAL_LITERAL - 163)))) !== 0)) {
            this.state = 2465;
            localctx.args = this.java_arguments(0);
        }

        this.state = 2468;
        this.match(MParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_java_arguments;
    return this;
}

Java_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_argumentsContext.prototype.constructor = Java_argumentsContext;


 
Java_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaArgumentListItemContext(parser, ctx) {
	Java_argumentsContext.call(this, parser);
    this.items = null; // Java_argumentsContext;
    this.item = null; // Java_expressionContext;
    Java_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaArgumentListItemContext.prototype = Object.create(Java_argumentsContext.prototype);
JavaArgumentListItemContext.prototype.constructor = JavaArgumentListItemContext;

MParser.JavaArgumentListItemContext = JavaArgumentListItemContext;

JavaArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(MParser.COMMA, 0);
};

JavaArgumentListItemContext.prototype.java_arguments = function() {
    return this.getTypedRuleContext(Java_argumentsContext,0);
};

JavaArgumentListItemContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaArgumentListItem(this);
	}
};

JavaArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaArgumentListItem(this);
	}
};


function JavaArgumentListContext(parser, ctx) {
	Java_argumentsContext.call(this, parser);
    this.item = null; // Java_expressionContext;
    Java_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaArgumentListContext.prototype = Object.create(Java_argumentsContext.prototype);
JavaArgumentListContext.prototype.constructor = JavaArgumentListContext;

MParser.JavaArgumentListContext = JavaArgumentListContext;

JavaArgumentListContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaArgumentList(this);
	}
};

JavaArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaArgumentList(this);
	}
};



MParser.prototype.java_arguments = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_argumentsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 418;
    this.enterRecursionRule(localctx, 418, MParser.RULE_java_arguments, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2471;
        localctx.item = this.java_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2478;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,209,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaArgumentListItemContext(this, new Java_argumentsContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_java_arguments);
                this.state = 2473;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2474;
                this.match(MParser.COMMA);
                this.state = 2475;
                localctx.item = this.java_expression(0); 
            }
            this.state = 2480;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,209,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_item_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_java_item_expression;
    this.exp = null; // Java_expressionContext
    return this;
}

Java_item_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_item_expressionContext.prototype.constructor = Java_item_expressionContext;

Java_item_expressionContext.prototype.LBRAK = function() {
    return this.getToken(MParser.LBRAK, 0);
};

Java_item_expressionContext.prototype.RBRAK = function() {
    return this.getToken(MParser.RBRAK, 0);
};

Java_item_expressionContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};

Java_item_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJava_item_expression(this);
	}
};

Java_item_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJava_item_expression(this);
	}
};




MParser.Java_item_expressionContext = Java_item_expressionContext;

MParser.prototype.java_item_expression = function() {

    var localctx = new Java_item_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, MParser.RULE_java_item_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2481;
        this.match(MParser.LBRAK);
        this.state = 2482;
        localctx.exp = this.java_expression(0);
        this.state = 2483;
        this.match(MParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_java_parenthesis_expression;
    this.exp = null; // Java_expressionContext
    return this;
}

Java_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_parenthesis_expressionContext.prototype.constructor = Java_parenthesis_expressionContext;

Java_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Java_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Java_parenthesis_expressionContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};

Java_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJava_parenthesis_expression(this);
	}
};

Java_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJava_parenthesis_expression(this);
	}
};




MParser.Java_parenthesis_expressionContext = Java_parenthesis_expressionContext;

MParser.prototype.java_parenthesis_expression = function() {

    var localctx = new Java_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, MParser.RULE_java_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2485;
        this.match(MParser.LPAR);
        this.state = 2486;
        localctx.exp = this.java_expression(0);
        this.state = 2487;
        this.match(MParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_java_identifier_expression;
    return this;
}

Java_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_identifier_expressionContext.prototype.constructor = Java_identifier_expressionContext;


 
Java_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaIdentifierContext(parser, ctx) {
	Java_identifier_expressionContext.call(this, parser);
    this.name = null; // Java_identifierContext;
    Java_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaIdentifierContext.prototype = Object.create(Java_identifier_expressionContext.prototype);
JavaIdentifierContext.prototype.constructor = JavaIdentifierContext;

MParser.JavaIdentifierContext = JavaIdentifierContext;

JavaIdentifierContext.prototype.java_identifier = function() {
    return this.getTypedRuleContext(Java_identifierContext,0);
};
JavaIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaIdentifier(this);
	}
};

JavaIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaIdentifier(this);
	}
};


function JavaChildIdentifierContext(parser, ctx) {
	Java_identifier_expressionContext.call(this, parser);
    this.parent = null; // Java_identifier_expressionContext;
    this.name = null; // Java_identifierContext;
    Java_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaChildIdentifierContext.prototype = Object.create(Java_identifier_expressionContext.prototype);
JavaChildIdentifierContext.prototype.constructor = JavaChildIdentifierContext;

MParser.JavaChildIdentifierContext = JavaChildIdentifierContext;

JavaChildIdentifierContext.prototype.DOT = function() {
    return this.getToken(MParser.DOT, 0);
};

JavaChildIdentifierContext.prototype.java_identifier_expression = function() {
    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
};

JavaChildIdentifierContext.prototype.java_identifier = function() {
    return this.getTypedRuleContext(Java_identifierContext,0);
};
JavaChildIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaChildIdentifier(this);
	}
};

JavaChildIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaChildIdentifier(this);
	}
};



MParser.prototype.java_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 424;
    this.enterRecursionRule(localctx, 424, MParser.RULE_java_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaIdentifierContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2490;
        localctx.name = this.java_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2497;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,210,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaChildIdentifierContext(this, new Java_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_java_identifier_expression);
                this.state = 2492;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2493;
                this.match(MParser.DOT);
                this.state = 2494;
                localctx.name = this.java_identifier(); 
            }
            this.state = 2499;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,210,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_class_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_java_class_identifier_expression;
    return this;
}

Java_class_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_class_identifier_expressionContext.prototype.constructor = Java_class_identifier_expressionContext;


 
Java_class_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaClassIdentifierContext(parser, ctx) {
	Java_class_identifier_expressionContext.call(this, parser);
    this.klass = null; // Java_identifier_expressionContext;
    Java_class_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaClassIdentifierContext.prototype = Object.create(Java_class_identifier_expressionContext.prototype);
JavaClassIdentifierContext.prototype.constructor = JavaClassIdentifierContext;

MParser.JavaClassIdentifierContext = JavaClassIdentifierContext;

JavaClassIdentifierContext.prototype.java_identifier_expression = function() {
    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
};
JavaClassIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaClassIdentifier(this);
	}
};

JavaClassIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaClassIdentifier(this);
	}
};


function JavaChildClassIdentifierContext(parser, ctx) {
	Java_class_identifier_expressionContext.call(this, parser);
    this.parent = null; // Java_class_identifier_expressionContext;
    this.name = null; // Token;
    Java_class_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaChildClassIdentifierContext.prototype = Object.create(Java_class_identifier_expressionContext.prototype);
JavaChildClassIdentifierContext.prototype.constructor = JavaChildClassIdentifierContext;

MParser.JavaChildClassIdentifierContext = JavaChildClassIdentifierContext;

JavaChildClassIdentifierContext.prototype.java_class_identifier_expression = function() {
    return this.getTypedRuleContext(Java_class_identifier_expressionContext,0);
};

JavaChildClassIdentifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(MParser.DOLLAR_IDENTIFIER, 0);
};
JavaChildClassIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaChildClassIdentifier(this);
	}
};

JavaChildClassIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaChildClassIdentifier(this);
	}
};



MParser.prototype.java_class_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_class_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 426;
    this.enterRecursionRule(localctx, 426, MParser.RULE_java_class_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaClassIdentifierContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2501;
        localctx.klass = this.java_identifier_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2507;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,211,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaChildClassIdentifierContext(this, new Java_class_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_java_class_identifier_expression);
                this.state = 2503;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2504;
                localctx.name = this.match(MParser.DOLLAR_IDENTIFIER); 
            }
            this.state = 2509;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,211,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_java_literal_expression;
    return this;
}

Java_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_literal_expressionContext.prototype.constructor = Java_literal_expressionContext;


 
Java_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaBooleanLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaBooleanLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaBooleanLiteralContext.prototype.constructor = JavaBooleanLiteralContext;

MParser.JavaBooleanLiteralContext = JavaBooleanLiteralContext;

JavaBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(MParser.BOOLEAN_LITERAL, 0);
};
JavaBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaBooleanLiteral(this);
	}
};

JavaBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaBooleanLiteral(this);
	}
};


function JavaCharacterLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaCharacterLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaCharacterLiteralContext.prototype.constructor = JavaCharacterLiteralContext;

MParser.JavaCharacterLiteralContext = JavaCharacterLiteralContext;

JavaCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(MParser.CHAR_LITERAL, 0);
};
JavaCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaCharacterLiteral(this);
	}
};

JavaCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaCharacterLiteral(this);
	}
};


function JavaIntegerLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaIntegerLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaIntegerLiteralContext.prototype.constructor = JavaIntegerLiteralContext;

MParser.JavaIntegerLiteralContext = JavaIntegerLiteralContext;

JavaIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(MParser.INTEGER_LITERAL, 0);
};
JavaIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaIntegerLiteral(this);
	}
};

JavaIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaIntegerLiteral(this);
	}
};


function JavaTextLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaTextLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaTextLiteralContext.prototype.constructor = JavaTextLiteralContext;

MParser.JavaTextLiteralContext = JavaTextLiteralContext;

JavaTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(MParser.TEXT_LITERAL, 0);
};
JavaTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaTextLiteral(this);
	}
};

JavaTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaTextLiteral(this);
	}
};


function JavaDecimalLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaDecimalLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaDecimalLiteralContext.prototype.constructor = JavaDecimalLiteralContext;

MParser.JavaDecimalLiteralContext = JavaDecimalLiteralContext;

JavaDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(MParser.DECIMAL_LITERAL, 0);
};
JavaDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJavaDecimalLiteral(this);
	}
};

JavaDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJavaDecimalLiteral(this);
	}
};



MParser.Java_literal_expressionContext = Java_literal_expressionContext;

MParser.prototype.java_literal_expression = function() {

    var localctx = new Java_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, MParser.RULE_java_literal_expression);
    try {
        this.state = 2515;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.INTEGER_LITERAL:
            localctx = new JavaIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2510;
            localctx.t = this.match(MParser.INTEGER_LITERAL);
            break;
        case MParser.DECIMAL_LITERAL:
            localctx = new JavaDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2511;
            localctx.t = this.match(MParser.DECIMAL_LITERAL);
            break;
        case MParser.TEXT_LITERAL:
            localctx = new JavaTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2512;
            localctx.t = this.match(MParser.TEXT_LITERAL);
            break;
        case MParser.BOOLEAN_LITERAL:
            localctx = new JavaBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2513;
            localctx.t = this.match(MParser.BOOLEAN_LITERAL);
            break;
        case MParser.CHAR_LITERAL:
            localctx = new JavaCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2514;
            localctx.t = this.match(MParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_java_identifier;
    return this;
}

Java_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_identifierContext.prototype.constructor = Java_identifierContext;

Java_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
};

Java_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(MParser.SYMBOL_IDENTIFIER, 0);
};

Java_identifierContext.prototype.NATIVE_IDENTIFIER = function() {
    return this.getToken(MParser.NATIVE_IDENTIFIER, 0);
};

Java_identifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(MParser.DOLLAR_IDENTIFIER, 0);
};

Java_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(MParser.TYPE_IDENTIFIER, 0);
};

Java_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(MParser.BOOLEAN, 0);
};

Java_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(MParser.CHARACTER, 0);
};

Java_identifierContext.prototype.TEXT = function() {
    return this.getToken(MParser.TEXT, 0);
};

Java_identifierContext.prototype.INTEGER = function() {
    return this.getToken(MParser.INTEGER, 0);
};

Java_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(MParser.DECIMAL, 0);
};

Java_identifierContext.prototype.DATE = function() {
    return this.getToken(MParser.DATE, 0);
};

Java_identifierContext.prototype.TIME = function() {
    return this.getToken(MParser.TIME, 0);
};

Java_identifierContext.prototype.DATETIME = function() {
    return this.getToken(MParser.DATETIME, 0);
};

Java_identifierContext.prototype.PERIOD = function() {
    return this.getToken(MParser.PERIOD, 0);
};

Java_identifierContext.prototype.VERSION = function() {
    return this.getToken(MParser.VERSION, 0);
};

Java_identifierContext.prototype.UUID = function() {
    return this.getToken(MParser.UUID, 0);
};

Java_identifierContext.prototype.HTML = function() {
    return this.getToken(MParser.HTML, 0);
};

Java_identifierContext.prototype.READ = function() {
    return this.getToken(MParser.READ, 0);
};

Java_identifierContext.prototype.WRITE = function() {
    return this.getToken(MParser.WRITE, 0);
};

Java_identifierContext.prototype.TEST = function() {
    return this.getToken(MParser.TEST, 0);
};

Java_identifierContext.prototype.SELF = function() {
    return this.getToken(MParser.SELF, 0);
};

Java_identifierContext.prototype.NONE = function() {
    return this.getToken(MParser.NONE, 0);
};

Java_identifierContext.prototype.NULL = function() {
    return this.getToken(MParser.NULL, 0);
};

Java_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJava_identifier(this);
	}
};

Java_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJava_identifier(this);
	}
};




MParser.Java_identifierContext = Java_identifierContext;

MParser.prototype.java_identifier = function() {

    var localctx = new Java_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, MParser.RULE_java_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2517;
        _la = this._input.LA(1);
        if(!(((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.HTML - 52)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (MParser.NONE - 125)) | (1 << (MParser.NULL - 125)) | (1 << (MParser.READ - 125)) | (1 << (MParser.SELF - 125)) | (1 << (MParser.TEST - 125)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (MParser.WRITE - 163)) | (1 << (MParser.SYMBOL_IDENTIFIER - 163)) | (1 << (MParser.TYPE_IDENTIFIER - 163)) | (1 << (MParser.VARIABLE_IDENTIFIER - 163)) | (1 << (MParser.NATIVE_IDENTIFIER - 163)) | (1 << (MParser.DOLLAR_IDENTIFIER - 163)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_csharp_statement;
    return this;
}

Csharp_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_statementContext.prototype.constructor = Csharp_statementContext;


 
Csharp_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpReturnStatementContext(parser, ctx) {
	Csharp_statementContext.call(this, parser);
    this.exp = null; // Csharp_expressionContext;
    Csharp_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpReturnStatementContext.prototype = Object.create(Csharp_statementContext.prototype);
CSharpReturnStatementContext.prototype.constructor = CSharpReturnStatementContext;

MParser.CSharpReturnStatementContext = CSharpReturnStatementContext;

CSharpReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(MParser.RETURN, 0);
};

CSharpReturnStatementContext.prototype.SEMI = function() {
    return this.getToken(MParser.SEMI, 0);
};

CSharpReturnStatementContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCSharpReturnStatement(this);
	}
};

CSharpReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCSharpReturnStatement(this);
	}
};


function CSharpStatementContext(parser, ctx) {
	Csharp_statementContext.call(this, parser);
    this.exp = null; // Csharp_expressionContext;
    Csharp_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpStatementContext.prototype = Object.create(Csharp_statementContext.prototype);
CSharpStatementContext.prototype.constructor = CSharpStatementContext;

MParser.CSharpStatementContext = CSharpStatementContext;

CSharpStatementContext.prototype.SEMI = function() {
    return this.getToken(MParser.SEMI, 0);
};

CSharpStatementContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCSharpStatement(this);
	}
};

CSharpStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCSharpStatement(this);
	}
};



MParser.Csharp_statementContext = Csharp_statementContext;

MParser.prototype.csharp_statement = function() {

    var localctx = new Csharp_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, MParser.RULE_csharp_statement);
    try {
        this.state = 2526;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.RETURN:
            localctx = new CSharpReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2519;
            this.match(MParser.RETURN);
            this.state = 2520;
            localctx.exp = this.csharp_expression(0);
            this.state = 2521;
            this.match(MParser.SEMI);
            break;
        case MParser.LPAR:
        case MParser.BOOLEAN:
        case MParser.CHARACTER:
        case MParser.TEXT:
        case MParser.INTEGER:
        case MParser.DECIMAL:
        case MParser.DATE:
        case MParser.TIME:
        case MParser.DATETIME:
        case MParser.PERIOD:
        case MParser.VERSION:
        case MParser.UUID:
        case MParser.HTML:
        case MParser.NONE:
        case MParser.NULL:
        case MParser.READ:
        case MParser.SELF:
        case MParser.TEST:
        case MParser.THIS:
        case MParser.WRITE:
        case MParser.BOOLEAN_LITERAL:
        case MParser.CHAR_LITERAL:
        case MParser.SYMBOL_IDENTIFIER:
        case MParser.TYPE_IDENTIFIER:
        case MParser.VARIABLE_IDENTIFIER:
        case MParser.DOLLAR_IDENTIFIER:
        case MParser.TEXT_LITERAL:
        case MParser.INTEGER_LITERAL:
        case MParser.DECIMAL_LITERAL:
            localctx = new CSharpStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2523;
            localctx.exp = this.csharp_expression(0);
            this.state = 2524;
            this.match(MParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_csharp_expression;
    return this;
}

Csharp_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_expressionContext.prototype.constructor = Csharp_expressionContext;


 
Csharp_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CSharpSelectorExpressionContext(parser, ctx) {
	Csharp_expressionContext.call(this, parser);
    this.parent = null; // Csharp_expressionContext;
    this.child = null; // Csharp_selector_expressionContext;
    Csharp_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpSelectorExpressionContext.prototype = Object.create(Csharp_expressionContext.prototype);
CSharpSelectorExpressionContext.prototype.constructor = CSharpSelectorExpressionContext;

MParser.CSharpSelectorExpressionContext = CSharpSelectorExpressionContext;

CSharpSelectorExpressionContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};

CSharpSelectorExpressionContext.prototype.csharp_selector_expression = function() {
    return this.getTypedRuleContext(Csharp_selector_expressionContext,0);
};
CSharpSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCSharpSelectorExpression(this);
	}
};

CSharpSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCSharpSelectorExpression(this);
	}
};


function CSharpPrimaryExpressionContext(parser, ctx) {
	Csharp_expressionContext.call(this, parser);
    this.exp = null; // Csharp_primary_expressionContext;
    Csharp_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpPrimaryExpressionContext.prototype = Object.create(Csharp_expressionContext.prototype);
CSharpPrimaryExpressionContext.prototype.constructor = CSharpPrimaryExpressionContext;

MParser.CSharpPrimaryExpressionContext = CSharpPrimaryExpressionContext;

CSharpPrimaryExpressionContext.prototype.csharp_primary_expression = function() {
    return this.getTypedRuleContext(Csharp_primary_expressionContext,0);
};
CSharpPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCSharpPrimaryExpression(this);
	}
};

CSharpPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCSharpPrimaryExpression(this);
	}
};



MParser.prototype.csharp_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Csharp_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 434;
    this.enterRecursionRule(localctx, 434, MParser.RULE_csharp_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new CSharpPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2529;
        localctx.exp = this.csharp_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2535;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,214,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CSharpSelectorExpressionContext(this, new Csharp_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_csharp_expression);
                this.state = 2531;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2532;
                localctx.child = this.csharp_selector_expression(); 
            }
            this.state = 2537;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,214,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Csharp_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_csharp_primary_expression;
    return this;
}

Csharp_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_primary_expressionContext.prototype.constructor = Csharp_primary_expressionContext;

Csharp_primary_expressionContext.prototype.csharp_this_expression = function() {
    return this.getTypedRuleContext(Csharp_this_expressionContext,0);
};

Csharp_primary_expressionContext.prototype.csharp_new_expression = function() {
    return this.getTypedRuleContext(Csharp_new_expressionContext,0);
};

Csharp_primary_expressionContext.prototype.csharp_parenthesis_expression = function() {
    return this.getTypedRuleContext(Csharp_parenthesis_expressionContext,0);
};

Csharp_primary_expressionContext.prototype.csharp_identifier_expression = function() {
    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
};

Csharp_primary_expressionContext.prototype.csharp_literal_expression = function() {
    return this.getTypedRuleContext(Csharp_literal_expressionContext,0);
};

Csharp_primary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCsharp_primary_expression(this);
	}
};

Csharp_primary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCsharp_primary_expression(this);
	}
};




MParser.Csharp_primary_expressionContext = Csharp_primary_expressionContext;

MParser.prototype.csharp_primary_expression = function() {

    var localctx = new Csharp_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 436, MParser.RULE_csharp_primary_expression);
    try {
        this.state = 2543;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2538;
            this.csharp_this_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2539;
            this.csharp_new_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2540;
            this.csharp_parenthesis_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2541;
            this.csharp_identifier_expression(0);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2542;
            this.csharp_literal_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_this_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_csharp_this_expression;
    return this;
}

Csharp_this_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_this_expressionContext.prototype.constructor = Csharp_this_expressionContext;

Csharp_this_expressionContext.prototype.this_expression = function() {
    return this.getTypedRuleContext(This_expressionContext,0);
};

Csharp_this_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCsharp_this_expression(this);
	}
};

Csharp_this_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCsharp_this_expression(this);
	}
};




MParser.Csharp_this_expressionContext = Csharp_this_expressionContext;

MParser.prototype.csharp_this_expression = function() {

    var localctx = new Csharp_this_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, MParser.RULE_csharp_this_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2545;
        this.this_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_new_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_csharp_new_expression;
    return this;
}

Csharp_new_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_new_expressionContext.prototype.constructor = Csharp_new_expressionContext;

Csharp_new_expressionContext.prototype.new_token = function() {
    return this.getTypedRuleContext(New_tokenContext,0);
};

Csharp_new_expressionContext.prototype.csharp_method_expression = function() {
    return this.getTypedRuleContext(Csharp_method_expressionContext,0);
};

Csharp_new_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCsharp_new_expression(this);
	}
};

Csharp_new_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCsharp_new_expression(this);
	}
};




MParser.Csharp_new_expressionContext = Csharp_new_expressionContext;

MParser.prototype.csharp_new_expression = function() {

    var localctx = new Csharp_new_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, MParser.RULE_csharp_new_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2547;
        this.new_token();
        this.state = 2548;
        this.csharp_method_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_csharp_selector_expression;
    return this;
}

Csharp_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_selector_expressionContext.prototype.constructor = Csharp_selector_expressionContext;


 
Csharp_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpMethodExpressionContext(parser, ctx) {
	Csharp_selector_expressionContext.call(this, parser);
    this.exp = null; // Csharp_method_expressionContext;
    Csharp_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpMethodExpressionContext.prototype = Object.create(Csharp_selector_expressionContext.prototype);
CSharpMethodExpressionContext.prototype.constructor = CSharpMethodExpressionContext;

MParser.CSharpMethodExpressionContext = CSharpMethodExpressionContext;

CSharpMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(MParser.DOT, 0);
};

CSharpMethodExpressionContext.prototype.csharp_method_expression = function() {
    return this.getTypedRuleContext(Csharp_method_expressionContext,0);
};
CSharpMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCSharpMethodExpression(this);
	}
};

CSharpMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCSharpMethodExpression(this);
	}
};


function CSharpItemExpressionContext(parser, ctx) {
	Csharp_selector_expressionContext.call(this, parser);
    this.exp = null; // Csharp_item_expressionContext;
    Csharp_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpItemExpressionContext.prototype = Object.create(Csharp_selector_expressionContext.prototype);
CSharpItemExpressionContext.prototype.constructor = CSharpItemExpressionContext;

MParser.CSharpItemExpressionContext = CSharpItemExpressionContext;

CSharpItemExpressionContext.prototype.csharp_item_expression = function() {
    return this.getTypedRuleContext(Csharp_item_expressionContext,0);
};
CSharpItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCSharpItemExpression(this);
	}
};

CSharpItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCSharpItemExpression(this);
	}
};



MParser.Csharp_selector_expressionContext = Csharp_selector_expressionContext;

MParser.prototype.csharp_selector_expression = function() {

    var localctx = new Csharp_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, MParser.RULE_csharp_selector_expression);
    try {
        this.state = 2553;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.DOT:
            localctx = new CSharpMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2550;
            this.match(MParser.DOT);
            this.state = 2551;
            localctx.exp = this.csharp_method_expression();
            break;
        case MParser.LBRAK:
            localctx = new CSharpItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2552;
            localctx.exp = this.csharp_item_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_csharp_method_expression;
    this.name = null; // Csharp_identifierContext
    this.args = null; // Csharp_argumentsContext
    return this;
}

Csharp_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_method_expressionContext.prototype.constructor = Csharp_method_expressionContext;

Csharp_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Csharp_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Csharp_method_expressionContext.prototype.csharp_identifier = function() {
    return this.getTypedRuleContext(Csharp_identifierContext,0);
};

Csharp_method_expressionContext.prototype.csharp_arguments = function() {
    return this.getTypedRuleContext(Csharp_argumentsContext,0);
};

Csharp_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCsharp_method_expression(this);
	}
};

Csharp_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCsharp_method_expression(this);
	}
};




MParser.Csharp_method_expressionContext = Csharp_method_expressionContext;

MParser.prototype.csharp_method_expression = function() {

    var localctx = new Csharp_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, MParser.RULE_csharp_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2555;
        localctx.name = this.csharp_identifier();
        this.state = 2556;
        this.match(MParser.LPAR);
        this.state = 2558;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.LPAR || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.HTML - 52)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (MParser.NONE - 125)) | (1 << (MParser.NULL - 125)) | (1 << (MParser.READ - 125)) | (1 << (MParser.SELF - 125)) | (1 << (MParser.TEST - 125)) | (1 << (MParser.THIS - 125)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (MParser.WRITE - 163)) | (1 << (MParser.BOOLEAN_LITERAL - 163)) | (1 << (MParser.CHAR_LITERAL - 163)) | (1 << (MParser.SYMBOL_IDENTIFIER - 163)) | (1 << (MParser.TYPE_IDENTIFIER - 163)) | (1 << (MParser.VARIABLE_IDENTIFIER - 163)) | (1 << (MParser.DOLLAR_IDENTIFIER - 163)) | (1 << (MParser.TEXT_LITERAL - 163)) | (1 << (MParser.INTEGER_LITERAL - 163)) | (1 << (MParser.DECIMAL_LITERAL - 163)))) !== 0)) {
            this.state = 2557;
            localctx.args = this.csharp_arguments(0);
        }

        this.state = 2560;
        this.match(MParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_csharp_arguments;
    return this;
}

Csharp_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_argumentsContext.prototype.constructor = Csharp_argumentsContext;


 
Csharp_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CSharpArgumentListContext(parser, ctx) {
	Csharp_argumentsContext.call(this, parser);
    this.item = null; // Csharp_expressionContext;
    Csharp_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpArgumentListContext.prototype = Object.create(Csharp_argumentsContext.prototype);
CSharpArgumentListContext.prototype.constructor = CSharpArgumentListContext;

MParser.CSharpArgumentListContext = CSharpArgumentListContext;

CSharpArgumentListContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCSharpArgumentList(this);
	}
};

CSharpArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCSharpArgumentList(this);
	}
};


function CSharpArgumentListItemContext(parser, ctx) {
	Csharp_argumentsContext.call(this, parser);
    this.items = null; // Csharp_argumentsContext;
    this.item = null; // Csharp_expressionContext;
    Csharp_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpArgumentListItemContext.prototype = Object.create(Csharp_argumentsContext.prototype);
CSharpArgumentListItemContext.prototype.constructor = CSharpArgumentListItemContext;

MParser.CSharpArgumentListItemContext = CSharpArgumentListItemContext;

CSharpArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(MParser.COMMA, 0);
};

CSharpArgumentListItemContext.prototype.csharp_arguments = function() {
    return this.getTypedRuleContext(Csharp_argumentsContext,0);
};

CSharpArgumentListItemContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCSharpArgumentListItem(this);
	}
};

CSharpArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCSharpArgumentListItem(this);
	}
};



MParser.prototype.csharp_arguments = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Csharp_argumentsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 446;
    this.enterRecursionRule(localctx, 446, MParser.RULE_csharp_arguments, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new CSharpArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2563;
        localctx.item = this.csharp_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2570;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,218,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CSharpArgumentListItemContext(this, new Csharp_argumentsContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_csharp_arguments);
                this.state = 2565;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2566;
                this.match(MParser.COMMA);
                this.state = 2567;
                localctx.item = this.csharp_expression(0); 
            }
            this.state = 2572;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,218,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Csharp_item_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_csharp_item_expression;
    this.exp = null; // Csharp_expressionContext
    return this;
}

Csharp_item_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_item_expressionContext.prototype.constructor = Csharp_item_expressionContext;

Csharp_item_expressionContext.prototype.LBRAK = function() {
    return this.getToken(MParser.LBRAK, 0);
};

Csharp_item_expressionContext.prototype.RBRAK = function() {
    return this.getToken(MParser.RBRAK, 0);
};

Csharp_item_expressionContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};

Csharp_item_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCsharp_item_expression(this);
	}
};

Csharp_item_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCsharp_item_expression(this);
	}
};




MParser.Csharp_item_expressionContext = Csharp_item_expressionContext;

MParser.prototype.csharp_item_expression = function() {

    var localctx = new Csharp_item_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, MParser.RULE_csharp_item_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2573;
        this.match(MParser.LBRAK);
        this.state = 2574;
        localctx.exp = this.csharp_expression(0);
        this.state = 2575;
        this.match(MParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_csharp_parenthesis_expression;
    this.exp = null; // Csharp_expressionContext
    return this;
}

Csharp_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_parenthesis_expressionContext.prototype.constructor = Csharp_parenthesis_expressionContext;

Csharp_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(MParser.LPAR, 0);
};

Csharp_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(MParser.RPAR, 0);
};

Csharp_parenthesis_expressionContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};

Csharp_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCsharp_parenthesis_expression(this);
	}
};

Csharp_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCsharp_parenthesis_expression(this);
	}
};




MParser.Csharp_parenthesis_expressionContext = Csharp_parenthesis_expressionContext;

MParser.prototype.csharp_parenthesis_expression = function() {

    var localctx = new Csharp_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, MParser.RULE_csharp_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2577;
        this.match(MParser.LPAR);
        this.state = 2578;
        localctx.exp = this.csharp_expression(0);
        this.state = 2579;
        this.match(MParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_csharp_identifier_expression;
    return this;
}

Csharp_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_identifier_expressionContext.prototype.constructor = Csharp_identifier_expressionContext;


 
Csharp_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CSharpIdentifierContext(parser, ctx) {
	Csharp_identifier_expressionContext.call(this, parser);
    this.name = null; // Csharp_identifierContext;
    Csharp_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpIdentifierContext.prototype = Object.create(Csharp_identifier_expressionContext.prototype);
CSharpIdentifierContext.prototype.constructor = CSharpIdentifierContext;

MParser.CSharpIdentifierContext = CSharpIdentifierContext;

CSharpIdentifierContext.prototype.csharp_identifier = function() {
    return this.getTypedRuleContext(Csharp_identifierContext,0);
};
CSharpIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCSharpIdentifier(this);
	}
};

CSharpIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCSharpIdentifier(this);
	}
};


function CSharpChildIdentifierContext(parser, ctx) {
	Csharp_identifier_expressionContext.call(this, parser);
    this.parent = null; // Csharp_identifier_expressionContext;
    this.name = null; // Csharp_identifierContext;
    Csharp_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpChildIdentifierContext.prototype = Object.create(Csharp_identifier_expressionContext.prototype);
CSharpChildIdentifierContext.prototype.constructor = CSharpChildIdentifierContext;

MParser.CSharpChildIdentifierContext = CSharpChildIdentifierContext;

CSharpChildIdentifierContext.prototype.DOT = function() {
    return this.getToken(MParser.DOT, 0);
};

CSharpChildIdentifierContext.prototype.csharp_identifier_expression = function() {
    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
};

CSharpChildIdentifierContext.prototype.csharp_identifier = function() {
    return this.getTypedRuleContext(Csharp_identifierContext,0);
};
CSharpChildIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCSharpChildIdentifier(this);
	}
};

CSharpChildIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCSharpChildIdentifier(this);
	}
};


function CSharpPromptoIdentifierContext(parser, ctx) {
	Csharp_identifier_expressionContext.call(this, parser);
    Csharp_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpPromptoIdentifierContext.prototype = Object.create(Csharp_identifier_expressionContext.prototype);
CSharpPromptoIdentifierContext.prototype.constructor = CSharpPromptoIdentifierContext;

MParser.CSharpPromptoIdentifierContext = CSharpPromptoIdentifierContext;

CSharpPromptoIdentifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(MParser.DOLLAR_IDENTIFIER, 0);
};
CSharpPromptoIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCSharpPromptoIdentifier(this);
	}
};

CSharpPromptoIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCSharpPromptoIdentifier(this);
	}
};



MParser.prototype.csharp_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Csharp_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 452;
    this.enterRecursionRule(localctx, 452, MParser.RULE_csharp_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2584;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.DOLLAR_IDENTIFIER:
            localctx = new CSharpPromptoIdentifierContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 2582;
            this.match(MParser.DOLLAR_IDENTIFIER);
            break;
        case MParser.BOOLEAN:
        case MParser.CHARACTER:
        case MParser.TEXT:
        case MParser.INTEGER:
        case MParser.DECIMAL:
        case MParser.DATE:
        case MParser.TIME:
        case MParser.DATETIME:
        case MParser.PERIOD:
        case MParser.VERSION:
        case MParser.UUID:
        case MParser.HTML:
        case MParser.NONE:
        case MParser.NULL:
        case MParser.READ:
        case MParser.SELF:
        case MParser.TEST:
        case MParser.WRITE:
        case MParser.SYMBOL_IDENTIFIER:
        case MParser.TYPE_IDENTIFIER:
        case MParser.VARIABLE_IDENTIFIER:
            localctx = new CSharpIdentifierContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2583;
            localctx.name = this.csharp_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2591;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,220,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CSharpChildIdentifierContext(this, new Csharp_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_csharp_identifier_expression);
                this.state = 2586;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2587;
                this.match(MParser.DOT);
                this.state = 2588;
                localctx.name = this.csharp_identifier(); 
            }
            this.state = 2593;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,220,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Csharp_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_csharp_literal_expression;
    return this;
}

Csharp_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_literal_expressionContext.prototype.constructor = Csharp_literal_expressionContext;


 
Csharp_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpBooleanLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpBooleanLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpBooleanLiteralContext.prototype.constructor = CSharpBooleanLiteralContext;

MParser.CSharpBooleanLiteralContext = CSharpBooleanLiteralContext;

CSharpBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(MParser.BOOLEAN_LITERAL, 0);
};
CSharpBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCSharpBooleanLiteral(this);
	}
};

CSharpBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCSharpBooleanLiteral(this);
	}
};


function CSharpIntegerLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpIntegerLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpIntegerLiteralContext.prototype.constructor = CSharpIntegerLiteralContext;

MParser.CSharpIntegerLiteralContext = CSharpIntegerLiteralContext;

CSharpIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(MParser.INTEGER_LITERAL, 0);
};
CSharpIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCSharpIntegerLiteral(this);
	}
};

CSharpIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCSharpIntegerLiteral(this);
	}
};


function CSharpDecimalLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpDecimalLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpDecimalLiteralContext.prototype.constructor = CSharpDecimalLiteralContext;

MParser.CSharpDecimalLiteralContext = CSharpDecimalLiteralContext;

CSharpDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(MParser.DECIMAL_LITERAL, 0);
};
CSharpDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCSharpDecimalLiteral(this);
	}
};

CSharpDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCSharpDecimalLiteral(this);
	}
};


function CSharpCharacterLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpCharacterLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpCharacterLiteralContext.prototype.constructor = CSharpCharacterLiteralContext;

MParser.CSharpCharacterLiteralContext = CSharpCharacterLiteralContext;

CSharpCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(MParser.CHAR_LITERAL, 0);
};
CSharpCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCSharpCharacterLiteral(this);
	}
};

CSharpCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCSharpCharacterLiteral(this);
	}
};


function CSharpTextLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpTextLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpTextLiteralContext.prototype.constructor = CSharpTextLiteralContext;

MParser.CSharpTextLiteralContext = CSharpTextLiteralContext;

CSharpTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(MParser.TEXT_LITERAL, 0);
};
CSharpTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCSharpTextLiteral(this);
	}
};

CSharpTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCSharpTextLiteral(this);
	}
};



MParser.Csharp_literal_expressionContext = Csharp_literal_expressionContext;

MParser.prototype.csharp_literal_expression = function() {

    var localctx = new Csharp_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, MParser.RULE_csharp_literal_expression);
    try {
        this.state = 2599;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.INTEGER_LITERAL:
            localctx = new CSharpIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2594;
            this.match(MParser.INTEGER_LITERAL);
            break;
        case MParser.DECIMAL_LITERAL:
            localctx = new CSharpDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2595;
            this.match(MParser.DECIMAL_LITERAL);
            break;
        case MParser.TEXT_LITERAL:
            localctx = new CSharpTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2596;
            this.match(MParser.TEXT_LITERAL);
            break;
        case MParser.BOOLEAN_LITERAL:
            localctx = new CSharpBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2597;
            this.match(MParser.BOOLEAN_LITERAL);
            break;
        case MParser.CHAR_LITERAL:
            localctx = new CSharpCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2598;
            this.match(MParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_csharp_identifier;
    return this;
}

Csharp_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_identifierContext.prototype.constructor = Csharp_identifierContext;

Csharp_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(MParser.VARIABLE_IDENTIFIER, 0);
};

Csharp_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(MParser.SYMBOL_IDENTIFIER, 0);
};

Csharp_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(MParser.TYPE_IDENTIFIER, 0);
};

Csharp_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(MParser.BOOLEAN, 0);
};

Csharp_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(MParser.CHARACTER, 0);
};

Csharp_identifierContext.prototype.TEXT = function() {
    return this.getToken(MParser.TEXT, 0);
};

Csharp_identifierContext.prototype.INTEGER = function() {
    return this.getToken(MParser.INTEGER, 0);
};

Csharp_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(MParser.DECIMAL, 0);
};

Csharp_identifierContext.prototype.DATE = function() {
    return this.getToken(MParser.DATE, 0);
};

Csharp_identifierContext.prototype.TIME = function() {
    return this.getToken(MParser.TIME, 0);
};

Csharp_identifierContext.prototype.DATETIME = function() {
    return this.getToken(MParser.DATETIME, 0);
};

Csharp_identifierContext.prototype.PERIOD = function() {
    return this.getToken(MParser.PERIOD, 0);
};

Csharp_identifierContext.prototype.VERSION = function() {
    return this.getToken(MParser.VERSION, 0);
};

Csharp_identifierContext.prototype.UUID = function() {
    return this.getToken(MParser.UUID, 0);
};

Csharp_identifierContext.prototype.HTML = function() {
    return this.getToken(MParser.HTML, 0);
};

Csharp_identifierContext.prototype.READ = function() {
    return this.getToken(MParser.READ, 0);
};

Csharp_identifierContext.prototype.WRITE = function() {
    return this.getToken(MParser.WRITE, 0);
};

Csharp_identifierContext.prototype.TEST = function() {
    return this.getToken(MParser.TEST, 0);
};

Csharp_identifierContext.prototype.SELF = function() {
    return this.getToken(MParser.SELF, 0);
};

Csharp_identifierContext.prototype.NONE = function() {
    return this.getToken(MParser.NONE, 0);
};

Csharp_identifierContext.prototype.NULL = function() {
    return this.getToken(MParser.NULL, 0);
};

Csharp_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCsharp_identifier(this);
	}
};

Csharp_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCsharp_identifier(this);
	}
};




MParser.Csharp_identifierContext = Csharp_identifierContext;

MParser.prototype.csharp_identifier = function() {

    var localctx = new Csharp_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, MParser.RULE_csharp_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2601;
        _la = this._input.LA(1);
        if(!(((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.HTML - 52)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (MParser.NONE - 125)) | (1 << (MParser.NULL - 125)) | (1 << (MParser.READ - 125)) | (1 << (MParser.SELF - 125)) | (1 << (MParser.TEST - 125)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (MParser.WRITE - 163)) | (1 << (MParser.SYMBOL_IDENTIFIER - 163)) | (1 << (MParser.TYPE_IDENTIFIER - 163)) | (1 << (MParser.VARIABLE_IDENTIFIER - 163)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_jsx_expression;
    return this;
}

Jsx_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_expressionContext.prototype.constructor = Jsx_expressionContext;

Jsx_expressionContext.prototype.jsx_element = function() {
    return this.getTypedRuleContext(Jsx_elementContext,0);
};

Jsx_expressionContext.prototype.jsx_fragment = function() {
    return this.getTypedRuleContext(Jsx_fragmentContext,0);
};

Jsx_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsx_expression(this);
	}
};

Jsx_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsx_expression(this);
	}
};




MParser.Jsx_expressionContext = Jsx_expressionContext;

MParser.prototype.jsx_expression = function() {

    var localctx = new Jsx_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, MParser.RULE_jsx_expression);
    try {
        this.state = 2605;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2603;
            this.jsx_element();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2604;
            this.jsx_fragment();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_jsx_element;
    return this;
}

Jsx_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_elementContext.prototype.constructor = Jsx_elementContext;


 
Jsx_elementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JsxSelfClosingContext(parser, ctx) {
	Jsx_elementContext.call(this, parser);
    this.jsx = null; // Jsx_self_closingContext;
    Jsx_elementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JsxSelfClosingContext.prototype = Object.create(Jsx_elementContext.prototype);
JsxSelfClosingContext.prototype.constructor = JsxSelfClosingContext;

MParser.JsxSelfClosingContext = JsxSelfClosingContext;

JsxSelfClosingContext.prototype.jsx_self_closing = function() {
    return this.getTypedRuleContext(Jsx_self_closingContext,0);
};
JsxSelfClosingContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsxSelfClosing(this);
	}
};

JsxSelfClosingContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsxSelfClosing(this);
	}
};


function JsxElementContext(parser, ctx) {
	Jsx_elementContext.call(this, parser);
    this.opening = null; // Jsx_openingContext;
    this.children_ = null; // Jsx_childrenContext;
    this.closing = null; // Jsx_closingContext;
    Jsx_elementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JsxElementContext.prototype = Object.create(Jsx_elementContext.prototype);
JsxElementContext.prototype.constructor = JsxElementContext;

MParser.JsxElementContext = JsxElementContext;

JsxElementContext.prototype.jsx_opening = function() {
    return this.getTypedRuleContext(Jsx_openingContext,0);
};

JsxElementContext.prototype.jsx_closing = function() {
    return this.getTypedRuleContext(Jsx_closingContext,0);
};

JsxElementContext.prototype.jsx_children = function() {
    return this.getTypedRuleContext(Jsx_childrenContext,0);
};
JsxElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsxElement(this);
	}
};

JsxElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsxElement(this);
	}
};



MParser.Jsx_elementContext = Jsx_elementContext;

MParser.prototype.jsx_element = function() {

    var localctx = new Jsx_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 460, MParser.RULE_jsx_element);
    try {
        this.state = 2614;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
        switch(la_) {
        case 1:
            localctx = new JsxSelfClosingContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2607;
            localctx.jsx = this.jsx_self_closing();
            break;

        case 2:
            localctx = new JsxElementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2608;
            localctx.opening = this.jsx_opening();
            this.state = 2610;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
            if(la_===1) {
                this.state = 2609;
                localctx.children_ = this.jsx_children();

            }
            this.state = 2612;
            localctx.closing = this.jsx_closing();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_fragmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_jsx_fragment;
    this.children_ = null; // Jsx_childrenContext
    return this;
}

Jsx_fragmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_fragmentContext.prototype.constructor = Jsx_fragmentContext;

Jsx_fragmentContext.prototype.jsx_fragment_start = function() {
    return this.getTypedRuleContext(Jsx_fragment_startContext,0);
};

Jsx_fragmentContext.prototype.jsx_fragment_end = function() {
    return this.getTypedRuleContext(Jsx_fragment_endContext,0);
};

Jsx_fragmentContext.prototype.jsx_children = function() {
    return this.getTypedRuleContext(Jsx_childrenContext,0);
};

Jsx_fragmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsx_fragment(this);
	}
};

Jsx_fragmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsx_fragment(this);
	}
};




MParser.Jsx_fragmentContext = Jsx_fragmentContext;

MParser.prototype.jsx_fragment = function() {

    var localctx = new Jsx_fragmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 462, MParser.RULE_jsx_fragment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2616;
        this.jsx_fragment_start();
        this.state = 2618;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
        if(la_===1) {
            this.state = 2617;
            localctx.children_ = this.jsx_children();

        }
        this.state = 2620;
        this.jsx_fragment_end();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_fragment_startContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_jsx_fragment_start;
    return this;
}

Jsx_fragment_startContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_fragment_startContext.prototype.constructor = Jsx_fragment_startContext;

Jsx_fragment_startContext.prototype.LT = function() {
    return this.getToken(MParser.LT, 0);
};

Jsx_fragment_startContext.prototype.GT = function() {
    return this.getToken(MParser.GT, 0);
};

Jsx_fragment_startContext.prototype.LTGT = function() {
    return this.getToken(MParser.LTGT, 0);
};

Jsx_fragment_startContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsx_fragment_start(this);
	}
};

Jsx_fragment_startContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsx_fragment_start(this);
	}
};




MParser.Jsx_fragment_startContext = Jsx_fragment_startContext;

MParser.prototype.jsx_fragment_start = function() {

    var localctx = new Jsx_fragment_startContext(this, this._ctx, this.state);
    this.enterRule(localctx, 464, MParser.RULE_jsx_fragment_start);
    try {
        this.state = 2625;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.LT:
            this.enterOuterAlt(localctx, 1);
            this.state = 2622;
            this.match(MParser.LT);
            this.state = 2623;
            this.match(MParser.GT);
            break;
        case MParser.LTGT:
            this.enterOuterAlt(localctx, 2);
            this.state = 2624;
            this.match(MParser.LTGT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_fragment_endContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_jsx_fragment_end;
    return this;
}

Jsx_fragment_endContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_fragment_endContext.prototype.constructor = Jsx_fragment_endContext;

Jsx_fragment_endContext.prototype.LT = function() {
    return this.getToken(MParser.LT, 0);
};

Jsx_fragment_endContext.prototype.SLASH = function() {
    return this.getToken(MParser.SLASH, 0);
};

Jsx_fragment_endContext.prototype.GT = function() {
    return this.getToken(MParser.GT, 0);
};

Jsx_fragment_endContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsx_fragment_end(this);
	}
};

Jsx_fragment_endContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsx_fragment_end(this);
	}
};




MParser.Jsx_fragment_endContext = Jsx_fragment_endContext;

MParser.prototype.jsx_fragment_end = function() {

    var localctx = new Jsx_fragment_endContext(this, this._ctx, this.state);
    this.enterRule(localctx, 466, MParser.RULE_jsx_fragment_end);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2627;
        this.match(MParser.LT);
        this.state = 2628;
        this.match(MParser.SLASH);
        this.state = 2629;
        this.match(MParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_self_closingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_jsx_self_closing;
    this.name = null; // Jsx_element_nameContext
    this.attributes = null; // Jsx_attributeContext
    return this;
}

Jsx_self_closingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_self_closingContext.prototype.constructor = Jsx_self_closingContext;

Jsx_self_closingContext.prototype.LT = function() {
    return this.getToken(MParser.LT, 0);
};

Jsx_self_closingContext.prototype.ws_plus = function() {
    return this.getTypedRuleContext(Ws_plusContext,0);
};

Jsx_self_closingContext.prototype.SLASH = function() {
    return this.getToken(MParser.SLASH, 0);
};

Jsx_self_closingContext.prototype.GT = function() {
    return this.getToken(MParser.GT, 0);
};

Jsx_self_closingContext.prototype.jsx_element_name = function() {
    return this.getTypedRuleContext(Jsx_element_nameContext,0);
};

Jsx_self_closingContext.prototype.jsx_attribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Jsx_attributeContext);
    } else {
        return this.getTypedRuleContext(Jsx_attributeContext,i);
    }
};

Jsx_self_closingContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsx_self_closing(this);
	}
};

Jsx_self_closingContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsx_self_closing(this);
	}
};




MParser.Jsx_self_closingContext = Jsx_self_closingContext;

MParser.prototype.jsx_self_closing = function() {

    var localctx = new Jsx_self_closingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 468, MParser.RULE_jsx_self_closing);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2631;
        this.match(MParser.LT);
        this.state = 2632;
        localctx.name = this.jsx_element_name();
        this.state = 2633;
        this.ws_plus();
        this.state = 2637;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MParser.JAVA) | (1 << MParser.CSHARP) | (1 << MParser.PYTHON2) | (1 << MParser.PYTHON3) | (1 << MParser.JAVASCRIPT) | (1 << MParser.SWIFT))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.CODE - 52)) | (1 << (MParser.DOCUMENT - 52)) | (1 << (MParser.BLOB - 52)) | (1 << (MParser.IMAGE - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.ITERATOR - 52)) | (1 << (MParser.CURSOR - 52)) | (1 << (MParser.HTML - 52)) | (1 << (MParser.ABSTRACT - 52)) | (1 << (MParser.ALL - 52)) | (1 << (MParser.ALWAYS - 52)) | (1 << (MParser.AND - 52)) | (1 << (MParser.ANY - 52)) | (1 << (MParser.AS - 52)) | (1 << (MParser.ASC - 52)) | (1 << (MParser.ATTR - 52)) | (1 << (MParser.ATTRIBUTE - 52)) | (1 << (MParser.ATTRIBUTES - 52)) | (1 << (MParser.BINDINGS - 52)) | (1 << (MParser.BREAK - 52)))) !== 0) || ((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (MParser.BY - 84)) | (1 << (MParser.CASE - 84)) | (1 << (MParser.CATCH - 84)) | (1 << (MParser.CATEGORY - 84)) | (1 << (MParser.CLASS - 84)) | (1 << (MParser.CLOSE - 84)) | (1 << (MParser.CONTAINS - 84)) | (1 << (MParser.DEF - 84)) | (1 << (MParser.DEFAULT - 84)) | (1 << (MParser.DEFINE - 84)) | (1 << (MParser.DELETE - 84)) | (1 << (MParser.DESC - 84)) | (1 << (MParser.DO - 84)) | (1 << (MParser.DOING - 84)) | (1 << (MParser.EACH - 84)) | (1 << (MParser.ELSE - 84)) | (1 << (MParser.ENUM - 84)) | (1 << (MParser.ENUMERATED - 84)) | (1 << (MParser.EXCEPT - 84)) | (1 << (MParser.EXECUTE - 84)) | (1 << (MParser.EXPECTING - 84)) | (1 << (MParser.EXTENDS - 84)) | (1 << (MParser.FETCH - 84)) | (1 << (MParser.FILTERED - 84)) | (1 << (MParser.FINALLY - 84)) | (1 << (MParser.FLUSH - 84)) | (1 << (MParser.FOR - 84)) | (1 << (MParser.FROM - 84)) | (1 << (MParser.GETTER - 84)) | (1 << (MParser.HAS - 84)) | (1 << (MParser.IF - 84)) | (1 << (MParser.IN - 84)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (MParser.INDEX - 116)) | (1 << (MParser.IS - 116)) | (1 << (MParser.MATCHING - 116)) | (1 << (MParser.METHOD - 116)) | (1 << (MParser.METHODS - 116)) | (1 << (MParser.MODULO - 116)) | (1 << (MParser.MUTABLE - 116)) | (1 << (MParser.NATIVE - 116)) | (1 << (MParser.NONE - 116)) | (1 << (MParser.NOT - 116)) | (1 << (MParser.NOTHING - 116)) | (1 << (MParser.NULL - 116)) | (1 << (MParser.ON - 116)) | (1 << (MParser.ONE - 116)) | (1 << (MParser.OPEN - 116)) | (1 << (MParser.OPERATOR - 116)) | (1 << (MParser.OR - 116)) | (1 << (MParser.ORDER - 116)) | (1 << (MParser.OTHERWISE - 116)) | (1 << (MParser.PASS - 116)) | (1 << (MParser.RAISE - 116)) | (1 << (MParser.READ - 116)) | (1 << (MParser.RECEIVING - 116)) | (1 << (MParser.RESOURCE - 116)) | (1 << (MParser.RETURN - 116)) | (1 << (MParser.RETURNING - 116)) | (1 << (MParser.ROWS - 116)) | (1 << (MParser.SELF - 116)) | (1 << (MParser.SETTER - 116)) | (1 << (MParser.SINGLETON - 116)) | (1 << (MParser.SORTED - 116)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (MParser.STORABLE - 148)) | (1 << (MParser.STORE - 148)) | (1 << (MParser.SWITCH - 148)) | (1 << (MParser.TEST - 148)) | (1 << (MParser.THIS - 148)) | (1 << (MParser.THROW - 148)) | (1 << (MParser.TO - 148)) | (1 << (MParser.TRY - 148)) | (1 << (MParser.VERIFYING - 148)) | (1 << (MParser.WIDGET - 148)) | (1 << (MParser.WITH - 148)) | (1 << (MParser.WHEN - 148)) | (1 << (MParser.WHERE - 148)) | (1 << (MParser.WHILE - 148)) | (1 << (MParser.WRITE - 148)) | (1 << (MParser.SYMBOL_IDENTIFIER - 148)) | (1 << (MParser.TYPE_IDENTIFIER - 148)) | (1 << (MParser.VARIABLE_IDENTIFIER - 148)))) !== 0)) {
            this.state = 2634;
            localctx.attributes = this.jsx_attribute();
            this.state = 2639;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2640;
        this.match(MParser.SLASH);
        this.state = 2641;
        this.match(MParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_openingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_jsx_opening;
    this.name = null; // Jsx_element_nameContext
    this.attributes = null; // Jsx_attributeContext
    return this;
}

Jsx_openingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_openingContext.prototype.constructor = Jsx_openingContext;

Jsx_openingContext.prototype.LT = function() {
    return this.getToken(MParser.LT, 0);
};

Jsx_openingContext.prototype.ws_plus = function() {
    return this.getTypedRuleContext(Ws_plusContext,0);
};

Jsx_openingContext.prototype.GT = function() {
    return this.getToken(MParser.GT, 0);
};

Jsx_openingContext.prototype.jsx_element_name = function() {
    return this.getTypedRuleContext(Jsx_element_nameContext,0);
};

Jsx_openingContext.prototype.jsx_attribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Jsx_attributeContext);
    } else {
        return this.getTypedRuleContext(Jsx_attributeContext,i);
    }
};

Jsx_openingContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsx_opening(this);
	}
};

Jsx_openingContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsx_opening(this);
	}
};




MParser.Jsx_openingContext = Jsx_openingContext;

MParser.prototype.jsx_opening = function() {

    var localctx = new Jsx_openingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 470, MParser.RULE_jsx_opening);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2643;
        this.match(MParser.LT);
        this.state = 2644;
        localctx.name = this.jsx_element_name();
        this.state = 2645;
        this.ws_plus();
        this.state = 2649;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MParser.JAVA) | (1 << MParser.CSHARP) | (1 << MParser.PYTHON2) | (1 << MParser.PYTHON3) | (1 << MParser.JAVASCRIPT) | (1 << MParser.SWIFT))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.CODE - 52)) | (1 << (MParser.DOCUMENT - 52)) | (1 << (MParser.BLOB - 52)) | (1 << (MParser.IMAGE - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.ITERATOR - 52)) | (1 << (MParser.CURSOR - 52)) | (1 << (MParser.HTML - 52)) | (1 << (MParser.ABSTRACT - 52)) | (1 << (MParser.ALL - 52)) | (1 << (MParser.ALWAYS - 52)) | (1 << (MParser.AND - 52)) | (1 << (MParser.ANY - 52)) | (1 << (MParser.AS - 52)) | (1 << (MParser.ASC - 52)) | (1 << (MParser.ATTR - 52)) | (1 << (MParser.ATTRIBUTE - 52)) | (1 << (MParser.ATTRIBUTES - 52)) | (1 << (MParser.BINDINGS - 52)) | (1 << (MParser.BREAK - 52)))) !== 0) || ((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (MParser.BY - 84)) | (1 << (MParser.CASE - 84)) | (1 << (MParser.CATCH - 84)) | (1 << (MParser.CATEGORY - 84)) | (1 << (MParser.CLASS - 84)) | (1 << (MParser.CLOSE - 84)) | (1 << (MParser.CONTAINS - 84)) | (1 << (MParser.DEF - 84)) | (1 << (MParser.DEFAULT - 84)) | (1 << (MParser.DEFINE - 84)) | (1 << (MParser.DELETE - 84)) | (1 << (MParser.DESC - 84)) | (1 << (MParser.DO - 84)) | (1 << (MParser.DOING - 84)) | (1 << (MParser.EACH - 84)) | (1 << (MParser.ELSE - 84)) | (1 << (MParser.ENUM - 84)) | (1 << (MParser.ENUMERATED - 84)) | (1 << (MParser.EXCEPT - 84)) | (1 << (MParser.EXECUTE - 84)) | (1 << (MParser.EXPECTING - 84)) | (1 << (MParser.EXTENDS - 84)) | (1 << (MParser.FETCH - 84)) | (1 << (MParser.FILTERED - 84)) | (1 << (MParser.FINALLY - 84)) | (1 << (MParser.FLUSH - 84)) | (1 << (MParser.FOR - 84)) | (1 << (MParser.FROM - 84)) | (1 << (MParser.GETTER - 84)) | (1 << (MParser.HAS - 84)) | (1 << (MParser.IF - 84)) | (1 << (MParser.IN - 84)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (MParser.INDEX - 116)) | (1 << (MParser.IS - 116)) | (1 << (MParser.MATCHING - 116)) | (1 << (MParser.METHOD - 116)) | (1 << (MParser.METHODS - 116)) | (1 << (MParser.MODULO - 116)) | (1 << (MParser.MUTABLE - 116)) | (1 << (MParser.NATIVE - 116)) | (1 << (MParser.NONE - 116)) | (1 << (MParser.NOT - 116)) | (1 << (MParser.NOTHING - 116)) | (1 << (MParser.NULL - 116)) | (1 << (MParser.ON - 116)) | (1 << (MParser.ONE - 116)) | (1 << (MParser.OPEN - 116)) | (1 << (MParser.OPERATOR - 116)) | (1 << (MParser.OR - 116)) | (1 << (MParser.ORDER - 116)) | (1 << (MParser.OTHERWISE - 116)) | (1 << (MParser.PASS - 116)) | (1 << (MParser.RAISE - 116)) | (1 << (MParser.READ - 116)) | (1 << (MParser.RECEIVING - 116)) | (1 << (MParser.RESOURCE - 116)) | (1 << (MParser.RETURN - 116)) | (1 << (MParser.RETURNING - 116)) | (1 << (MParser.ROWS - 116)) | (1 << (MParser.SELF - 116)) | (1 << (MParser.SETTER - 116)) | (1 << (MParser.SINGLETON - 116)) | (1 << (MParser.SORTED - 116)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (MParser.STORABLE - 148)) | (1 << (MParser.STORE - 148)) | (1 << (MParser.SWITCH - 148)) | (1 << (MParser.TEST - 148)) | (1 << (MParser.THIS - 148)) | (1 << (MParser.THROW - 148)) | (1 << (MParser.TO - 148)) | (1 << (MParser.TRY - 148)) | (1 << (MParser.VERIFYING - 148)) | (1 << (MParser.WIDGET - 148)) | (1 << (MParser.WITH - 148)) | (1 << (MParser.WHEN - 148)) | (1 << (MParser.WHERE - 148)) | (1 << (MParser.WHILE - 148)) | (1 << (MParser.WRITE - 148)) | (1 << (MParser.SYMBOL_IDENTIFIER - 148)) | (1 << (MParser.TYPE_IDENTIFIER - 148)) | (1 << (MParser.VARIABLE_IDENTIFIER - 148)))) !== 0)) {
            this.state = 2646;
            localctx.attributes = this.jsx_attribute();
            this.state = 2651;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2652;
        this.match(MParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_closingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_jsx_closing;
    this.name = null; // Jsx_element_nameContext
    return this;
}

Jsx_closingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_closingContext.prototype.constructor = Jsx_closingContext;

Jsx_closingContext.prototype.LT = function() {
    return this.getToken(MParser.LT, 0);
};

Jsx_closingContext.prototype.SLASH = function() {
    return this.getToken(MParser.SLASH, 0);
};

Jsx_closingContext.prototype.GT = function() {
    return this.getToken(MParser.GT, 0);
};

Jsx_closingContext.prototype.jsx_element_name = function() {
    return this.getTypedRuleContext(Jsx_element_nameContext,0);
};

Jsx_closingContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsx_closing(this);
	}
};

Jsx_closingContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsx_closing(this);
	}
};




MParser.Jsx_closingContext = Jsx_closingContext;

MParser.prototype.jsx_closing = function() {

    var localctx = new Jsx_closingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 472, MParser.RULE_jsx_closing);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2654;
        this.match(MParser.LT);
        this.state = 2655;
        this.match(MParser.SLASH);
        this.state = 2656;
        localctx.name = this.jsx_element_name();
        this.state = 2657;
        this.match(MParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_element_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_jsx_element_name;
    return this;
}

Jsx_element_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_element_nameContext.prototype.constructor = Jsx_element_nameContext;

Jsx_element_nameContext.prototype.jsx_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Jsx_identifierContext);
    } else {
        return this.getTypedRuleContext(Jsx_identifierContext,i);
    }
};

Jsx_element_nameContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.DOT);
    } else {
        return this.getToken(MParser.DOT, i);
    }
};


Jsx_element_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsx_element_name(this);
	}
};

Jsx_element_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsx_element_name(this);
	}
};




MParser.Jsx_element_nameContext = Jsx_element_nameContext;

MParser.prototype.jsx_element_name = function() {

    var localctx = new Jsx_element_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 474, MParser.RULE_jsx_element_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2659;
        this.jsx_identifier();
        this.state = 2664;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MParser.DOT) {
            this.state = 2660;
            this.match(MParser.DOT);
            this.state = 2661;
            this.jsx_identifier();
            this.state = 2666;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_jsx_identifier;
    return this;
}

Jsx_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_identifierContext.prototype.constructor = Jsx_identifierContext;

Jsx_identifierContext.prototype.identifier_or_keyword = function() {
    return this.getTypedRuleContext(Identifier_or_keywordContext,0);
};

Jsx_identifierContext.prototype.nospace_hyphen_identifier_or_keyword = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Nospace_hyphen_identifier_or_keywordContext);
    } else {
        return this.getTypedRuleContext(Nospace_hyphen_identifier_or_keywordContext,i);
    }
};

Jsx_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsx_identifier(this);
	}
};

Jsx_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsx_identifier(this);
	}
};




MParser.Jsx_identifierContext = Jsx_identifierContext;

MParser.prototype.jsx_identifier = function() {

    var localctx = new Jsx_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 476, MParser.RULE_jsx_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2667;
        this.identifier_or_keyword();
        this.state = 2671;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,230,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2668;
                this.nospace_hyphen_identifier_or_keyword(); 
            }
            this.state = 2673;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,230,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_attributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_jsx_attribute;
    this.name = null; // Jsx_identifierContext
    this.value = null; // Jsx_attribute_valueContext
    return this;
}

Jsx_attributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_attributeContext.prototype.constructor = Jsx_attributeContext;

Jsx_attributeContext.prototype.ws_plus = function() {
    return this.getTypedRuleContext(Ws_plusContext,0);
};

Jsx_attributeContext.prototype.jsx_identifier = function() {
    return this.getTypedRuleContext(Jsx_identifierContext,0);
};

Jsx_attributeContext.prototype.EQ = function() {
    return this.getToken(MParser.EQ, 0);
};

Jsx_attributeContext.prototype.jsx_attribute_value = function() {
    return this.getTypedRuleContext(Jsx_attribute_valueContext,0);
};

Jsx_attributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsx_attribute(this);
	}
};

Jsx_attributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsx_attribute(this);
	}
};




MParser.Jsx_attributeContext = Jsx_attributeContext;

MParser.prototype.jsx_attribute = function() {

    var localctx = new Jsx_attributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 478, MParser.RULE_jsx_attribute);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2674;
        localctx.name = this.jsx_identifier();
        this.state = 2677;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MParser.EQ) {
            this.state = 2675;
            this.match(MParser.EQ);
            this.state = 2676;
            localctx.value = this.jsx_attribute_value();
        }

        this.state = 2679;
        this.ws_plus();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_attribute_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_jsx_attribute_value;
    return this;
}

Jsx_attribute_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_attribute_valueContext.prototype.constructor = Jsx_attribute_valueContext;


 
Jsx_attribute_valueContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JsxValueContext(parser, ctx) {
	Jsx_attribute_valueContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Jsx_attribute_valueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JsxValueContext.prototype = Object.create(Jsx_attribute_valueContext.prototype);
JsxValueContext.prototype.constructor = JsxValueContext;

MParser.JsxValueContext = JsxValueContext;

JsxValueContext.prototype.LCURL = function() {
    return this.getToken(MParser.LCURL, 0);
};

JsxValueContext.prototype.RCURL = function() {
    return this.getToken(MParser.RCURL, 0);
};

JsxValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
JsxValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsxValue(this);
	}
};

JsxValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsxValue(this);
	}
};


function JsxLiteralContext(parser, ctx) {
	Jsx_attribute_valueContext.call(this, parser);
    Jsx_attribute_valueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JsxLiteralContext.prototype = Object.create(Jsx_attribute_valueContext.prototype);
JsxLiteralContext.prototype.constructor = JsxLiteralContext;

MParser.JsxLiteralContext = JsxLiteralContext;

JsxLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(MParser.TEXT_LITERAL, 0);
};
JsxLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsxLiteral(this);
	}
};

JsxLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsxLiteral(this);
	}
};



MParser.Jsx_attribute_valueContext = Jsx_attribute_valueContext;

MParser.prototype.jsx_attribute_value = function() {

    var localctx = new Jsx_attribute_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 480, MParser.RULE_jsx_attribute_value);
    try {
        this.state = 2686;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.TEXT_LITERAL:
            localctx = new JsxLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2681;
            this.match(MParser.TEXT_LITERAL);
            break;
        case MParser.LCURL:
            localctx = new JsxValueContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2682;
            this.match(MParser.LCURL);
            this.state = 2683;
            localctx.exp = this.expression(0);
            this.state = 2684;
            this.match(MParser.RCURL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_childrenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_jsx_children;
    return this;
}

Jsx_childrenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_childrenContext.prototype.constructor = Jsx_childrenContext;

Jsx_childrenContext.prototype.jsx_child = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Jsx_childContext);
    } else {
        return this.getTypedRuleContext(Jsx_childContext,i);
    }
};

Jsx_childrenContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsx_children(this);
	}
};

Jsx_childrenContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsx_children(this);
	}
};




MParser.Jsx_childrenContext = Jsx_childrenContext;

MParser.prototype.jsx_children = function() {

    var localctx = new Jsx_childrenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 482, MParser.RULE_jsx_children);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2689; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2688;
        		this.jsx_child();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2691; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,233, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_childContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_jsx_child;
    return this;
}

Jsx_childContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_childContext.prototype.constructor = Jsx_childContext;


 
Jsx_childContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JsxTextContext(parser, ctx) {
	Jsx_childContext.call(this, parser);
    this.text = null; // Jsx_textContext;
    Jsx_childContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JsxTextContext.prototype = Object.create(Jsx_childContext.prototype);
JsxTextContext.prototype.constructor = JsxTextContext;

MParser.JsxTextContext = JsxTextContext;

JsxTextContext.prototype.jsx_text = function() {
    return this.getTypedRuleContext(Jsx_textContext,0);
};
JsxTextContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsxText(this);
	}
};

JsxTextContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsxText(this);
	}
};


function JsxChildContext(parser, ctx) {
	Jsx_childContext.call(this, parser);
    this.jsx = null; // Jsx_elementContext;
    Jsx_childContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JsxChildContext.prototype = Object.create(Jsx_childContext.prototype);
JsxChildContext.prototype.constructor = JsxChildContext;

MParser.JsxChildContext = JsxChildContext;

JsxChildContext.prototype.jsx_element = function() {
    return this.getTypedRuleContext(Jsx_elementContext,0);
};
JsxChildContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsxChild(this);
	}
};

JsxChildContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsxChild(this);
	}
};


function JsxCodeContext(parser, ctx) {
	Jsx_childContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Jsx_childContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JsxCodeContext.prototype = Object.create(Jsx_childContext.prototype);
JsxCodeContext.prototype.constructor = JsxCodeContext;

MParser.JsxCodeContext = JsxCodeContext;

JsxCodeContext.prototype.LCURL = function() {
    return this.getToken(MParser.LCURL, 0);
};

JsxCodeContext.prototype.RCURL = function() {
    return this.getToken(MParser.RCURL, 0);
};

JsxCodeContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
JsxCodeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsxCode(this);
	}
};

JsxCodeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsxCode(this);
	}
};



MParser.Jsx_childContext = Jsx_childContext;

MParser.prototype.jsx_child = function() {

    var localctx = new Jsx_childContext(this, this._ctx, this.state);
    this.enterRule(localctx, 484, MParser.RULE_jsx_child);
    var _la = 0; // Token type
    try {
        this.state = 2700;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.INDENT:
        case MParser.DEDENT:
        case MParser.LF_TAB:
        case MParser.LF_MORE:
        case MParser.LF:
        case MParser.TAB:
        case MParser.WS:
        case MParser.COMMENT:
        case MParser.JAVA:
        case MParser.CSHARP:
        case MParser.PYTHON2:
        case MParser.PYTHON3:
        case MParser.JAVASCRIPT:
        case MParser.SWIFT:
        case MParser.COLON:
        case MParser.SEMI:
        case MParser.COMMA:
        case MParser.RANGE:
        case MParser.DOT:
        case MParser.LPAR:
        case MParser.RPAR:
        case MParser.LBRAK:
        case MParser.RBRAK:
        case MParser.QMARK:
        case MParser.XMARK:
        case MParser.AMP:
        case MParser.AMP2:
        case MParser.PIPE:
        case MParser.PIPE2:
        case MParser.PLUS:
        case MParser.MINUS:
        case MParser.STAR:
        case MParser.SLASH:
        case MParser.BSLASH:
        case MParser.PERCENT:
        case MParser.GTE:
        case MParser.LTE:
        case MParser.LTGT:
        case MParser.LTCOLONGT:
        case MParser.EQ:
        case MParser.XEQ:
        case MParser.EQ2:
        case MParser.TEQ:
        case MParser.TILDE:
        case MParser.LARROW:
        case MParser.RARROW:
        case MParser.EGT:
        case MParser.BOOLEAN:
        case MParser.CHARACTER:
        case MParser.TEXT:
        case MParser.INTEGER:
        case MParser.DECIMAL:
        case MParser.DATE:
        case MParser.TIME:
        case MParser.DATETIME:
        case MParser.PERIOD:
        case MParser.VERSION:
        case MParser.METHOD_COLON:
        case MParser.CODE:
        case MParser.DOCUMENT:
        case MParser.BLOB:
        case MParser.IMAGE:
        case MParser.UUID:
        case MParser.ITERATOR:
        case MParser.CURSOR:
        case MParser.HTML:
        case MParser.TYPE:
        case MParser.ABSTRACT:
        case MParser.ALL:
        case MParser.ALWAYS:
        case MParser.AND:
        case MParser.ANY:
        case MParser.AS:
        case MParser.ASC:
        case MParser.ATTR:
        case MParser.ATTRIBUTE:
        case MParser.ATTRIBUTES:
        case MParser.BINDINGS:
        case MParser.BREAK:
        case MParser.BY:
        case MParser.CASE:
        case MParser.CATCH:
        case MParser.CATEGORY:
        case MParser.CLASS:
        case MParser.CLOSE:
        case MParser.CONTAINS:
        case MParser.DEF:
        case MParser.DEFAULT:
        case MParser.DEFINE:
        case MParser.DELETE:
        case MParser.DESC:
        case MParser.DO:
        case MParser.DOING:
        case MParser.EACH:
        case MParser.ELSE:
        case MParser.ENUM:
        case MParser.ENUMERATED:
        case MParser.EXCEPT:
        case MParser.EXECUTE:
        case MParser.EXPECTING:
        case MParser.EXTENDS:
        case MParser.FETCH:
        case MParser.FILTERED:
        case MParser.FINALLY:
        case MParser.FLUSH:
        case MParser.FOR:
        case MParser.FROM:
        case MParser.GETTER:
        case MParser.HAS:
        case MParser.IF:
        case MParser.IN:
        case MParser.INDEX:
        case MParser.INVOKE_COLON:
        case MParser.IS:
        case MParser.MATCHING:
        case MParser.METHOD:
        case MParser.METHODS:
        case MParser.MODULO:
        case MParser.MUTABLE:
        case MParser.NATIVE:
        case MParser.NONE:
        case MParser.NOT:
        case MParser.NOTHING:
        case MParser.NULL:
        case MParser.ON:
        case MParser.ONE:
        case MParser.OPEN:
        case MParser.OPERATOR:
        case MParser.OR:
        case MParser.ORDER:
        case MParser.OTHERWISE:
        case MParser.PASS:
        case MParser.RAISE:
        case MParser.READ:
        case MParser.RECEIVING:
        case MParser.RESOURCE:
        case MParser.RETURN:
        case MParser.RETURNING:
        case MParser.ROWS:
        case MParser.SELF:
        case MParser.SETTER:
        case MParser.SINGLETON:
        case MParser.SORTED:
        case MParser.STORABLE:
        case MParser.STORE:
        case MParser.SWITCH:
        case MParser.TEST:
        case MParser.THEN:
        case MParser.THIS:
        case MParser.THROW:
        case MParser.TO:
        case MParser.TRY:
        case MParser.VERIFYING:
        case MParser.WIDGET:
        case MParser.WITH:
        case MParser.WHEN:
        case MParser.WHERE:
        case MParser.WHILE:
        case MParser.WRITE:
        case MParser.BOOLEAN_LITERAL:
        case MParser.CHAR_LITERAL:
        case MParser.MIN_INTEGER:
        case MParser.MAX_INTEGER:
        case MParser.SYMBOL_IDENTIFIER:
        case MParser.TYPE_IDENTIFIER:
        case MParser.VARIABLE_IDENTIFIER:
        case MParser.NATIVE_IDENTIFIER:
        case MParser.DOLLAR_IDENTIFIER:
        case MParser.ARONDBASE_IDENTIFIER:
        case MParser.TEXT_LITERAL:
        case MParser.UUID_LITERAL:
        case MParser.INTEGER_LITERAL:
        case MParser.HEXA_LITERAL:
        case MParser.DECIMAL_LITERAL:
        case MParser.DATETIME_LITERAL:
        case MParser.TIME_LITERAL:
        case MParser.DATE_LITERAL:
        case MParser.PERIOD_LITERAL:
        case MParser.VERSION_LITERAL:
            localctx = new JsxTextContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2693;
            localctx.text = this.jsx_text();
            break;
        case MParser.LT:
            localctx = new JsxChildContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2694;
            localctx.jsx = this.jsx_element();
            break;
        case MParser.LCURL:
            localctx = new JsxCodeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2695;
            this.match(MParser.LCURL);
            this.state = 2697;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MParser.LPAR - 20)) | (1 << (MParser.LBRAK - 20)) | (1 << (MParser.LCURL - 20)) | (1 << (MParser.MINUS - 20)) | (1 << (MParser.LT - 20)) | (1 << (MParser.LTGT - 20)) | (1 << (MParser.LTCOLONGT - 20)))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.CODE - 52)) | (1 << (MParser.DOCUMENT - 52)) | (1 << (MParser.BLOB - 52)) | (1 << (MParser.IMAGE - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.ITERATOR - 52)) | (1 << (MParser.CURSOR - 52)) | (1 << (MParser.HTML - 52)) | (1 << (MParser.ANY - 52)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (MParser.EXECUTE - 103)) | (1 << (MParser.FETCH - 103)) | (1 << (MParser.MUTABLE - 103)) | (1 << (MParser.NONE - 103)) | (1 << (MParser.NOT - 103)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (MParser.READ - 138)) | (1 << (MParser.SELF - 138)) | (1 << (MParser.SORTED - 138)) | (1 << (MParser.THIS - 138)) | (1 << (MParser.BOOLEAN_LITERAL - 138)) | (1 << (MParser.CHAR_LITERAL - 138)) | (1 << (MParser.MIN_INTEGER - 138)) | (1 << (MParser.MAX_INTEGER - 138)) | (1 << (MParser.SYMBOL_IDENTIFIER - 138)) | (1 << (MParser.TYPE_IDENTIFIER - 138)))) !== 0) || ((((_la - 170)) & ~0x1f) == 0 && ((1 << (_la - 170)) & ((1 << (MParser.VARIABLE_IDENTIFIER - 170)) | (1 << (MParser.TEXT_LITERAL - 170)) | (1 << (MParser.UUID_LITERAL - 170)) | (1 << (MParser.INTEGER_LITERAL - 170)) | (1 << (MParser.HEXA_LITERAL - 170)) | (1 << (MParser.DECIMAL_LITERAL - 170)) | (1 << (MParser.DATETIME_LITERAL - 170)) | (1 << (MParser.TIME_LITERAL - 170)) | (1 << (MParser.DATE_LITERAL - 170)) | (1 << (MParser.PERIOD_LITERAL - 170)) | (1 << (MParser.VERSION_LITERAL - 170)))) !== 0)) {
                this.state = 2696;
                localctx.exp = this.expression(0);
            }

            this.state = 2699;
            this.match(MParser.RCURL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Jsx_textContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_jsx_text;
    return this;
}

Jsx_textContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Jsx_textContext.prototype.constructor = Jsx_textContext;

Jsx_textContext.prototype.LCURL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.LCURL);
    } else {
        return this.getToken(MParser.LCURL, i);
    }
};


Jsx_textContext.prototype.RCURL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.RCURL);
    } else {
        return this.getToken(MParser.RCURL, i);
    }
};


Jsx_textContext.prototype.LT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.LT);
    } else {
        return this.getToken(MParser.LT, i);
    }
};


Jsx_textContext.prototype.GT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.GT);
    } else {
        return this.getToken(MParser.GT, i);
    }
};


Jsx_textContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterJsx_text(this);
	}
};

Jsx_textContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitJsx_text(this);
	}
};




MParser.Jsx_textContext = Jsx_textContext;

MParser.prototype.jsx_text = function() {

    var localctx = new Jsx_textContext(this, this._ctx, this.state);
    this.enterRule(localctx, 486, MParser.RULE_jsx_text);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2703; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2702;
        		_la = this._input.LA(1);
        		if(_la<=0 || ((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (MParser.LCURL - 24)) | (1 << (MParser.RCURL - 24)) | (1 << (MParser.GT - 24)) | (1 << (MParser.LT - 24)))) !== 0)) {
        		this._errHandler.recoverInline(this);
        		}
        		else {
        			this._errHandler.reportMatch(this);
        		    this.consume();
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2705; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,236, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Css_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_css_expression;
    this.field = null; // Css_fieldContext
    return this;
}

Css_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Css_expressionContext.prototype.constructor = Css_expressionContext;

Css_expressionContext.prototype.LCURL = function() {
    return this.getToken(MParser.LCURL, 0);
};

Css_expressionContext.prototype.RCURL = function() {
    return this.getToken(MParser.RCURL, 0);
};

Css_expressionContext.prototype.css_field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Css_fieldContext);
    } else {
        return this.getTypedRuleContext(Css_fieldContext,i);
    }
};

Css_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCss_expression(this);
	}
};

Css_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCss_expression(this);
	}
};




MParser.Css_expressionContext = Css_expressionContext;

MParser.prototype.css_expression = function() {

    var localctx = new Css_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 488, MParser.RULE_css_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2707;
        this.match(MParser.LCURL);
        this.state = 2709; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2708;
            localctx.field = this.css_field();
            this.state = 2711; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 9)) & ~0x1f) == 0 && ((1 << (_la - 9)) & ((1 << (MParser.JAVA - 9)) | (1 << (MParser.CSHARP - 9)) | (1 << (MParser.PYTHON2 - 9)) | (1 << (MParser.PYTHON3 - 9)) | (1 << (MParser.JAVASCRIPT - 9)) | (1 << (MParser.SWIFT - 9)) | (1 << (MParser.MINUS - 9)))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.CODE - 52)) | (1 << (MParser.DOCUMENT - 52)) | (1 << (MParser.BLOB - 52)) | (1 << (MParser.IMAGE - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.ITERATOR - 52)) | (1 << (MParser.CURSOR - 52)) | (1 << (MParser.HTML - 52)) | (1 << (MParser.ABSTRACT - 52)) | (1 << (MParser.ALL - 52)) | (1 << (MParser.ALWAYS - 52)) | (1 << (MParser.AND - 52)) | (1 << (MParser.ANY - 52)) | (1 << (MParser.AS - 52)) | (1 << (MParser.ASC - 52)) | (1 << (MParser.ATTR - 52)) | (1 << (MParser.ATTRIBUTE - 52)) | (1 << (MParser.ATTRIBUTES - 52)) | (1 << (MParser.BINDINGS - 52)) | (1 << (MParser.BREAK - 52)))) !== 0) || ((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (MParser.BY - 84)) | (1 << (MParser.CASE - 84)) | (1 << (MParser.CATCH - 84)) | (1 << (MParser.CATEGORY - 84)) | (1 << (MParser.CLASS - 84)) | (1 << (MParser.CLOSE - 84)) | (1 << (MParser.CONTAINS - 84)) | (1 << (MParser.DEF - 84)) | (1 << (MParser.DEFAULT - 84)) | (1 << (MParser.DEFINE - 84)) | (1 << (MParser.DELETE - 84)) | (1 << (MParser.DESC - 84)) | (1 << (MParser.DO - 84)) | (1 << (MParser.DOING - 84)) | (1 << (MParser.EACH - 84)) | (1 << (MParser.ELSE - 84)) | (1 << (MParser.ENUM - 84)) | (1 << (MParser.ENUMERATED - 84)) | (1 << (MParser.EXCEPT - 84)) | (1 << (MParser.EXECUTE - 84)) | (1 << (MParser.EXPECTING - 84)) | (1 << (MParser.EXTENDS - 84)) | (1 << (MParser.FETCH - 84)) | (1 << (MParser.FILTERED - 84)) | (1 << (MParser.FINALLY - 84)) | (1 << (MParser.FLUSH - 84)) | (1 << (MParser.FOR - 84)) | (1 << (MParser.FROM - 84)) | (1 << (MParser.GETTER - 84)) | (1 << (MParser.HAS - 84)) | (1 << (MParser.IF - 84)) | (1 << (MParser.IN - 84)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (MParser.INDEX - 116)) | (1 << (MParser.IS - 116)) | (1 << (MParser.MATCHING - 116)) | (1 << (MParser.METHOD - 116)) | (1 << (MParser.METHODS - 116)) | (1 << (MParser.MODULO - 116)) | (1 << (MParser.MUTABLE - 116)) | (1 << (MParser.NATIVE - 116)) | (1 << (MParser.NONE - 116)) | (1 << (MParser.NOT - 116)) | (1 << (MParser.NOTHING - 116)) | (1 << (MParser.NULL - 116)) | (1 << (MParser.ON - 116)) | (1 << (MParser.ONE - 116)) | (1 << (MParser.OPEN - 116)) | (1 << (MParser.OPERATOR - 116)) | (1 << (MParser.OR - 116)) | (1 << (MParser.ORDER - 116)) | (1 << (MParser.OTHERWISE - 116)) | (1 << (MParser.PASS - 116)) | (1 << (MParser.RAISE - 116)) | (1 << (MParser.READ - 116)) | (1 << (MParser.RECEIVING - 116)) | (1 << (MParser.RESOURCE - 116)) | (1 << (MParser.RETURN - 116)) | (1 << (MParser.RETURNING - 116)) | (1 << (MParser.ROWS - 116)) | (1 << (MParser.SELF - 116)) | (1 << (MParser.SETTER - 116)) | (1 << (MParser.SINGLETON - 116)) | (1 << (MParser.SORTED - 116)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (MParser.STORABLE - 148)) | (1 << (MParser.STORE - 148)) | (1 << (MParser.SWITCH - 148)) | (1 << (MParser.TEST - 148)) | (1 << (MParser.THIS - 148)) | (1 << (MParser.THROW - 148)) | (1 << (MParser.TO - 148)) | (1 << (MParser.TRY - 148)) | (1 << (MParser.VERIFYING - 148)) | (1 << (MParser.WIDGET - 148)) | (1 << (MParser.WITH - 148)) | (1 << (MParser.WHEN - 148)) | (1 << (MParser.WHERE - 148)) | (1 << (MParser.WHILE - 148)) | (1 << (MParser.WRITE - 148)) | (1 << (MParser.SYMBOL_IDENTIFIER - 148)) | (1 << (MParser.TYPE_IDENTIFIER - 148)) | (1 << (MParser.VARIABLE_IDENTIFIER - 148)))) !== 0));
        this.state = 2713;
        this.match(MParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Css_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_css_field;
    this.name = null; // Css_identifierContext
    this.value = null; // Css_valueContext
    return this;
}

Css_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Css_fieldContext.prototype.constructor = Css_fieldContext;

Css_fieldContext.prototype.COLON = function() {
    return this.getToken(MParser.COLON, 0);
};

Css_fieldContext.prototype.SEMI = function() {
    return this.getToken(MParser.SEMI, 0);
};

Css_fieldContext.prototype.css_identifier = function() {
    return this.getTypedRuleContext(Css_identifierContext,0);
};

Css_fieldContext.prototype.css_value = function() {
    return this.getTypedRuleContext(Css_valueContext,0);
};

Css_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCss_field(this);
	}
};

Css_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCss_field(this);
	}
};




MParser.Css_fieldContext = Css_fieldContext;

MParser.prototype.css_field = function() {

    var localctx = new Css_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 490, MParser.RULE_css_field);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2715;
        localctx.name = this.css_identifier(0);
        this.state = 2716;
        this.match(MParser.COLON);
        this.state = 2717;
        localctx.value = this.css_value();
        this.state = 2718;
        this.match(MParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Css_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_css_identifier;
    return this;
}

Css_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Css_identifierContext.prototype.constructor = Css_identifierContext;

Css_identifierContext.prototype.identifier_or_keyword = function() {
    return this.getTypedRuleContext(Identifier_or_keywordContext,0);
};

Css_identifierContext.prototype.MINUS = function() {
    return this.getToken(MParser.MINUS, 0);
};

Css_identifierContext.prototype.nospace_identifier_or_keyword = function() {
    return this.getTypedRuleContext(Nospace_identifier_or_keywordContext,0);
};

Css_identifierContext.prototype.css_identifier = function() {
    return this.getTypedRuleContext(Css_identifierContext,0);
};

Css_identifierContext.prototype.nospace_hyphen_identifier_or_keyword = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Nospace_hyphen_identifier_or_keywordContext);
    } else {
        return this.getTypedRuleContext(Nospace_hyphen_identifier_or_keywordContext,i);
    }
};

Css_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCss_identifier(this);
	}
};

Css_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCss_identifier(this);
	}
};



MParser.prototype.css_identifier = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Css_identifierContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 492;
    this.enterRecursionRule(localctx, 492, MParser.RULE_css_identifier, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2724;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.JAVA:
        case MParser.CSHARP:
        case MParser.PYTHON2:
        case MParser.PYTHON3:
        case MParser.JAVASCRIPT:
        case MParser.SWIFT:
        case MParser.BOOLEAN:
        case MParser.CHARACTER:
        case MParser.TEXT:
        case MParser.INTEGER:
        case MParser.DECIMAL:
        case MParser.DATE:
        case MParser.TIME:
        case MParser.DATETIME:
        case MParser.PERIOD:
        case MParser.VERSION:
        case MParser.CODE:
        case MParser.DOCUMENT:
        case MParser.BLOB:
        case MParser.IMAGE:
        case MParser.UUID:
        case MParser.ITERATOR:
        case MParser.CURSOR:
        case MParser.HTML:
        case MParser.ABSTRACT:
        case MParser.ALL:
        case MParser.ALWAYS:
        case MParser.AND:
        case MParser.ANY:
        case MParser.AS:
        case MParser.ASC:
        case MParser.ATTR:
        case MParser.ATTRIBUTE:
        case MParser.ATTRIBUTES:
        case MParser.BINDINGS:
        case MParser.BREAK:
        case MParser.BY:
        case MParser.CASE:
        case MParser.CATCH:
        case MParser.CATEGORY:
        case MParser.CLASS:
        case MParser.CLOSE:
        case MParser.CONTAINS:
        case MParser.DEF:
        case MParser.DEFAULT:
        case MParser.DEFINE:
        case MParser.DELETE:
        case MParser.DESC:
        case MParser.DO:
        case MParser.DOING:
        case MParser.EACH:
        case MParser.ELSE:
        case MParser.ENUM:
        case MParser.ENUMERATED:
        case MParser.EXCEPT:
        case MParser.EXECUTE:
        case MParser.EXPECTING:
        case MParser.EXTENDS:
        case MParser.FETCH:
        case MParser.FILTERED:
        case MParser.FINALLY:
        case MParser.FLUSH:
        case MParser.FOR:
        case MParser.FROM:
        case MParser.GETTER:
        case MParser.HAS:
        case MParser.IF:
        case MParser.IN:
        case MParser.INDEX:
        case MParser.IS:
        case MParser.MATCHING:
        case MParser.METHOD:
        case MParser.METHODS:
        case MParser.MODULO:
        case MParser.MUTABLE:
        case MParser.NATIVE:
        case MParser.NONE:
        case MParser.NOT:
        case MParser.NOTHING:
        case MParser.NULL:
        case MParser.ON:
        case MParser.ONE:
        case MParser.OPEN:
        case MParser.OPERATOR:
        case MParser.OR:
        case MParser.ORDER:
        case MParser.OTHERWISE:
        case MParser.PASS:
        case MParser.RAISE:
        case MParser.READ:
        case MParser.RECEIVING:
        case MParser.RESOURCE:
        case MParser.RETURN:
        case MParser.RETURNING:
        case MParser.ROWS:
        case MParser.SELF:
        case MParser.SETTER:
        case MParser.SINGLETON:
        case MParser.SORTED:
        case MParser.STORABLE:
        case MParser.STORE:
        case MParser.SWITCH:
        case MParser.TEST:
        case MParser.THIS:
        case MParser.THROW:
        case MParser.TO:
        case MParser.TRY:
        case MParser.VERIFYING:
        case MParser.WIDGET:
        case MParser.WITH:
        case MParser.WHEN:
        case MParser.WHERE:
        case MParser.WHILE:
        case MParser.WRITE:
        case MParser.SYMBOL_IDENTIFIER:
        case MParser.TYPE_IDENTIFIER:
        case MParser.VARIABLE_IDENTIFIER:
            this.state = 2721;
            this.identifier_or_keyword();
            break;
        case MParser.MINUS:
            this.state = 2722;
            this.match(MParser.MINUS);
            this.state = 2723;
            this.nospace_identifier_or_keyword();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2734;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,240,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Css_identifierContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, MParser.RULE_css_identifier);
                this.state = 2726;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2728; 
                this._errHandler.sync(this);
                var _alt = 1;
                do {
                	switch (_alt) {
                	case 1:
                		this.state = 2727;
                		this.nospace_hyphen_identifier_or_keyword();
                		break;
                	default:
                		throw new antlr4.error.NoViableAltException(this);
                	}
                	this.state = 2730; 
                	this._errHandler.sync(this);
                	_alt = this._interp.adaptivePredict(this._input,239, this._ctx);
                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER ); 
            }
            this.state = 2736;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,240,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Css_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_css_value;
    return this;
}

Css_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Css_valueContext.prototype.constructor = Css_valueContext;


 
Css_valueContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CssTextContext(parser, ctx) {
	Css_valueContext.call(this, parser);
    this.text = null; // Css_textContext;
    Css_valueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CssTextContext.prototype = Object.create(Css_valueContext.prototype);
CssTextContext.prototype.constructor = CssTextContext;

MParser.CssTextContext = CssTextContext;

CssTextContext.prototype.css_text = function() {
    return this.getTypedRuleContext(Css_textContext,0);
};
CssTextContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCssText(this);
	}
};

CssTextContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCssText(this);
	}
};


function CssValueContext(parser, ctx) {
	Css_valueContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Css_valueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CssValueContext.prototype = Object.create(Css_valueContext.prototype);
CssValueContext.prototype.constructor = CssValueContext;

MParser.CssValueContext = CssValueContext;

CssValueContext.prototype.LCURL = function() {
    return this.getToken(MParser.LCURL, 0);
};

CssValueContext.prototype.RCURL = function() {
    return this.getToken(MParser.RCURL, 0);
};

CssValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
CssValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCssValue(this);
	}
};

CssValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCssValue(this);
	}
};



MParser.Css_valueContext = Css_valueContext;

MParser.prototype.css_value = function() {

    var localctx = new Css_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 494, MParser.RULE_css_value);
    try {
        this.state = 2742;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MParser.LCURL:
            localctx = new CssValueContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2737;
            this.match(MParser.LCURL);
            this.state = 2738;
            localctx.exp = this.expression(0);
            this.state = 2739;
            this.match(MParser.RCURL);
            break;
        case MParser.INDENT:
        case MParser.DEDENT:
        case MParser.LF_TAB:
        case MParser.LF_MORE:
        case MParser.LF:
        case MParser.TAB:
        case MParser.COMMENT:
        case MParser.JAVA:
        case MParser.CSHARP:
        case MParser.PYTHON2:
        case MParser.PYTHON3:
        case MParser.JAVASCRIPT:
        case MParser.SWIFT:
        case MParser.COMMA:
        case MParser.RANGE:
        case MParser.DOT:
        case MParser.LPAR:
        case MParser.RPAR:
        case MParser.LBRAK:
        case MParser.RBRAK:
        case MParser.QMARK:
        case MParser.XMARK:
        case MParser.AMP:
        case MParser.AMP2:
        case MParser.PIPE:
        case MParser.PIPE2:
        case MParser.PLUS:
        case MParser.MINUS:
        case MParser.STAR:
        case MParser.SLASH:
        case MParser.BSLASH:
        case MParser.PERCENT:
        case MParser.GT:
        case MParser.GTE:
        case MParser.LT:
        case MParser.LTE:
        case MParser.LTGT:
        case MParser.LTCOLONGT:
        case MParser.EQ:
        case MParser.XEQ:
        case MParser.EQ2:
        case MParser.TEQ:
        case MParser.TILDE:
        case MParser.LARROW:
        case MParser.RARROW:
        case MParser.EGT:
        case MParser.BOOLEAN:
        case MParser.CHARACTER:
        case MParser.TEXT:
        case MParser.INTEGER:
        case MParser.DECIMAL:
        case MParser.DATE:
        case MParser.TIME:
        case MParser.DATETIME:
        case MParser.PERIOD:
        case MParser.VERSION:
        case MParser.METHOD_COLON:
        case MParser.CODE:
        case MParser.DOCUMENT:
        case MParser.BLOB:
        case MParser.IMAGE:
        case MParser.UUID:
        case MParser.ITERATOR:
        case MParser.CURSOR:
        case MParser.HTML:
        case MParser.TYPE:
        case MParser.ABSTRACT:
        case MParser.ALL:
        case MParser.ALWAYS:
        case MParser.AND:
        case MParser.ANY:
        case MParser.AS:
        case MParser.ASC:
        case MParser.ATTR:
        case MParser.ATTRIBUTE:
        case MParser.ATTRIBUTES:
        case MParser.BINDINGS:
        case MParser.BREAK:
        case MParser.BY:
        case MParser.CASE:
        case MParser.CATCH:
        case MParser.CATEGORY:
        case MParser.CLASS:
        case MParser.CLOSE:
        case MParser.CONTAINS:
        case MParser.DEF:
        case MParser.DEFAULT:
        case MParser.DEFINE:
        case MParser.DELETE:
        case MParser.DESC:
        case MParser.DO:
        case MParser.DOING:
        case MParser.EACH:
        case MParser.ELSE:
        case MParser.ENUM:
        case MParser.ENUMERATED:
        case MParser.EXCEPT:
        case MParser.EXECUTE:
        case MParser.EXPECTING:
        case MParser.EXTENDS:
        case MParser.FETCH:
        case MParser.FILTERED:
        case MParser.FINALLY:
        case MParser.FLUSH:
        case MParser.FOR:
        case MParser.FROM:
        case MParser.GETTER:
        case MParser.HAS:
        case MParser.IF:
        case MParser.IN:
        case MParser.INDEX:
        case MParser.INVOKE_COLON:
        case MParser.IS:
        case MParser.MATCHING:
        case MParser.METHOD:
        case MParser.METHODS:
        case MParser.MODULO:
        case MParser.MUTABLE:
        case MParser.NATIVE:
        case MParser.NONE:
        case MParser.NOT:
        case MParser.NOTHING:
        case MParser.NULL:
        case MParser.ON:
        case MParser.ONE:
        case MParser.OPEN:
        case MParser.OPERATOR:
        case MParser.OR:
        case MParser.ORDER:
        case MParser.OTHERWISE:
        case MParser.PASS:
        case MParser.RAISE:
        case MParser.READ:
        case MParser.RECEIVING:
        case MParser.RESOURCE:
        case MParser.RETURN:
        case MParser.RETURNING:
        case MParser.ROWS:
        case MParser.SELF:
        case MParser.SETTER:
        case MParser.SINGLETON:
        case MParser.SORTED:
        case MParser.STORABLE:
        case MParser.STORE:
        case MParser.SWITCH:
        case MParser.TEST:
        case MParser.THEN:
        case MParser.THIS:
        case MParser.THROW:
        case MParser.TO:
        case MParser.TRY:
        case MParser.VERIFYING:
        case MParser.WIDGET:
        case MParser.WITH:
        case MParser.WHEN:
        case MParser.WHERE:
        case MParser.WHILE:
        case MParser.WRITE:
        case MParser.BOOLEAN_LITERAL:
        case MParser.CHAR_LITERAL:
        case MParser.MIN_INTEGER:
        case MParser.MAX_INTEGER:
        case MParser.SYMBOL_IDENTIFIER:
        case MParser.TYPE_IDENTIFIER:
        case MParser.VARIABLE_IDENTIFIER:
        case MParser.NATIVE_IDENTIFIER:
        case MParser.DOLLAR_IDENTIFIER:
        case MParser.ARONDBASE_IDENTIFIER:
        case MParser.TEXT_LITERAL:
        case MParser.UUID_LITERAL:
        case MParser.INTEGER_LITERAL:
        case MParser.HEXA_LITERAL:
        case MParser.DECIMAL_LITERAL:
        case MParser.DATETIME_LITERAL:
        case MParser.TIME_LITERAL:
        case MParser.DATE_LITERAL:
        case MParser.PERIOD_LITERAL:
        case MParser.VERSION_LITERAL:
            localctx = new CssTextContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2741;
            localctx.text = this.css_text();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Css_textContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MParser.RULE_css_text;
    return this;
}

Css_textContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Css_textContext.prototype.constructor = Css_textContext;

Css_textContext.prototype.LCURL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.LCURL);
    } else {
        return this.getToken(MParser.LCURL, i);
    }
};


Css_textContext.prototype.RCURL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.RCURL);
    } else {
        return this.getToken(MParser.RCURL, i);
    }
};


Css_textContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.COLON);
    } else {
        return this.getToken(MParser.COLON, i);
    }
};


Css_textContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.SEMI);
    } else {
        return this.getToken(MParser.SEMI, i);
    }
};


Css_textContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MParser.WS);
    } else {
        return this.getToken(MParser.WS, i);
    }
};


Css_textContext.prototype.enterRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.enterCss_text(this);
	}
};

Css_textContext.prototype.exitRule = function(listener) {
    if(listener instanceof MParserListener ) {
        listener.exitCss_text(this);
	}
};




MParser.Css_textContext = Css_textContext;

MParser.prototype.css_text = function() {

    var localctx = new Css_textContext(this, this._ctx, this.state);
    this.enterRule(localctx, 496, MParser.RULE_css_text);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2745; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2744;
            _la = this._input.LA(1);
            if(_la<=0 || (((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MParser.WS) | (1 << MParser.COLON) | (1 << MParser.SEMI) | (1 << MParser.LCURL) | (1 << MParser.RCURL))) !== 0)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2747; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MParser.INDENT) | (1 << MParser.DEDENT) | (1 << MParser.LF_TAB) | (1 << MParser.LF_MORE) | (1 << MParser.LF) | (1 << MParser.TAB) | (1 << MParser.COMMENT) | (1 << MParser.JAVA) | (1 << MParser.CSHARP) | (1 << MParser.PYTHON2) | (1 << MParser.PYTHON3) | (1 << MParser.JAVASCRIPT) | (1 << MParser.SWIFT) | (1 << MParser.COMMA) | (1 << MParser.RANGE) | (1 << MParser.DOT) | (1 << MParser.LPAR) | (1 << MParser.RPAR) | (1 << MParser.LBRAK) | (1 << MParser.RBRAK) | (1 << MParser.QMARK) | (1 << MParser.XMARK) | (1 << MParser.AMP) | (1 << MParser.AMP2) | (1 << MParser.PIPE) | (1 << MParser.PIPE2))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MParser.PLUS - 32)) | (1 << (MParser.MINUS - 32)) | (1 << (MParser.STAR - 32)) | (1 << (MParser.SLASH - 32)) | (1 << (MParser.BSLASH - 32)) | (1 << (MParser.PERCENT - 32)) | (1 << (MParser.GT - 32)) | (1 << (MParser.GTE - 32)) | (1 << (MParser.LT - 32)) | (1 << (MParser.LTE - 32)) | (1 << (MParser.LTGT - 32)) | (1 << (MParser.LTCOLONGT - 32)) | (1 << (MParser.EQ - 32)) | (1 << (MParser.XEQ - 32)) | (1 << (MParser.EQ2 - 32)) | (1 << (MParser.TEQ - 32)) | (1 << (MParser.TILDE - 32)) | (1 << (MParser.LARROW - 32)) | (1 << (MParser.RARROW - 32)) | (1 << (MParser.EGT - 32)) | (1 << (MParser.BOOLEAN - 32)) | (1 << (MParser.CHARACTER - 32)) | (1 << (MParser.TEXT - 32)) | (1 << (MParser.INTEGER - 32)) | (1 << (MParser.DECIMAL - 32)) | (1 << (MParser.DATE - 32)) | (1 << (MParser.TIME - 32)) | (1 << (MParser.DATETIME - 32)) | (1 << (MParser.PERIOD - 32)) | (1 << (MParser.VERSION - 32)) | (1 << (MParser.METHOD_COLON - 32)) | (1 << (MParser.CODE - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (MParser.DOCUMENT - 64)) | (1 << (MParser.BLOB - 64)) | (1 << (MParser.IMAGE - 64)) | (1 << (MParser.UUID - 64)) | (1 << (MParser.ITERATOR - 64)) | (1 << (MParser.CURSOR - 64)) | (1 << (MParser.HTML - 64)) | (1 << (MParser.TYPE - 64)) | (1 << (MParser.ABSTRACT - 64)) | (1 << (MParser.ALL - 64)) | (1 << (MParser.ALWAYS - 64)) | (1 << (MParser.AND - 64)) | (1 << (MParser.ANY - 64)) | (1 << (MParser.AS - 64)) | (1 << (MParser.ASC - 64)) | (1 << (MParser.ATTR - 64)) | (1 << (MParser.ATTRIBUTE - 64)) | (1 << (MParser.ATTRIBUTES - 64)) | (1 << (MParser.BINDINGS - 64)) | (1 << (MParser.BREAK - 64)) | (1 << (MParser.BY - 64)) | (1 << (MParser.CASE - 64)) | (1 << (MParser.CATCH - 64)) | (1 << (MParser.CATEGORY - 64)) | (1 << (MParser.CLASS - 64)) | (1 << (MParser.CLOSE - 64)) | (1 << (MParser.CONTAINS - 64)) | (1 << (MParser.DEF - 64)) | (1 << (MParser.DEFAULT - 64)) | (1 << (MParser.DEFINE - 64)) | (1 << (MParser.DELETE - 64)) | (1 << (MParser.DESC - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (MParser.DO - 96)) | (1 << (MParser.DOING - 96)) | (1 << (MParser.EACH - 96)) | (1 << (MParser.ELSE - 96)) | (1 << (MParser.ENUM - 96)) | (1 << (MParser.ENUMERATED - 96)) | (1 << (MParser.EXCEPT - 96)) | (1 << (MParser.EXECUTE - 96)) | (1 << (MParser.EXPECTING - 96)) | (1 << (MParser.EXTENDS - 96)) | (1 << (MParser.FETCH - 96)) | (1 << (MParser.FILTERED - 96)) | (1 << (MParser.FINALLY - 96)) | (1 << (MParser.FLUSH - 96)) | (1 << (MParser.FOR - 96)) | (1 << (MParser.FROM - 96)) | (1 << (MParser.GETTER - 96)) | (1 << (MParser.HAS - 96)) | (1 << (MParser.IF - 96)) | (1 << (MParser.IN - 96)) | (1 << (MParser.INDEX - 96)) | (1 << (MParser.INVOKE_COLON - 96)) | (1 << (MParser.IS - 96)) | (1 << (MParser.MATCHING - 96)) | (1 << (MParser.METHOD - 96)) | (1 << (MParser.METHODS - 96)) | (1 << (MParser.MODULO - 96)) | (1 << (MParser.MUTABLE - 96)) | (1 << (MParser.NATIVE - 96)) | (1 << (MParser.NONE - 96)) | (1 << (MParser.NOT - 96)) | (1 << (MParser.NOTHING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (MParser.NULL - 128)) | (1 << (MParser.ON - 128)) | (1 << (MParser.ONE - 128)) | (1 << (MParser.OPEN - 128)) | (1 << (MParser.OPERATOR - 128)) | (1 << (MParser.OR - 128)) | (1 << (MParser.ORDER - 128)) | (1 << (MParser.OTHERWISE - 128)) | (1 << (MParser.PASS - 128)) | (1 << (MParser.RAISE - 128)) | (1 << (MParser.READ - 128)) | (1 << (MParser.RECEIVING - 128)) | (1 << (MParser.RESOURCE - 128)) | (1 << (MParser.RETURN - 128)) | (1 << (MParser.RETURNING - 128)) | (1 << (MParser.ROWS - 128)) | (1 << (MParser.SELF - 128)) | (1 << (MParser.SETTER - 128)) | (1 << (MParser.SINGLETON - 128)) | (1 << (MParser.SORTED - 128)) | (1 << (MParser.STORABLE - 128)) | (1 << (MParser.STORE - 128)) | (1 << (MParser.SWITCH - 128)) | (1 << (MParser.TEST - 128)) | (1 << (MParser.THEN - 128)) | (1 << (MParser.THIS - 128)) | (1 << (MParser.THROW - 128)) | (1 << (MParser.TO - 128)) | (1 << (MParser.TRY - 128)) | (1 << (MParser.VERIFYING - 128)) | (1 << (MParser.WIDGET - 128)) | (1 << (MParser.WITH - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (MParser.WHEN - 160)) | (1 << (MParser.WHERE - 160)) | (1 << (MParser.WHILE - 160)) | (1 << (MParser.WRITE - 160)) | (1 << (MParser.BOOLEAN_LITERAL - 160)) | (1 << (MParser.CHAR_LITERAL - 160)) | (1 << (MParser.MIN_INTEGER - 160)) | (1 << (MParser.MAX_INTEGER - 160)) | (1 << (MParser.SYMBOL_IDENTIFIER - 160)) | (1 << (MParser.TYPE_IDENTIFIER - 160)) | (1 << (MParser.VARIABLE_IDENTIFIER - 160)) | (1 << (MParser.NATIVE_IDENTIFIER - 160)) | (1 << (MParser.DOLLAR_IDENTIFIER - 160)) | (1 << (MParser.ARONDBASE_IDENTIFIER - 160)) | (1 << (MParser.TEXT_LITERAL - 160)) | (1 << (MParser.UUID_LITERAL - 160)) | (1 << (MParser.INTEGER_LITERAL - 160)) | (1 << (MParser.HEXA_LITERAL - 160)) | (1 << (MParser.DECIMAL_LITERAL - 160)) | (1 << (MParser.DATETIME_LITERAL - 160)) | (1 << (MParser.TIME_LITERAL - 160)) | (1 << (MParser.DATE_LITERAL - 160)) | (1 << (MParser.PERIOD_LITERAL - 160)) | (1 << (MParser.VERSION_LITERAL - 160)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


MParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 19:
			return this.native_category_binding_list_sempred(localctx, predIndex);
	case 39:
			return this.else_if_statement_list_sempred(localctx, predIndex);
	case 45:
			return this.expression_sempred(localctx, predIndex);
	case 48:
			return this.instance_expression_sempred(localctx, predIndex);
	case 49:
			return this.mutable_instance_expression_sempred(localctx, predIndex);
	case 55:
			return this.copy_from_sempred(localctx, predIndex);
	case 56:
			return this.argument_assignment_list_sempred(localctx, predIndex);
	case 64:
			return this.child_instance_sempred(localctx, predIndex);
	case 92:
			return this.typedef_sempred(localctx, predIndex);
	case 103:
			return this.nospace_hyphen_identifier_or_keyword_sempred(localctx, predIndex);
	case 104:
			return this.nospace_identifier_or_keyword_sempred(localctx, predIndex);
	case 116:
			return this.any_type_sempred(localctx, predIndex);
	case 154:
			return this.assignable_instance_sempred(localctx, predIndex);
	case 155:
			return this.is_expression_sempred(localctx, predIndex);
	case 166:
			return this.new_token_sempred(localctx, predIndex);
	case 167:
			return this.key_token_sempred(localctx, predIndex);
	case 168:
			return this.module_token_sempred(localctx, predIndex);
	case 169:
			return this.value_token_sempred(localctx, predIndex);
	case 170:
			return this.symbols_token_sempred(localctx, predIndex);
	case 177:
			return this.javascript_expression_sempred(localctx, predIndex);
	case 183:
			return this.javascript_arguments_sempred(localctx, predIndex);
	case 190:
			return this.python_expression_sempred(localctx, predIndex);
	case 196:
			return this.python_ordinal_argument_list_sempred(localctx, predIndex);
	case 197:
			return this.python_named_argument_list_sempred(localctx, predIndex);
	case 199:
			return this.python_identifier_expression_sempred(localctx, predIndex);
	case 203:
			return this.java_expression_sempred(localctx, predIndex);
	case 209:
			return this.java_arguments_sempred(localctx, predIndex);
	case 212:
			return this.java_identifier_expression_sempred(localctx, predIndex);
	case 213:
			return this.java_class_identifier_expression_sempred(localctx, predIndex);
	case 217:
			return this.csharp_expression_sempred(localctx, predIndex);
	case 223:
			return this.csharp_arguments_sempred(localctx, predIndex);
	case 226:
			return this.csharp_identifier_expression_sempred(localctx, predIndex);
	case 246:
			return this.css_identifier_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

MParser.prototype.native_category_binding_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.else_if_statement_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 32);
		case 3:
			return this.precpred(this._ctx, 31);
		case 4:
			return this.precpred(this._ctx, 30);
		case 5:
			return this.precpred(this._ctx, 29);
		case 6:
			return this.precpred(this._ctx, 28);
		case 7:
			return this.precpred(this._ctx, 26);
		case 8:
			return this.precpred(this._ctx, 25);
		case 9:
			return this.precpred(this._ctx, 24);
		case 10:
			return this.precpred(this._ctx, 23);
		case 11:
			return this.precpred(this._ctx, 20);
		case 12:
			return this.precpred(this._ctx, 19);
		case 13:
			return this.precpred(this._ctx, 18);
		case 14:
			return this.precpred(this._ctx, 17);
		case 15:
			return this.precpred(this._ctx, 16);
		case 16:
			return this.precpred(this._ctx, 15);
		case 17:
			return this.precpred(this._ctx, 14);
		case 18:
			return this.precpred(this._ctx, 13);
		case 19:
			return this.precpred(this._ctx, 12);
		case 20:
			return this.precpred(this._ctx, 11);
		case 21:
			return this.precpred(this._ctx, 10);
		case 22:
			return this.precpred(this._ctx, 9);
		case 23:
			return this.precpred(this._ctx, 8);
		case 24:
			return this.precpred(this._ctx, 7);
		case 25:
			return this.precpred(this._ctx, 6);
		case 26:
			return this.precpred(this._ctx, 5);
		case 27:
			return this.precpred(this._ctx, 1);
		case 28:
			return this.precpred(this._ctx, 35);
		case 29:
			return this.precpred(this._ctx, 27);
		case 30:
			return this.precpred(this._ctx, 22);
		case 31:
			return this.precpred(this._ctx, 21);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.instance_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 32:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.mutable_instance_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 33:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.copy_from_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 34:
			return this.willNotBe(this.equalToken());
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.argument_assignment_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 35:
			return this.willNotBe(this.equalToken());
		case 36:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.child_instance_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 37:
			return this.wasNot(MParser.WS);
		case 38:
			return this.wasNot(MParser.WS);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.typedef_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 39:
			return this.precpred(this._ctx, 5);
		case 40:
			return this.precpred(this._ctx, 4);
		case 41:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.nospace_hyphen_identifier_or_keyword_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 42:
			return this.wasNotWhiteSpace();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.nospace_identifier_or_keyword_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 43:
			return this.wasNotWhiteSpace();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.any_type_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 44:
			return this.precpred(this._ctx, 2);
		case 45:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.assignable_instance_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 46:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.is_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 47:
			return this.willBeAOrAn();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.new_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 48:
			return this.isText(localctx.i1,"new");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.key_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 49:
			return this.isText(localctx.i1,"key");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.module_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 50:
			return this.isText(localctx.i1,"module");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.value_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 51:
			return this.isText(localctx.i1,"value");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.symbols_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 52:
			return this.isText(localctx.i1,"symbols");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.javascript_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 53:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.javascript_arguments_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 54:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.python_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 55:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.python_ordinal_argument_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 56:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.python_named_argument_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 57:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.python_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 58:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.java_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 59:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.java_arguments_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 60:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.java_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 61:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.java_class_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 62:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.csharp_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 63:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.csharp_arguments_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 64:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.csharp_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 65:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MParser.prototype.css_identifier_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 66:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.MParser = MParser;
