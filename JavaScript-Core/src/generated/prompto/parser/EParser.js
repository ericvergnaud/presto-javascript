// Generated from EParser.g4 by ANTLR 4.5
// jshint ignore: start
var antlr4 = require('antlr4/index');
var EParserListener = require('./EParserListener').EParserListener;
var AbstractParser = require('./AbstractParser').AbstractParser;

var grammarFileName = "EParser.g4";

var serializedATN = ["\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\3\u00af\u0926\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t",
    "\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20",
    "\t\20\4\21\t\21\4\22\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4",
    "\27\t\27\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35",
    "\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'",
    "\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61",
    "\t\61\4\62\t\62\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4",
    "8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C",
    "\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\t",
    "N\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY",
    "\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\t",
    "d\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to",
    "\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4z\tz\4",
    "{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080\4\u0081\t\u0081\4",
    "\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085\t\u0085\4\u0086",
    "\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a",
    "\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e\4\u008f",
    "\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092\4\u0093\t\u0093",
    "\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098",
    "\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c",
    "\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0\t\u00a0\4\u00a1",
    "\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4\4\u00a5\t\u00a5",
    "\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa",
    "\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae\t\u00ae",
    "\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2\t\u00b2\4\u00b3",
    "\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7",
    "\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc",
    "\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf\4\u00c0\t\u00c0",
    "\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4\t\u00c4\4\u00c5",
    "\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9",
    "\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd\4\u00ce",
    "\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1\3\2\3\2\3\2",
    "\3\2\3\2\3\2\5\2\u01a9\n\2\3\2\3\2\3\2\3\2\3\2\5\2\u01b0\n\2\3\2\3\2",
    "\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4",
    "\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\5\5\u01ce\n\5\3\6\3\6\3\6\3\6\5",
    "\6\u01d4\n\6\3\6\3\6\3\6\5\6\u01d9\n\6\3\6\3\6\3\6\3\6\5\6\u01df\n\6",
    "\5\6\u01e1\n\6\3\6\5\6\u01e4\n\6\3\7\3\7\3\7\3\7\5\7\u01ea\n\7\3\7\3",
    "\7\5\7\u01ee\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u01f9\n\7\3",
    "\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0202\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b",
    "\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u0211\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5",
    "\b\u021a\n\b\3\t\3\t\3\t\3\t\3\t\5\t\u0221\n\t\3\n\3\n\3\n\3\n\3\n\3",
    "\n\3\n\3\n\5\n\u022b\n\n\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13",
    "\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\5\f\u0241\n\f\3\f\3\f",
    "\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3",
    "\16\3\16\3\16\5\16\u0258\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17",
    "\3\17\3\17\3\17\5\17\u0265\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3",
    "\17\3\17\5\17\u0270\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17",
    "\3\17\3\17\3\17\5\17\u027e\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3",
    "\20\3\20\3\20\3\20\3\20\5\20\u028c\n\20\3\20\3\20\3\20\3\20\3\20\3\20",
    "\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u029a\n\20\3\21\3\21\3\21\3\21\3",
    "\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\7\22\u02ac",
    "\n\22\f\22\16\22\u02af\13\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23",
    "\5\23\u02b9\n\23\5\23\u02bb\n\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24",
    "\5\24\u02c4\n\24\3\24\3\24\5\24\u02c8\n\24\3\25\3\25\3\25\3\25\3\25",
    "\3\25\5\25\u02d0\n\25\3\25\3\25\5\25\u02d4\n\25\3\25\3\25\3\25\3\25",
    "\3\25\3\25\3\26\3\26\3\26\3\26\5\26\u02e0\n\26\3\26\3\26\3\26\5\26\u02e5",
    "\n\26\3\26\3\26\5\26\u02e9\n\26\3\26\3\26\3\26\3\26\3\26\3\26\3\27\3",
    "\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27",
    "\3\27\3\27\3\27\3\27\5\27\u0304\n\27\3\30\3\30\3\31\3\31\3\31\5\31\u030b",
    "\n\31\3\32\3\32\3\32\5\32\u0310\n\32\3\32\3\32\5\32\u0314\n\32\3\33",
    "\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3",
    "\33\3\33\3\33\3\33\3\33\5\33\u0329\n\33\3\34\3\34\3\35\3\35\3\35\3\35",
    "\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0337\n\35\3\36\3\36\5\36\u033b",
    "\n\36\3\36\5\36\u033e\n\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3",
    "\37\3 \3 \3 \3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3",
    "!\5!\u035f\n!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"",
    "\3\"\3\"\3\"\5\"\u0372\n\"\3#\3#\3#\3#\3#\5#\u0379\n#\3#\3#\3#\3#\3",
    "#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3&\3&\3&\3&",
    "\3&\3&\3&\3&\3&\5&\u039b\n&\3&\3&\3&\3&\3&\3&\3&\5&\u03a4\n&\3\'\3\'",
    "\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'",
    "\7\'\u03b9\n\'\f\'\16\'\u03bc\13\'\3(\3(\3(\3)\3)\3)\3)\3)\3)\3)\3)",
    "\3)\3)\5)\u03cb\n)\3)\3)\3)\5)\u03d0\n)\3)\3)\3)\3)\3)\3)\5)\u03d8\n",
    ")\3)\3)\3)\3)\3)\3)\3)\5)\u03e1\n)\3)\3)\3*\3*\3*\3*\3*\3*\3*\3*\3*",
    "\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u03f8\n*\3+\3+\3,\3,\5,\u03fe\n,\3",
    "-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-",
    "\3-\3-\3-\3-\3-\5-\u041c\n-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3",
    "-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-",
    "\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3",
    "-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-",
    "\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\7",
    "-\u0485\n-\f-\16-\u0488\13-\3.\3.\3.\3.\3.\7.\u048f\n.\f.\16.\u0492",
    "\13.\3/\3/\3/\3/\3\60\3\60\3\60\3\60\3\60\3\61\3\61\3\62\3\62\3\62\3",
    "\62\3\62\7\62\u04a4\n\62\f\62\16\62\u04a7\13\62\3\63\3\63\3\63\3\63",
    "\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u04b6\n\63\3\64\3",
    "\64\3\64\5\64\u04bb\n\64\3\65\3\65\3\65\3\65\3\66\3\66\3\66\3\66\5\66",
    "\u04c5\n\66\3\66\3\66\3\66\5\66\u04ca\n\66\5\66\u04cc\n\66\3\66\3\66",
    "\3\66\3\66\5\66\u04d2\n\66\5\66\u04d4\n\66\5\66\u04d6\n\66\3\67\3\67",
    "\3\67\3\67\3\67\38\38\38\38\39\39\39\39\39\39\3:\3:\3:\5:\u04ea\n:\3",
    ":\3:\3:\3:\3:\5:\u04f1\n:\3:\3:\5:\u04f5\n:\3:\3:\3:\3:\3:\3:\3:\3:",
    "\3:\5:\u0500\n:\3:\3:\5:\u0504\n:\3:\3:\3:\5:\u0509\n:\5:\u050b\n:\3",
    ";\3;\5;\u050f\n;\3;\3;\3;\3;\3;\3;\5;\u0517\n;\3<\3<\3<\3<\3<\5<\u051e",
    "\n<\5<\u0520\n<\3<\3<\3<\5<\u0525\n<\5<\u0527\n<\3=\3=\3=\3=\3=\3=\3",
    "=\7=\u0530\n=\f=\16=\u0533\13=\3>\3>\3>\3>\3?\3?\3?\3?\3@\3@\3@\3@\3",
    "@\3@\3@\3@\5@\u0545\n@\3A\3A\3A\3A\3B\7B\u054c\nB\fB\16B\u054f\13B\3",
    "C\6C\u0552\nC\rC\16C\u0553\3D\6D\u0557\nD\rD\16D\u0558\3D\3D\3E\7E\u055e",
    "\nE\fE\16E\u0561\13E\3E\3E\3F\3F\3G\5G\u0568\nG\3G\3G\3G\3H\3H\3H\3",
    "H\7H\u0571\nH\fH\16H\u0574\13H\3I\3I\3I\7I\u0579\nI\fI\16I\u057c\13",
    "I\3I\3I\3I\3I\3I\5I\u0583\nI\3J\3J\3K\3K\5K\u0589\nK\3L\3L\3L\3L\7L",
    "\u058f\nL\fL\16L\u0592\13L\3M\3M\3M\3M\7M\u0598\nM\fM\16M\u059b\13M",
    "\3N\3N\3N\7N\u05a0\nN\fN\16N\u05a3\13N\3O\3O\3O\3O\3O\3O\3O\3O\3O\3",
    "O\5O\u05af\nO\3P\5P\u05b2\nP\3P\3P\5P\u05b6\nP\3P\3P\3Q\5Q\u05bb\nQ",
    "\3Q\3Q\5Q\u05bf\nQ\3Q\3Q\3R\3R\3R\7R\u05c6\nR\fR\16R\u05c9\13R\3S\3",
    "S\3S\3S\3S\3S\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\5T\u05dd\nT\3T\3T",
    "\3T\3T\3T\3T\3T\3T\7T\u05e7\nT\fT\16T\u05ea\13T\3U\3U\5U\u05ee\nU\3",
    "V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u05fe\nV\3W\3W\3X\5X\u0603",
    "\nX\3X\3X\3Y\3Y\3Z\3Z\3Z\5Z\u060c\nZ\3[\3[\3[\7[\u0611\n[\f[\16[\u0614",
    "\13[\3\\\3\\\5\\\u0618\n\\\3]\3]\3]\5]\u061d\n]\3^\3^\3_\3_\3`\3`\3",
    "a\3a\3b\3b\3b\7b\u062a\nb\fb\16b\u062d\13b\3c\3c\5c\u0631\nc\3c\5c\u0634",
    "\nc\3d\3d\5d\u0638\nd\3e\3e\3e\5e\u063d\ne\3f\3f\3f\3g\3g\5g\u0644\n",
    "g\3h\3h\3h\3h\3h\3h\3h\3h\3h\7h\u064f\nh\fh\16h\u0652\13h\3i\3i\3i\3",
    "i\7i\u0658\ni\fi\16i\u065b\13i\3j\3j\3j\3j\3j\5j\u0662\nj\3k\3k\3k\3",
    "k\7k\u0668\nk\fk\16k\u066b\13k\3l\3l\3l\5l\u0670\nl\3m\3m\3m\3m\3m\3",
    "m\3m\3m\3m\3m\5m\u067c\nm\3n\3n\5n\u0680\nn\3o\3o\3o\3o\3o\3o\7o\u0688",
    "\no\fo\16o\u068b\13o\3p\3p\5p\u068f\np\3q\3q\3q\3q\5q\u0695\nq\3q\3",
    "q\3q\7q\u069a\nq\fq\16q\u069d\13q\3q\3q\5q\u06a1\nq\3r\3r\3r\7r\u06a6",
    "\nr\fr\16r\u06a9\13r\3s\3s\3s\7s\u06ae\ns\fs\16s\u06b1\13s\3t\3t\3t",
    "\3t\5t\u06b7\nt\3u\3u\3v\3v\3v\3v\7v\u06bf\nv\fv\16v\u06c2\13v\3w\3",
    "w\3w\3w\3w\3w\3w\3w\3w\3w\5w\u06ce\nw\3x\3x\5x\u06d2\nx\3x\5x\u06d5",
    "\nx\3y\3y\5y\u06d9\ny\3y\5y\u06dc\ny\3z\3z\3z\3z\7z\u06e2\nz\fz\16z",
    "\u06e5\13z\3{\3{\3{\3{\7{\u06eb\n{\f{\16{\u06ee\13{\3|\3|\3|\3|\7|\u06f4",
    "\n|\f|\16|\u06f7\13|\3}\3}\3}\3}\7}\u06fd\n}\f}\16}\u0700\13}\3~\3~",
    "\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\5~\u0710\n~\3\177\3\177\3\177\3",
    "\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\5\177",
    "\u0720\n\177\3\u0080\3\u0080\3\u0080\7\u0080\u0725\n\u0080\f\u0080\16",
    "\u0080\u0728\13\u0080\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u072e",
    "\n\u0081\3\u0082\3\u0082\3\u0083\3\u0083\3\u0083\3\u0083\3\u0084\3\u0084",
    "\5\u0084\u0738\n\u0084\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085",
    "\u073f\n\u0085\3\u0086\5\u0086\u0742\n\u0086\3\u0086\3\u0086\5\u0086",
    "\u0746\n\u0086\3\u0086\3\u0086\3\u0087\5\u0087\u074b\n\u0087\3\u0087",
    "\3\u0087\5\u0087\u074f\n\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088",
    "\3\u0088\3\u0088\7\u0088\u0758\n\u0088\f\u0088\16\u0088\u075b\13\u0088",
    "\5\u0088\u075d\n\u0088\3\u0089\3\u0089\3\u0089\7\u0089\u0762\n\u0089",
    "\f\u0089\16\u0089\u0765\13\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008b",
    "\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b",
    "\u0774\n\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d",
    "\3\u008d\3\u008d\7\u008d\u077f\n\u008d\f\u008d\16\u008d\u0782\13\u008d",
    "\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0788\n\u008e\3\u008f\3\u008f",
    "\3\u008f\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0091",
    "\3\u0091\3\u0091\7\u0091\u0797\n\u0091\f\u0091\16\u0091\u079a\13\u0091",
    "\3\u0092\3\u0092\3\u0092\7\u0092\u079f\n\u0092\f\u0092\16\u0092\u07a2",
    "\13\u0092\3\u0092\5\u0092\u07a5\n\u0092\3\u0093\3\u0093\3\u0093\3\u0093",
    "\3\u0093\3\u0093\5\u0093\u07ad\n\u0093\3\u0094\3\u0094\3\u0094\3\u0095",
    "\3\u0095\3\u0095\3\u0096\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097\3\u0098",
    "\3\u0098\3\u0098\3\u0099\3\u0099\3\u009a\3\u009a\3\u009b\3\u009b\3\u009c",
    "\3\u009c\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e",
    "\3\u009e\5\u009e\u07cf\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f",
    "\7\u009f\u07d6\n\u009f\f\u009f\16\u009f\u07d9\13\u009f\3\u00a0\3\u00a0",
    "\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u07e2\n\u00a0\3\u00a1",
    "\3\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3",
    "\5\u00a3\u07ee\n\u00a3\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u07f3\n\u00a4",
    "\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\7\u00a5",
    "\u07fd\n\u00a5\f\u00a5\16\u00a5\u0800\13\u00a5\3\u00a6\3\u00a6\3\u00a6",
    "\3\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a9\3\u00a9",
    "\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0811\n\u00a9\3\u00aa\3\u00aa\3\u00ab",
    "\3\u00ab\3\u00ab\5\u00ab\u0818\n\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac",
    "\3\u00ac\7\u00ac\u081f\n\u00ac\f\u00ac\16\u00ac\u0822\13\u00ac\3\u00ad",
    "\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0828\n\u00ad\3\u00ae\3\u00ae\3\u00ae",
    "\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0830\n\u00ae\3\u00af\3\u00af\3\u00af",
    "\5\u00af\u0835\n\u00af\3\u00af\3\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0",
    "\3\u00b0\3\u00b0\5\u00b0\u083f\n\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1",
    "\3\u00b1\3\u00b1\7\u00b1\u0847\n\u00b1\f\u00b1\16\u00b1\u084a\13\u00b1",
    "\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2",
    "\3\u00b2\3\u00b2\7\u00b2\u0857\n\u00b2\f\u00b2\16\u00b2\u085a\13\u00b2",
    "\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0863",
    "\n\u00b4\3\u00b4\3\u00b4\3\u00b4\7\u00b4\u0868\n\u00b4\f\u00b4\16\u00b4",
    "\u086b\13\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0872",
    "\n\u00b5\3\u00b6\3\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7",
    "\3\u00b7\5\u00b7\u087d\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8",
    "\7\u00b8\u0884\n\u00b8\f\u00b8\16\u00b8\u0887\13\u00b8\3\u00b9\3\u00b9",
    "\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u088e\n\u00b9\3\u00ba\3\u00ba\3\u00bb",
    "\3\u00bb\3\u00bb\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u0898\n\u00bc\3\u00bd",
    "\3\u00bd\3\u00bd\5\u00bd\u089d\n\u00bd\3\u00bd\3\u00bd\3\u00be\3\u00be",
    "\3\u00be\3\u00be\3\u00be\3\u00be\7\u00be\u08a7\n\u00be\f\u00be\16\u00be",
    "\u08aa\13\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00c0\3\u00c0\3\u00c0",
    "\3\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u08ba",
    "\n\u00c1\f\u00c1\16\u00c1\u08bd\13\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2",
    "\3\u00c2\7\u00c2\u08c4\n\u00c2\f\u00c2\16\u00c2\u08c7\13\u00c2\3\u00c3",
    "\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u08ce\n\u00c3\3\u00c4\3\u00c4",
    "\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u08d9",
    "\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\7\u00c6\u08e0\n\u00c6",
    "\f\u00c6\16\u00c6\u08e3\13\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7",
    "\5\u00c7\u08ea\n\u00c7\3\u00c8\3\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00ca",
    "\3\u00ca\3\u00ca\5\u00ca\u08f4\n\u00ca\3\u00cb\3\u00cb\3\u00cb\5\u00cb",
    "\u08f9\n\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc",
    "\3\u00cc\7\u00cc\u0903\n\u00cc\f\u00cc\16\u00cc\u0906\13\u00cc\3\u00cd",
    "\3\u00cd\3\u00cd\3\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00cf\3\u00cf",
    "\3\u00cf\5\u00cf\u0913\n\u00cf\3\u00cf\3\u00cf\3\u00cf\7\u00cf\u0918",
    "\n\u00cf\f\u00cf\16\u00cf\u091b\13\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0",
    "\3\u00d0\5\u00d0\u0922\n\u00d0\3\u00d1\3\u00d1\3\u00d1\2\30\"LXZbx\u00a6",
    "\u00ce\u0118\u013c\u0148\u0156\u0160\u0162\u0166\u016e\u017a\u0180\u0182",
    "\u018a\u0196\u019c\u00d2\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$",
    "&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c",
    "\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4",
    "\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc",
    "\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4",
    "\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc",
    "\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114",
    "\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c",
    "\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144",
    "\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c",
    "\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174",
    "\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c",
    "\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\2\13\3",
    "\2\"#\4\2\u0090\u0090\u00a4\u00a4\4\2\u008c\u008c\u0094\u0094\4\2KK",
    "\\\\\4\2\'\'vv\b\2\64<\u0086\u0086\u0093\u0093\u009d\u009d\u00a2\u00a4",
    "\u00a6\u00a6\b\2\64<\u0086\u0086\u008c\u008c\u0093\u0094\u009d\u009d",
    "\u00a2\u00a4\7\2\64<\u0086\u0086\u0093\u0093\u009d\u009d\u00a2\u00a6",
    "\7\2\64<\u0086\u0086\u0093\u0093\u009d\u009d\u00a2\u00a4\u09ad\2\u01a2",
    "\3\2\2\2\4\u01b7\3\2\2\2\6\u01c3\3\2\2\2\b\u01c9\3\2\2\2\n\u01cf\3\2",
    "\2\2\f\u01e5\3\2\2\2\16\u0203\3\2\2\2\20\u0220\3\2\2\2\22\u0222\3\2",
    "\2\2\24\u0232\3\2\2\2\26\u023c\3\2\2\2\30\u0249\3\2\2\2\32\u0253\3\2",
    "\2\2\34\u0260\3\2\2\2\36\u027f\3\2\2\2 \u029b\3\2\2\2\"\u02a4\3\2\2",
    "\2$\u02ba\3\2\2\2&\u02bc\3\2\2\2(\u02c9\3\2\2\2*\u02db\3\2\2\2,\u02f0",
    "\3\2\2\2.\u0305\3\2\2\2\60\u0307\3\2\2\2\62\u030c\3\2\2\2\64\u0328\3",
    "\2\2\2\66\u032a\3\2\2\28\u0336\3\2\2\2:\u033d\3\2\2\2<\u033f\3\2\2\2",
    ">\u0348\3\2\2\2@\u0351\3\2\2\2B\u0371\3\2\2\2D\u0373\3\2\2\2F\u0381",
    "\3\2\2\2H\u038a\3\2\2\2J\u0391\3\2\2\2L\u03a5\3\2\2\2N\u03bd\3\2\2\2",
    "P\u03c0\3\2\2\2R\u03f7\3\2\2\2T\u03f9\3\2\2\2V\u03fb\3\2\2\2X\u041b",
    "\3\2\2\2Z\u0489\3\2\2\2\\\u0493\3\2\2\2^\u0497\3\2\2\2`\u049c\3\2\2",
    "\2b\u049e\3\2\2\2d\u04b5\3\2\2\2f\u04b7\3\2\2\2h\u04bc\3\2\2\2j\u04d5",
    "\3\2\2\2l\u04d7\3\2\2\2n\u04dc\3\2\2\2p\u04e0\3\2\2\2r\u050a\3\2\2\2",
    "t\u050c\3\2\2\2v\u0526\3\2\2\2x\u0528\3\2\2\2z\u0534\3\2\2\2|\u0538",
    "\3\2\2\2~\u0544\3\2\2\2\u0080\u0546\3\2\2\2\u0082\u054d\3\2\2\2\u0084",
    "\u0551\3\2\2\2\u0086\u0556\3\2\2\2\u0088\u055f\3\2\2\2\u008a\u0564\3",
    "\2\2\2\u008c\u0567\3\2\2\2\u008e\u056c\3\2\2\2\u0090\u057a\3\2\2\2\u0092",
    "\u0584\3\2\2\2\u0094\u0588\3\2\2\2\u0096\u058a\3\2\2\2\u0098\u0593\3",
    "\2\2\2\u009a\u059c\3\2\2\2\u009c\u05ae\3\2\2\2\u009e\u05b1\3\2\2\2\u00a0",
    "\u05ba\3\2\2\2\u00a2\u05c2\3\2\2\2\u00a4\u05ca\3\2\2\2\u00a6\u05dc\3",
    "\2\2\2\u00a8\u05ed\3\2\2\2\u00aa\u05fd\3\2\2\2\u00ac\u05ff\3\2\2\2\u00ae",
    "\u0602\3\2\2\2\u00b0\u0606\3\2\2\2\u00b2\u060b\3\2\2\2\u00b4\u060d\3",
    "\2\2\2\u00b6\u0617\3\2\2\2\u00b8\u061c\3\2\2\2\u00ba\u061e\3\2\2\2\u00bc",
    "\u0620\3\2\2\2\u00be\u0622\3\2\2\2\u00c0\u0624\3\2\2\2\u00c2\u0626\3",
    "\2\2\2\u00c4\u0633\3\2\2\2\u00c6\u0637\3\2\2\2\u00c8\u0639\3\2\2\2\u00ca",
    "\u063e\3\2\2\2\u00cc\u0643\3\2\2\2\u00ce\u0645\3\2\2\2\u00d0\u0653\3",
    "\2\2\2\u00d2\u0661\3\2\2\2\u00d4\u0663\3\2\2\2\u00d6\u066f\3\2\2\2\u00d8",
    "\u067b\3\2\2\2\u00da\u067d\3\2\2\2\u00dc\u0681\3\2\2\2\u00de\u068c\3",
    "\2\2\2\u00e0\u0690\3\2\2\2\u00e2\u06a2\3\2\2\2\u00e4\u06aa\3\2\2\2\u00e6",
    "\u06b6\3\2\2\2\u00e8\u06b8\3\2\2\2\u00ea\u06ba\3\2\2\2\u00ec\u06cd\3",
    "\2\2\2\u00ee\u06cf\3\2\2\2\u00f0\u06d6\3\2\2\2\u00f2\u06dd\3\2\2\2\u00f4",
    "\u06e6\3\2\2\2\u00f6\u06ef\3\2\2\2\u00f8\u06f8\3\2\2\2\u00fa\u070f\3",
    "\2\2\2\u00fc\u071f\3\2\2\2\u00fe\u0721\3\2\2\2\u0100\u072d\3\2\2\2\u0102",
    "\u072f\3\2\2\2\u0104\u0731\3\2\2\2\u0106\u0737\3\2\2\2\u0108\u073e\3",
    "\2\2\2\u010a\u0741\3\2\2\2\u010c\u074a\3\2\2\2\u010e\u0752\3\2\2\2\u0110",
    "\u075e\3\2\2\2\u0112\u0766\3\2\2\2\u0114\u0773\3\2\2\2\u0116\u0775\3",
    "\2\2\2\u0118\u0779\3\2\2\2\u011a\u0787\3\2\2\2\u011c\u0789\3\2\2\2\u011e",
    "\u078e\3\2\2\2\u0120\u0793\3\2\2\2\u0122\u079b\3\2\2\2\u0124\u07ac\3",
    "\2\2\2\u0126\u07ae\3\2\2\2\u0128\u07b1\3\2\2\2\u012a\u07b4\3\2\2\2\u012c",
    "\u07b7\3\2\2\2\u012e\u07ba\3\2\2\2\u0130\u07bd\3\2\2\2\u0132\u07bf\3",
    "\2\2\2\u0134\u07c1\3\2\2\2\u0136\u07c3\3\2\2\2\u0138\u07c5\3\2\2\2\u013a",
    "\u07ce\3\2\2\2\u013c\u07d0\3\2\2\2\u013e\u07e1\3\2\2\2\u0140\u07e3\3",
    "\2\2\2\u0142\u07e5\3\2\2\2\u0144\u07ed\3\2\2\2\u0146\u07ef\3\2\2\2\u0148",
    "\u07f6\3\2\2\2\u014a\u0801\3\2\2\2\u014c\u0805\3\2\2\2\u014e\u0809\3",
    "\2\2\2\u0150\u0810\3\2\2\2\u0152\u0812\3\2\2\2\u0154\u0817\3\2\2\2\u0156",
    "\u0819\3\2\2\2\u0158\u0827\3\2\2\2\u015a\u082f\3\2\2\2\u015c\u0831\3",
    "\2\2\2\u015e\u083e\3\2\2\2\u0160\u0840\3\2\2\2\u0162\u084b\3\2\2\2\u0164",
    "\u085b\3\2\2\2\u0166\u0862\3\2\2\2\u0168\u0871\3\2\2\2\u016a\u0873\3",
    "\2\2\2\u016c\u087c\3\2\2\2\u016e\u087e\3\2\2\2\u0170\u088d\3\2\2\2\u0172",
    "\u088f\3\2\2\2\u0174\u0891\3\2\2\2\u0176\u0897\3\2\2\2\u0178\u0899\3",
    "\2\2\2\u017a\u08a0\3\2\2\2\u017c\u08ab\3\2\2\2\u017e\u08af\3\2\2\2\u0180",
    "\u08b3\3\2\2\2\u0182\u08be\3\2\2\2\u0184\u08cd\3\2\2\2\u0186\u08cf\3",
    "\2\2\2\u0188\u08d8\3\2\2\2\u018a\u08da\3\2\2\2\u018c\u08e9\3\2\2\2\u018e",
    "\u08eb\3\2\2\2\u0190\u08ed\3\2\2\2\u0192\u08f3\3\2\2\2\u0194\u08f5\3",
    "\2\2\2\u0196\u08fc\3\2\2\2\u0198\u0907\3\2\2\2\u019a\u090b\3\2\2\2\u019c",
    "\u0912\3\2\2\2\u019e\u0921\3\2\2\2\u01a0\u0923\3\2\2\2\u01a2\u01a3\7",
    "Z\2\2\u01a3\u01a4\5\u00be`\2\u01a4\u01a5\7J\2\2\u01a5\u01a8\7b\2\2\u01a6",
    "\u01a9\7T\2\2\u01a7\u01a9\5\u00be`\2\u01a8\u01a6\3\2\2\2\u01a8\u01a7",
    "\3\2\2\2\u01a9\u01af\3\2\2\2\u01aa\u01ab\5$\23\2\u01ab\u01ac\7\23\2",
    "\2\u01ac\u01ad\7H\2\2\u01ad\u01b0\3\2\2\2\u01ae\u01b0\7\u0099\2\2\u01af",
    "\u01aa\3\2\2\2\u01af\u01ae\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b2\5",
    "\u012e\u0098\2\u01b2\u01b3\7\21\2\2\u01b3\u01b4\5\u0086D\2\u01b4\u01b5",
    "\5\u0098M\2\u01b5\u01b6\5\u0088E\2\u01b6\3\3\2\2\2\u01b7\u01b8\7Z\2",
    "\2\u01b8\u01b9\5\u00be`\2\u01b9\u01ba\7J\2\2\u01ba\u01bb\7b\2\2\u01bb",
    "\u01bc\5\u00aaV\2\u01bc\u01bd\7\u0099\2\2\u01bd\u01be\5\u012e\u0098",
    "\2\u01be\u01bf\7\21\2\2\u01bf\u01c0\5\u0086D\2\u01c0\u01c1\5\u0096L",
    "\2\u01c1\u01c2\5\u0088E\2\u01c2\5\3\2\2\2\u01c3\u01c4\5\u00c0a\2\u01c4",
    "\u01c5\7\u0099\2\2\u01c5\u01c6\5X-\2\u01c6\u01c7\7J\2\2\u01c7\u01c8",
    "\5\u012c\u0097\2\u01c8\7\3\2\2\2\u01c9\u01ca\5\u00c0a\2\u01ca\u01cd",
    "\5x=\2\u01cb\u01cc\7H\2\2\u01cc\u01ce\5z>\2\u01cd\u01cb\3\2\2\2\u01cd",
    "\u01ce\3\2\2\2\u01ce\t\3\2\2\2\u01cf\u01d0\7Z\2\2\u01d0\u01d1\5\u00bc",
    "_\2\u01d1\u01d3\7J\2\2\u01d2\u01d4\7\u0090\2\2\u01d3\u01d2\3\2\2\2\u01d3",
    "\u01d4\3\2\2\2\u01d4\u01d5\3\2\2\2\u01d5\u01d6\5\u00a6T\2\u01d6\u01d8",
    "\7M\2\2\u01d7\u01d9\5\u009cO\2\u01d8\u01d7\3\2\2\2\u01d8\u01d9\3\2\2",
    "\2\u01d9\u01e3\3\2\2\2\u01da\u01e0\7\u0099\2\2\u01db\u01de\5\u00e2r",
    "\2\u01dc\u01dd\7H\2\2\u01dd\u01df\5\u00ba^\2\u01de\u01dc\3\2\2\2\u01de",
    "\u01df\3\2\2\2\u01df\u01e1\3\2\2\2\u01e0\u01db\3\2\2\2\u01e0\u01e1\3",
    "\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e4\7p\2\2\u01e3\u01da\3\2\2\2\u01e3",
    "\u01e4\3\2\2\2\u01e4\13\3\2\2\2\u01e5\u01e6\7Z\2\2\u01e6\u01e7\5\u00be",
    "`\2\u01e7\u01e9\7J\2\2\u01e8\u01ea\7\u0090\2\2\u01e9\u01e8\3\2\2\2\u01e9",
    "\u01ea\3\2\2\2\u01ea\u01ed\3\2\2\2\u01eb\u01ee\7T\2\2\u01ec\u01ee\5",
    "\20\t\2\u01ed\u01eb\3\2\2\2\u01ed\u01ec\3\2\2\2\u01ee\u0201\3\2\2\2",
    "\u01ef\u01f8\5$\23\2\u01f0\u01f1\7\23\2\2\u01f1\u01f2\7H\2\2\u01f2\u01f3",
    "\7u\2\2\u01f3\u01f4\7\21\2\2\u01f4\u01f5\5\u0086D\2\u01f5\u01f6\5\u00d0",
    "i\2\u01f6\u01f7\5\u0088E\2\u01f7\u01f9\3\2\2\2\u01f8\u01f0\3\2\2\2\u01f8",
    "\u01f9\3\2\2\2\u01f9\u0202\3\2\2\2\u01fa\u01fb\7\u0099\2\2\u01fb\u01fc",
    "\7u\2\2\u01fc\u01fd\7\21\2\2\u01fd\u01fe\5\u0086D\2\u01fe\u01ff\5\u00d0",
    "i\2\u01ff\u0200\5\u0088E\2\u0200\u0202\3\2\2\2\u0201\u01ef\3\2\2\2\u0201",
    "\u01fa\3\2\2\2\u0201\u0202\3\2\2\2\u0202\r\3\2\2\2\u0203\u0204\7Z\2",
    "\2\u0204\u0205\5\u00be`\2\u0205\u0206\7J\2\2\u0206\u0219\7\u008e\2\2",
    "\u0207\u0210\5$\23\2\u0208\u0209\7\23\2\2\u0209\u020a\7H\2\2\u020a\u020b",
    "\7u\2\2\u020b\u020c\7\21\2\2\u020c\u020d\5\u0086D\2\u020d\u020e\5\u00d0",
    "i\2\u020e\u020f\5\u0088E\2\u020f\u0211\3\2\2\2\u0210\u0208\3\2\2\2\u0210",
    "\u0211\3\2\2\2\u0211\u021a\3\2\2\2\u0212\u0213\7\u0099\2\2\u0213\u0214",
    "\7u\2\2\u0214\u0215\7\21\2\2\u0215\u0216\5\u0086D\2\u0216\u0217\5\u00d0",
    "i\2\u0217\u0218\5\u0088E\2\u0218\u021a\3\2\2\2\u0219\u0207\3\2\2\2\u0219",
    "\u0212\3\2\2\2\u0219\u021a\3\2\2\2\u021a\17\3\2\2\2\u021b\u0221\5\u00b4",
    "[\2\u021c\u021d\5\u00b4[\2\u021d\u021e\7H\2\2\u021e\u021f\5\u00be`\2",
    "\u021f\u0221\3\2\2\2\u0220\u021b\3\2\2\2\u0220\u021c\3\2\2\2\u0221\21",
    "\3\2\2\2\u0222\u0223\7Z\2\2\u0223\u0224\5\u0124\u0093\2\u0224\u0225",
    "\7J\2\2\u0225\u0226\7\u0080\2\2\u0226\u0227\7\u0087\2\2\u0227\u022a",
    "\5\u00c6d\2\u0228\u0229\7\u008a\2\2\u0229\u022b\5\u00a6T\2\u022a\u0228",
    "\3\2\2\2\u022a\u022b\3\2\2\2\u022b\u022c\3\2\2\2\u022c\u022d\7^\2\2",
    "\u022d\u022e\7\21\2\2\u022e\u022f\5\u0086D\2\u022f\u0230\5\u00f2z\2",
    "\u0230\u0231\5\u0088E\2\u0231\23\3\2\2\2\u0232\u0233\7Z\2\2\u0233\u0234",
    "\5\u00ba^\2\u0234\u0235\7J\2\2\u0235\u0236\7\u008d\2\2\u0236\u0237\7",
    "^\2\2\u0237\u0238\7\21\2\2\u0238\u0239\5\u0086D\2\u0239\u023a\5\u00f2",
    "z\2\u023a\u023b\5\u0088E\2\u023b\25\3\2\2\2\u023c\u023d\7Z\2\2\u023d",
    "\u023e\5\u00ba^\2\u023e\u0240\7J\2\2\u023f\u0241\7x\2\2\u0240\u023f",
    "\3\2\2\2\u0240\u0241\3\2\2\2\u0241\u0242\3\2\2\2\u0242\u0243\7\u008d",
    "\2\2\u0243\u0244\7^\2\2\u0244\u0245\7\21\2\2\u0245\u0246\5\u0086D\2",
    "\u0246\u0247\5\u00eav\2\u0247\u0248\5\u0088E\2\u0248\27\3\2\2\2\u0249",
    "\u024a\7Z\2\2\u024a\u024b\5\u00ba^\2\u024b\u024c\7J\2\2\u024c\u024d",
    "\7m\2\2\u024d\u024e\7^\2\2\u024e\u024f\7\21\2\2\u024f\u0250\5\u0086",
    "D\2\u0250\u0251\5\u00f2z\2\u0251\u0252\5\u0088E\2\u0252\31\3\2\2\2\u0253",
    "\u0254\7Z\2\2\u0254\u0255\5\u00ba^\2\u0255\u0257\7J\2\2\u0256\u0258",
    "\7x\2\2\u0257\u0256\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u0259\3\2\2\2",
    "\u0259\u025a\7m\2\2\u025a\u025b\7^\2\2\u025b\u025c\7\21\2\2\u025c\u025d",
    "\5\u0086D\2\u025d\u025e\5\u00eav\2\u025e\u025f\5\u0088E\2\u025f\33\3",
    "\2\2\2\u0260\u0261\7Z\2\2\u0261\u0262\5\u00be`\2\u0262\u0264\7J\2\2",
    "\u0263\u0265\7\u0090\2\2\u0264\u0263\3\2\2\2\u0264\u0265\3\2\2\2\u0265",
    "\u0266\3\2\2\2\u0266\u0267\7x\2\2\u0267\u026f\7T\2\2\u0268\u0269\5$",
    "\23\2\u0269\u026a\7\23\2\2\u026a\u026b\7H\2\2\u026b\u026c\7O\2\2\u026c",
    "\u0270\3\2\2\2\u026d\u026e\7\u0099\2\2\u026e\u0270\7O\2\2\u026f\u0268",
    "\3\2\2\2\u026f\u026d\3\2\2\2\u0270\u0271\3\2\2\2\u0271\u0272\7\21\2",
    "\2\u0272\u0273\5\u0086D\2\u0273\u0274\5 \21\2\u0274\u027d\5\u0088E\2",
    "\u0275\u0276\5\u0084C\2\u0276\u0277\7H\2\2\u0277\u0278\7u\2\2\u0278",
    "\u0279\7\21\2\2\u0279\u027a\5\u0086D\2\u027a\u027b\5\u00d4k\2\u027b",
    "\u027c\5\u0088E\2\u027c\u027e\3\2\2\2\u027d\u0275\3\2\2\2\u027d\u027e",
    "\3\2\2\2\u027e\35\3\2\2\2\u027f\u0280\7Z\2\2\u0280\u0281\5\u00be`\2",
    "\u0281\u0282\7J\2\2\u0282\u0283\7x\2\2\u0283\u028b\7\u0088\2\2\u0284",
    "\u0285\5$\23\2\u0285\u0286\7\23\2\2\u0286\u0287\7H\2\2\u0287\u0288\7",
    "O\2\2\u0288\u028c\3\2\2\2\u0289\u028a\7\u0099\2\2\u028a\u028c\7O\2\2",
    "\u028b\u0284\3\2\2\2\u028b\u0289\3\2\2\2\u028c\u028d\3\2\2\2\u028d\u028e",
    "\7\21\2\2\u028e\u028f\5\u0086D\2\u028f\u0290\5 \21\2\u0290\u0299\5\u0088",
    "E\2\u0291\u0292\5\u0084C\2\u0292\u0293\7H\2\2\u0293\u0294\7u\2\2\u0294",
    "\u0295\7\21\2\2\u0295\u0296\5\u0086D\2\u0296\u0297\5\u00d4k\2\u0297",
    "\u0298\5\u0088E\2\u0298\u029a\3\2\2\2\u0299\u0291\3\2\2\2\u0299\u029a",
    "\3\2\2\2\u029a\37\3\2\2\2\u029b\u029c\7Z\2\2\u029c\u029d\7T\2\2\u029d",
    "\u029e\7O\2\2\u029e\u029f\7J\2\2\u029f\u02a0\7\21\2\2\u02a0\u02a1\5",
    "\u0086D\2\u02a1\u02a2\5\"\22\2\u02a2\u02a3\5\u0088E\2\u02a3!\3\2\2\2",
    "\u02a4\u02a5\b\22\1\2\u02a5\u02a6\5\u00d8m\2\u02a6\u02ad\3\2\2\2\u02a7",
    "\u02a8\f\3\2\2\u02a8\u02a9\5\u0084C\2\u02a9\u02aa\5\u00d8m\2\u02aa\u02ac",
    "\3\2\2\2\u02ab\u02a7\3\2\2\2\u02ac\u02af\3\2\2\2\u02ad\u02ab\3\2\2\2",
    "\u02ad\u02ae\3\2\2\2\u02ae#\3\2\2\2\u02af\u02ad\3\2\2\2\u02b0\u02b1",
    "\7\u0099\2\2\u02b1\u02b2\7M\2\2\u02b2\u02bb\5\u00bc_\2\u02b3\u02b4\7",
    "\u0099\2\2\u02b4\u02b5\7N\2\2\u02b5\u02b8\5\u00e4s\2\u02b6\u02b7\7H",
    "\2\2\u02b7\u02b9\5\u00bc_\2\u02b8\u02b6\3\2\2\2\u02b8\u02b9\3\2\2\2",
    "\u02b9\u02bb\3\2\2\2\u02ba\u02b0\3\2\2\2\u02ba\u02b3\3\2\2\2\u02bb%",
    "\3\2\2\2\u02bc\u02bd\7Z\2\2\u02bd\u02be\5\u00b6\\\2\u02be\u02bf\7J\2",
    "\2\u02bf\u02c0\7E\2\2\u02c0\u02c3\7t\2\2\u02c1\u02c2\7\u0087\2\2\u02c2",
    "\u02c4\5\60\31\2\u02c3\u02c1\3\2\2\2\u02c3\u02c4\3\2\2\2\u02c4\u02c7",
    "\3\2\2\2\u02c5\u02c6\7\u008a\2\2\u02c6\u02c8\5\u00a6T\2\u02c7\u02c5",
    "\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8\'\3\2\2\2\u02c9\u02ca\7Z\2\2\u02ca",
    "\u02cb\5\u00b6\\\2\u02cb\u02cc\7J\2\2\u02cc\u02cf\7t\2\2\u02cd\u02ce",
    "\7\u0087\2\2\u02ce\u02d0\5\60\31\2\u02cf\u02cd\3\2\2\2\u02cf\u02d0\3",
    "\2\2\2\u02d0\u02d3\3\2\2\2\u02d1\u02d2\7\u008a\2\2\u02d2\u02d4\5\u00a6",
    "T\2\u02d3\u02d1\3\2\2\2\u02d3\u02d4\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5",
    "\u02d6\7^\2\2\u02d6\u02d7\7\21\2\2\u02d7\u02d8\5\u0086D\2\u02d8\u02d9",
    "\5\u00f2z\2\u02d9\u02da\5\u0088E\2\u02da)\3\2\2\2\u02db\u02dc\7Z\2\2",
    "\u02dc\u02dd\5\u00b6\\\2\u02dd\u02df\7J\2\2\u02de\u02e0\7x\2\2\u02df",
    "\u02de\3\2\2\2\u02df\u02e0\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1\u02e4\7",
    "t\2\2\u02e2\u02e3\7\u0087\2\2\u02e3\u02e5\5\60\31\2\u02e4\u02e2\3\2",
    "\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e8\3\2\2\2\u02e6\u02e7\7\u008a\2\2",
    "\u02e7\u02e9\5\u00ccg\2\u02e8\u02e6\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9",
    "\u02ea\3\2\2\2\u02ea\u02eb\7^\2\2\u02eb\u02ec\7\21\2\2\u02ec\u02ed\5",
    "\u0086D\2\u02ed\u02ee\5\u00eav\2\u02ee\u02ef\5\u0088E\2\u02ef+\3\2\2",
    "\2\u02f0\u02f1\7Z\2\2\u02f1\u02f2\7\u00a7\2\2\u02f2\u02f3\7J\2\2\u02f3",
    "\u02f4\7\u0093\2\2\u02f4\u02f5\7t\2\2\u02f5\u02f6\7^\2\2\u02f6\u02f7",
    "\7\21\2\2\u02f7\u02f8\5\u0086D\2\u02f8\u02f9\5\u00f2z\2\u02f9\u02fa",
    "\5\u0088E\2\u02fa\u02fb\5\u0084C\2\u02fb\u02fc\7H\2\2\u02fc\u0303\7",
    "\u0098\2\2\u02fd\u02fe\7\21\2\2\u02fe\u02ff\5\u0086D\2\u02ff\u0300\5",
    "\u00f4{\2\u0300\u0301\5\u0088E\2\u0301\u0304\3\2\2\2\u0302\u0304\5\u00c0",
    "a\2\u0303\u02fd\3\2\2\2\u0303\u0302\3\2\2\2\u0304-\3\2\2\2\u0305\u0306",
    "\5X-\2\u0306/\3\2\2\2\u0307\u030a\5\u00c2b\2\u0308\u0309\7H\2\2\u0309",
    "\u030b\5\u00c4c\2\u030a\u0308\3\2\2\2\u030a\u030b\3\2\2\2\u030b\61\3",
    "\2\2\2\u030c\u030d\5\u00ccg\2\u030d\u030f\5\u00ba^\2\u030e\u0310\5$",
    "\23\2\u030f\u030e\3\2\2\2\u030f\u0310\3\2\2\2\u0310\u0313\3\2\2\2\u0311",
    "\u0312\7-\2\2\u0312\u0314\5\u0106\u0084\2\u0313\u0311\3\2\2\2\u0313",
    "\u0314\3\2\2\2\u0314\63\3\2\2\2\u0315\u0329\5|?\2\u0316\u0329\5:\36",
    "\2\u0317\u0329\5\u0080A\2\u0318\u0329\58\35\2\u0319\u0329\5\66\34\2",
    "\u031a\u0329\5T+\2\u031b\u0329\5V,\2\u031c\u0329\5J&\2\u031d\u0329\5",
    "@!\2\u031e\u0329\5D#\2\u031f\u0329\5H%\2\u0320\u0329\5F$\2\u0321\u0329",
    "\5N(\2\u0322\u0329\5P)\2\u0323\u0329\5l\67\2\u0324\u0329\5<\37\2\u0325",
    "\u0329\5> \2\u0326\u0329\5(\25\2\u0327\u0329\5\u00e8u\2\u0328\u0315",
    "\3\2\2\2\u0328\u0316\3\2\2\2\u0328\u0317\3\2\2\2\u0328\u0318\3\2\2\2",
    "\u0328\u0319\3\2\2\2\u0328\u031a\3\2\2\2\u0328\u031b\3\2\2\2\u0328\u031c",
    "\3\2\2\2\u0328\u031d\3\2\2\2\u0328\u031e\3\2\2\2\u0328\u031f\3\2\2\2",
    "\u0328\u0320\3\2\2\2\u0328\u0321\3\2\2\2\u0328\u0322\3\2\2\2\u0328\u0323",
    "\3\2\2\2\u0328\u0324\3\2\2\2\u0328\u0325\3\2\2\2\u0328\u0326\3\2\2\2",
    "\u0328\u0327\3\2\2\2\u0329\65\3\2\2\2\u032a\u032b\7j\2\2\u032b\67\3",
    "\2\2\2\u032c\u032d\7[\2\2\u032d\u0337\5\u00a2R\2\u032e\u032f\7\u0091",
    "\2\2\u032f\u0337\5\u00a2R\2\u0330\u0331\7[\2\2\u0331\u0332\5\u00a2R",
    "\2\u0332\u0333\7H\2\2\u0333\u0334\7\u0091\2\2\u0334\u0335\5\u00a2R\2",
    "\u0335\u0337\3\2\2\2\u0336\u032c\3\2\2\2\u0336\u032e\3\2\2\2\u0336\u0330",
    "\3\2\2\2\u03379\3\2\2\2\u0338\u033a\5Z.\2\u0339\u033b\5v<\2\u033a\u0339",
    "\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u033e\3\2\2\2\u033c\u033e\5^\60\2",
    "\u033d\u0338\3\2\2\2\u033d\u033c\3\2\2\2\u033e;\3\2\2\2\u033f\u0340",
    "\7\u0099\2\2\u0340\u0341\5\u0116\u008c\2\u0341\u0342\7\23\2\2\u0342",
    "\u0343\7]\2\2\u0343\u0344\7\21\2\2\u0344\u0345\5\u0086D\2\u0345\u0346",
    "\5\u00f2z\2\u0346\u0347\5\u0088E\2\u0347=\3\2\2\2\u0348\u0349\7\u0099",
    "\2\2\u0349\u034a\5\u00be`\2\u034a\u034b\7\23\2\2\u034b\u034c\7]\2\2",
    "\u034c\u034d\7\21\2\2\u034d\u034e\5\u0086D\2\u034e\u034f\5\u00f2z\2",
    "\u034f\u0350\5\u0088E\2\u0350?\3\2\2\2\u0351\u0352\7\u0092\2\2\u0352",
    "\u0353\7}\2\2\u0353\u0354\5X-\2\u0354\u0355\7\21\2\2\u0355\u0356\5\u0086",
    "D\2\u0356\u035e\5\u00f6|\2\u0357\u0358\5\u0084C\2\u0358\u0359\7\u0083",
    "\2\2\u0359\u035a\7\21\2\2\u035a\u035b\5\u0086D\2\u035b\u035c\5\u00f2",
    "z\2\u035c\u035d\5\u0088E\2\u035d\u035f\3\2\2\2\u035e\u0357\3\2\2\2\u035e",
    "\u035f\3\2\2\2\u035f\u0360\3\2\2\2\u0360\u0361\5\u0088E\2\u0361A\3\2",
    "\2\2\u0362\u0363\7\u009a\2\2\u0363\u0364\5\u00fc\177\2\u0364\u0365\7",
    "\21\2\2\u0365\u0366\5\u0086D\2\u0366\u0367\5\u00f2z\2\u0367\u0368\5",
    "\u0088E\2\u0368\u0372\3\2\2\2\u0369\u036a\7\u009a\2\2\u036a\u036b\7",
    "o\2\2\u036b\u036c\5\u00fa~\2\u036c\u036d\7\21\2\2\u036d\u036e\5\u0086",
    "D\2\u036e\u036f\5\u00f2z\2\u036f\u0370\5\u0088E\2\u0370\u0372\3\2\2",
    "\2\u0371\u0362\3\2\2\2\u0371\u0369\3\2\2\2\u0372C\3\2\2\2\u0373\u0374",
    "\7k\2\2\u0374\u0375\7_\2\2\u0375\u0378\5\u00ba^\2\u0376\u0377\7\23\2",
    "\2\u0377\u0379\5\u00ba^\2\u0378\u0376\3\2\2\2\u0378\u0379\3\2\2\2\u0379",
    "\u037a\3\2\2\2\u037a\u037b\7o\2\2\u037b\u037c\5X-\2\u037c\u037d\7\21",
    "\2\2\u037d\u037e\5\u0086D\2\u037e\u037f\5\u00f2z\2\u037f\u0380\5\u0088",
    "E\2\u0380E\3\2\2\2\u0381\u0382\7]\2\2\u0382\u0383\7\21\2\2\u0383\u0384",
    "\5\u0086D\2\u0384\u0385\5\u00f2z\2\u0385\u0386\5\u0088E\2\u0386\u0387",
    "\5\u0084C\2\u0387\u0388\7\u009c\2\2\u0388\u0389\5X-\2\u0389G\3\2\2\2",
    "\u038a\u038b\7\u009c\2\2\u038b\u038c\5X-\2\u038c\u038d\7\21\2\2\u038d",
    "\u038e\5\u0086D\2\u038e\u038f\5\u00f2z\2\u038f\u0390\5\u0088E\2\u0390",
    "I\3\2\2\2\u0391\u0392\7n\2\2\u0392\u0393\5X-\2\u0393\u0394\7\21\2\2",
    "\u0394\u0395\5\u0086D\2\u0395\u0396\5\u00f2z\2\u0396\u039a\5\u0088E",
    "\2\u0397\u0398\5\u0084C\2\u0398\u0399\5L\'\2\u0399\u039b\3\2\2\2\u039a",
    "\u0397\3\2\2\2\u039a\u039b\3\2\2\2\u039b\u03a3\3\2\2\2\u039c\u039d\5",
    "\u0084C\2\u039d\u039e\7`\2\2\u039e\u039f\7\21\2\2\u039f\u03a0\5\u0086",
    "D\2\u03a0\u03a1\5\u00f2z\2\u03a1\u03a2\5\u0088E\2\u03a2\u03a4\3\2\2",
    "\2\u03a3\u039c\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4K\3\2\2\2\u03a5\u03a6",
    "\b\'\1\2\u03a6\u03a7\7`\2\2\u03a7\u03a8\7n\2\2\u03a8\u03a9\5X-\2\u03a9",
    "\u03aa\7\21\2\2\u03aa\u03ab\5\u0086D\2\u03ab\u03ac\5\u00f2z\2\u03ac",
    "\u03ad\5\u0088E\2\u03ad\u03ba\3\2\2\2\u03ae\u03af\f\3\2\2\u03af\u03b0",
    "\5\u0084C\2\u03b0\u03b1\7`\2\2\u03b1\u03b2\7n\2\2\u03b2\u03b3\5X-\2",
    "\u03b3\u03b4\7\21\2\2\u03b4\u03b5\5\u0086D\2\u03b5\u03b6\5\u00f2z\2",
    "\u03b6\u03b7\5\u0088E\2\u03b7\u03b9\3\2\2\2\u03b8\u03ae\3\2\2\2\u03b9",
    "\u03bc\3\2\2\2\u03ba\u03b8\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bbM\3\2\2",
    "\2\u03bc\u03ba\3\2\2\2\u03bd\u03be\7\u0085\2\2\u03be\u03bf\5X-\2\u03bf",
    "O\3\2\2\2\u03c0\u03c1\7\u0092\2\2\u03c1\u03c2\7}\2\2\u03c2\u03c3\5\u00ba",
    "^\2\u03c3\u03c4\7^\2\2\u03c4\u03c5\7\21\2\2\u03c5\u03c6\5\u0086D\2\u03c6",
    "\u03c7\5\u00f2z\2\u03c7\u03c8\5\u0088E\2\u03c8\u03ca\5\u0082B\2\u03c9",
    "\u03cb\5\u00f8}\2\u03ca\u03c9\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03d7",
    "\3\2\2\2\u03cc\u03d0\7\u0083\2\2\u03cd\u03ce\7\u009a\2\2\u03ce\u03d0",
    "\7I\2\2\u03cf\u03cc\3\2\2\2\u03cf\u03cd\3\2\2\2\u03d0\u03d1\3\2\2\2",
    "\u03d1\u03d2\7\21\2\2\u03d2\u03d3\5\u0086D\2\u03d3\u03d4\5\u00f2z\2",
    "\u03d4\u03d5\5\u0088E\2\u03d5\u03d6\5\u0082B\2\u03d6\u03d8\3\2\2\2\u03d7",
    "\u03cf\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03e0\3\2\2\2\u03d9\u03da\7",
    "G\2\2\u03da\u03db\7\21\2\2\u03db\u03dc\5\u0086D\2\u03dc\u03dd\5\u00f2",
    "z\2\u03dd\u03de\5\u0088E\2\u03de\u03df\5\u0082B\2\u03df\u03e1\3\2\2",
    "\2\u03e0\u03d9\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2",
    "\u03e3\5\u0082B\2\u03e3Q\3\2\2\2\u03e4\u03e5\7\u009a\2\2\u03e5\u03e6",
    "\5\u00c0a\2\u03e6\u03e7\7\21\2\2\u03e7\u03e8\5\u0086D\2\u03e8\u03e9",
    "\5\u00f2z\2\u03e9\u03ea\5\u0088E\2\u03ea\u03eb\5\u0082B\2\u03eb\u03f8",
    "\3\2\2\2\u03ec\u03ed\7\u009a\2\2\u03ed\u03ee\7o\2\2\u03ee\u03ef\7\30",
    "\2\2\u03ef\u03f0\5\u009aN\2\u03f0\u03f1\7\31\2\2\u03f1\u03f2\7\21\2",
    "\2\u03f2\u03f3\5\u0086D\2\u03f3\u03f4\5\u00f2z\2\u03f4\u03f5\5\u0088",
    "E\2\u03f5\u03f6\5\u0082B\2\u03f6\u03f8\3\2\2\2\u03f7\u03e4\3\2\2\2\u03f7",
    "\u03ec\3\2\2\2\u03f8S\3\2\2\2\u03f9\u03fa\7P\2\2\u03faU\3\2\2\2\u03fb",
    "\u03fd\7\u0089\2\2\u03fc\u03fe\5X-\2\u03fd\u03fc\3\2\2\2\u03fd\u03fe",
    "\3\2\2\2\u03feW\3\2\2\2\u03ff\u0400\b-\1\2\u0400\u0401\7#\2\2\u0401",
    "\u041c\5X-,\u0402\u0403\7z\2\2\u0403\u041c\5X-+\u0404\u0405\7>\2\2\u0405",
    "\u0406\7\21\2\2\u0406\u041c\5X-\20\u0407\u041c\5b\62\2\u0408\u041c\5",
    "Z.\2\u0409\u040a\5Z.\2\u040a\u040b\5v<\2\u040b\u041c\3\2\2\2\u040c\u040d",
    "\7d\2\2\u040d\u040e\7\21\2\2\u040e\u041c\5\u00ba^\2\u040f\u0410\7=\2",
    "\2\u0410\u0411\7\21\2\2\u0411\u041c\5\u00b6\\\2\u0412\u041c\5h\65\2",
    "\u0413\u041c\5f\64\2\u0414\u041c\5j\66\2\u0415\u041c\5r:\2\u0416\u041c",
    "\5\u011c\u008f\2\u0417\u041c\5\u011e\u0090\2\u0418\u041c\5t;\2\u0419",
    "\u041c\5n8\2\u041a\u041c\5^\60\2\u041b\u03ff\3\2\2\2\u041b\u0402\3\2",
    "\2\2\u041b\u0404\3\2\2\2\u041b\u0407\3\2\2\2\u041b\u0408\3\2\2\2\u041b",
    "\u0409\3\2\2\2\u041b\u040c\3\2\2\2\u041b\u040f\3\2\2\2\u041b\u0412\3",
    "\2\2\2\u041b\u0413\3\2\2\2\u041b\u0414\3\2\2\2\u041b\u0415\3\2\2\2\u041b",
    "\u0416\3\2\2\2\u041b\u0417\3\2\2\2\u041b\u0418\3\2\2\2\u041b\u0419\3",
    "\2\2\2\u041b\u041a\3\2\2\2\u041c\u0486\3\2\2\2\u041d\u041e\f*\2\2\u041e",
    "\u041f\5\u0132\u009a\2\u041f\u0420\5X-+\u0420\u0485\3\2\2\2\u0421\u0422",
    "\f)\2\2\u0422\u0423\5\u0134\u009b\2\u0423\u0424\5X-*\u0424\u0485\3\2",
    "\2\2\u0425\u0426\f(\2\2\u0426\u0427\5\u0138\u009d\2\u0427\u0428\5X-",
    ")\u0428\u0485\3\2\2\2\u0429\u042a\f\'\2\2\u042a\u042b\5\u0136\u009c",
    "\2\u042b\u042c\5X-(\u042c\u0485\3\2\2\2\u042d\u042e\f&\2\2\u042e\u042f",
    "\t\2\2\2\u042f\u0485\5X-\'\u0430\u0431\f%\2\2\u0431\u0432\7*\2\2\u0432",
    "\u0485\5X-&\u0433\u0434\f$\2\2\u0434\u0435\7+\2\2\u0435\u0485\5X-%\u0436",
    "\u0437\f#\2\2\u0437\u0438\7(\2\2\u0438\u0485\5X-$\u0439\u043a\f\"\2",
    "\2\u043a\u043b\7)\2\2\u043b\u0485\5X-#\u043c\u043d\f\37\2\2\u043d\u043e",
    "\7-\2\2\u043e\u0485\5X- \u043f\u0440\f\36\2\2\u0440\u0441\7,\2\2\u0441",
    "\u0485\5X-\37\u0442\u0443\f\35\2\2\u0443\u0444\7\61\2\2\u0444\u0485",
    "\5X-\36\u0445\u0446\f\34\2\2\u0446\u0447\7\u0081\2\2\u0447\u0485\5X",
    "-\35\u0448\u0449\f\33\2\2\u0449\u044a\7H\2\2\u044a\u0485\5X-\34\u044b",
    "\u044c\f\32\2\2\u044c\u044d\7n\2\2\u044d\u044e\5X-\2\u044e\u044f\7`",
    "\2\2\u044f\u0450\5X-\33\u0450\u0485\3\2\2\2\u0451\u0452\f\30\2\2\u0452",
    "\u0453\7o\2\2\u0453\u0485\5X-\31\u0454\u0455\f\27\2\2\u0455\u0456\7",
    "W\2\2\u0456\u0485\5X-\30\u0457\u0458\f\26\2\2\u0458\u0459\7W\2\2\u0459",
    "\u045a\7F\2\2\u045a\u0485\5X-\27\u045b\u045c\f\25\2\2\u045c\u045d\7",
    "W\2\2\u045d\u045e\7I\2\2\u045e\u0485\5X-\26\u045f\u0460\f\24\2\2\u0460",
    "\u0461\7z\2\2\u0461\u0462\7o\2\2\u0462\u0485\5X-\25\u0463\u0464\f\23",
    "\2\2\u0464\u0465\7z\2\2\u0465\u0466\7W\2\2\u0466\u0485\5X-\24\u0467",
    "\u0468\f\22\2\2\u0468\u0469\7z\2\2\u0469\u046a\7W\2\2\u046a\u046b\7",
    "F\2\2\u046b\u0485\5X-\23\u046c\u046d\f\21\2\2\u046d\u046e\7z\2\2\u046e",
    "\u046f\7W\2\2\u046f\u0470\7I\2\2\u0470\u0485\5X-\22\u0471\u0472\f\3",
    "\2\2\u0472\u0473\7k\2\2\u0473\u0474\7_\2\2\u0474\u0475\5\u00ba^\2\u0475",
    "\u0476\7o\2\2\u0476\u0477\5X-\4\u0477\u0485\3\2\2\2\u0478\u0479\f!\2",
    "\2\u0479\u047a\7r\2\2\u047a\u047b\7z\2\2\u047b\u0485\5\u011a\u008e\2",
    "\u047c\u047d\f \2\2\u047d\u047e\7r\2\2\u047e\u0485\5\u011a\u008e\2\u047f",
    "\u0480\f\31\2\2\u0480\u0481\7J\2\2\u0481\u0485\5\u00ccg\2\u0482\u0483",
    "\f\n\2\2\u0483\u0485\5p9\2\u0484\u041d\3\2\2\2\u0484\u0421\3\2\2\2\u0484",
    "\u0425\3\2\2\2\u0484\u0429\3\2\2\2\u0484\u042d\3\2\2\2\u0484\u0430\3",
    "\2\2\2\u0484\u0433\3\2\2\2\u0484\u0436\3\2\2\2\u0484\u0439\3\2\2\2\u0484",
    "\u043c\3\2\2\2\u0484\u043f\3\2\2\2\u0484\u0442\3\2\2\2\u0484\u0445\3",
    "\2\2\2\u0484\u0448\3\2\2\2\u0484\u044b\3\2\2\2\u0484\u0451\3\2\2\2\u0484",
    "\u0454\3\2\2\2\u0484\u0457\3\2\2\2\u0484\u045b\3\2\2\2\u0484\u045f\3",
    "\2\2\2\u0484\u0463\3\2\2\2\u0484\u0467\3\2\2\2\u0484\u046c\3\2\2\2\u0484",
    "\u0471\3\2\2\2\u0484\u0478\3\2\2\2\u0484\u047c\3\2\2\2\u0484\u047f\3",
    "\2\2\2\u0484\u0482\3\2\2\2\u0485\u0488\3\2\2\2\u0486\u0484\3\2\2\2\u0486",
    "\u0487\3\2\2\2\u0487Y\3\2\2\2\u0488\u0486\3\2\2\2\u0489\u048a\b.\1\2",
    "\u048a\u048b\5\u00b8]\2\u048b\u0490\3\2\2\2\u048c\u048d\f\3\2\2\u048d",
    "\u048f\5\\/\2\u048e\u048c\3\2\2\2\u048f\u0492\3\2\2\2\u0490\u048e\3",
    "\2\2\2\u0490\u0491\3\2\2\2\u0491[\3\2\2\2\u0492\u0490\3\2\2\2\u0493",
    "\u0494\6/!\3\u0494\u0495\7\25\2\2\u0495\u0496\5\u00b8]\2\u0496]\3\2",
    "\2\2\u0497\u0498\7q\2\2\u0498\u0499\7\21\2\2\u0499\u049a\5\u00ba^\2",
    "\u049a\u049b\5`\61\2\u049b_\3\2\2\2\u049c\u049d\6\61\"\3\u049da\3\2",
    "\2\2\u049e\u049f\b\62\1\2\u049f\u04a0\5\u0100\u0081\2\u04a0\u04a5\3",
    "\2\2\2\u04a1\u04a2\f\3\2\2\u04a2\u04a4\5d\63\2\u04a3\u04a1\3\2\2\2\u04a4",
    "\u04a7\3\2\2\2\u04a5\u04a3\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6c\3\2\2",
    "\2\u04a7\u04a5\3\2\2\2\u04a8\u04a9\6\63$\3\u04a9\u04aa\7\25\2\2\u04aa",
    "\u04b6\5\u00ba^\2\u04ab\u04ac\6\63%\3\u04ac\u04ad\7\30\2\2\u04ad\u04ae",
    "\5\u0114\u008b\2\u04ae\u04af\7\31\2\2\u04af\u04b6\3\2\2\2\u04b0\u04b1",
    "\6\63&\3\u04b1\u04b2\7\30\2\2\u04b2\u04b3\5X-\2\u04b3\u04b4\7\31\2\2",
    "\u04b4\u04b6\3\2\2\2\u04b5\u04a8\3\2\2\2\u04b5\u04ab\3\2\2\2\u04b5\u04b0",
    "\3\2\2\2\u04b6e\3\2\2\2\u04b7\u04ba\7?\2\2\u04b8\u04b9\7l\2\2\u04b9",
    "\u04bb\5X-\2\u04ba\u04b8\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bbg\3\2\2\2",
    "\u04bc\u04bd\7@\2\2\u04bd\u04be\7l\2\2\u04be\u04bf\5X-\2\u04bfi\3\2",
    "\2\2\u04c0\u04c1\5\u00aeX\2\u04c1\u04c2\7l\2\2\u04c2\u04cb\5X-\2\u04c3",
    "\u04c5\7\23\2\2\u04c4\u04c3\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04c6",
    "\3\2\2\2\u04c6\u04c9\5x=\2\u04c7\u04c8\7H\2\2\u04c8\u04ca\5z>\2\u04c9",
    "\u04c7\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\u04cc\3\2\2\2\u04cb\u04c4\3",
    "\2\2\2\u04cb\u04cc\3\2\2\2\u04cc\u04d6\3\2\2\2\u04cd\u04d3\5\u00aeX",
    "\2\u04ce\u04d1\5x=\2\u04cf\u04d0\7H\2\2\u04d0\u04d2\5z>\2\u04d1\u04cf",
    "\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2\u04d4\3\2\2\2\u04d3\u04ce\3\2\2\2",
    "\u04d3\u04d4\3\2\2\2\u04d4\u04d6\3\2\2\2\u04d5\u04c0\3\2\2\2\u04d5\u04cd",
    "\3\2\2\2\u04d6k\3\2\2\2\u04d7\u04d8\7\u009d\2\2\u04d8\u04d9\5X-\2\u04d9",
    "\u04da\7\u0096\2\2\u04da\u04db\5X-\2\u04dbm\3\2\2\2\u04dc\u04dd\5Z.",
    "\2\u04dd\u04de\7#\2\2\u04de\u04df\5X-\2\u04dfo\3\2\2\2\u04e0\u04e1\7",
    "h\2\2\u04e1\u04e2\7\u0099\2\2\u04e2\u04e3\5\u00ba^\2\u04e3\u04e4\7\u009b",
    "\2\2\u04e4\u04e5\5X-\2\u04e5q\3\2\2\2\u04e6\u04e7\7g\2\2\u04e7\u04e9",
    "\7~\2\2\u04e8\u04ea\5\u00aeX\2\u04e9\u04e8\3\2\2\2\u04e9\u04ea\3\2\2",
    "\2\u04ea\u04eb\3\2\2\2\u04eb\u04ec\7\u009b\2\2\u04ec\u050b\5X-\2\u04ed",
    "\u04ff\7g\2\2\u04ee\u04f0\7F\2\2\u04ef\u04f1\5\u00aeX\2\u04f0\u04ef",
    "\3\2\2\2\u04f0\u04f1\3\2\2\2\u04f1\u0500\3\2\2\2\u04f2\u04f4\5\u00ae",
    "X\2\u04f3\u04f5\7\u008b\2\2\u04f4\u04f3\3\2\2\2\u04f4\u04f5\3\2\2\2",
    "\u04f5\u04f6\3\2\2\2\u04f6\u04f7\5X-\2\u04f7\u04f8\7\u0096\2\2\u04f8",
    "\u04f9\5X-\2\u04f9\u0500\3\2\2\2\u04fa\u04fb\7\u008b\2\2\u04fb\u04fc",
    "\5X-\2\u04fc\u04fd\7\u0096\2\2\u04fd\u04fe\5X-\2\u04fe\u0500\3\2\2\2",
    "\u04ff\u04ee\3\2\2\2\u04ff\u04f2\3\2\2\2\u04ff\u04fa\3\2\2\2\u0500\u0503",
    "\3\2\2\2\u0501\u0502\7\u009b\2\2\u0502\u0504\5X-\2\u0503\u0501\3\2\2",
    "\2\u0503\u0504\3\2\2\2\u0504\u0508\3\2\2\2\u0505\u0506\7\u0082\2\2\u0506",
    "\u0507\7Q\2\2\u0507\u0509\5\u0120\u0091\2\u0508\u0505\3\2\2\2\u0508",
    "\u0509\3\2\2\2\u0509\u050b\3\2\2\2\u050a\u04e6\3\2\2\2\u050a\u04ed\3",
    "\2\2\2\u050bs\3\2\2\2\u050c\u050e\7\u008f\2\2\u050d\u050f\7\\\2\2\u050e",
    "\u050d\3\2\2\2\u050e\u050f\3\2\2\2\u050f\u0510\3\2\2\2\u0510\u0516\5",
    "b\62\2\u0511\u0512\7\u0099\2\2\u0512\u0513\5b\62\2\u0513\u0514\7J\2",
    "\2\u0514\u0515\5\u0128\u0095\2\u0515\u0517\3\2\2\2\u0516\u0511\3\2\2",
    "\2\u0516\u0517\3\2\2\2\u0517u\3\2\2\2\u0518\u0519\6<\'\3\u0519\u051f",
    "\5X-\2\u051a\u051d\5x=\2\u051b\u051c\7H\2\2\u051c\u051e\5z>\2\u051d",
    "\u051b\3\2\2\2\u051d\u051e\3\2\2\2\u051e\u0520\3\2\2\2\u051f\u051a\3",
    "\2\2\2\u051f\u0520\3\2\2\2\u0520\u0527\3\2\2\2\u0521\u0524\5x=\2\u0522",
    "\u0523\7H\2\2\u0523\u0525\5z>\2\u0524\u0522\3\2\2\2\u0524\u0525\3\2",
    "\2\2\u0525\u0527\3\2\2\2\u0526\u0518\3\2\2\2\u0526\u0521\3\2\2\2\u0527",
    "w\3\2\2\2\u0528\u0529\b=\1\2\u0529\u052a\7\u0099\2\2\u052a\u052b\5z",
    ">\2\u052b\u0531\3\2\2\2\u052c\u052d\f\3\2\2\u052d\u052e\7\23\2\2\u052e",
    "\u0530\5z>\2\u052f\u052c\3\2\2\2\u0530\u0533\3\2\2\2\u0531\u052f\3\2",
    "\2\2\u0531\u0532\3\2\2\2\u0532y\3\2\2\2\u0533\u0531\3\2\2\2\u0534\u0535",
    "\5X-\2\u0535\u0536\7J\2\2\u0536\u0537\5\u00ba^\2\u0537{\3\2\2\2\u0538",
    "\u0539\5\u0118\u008d\2\u0539\u053a\5\u0130\u0099\2\u053a\u053b\5X-\2",
    "\u053b}\3\2\2\2\u053c\u053d\6@)\3\u053d\u053e\7\25\2\2\u053e\u0545\5",
    "\u00ba^\2\u053f\u0540\6@*\3\u0540\u0541\7\30\2\2\u0541\u0542\5X-\2\u0542",
    "\u0543\7\31\2\2\u0543\u0545\3\2\2\2\u0544\u053c\3\2\2\2\u0544\u053f",
    "\3\2\2\2\u0545\177\3\2\2\2\u0546\u0547\5\u00e2r\2\u0547\u0548\5\u0130",
    "\u0099\2\u0548\u0549\5X-\2\u0549\u0081\3\2\2\2\u054a\u054c\7\7\2\2\u054b",
    "\u054a\3\2\2\2\u054c\u054f\3\2\2\2\u054d\u054b\3\2\2\2\u054d\u054e\3",
    "\2\2\2\u054e\u0083\3\2\2\2\u054f\u054d\3\2\2\2\u0550\u0552\7\7\2\2\u0551",
    "\u0550\3\2\2\2\u0552\u0553\3\2\2\2\u0553\u0551\3\2\2\2\u0553\u0554\3",
    "\2\2\2\u0554\u0085\3\2\2\2\u0555\u0557\7\7\2\2\u0556\u0555\3\2\2\2\u0557",
    "\u0558\3\2\2\2\u0558\u0556\3\2\2\2\u0558\u0559\3\2\2\2\u0559\u055a\3",
    "\2\2\2\u055a\u055b\7\3\2\2\u055b\u0087\3\2\2\2\u055c\u055e\7\7\2\2\u055d",
    "\u055c\3\2\2\2\u055e\u0561\3\2\2\2\u055f\u055d\3\2\2\2\u055f\u0560\3",
    "\2\2\2\u0560\u0562\3\2\2\2\u0561\u055f\3\2\2\2\u0562\u0563\7\4\2\2\u0563",
    "\u0089\3\2\2\2\u0564\u0565\7{\2\2\u0565\u008b\3\2\2\2\u0566\u0568\5",
    "\u008eH\2\u0567\u0566\3\2\2\2\u0567\u0568\3\2\2\2\u0568\u0569\3\2\2",
    "\2\u0569\u056a\5\u0082B\2\u056a\u056b\7\2\2\3\u056b\u008d\3\2\2\2\u056c",
    "\u0572\5\u0090I\2\u056d\u056e\5\u0084C\2\u056e\u056f\5\u0090I\2\u056f",
    "\u0571\3\2\2\2\u0570\u056d\3\2\2\2\u0571\u0574\3\2\2\2\u0572\u0570\3",
    "\2\2\2\u0572\u0573\3\2\2\2\u0573\u008f\3\2\2\2\u0574\u0572\3\2\2\2\u0575",
    "\u0576\5\u00e8u\2\u0576\u0577\5\u0084C\2\u0577\u0579\3\2\2\2\u0578\u0575",
    "\3\2\2\2\u0579\u057c\3\2\2\2\u057a\u0578\3\2\2\2\u057a\u057b\3\2\2\2",
    "\u057b\u0582\3\2\2\2\u057c\u057a\3\2\2\2\u057d\u0583\5\n\6\2\u057e\u0583",
    "\5\u00b2Z\2\u057f\u0583\5\u0092J\2\u0580\u0583\5\u0094K\2\u0581\u0583",
    "\5\u00e6t\2\u0582\u057d\3\2\2\2\u0582\u057e\3\2\2\2\u0582\u057f\3\2",
    "\2\2\u0582\u0580\3\2\2\2\u0582\u0581\3\2\2\2\u0583\u0091\3\2\2\2\u0584",
    "\u0585\5\36\20\2\u0585\u0093\3\2\2\2\u0586\u0589\5\2\2\2\u0587\u0589",
    "\5\4\3\2\u0588\u0586\3\2\2\2\u0588\u0587\3\2\2\2\u0589\u0095\3\2\2\2",
    "\u058a\u0590\5\6\4\2\u058b\u058c\5\u0084C\2\u058c\u058d\5\6\4\2\u058d",
    "\u058f\3\2\2\2\u058e\u058b\3\2\2\2\u058f\u0592\3\2\2\2\u0590\u058e\3",
    "\2\2\2\u0590\u0591\3\2\2\2\u0591\u0097\3\2\2\2\u0592\u0590\3\2\2\2\u0593",
    "\u0599\5\b\5\2\u0594\u0595\5\u0084C\2\u0595\u0596\5\b\5\2\u0596\u0598",
    "\3\2\2\2\u0597\u0594\3\2\2\2\u0598\u059b\3\2\2\2\u0599\u0597\3\2\2\2",
    "\u0599\u059a\3\2\2\2\u059a\u0099\3\2\2\2\u059b\u0599\3\2\2\2\u059c\u05a1",
    "\5\u00c0a\2\u059d\u059e\7\23\2\2\u059e\u05a0\5\u00c0a\2\u059f\u059d",
    "\3\2\2\2\u05a0\u05a3\3\2\2\2\u05a1\u059f\3\2\2\2\u05a1\u05a2\3\2\2\2",
    "\u05a2\u009b\3\2\2\2\u05a3\u05a1\3\2\2\2\u05a4\u05a5\7o\2\2\u05a5\u05af",
    "\5\u009eP\2\u05a6\u05a7\7o\2\2\u05a7\u05af\5\u00a0Q\2\u05a8\u05a9\7",
    "o\2\2\u05a9\u05af\5\u00a4S\2\u05aa\u05ab\7s\2\2\u05ab\u05af\7\u00a7",
    "\2\2\u05ac\u05ad\7s\2\2\u05ad\u05af\5X-\2\u05ae\u05a4\3\2\2\2\u05ae",
    "\u05a6\3\2\2\2\u05ae\u05a8\3\2\2\2\u05ae\u05aa\3\2\2\2\u05ae\u05ac\3",
    "\2\2\2\u05af\u009d\3\2\2\2\u05b0\u05b2\7w\2\2\u05b1\u05b0\3\2\2\2\u05b1",
    "\u05b2\3\2\2\2\u05b2\u05b3\3\2\2\2\u05b3\u05b5\7\30\2\2\u05b4\u05b6",
    "\5\u00a2R\2\u05b5\u05b4\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6\u05b7\3\2",
    "\2\2\u05b7\u05b8\7\31\2\2\u05b8\u009f\3\2\2\2\u05b9\u05bb\7w\2\2\u05ba",
    "\u05b9\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bb\u05bc\3\2\2\2\u05bc\u05be\7",
    "*\2\2\u05bd\u05bf\5\u00a2R\2\u05be\u05bd\3\2\2\2\u05be\u05bf\3\2\2\2",
    "\u05bf\u05c0\3\2\2\2\u05c0\u05c1\7(\2\2\u05c1\u00a1\3\2\2\2\u05c2\u05c7",
    "\5X-\2\u05c3\u05c4\7\23\2\2\u05c4\u05c6\5X-\2\u05c5\u05c3\3\2\2\2\u05c6",
    "\u05c9\3\2\2\2\u05c7\u05c5\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u00a3\3",
    "\2\2\2\u05c9\u05c7\3\2\2\2\u05ca\u05cb\7\30\2\2\u05cb\u05cc\5X-\2\u05cc",
    "\u05cd\7\24\2\2\u05cd\u05ce\5X-\2\u05ce\u05cf\7\31\2\2\u05cf\u00a5\3",
    "\2\2\2\u05d0\u05d1\bT\1\2\u05d1\u05dd\5\u00a8U\2\u05d2\u05d3\7D\2\2",
    "\u05d3\u05d4\7*\2\2\u05d4\u05d5\5\u00a6T\2\u05d5\u05d6\7(\2\2\u05d6",
    "\u05dd\3\2\2\2\u05d7\u05d8\7C\2\2\u05d8\u05d9\7*\2\2\u05d9\u05da\5\u00a6",
    "T\2\u05da\u05db\7(\2\2\u05db\u05dd\3\2\2\2\u05dc\u05d0\3\2\2\2\u05dc",
    "\u05d2\3\2\2\2\u05dc\u05d7\3\2\2\2\u05dd\u05e8\3\2\2\2\u05de\u05df\f",
    "\7\2\2\u05df\u05e7\7,\2\2\u05e0\u05e1\f\6\2\2\u05e1\u05e2\7\30\2\2\u05e2",
    "\u05e7\7\31\2\2\u05e3\u05e4\f\5\2\2\u05e4\u05e5\7\32\2\2\u05e5\u05e7",
    "\7\33\2\2\u05e6\u05de\3\2\2\2\u05e6\u05e0\3\2\2\2\u05e6\u05e3\3\2\2",
    "\2\u05e7\u05ea\3\2\2\2\u05e8\u05e6\3\2\2\2\u05e8\u05e9\3\2\2\2\u05e9",
    "\u00a7\3\2\2\2\u05ea\u05e8\3\2\2\2\u05eb\u05ee\5\u00aaV\2\u05ec\u05ee",
    "\5\u00acW\2\u05ed\u05eb\3\2\2\2\u05ed\u05ec\3\2\2\2\u05ee\u00a9\3\2",
    "\2\2\u05ef\u05fe\7\64\2\2\u05f0\u05fe\7\65\2\2\u05f1\u05fe\7\66\2\2",
    "\u05f2\u05fe\7A\2\2\u05f3\u05fe\7\67\2\2\u05f4\u05fe\78\2\2\u05f5\u05fe",
    "\7?\2\2\u05f6\u05fe\79\2\2\u05f7\u05fe\7;\2\2\u05f8\u05fe\7:\2\2\u05f9",
    "\u05fe\7<\2\2\u05fa\u05fe\7>\2\2\u05fb\u05fe\7@\2\2\u05fc\u05fe\7B\2",
    "\2\u05fd\u05ef\3\2\2\2\u05fd\u05f0\3\2\2\2\u05fd\u05f1\3\2\2\2\u05fd",
    "\u05f2\3\2\2\2\u05fd\u05f3\3\2\2\2\u05fd\u05f4\3\2\2\2\u05fd\u05f5\3",
    "\2\2\2\u05fd\u05f6\3\2\2\2\u05fd\u05f7\3\2\2\2\u05fd\u05f8\3\2\2\2\u05fd",
    "\u05f9\3\2\2\2\u05fd\u05fa\3\2\2\2\u05fd\u05fb\3\2\2\2\u05fd\u05fc\3",
    "\2\2\2\u05fe\u00ab\3\2\2\2\u05ff\u0600\7\u00a3\2\2\u0600\u00ad\3\2\2",
    "\2\u0601\u0603\7w\2\2\u0602\u0601\3\2\2\2\u0602\u0603\3\2\2\2\u0603",
    "\u0604\3\2\2\2\u0604\u0605\5\u00acW\2\u0605\u00af\3\2\2\2\u0606\u0607",
    "\7>\2\2\u0607\u00b1\3\2\2\2\u0608\u060c\5\f\7\2\u0609\u060c\5\34\17",
    "\2\u060a\u060c\5\16\b\2\u060b\u0608\3\2\2\2\u060b\u0609\3\2\2\2\u060b",
    "\u060a\3\2\2\2\u060c\u00b3\3\2\2\2\u060d\u0612\5\u00be`\2\u060e\u060f",
    "\7\23\2\2\u060f\u0611\5\u00be`\2\u0610\u060e\3\2\2\2\u0611\u0614\3\2",
    "\2\2\u0612\u0610\3\2\2\2\u0612\u0613\3\2\2\2\u0613\u00b5\3\2\2\2\u0614",
    "\u0612\3\2\2\2\u0615\u0618\5\u00ba^\2\u0616\u0618\5\u00be`\2\u0617\u0615",
    "\3\2\2\2\u0617\u0616\3\2\2\2\u0618\u00b7\3\2\2\2\u0619\u061d\5\u00ba",
    "^\2\u061a\u061d\5\u00be`\2\u061b\u061d\5\u00c0a\2\u061c\u0619\3\2\2",
    "\2\u061c\u061a\3\2\2\2\u061c\u061b\3\2\2\2\u061d\u00b9\3\2\2\2\u061e",
    "\u061f\7\u00a4\2\2\u061f\u00bb\3\2\2\2\u0620\u0621\t\3\2\2\u0621\u00bd",
    "\3\2\2\2\u0622\u0623\7\u00a3\2\2\u0623\u00bf\3\2\2\2\u0624\u0625\7\u00a2",
    "\2\2\u0625\u00c1\3\2\2\2\u0626\u062b\5\u00c4c\2\u0627\u0628\7\23\2\2",
    "\u0628\u062a\5\u00c4c\2\u0629\u0627\3\2\2\2\u062a\u062d\3\2\2\2\u062b",
    "\u0629\3\2\2\2\u062b\u062c\3\2\2\2\u062c\u00c3\3\2\2\2\u062d\u062b\3",
    "\2\2\2\u062e\u0634\5\u00caf\2\u062f\u0631\7w\2\2\u0630\u062f\3\2\2\2",
    "\u0630\u0631\3\2\2\2\u0631\u0632\3\2\2\2\u0632\u0634\5\u00c6d\2\u0633",
    "\u062e\3\2\2\2\u0633\u0630\3\2\2\2\u0634\u00c5\3\2\2\2\u0635\u0638\5",
    "\u00c8e\2\u0636\u0638\5\62\32\2\u0637\u0635\3\2\2\2\u0637\u0636\3\2",
    "\2\2\u0638\u00c7\3\2\2\2\u0639\u063c\5\u00ba^\2\u063a\u063b\7-\2\2\u063b",
    "\u063d\5\u0106\u0084\2\u063c\u063a\3\2\2\2\u063c\u063d\3\2\2\2\u063d",
    "\u00c9\3\2\2\2\u063e\u063f\5\u00b0Y\2\u063f\u0640\5\u00ba^\2\u0640\u00cb",
    "\3\2\2\2\u0641\u0644\5\u00a6T\2\u0642\u0644\5\u00ceh\2\u0643\u0641\3",
    "\2\2\2\u0643\u0642\3\2\2\2\u0644\u00cd\3\2\2\2\u0645\u0646\bh\1\2\u0646",
    "\u0647\7I\2\2\u0647\u0650\3\2\2\2\u0648\u0649\f\4\2\2\u0649\u064a\7",
    "\30\2\2\u064a\u064f\7\31\2\2\u064b\u064c\f\3\2\2\u064c\u064d\7\32\2",
    "\2\u064d\u064f\7\33\2\2\u064e\u0648\3\2\2\2\u064e\u064b\3\2\2\2\u064f",
    "\u0652\3\2\2\2\u0650\u064e\3\2\2\2\u0650\u0651\3\2\2\2\u0651\u00cf\3",
    "\2\2\2\u0652\u0650\3\2\2\2\u0653\u0659\5\u00d2j\2\u0654\u0655\5\u0084",
    "C\2\u0655\u0656\5\u00d2j\2\u0656\u0658\3\2\2\2\u0657\u0654\3\2\2\2\u0658",
    "\u065b\3\2\2\2\u0659\u0657\3\2\2\2\u0659\u065a\3\2\2\2\u065a\u00d1\3",
    "\2\2\2\u065b\u0659\3\2\2\2\u065c\u0662\5\24\13\2\u065d\u0662\5\30\r",
    "\2\u065e\u0662\5(\25\2\u065f\u0662\5&\24\2\u0660\u0662\5\22\n\2\u0661",
    "\u065c\3\2\2\2\u0661\u065d\3\2\2\2\u0661\u065e\3\2\2\2\u0661\u065f\3",
    "\2\2\2\u0661\u0660\3\2\2\2\u0662\u00d3\3\2\2\2\u0663\u0669\5\u00d6l",
    "\2\u0664\u0665\5\u0084C\2\u0665\u0666\5\u00d6l\2\u0666\u0668\3\2\2\2",
    "\u0667\u0664\3\2\2\2\u0668\u066b\3\2\2\2\u0669\u0667\3\2\2\2\u0669\u066a",
    "\3\2\2\2\u066a\u00d5\3\2\2\2\u066b\u0669\3\2\2\2\u066c\u0670\5\32\16",
    "\2\u066d\u0670\5\26\f\2\u066e\u0670\5*\26\2\u066f\u066c\3\2\2\2\u066f",
    "\u066d\3\2\2\2\u066f\u066e\3\2\2\2\u0670\u00d7\3\2\2\2\u0671\u0672\7",
    "\13\2\2\u0672\u067c\5\u0182\u00c2\2\u0673\u0674\7\f\2\2\u0674\u067c",
    "\5\u019c\u00cf\2\u0675\u0676\7\r\2\2\u0676\u067c\5\u00dan\2\u0677\u0678",
    "\7\16\2\2\u0678\u067c\5\u00dan\2\u0679\u067a\7\17\2\2\u067a\u067c\5",
    "\u00dep\2\u067b\u0671\3\2\2\2\u067b\u0673\3\2\2\2\u067b\u0675\3\2\2",
    "\2\u067b\u0677\3\2\2\2\u067b\u0679\3\2\2\2\u067c\u00d9\3\2\2\2\u067d",
    "\u067f\5\u00b8]\2\u067e\u0680\5\u00dco\2\u067f\u067e\3\2\2\2\u067f\u0680",
    "\3\2\2\2\u0680\u00db\3\2\2\2\u0681\u0682\7l\2\2\u0682\u0683\5\u012a",
    "\u0096\2\u0683\u0684\7\21\2\2\u0684\u0689\5\u00b8]\2\u0685\u0686\7\25",
    "\2\2\u0686\u0688\5\u00b8]\2\u0687\u0685\3\2\2\2\u0688\u068b\3\2\2\2",
    "\u0689\u0687\3\2\2\2\u0689\u068a\3\2\2\2\u068a\u00dd\3\2\2\2\u068b\u0689",
    "\3\2\2\2\u068c\u068e\5\u00b8]\2\u068d\u068f\5\u00e0q\2\u068e\u068d\3",
    "\2\2\2\u068e\u068f\3\2\2\2\u068f\u00df\3\2\2\2\u0690\u0691\7l\2\2\u0691",
    "\u0692\5\u012a\u0096\2\u0692\u0694\7\21\2\2\u0693\u0695\7%\2\2\u0694",
    "\u0693\3\2\2\2\u0694\u0695\3\2\2\2\u0695\u0696\3\2\2\2\u0696\u069b\5",
    "\u0152\u00aa\2\u0697\u0698\7%\2\2\u0698\u069a\5\u0152\u00aa\2\u0699",
    "\u0697\3\2\2\2\u069a\u069d\3\2\2\2\u069b\u0699\3\2\2\2\u069b\u069c\3",
    "\2\2\2\u069c\u06a0\3\2\2\2\u069d\u069b\3\2\2\2\u069e\u069f\7\25\2\2",
    "\u069f\u06a1\5\u0152\u00aa\2\u06a0\u069e\3\2\2\2\u06a0\u06a1\3\2\2\2",
    "\u06a1\u00e1\3\2\2\2\u06a2\u06a7\5\u00ba^\2\u06a3\u06a4\7\23\2\2\u06a4",
    "\u06a6\5\u00ba^\2\u06a5\u06a3\3\2\2\2\u06a6\u06a9\3\2\2\2\u06a7\u06a5",
    "\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8\u00e3\3\2\2\2\u06a9\u06a7\3\2\2\2",
    "\u06aa\u06af\5\u00bc_\2\u06ab\u06ac\7\23\2\2\u06ac\u06ae\5\u00bc_\2",
    "\u06ad\u06ab\3\2\2\2\u06ae\u06b1\3\2\2\2\u06af\u06ad\3\2\2\2\u06af\u06b0",
    "\3\2\2\2\u06b0\u00e5\3\2\2\2\u06b1\u06af\3\2\2\2\u06b2\u06b7\5&\24\2",
    "\u06b3\u06b7\5(\25\2\u06b4\u06b7\5*\26\2\u06b5\u06b7\5,\27\2\u06b6\u06b2",
    "\3\2\2\2\u06b6\u06b3\3\2\2\2\u06b6\u06b4\3\2\2\2\u06b6\u06b5\3\2\2\2",
    "\u06b7\u00e7\3\2\2\2\u06b8\u06b9\7\n\2\2\u06b9\u00e9\3\2\2\2\u06ba\u06c0",
    "\5\u00ecw\2\u06bb\u06bc\5\u0084C\2\u06bc\u06bd\5\u00ecw\2\u06bd\u06bf",
    "\3\2\2\2\u06be\u06bb\3\2\2\2\u06bf\u06c2\3\2\2\2\u06c0\u06be\3\2\2\2",
    "\u06c0\u06c1\3\2\2\2\u06c1\u00eb\3\2\2\2\u06c2\u06c0\3\2\2\2\u06c3\u06c4",
    "\7\13\2\2\u06c4\u06ce\5\u016c\u00b7\2\u06c5\u06c6\7\f\2\2\u06c6\u06ce",
    "\5\u0188\u00c5\2\u06c7\u06c8\7\r\2\2\u06c8\u06ce\5\u00eex\2\u06c9\u06ca",
    "\7\16\2\2\u06ca\u06ce\5\u00eex\2\u06cb\u06cc\7\17\2\2\u06cc\u06ce\5",
    "\u00f0y\2\u06cd\u06c3\3\2\2\2\u06cd\u06c5\3\2\2\2\u06cd\u06c7\3\2\2",
    "\2\u06cd\u06c9\3\2\2\2\u06cd\u06cb\3\2\2\2\u06ce\u00ed\3\2\2\2\u06cf",
    "\u06d1\5\u0154\u00ab\2\u06d0\u06d2\7\22\2\2\u06d1\u06d0\3\2\2\2\u06d1",
    "\u06d2\3\2\2\2\u06d2\u06d4\3\2\2\2\u06d3\u06d5\5\u00dco\2\u06d4\u06d3",
    "\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5\u00ef\3\2\2\2\u06d6\u06d8\5\u013a",
    "\u009e\2\u06d7\u06d9\7\22\2\2\u06d8\u06d7\3\2\2\2\u06d8\u06d9\3\2\2",
    "\2\u06d9\u06db\3\2\2\2\u06da\u06dc\5\u00e0q\2\u06db\u06da\3\2\2\2\u06db",
    "\u06dc\3\2\2\2\u06dc\u00f1\3\2\2\2\u06dd\u06e3\5\64\33\2\u06de\u06df",
    "\5\u0084C\2\u06df\u06e0\5\64\33\2\u06e0\u06e2\3\2\2\2\u06e1\u06de\3",
    "\2\2\2\u06e2\u06e5\3\2\2\2\u06e3\u06e1\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4",
    "\u00f3\3\2\2\2\u06e5\u06e3\3\2\2\2\u06e6\u06ec\5.\30\2\u06e7\u06e8\5",
    "\u0084C\2\u06e8\u06e9\5.\30\2\u06e9\u06eb\3\2\2\2\u06ea\u06e7\3\2\2",
    "\2\u06eb\u06ee\3\2\2\2\u06ec\u06ea\3\2\2\2\u06ec\u06ed\3\2\2\2\u06ed",
    "\u00f5\3\2\2\2\u06ee\u06ec\3\2\2\2\u06ef\u06f5\5B\"\2\u06f0\u06f1\5",
    "\u0084C\2\u06f1\u06f2\5B\"\2\u06f2\u06f4\3\2\2\2\u06f3\u06f0\3\2\2\2",
    "\u06f4\u06f7\3\2\2\2\u06f5\u06f3\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6\u00f7",
    "\3\2\2\2\u06f7\u06f5\3\2\2\2\u06f8\u06fe\5R*\2\u06f9\u06fa\5\u0084C",
    "\2\u06fa\u06fb\5R*\2\u06fb\u06fd\3\2\2\2\u06fc\u06f9\3\2\2\2\u06fd\u0700",
    "\3\2\2\2\u06fe\u06fc\3\2\2\2\u06fe\u06ff\3\2\2\2\u06ff\u00f9\3\2\2\2",
    "\u0700\u06fe\3\2\2\2\u0701\u0702\7\30\2\2\u0702\u0703\5\u00fc\177\2",
    "\u0703\u0704\7\24\2\2\u0704\u0705\5\u00fc\177\2\u0705\u0706\7\31\2\2",
    "\u0706\u0710\3\2\2\2\u0707\u0708\7\30\2\2\u0708\u0709\5\u00fe\u0080",
    "\2\u0709\u070a\7\31\2\2\u070a\u0710\3\2\2\2\u070b\u070c\7*\2\2\u070c",
    "\u070d\5\u00fe\u0080\2\u070d\u070e\7(\2\2\u070e\u0710\3\2\2\2\u070f",
    "\u0701\3\2\2\2\u070f\u0707\3\2\2\2\u070f\u070b\3\2\2\2\u0710\u00fb\3",
    "\2\2\2\u0711\u0720\7\u00a0\2\2\u0712\u0720\7\u00a1\2\2\u0713\u0720\7",
    "\u00a9\2\2\u0714\u0720\7\u00aa\2\2\u0715\u0720\7\u009f\2\2\u0716\u0720",
    "\7\u00ae\2\2\u0717\u0720\7\u00ad\2\2\u0718\u0720\7\u00a7\2\2\u0719\u0720",
    "\7\u00ab\2\2\u071a\u0720\7\u00ac\2\2\u071b\u0720\7\u009e\2\2\u071c\u0720",
    "\7\u00af\2\2\u071d\u0720\7\u00a8\2\2\u071e\u0720\5\u008aF\2\u071f\u0711",
    "\3\2\2\2\u071f\u0712\3\2\2\2\u071f\u0713\3\2\2\2\u071f\u0714\3\2\2\2",
    "\u071f\u0715\3\2\2\2\u071f\u0716\3\2\2\2\u071f\u0717\3\2\2\2\u071f\u0718",
    "\3\2\2\2\u071f\u0719\3\2\2\2\u071f\u071a\3\2\2\2\u071f\u071b\3\2\2\2",
    "\u071f\u071c\3\2\2\2\u071f\u071d\3\2\2\2\u071f\u071e\3\2\2\2\u0720\u00fd",
    "\3\2\2\2\u0721\u0726\5\u00fc\177\2\u0722\u0723\7\23\2\2\u0723\u0725",
    "\5\u00fc\177\2\u0724\u0722\3\2\2\2\u0725\u0728\3\2\2\2\u0726\u0724\3",
    "\2\2\2\u0726\u0727\3\2\2\2\u0727\u00ff\3\2\2\2\u0728\u0726\3\2\2\2\u0729",
    "\u072e\5\u0104\u0083\2\u072a\u072e\5\u0106\u0084\2\u072b\u072e\5\u00b8",
    "]\2\u072c\u072e\5\u0102\u0082\2\u072d\u0729\3\2\2\2\u072d\u072a\3\2",
    "\2\2\u072d\u072b\3\2\2\2\u072d\u072c\3\2\2\2\u072e\u0101\3\2\2\2\u072f",
    "\u0730\t\4\2\2\u0730\u0103\3\2\2\2\u0731\u0732\7\26\2\2\u0732\u0733",
    "\5X-\2\u0733\u0734\7\27\2\2\u0734\u0105\3\2\2\2\u0735\u0738\5\u00fc",
    "\177\2\u0736\u0738\5\u0108\u0085\2\u0737\u0735\3\2\2\2\u0737\u0736\3",
    "\2\2\2\u0738\u0107\3\2\2\2\u0739\u073f\5\u00a4S\2\u073a\u073f\5\u009e",
    "P\2\u073b\u073f\5\u00a0Q\2\u073c\u073f\5\u010c\u0087\2\u073d\u073f\5",
    "\u010a\u0086\2\u073e\u0739\3\2\2\2\u073e\u073a\3\2\2\2\u073e\u073b\3",
    "\2\2\2\u073e\u073c\3\2\2\2\u073e\u073d\3\2\2\2\u073f\u0109\3\2\2\2\u0740",
    "\u0742\7w\2\2\u0741\u0740\3\2\2\2\u0741\u0742\3\2\2\2\u0742\u0743\3",
    "\2\2\2\u0743\u0745\7\26\2\2\u0744\u0746\5\u010e\u0088\2\u0745\u0744",
    "\3\2\2\2\u0745\u0746\3\2\2\2\u0746\u0747\3\2\2\2\u0747\u0748\7\27\2",
    "\2\u0748\u010b\3\2\2\2\u0749\u074b\7w\2\2\u074a\u0749\3\2\2\2\u074a",
    "\u074b\3\2\2\2\u074b\u074c\3\2\2\2\u074c\u074e\7\32\2\2\u074d\u074f",
    "\5\u0110\u0089\2\u074e\u074d\3\2\2\2\u074e\u074f\3\2\2\2\u074f\u0750",
    "\3\2\2\2\u0750\u0751\7\33\2\2\u0751\u010d\3\2\2\2\u0752\u0753\5X-\2",
    "\u0753\u075c\7\23\2\2\u0754\u0759\5X-\2\u0755\u0756\7\23\2\2\u0756\u0758",
    "\5X-\2\u0757\u0755\3\2\2\2\u0758\u075b\3\2\2\2\u0759\u0757\3\2\2\2\u0759",
    "\u075a\3\2\2\2\u075a\u075d\3\2\2\2\u075b\u0759\3\2\2\2\u075c\u0754\3",
    "\2\2\2\u075c\u075d\3\2\2\2\u075d\u010f\3\2\2\2\u075e\u0763\5\u0112\u008a",
    "\2\u075f\u0760\7\23\2\2\u0760\u0762\5\u0112\u008a\2\u0761\u075f\3\2",
    "\2\2\u0762\u0765\3\2\2\2\u0763\u0761\3\2\2\2\u0763\u0764\3\2\2\2\u0764",
    "\u0111\3\2\2\2\u0765\u0763\3\2\2\2\u0766\u0767\5X-\2\u0767\u0768\7\21",
    "\2\2\u0768\u0769\5X-\2\u0769\u0113\3\2\2\2\u076a\u076b\5X-\2\u076b\u076c",
    "\7\21\2\2\u076c\u076d\5X-\2\u076d\u0774\3\2\2\2\u076e\u076f\5X-\2\u076f",
    "\u0770\7\21\2\2\u0770\u0774\3\2\2\2\u0771\u0772\7\21\2\2\u0772\u0774",
    "\5X-\2\u0773\u076a\3\2\2\2\u0773\u076e\3\2\2\2\u0773\u0771\3\2\2\2\u0774",
    "\u0115\3\2\2\2\u0775\u0776\5\u00ba^\2\u0776\u0777\5\u0130\u0099\2\u0777",
    "\u0778\5X-\2\u0778\u0117\3\2\2\2\u0779\u077a\b\u008d\1\2\u077a\u077b",
    "\5\u00ba^\2\u077b\u0780\3\2\2\2\u077c\u077d\f\3\2\2\u077d\u077f\5~@",
    "\2\u077e\u077c\3\2\2\2\u077f\u0782\3\2\2\2\u0780\u077e\3\2\2\2\u0780",
    "\u0781\3\2\2\2\u0781\u0119\3\2\2\2\u0782\u0780\3\2\2\2\u0783\u0784\6",
    "\u008e\61\3\u0784\u0785\7\u00a4\2\2\u0785\u0788\5\u00ccg\2\u0786\u0788",
    "\5X-\2\u0787\u0783\3\2\2\2\u0787\u0786\3\2\2\2\u0788\u011b\3\2\2\2\u0789",
    "\u078a\7\u0086\2\2\u078a\u078b\7F\2\2\u078b\u078c\7l\2\2\u078c\u078d",
    "\5X-\2\u078d\u011d\3\2\2\2\u078e\u078f\7\u0086\2\2\u078f\u0790\7~\2",
    "\2\u0790\u0791\7l\2\2\u0791\u0792\5X-\2\u0792\u011f\3\2\2\2\u0793\u0798",
    "\5\u0122\u0092\2\u0794\u0795\7\23\2\2\u0795\u0797\5\u0122\u0092\2\u0796",
    "\u0794\3\2\2\2\u0797\u079a\3\2\2\2\u0798\u0796\3\2\2\2\u0798\u0799\3",
    "\2\2\2\u0799\u0121\3\2\2\2\u079a\u0798\3\2\2\2\u079b\u07a0\5\u00ba^",
    "\2\u079c\u079d\7\25\2\2\u079d\u079f\5\u00ba^\2\u079e\u079c\3\2\2\2\u079f",
    "\u07a2\3\2\2\2\u07a0\u079e\3\2\2\2\u07a0\u07a1\3\2\2\2\u07a1\u07a4\3",
    "\2\2\2\u07a2\u07a0\3\2\2\2\u07a3\u07a5\t\5\2\2\u07a4\u07a3\3\2\2\2\u07a4",
    "\u07a5\3\2\2\2\u07a5\u0123\3\2\2\2\u07a6\u07ad\7\"\2\2\u07a7\u07ad\7",
    "#\2\2\u07a8\u07ad\5\u0132\u009a\2\u07a9\u07ad\5\u0134\u009b\2\u07aa",
    "\u07ad\5\u0136\u009c\2\u07ab\u07ad\5\u0138\u009d\2\u07ac\u07a6\3\2\2",
    "\2\u07ac\u07a7\3\2\2\2\u07ac\u07a8\3\2\2\2\u07ac\u07a9\3\2\2\2\u07ac",
    "\u07aa\3\2\2\2\u07ac\u07ab\3\2\2\2\u07ad\u0125\3\2\2\2\u07ae\u07af\7",
    "\u00a4\2\2\u07af\u07b0\6\u0094\62\3\u07b0\u0127\3\2\2\2\u07b1\u07b2",
    "\7\u00a4\2\2\u07b2\u07b3\6\u0095\63\3\u07b3\u0129\3\2\2\2\u07b4\u07b5",
    "\7\u00a4\2\2\u07b5\u07b6\6\u0096\64\3\u07b6\u012b\3\2\2\2\u07b7\u07b8",
    "\7\u00a4\2\2\u07b8\u07b9\6\u0097\65\3\u07b9\u012d\3\2\2\2\u07ba\u07bb",
    "\7\u00a4\2\2\u07bb\u07bc\6\u0098\66\3\u07bc\u012f\3\2\2\2\u07bd\u07be",
    "\7-\2\2\u07be\u0131\3\2\2\2\u07bf\u07c0\7$\2\2\u07c0\u0133\3\2\2\2\u07c1",
    "\u07c2\7%\2\2\u07c2\u0135\3\2\2\2\u07c3\u07c4\7&\2\2\u07c4\u0137\3\2",
    "\2\2\u07c5\u07c6\t\6\2\2\u07c6\u0139\3\2\2\2\u07c7\u07c8\7\u0089\2\2",
    "\u07c8\u07c9\5\u013c\u009f\2\u07c9\u07ca\7\22\2\2\u07ca\u07cf\3\2\2",
    "\2\u07cb\u07cc\5\u013c\u009f\2\u07cc\u07cd\7\22\2\2\u07cd\u07cf\3\2",
    "\2\2\u07ce\u07c7\3\2\2\2\u07ce\u07cb\3\2\2\2\u07cf\u013b\3\2\2\2\u07d0",
    "\u07d1\b\u009f\1\2\u07d1\u07d2\5\u013e\u00a0\2\u07d2\u07d7\3\2\2\2\u07d3",
    "\u07d4\f\3\2\2\u07d4\u07d6\5\u0144\u00a3\2\u07d5\u07d3\3\2\2\2\u07d6",
    "\u07d9\3\2\2\2\u07d7\u07d5\3\2\2\2\u07d7\u07d8\3\2\2\2\u07d8\u013d\3",
    "\2\2\2\u07d9\u07d7\3\2\2\2\u07da\u07e2\5\u0140\u00a1\2\u07db\u07e2\5",
    "\u0142\u00a2\2\u07dc\u07e2\5\u014c\u00a7\2\u07dd\u07e2\5\u014e\u00a8",
    "\2\u07de\u07e2\5\u0150\u00a9\2\u07df\u07e2\5\u0146\u00a4\2\u07e0\u07e2",
    "\5\u014a\u00a6\2\u07e1\u07da\3\2\2\2\u07e1\u07db\3\2\2\2\u07e1\u07dc",
    "\3\2\2\2\u07e1\u07dd\3\2\2\2\u07e1\u07de\3\2\2\2\u07e1\u07df\3\2\2\2",
    "\u07e1\u07e0\3\2\2\2\u07e2\u013f\3\2\2\2\u07e3\u07e4\5\u0102\u0082\2",
    "\u07e4\u0141\3\2\2\2\u07e5\u07e6\5\u0126\u0094\2\u07e6\u07e7\5\u0146",
    "\u00a4\2\u07e7\u0143\3\2\2\2\u07e8\u07e9\7\25\2\2\u07e9\u07ee\5\u0146",
    "\u00a4\2\u07ea\u07eb\7\25\2\2\u07eb\u07ee\5\u0152\u00aa\2\u07ec\u07ee",
    "\5\u014a\u00a6\2\u07ed\u07e8\3\2\2\2\u07ed\u07ea\3\2\2\2\u07ed\u07ec",
    "\3\2\2\2\u07ee\u0145\3\2\2\2\u07ef\u07f0\5\u0152\u00aa\2\u07f0\u07f2",
    "\7\26\2\2\u07f1\u07f3\5\u0148\u00a5\2\u07f2\u07f1\3\2\2\2\u07f2\u07f3",
    "\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u07f5\7\27\2\2\u07f5\u0147\3\2\2",
    "\2\u07f6\u07f7\b\u00a5\1\2\u07f7\u07f8\5\u013c\u009f\2\u07f8\u07fe\3",
    "\2\2\2\u07f9\u07fa\f\3\2\2\u07fa\u07fb\7\23\2\2\u07fb\u07fd\5\u013c",
    "\u009f\2\u07fc\u07f9\3\2\2\2\u07fd\u0800\3\2\2\2\u07fe\u07fc\3\2\2\2",
    "\u07fe\u07ff\3\2\2\2\u07ff\u0149\3\2\2\2\u0800\u07fe\3\2\2\2\u0801\u0802",
    "\7\30\2\2\u0802\u0803\5\u013c\u009f\2\u0803\u0804\7\31\2\2\u0804\u014b",
    "\3\2\2\2\u0805\u0806\7\26\2\2\u0806\u0807\5\u013c\u009f\2\u0807\u0808",
    "\7\27\2\2\u0808\u014d\3\2\2\2\u0809\u080a\5\u0152\u00aa\2\u080a\u014f",
    "\3\2\2\2\u080b\u0811\7\u00a9\2\2\u080c\u0811\7\u00ab\2\2\u080d\u0811",
    "\7\u00a7\2\2\u080e\u0811\7\u009e\2\2\u080f\u0811\7\u009f\2\2\u0810\u080b",
    "\3\2\2\2\u0810\u080c\3\2\2\2\u0810\u080d\3\2\2\2\u0810\u080e\3\2\2\2",
    "\u0810\u080f\3\2\2\2\u0811\u0151\3\2\2\2\u0812\u0813\t\7\2\2\u0813\u0153",
    "\3\2\2\2\u0814\u0815\7\u0089\2\2\u0815\u0818\5\u0156\u00ac\2\u0816\u0818",
    "\5\u0156\u00ac\2\u0817\u0814\3\2\2\2\u0817\u0816\3\2\2\2\u0818\u0155",
    "\3\2\2\2\u0819\u081a\b\u00ac\1\2\u081a\u081b\5\u0158\u00ad\2\u081b\u0820",
    "\3\2\2\2\u081c\u081d\f\3\2\2\u081d\u081f\5\u015a\u00ae\2\u081e\u081c",
    "\3\2\2\2\u081f\u0822\3\2\2\2\u0820\u081e\3\2\2\2\u0820\u0821\3\2\2\2",
    "\u0821\u0157\3\2\2\2\u0822\u0820\3\2\2\2\u0823\u0828\5\u0164\u00b3\2",
    "\u0824\u0828\5\u0166\u00b4\2\u0825\u0828\5\u0168\u00b5\2\u0826\u0828",
    "\5\u015c\u00af\2\u0827\u0823\3\2\2\2\u0827\u0824\3\2\2\2\u0827\u0825",
    "\3\2\2\2\u0827\u0826\3\2\2\2\u0828\u0159\3\2\2\2\u0829\u082a\7\25\2",
    "\2\u082a\u0830\5\u015c\u00af\2\u082b\u082c\7\30\2\2\u082c\u082d\5\u0156",
    "\u00ac\2\u082d\u082e\7\31\2\2\u082e\u0830\3\2\2\2\u082f\u0829\3\2\2",
    "\2\u082f\u082b\3\2\2\2\u0830\u015b\3\2\2\2\u0831\u0832\5\u016a\u00b6",
    "\2\u0832\u0834\7\26\2\2\u0833\u0835\5\u015e\u00b0\2\u0834\u0833\3\2",
    "\2\2\u0834\u0835\3\2\2\2\u0835\u0836\3\2\2\2\u0836\u0837\7\27\2\2\u0837",
    "\u015d\3\2\2\2\u0838\u083f\5\u0160\u00b1\2\u0839\u083f\5\u0162\u00b2",
    "\2\u083a\u083b\5\u0160\u00b1\2\u083b\u083c\7\23\2\2\u083c\u083d\5\u0162",
    "\u00b2\2\u083d\u083f\3\2\2\2\u083e\u0838\3\2\2\2\u083e\u0839\3\2\2\2",
    "\u083e\u083a\3\2\2\2\u083f\u015f\3\2\2\2\u0840\u0841\b\u00b1\1\2\u0841",
    "\u0842\5\u0156\u00ac\2\u0842\u0848\3\2\2\2\u0843\u0844\f\3\2\2\u0844",
    "\u0845\7\23\2\2\u0845\u0847\5\u0156\u00ac\2\u0846\u0843\3\2\2\2\u0847",
    "\u084a\3\2\2\2\u0848\u0846\3\2\2\2\u0848\u0849\3\2\2\2\u0849\u0161\3",
    "\2\2\2\u084a\u0848\3\2\2\2\u084b\u084c\b\u00b2\1\2\u084c\u084d\5\u016a",
    "\u00b6\2\u084d\u084e\7-\2\2\u084e\u084f\5\u0156\u00ac\2\u084f\u0858",
    "\3\2\2\2\u0850\u0851\f\3\2\2\u0851\u0852\7\23\2\2\u0852\u0853\5\u016a",
    "\u00b6\2\u0853\u0854\7-\2\2\u0854\u0855\5\u0156\u00ac\2\u0855\u0857",
    "\3\2\2\2\u0856\u0850\3\2\2\2\u0857\u085a\3\2\2\2\u0858\u0856\3\2\2\2",
    "\u0858\u0859\3\2\2\2\u0859\u0163\3\2\2\2\u085a\u0858\3\2\2\2\u085b\u085c",
    "\7\26\2\2\u085c\u085d\5\u0156\u00ac\2\u085d\u085e\7\27\2\2\u085e\u0165",
    "\3\2\2\2\u085f\u0860\b\u00b4\1\2\u0860\u0863\7\u00a6\2\2\u0861\u0863",
    "\5\u016a\u00b6\2\u0862\u085f\3\2\2\2\u0862\u0861\3\2\2\2\u0863\u0869",
    "\3\2\2\2\u0864\u0865\f\3\2\2\u0865\u0866\7\25\2\2\u0866\u0868\5\u016a",
    "\u00b6\2\u0867\u0864\3\2\2\2\u0868\u086b\3\2\2\2\u0869\u0867\3\2\2\2",
    "\u0869\u086a\3\2\2\2\u086a\u0167\3\2\2\2\u086b\u0869\3\2\2\2\u086c\u0872",
    "\7\u00a9\2\2\u086d\u0872\7\u00ab\2\2\u086e\u0872\7\u00a7\2\2\u086f\u0872",
    "\7\u009e\2\2\u0870\u0872\7\u009f\2\2\u0871\u086c\3\2\2\2\u0871\u086d",
    "\3\2\2\2\u0871\u086e\3\2\2\2\u0871\u086f\3\2\2\2\u0871\u0870\3\2\2\2",
    "\u0872\u0169\3\2\2\2\u0873\u0874\t\b\2\2\u0874\u016b\3\2\2\2\u0875\u0876",
    "\7\u0089\2\2\u0876\u0877\5\u016e\u00b8\2\u0877\u0878\7\22\2\2\u0878",
    "\u087d\3\2\2\2\u0879\u087a\5\u016e\u00b8\2\u087a\u087b\7\22\2\2\u087b",
    "\u087d\3\2\2\2\u087c\u0875\3\2\2\2\u087c\u0879\3\2\2\2\u087d\u016d\3",
    "\2\2\2\u087e\u087f\b\u00b8\1\2\u087f\u0880\5\u0170\u00b9\2\u0880\u0885",
    "\3\2\2\2\u0881\u0882\f\3\2\2\u0882\u0884\5\u0176\u00bc\2\u0883\u0881",
    "\3\2\2\2\u0884\u0887\3\2\2\2\u0885\u0883\3\2\2\2\u0885\u0886\3\2\2\2",
    "\u0886\u016f\3\2\2\2\u0887\u0885\3\2\2\2\u0888\u088e\5\u0172\u00ba\2",
    "\u0889\u088e\5\u0174\u00bb\2\u088a\u088e\5\u017e\u00c0\2\u088b\u088e",
    "\5\u0180\u00c1\2\u088c\u088e\5\u0184\u00c3\2\u088d\u0888\3\2\2\2\u088d",
    "\u0889\3\2\2\2\u088d\u088a\3\2\2\2\u088d\u088b\3\2\2\2\u088d\u088c\3",
    "\2\2\2\u088e\u0171\3\2\2\2\u088f\u0890\5\u0102\u0082\2\u0890\u0173\3",
    "\2\2\2\u0891\u0892\5\u0126\u0094\2\u0892\u0893\5\u0178\u00bd\2\u0893",
    "\u0175\3\2\2\2\u0894\u0895\7\25\2\2\u0895\u0898\5\u0178\u00bd\2\u0896",
    "\u0898\5\u017c\u00bf\2\u0897\u0894\3\2\2\2\u0897\u0896\3\2\2\2\u0898",
    "\u0177\3\2\2\2\u0899\u089a\5\u0186\u00c4\2\u089a\u089c\7\26\2\2\u089b",
    "\u089d\5\u017a\u00be\2\u089c\u089b\3\2\2\2\u089c\u089d\3\2\2\2\u089d",
    "\u089e\3\2\2\2\u089e\u089f\7\27\2\2\u089f\u0179\3\2\2\2\u08a0\u08a1",
    "\b\u00be\1\2\u08a1\u08a2\5\u016e\u00b8\2\u08a2\u08a8\3\2\2\2\u08a3\u08a4",
    "\f\3\2\2\u08a4\u08a5\7\23\2\2\u08a5\u08a7\5\u016e\u00b8\2\u08a6\u08a3",
    "\3\2\2\2\u08a7\u08aa\3\2\2\2\u08a8\u08a6\3\2\2\2\u08a8\u08a9\3\2\2\2",
    "\u08a9\u017b\3\2\2\2\u08aa\u08a8\3\2\2\2\u08ab\u08ac\7\30\2\2\u08ac",
    "\u08ad\5\u016e\u00b8\2\u08ad\u08ae\7\31\2\2\u08ae\u017d\3\2\2\2\u08af",
    "\u08b0\7\26\2\2\u08b0\u08b1\5\u016e\u00b8\2\u08b1\u08b2\7\27\2\2\u08b2",
    "\u017f\3\2\2\2\u08b3\u08b4\b\u00c1\1\2\u08b4\u08b5\5\u0186\u00c4\2\u08b5",
    "\u08bb\3\2\2\2\u08b6\u08b7\f\3\2\2\u08b7\u08b8\7\25\2\2\u08b8\u08ba",
    "\5\u0186\u00c4\2\u08b9\u08b6\3\2\2\2\u08ba\u08bd\3\2\2\2\u08bb\u08b9",
    "\3\2\2\2\u08bb\u08bc\3\2\2\2\u08bc\u0181\3\2\2\2\u08bd\u08bb\3\2\2\2",
    "\u08be\u08bf\b\u00c2\1\2\u08bf\u08c0\5\u0180\u00c1\2\u08c0\u08c5\3\2",
    "\2\2\u08c1\u08c2\f\3\2\2\u08c2\u08c4\7\u00a6\2\2\u08c3\u08c1\3\2\2\2",
    "\u08c4\u08c7\3\2\2\2\u08c5\u08c3\3\2\2\2\u08c5\u08c6\3\2\2\2\u08c6\u0183",
    "\3\2\2\2\u08c7\u08c5\3\2\2\2\u08c8\u08ce\7\u00a9\2\2\u08c9\u08ce\7\u00ab",
    "\2\2\u08ca\u08ce\7\u00a7\2\2\u08cb\u08ce\7\u009e\2\2\u08cc\u08ce\7\u009f",
    "\2\2\u08cd\u08c8\3\2\2\2\u08cd\u08c9\3\2\2\2\u08cd\u08ca\3\2\2\2\u08cd",
    "\u08cb\3\2\2\2\u08cd\u08cc\3\2\2\2\u08ce\u0185\3\2\2\2\u08cf\u08d0\t",
    "\t\2\2\u08d0\u0187\3\2\2\2\u08d1\u08d2\7\u0089\2\2\u08d2\u08d3\5\u018a",
    "\u00c6\2\u08d3\u08d4\7\22\2\2\u08d4\u08d9\3\2\2\2\u08d5\u08d6\5\u018a",
    "\u00c6\2\u08d6\u08d7\7\22\2\2\u08d7\u08d9\3\2\2\2\u08d8\u08d1\3\2\2",
    "\2\u08d8\u08d5\3\2\2\2\u08d9\u0189\3\2\2\2\u08da\u08db\b\u00c6\1\2\u08db",
    "\u08dc\5\u018c\u00c7\2\u08dc\u08e1\3\2\2\2\u08dd\u08de\f\3\2\2\u08de",
    "\u08e0\5\u0192\u00ca\2\u08df\u08dd\3\2\2\2\u08e0\u08e3\3\2\2\2\u08e1",
    "\u08df\3\2\2\2\u08e1\u08e2\3\2\2\2\u08e2\u018b\3\2\2\2\u08e3\u08e1\3",
    "\2\2\2\u08e4\u08ea\5\u018e\u00c8\2\u08e5\u08ea\5\u0190\u00c9\2\u08e6",
    "\u08ea\5\u019a\u00ce\2\u08e7\u08ea\5\u019c\u00cf\2\u08e8\u08ea\5\u019e",
    "\u00d0\2\u08e9\u08e4\3\2\2\2\u08e9\u08e5\3\2\2\2\u08e9\u08e6\3\2\2\2",
    "\u08e9\u08e7\3\2\2\2\u08e9\u08e8\3\2\2\2\u08ea\u018d\3\2\2\2\u08eb\u08ec",
    "\5\u0102\u0082\2\u08ec\u018f\3\2\2\2\u08ed\u08ee\5\u0126\u0094\2\u08ee",
    "\u08ef\5\u0194\u00cb\2\u08ef\u0191\3\2\2\2\u08f0\u08f1\7\25\2\2\u08f1",
    "\u08f4\5\u0194\u00cb\2\u08f2\u08f4\5\u0198\u00cd\2\u08f3\u08f0\3\2\2",
    "\2\u08f3\u08f2\3\2\2\2\u08f4\u0193\3\2\2\2\u08f5\u08f6\5\u01a0\u00d1",
    "\2\u08f6\u08f8\7\26\2\2\u08f7\u08f9\5\u0196\u00cc\2\u08f8\u08f7\3\2",
    "\2\2\u08f8\u08f9\3\2\2\2\u08f9\u08fa\3\2\2\2\u08fa\u08fb\7\27\2\2\u08fb",
    "\u0195\3\2\2\2\u08fc\u08fd\b\u00cc\1\2\u08fd\u08fe\5\u018a\u00c6\2\u08fe",
    "\u0904\3\2\2\2\u08ff\u0900\f\3\2\2\u0900\u0901\7\23\2\2\u0901\u0903",
    "\5\u018a\u00c6\2\u0902\u08ff\3\2\2\2\u0903\u0906\3\2\2\2\u0904\u0902",
    "\3\2\2\2\u0904\u0905\3\2\2\2\u0905\u0197\3\2\2\2\u0906\u0904\3\2\2\2",
    "\u0907\u0908\7\30\2\2\u0908\u0909\5\u018a\u00c6\2\u0909\u090a\7\31\2",
    "\2\u090a\u0199\3\2\2\2\u090b\u090c\7\26\2\2\u090c\u090d\5\u018a\u00c6",
    "\2\u090d\u090e\7\27\2\2\u090e\u019b\3\2\2\2\u090f\u0910\b\u00cf\1\2",
    "\u0910\u0913\7\u00a6\2\2\u0911\u0913\5\u01a0\u00d1\2\u0912\u090f\3\2",
    "\2\2\u0912\u0911\3\2\2\2\u0913\u0919\3\2\2\2\u0914\u0915\f\3\2\2\u0915",
    "\u0916\7\25\2\2\u0916\u0918\5\u01a0\u00d1\2\u0917\u0914\3\2\2\2\u0918",
    "\u091b\3\2\2\2\u0919\u0917\3\2\2\2\u0919\u091a\3\2\2\2\u091a\u019d\3",
    "\2\2\2\u091b\u0919\3\2\2\2\u091c\u0922\7\u00a9\2\2\u091d\u0922\7\u00ab",
    "\2\2\u091e\u0922\7\u00a7\2\2\u091f\u0922\7\u009e\2\2\u0920\u0922\7\u009f",
    "\2\2\u0921\u091c\3\2\2\2\u0921\u091d\3\2\2\2\u0921\u091e\3\2\2\2\u0921",
    "\u091f\3\2\2\2\u0921\u0920\3\2\2\2\u0922\u019f\3\2\2\2\u0923\u0924\t",
    "\n\2\2\u0924\u01a1\3\2\2\2\u00c7\u01a8\u01af\u01cd\u01d3\u01d8\u01de",
    "\u01e0\u01e3\u01e9\u01ed\u01f8\u0201\u0210\u0219\u0220\u022a\u0240\u0257",
    "\u0264\u026f\u027d\u028b\u0299\u02ad\u02b8\u02ba\u02c3\u02c7\u02cf\u02d3",
    "\u02df\u02e4\u02e8\u0303\u030a\u030f\u0313\u0328\u0336\u033a\u033d\u035e",
    "\u0371\u0378\u039a\u03a3\u03ba\u03ca\u03cf\u03d7\u03e0\u03f7\u03fd\u041b",
    "\u0484\u0486\u0490\u04a5\u04b5\u04ba\u04c4\u04c9\u04cb\u04d1\u04d3\u04d5",
    "\u04e9\u04f0\u04f4\u04ff\u0503\u0508\u050a\u050e\u0516\u051d\u051f\u0524",
    "\u0526\u0531\u0544\u054d\u0553\u0558\u055f\u0567\u0572\u057a\u0582\u0588",
    "\u0590\u0599\u05a1\u05ae\u05b1\u05b5\u05ba\u05be\u05c7\u05dc\u05e6\u05e8",
    "\u05ed\u05fd\u0602\u060b\u0612\u0617\u061c\u062b\u0630\u0633\u0637\u063c",
    "\u0643\u064e\u0650\u0659\u0661\u0669\u066f\u067b\u067f\u0689\u068e\u0694",
    "\u069b\u06a0\u06a7\u06af\u06b6\u06c0\u06cd\u06d1\u06d4\u06d8\u06db\u06e3",
    "\u06ec\u06f5\u06fe\u070f\u071f\u0726\u072d\u0737\u073e\u0741\u0745\u074a",
    "\u074e\u0759\u075c\u0763\u0773\u0780\u0787\u0798\u07a0\u07a4\u07ac\u07ce",
    "\u07d7\u07e1\u07ed\u07f2\u07fe\u0810\u0817\u0820\u0827\u082f\u0834\u083e",
    "\u0848\u0858\u0862\u0869\u0871\u087c\u0885\u088d\u0897\u089c\u08a8\u08bb",
    "\u08c5\u08cd\u08d8\u08e1\u08e9\u08f3\u08f8\u0904\u0912\u0919\u0921"].join("");
		

var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ 'null', 'null', 'null', 'null', 'null', 'null', "'\t'", 
                     "' '", 'null', "'Java:'", "'C#:'", "'Python2:'", "'Python3:'", 
                     "'JavaScript:'", "'Swift:'", "':'", "';'", 'null', 
                     "'..'", 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', "'!'", "'&'", "'&&'", "'|'", "'||'", 
                     'null', "'-'", "'*'", "'/'", "'\\'", "'%'", "'>'", 
                     "'>='", "'<'", "'<='", "'<>'", "'='", "'!='", "'=='", 
                     "'~='", "'~'", "'<-'", "'->'", "'Boolean'", "'Character'", 
                     "'Text'", "'Integer'", "'Decimal'", "'Date'", "'Time'", 
                     "'DateTime'", "'Period'", "'Method'", "'Code'", "'Document'", 
                     "'Blob'", "'Image'", "'UUID'", "'Iterator'", "'Cursor'", 
                     "'abstract'", "'all'", "'always'", "'and'", "'any'", 
                     "'as'", 'null', "'attr'", "'attribute'", "'attributes'", 
                     "'bindings'", "'break'", "'by'", "'case'", "'catch'", 
                     "'category'", "'class'", "'close'", "'contains'", "'def'", 
                     "'default'", "'define'", "'delete'", 'null', "'do'", 
                     "'doing'", "'each'", "'else'", "'enum'", "'enumerated'", 
                     "'except'", "'execute'", "'expecting'", "'extends'", 
                     "'fetch'", "'filtered'", "'finally'", "'flush'", "'for'", 
                     "'from'", "'getter'", "'if'", "'in'", "'index'", "'invoke'", 
                     "'is'", "'matching'", "'method'", "'methods'", "'modulo'", 
                     "'mutable'", "'native'", "'None'", "'not'", 'null', 
                     "'null'", "'on'", "'one'", "'open'", "'operator'", 
                     "'or'", "'order'", "'otherwise'", "'pass'", "'raise'", 
                     "'read'", "'receiving'", "'resource'", "'return'", 
                     "'returning'", "'rows'", "'self'", "'setter'", "'singleton'", 
                     "'sorted'", "'storable'", "'store'", "'switch'", "'test'", 
                     "'this'", "'throw'", "'to'", "'try'", "'verifying'", 
                     "'with'", "'when'", "'where'", "'while'", "'write'", 
                     'null', 'null', "'MIN_INTEGER'", "'MAX_INTEGER'" ];

var symbolicNames = [ 'null', "INDENT", "DEDENT", "LF_TAB", "LF_MORE", "LF", 
                      "TAB", "WS", "COMMENT", "JAVA", "CSHARP", "PYTHON2", 
                      "PYTHON3", "JAVASCRIPT", "SWIFT", "COLON", "SEMI", 
                      "COMMA", "RANGE", "DOT", "LPAR", "RPAR", "LBRAK", 
                      "RBRAK", "LCURL", "RCURL", "QMARK", "XMARK", "AMP", 
                      "AMP2", "PIPE", "PIPE2", "PLUS", "MINUS", "STAR", 
                      "SLASH", "BSLASH", "PERCENT", "GT", "GTE", "LT", "LTE", 
                      "LTGT", "EQ", "XEQ", "EQ2", "TEQ", "TILDE", "LARROW", 
                      "RARROW", "BOOLEAN", "CHARACTER", "TEXT", "INTEGER", 
                      "DECIMAL", "DATE", "TIME", "DATETIME", "PERIOD", "METHOD_T", 
                      "CODE", "DOCUMENT", "BLOB", "IMAGE", "UUID", "ITERATOR", 
                      "CURSOR", "ABSTRACT", "ALL", "ALWAYS", "AND", "ANY", 
                      "AS", "ASC", "ATTR", "ATTRIBUTE", "ATTRIBUTES", "BINDINGS", 
                      "BREAK", "BY", "CASE", "CATCH", "CATEGORY", "CLASS", 
                      "CLOSE", "CONTAINS", "DEF", "DEFAULT", "DEFINE", "DELETE", 
                      "DESC", "DO", "DOING", "EACH", "ELSE", "ENUM", "ENUMERATED", 
                      "EXCEPT", "EXECUTE", "EXPECTING", "EXTENDS", "FETCH", 
                      "FILTERED", "FINALLY", "FLUSH", "FOR", "FROM", "GETTER", 
                      "IF", "IN", "INDEX", "INVOKE", "IS", "MATCHING", "METHOD", 
                      "METHODS", "MODULO", "MUTABLE", "NATIVE", "NONE", 
                      "NOT", "NOTHING", "NULL", "ON", "ONE", "OPEN", "OPERATOR", 
                      "OR", "ORDER", "OTHERWISE", "PASS", "RAISE", "READ", 
                      "RECEIVING", "RESOURCE", "RETURN", "RETURNING", "ROWS", 
                      "SELF", "SETTER", "SINGLETON", "SORTED", "STORABLE", 
                      "STORE", "SWITCH", "TEST", "THIS", "THROW", "TO", 
                      "TRY", "VERIFYING", "WITH", "WHEN", "WHERE", "WHILE", 
                      "WRITE", "BOOLEAN_LITERAL", "CHAR_LITERAL", "MIN_INTEGER", 
                      "MAX_INTEGER", "SYMBOL_IDENTIFIER", "TYPE_IDENTIFIER", 
                      "VARIABLE_IDENTIFIER", "NATIVE_IDENTIFIER", "DOLLAR_IDENTIFIER", 
                      "TEXT_LITERAL", "UUID_LITERAL", "INTEGER_LITERAL", 
                      "HEXA_LITERAL", "DECIMAL_LITERAL", "DATETIME_LITERAL", 
                      "TIME_LITERAL", "DATE_LITERAL", "PERIOD_LITERAL" ];

var ruleNames =  [ "enum_category_declaration", "enum_native_declaration", 
                   "native_symbol", "category_symbol", "attribute_declaration", 
                   "concrete_category_declaration", "singleton_category_declaration", 
                   "derived_list", "operator_method_declaration", "setter_method_declaration", 
                   "native_setter_declaration", "getter_method_declaration", 
                   "native_getter_declaration", "native_category_declaration", 
                   "native_resource_declaration", "native_category_bindings", 
                   "native_category_binding_list", "attribute_list", "abstract_method_declaration", 
                   "concrete_method_declaration", "native_method_declaration", 
                   "test_method_declaration", "assertion", "full_argument_list", 
                   "typed_argument", "statement", "flush_statement", "store_statement", 
                   "method_call_statement", "with_resource_statement", "with_singleton_statement", 
                   "switch_statement", "switch_case_statement", "for_each_statement", 
                   "do_while_statement", "while_statement", "if_statement", 
                   "else_if_statement_list", "raise_statement", "try_statement", 
                   "catch_statement", "break_statement", "return_statement", 
                   "expression", "unresolved_expression", "unresolved_selector", 
                   "invocation_expression", "invocation_trailer", "instance_expression", 
                   "instance_selector", "document_expression", "blob_expression", 
                   "constructor_expression", "write_statement", "ambiguous_expression", 
                   "filtered_list_suffix", "fetch_store_expression", "sorted_expression", 
                   "argument_assignment_list", "with_argument_assignment_list", 
                   "argument_assignment", "assign_instance_statement", "child_instance", 
                   "assign_tuple_statement", "lfs", "lfp", "indent", "dedent", 
                   "null_literal", "declaration_list", "declarations", "declaration", 
                   "resource_declaration", "enum_declaration", "native_symbol_list", 
                   "category_symbol_list", "symbol_list", "attribute_constraint", 
                   "list_literal", "set_literal", "expression_list", "range_literal", 
                   "typedef", "primary_type", "native_type", "category_type", 
                   "mutable_category_type", "code_type", "category_declaration", 
                   "type_identifier_list", "method_identifier", "identifier", 
                   "variable_identifier", "attribute_identifier", "type_identifier", 
                   "symbol_identifier", "argument_list", "argument", "operator_argument", 
                   "named_argument", "code_argument", "category_or_any_type", 
                   "any_type", "member_method_declaration_list", "member_method_declaration", 
                   "native_member_method_declaration_list", "native_member_method_declaration", 
                   "native_category_binding", "python_category_binding", 
                   "python_module", "javascript_category_binding", "javascript_module", 
                   "variable_identifier_list", "attribute_identifier_list", 
                   "method_declaration", "comment_statement", "native_statement_list", 
                   "native_statement", "python_native_statement", "javascript_native_statement", 
                   "statement_list", "assertion_list", "switch_case_statement_list", 
                   "catch_statement_list", "literal_collection", "atomic_literal", 
                   "literal_list_literal", "selectable_expression", "this_expression", 
                   "parenthesis_expression", "literal_expression", "collection_literal", 
                   "tuple_literal", "dict_literal", "expression_tuple", 
                   "dict_entry_list", "dict_entry", "slice_arguments", "assign_variable_statement", 
                   "assignable_instance", "is_expression", "read_all_expression", 
                   "read_one_expression", "order_by_list", "order_by", "operator", 
                   "new_token", "key_token", "module_token", "value_token", 
                   "symbols_token", "assign", "multiply", "divide", "idivide", 
                   "modulo", "javascript_statement", "javascript_expression", 
                   "javascript_primary_expression", "javascript_this_expression", 
                   "javascript_new_expression", "javascript_selector_expression", 
                   "javascript_method_expression", "javascript_arguments", 
                   "javascript_item_expression", "javascript_parenthesis_expression", 
                   "javascript_identifier_expression", "javascript_literal_expression", 
                   "javascript_identifier", "python_statement", "python_expression", 
                   "python_primary_expression", "python_selector_expression", 
                   "python_method_expression", "python_argument_list", "python_ordinal_argument_list", 
                   "python_named_argument_list", "python_parenthesis_expression", 
                   "python_identifier_expression", "python_literal_expression", 
                   "python_identifier", "java_statement", "java_expression", 
                   "java_primary_expression", "java_this_expression", "java_new_expression", 
                   "java_selector_expression", "java_method_expression", 
                   "java_arguments", "java_item_expression", "java_parenthesis_expression", 
                   "java_identifier_expression", "java_class_identifier_expression", 
                   "java_literal_expression", "java_identifier", "csharp_statement", 
                   "csharp_expression", "csharp_primary_expression", "csharp_this_expression", 
                   "csharp_new_expression", "csharp_selector_expression", 
                   "csharp_method_expression", "csharp_arguments", "csharp_item_expression", 
                   "csharp_parenthesis_expression", "csharp_identifier_expression", 
                   "csharp_literal_expression", "csharp_identifier" ];

function EParser (input) {
	AbstractParser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

EParser.prototype = Object.create(AbstractParser.prototype);
EParser.prototype.constructor = EParser;

Object.defineProperty(EParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

EParser.EOF = antlr4.Token.EOF;
EParser.INDENT = 1;
EParser.DEDENT = 2;
EParser.LF_TAB = 3;
EParser.LF_MORE = 4;
EParser.LF = 5;
EParser.TAB = 6;
EParser.WS = 7;
EParser.COMMENT = 8;
EParser.JAVA = 9;
EParser.CSHARP = 10;
EParser.PYTHON2 = 11;
EParser.PYTHON3 = 12;
EParser.JAVASCRIPT = 13;
EParser.SWIFT = 14;
EParser.COLON = 15;
EParser.SEMI = 16;
EParser.COMMA = 17;
EParser.RANGE = 18;
EParser.DOT = 19;
EParser.LPAR = 20;
EParser.RPAR = 21;
EParser.LBRAK = 22;
EParser.RBRAK = 23;
EParser.LCURL = 24;
EParser.RCURL = 25;
EParser.QMARK = 26;
EParser.XMARK = 27;
EParser.AMP = 28;
EParser.AMP2 = 29;
EParser.PIPE = 30;
EParser.PIPE2 = 31;
EParser.PLUS = 32;
EParser.MINUS = 33;
EParser.STAR = 34;
EParser.SLASH = 35;
EParser.BSLASH = 36;
EParser.PERCENT = 37;
EParser.GT = 38;
EParser.GTE = 39;
EParser.LT = 40;
EParser.LTE = 41;
EParser.LTGT = 42;
EParser.EQ = 43;
EParser.XEQ = 44;
EParser.EQ2 = 45;
EParser.TEQ = 46;
EParser.TILDE = 47;
EParser.LARROW = 48;
EParser.RARROW = 49;
EParser.BOOLEAN = 50;
EParser.CHARACTER = 51;
EParser.TEXT = 52;
EParser.INTEGER = 53;
EParser.DECIMAL = 54;
EParser.DATE = 55;
EParser.TIME = 56;
EParser.DATETIME = 57;
EParser.PERIOD = 58;
EParser.METHOD_T = 59;
EParser.CODE = 60;
EParser.DOCUMENT = 61;
EParser.BLOB = 62;
EParser.IMAGE = 63;
EParser.UUID = 64;
EParser.ITERATOR = 65;
EParser.CURSOR = 66;
EParser.ABSTRACT = 67;
EParser.ALL = 68;
EParser.ALWAYS = 69;
EParser.AND = 70;
EParser.ANY = 71;
EParser.AS = 72;
EParser.ASC = 73;
EParser.ATTR = 74;
EParser.ATTRIBUTE = 75;
EParser.ATTRIBUTES = 76;
EParser.BINDINGS = 77;
EParser.BREAK = 78;
EParser.BY = 79;
EParser.CASE = 80;
EParser.CATCH = 81;
EParser.CATEGORY = 82;
EParser.CLASS = 83;
EParser.CLOSE = 84;
EParser.CONTAINS = 85;
EParser.DEF = 86;
EParser.DEFAULT = 87;
EParser.DEFINE = 88;
EParser.DELETE = 89;
EParser.DESC = 90;
EParser.DO = 91;
EParser.DOING = 92;
EParser.EACH = 93;
EParser.ELSE = 94;
EParser.ENUM = 95;
EParser.ENUMERATED = 96;
EParser.EXCEPT = 97;
EParser.EXECUTE = 98;
EParser.EXPECTING = 99;
EParser.EXTENDS = 100;
EParser.FETCH = 101;
EParser.FILTERED = 102;
EParser.FINALLY = 103;
EParser.FLUSH = 104;
EParser.FOR = 105;
EParser.FROM = 106;
EParser.GETTER = 107;
EParser.IF = 108;
EParser.IN = 109;
EParser.INDEX = 110;
EParser.INVOKE = 111;
EParser.IS = 112;
EParser.MATCHING = 113;
EParser.METHOD = 114;
EParser.METHODS = 115;
EParser.MODULO = 116;
EParser.MUTABLE = 117;
EParser.NATIVE = 118;
EParser.NONE = 119;
EParser.NOT = 120;
EParser.NOTHING = 121;
EParser.NULL = 122;
EParser.ON = 123;
EParser.ONE = 124;
EParser.OPEN = 125;
EParser.OPERATOR = 126;
EParser.OR = 127;
EParser.ORDER = 128;
EParser.OTHERWISE = 129;
EParser.PASS = 130;
EParser.RAISE = 131;
EParser.READ = 132;
EParser.RECEIVING = 133;
EParser.RESOURCE = 134;
EParser.RETURN = 135;
EParser.RETURNING = 136;
EParser.ROWS = 137;
EParser.SELF = 138;
EParser.SETTER = 139;
EParser.SINGLETON = 140;
EParser.SORTED = 141;
EParser.STORABLE = 142;
EParser.STORE = 143;
EParser.SWITCH = 144;
EParser.TEST = 145;
EParser.THIS = 146;
EParser.THROW = 147;
EParser.TO = 148;
EParser.TRY = 149;
EParser.VERIFYING = 150;
EParser.WITH = 151;
EParser.WHEN = 152;
EParser.WHERE = 153;
EParser.WHILE = 154;
EParser.WRITE = 155;
EParser.BOOLEAN_LITERAL = 156;
EParser.CHAR_LITERAL = 157;
EParser.MIN_INTEGER = 158;
EParser.MAX_INTEGER = 159;
EParser.SYMBOL_IDENTIFIER = 160;
EParser.TYPE_IDENTIFIER = 161;
EParser.VARIABLE_IDENTIFIER = 162;
EParser.NATIVE_IDENTIFIER = 163;
EParser.DOLLAR_IDENTIFIER = 164;
EParser.TEXT_LITERAL = 165;
EParser.UUID_LITERAL = 166;
EParser.INTEGER_LITERAL = 167;
EParser.HEXA_LITERAL = 168;
EParser.DECIMAL_LITERAL = 169;
EParser.DATETIME_LITERAL = 170;
EParser.TIME_LITERAL = 171;
EParser.DATE_LITERAL = 172;
EParser.PERIOD_LITERAL = 173;

EParser.RULE_enum_category_declaration = 0;
EParser.RULE_enum_native_declaration = 1;
EParser.RULE_native_symbol = 2;
EParser.RULE_category_symbol = 3;
EParser.RULE_attribute_declaration = 4;
EParser.RULE_concrete_category_declaration = 5;
EParser.RULE_singleton_category_declaration = 6;
EParser.RULE_derived_list = 7;
EParser.RULE_operator_method_declaration = 8;
EParser.RULE_setter_method_declaration = 9;
EParser.RULE_native_setter_declaration = 10;
EParser.RULE_getter_method_declaration = 11;
EParser.RULE_native_getter_declaration = 12;
EParser.RULE_native_category_declaration = 13;
EParser.RULE_native_resource_declaration = 14;
EParser.RULE_native_category_bindings = 15;
EParser.RULE_native_category_binding_list = 16;
EParser.RULE_attribute_list = 17;
EParser.RULE_abstract_method_declaration = 18;
EParser.RULE_concrete_method_declaration = 19;
EParser.RULE_native_method_declaration = 20;
EParser.RULE_test_method_declaration = 21;
EParser.RULE_assertion = 22;
EParser.RULE_full_argument_list = 23;
EParser.RULE_typed_argument = 24;
EParser.RULE_statement = 25;
EParser.RULE_flush_statement = 26;
EParser.RULE_store_statement = 27;
EParser.RULE_method_call_statement = 28;
EParser.RULE_with_resource_statement = 29;
EParser.RULE_with_singleton_statement = 30;
EParser.RULE_switch_statement = 31;
EParser.RULE_switch_case_statement = 32;
EParser.RULE_for_each_statement = 33;
EParser.RULE_do_while_statement = 34;
EParser.RULE_while_statement = 35;
EParser.RULE_if_statement = 36;
EParser.RULE_else_if_statement_list = 37;
EParser.RULE_raise_statement = 38;
EParser.RULE_try_statement = 39;
EParser.RULE_catch_statement = 40;
EParser.RULE_break_statement = 41;
EParser.RULE_return_statement = 42;
EParser.RULE_expression = 43;
EParser.RULE_unresolved_expression = 44;
EParser.RULE_unresolved_selector = 45;
EParser.RULE_invocation_expression = 46;
EParser.RULE_invocation_trailer = 47;
EParser.RULE_instance_expression = 48;
EParser.RULE_instance_selector = 49;
EParser.RULE_document_expression = 50;
EParser.RULE_blob_expression = 51;
EParser.RULE_constructor_expression = 52;
EParser.RULE_write_statement = 53;
EParser.RULE_ambiguous_expression = 54;
EParser.RULE_filtered_list_suffix = 55;
EParser.RULE_fetch_store_expression = 56;
EParser.RULE_sorted_expression = 57;
EParser.RULE_argument_assignment_list = 58;
EParser.RULE_with_argument_assignment_list = 59;
EParser.RULE_argument_assignment = 60;
EParser.RULE_assign_instance_statement = 61;
EParser.RULE_child_instance = 62;
EParser.RULE_assign_tuple_statement = 63;
EParser.RULE_lfs = 64;
EParser.RULE_lfp = 65;
EParser.RULE_indent = 66;
EParser.RULE_dedent = 67;
EParser.RULE_null_literal = 68;
EParser.RULE_declaration_list = 69;
EParser.RULE_declarations = 70;
EParser.RULE_declaration = 71;
EParser.RULE_resource_declaration = 72;
EParser.RULE_enum_declaration = 73;
EParser.RULE_native_symbol_list = 74;
EParser.RULE_category_symbol_list = 75;
EParser.RULE_symbol_list = 76;
EParser.RULE_attribute_constraint = 77;
EParser.RULE_list_literal = 78;
EParser.RULE_set_literal = 79;
EParser.RULE_expression_list = 80;
EParser.RULE_range_literal = 81;
EParser.RULE_typedef = 82;
EParser.RULE_primary_type = 83;
EParser.RULE_native_type = 84;
EParser.RULE_category_type = 85;
EParser.RULE_mutable_category_type = 86;
EParser.RULE_code_type = 87;
EParser.RULE_category_declaration = 88;
EParser.RULE_type_identifier_list = 89;
EParser.RULE_method_identifier = 90;
EParser.RULE_identifier = 91;
EParser.RULE_variable_identifier = 92;
EParser.RULE_attribute_identifier = 93;
EParser.RULE_type_identifier = 94;
EParser.RULE_symbol_identifier = 95;
EParser.RULE_argument_list = 96;
EParser.RULE_argument = 97;
EParser.RULE_operator_argument = 98;
EParser.RULE_named_argument = 99;
EParser.RULE_code_argument = 100;
EParser.RULE_category_or_any_type = 101;
EParser.RULE_any_type = 102;
EParser.RULE_member_method_declaration_list = 103;
EParser.RULE_member_method_declaration = 104;
EParser.RULE_native_member_method_declaration_list = 105;
EParser.RULE_native_member_method_declaration = 106;
EParser.RULE_native_category_binding = 107;
EParser.RULE_python_category_binding = 108;
EParser.RULE_python_module = 109;
EParser.RULE_javascript_category_binding = 110;
EParser.RULE_javascript_module = 111;
EParser.RULE_variable_identifier_list = 112;
EParser.RULE_attribute_identifier_list = 113;
EParser.RULE_method_declaration = 114;
EParser.RULE_comment_statement = 115;
EParser.RULE_native_statement_list = 116;
EParser.RULE_native_statement = 117;
EParser.RULE_python_native_statement = 118;
EParser.RULE_javascript_native_statement = 119;
EParser.RULE_statement_list = 120;
EParser.RULE_assertion_list = 121;
EParser.RULE_switch_case_statement_list = 122;
EParser.RULE_catch_statement_list = 123;
EParser.RULE_literal_collection = 124;
EParser.RULE_atomic_literal = 125;
EParser.RULE_literal_list_literal = 126;
EParser.RULE_selectable_expression = 127;
EParser.RULE_this_expression = 128;
EParser.RULE_parenthesis_expression = 129;
EParser.RULE_literal_expression = 130;
EParser.RULE_collection_literal = 131;
EParser.RULE_tuple_literal = 132;
EParser.RULE_dict_literal = 133;
EParser.RULE_expression_tuple = 134;
EParser.RULE_dict_entry_list = 135;
EParser.RULE_dict_entry = 136;
EParser.RULE_slice_arguments = 137;
EParser.RULE_assign_variable_statement = 138;
EParser.RULE_assignable_instance = 139;
EParser.RULE_is_expression = 140;
EParser.RULE_read_all_expression = 141;
EParser.RULE_read_one_expression = 142;
EParser.RULE_order_by_list = 143;
EParser.RULE_order_by = 144;
EParser.RULE_operator = 145;
EParser.RULE_new_token = 146;
EParser.RULE_key_token = 147;
EParser.RULE_module_token = 148;
EParser.RULE_value_token = 149;
EParser.RULE_symbols_token = 150;
EParser.RULE_assign = 151;
EParser.RULE_multiply = 152;
EParser.RULE_divide = 153;
EParser.RULE_idivide = 154;
EParser.RULE_modulo = 155;
EParser.RULE_javascript_statement = 156;
EParser.RULE_javascript_expression = 157;
EParser.RULE_javascript_primary_expression = 158;
EParser.RULE_javascript_this_expression = 159;
EParser.RULE_javascript_new_expression = 160;
EParser.RULE_javascript_selector_expression = 161;
EParser.RULE_javascript_method_expression = 162;
EParser.RULE_javascript_arguments = 163;
EParser.RULE_javascript_item_expression = 164;
EParser.RULE_javascript_parenthesis_expression = 165;
EParser.RULE_javascript_identifier_expression = 166;
EParser.RULE_javascript_literal_expression = 167;
EParser.RULE_javascript_identifier = 168;
EParser.RULE_python_statement = 169;
EParser.RULE_python_expression = 170;
EParser.RULE_python_primary_expression = 171;
EParser.RULE_python_selector_expression = 172;
EParser.RULE_python_method_expression = 173;
EParser.RULE_python_argument_list = 174;
EParser.RULE_python_ordinal_argument_list = 175;
EParser.RULE_python_named_argument_list = 176;
EParser.RULE_python_parenthesis_expression = 177;
EParser.RULE_python_identifier_expression = 178;
EParser.RULE_python_literal_expression = 179;
EParser.RULE_python_identifier = 180;
EParser.RULE_java_statement = 181;
EParser.RULE_java_expression = 182;
EParser.RULE_java_primary_expression = 183;
EParser.RULE_java_this_expression = 184;
EParser.RULE_java_new_expression = 185;
EParser.RULE_java_selector_expression = 186;
EParser.RULE_java_method_expression = 187;
EParser.RULE_java_arguments = 188;
EParser.RULE_java_item_expression = 189;
EParser.RULE_java_parenthesis_expression = 190;
EParser.RULE_java_identifier_expression = 191;
EParser.RULE_java_class_identifier_expression = 192;
EParser.RULE_java_literal_expression = 193;
EParser.RULE_java_identifier = 194;
EParser.RULE_csharp_statement = 195;
EParser.RULE_csharp_expression = 196;
EParser.RULE_csharp_primary_expression = 197;
EParser.RULE_csharp_this_expression = 198;
EParser.RULE_csharp_new_expression = 199;
EParser.RULE_csharp_selector_expression = 200;
EParser.RULE_csharp_method_expression = 201;
EParser.RULE_csharp_arguments = 202;
EParser.RULE_csharp_item_expression = 203;
EParser.RULE_csharp_parenthesis_expression = 204;
EParser.RULE_csharp_identifier_expression = 205;
EParser.RULE_csharp_literal_expression = 206;
EParser.RULE_csharp_identifier = 207;

function Enum_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_enum_category_declaration;
    this.name = null; // Type_identifierContext
    this.derived = null; // Type_identifierContext
    this.attrs = null; // Attribute_listContext
    this.symbols = null; // Category_symbol_listContext
    return this;
}

Enum_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_category_declarationContext.prototype.constructor = Enum_category_declarationContext;

Enum_category_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Enum_category_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Enum_category_declarationContext.prototype.ENUMERATED = function() {
    return this.getToken(EParser.ENUMERATED, 0);
};

Enum_category_declarationContext.prototype.symbols_token = function() {
    return this.getTypedRuleContext(Symbols_tokenContext,0);
};

Enum_category_declarationContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Enum_category_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Enum_category_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Enum_category_declarationContext.prototype.type_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_identifierContext);
    } else {
        return this.getTypedRuleContext(Type_identifierContext,i);
    }
};

Enum_category_declarationContext.prototype.category_symbol_list = function() {
    return this.getTypedRuleContext(Category_symbol_listContext,0);
};

Enum_category_declarationContext.prototype.CATEGORY = function() {
    return this.getToken(EParser.CATEGORY, 0);
};

Enum_category_declarationContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

Enum_category_declarationContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

Enum_category_declarationContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

Enum_category_declarationContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Enum_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterEnum_category_declaration(this);
	}
};

Enum_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitEnum_category_declaration(this);
	}
};




EParser.prototype.enum_category_declaration = function() {

    var localctx = new Enum_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, EParser.RULE_enum_category_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 416;
        this.match(EParser.DEFINE);
        this.state = 417; 
        localctx.name = this.type_identifier();
        this.state = 418;
        this.match(EParser.AS);
        this.state = 419;
        this.match(EParser.ENUMERATED);
        this.state = 422;
        switch(this._input.LA(1)) {
        case EParser.CATEGORY:
            this.state = 420;
            this.match(EParser.CATEGORY);
            break;
        case EParser.TYPE_IDENTIFIER:
            this.state = 421; 
            localctx.derived = this.type_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 429;
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        switch(la_) {
        case 1:
            this.state = 424; 
            localctx.attrs = this.attribute_list();
            this.state = 425;
            this.match(EParser.COMMA);
            this.state = 426;
            this.match(EParser.AND);
            break;

        case 2:
            this.state = 428;
            this.match(EParser.WITH);
            break;

        }
        this.state = 431; 
        this.symbols_token();
        this.state = 432;
        this.match(EParser.COLON);
        this.state = 433; 
        this.indent();
        this.state = 434; 
        localctx.symbols = this.category_symbol_list();
        this.state = 435; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enum_native_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_enum_native_declaration;
    this.name = null; // Type_identifierContext
    this.typ = null; // Native_typeContext
    this.symbols = null; // Native_symbol_listContext
    return this;
}

Enum_native_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_native_declarationContext.prototype.constructor = Enum_native_declarationContext;

Enum_native_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Enum_native_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Enum_native_declarationContext.prototype.ENUMERATED = function() {
    return this.getToken(EParser.ENUMERATED, 0);
};

Enum_native_declarationContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

Enum_native_declarationContext.prototype.symbols_token = function() {
    return this.getTypedRuleContext(Symbols_tokenContext,0);
};

Enum_native_declarationContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Enum_native_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Enum_native_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Enum_native_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Enum_native_declarationContext.prototype.native_type = function() {
    return this.getTypedRuleContext(Native_typeContext,0);
};

Enum_native_declarationContext.prototype.native_symbol_list = function() {
    return this.getTypedRuleContext(Native_symbol_listContext,0);
};

Enum_native_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterEnum_native_declaration(this);
	}
};

Enum_native_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitEnum_native_declaration(this);
	}
};




EParser.prototype.enum_native_declaration = function() {

    var localctx = new Enum_native_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, EParser.RULE_enum_native_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 437;
        this.match(EParser.DEFINE);
        this.state = 438; 
        localctx.name = this.type_identifier();
        this.state = 439;
        this.match(EParser.AS);
        this.state = 440;
        this.match(EParser.ENUMERATED);
        this.state = 441; 
        localctx.typ = this.native_type();
        this.state = 442;
        this.match(EParser.WITH);
        this.state = 443; 
        this.symbols_token();
        this.state = 444;
        this.match(EParser.COLON);
        this.state = 445; 
        this.indent();
        this.state = 446; 
        localctx.symbols = this.native_symbol_list();
        this.state = 447; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_symbolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_symbol;
    this.name = null; // Symbol_identifierContext
    this.exp = null; // ExpressionContext
    return this;
}

Native_symbolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_symbolContext.prototype.constructor = Native_symbolContext;

Native_symbolContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

Native_symbolContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Native_symbolContext.prototype.value_token = function() {
    return this.getTypedRuleContext(Value_tokenContext,0);
};

Native_symbolContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};

Native_symbolContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Native_symbolContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNative_symbol(this);
	}
};

Native_symbolContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNative_symbol(this);
	}
};




EParser.prototype.native_symbol = function() {

    var localctx = new Native_symbolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, EParser.RULE_native_symbol);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 449; 
        localctx.name = this.symbol_identifier();
        this.state = 450;
        this.match(EParser.WITH);
        this.state = 451; 
        localctx.exp = this.expression(0);
        this.state = 452;
        this.match(EParser.AS);
        this.state = 453; 
        this.value_token();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_symbolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_category_symbol;
    this.name = null; // Symbol_identifierContext
    this.args = null; // With_argument_assignment_listContext
    this.arg = null; // Argument_assignmentContext
    return this;
}

Category_symbolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_symbolContext.prototype.constructor = Category_symbolContext;

Category_symbolContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};

Category_symbolContext.prototype.with_argument_assignment_list = function() {
    return this.getTypedRuleContext(With_argument_assignment_listContext,0);
};

Category_symbolContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

Category_symbolContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};

Category_symbolContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCategory_symbol(this);
	}
};

Category_symbolContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCategory_symbol(this);
	}
};




EParser.prototype.category_symbol = function() {

    var localctx = new Category_symbolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, EParser.RULE_category_symbol);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 455; 
        localctx.name = this.symbol_identifier();
        this.state = 456; 
        localctx.args = this.with_argument_assignment_list(0);
        this.state = 459;
        _la = this._input.LA(1);
        if(_la===EParser.AND) {
            this.state = 457;
            this.match(EParser.AND);
            this.state = 458; 
            localctx.arg = this.argument_assignment();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_attribute_declaration;
    this.name = null; // Attribute_identifierContext
    this.typ = null; // TypedefContext
    this.match = null; // Attribute_constraintContext
    this.indices = null; // Variable_identifier_listContext
    this.index = null; // Variable_identifierContext
    return this;
}

Attribute_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_declarationContext.prototype.constructor = Attribute_declarationContext;

Attribute_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Attribute_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Attribute_declarationContext.prototype.ATTRIBUTE = function() {
    return this.getToken(EParser.ATTRIBUTE, 0);
};

Attribute_declarationContext.prototype.attribute_identifier = function() {
    return this.getTypedRuleContext(Attribute_identifierContext,0);
};

Attribute_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Attribute_declarationContext.prototype.STORABLE = function() {
    return this.getToken(EParser.STORABLE, 0);
};

Attribute_declarationContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

Attribute_declarationContext.prototype.INDEX = function() {
    return this.getToken(EParser.INDEX, 0);
};

Attribute_declarationContext.prototype.attribute_constraint = function() {
    return this.getTypedRuleContext(Attribute_constraintContext,0);
};

Attribute_declarationContext.prototype.variable_identifier_list = function() {
    return this.getTypedRuleContext(Variable_identifier_listContext,0);
};

Attribute_declarationContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

Attribute_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Attribute_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAttribute_declaration(this);
	}
};

Attribute_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAttribute_declaration(this);
	}
};




EParser.prototype.attribute_declaration = function() {

    var localctx = new Attribute_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, EParser.RULE_attribute_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 461;
        this.match(EParser.DEFINE);
        this.state = 462; 
        localctx.name = this.attribute_identifier();
        this.state = 463;
        this.match(EParser.AS);
        this.state = 465;
        _la = this._input.LA(1);
        if(_la===EParser.STORABLE) {
            this.state = 464;
            this.match(EParser.STORABLE);
        }

        this.state = 467; 
        localctx.typ = this.typedef(0);
        this.state = 468;
        this.match(EParser.ATTRIBUTE);
        this.state = 470;
        _la = this._input.LA(1);
        if(_la===EParser.IN || _la===EParser.MATCHING) {
            this.state = 469; 
            localctx.match = this.attribute_constraint();
        }

        this.state = 481;
        _la = this._input.LA(1);
        if(_la===EParser.WITH) {
            this.state = 472;
            this.match(EParser.WITH);
            this.state = 478;
            _la = this._input.LA(1);
            if(_la===EParser.VARIABLE_IDENTIFIER) {
                this.state = 473; 
                localctx.indices = this.variable_identifier_list();
                this.state = 476;
                _la = this._input.LA(1);
                if(_la===EParser.AND) {
                    this.state = 474;
                    this.match(EParser.AND);
                    this.state = 475; 
                    localctx.index = this.variable_identifier();
                }

            }

            this.state = 480;
            this.match(EParser.INDEX);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Concrete_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_concrete_category_declaration;
    this.name = null; // Type_identifierContext
    this.derived = null; // Derived_listContext
    this.attrs = null; // Attribute_listContext
    this.methods = null; // Member_method_declaration_listContext
    return this;
}

Concrete_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concrete_category_declarationContext.prototype.constructor = Concrete_category_declarationContext;

Concrete_category_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Concrete_category_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Concrete_category_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Concrete_category_declarationContext.prototype.CATEGORY = function() {
    return this.getToken(EParser.CATEGORY, 0);
};

Concrete_category_declarationContext.prototype.STORABLE = function() {
    return this.getToken(EParser.STORABLE, 0);
};

Concrete_category_declarationContext.prototype.derived_list = function() {
    return this.getTypedRuleContext(Derived_listContext,0);
};

Concrete_category_declarationContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

Concrete_category_declarationContext.prototype.METHODS = function() {
    return this.getToken(EParser.METHODS, 0);
};

Concrete_category_declarationContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Concrete_category_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Concrete_category_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Concrete_category_declarationContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Concrete_category_declarationContext.prototype.member_method_declaration_list = function() {
    return this.getTypedRuleContext(Member_method_declaration_listContext,0);
};

Concrete_category_declarationContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

Concrete_category_declarationContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

Concrete_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterConcrete_category_declaration(this);
	}
};

Concrete_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitConcrete_category_declaration(this);
	}
};




EParser.prototype.concrete_category_declaration = function() {

    var localctx = new Concrete_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, EParser.RULE_concrete_category_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 483;
        this.match(EParser.DEFINE);
        this.state = 484; 
        localctx.name = this.type_identifier();
        this.state = 485;
        this.match(EParser.AS);
        this.state = 487;
        _la = this._input.LA(1);
        if(_la===EParser.STORABLE) {
            this.state = 486;
            this.match(EParser.STORABLE);
        }

        this.state = 491;
        switch(this._input.LA(1)) {
        case EParser.CATEGORY:
            this.state = 489;
            this.match(EParser.CATEGORY);
            break;
        case EParser.TYPE_IDENTIFIER:
            this.state = 490; 
            localctx.derived = this.derived_list();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 511;
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        if(la_===1) {
            this.state = 493; 
            localctx.attrs = this.attribute_list();
            this.state = 502;
            _la = this._input.LA(1);
            if(_la===EParser.COMMA) {
                this.state = 494;
                this.match(EParser.COMMA);
                this.state = 495;
                this.match(EParser.AND);
                this.state = 496;
                this.match(EParser.METHODS);
                this.state = 497;
                this.match(EParser.COLON);
                this.state = 498; 
                this.indent();
                this.state = 499; 
                localctx.methods = this.member_method_declaration_list();
                this.state = 500; 
                this.dedent();
            }


        } else if(la_===2) {
            this.state = 504;
            this.match(EParser.WITH);
            this.state = 505;
            this.match(EParser.METHODS);
            this.state = 506;
            this.match(EParser.COLON);
            this.state = 507; 
            this.indent();
            this.state = 508; 
            localctx.methods = this.member_method_declaration_list();
            this.state = 509; 
            this.dedent();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Singleton_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_singleton_category_declaration;
    this.name = null; // Type_identifierContext
    this.attrs = null; // Attribute_listContext
    this.methods = null; // Member_method_declaration_listContext
    return this;
}

Singleton_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Singleton_category_declarationContext.prototype.constructor = Singleton_category_declarationContext;

Singleton_category_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Singleton_category_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Singleton_category_declarationContext.prototype.SINGLETON = function() {
    return this.getToken(EParser.SINGLETON, 0);
};

Singleton_category_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Singleton_category_declarationContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

Singleton_category_declarationContext.prototype.METHODS = function() {
    return this.getToken(EParser.METHODS, 0);
};

Singleton_category_declarationContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Singleton_category_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Singleton_category_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Singleton_category_declarationContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Singleton_category_declarationContext.prototype.member_method_declaration_list = function() {
    return this.getTypedRuleContext(Member_method_declaration_listContext,0);
};

Singleton_category_declarationContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

Singleton_category_declarationContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

Singleton_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSingleton_category_declaration(this);
	}
};

Singleton_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSingleton_category_declaration(this);
	}
};




EParser.prototype.singleton_category_declaration = function() {

    var localctx = new Singleton_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, EParser.RULE_singleton_category_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 513;
        this.match(EParser.DEFINE);
        this.state = 514; 
        localctx.name = this.type_identifier();
        this.state = 515;
        this.match(EParser.AS);
        this.state = 516;
        this.match(EParser.SINGLETON);
        this.state = 535;
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        if(la_===1) {
            this.state = 517; 
            localctx.attrs = this.attribute_list();
            this.state = 526;
            _la = this._input.LA(1);
            if(_la===EParser.COMMA) {
                this.state = 518;
                this.match(EParser.COMMA);
                this.state = 519;
                this.match(EParser.AND);
                this.state = 520;
                this.match(EParser.METHODS);
                this.state = 521;
                this.match(EParser.COLON);
                this.state = 522; 
                this.indent();
                this.state = 523; 
                localctx.methods = this.member_method_declaration_list();
                this.state = 524; 
                this.dedent();
            }


        } else if(la_===2) {
            this.state = 528;
            this.match(EParser.WITH);
            this.state = 529;
            this.match(EParser.METHODS);
            this.state = 530;
            this.match(EParser.COLON);
            this.state = 531; 
            this.indent();
            this.state = 532; 
            localctx.methods = this.member_method_declaration_list();
            this.state = 533; 
            this.dedent();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Derived_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_derived_list;
    return this;
}

Derived_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Derived_listContext.prototype.constructor = Derived_listContext;


 
Derived_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DerivedListItemContext(parser, ctx) {
	Derived_listContext.call(this, parser);
    this.items = null; // Type_identifier_listContext;
    this.item = null; // Type_identifierContext;
    Derived_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DerivedListItemContext.prototype = Object.create(Derived_listContext.prototype);
DerivedListItemContext.prototype.constructor = DerivedListItemContext;

DerivedListItemContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

DerivedListItemContext.prototype.type_identifier_list = function() {
    return this.getTypedRuleContext(Type_identifier_listContext,0);
};

DerivedListItemContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};
DerivedListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDerivedListItem(this);
	}
};

DerivedListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDerivedListItem(this);
	}
};


function DerivedListContext(parser, ctx) {
	Derived_listContext.call(this, parser);
    this.items = null; // Type_identifier_listContext;
    Derived_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DerivedListContext.prototype = Object.create(Derived_listContext.prototype);
DerivedListContext.prototype.constructor = DerivedListContext;

DerivedListContext.prototype.type_identifier_list = function() {
    return this.getTypedRuleContext(Type_identifier_listContext,0);
};
DerivedListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDerivedList(this);
	}
};

DerivedListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDerivedList(this);
	}
};



EParser.prototype.derived_list = function() {

    var localctx = new Derived_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, EParser.RULE_derived_list);
    try {
        this.state = 542;
        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
        switch(la_) {
        case 1:
            localctx = new DerivedListContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 537; 
            localctx.items = this.type_identifier_list();
            break;

        case 2:
            localctx = new DerivedListItemContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 538; 
            localctx.items = this.type_identifier_list();
            this.state = 539;
            this.match(EParser.AND);
            this.state = 540; 
            localctx.item = this.type_identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Operator_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_operator_method_declaration;
    this.op = null; // OperatorContext
    this.arg = null; // Operator_argumentContext
    this.typ = null; // TypedefContext
    this.stmts = null; // Statement_listContext
    return this;
}

Operator_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operator_method_declarationContext.prototype.constructor = Operator_method_declarationContext;

Operator_method_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Operator_method_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Operator_method_declarationContext.prototype.OPERATOR = function() {
    return this.getToken(EParser.OPERATOR, 0);
};

Operator_method_declarationContext.prototype.RECEIVING = function() {
    return this.getToken(EParser.RECEIVING, 0);
};

Operator_method_declarationContext.prototype.DOING = function() {
    return this.getToken(EParser.DOING, 0);
};

Operator_method_declarationContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Operator_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Operator_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Operator_method_declarationContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Operator_method_declarationContext.prototype.operator_argument = function() {
    return this.getTypedRuleContext(Operator_argumentContext,0);
};

Operator_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Operator_method_declarationContext.prototype.RETURNING = function() {
    return this.getToken(EParser.RETURNING, 0);
};

Operator_method_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Operator_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOperator_method_declaration(this);
	}
};

Operator_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOperator_method_declaration(this);
	}
};




EParser.prototype.operator_method_declaration = function() {

    var localctx = new Operator_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, EParser.RULE_operator_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 544;
        this.match(EParser.DEFINE);
        this.state = 545; 
        localctx.op = this.operator();
        this.state = 546;
        this.match(EParser.AS);
        this.state = 547;
        this.match(EParser.OPERATOR);
        this.state = 548;
        this.match(EParser.RECEIVING);
        this.state = 549; 
        localctx.arg = this.operator_argument();
        this.state = 552;
        _la = this._input.LA(1);
        if(_la===EParser.RETURNING) {
            this.state = 550;
            this.match(EParser.RETURNING);
            this.state = 551; 
            localctx.typ = this.typedef(0);
        }

        this.state = 554;
        this.match(EParser.DOING);
        this.state = 555;
        this.match(EParser.COLON);
        this.state = 556; 
        this.indent();
        this.state = 557; 
        localctx.stmts = this.statement_list();
        this.state = 558; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Setter_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_setter_method_declaration;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Statement_listContext
    return this;
}

Setter_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Setter_method_declarationContext.prototype.constructor = Setter_method_declarationContext;

Setter_method_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Setter_method_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Setter_method_declarationContext.prototype.SETTER = function() {
    return this.getToken(EParser.SETTER, 0);
};

Setter_method_declarationContext.prototype.DOING = function() {
    return this.getToken(EParser.DOING, 0);
};

Setter_method_declarationContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Setter_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Setter_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Setter_method_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Setter_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Setter_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSetter_method_declaration(this);
	}
};

Setter_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSetter_method_declaration(this);
	}
};




EParser.prototype.setter_method_declaration = function() {

    var localctx = new Setter_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, EParser.RULE_setter_method_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 560;
        this.match(EParser.DEFINE);
        this.state = 561; 
        localctx.name = this.variable_identifier();
        this.state = 562;
        this.match(EParser.AS);
        this.state = 563;
        this.match(EParser.SETTER);
        this.state = 564;
        this.match(EParser.DOING);
        this.state = 565;
        this.match(EParser.COLON);
        this.state = 566; 
        this.indent();
        this.state = 567; 
        localctx.stmts = this.statement_list();
        this.state = 568; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_setter_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_setter_declaration;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Native_statement_listContext
    return this;
}

Native_setter_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_setter_declarationContext.prototype.constructor = Native_setter_declarationContext;

Native_setter_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Native_setter_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Native_setter_declarationContext.prototype.SETTER = function() {
    return this.getToken(EParser.SETTER, 0);
};

Native_setter_declarationContext.prototype.DOING = function() {
    return this.getToken(EParser.DOING, 0);
};

Native_setter_declarationContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Native_setter_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Native_setter_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Native_setter_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Native_setter_declarationContext.prototype.native_statement_list = function() {
    return this.getTypedRuleContext(Native_statement_listContext,0);
};

Native_setter_declarationContext.prototype.NATIVE = function() {
    return this.getToken(EParser.NATIVE, 0);
};

Native_setter_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNative_setter_declaration(this);
	}
};

Native_setter_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNative_setter_declaration(this);
	}
};




EParser.prototype.native_setter_declaration = function() {

    var localctx = new Native_setter_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, EParser.RULE_native_setter_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 570;
        this.match(EParser.DEFINE);
        this.state = 571; 
        localctx.name = this.variable_identifier();
        this.state = 572;
        this.match(EParser.AS);
        this.state = 574;
        _la = this._input.LA(1);
        if(_la===EParser.NATIVE) {
            this.state = 573;
            this.match(EParser.NATIVE);
        }

        this.state = 576;
        this.match(EParser.SETTER);
        this.state = 577;
        this.match(EParser.DOING);
        this.state = 578;
        this.match(EParser.COLON);
        this.state = 579; 
        this.indent();
        this.state = 580; 
        localctx.stmts = this.native_statement_list();
        this.state = 581; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Getter_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_getter_method_declaration;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Statement_listContext
    return this;
}

Getter_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Getter_method_declarationContext.prototype.constructor = Getter_method_declarationContext;

Getter_method_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Getter_method_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Getter_method_declarationContext.prototype.GETTER = function() {
    return this.getToken(EParser.GETTER, 0);
};

Getter_method_declarationContext.prototype.DOING = function() {
    return this.getToken(EParser.DOING, 0);
};

Getter_method_declarationContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Getter_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Getter_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Getter_method_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Getter_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Getter_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterGetter_method_declaration(this);
	}
};

Getter_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitGetter_method_declaration(this);
	}
};




EParser.prototype.getter_method_declaration = function() {

    var localctx = new Getter_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, EParser.RULE_getter_method_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 583;
        this.match(EParser.DEFINE);
        this.state = 584; 
        localctx.name = this.variable_identifier();
        this.state = 585;
        this.match(EParser.AS);
        this.state = 586;
        this.match(EParser.GETTER);
        this.state = 587;
        this.match(EParser.DOING);
        this.state = 588;
        this.match(EParser.COLON);
        this.state = 589; 
        this.indent();
        this.state = 590; 
        localctx.stmts = this.statement_list();
        this.state = 591; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_getter_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_getter_declaration;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Native_statement_listContext
    return this;
}

Native_getter_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_getter_declarationContext.prototype.constructor = Native_getter_declarationContext;

Native_getter_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Native_getter_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Native_getter_declarationContext.prototype.GETTER = function() {
    return this.getToken(EParser.GETTER, 0);
};

Native_getter_declarationContext.prototype.DOING = function() {
    return this.getToken(EParser.DOING, 0);
};

Native_getter_declarationContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Native_getter_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Native_getter_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Native_getter_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Native_getter_declarationContext.prototype.native_statement_list = function() {
    return this.getTypedRuleContext(Native_statement_listContext,0);
};

Native_getter_declarationContext.prototype.NATIVE = function() {
    return this.getToken(EParser.NATIVE, 0);
};

Native_getter_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNative_getter_declaration(this);
	}
};

Native_getter_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNative_getter_declaration(this);
	}
};




EParser.prototype.native_getter_declaration = function() {

    var localctx = new Native_getter_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, EParser.RULE_native_getter_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 593;
        this.match(EParser.DEFINE);
        this.state = 594; 
        localctx.name = this.variable_identifier();
        this.state = 595;
        this.match(EParser.AS);
        this.state = 597;
        _la = this._input.LA(1);
        if(_la===EParser.NATIVE) {
            this.state = 596;
            this.match(EParser.NATIVE);
        }

        this.state = 599;
        this.match(EParser.GETTER);
        this.state = 600;
        this.match(EParser.DOING);
        this.state = 601;
        this.match(EParser.COLON);
        this.state = 602; 
        this.indent();
        this.state = 603; 
        localctx.stmts = this.native_statement_list();
        this.state = 604; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_category_declaration;
    this.name = null; // Type_identifierContext
    this.attrs = null; // Attribute_listContext
    this.bindings = null; // Native_category_bindingsContext
    this.methods = null; // Native_member_method_declaration_listContext
    return this;
}

Native_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_declarationContext.prototype.constructor = Native_category_declarationContext;

Native_category_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Native_category_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Native_category_declarationContext.prototype.NATIVE = function() {
    return this.getToken(EParser.NATIVE, 0);
};

Native_category_declarationContext.prototype.CATEGORY = function() {
    return this.getToken(EParser.CATEGORY, 0);
};

Native_category_declarationContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


Native_category_declarationContext.prototype.indent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndentContext);
    } else {
        return this.getTypedRuleContext(IndentContext,i);
    }
};

Native_category_declarationContext.prototype.dedent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DedentContext);
    } else {
        return this.getTypedRuleContext(DedentContext,i);
    }
};

Native_category_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Native_category_declarationContext.prototype.native_category_bindings = function() {
    return this.getTypedRuleContext(Native_category_bindingsContext,0);
};

Native_category_declarationContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

Native_category_declarationContext.prototype.BINDINGS = function() {
    return this.getToken(EParser.BINDINGS, 0);
};

Native_category_declarationContext.prototype.STORABLE = function() {
    return this.getToken(EParser.STORABLE, 0);
};

Native_category_declarationContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

Native_category_declarationContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.AND);
    } else {
        return this.getToken(EParser.AND, i);
    }
};


Native_category_declarationContext.prototype.METHODS = function() {
    return this.getToken(EParser.METHODS, 0);
};

Native_category_declarationContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

Native_category_declarationContext.prototype.native_member_method_declaration_list = function() {
    return this.getTypedRuleContext(Native_member_method_declaration_listContext,0);
};

Native_category_declarationContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Native_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNative_category_declaration(this);
	}
};

Native_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNative_category_declaration(this);
	}
};




EParser.prototype.native_category_declaration = function() {

    var localctx = new Native_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, EParser.RULE_native_category_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 606;
        this.match(EParser.DEFINE);
        this.state = 607; 
        localctx.name = this.type_identifier();
        this.state = 608;
        this.match(EParser.AS);
        this.state = 610;
        _la = this._input.LA(1);
        if(_la===EParser.STORABLE) {
            this.state = 609;
            this.match(EParser.STORABLE);
        }

        this.state = 612;
        this.match(EParser.NATIVE);
        this.state = 613;
        this.match(EParser.CATEGORY);
        this.state = 621;
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        switch(la_) {
        case 1:
            this.state = 614; 
            localctx.attrs = this.attribute_list();
            this.state = 615;
            this.match(EParser.COMMA);
            this.state = 616;
            this.match(EParser.AND);
            this.state = 617;
            this.match(EParser.BINDINGS);
            break;

        case 2:
            this.state = 619;
            this.match(EParser.WITH);
            this.state = 620;
            this.match(EParser.BINDINGS);
            break;

        }
        this.state = 623;
        this.match(EParser.COLON);
        this.state = 624; 
        this.indent();
        this.state = 625; 
        localctx.bindings = this.native_category_bindings();
        this.state = 626; 
        this.dedent();
        this.state = 635;
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        if(la_===1) {
            this.state = 627; 
            this.lfp();
            this.state = 628;
            this.match(EParser.AND);
            this.state = 629;
            this.match(EParser.METHODS);
            this.state = 630;
            this.match(EParser.COLON);
            this.state = 631; 
            this.indent();
            this.state = 632; 
            localctx.methods = this.native_member_method_declaration_list();
            this.state = 633; 
            this.dedent();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_resource_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_resource_declaration;
    this.name = null; // Type_identifierContext
    this.attrs = null; // Attribute_listContext
    this.bindings = null; // Native_category_bindingsContext
    this.methods = null; // Native_member_method_declaration_listContext
    return this;
}

Native_resource_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_resource_declarationContext.prototype.constructor = Native_resource_declarationContext;

Native_resource_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Native_resource_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Native_resource_declarationContext.prototype.NATIVE = function() {
    return this.getToken(EParser.NATIVE, 0);
};

Native_resource_declarationContext.prototype.RESOURCE = function() {
    return this.getToken(EParser.RESOURCE, 0);
};

Native_resource_declarationContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


Native_resource_declarationContext.prototype.indent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndentContext);
    } else {
        return this.getTypedRuleContext(IndentContext,i);
    }
};

Native_resource_declarationContext.prototype.dedent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DedentContext);
    } else {
        return this.getTypedRuleContext(DedentContext,i);
    }
};

Native_resource_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Native_resource_declarationContext.prototype.native_category_bindings = function() {
    return this.getTypedRuleContext(Native_category_bindingsContext,0);
};

Native_resource_declarationContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

Native_resource_declarationContext.prototype.BINDINGS = function() {
    return this.getToken(EParser.BINDINGS, 0);
};

Native_resource_declarationContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

Native_resource_declarationContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.AND);
    } else {
        return this.getToken(EParser.AND, i);
    }
};


Native_resource_declarationContext.prototype.METHODS = function() {
    return this.getToken(EParser.METHODS, 0);
};

Native_resource_declarationContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

Native_resource_declarationContext.prototype.native_member_method_declaration_list = function() {
    return this.getTypedRuleContext(Native_member_method_declaration_listContext,0);
};

Native_resource_declarationContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Native_resource_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNative_resource_declaration(this);
	}
};

Native_resource_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNative_resource_declaration(this);
	}
};




EParser.prototype.native_resource_declaration = function() {

    var localctx = new Native_resource_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, EParser.RULE_native_resource_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 637;
        this.match(EParser.DEFINE);
        this.state = 638; 
        localctx.name = this.type_identifier();
        this.state = 639;
        this.match(EParser.AS);
        this.state = 640;
        this.match(EParser.NATIVE);
        this.state = 641;
        this.match(EParser.RESOURCE);
        this.state = 649;
        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
        switch(la_) {
        case 1:
            this.state = 642; 
            localctx.attrs = this.attribute_list();
            this.state = 643;
            this.match(EParser.COMMA);
            this.state = 644;
            this.match(EParser.AND);
            this.state = 645;
            this.match(EParser.BINDINGS);
            break;

        case 2:
            this.state = 647;
            this.match(EParser.WITH);
            this.state = 648;
            this.match(EParser.BINDINGS);
            break;

        }
        this.state = 651;
        this.match(EParser.COLON);
        this.state = 652; 
        this.indent();
        this.state = 653; 
        localctx.bindings = this.native_category_bindings();
        this.state = 654; 
        this.dedent();
        this.state = 663;
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        if(la_===1) {
            this.state = 655; 
            this.lfp();
            this.state = 656;
            this.match(EParser.AND);
            this.state = 657;
            this.match(EParser.METHODS);
            this.state = 658;
            this.match(EParser.COLON);
            this.state = 659; 
            this.indent();
            this.state = 660; 
            localctx.methods = this.native_member_method_declaration_list();
            this.state = 661; 
            this.dedent();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_bindingsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_category_bindings;
    this.items = null; // Native_category_binding_listContext
    return this;
}

Native_category_bindingsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_bindingsContext.prototype.constructor = Native_category_bindingsContext;

Native_category_bindingsContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Native_category_bindingsContext.prototype.CATEGORY = function() {
    return this.getToken(EParser.CATEGORY, 0);
};

Native_category_bindingsContext.prototype.BINDINGS = function() {
    return this.getToken(EParser.BINDINGS, 0);
};

Native_category_bindingsContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Native_category_bindingsContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Native_category_bindingsContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Native_category_bindingsContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Native_category_bindingsContext.prototype.native_category_binding_list = function() {
    return this.getTypedRuleContext(Native_category_binding_listContext,0);
};

Native_category_bindingsContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNative_category_bindings(this);
	}
};

Native_category_bindingsContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNative_category_bindings(this);
	}
};




EParser.prototype.native_category_bindings = function() {

    var localctx = new Native_category_bindingsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, EParser.RULE_native_category_bindings);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 665;
        this.match(EParser.DEFINE);
        this.state = 666;
        this.match(EParser.CATEGORY);
        this.state = 667;
        this.match(EParser.BINDINGS);
        this.state = 668;
        this.match(EParser.AS);
        this.state = 669;
        this.match(EParser.COLON);
        this.state = 670; 
        this.indent();
        this.state = 671; 
        localctx.items = this.native_category_binding_list(0);
        this.state = 672; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_binding_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_category_binding_list;
    return this;
}

Native_category_binding_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_binding_listContext.prototype.constructor = Native_category_binding_listContext;


 
Native_category_binding_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function NativeCategoryBindingListItemContext(parser, ctx) {
	Native_category_binding_listContext.call(this, parser);
    this.items = null; // Native_category_binding_listContext;
    this.item = null; // Native_category_bindingContext;
    Native_category_binding_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeCategoryBindingListItemContext.prototype = Object.create(Native_category_binding_listContext.prototype);
NativeCategoryBindingListItemContext.prototype.constructor = NativeCategoryBindingListItemContext;

NativeCategoryBindingListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

NativeCategoryBindingListItemContext.prototype.native_category_binding_list = function() {
    return this.getTypedRuleContext(Native_category_binding_listContext,0);
};

NativeCategoryBindingListItemContext.prototype.native_category_binding = function() {
    return this.getTypedRuleContext(Native_category_bindingContext,0);
};
NativeCategoryBindingListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNativeCategoryBindingListItem(this);
	}
};

NativeCategoryBindingListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNativeCategoryBindingListItem(this);
	}
};


function NativeCategoryBindingListContext(parser, ctx) {
	Native_category_binding_listContext.call(this, parser);
    this.item = null; // Native_category_bindingContext;
    Native_category_binding_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeCategoryBindingListContext.prototype = Object.create(Native_category_binding_listContext.prototype);
NativeCategoryBindingListContext.prototype.constructor = NativeCategoryBindingListContext;

NativeCategoryBindingListContext.prototype.native_category_binding = function() {
    return this.getTypedRuleContext(Native_category_bindingContext,0);
};
NativeCategoryBindingListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNativeCategoryBindingList(this);
	}
};

NativeCategoryBindingListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNativeCategoryBindingList(this);
	}
};



EParser.prototype.native_category_binding_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Native_category_binding_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 32;
    this.enterRecursionRule(localctx, 32, EParser.RULE_native_category_binding_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new NativeCategoryBindingListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 675; 
        localctx.item = this.native_category_binding();
        this._ctx.stop = this._input.LT(-1);
        this.state = 683;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,23,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new NativeCategoryBindingListItemContext(this, new Native_category_binding_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_native_category_binding_list);
                this.state = 677;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 678; 
                this.lfp();
                this.state = 679; 
                localctx.item = this.native_category_binding(); 
            }
            this.state = 685;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,23,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Attribute_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_attribute_list;
    return this;
}

Attribute_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_listContext.prototype.constructor = Attribute_listContext;


 
Attribute_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AttributeListContext(parser, ctx) {
	Attribute_listContext.call(this, parser);
    this.item = null; // Attribute_identifierContext;
    Attribute_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AttributeListContext.prototype = Object.create(Attribute_listContext.prototype);
AttributeListContext.prototype.constructor = AttributeListContext;

AttributeListContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

AttributeListContext.prototype.ATTRIBUTE = function() {
    return this.getToken(EParser.ATTRIBUTE, 0);
};

AttributeListContext.prototype.attribute_identifier = function() {
    return this.getTypedRuleContext(Attribute_identifierContext,0);
};
AttributeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAttributeList(this);
	}
};

AttributeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAttributeList(this);
	}
};


function AttributeListItemContext(parser, ctx) {
	Attribute_listContext.call(this, parser);
    this.items = null; // Attribute_identifier_listContext;
    this.item = null; // Attribute_identifierContext;
    Attribute_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AttributeListItemContext.prototype = Object.create(Attribute_listContext.prototype);
AttributeListItemContext.prototype.constructor = AttributeListItemContext;

AttributeListItemContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

AttributeListItemContext.prototype.ATTRIBUTES = function() {
    return this.getToken(EParser.ATTRIBUTES, 0);
};

AttributeListItemContext.prototype.attribute_identifier_list = function() {
    return this.getTypedRuleContext(Attribute_identifier_listContext,0);
};

AttributeListItemContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

AttributeListItemContext.prototype.attribute_identifier = function() {
    return this.getTypedRuleContext(Attribute_identifierContext,0);
};
AttributeListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAttributeListItem(this);
	}
};

AttributeListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAttributeListItem(this);
	}
};



EParser.prototype.attribute_list = function() {

    var localctx = new Attribute_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, EParser.RULE_attribute_list);
    try {
        this.state = 696;
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AttributeListContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 686;
            this.match(EParser.WITH);
            this.state = 687;
            this.match(EParser.ATTRIBUTE);
            this.state = 688; 
            localctx.item = this.attribute_identifier();
            break;

        case 2:
            localctx = new AttributeListItemContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 689;
            this.match(EParser.WITH);
            this.state = 690;
            this.match(EParser.ATTRIBUTES);
            this.state = 691; 
            localctx.items = this.attribute_identifier_list();
            this.state = 694;
            var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
            if(la_===1) {
                this.state = 692;
                this.match(EParser.AND);
                this.state = 693; 
                localctx.item = this.attribute_identifier();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Abstract_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_abstract_method_declaration;
    this.name = null; // Method_identifierContext
    this.args = null; // Full_argument_listContext
    this.typ = null; // TypedefContext
    return this;
}

Abstract_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Abstract_method_declarationContext.prototype.constructor = Abstract_method_declarationContext;

Abstract_method_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Abstract_method_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Abstract_method_declarationContext.prototype.ABSTRACT = function() {
    return this.getToken(EParser.ABSTRACT, 0);
};

Abstract_method_declarationContext.prototype.METHOD = function() {
    return this.getToken(EParser.METHOD, 0);
};

Abstract_method_declarationContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};

Abstract_method_declarationContext.prototype.RECEIVING = function() {
    return this.getToken(EParser.RECEIVING, 0);
};

Abstract_method_declarationContext.prototype.RETURNING = function() {
    return this.getToken(EParser.RETURNING, 0);
};

Abstract_method_declarationContext.prototype.full_argument_list = function() {
    return this.getTypedRuleContext(Full_argument_listContext,0);
};

Abstract_method_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Abstract_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAbstract_method_declaration(this);
	}
};

Abstract_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAbstract_method_declaration(this);
	}
};




EParser.prototype.abstract_method_declaration = function() {

    var localctx = new Abstract_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, EParser.RULE_abstract_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 698;
        this.match(EParser.DEFINE);
        this.state = 699; 
        localctx.name = this.method_identifier();
        this.state = 700;
        this.match(EParser.AS);
        this.state = 701;
        this.match(EParser.ABSTRACT);
        this.state = 702;
        this.match(EParser.METHOD);
        this.state = 705;
        _la = this._input.LA(1);
        if(_la===EParser.RECEIVING) {
            this.state = 703;
            this.match(EParser.RECEIVING);
            this.state = 704; 
            localctx.args = this.full_argument_list();
        }

        this.state = 709;
        _la = this._input.LA(1);
        if(_la===EParser.RETURNING) {
            this.state = 707;
            this.match(EParser.RETURNING);
            this.state = 708; 
            localctx.typ = this.typedef(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Concrete_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_concrete_method_declaration;
    this.name = null; // Method_identifierContext
    this.args = null; // Full_argument_listContext
    this.typ = null; // TypedefContext
    this.stmts = null; // Statement_listContext
    return this;
}

Concrete_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concrete_method_declarationContext.prototype.constructor = Concrete_method_declarationContext;

Concrete_method_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Concrete_method_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Concrete_method_declarationContext.prototype.METHOD = function() {
    return this.getToken(EParser.METHOD, 0);
};

Concrete_method_declarationContext.prototype.DOING = function() {
    return this.getToken(EParser.DOING, 0);
};

Concrete_method_declarationContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Concrete_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Concrete_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Concrete_method_declarationContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};

Concrete_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Concrete_method_declarationContext.prototype.RECEIVING = function() {
    return this.getToken(EParser.RECEIVING, 0);
};

Concrete_method_declarationContext.prototype.RETURNING = function() {
    return this.getToken(EParser.RETURNING, 0);
};

Concrete_method_declarationContext.prototype.full_argument_list = function() {
    return this.getTypedRuleContext(Full_argument_listContext,0);
};

Concrete_method_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Concrete_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterConcrete_method_declaration(this);
	}
};

Concrete_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitConcrete_method_declaration(this);
	}
};




EParser.prototype.concrete_method_declaration = function() {

    var localctx = new Concrete_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, EParser.RULE_concrete_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 711;
        this.match(EParser.DEFINE);
        this.state = 712; 
        localctx.name = this.method_identifier();
        this.state = 713;
        this.match(EParser.AS);
        this.state = 714;
        this.match(EParser.METHOD);
        this.state = 717;
        _la = this._input.LA(1);
        if(_la===EParser.RECEIVING) {
            this.state = 715;
            this.match(EParser.RECEIVING);
            this.state = 716; 
            localctx.args = this.full_argument_list();
        }

        this.state = 721;
        _la = this._input.LA(1);
        if(_la===EParser.RETURNING) {
            this.state = 719;
            this.match(EParser.RETURNING);
            this.state = 720; 
            localctx.typ = this.typedef(0);
        }

        this.state = 723;
        this.match(EParser.DOING);
        this.state = 724;
        this.match(EParser.COLON);
        this.state = 725; 
        this.indent();
        this.state = 726; 
        localctx.stmts = this.statement_list();
        this.state = 727; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_method_declaration;
    this.name = null; // Method_identifierContext
    this.args = null; // Full_argument_listContext
    this.typ = null; // Category_or_any_typeContext
    this.stmts = null; // Native_statement_listContext
    return this;
}

Native_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_method_declarationContext.prototype.constructor = Native_method_declarationContext;

Native_method_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Native_method_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Native_method_declarationContext.prototype.METHOD = function() {
    return this.getToken(EParser.METHOD, 0);
};

Native_method_declarationContext.prototype.DOING = function() {
    return this.getToken(EParser.DOING, 0);
};

Native_method_declarationContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Native_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Native_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Native_method_declarationContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};

Native_method_declarationContext.prototype.native_statement_list = function() {
    return this.getTypedRuleContext(Native_statement_listContext,0);
};

Native_method_declarationContext.prototype.NATIVE = function() {
    return this.getToken(EParser.NATIVE, 0);
};

Native_method_declarationContext.prototype.RECEIVING = function() {
    return this.getToken(EParser.RECEIVING, 0);
};

Native_method_declarationContext.prototype.RETURNING = function() {
    return this.getToken(EParser.RETURNING, 0);
};

Native_method_declarationContext.prototype.full_argument_list = function() {
    return this.getTypedRuleContext(Full_argument_listContext,0);
};

Native_method_declarationContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};

Native_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNative_method_declaration(this);
	}
};

Native_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNative_method_declaration(this);
	}
};




EParser.prototype.native_method_declaration = function() {

    var localctx = new Native_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, EParser.RULE_native_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 729;
        this.match(EParser.DEFINE);
        this.state = 730; 
        localctx.name = this.method_identifier();
        this.state = 731;
        this.match(EParser.AS);
        this.state = 733;
        _la = this._input.LA(1);
        if(_la===EParser.NATIVE) {
            this.state = 732;
            this.match(EParser.NATIVE);
        }

        this.state = 735;
        this.match(EParser.METHOD);
        this.state = 738;
        _la = this._input.LA(1);
        if(_la===EParser.RECEIVING) {
            this.state = 736;
            this.match(EParser.RECEIVING);
            this.state = 737; 
            localctx.args = this.full_argument_list();
        }

        this.state = 742;
        _la = this._input.LA(1);
        if(_la===EParser.RETURNING) {
            this.state = 740;
            this.match(EParser.RETURNING);
            this.state = 741; 
            localctx.typ = this.category_or_any_type();
        }

        this.state = 744;
        this.match(EParser.DOING);
        this.state = 745;
        this.match(EParser.COLON);
        this.state = 746; 
        this.indent();
        this.state = 747; 
        localctx.stmts = this.native_statement_list();
        this.state = 748; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Test_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_test_method_declaration;
    this.name = null; // Token
    this.stmts = null; // Statement_listContext
    this.exps = null; // Assertion_listContext
    this.error = null; // Symbol_identifierContext
    return this;
}

Test_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Test_method_declarationContext.prototype.constructor = Test_method_declarationContext;

Test_method_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Test_method_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Test_method_declarationContext.prototype.TEST = function() {
    return this.getToken(EParser.TEST, 0);
};

Test_method_declarationContext.prototype.METHOD = function() {
    return this.getToken(EParser.METHOD, 0);
};

Test_method_declarationContext.prototype.DOING = function() {
    return this.getToken(EParser.DOING, 0);
};

Test_method_declarationContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


Test_method_declarationContext.prototype.indent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndentContext);
    } else {
        return this.getTypedRuleContext(IndentContext,i);
    }
};

Test_method_declarationContext.prototype.dedent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DedentContext);
    } else {
        return this.getTypedRuleContext(DedentContext,i);
    }
};

Test_method_declarationContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

Test_method_declarationContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

Test_method_declarationContext.prototype.VERIFYING = function() {
    return this.getToken(EParser.VERIFYING, 0);
};

Test_method_declarationContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(EParser.TEXT_LITERAL, 0);
};

Test_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Test_method_declarationContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};

Test_method_declarationContext.prototype.assertion_list = function() {
    return this.getTypedRuleContext(Assertion_listContext,0);
};

Test_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTest_method_declaration(this);
	}
};

Test_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTest_method_declaration(this);
	}
};




EParser.prototype.test_method_declaration = function() {

    var localctx = new Test_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, EParser.RULE_test_method_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 750;
        this.match(EParser.DEFINE);
        this.state = 751;
        localctx.name = this.match(EParser.TEXT_LITERAL);
        this.state = 752;
        this.match(EParser.AS);
        this.state = 753;
        this.match(EParser.TEST);
        this.state = 754;
        this.match(EParser.METHOD);
        this.state = 755;
        this.match(EParser.DOING);
        this.state = 756;
        this.match(EParser.COLON);
        this.state = 757; 
        this.indent();
        this.state = 758; 
        localctx.stmts = this.statement_list();
        this.state = 759; 
        this.dedent();
        this.state = 760; 
        this.lfp();
        this.state = 761;
        this.match(EParser.AND);
        this.state = 762;
        this.match(EParser.VERIFYING);
        this.state = 769;
        switch(this._input.LA(1)) {
        case EParser.COLON:
            this.state = 763;
            this.match(EParser.COLON);
            this.state = 764; 
            this.indent();
            this.state = 765; 
            localctx.exps = this.assertion_list();
            this.state = 766; 
            this.dedent();
            break;
        case EParser.SYMBOL_IDENTIFIER:
            this.state = 768; 
            localctx.error = this.symbol_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssertionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_assertion;
    this.exp = null; // ExpressionContext
    return this;
}

AssertionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssertionContext.prototype.constructor = AssertionContext;

AssertionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AssertionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAssertion(this);
	}
};

AssertionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAssertion(this);
	}
};




EParser.prototype.assertion = function() {

    var localctx = new AssertionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, EParser.RULE_assertion);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 771; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Full_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_full_argument_list;
    this.items = null; // Argument_listContext
    this.item = null; // ArgumentContext
    return this;
}

Full_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Full_argument_listContext.prototype.constructor = Full_argument_listContext;

Full_argument_listContext.prototype.argument_list = function() {
    return this.getTypedRuleContext(Argument_listContext,0);
};

Full_argument_listContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

Full_argument_listContext.prototype.argument = function() {
    return this.getTypedRuleContext(ArgumentContext,0);
};

Full_argument_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterFull_argument_list(this);
	}
};

Full_argument_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitFull_argument_list(this);
	}
};




EParser.prototype.full_argument_list = function() {

    var localctx = new Full_argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, EParser.RULE_full_argument_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 773; 
        localctx.items = this.argument_list();
        this.state = 776;
        _la = this._input.LA(1);
        if(_la===EParser.AND) {
            this.state = 774;
            this.match(EParser.AND);
            this.state = 775; 
            localctx.item = this.argument();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Typed_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_typed_argument;
    this.typ = null; // Category_or_any_typeContext
    this.name = null; // Variable_identifierContext
    this.attrs = null; // Attribute_listContext
    this.value = null; // Literal_expressionContext
    return this;
}

Typed_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Typed_argumentContext.prototype.constructor = Typed_argumentContext;

Typed_argumentContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};

Typed_argumentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Typed_argumentContext.prototype.EQ = function() {
    return this.getToken(EParser.EQ, 0);
};

Typed_argumentContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Typed_argumentContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};

Typed_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTyped_argument(this);
	}
};

Typed_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTyped_argument(this);
	}
};




EParser.prototype.typed_argument = function() {

    var localctx = new Typed_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, EParser.RULE_typed_argument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 778; 
        localctx.typ = this.category_or_any_type();
        this.state = 779; 
        localctx.name = this.variable_identifier();
        this.state = 781;
        _la = this._input.LA(1);
        if(_la===EParser.WITH) {
            this.state = 780; 
            localctx.attrs = this.attribute_list();
        }

        this.state = 785;
        _la = this._input.LA(1);
        if(_la===EParser.EQ) {
            this.state = 783;
            this.match(EParser.EQ);
            this.state = 784; 
            localctx.value = this.literal_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;


 
StatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CommentStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.decl = null; // Comment_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CommentStatementContext.prototype = Object.create(StatementContext.prototype);
CommentStatementContext.prototype.constructor = CommentStatementContext;

CommentStatementContext.prototype.comment_statement = function() {
    return this.getTypedRuleContext(Comment_statementContext,0);
};
CommentStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCommentStatement(this);
	}
};

CommentStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCommentStatement(this);
	}
};


function StoreStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Store_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StoreStatementContext.prototype = Object.create(StatementContext.prototype);
StoreStatementContext.prototype.constructor = StoreStatementContext;

StoreStatementContext.prototype.store_statement = function() {
    return this.getTypedRuleContext(Store_statementContext,0);
};
StoreStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterStoreStatement(this);
	}
};

StoreStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitStoreStatement(this);
	}
};


function WithSingletonStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // With_singleton_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WithSingletonStatementContext.prototype = Object.create(StatementContext.prototype);
WithSingletonStatementContext.prototype.constructor = WithSingletonStatementContext;

WithSingletonStatementContext.prototype.with_singleton_statement = function() {
    return this.getTypedRuleContext(With_singleton_statementContext,0);
};
WithSingletonStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterWithSingletonStatement(this);
	}
};

WithSingletonStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitWithSingletonStatement(this);
	}
};


function WriteStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Write_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WriteStatementContext.prototype = Object.create(StatementContext.prototype);
WriteStatementContext.prototype.constructor = WriteStatementContext;

WriteStatementContext.prototype.write_statement = function() {
    return this.getTypedRuleContext(Write_statementContext,0);
};
WriteStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterWriteStatement(this);
	}
};

WriteStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitWriteStatement(this);
	}
};


function WhileStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // While_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WhileStatementContext.prototype = Object.create(StatementContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

WhileStatementContext.prototype.while_statement = function() {
    return this.getTypedRuleContext(While_statementContext,0);
};
WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitWhileStatement(this);
	}
};


function WithResourceStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // With_resource_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WithResourceStatementContext.prototype = Object.create(StatementContext.prototype);
WithResourceStatementContext.prototype.constructor = WithResourceStatementContext;

WithResourceStatementContext.prototype.with_resource_statement = function() {
    return this.getTypedRuleContext(With_resource_statementContext,0);
};
WithResourceStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterWithResourceStatement(this);
	}
};

WithResourceStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitWithResourceStatement(this);
	}
};


function RaiseStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Raise_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RaiseStatementContext.prototype = Object.create(StatementContext.prototype);
RaiseStatementContext.prototype.constructor = RaiseStatementContext;

RaiseStatementContext.prototype.raise_statement = function() {
    return this.getTypedRuleContext(Raise_statementContext,0);
};
RaiseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterRaiseStatement(this);
	}
};

RaiseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitRaiseStatement(this);
	}
};


function BreakStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Break_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BreakStatementContext.prototype = Object.create(StatementContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

BreakStatementContext.prototype.break_statement = function() {
    return this.getTypedRuleContext(Break_statementContext,0);
};
BreakStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterBreakStatement(this);
	}
};

BreakStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitBreakStatement(this);
	}
};


function AssignInstanceStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Assign_instance_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignInstanceStatementContext.prototype = Object.create(StatementContext.prototype);
AssignInstanceStatementContext.prototype.constructor = AssignInstanceStatementContext;

AssignInstanceStatementContext.prototype.assign_instance_statement = function() {
    return this.getTypedRuleContext(Assign_instance_statementContext,0);
};
AssignInstanceStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAssignInstanceStatement(this);
	}
};

AssignInstanceStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAssignInstanceStatement(this);
	}
};


function IfStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // If_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IfStatementContext.prototype = Object.create(StatementContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.if_statement = function() {
    return this.getTypedRuleContext(If_statementContext,0);
};
IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIfStatement(this);
	}
};


function SwitchStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Switch_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SwitchStatementContext.prototype = Object.create(StatementContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

SwitchStatementContext.prototype.switch_statement = function() {
    return this.getTypedRuleContext(Switch_statementContext,0);
};
SwitchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSwitchStatement(this);
	}
};

SwitchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSwitchStatement(this);
	}
};


function TryStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Try_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TryStatementContext.prototype = Object.create(StatementContext.prototype);
TryStatementContext.prototype.constructor = TryStatementContext;

TryStatementContext.prototype.try_statement = function() {
    return this.getTypedRuleContext(Try_statementContext,0);
};
TryStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTryStatement(this);
	}
};

TryStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTryStatement(this);
	}
};


function MethodCallStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Method_call_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodCallStatementContext.prototype = Object.create(StatementContext.prototype);
MethodCallStatementContext.prototype.constructor = MethodCallStatementContext;

MethodCallStatementContext.prototype.method_call_statement = function() {
    return this.getTypedRuleContext(Method_call_statementContext,0);
};
MethodCallStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMethodCallStatement(this);
	}
};

MethodCallStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMethodCallStatement(this);
	}
};


function ReturnStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Return_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReturnStatementContext.prototype = Object.create(StatementContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.return_statement = function() {
    return this.getTypedRuleContext(Return_statementContext,0);
};
ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitReturnStatement(this);
	}
};


function AssignTupleStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Assign_tuple_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignTupleStatementContext.prototype = Object.create(StatementContext.prototype);
AssignTupleStatementContext.prototype.constructor = AssignTupleStatementContext;

AssignTupleStatementContext.prototype.assign_tuple_statement = function() {
    return this.getTypedRuleContext(Assign_tuple_statementContext,0);
};
AssignTupleStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAssignTupleStatement(this);
	}
};

AssignTupleStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAssignTupleStatement(this);
	}
};


function ClosureStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.decl = null; // Concrete_method_declarationContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClosureStatementContext.prototype = Object.create(StatementContext.prototype);
ClosureStatementContext.prototype.constructor = ClosureStatementContext;

ClosureStatementContext.prototype.concrete_method_declaration = function() {
    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
};
ClosureStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterClosureStatement(this);
	}
};

ClosureStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitClosureStatement(this);
	}
};


function FlushStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Flush_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FlushStatementContext.prototype = Object.create(StatementContext.prototype);
FlushStatementContext.prototype.constructor = FlushStatementContext;

FlushStatementContext.prototype.flush_statement = function() {
    return this.getTypedRuleContext(Flush_statementContext,0);
};
FlushStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterFlushStatement(this);
	}
};

FlushStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitFlushStatement(this);
	}
};


function DoWhileStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Do_while_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DoWhileStatementContext.prototype = Object.create(StatementContext.prototype);
DoWhileStatementContext.prototype.constructor = DoWhileStatementContext;

DoWhileStatementContext.prototype.do_while_statement = function() {
    return this.getTypedRuleContext(Do_while_statementContext,0);
};
DoWhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDoWhileStatement(this);
	}
};

DoWhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDoWhileStatement(this);
	}
};


function ForEachStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // For_each_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForEachStatementContext.prototype = Object.create(StatementContext.prototype);
ForEachStatementContext.prototype.constructor = ForEachStatementContext;

ForEachStatementContext.prototype.for_each_statement = function() {
    return this.getTypedRuleContext(For_each_statementContext,0);
};
ForEachStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterForEachStatement(this);
	}
};

ForEachStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitForEachStatement(this);
	}
};



EParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, EParser.RULE_statement);
    try {
        this.state = 806;
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AssignInstanceStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 787; 
            localctx.stmt = this.assign_instance_statement();
            break;

        case 2:
            localctx = new MethodCallStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 788; 
            localctx.stmt = this.method_call_statement();
            break;

        case 3:
            localctx = new AssignTupleStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 789; 
            localctx.stmt = this.assign_tuple_statement();
            break;

        case 4:
            localctx = new StoreStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 790; 
            localctx.stmt = this.store_statement();
            break;

        case 5:
            localctx = new FlushStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 791; 
            localctx.stmt = this.flush_statement();
            break;

        case 6:
            localctx = new BreakStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 792; 
            localctx.stmt = this.break_statement();
            break;

        case 7:
            localctx = new ReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 793; 
            localctx.stmt = this.return_statement();
            break;

        case 8:
            localctx = new IfStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 794; 
            localctx.stmt = this.if_statement();
            break;

        case 9:
            localctx = new SwitchStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 795; 
            localctx.stmt = this.switch_statement();
            break;

        case 10:
            localctx = new ForEachStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 796; 
            localctx.stmt = this.for_each_statement();
            break;

        case 11:
            localctx = new WhileStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 797; 
            localctx.stmt = this.while_statement();
            break;

        case 12:
            localctx = new DoWhileStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 798; 
            localctx.stmt = this.do_while_statement();
            break;

        case 13:
            localctx = new RaiseStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 799; 
            localctx.stmt = this.raise_statement();
            break;

        case 14:
            localctx = new TryStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 800; 
            localctx.stmt = this.try_statement();
            break;

        case 15:
            localctx = new WriteStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 801; 
            localctx.stmt = this.write_statement();
            break;

        case 16:
            localctx = new WithResourceStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 802; 
            localctx.stmt = this.with_resource_statement();
            break;

        case 17:
            localctx = new WithSingletonStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 803; 
            localctx.stmt = this.with_singleton_statement();
            break;

        case 18:
            localctx = new ClosureStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 804; 
            localctx.decl = this.concrete_method_declaration();
            break;

        case 19:
            localctx = new CommentStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 805; 
            localctx.decl = this.comment_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Flush_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_flush_statement;
    return this;
}

Flush_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Flush_statementContext.prototype.constructor = Flush_statementContext;

Flush_statementContext.prototype.FLUSH = function() {
    return this.getToken(EParser.FLUSH, 0);
};

Flush_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterFlush_statement(this);
	}
};

Flush_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitFlush_statement(this);
	}
};




EParser.prototype.flush_statement = function() {

    var localctx = new Flush_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, EParser.RULE_flush_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 808;
        this.match(EParser.FLUSH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Store_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_store_statement;
    this.to_del = null; // Expression_listContext
    this.to_add = null; // Expression_listContext
    return this;
}

Store_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Store_statementContext.prototype.constructor = Store_statementContext;

Store_statementContext.prototype.DELETE = function() {
    return this.getToken(EParser.DELETE, 0);
};

Store_statementContext.prototype.expression_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expression_listContext);
    } else {
        return this.getTypedRuleContext(Expression_listContext,i);
    }
};

Store_statementContext.prototype.STORE = function() {
    return this.getToken(EParser.STORE, 0);
};

Store_statementContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

Store_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterStore_statement(this);
	}
};

Store_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitStore_statement(this);
	}
};




EParser.prototype.store_statement = function() {

    var localctx = new Store_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, EParser.RULE_store_statement);
    try {
        this.state = 820;
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 810;
            this.match(EParser.DELETE);
            this.state = 811; 
            localctx.to_del = this.expression_list();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 812;
            this.match(EParser.STORE);
            this.state = 813; 
            localctx.to_add = this.expression_list();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 814;
            this.match(EParser.DELETE);
            this.state = 815; 
            localctx.to_del = this.expression_list();
            this.state = 816;
            this.match(EParser.AND);
            this.state = 817;
            this.match(EParser.STORE);
            this.state = 818; 
            localctx.to_add = this.expression_list();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_call_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_method_call_statement;
    return this;
}

Method_call_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_call_statementContext.prototype.constructor = Method_call_statementContext;


 
Method_call_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function InvokeStatementContext(parser, ctx) {
	Method_call_statementContext.call(this, parser);
    this.exp = null; // Invocation_expressionContext;
    Method_call_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InvokeStatementContext.prototype = Object.create(Method_call_statementContext.prototype);
InvokeStatementContext.prototype.constructor = InvokeStatementContext;

InvokeStatementContext.prototype.invocation_expression = function() {
    return this.getTypedRuleContext(Invocation_expressionContext,0);
};
InvokeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterInvokeStatement(this);
	}
};

InvokeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitInvokeStatement(this);
	}
};


function UnresolvedWithArgsStatementContext(parser, ctx) {
	Method_call_statementContext.call(this, parser);
    this.exp = null; // Unresolved_expressionContext;
    this.args = null; // Argument_assignment_listContext;
    Method_call_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnresolvedWithArgsStatementContext.prototype = Object.create(Method_call_statementContext.prototype);
UnresolvedWithArgsStatementContext.prototype.constructor = UnresolvedWithArgsStatementContext;

UnresolvedWithArgsStatementContext.prototype.unresolved_expression = function() {
    return this.getTypedRuleContext(Unresolved_expressionContext,0);
};

UnresolvedWithArgsStatementContext.prototype.argument_assignment_list = function() {
    return this.getTypedRuleContext(Argument_assignment_listContext,0);
};
UnresolvedWithArgsStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterUnresolvedWithArgsStatement(this);
	}
};

UnresolvedWithArgsStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitUnresolvedWithArgsStatement(this);
	}
};



EParser.prototype.method_call_statement = function() {

    var localctx = new Method_call_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, EParser.RULE_method_call_statement);
    try {
        this.state = 827;
        switch(this._input.LA(1)) {
        case EParser.SYMBOL_IDENTIFIER:
        case EParser.TYPE_IDENTIFIER:
        case EParser.VARIABLE_IDENTIFIER:
            localctx = new UnresolvedWithArgsStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 822; 
            localctx.exp = this.unresolved_expression(0);
            this.state = 824;
            var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
            if(la_===1) {
                this.state = 823; 
                localctx.args = this.argument_assignment_list();

            }
            break;
        case EParser.INVOKE:
            localctx = new InvokeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 826; 
            localctx.exp = this.invocation_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_resource_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_with_resource_statement;
    this.stmt = null; // Assign_variable_statementContext
    this.stmts = null; // Statement_listContext
    return this;
}

With_resource_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_resource_statementContext.prototype.constructor = With_resource_statementContext;

With_resource_statementContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

With_resource_statementContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

With_resource_statementContext.prototype.DO = function() {
    return this.getToken(EParser.DO, 0);
};

With_resource_statementContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

With_resource_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

With_resource_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

With_resource_statementContext.prototype.assign_variable_statement = function() {
    return this.getTypedRuleContext(Assign_variable_statementContext,0);
};

With_resource_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

With_resource_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterWith_resource_statement(this);
	}
};

With_resource_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitWith_resource_statement(this);
	}
};




EParser.prototype.with_resource_statement = function() {

    var localctx = new With_resource_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, EParser.RULE_with_resource_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 829;
        this.match(EParser.WITH);
        this.state = 830; 
        localctx.stmt = this.assign_variable_statement();
        this.state = 831;
        this.match(EParser.COMMA);
        this.state = 832;
        this.match(EParser.DO);
        this.state = 833;
        this.match(EParser.COLON);
        this.state = 834; 
        this.indent();
        this.state = 835; 
        localctx.stmts = this.statement_list();
        this.state = 836; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_singleton_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_with_singleton_statement;
    this.typ = null; // Type_identifierContext
    this.stmts = null; // Statement_listContext
    return this;
}

With_singleton_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_singleton_statementContext.prototype.constructor = With_singleton_statementContext;

With_singleton_statementContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

With_singleton_statementContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

With_singleton_statementContext.prototype.DO = function() {
    return this.getToken(EParser.DO, 0);
};

With_singleton_statementContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

With_singleton_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

With_singleton_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

With_singleton_statementContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

With_singleton_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

With_singleton_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterWith_singleton_statement(this);
	}
};

With_singleton_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitWith_singleton_statement(this);
	}
};




EParser.prototype.with_singleton_statement = function() {

    var localctx = new With_singleton_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, EParser.RULE_with_singleton_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 838;
        this.match(EParser.WITH);
        this.state = 839; 
        localctx.typ = this.type_identifier();
        this.state = 840;
        this.match(EParser.COMMA);
        this.state = 841;
        this.match(EParser.DO);
        this.state = 842;
        this.match(EParser.COLON);
        this.state = 843; 
        this.indent();
        this.state = 844; 
        localctx.stmts = this.statement_list();
        this.state = 845; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_switch_statement;
    this.exp = null; // ExpressionContext
    this.cases = null; // Switch_case_statement_listContext
    this.stmts = null; // Statement_listContext
    return this;
}

Switch_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_statementContext.prototype.constructor = Switch_statementContext;

Switch_statementContext.prototype.SWITCH = function() {
    return this.getToken(EParser.SWITCH, 0);
};

Switch_statementContext.prototype.ON = function() {
    return this.getToken(EParser.ON, 0);
};

Switch_statementContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


Switch_statementContext.prototype.indent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndentContext);
    } else {
        return this.getTypedRuleContext(IndentContext,i);
    }
};

Switch_statementContext.prototype.dedent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DedentContext);
    } else {
        return this.getTypedRuleContext(DedentContext,i);
    }
};

Switch_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Switch_statementContext.prototype.switch_case_statement_list = function() {
    return this.getTypedRuleContext(Switch_case_statement_listContext,0);
};

Switch_statementContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

Switch_statementContext.prototype.OTHERWISE = function() {
    return this.getToken(EParser.OTHERWISE, 0);
};

Switch_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Switch_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSwitch_statement(this);
	}
};

Switch_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSwitch_statement(this);
	}
};




EParser.prototype.switch_statement = function() {

    var localctx = new Switch_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, EParser.RULE_switch_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 847;
        this.match(EParser.SWITCH);
        this.state = 848;
        this.match(EParser.ON);
        this.state = 849; 
        localctx.exp = this.expression(0);
        this.state = 850;
        this.match(EParser.COLON);
        this.state = 851; 
        this.indent();
        this.state = 852; 
        localctx.cases = this.switch_case_statement_list();
        this.state = 860;
        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
        if(la_===1) {
            this.state = 853; 
            this.lfp();
            this.state = 854;
            this.match(EParser.OTHERWISE);
            this.state = 855;
            this.match(EParser.COLON);
            this.state = 856; 
            this.indent();
            this.state = 857; 
            localctx.stmts = this.statement_list();
            this.state = 858; 
            this.dedent();

        }
        this.state = 862; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_case_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_switch_case_statement;
    return this;
}

Switch_case_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_case_statementContext.prototype.constructor = Switch_case_statementContext;


 
Switch_case_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AtomicSwitchCaseContext(parser, ctx) {
	Switch_case_statementContext.call(this, parser);
    this.exp = null; // Atomic_literalContext;
    this.stmts = null; // Statement_listContext;
    Switch_case_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtomicSwitchCaseContext.prototype = Object.create(Switch_case_statementContext.prototype);
AtomicSwitchCaseContext.prototype.constructor = AtomicSwitchCaseContext;

AtomicSwitchCaseContext.prototype.WHEN = function() {
    return this.getToken(EParser.WHEN, 0);
};

AtomicSwitchCaseContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

AtomicSwitchCaseContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

AtomicSwitchCaseContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

AtomicSwitchCaseContext.prototype.atomic_literal = function() {
    return this.getTypedRuleContext(Atomic_literalContext,0);
};

AtomicSwitchCaseContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
AtomicSwitchCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAtomicSwitchCase(this);
	}
};

AtomicSwitchCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAtomicSwitchCase(this);
	}
};


function CollectionSwitchCaseContext(parser, ctx) {
	Switch_case_statementContext.call(this, parser);
    this.exp = null; // Literal_collectionContext;
    this.stmts = null; // Statement_listContext;
    Switch_case_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CollectionSwitchCaseContext.prototype = Object.create(Switch_case_statementContext.prototype);
CollectionSwitchCaseContext.prototype.constructor = CollectionSwitchCaseContext;

CollectionSwitchCaseContext.prototype.WHEN = function() {
    return this.getToken(EParser.WHEN, 0);
};

CollectionSwitchCaseContext.prototype.IN = function() {
    return this.getToken(EParser.IN, 0);
};

CollectionSwitchCaseContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

CollectionSwitchCaseContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

CollectionSwitchCaseContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

CollectionSwitchCaseContext.prototype.literal_collection = function() {
    return this.getTypedRuleContext(Literal_collectionContext,0);
};

CollectionSwitchCaseContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
CollectionSwitchCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCollectionSwitchCase(this);
	}
};

CollectionSwitchCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCollectionSwitchCase(this);
	}
};



EParser.prototype.switch_case_statement = function() {

    var localctx = new Switch_case_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, EParser.RULE_switch_case_statement);
    try {
        this.state = 879;
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AtomicSwitchCaseContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 864;
            this.match(EParser.WHEN);
            this.state = 865; 
            localctx.exp = this.atomic_literal();
            this.state = 866;
            this.match(EParser.COLON);
            this.state = 867; 
            this.indent();
            this.state = 868; 
            localctx.stmts = this.statement_list();
            this.state = 869; 
            this.dedent();
            break;

        case 2:
            localctx = new CollectionSwitchCaseContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 871;
            this.match(EParser.WHEN);
            this.state = 872;
            this.match(EParser.IN);
            this.state = 873; 
            localctx.exp = this.literal_collection();
            this.state = 874;
            this.match(EParser.COLON);
            this.state = 875; 
            this.indent();
            this.state = 876; 
            localctx.stmts = this.statement_list();
            this.state = 877; 
            this.dedent();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_each_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_for_each_statement;
    this.name1 = null; // Variable_identifierContext
    this.name2 = null; // Variable_identifierContext
    this.source = null; // ExpressionContext
    this.stmts = null; // Statement_listContext
    return this;
}

For_each_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_each_statementContext.prototype.constructor = For_each_statementContext;

For_each_statementContext.prototype.FOR = function() {
    return this.getToken(EParser.FOR, 0);
};

For_each_statementContext.prototype.EACH = function() {
    return this.getToken(EParser.EACH, 0);
};

For_each_statementContext.prototype.IN = function() {
    return this.getToken(EParser.IN, 0);
};

For_each_statementContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

For_each_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

For_each_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

For_each_statementContext.prototype.variable_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_identifierContext);
    } else {
        return this.getTypedRuleContext(Variable_identifierContext,i);
    }
};

For_each_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

For_each_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

For_each_statementContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

For_each_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterFor_each_statement(this);
	}
};

For_each_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitFor_each_statement(this);
	}
};




EParser.prototype.for_each_statement = function() {

    var localctx = new For_each_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, EParser.RULE_for_each_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 881;
        this.match(EParser.FOR);
        this.state = 882;
        this.match(EParser.EACH);
        this.state = 883; 
        localctx.name1 = this.variable_identifier();
        this.state = 886;
        _la = this._input.LA(1);
        if(_la===EParser.COMMA) {
            this.state = 884;
            this.match(EParser.COMMA);
            this.state = 885; 
            localctx.name2 = this.variable_identifier();
        }

        this.state = 888;
        this.match(EParser.IN);
        this.state = 889; 
        localctx.source = this.expression(0);
        this.state = 890;
        this.match(EParser.COLON);
        this.state = 891; 
        this.indent();
        this.state = 892; 
        localctx.stmts = this.statement_list();
        this.state = 893; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Do_while_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_do_while_statement;
    this.stmts = null; // Statement_listContext
    this.exp = null; // ExpressionContext
    return this;
}

Do_while_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Do_while_statementContext.prototype.constructor = Do_while_statementContext;

Do_while_statementContext.prototype.DO = function() {
    return this.getToken(EParser.DO, 0);
};

Do_while_statementContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Do_while_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Do_while_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Do_while_statementContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

Do_while_statementContext.prototype.WHILE = function() {
    return this.getToken(EParser.WHILE, 0);
};

Do_while_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Do_while_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Do_while_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDo_while_statement(this);
	}
};

Do_while_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDo_while_statement(this);
	}
};




EParser.prototype.do_while_statement = function() {

    var localctx = new Do_while_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, EParser.RULE_do_while_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 895;
        this.match(EParser.DO);
        this.state = 896;
        this.match(EParser.COLON);
        this.state = 897; 
        this.indent();
        this.state = 898; 
        localctx.stmts = this.statement_list();
        this.state = 899; 
        this.dedent();
        this.state = 900; 
        this.lfp();
        this.state = 901;
        this.match(EParser.WHILE);
        this.state = 902; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function While_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_while_statement;
    this.exp = null; // ExpressionContext
    this.stmts = null; // Statement_listContext
    return this;
}

While_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
While_statementContext.prototype.constructor = While_statementContext;

While_statementContext.prototype.WHILE = function() {
    return this.getToken(EParser.WHILE, 0);
};

While_statementContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

While_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

While_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

While_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

While_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

While_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterWhile_statement(this);
	}
};

While_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitWhile_statement(this);
	}
};




EParser.prototype.while_statement = function() {

    var localctx = new While_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, EParser.RULE_while_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 904;
        this.match(EParser.WHILE);
        this.state = 905; 
        localctx.exp = this.expression(0);
        this.state = 906;
        this.match(EParser.COLON);
        this.state = 907; 
        this.indent();
        this.state = 908; 
        localctx.stmts = this.statement_list();
        this.state = 909; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function If_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_if_statement;
    this.exp = null; // ExpressionContext
    this.stmts = null; // Statement_listContext
    this.elseIfs = null; // Else_if_statement_listContext
    this.elseStmts = null; // Statement_listContext
    return this;
}

If_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_statementContext.prototype.constructor = If_statementContext;

If_statementContext.prototype.IF = function() {
    return this.getToken(EParser.IF, 0);
};

If_statementContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


If_statementContext.prototype.indent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndentContext);
    } else {
        return this.getTypedRuleContext(IndentContext,i);
    }
};

If_statementContext.prototype.dedent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DedentContext);
    } else {
        return this.getTypedRuleContext(DedentContext,i);
    }
};

If_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

If_statementContext.prototype.statement_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Statement_listContext);
    } else {
        return this.getTypedRuleContext(Statement_listContext,i);
    }
};

If_statementContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

If_statementContext.prototype.ELSE = function() {
    return this.getToken(EParser.ELSE, 0);
};

If_statementContext.prototype.else_if_statement_list = function() {
    return this.getTypedRuleContext(Else_if_statement_listContext,0);
};

If_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIf_statement(this);
	}
};

If_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIf_statement(this);
	}
};




EParser.prototype.if_statement = function() {

    var localctx = new If_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, EParser.RULE_if_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 911;
        this.match(EParser.IF);
        this.state = 912; 
        localctx.exp = this.expression(0);
        this.state = 913;
        this.match(EParser.COLON);
        this.state = 914; 
        this.indent();
        this.state = 915; 
        localctx.stmts = this.statement_list();
        this.state = 916; 
        this.dedent();
        this.state = 920;
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        if(la_===1) {
            this.state = 917; 
            this.lfp();
            this.state = 918; 
            localctx.elseIfs = this.else_if_statement_list(0);

        }
        this.state = 929;
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        if(la_===1) {
            this.state = 922; 
            this.lfp();
            this.state = 923;
            this.match(EParser.ELSE);
            this.state = 924;
            this.match(EParser.COLON);
            this.state = 925; 
            this.indent();
            this.state = 926; 
            localctx.elseStmts = this.statement_list();
            this.state = 927; 
            this.dedent();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Else_if_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_else_if_statement_list;
    return this;
}

Else_if_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Else_if_statement_listContext.prototype.constructor = Else_if_statement_listContext;


 
Else_if_statement_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ElseIfStatementListContext(parser, ctx) {
	Else_if_statement_listContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    this.stmts = null; // Statement_listContext;
    Else_if_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ElseIfStatementListContext.prototype = Object.create(Else_if_statement_listContext.prototype);
ElseIfStatementListContext.prototype.constructor = ElseIfStatementListContext;

ElseIfStatementListContext.prototype.ELSE = function() {
    return this.getToken(EParser.ELSE, 0);
};

ElseIfStatementListContext.prototype.IF = function() {
    return this.getToken(EParser.IF, 0);
};

ElseIfStatementListContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

ElseIfStatementListContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

ElseIfStatementListContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

ElseIfStatementListContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElseIfStatementListContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
ElseIfStatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterElseIfStatementList(this);
	}
};

ElseIfStatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitElseIfStatementList(this);
	}
};


function ElseIfStatementListItemContext(parser, ctx) {
	Else_if_statement_listContext.call(this, parser);
    this.items = null; // Else_if_statement_listContext;
    this.exp = null; // ExpressionContext;
    this.stmts = null; // Statement_listContext;
    Else_if_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ElseIfStatementListItemContext.prototype = Object.create(Else_if_statement_listContext.prototype);
ElseIfStatementListItemContext.prototype.constructor = ElseIfStatementListItemContext;

ElseIfStatementListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

ElseIfStatementListItemContext.prototype.ELSE = function() {
    return this.getToken(EParser.ELSE, 0);
};

ElseIfStatementListItemContext.prototype.IF = function() {
    return this.getToken(EParser.IF, 0);
};

ElseIfStatementListItemContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

ElseIfStatementListItemContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

ElseIfStatementListItemContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

ElseIfStatementListItemContext.prototype.else_if_statement_list = function() {
    return this.getTypedRuleContext(Else_if_statement_listContext,0);
};

ElseIfStatementListItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElseIfStatementListItemContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
ElseIfStatementListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterElseIfStatementListItem(this);
	}
};

ElseIfStatementListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitElseIfStatementListItem(this);
	}
};



EParser.prototype.else_if_statement_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Else_if_statement_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 74;
    this.enterRecursionRule(localctx, 74, EParser.RULE_else_if_statement_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new ElseIfStatementListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 932;
        this.match(EParser.ELSE);
        this.state = 933;
        this.match(EParser.IF);
        this.state = 934; 
        localctx.exp = this.expression(0);
        this.state = 935;
        this.match(EParser.COLON);
        this.state = 936; 
        this.indent();
        this.state = 937; 
        localctx.stmts = this.statement_list();
        this.state = 938; 
        this.dedent();
        this._ctx.stop = this._input.LT(-1);
        this.state = 952;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ElseIfStatementListItemContext(this, new Else_if_statement_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_else_if_statement_list);
                this.state = 940;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 941; 
                this.lfp();
                this.state = 942;
                this.match(EParser.ELSE);
                this.state = 943;
                this.match(EParser.IF);
                this.state = 944; 
                localctx.exp = this.expression(0);
                this.state = 945;
                this.match(EParser.COLON);
                this.state = 946; 
                this.indent();
                this.state = 947; 
                localctx.stmts = this.statement_list();
                this.state = 948; 
                this.dedent(); 
            }
            this.state = 954;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Raise_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_raise_statement;
    this.exp = null; // ExpressionContext
    return this;
}

Raise_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raise_statementContext.prototype.constructor = Raise_statementContext;

Raise_statementContext.prototype.RAISE = function() {
    return this.getToken(EParser.RAISE, 0);
};

Raise_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Raise_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterRaise_statement(this);
	}
};

Raise_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitRaise_statement(this);
	}
};




EParser.prototype.raise_statement = function() {

    var localctx = new Raise_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, EParser.RULE_raise_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 955;
        this.match(EParser.RAISE);
        this.state = 956; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Try_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_try_statement;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Statement_listContext
    this.handlers = null; // Catch_statement_listContext
    this.anyStmts = null; // Statement_listContext
    this.finalStmts = null; // Statement_listContext
    return this;
}

Try_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Try_statementContext.prototype.constructor = Try_statementContext;

Try_statementContext.prototype.SWITCH = function() {
    return this.getToken(EParser.SWITCH, 0);
};

Try_statementContext.prototype.ON = function() {
    return this.getToken(EParser.ON, 0);
};

Try_statementContext.prototype.DOING = function() {
    return this.getToken(EParser.DOING, 0);
};

Try_statementContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


Try_statementContext.prototype.indent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndentContext);
    } else {
        return this.getTypedRuleContext(IndentContext,i);
    }
};

Try_statementContext.prototype.dedent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DedentContext);
    } else {
        return this.getTypedRuleContext(DedentContext,i);
    }
};

Try_statementContext.prototype.lfs = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfsContext);
    } else {
        return this.getTypedRuleContext(LfsContext,i);
    }
};

Try_statementContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Try_statementContext.prototype.statement_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Statement_listContext);
    } else {
        return this.getTypedRuleContext(Statement_listContext,i);
    }
};

Try_statementContext.prototype.ALWAYS = function() {
    return this.getToken(EParser.ALWAYS, 0);
};

Try_statementContext.prototype.catch_statement_list = function() {
    return this.getTypedRuleContext(Catch_statement_listContext,0);
};

Try_statementContext.prototype.OTHERWISE = function() {
    return this.getToken(EParser.OTHERWISE, 0);
};

Try_statementContext.prototype.WHEN = function() {
    return this.getToken(EParser.WHEN, 0);
};

Try_statementContext.prototype.ANY = function() {
    return this.getToken(EParser.ANY, 0);
};

Try_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTry_statement(this);
	}
};

Try_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTry_statement(this);
	}
};




EParser.prototype.try_statement = function() {

    var localctx = new Try_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, EParser.RULE_try_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 958;
        this.match(EParser.SWITCH);
        this.state = 959;
        this.match(EParser.ON);
        this.state = 960; 
        localctx.name = this.variable_identifier();
        this.state = 961;
        this.match(EParser.DOING);
        this.state = 962;
        this.match(EParser.COLON);
        this.state = 963; 
        this.indent();
        this.state = 964; 
        localctx.stmts = this.statement_list();
        this.state = 965; 
        this.dedent();
        this.state = 966; 
        this.lfs();
        this.state = 968;
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        if(la_===1) {
            this.state = 967; 
            localctx.handlers = this.catch_statement_list();

        }
        this.state = 981;
        _la = this._input.LA(1);
        if(_la===EParser.OTHERWISE || _la===EParser.WHEN) {
            this.state = 973;
            switch(this._input.LA(1)) {
            case EParser.OTHERWISE:
                this.state = 970;
                this.match(EParser.OTHERWISE);
                break;
            case EParser.WHEN:
                this.state = 971;
                this.match(EParser.WHEN);
                this.state = 972;
                this.match(EParser.ANY);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 975;
            this.match(EParser.COLON);
            this.state = 976; 
            this.indent();
            this.state = 977; 
            localctx.anyStmts = this.statement_list();
            this.state = 978; 
            this.dedent();
            this.state = 979; 
            this.lfs();
        }

        this.state = 990;
        _la = this._input.LA(1);
        if(_la===EParser.ALWAYS) {
            this.state = 983;
            this.match(EParser.ALWAYS);
            this.state = 984;
            this.match(EParser.COLON);
            this.state = 985; 
            this.indent();
            this.state = 986; 
            localctx.finalStmts = this.statement_list();
            this.state = 987; 
            this.dedent();
            this.state = 988; 
            this.lfs();
        }

        this.state = 992; 
        this.lfs();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Catch_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_catch_statement;
    return this;
}

Catch_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Catch_statementContext.prototype.constructor = Catch_statementContext;


 
Catch_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CatchAtomicStatementContext(parser, ctx) {
	Catch_statementContext.call(this, parser);
    this.name = null; // Symbol_identifierContext;
    this.stmts = null; // Statement_listContext;
    Catch_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CatchAtomicStatementContext.prototype = Object.create(Catch_statementContext.prototype);
CatchAtomicStatementContext.prototype.constructor = CatchAtomicStatementContext;

CatchAtomicStatementContext.prototype.WHEN = function() {
    return this.getToken(EParser.WHEN, 0);
};

CatchAtomicStatementContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

CatchAtomicStatementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

CatchAtomicStatementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

CatchAtomicStatementContext.prototype.lfs = function() {
    return this.getTypedRuleContext(LfsContext,0);
};

CatchAtomicStatementContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};

CatchAtomicStatementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
CatchAtomicStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCatchAtomicStatement(this);
	}
};

CatchAtomicStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCatchAtomicStatement(this);
	}
};


function CatchCollectionStatementContext(parser, ctx) {
	Catch_statementContext.call(this, parser);
    this.exp = null; // Symbol_listContext;
    this.stmts = null; // Statement_listContext;
    Catch_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CatchCollectionStatementContext.prototype = Object.create(Catch_statementContext.prototype);
CatchCollectionStatementContext.prototype.constructor = CatchCollectionStatementContext;

CatchCollectionStatementContext.prototype.WHEN = function() {
    return this.getToken(EParser.WHEN, 0);
};

CatchCollectionStatementContext.prototype.IN = function() {
    return this.getToken(EParser.IN, 0);
};

CatchCollectionStatementContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

CatchCollectionStatementContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

CatchCollectionStatementContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

CatchCollectionStatementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

CatchCollectionStatementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

CatchCollectionStatementContext.prototype.lfs = function() {
    return this.getTypedRuleContext(LfsContext,0);
};

CatchCollectionStatementContext.prototype.symbol_list = function() {
    return this.getTypedRuleContext(Symbol_listContext,0);
};

CatchCollectionStatementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
CatchCollectionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCatchCollectionStatement(this);
	}
};

CatchCollectionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCatchCollectionStatement(this);
	}
};



EParser.prototype.catch_statement = function() {

    var localctx = new Catch_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, EParser.RULE_catch_statement);
    try {
        this.state = 1013;
        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
        switch(la_) {
        case 1:
            localctx = new CatchAtomicStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 994;
            this.match(EParser.WHEN);
            this.state = 995; 
            localctx.name = this.symbol_identifier();
            this.state = 996;
            this.match(EParser.COLON);
            this.state = 997; 
            this.indent();
            this.state = 998; 
            localctx.stmts = this.statement_list();
            this.state = 999; 
            this.dedent();
            this.state = 1000; 
            this.lfs();
            break;

        case 2:
            localctx = new CatchCollectionStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1002;
            this.match(EParser.WHEN);
            this.state = 1003;
            this.match(EParser.IN);
            this.state = 1004;
            this.match(EParser.LBRAK);
            this.state = 1005; 
            localctx.exp = this.symbol_list();
            this.state = 1006;
            this.match(EParser.RBRAK);
            this.state = 1007;
            this.match(EParser.COLON);
            this.state = 1008; 
            this.indent();
            this.state = 1009; 
            localctx.stmts = this.statement_list();
            this.state = 1010; 
            this.dedent();
            this.state = 1011; 
            this.lfs();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Break_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_break_statement;
    return this;
}

Break_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Break_statementContext.prototype.constructor = Break_statementContext;

Break_statementContext.prototype.BREAK = function() {
    return this.getToken(EParser.BREAK, 0);
};

Break_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterBreak_statement(this);
	}
};

Break_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitBreak_statement(this);
	}
};




EParser.prototype.break_statement = function() {

    var localctx = new Break_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, EParser.RULE_break_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1015;
        this.match(EParser.BREAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Return_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_return_statement;
    this.exp = null; // ExpressionContext
    return this;
}

Return_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_statementContext.prototype.constructor = Return_statementContext;

Return_statementContext.prototype.RETURN = function() {
    return this.getToken(EParser.RETURN, 0);
};

Return_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Return_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterReturn_statement(this);
	}
};

Return_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitReturn_statement(this);
	}
};




EParser.prototype.return_statement = function() {

    var localctx = new Return_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, EParser.RULE_return_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1017;
        this.match(EParser.RETURN);
        this.state = 1019;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << EParser.LPAR) | (1 << EParser.LBRAK) | (1 << EParser.LCURL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (EParser.MINUS - 33)) | (1 << (EParser.LT - 33)) | (1 << (EParser.METHOD_T - 33)) | (1 << (EParser.CODE - 33)) | (1 << (EParser.DOCUMENT - 33)) | (1 << (EParser.BLOB - 33)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (EParser.EXECUTE - 98)) | (1 << (EParser.FETCH - 98)) | (1 << (EParser.INVOKE - 98)) | (1 << (EParser.MUTABLE - 98)) | (1 << (EParser.NOT - 98)) | (1 << (EParser.NOTHING - 98)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (EParser.READ - 132)) | (1 << (EParser.SELF - 132)) | (1 << (EParser.SORTED - 132)) | (1 << (EParser.THIS - 132)) | (1 << (EParser.BOOLEAN_LITERAL - 132)) | (1 << (EParser.CHAR_LITERAL - 132)) | (1 << (EParser.MIN_INTEGER - 132)) | (1 << (EParser.MAX_INTEGER - 132)) | (1 << (EParser.SYMBOL_IDENTIFIER - 132)) | (1 << (EParser.TYPE_IDENTIFIER - 132)) | (1 << (EParser.VARIABLE_IDENTIFIER - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (EParser.TEXT_LITERAL - 165)) | (1 << (EParser.UUID_LITERAL - 165)) | (1 << (EParser.INTEGER_LITERAL - 165)) | (1 << (EParser.HEXA_LITERAL - 165)) | (1 << (EParser.DECIMAL_LITERAL - 165)) | (1 << (EParser.DATETIME_LITERAL - 165)) | (1 << (EParser.TIME_LITERAL - 165)) | (1 << (EParser.DATE_LITERAL - 165)) | (1 << (EParser.PERIOD_LITERAL - 165)))) !== 0)) {
            this.state = 1018; 
            localctx.exp = this.expression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function IntDivideExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntDivideExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IntDivideExpressionContext.prototype.constructor = IntDivideExpressionContext;

IntDivideExpressionContext.prototype.idivide = function() {
    return this.getTypedRuleContext(IdivideContext,0);
};

IntDivideExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
IntDivideExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIntDivideExpression(this);
	}
};

IntDivideExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIntDivideExpression(this);
	}
};


function TernaryExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.ifTrue = null; // ExpressionContext;
    this.test = null; // ExpressionContext;
    this.ifFalse = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TernaryExpressionContext.prototype = Object.create(ExpressionContext.prototype);
TernaryExpressionContext.prototype.constructor = TernaryExpressionContext;

TernaryExpressionContext.prototype.IF = function() {
    return this.getToken(EParser.IF, 0);
};

TernaryExpressionContext.prototype.ELSE = function() {
    return this.getToken(EParser.ELSE, 0);
};

TernaryExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
TernaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTernaryExpression(this);
	}
};

TernaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTernaryExpression(this);
	}
};


function FetchStoreExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Fetch_store_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FetchStoreExpressionContext.prototype = Object.create(ExpressionContext.prototype);
FetchStoreExpressionContext.prototype.constructor = FetchStoreExpressionContext;

FetchStoreExpressionContext.prototype.fetch_store_expression = function() {
    return this.getTypedRuleContext(Fetch_store_expressionContext,0);
};
FetchStoreExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterFetchStoreExpression(this);
	}
};

FetchStoreExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitFetchStoreExpression(this);
	}
};


function ContainsAllExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ContainsAllExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ContainsAllExpressionContext.prototype.constructor = ContainsAllExpressionContext;

ContainsAllExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(EParser.CONTAINS, 0);
};

ContainsAllExpressionContext.prototype.ALL = function() {
    return this.getToken(EParser.ALL, 0);
};

ContainsAllExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ContainsAllExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterContainsAllExpression(this);
	}
};

ContainsAllExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitContainsAllExpression(this);
	}
};


function NotEqualsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotEqualsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotEqualsExpressionContext.prototype.constructor = NotEqualsExpressionContext;

NotEqualsExpressionContext.prototype.LTGT = function() {
    return this.getToken(EParser.LTGT, 0);
};

NotEqualsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotEqualsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNotEqualsExpression(this);
	}
};

NotEqualsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNotEqualsExpression(this);
	}
};


function InExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InExpressionContext.prototype = Object.create(ExpressionContext.prototype);
InExpressionContext.prototype.constructor = InExpressionContext;

InExpressionContext.prototype.IN = function() {
    return this.getToken(EParser.IN, 0);
};

InExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
InExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterInExpression(this);
	}
};

InExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitInExpression(this);
	}
};


function DocumentExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Document_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocumentExpressionContext.prototype = Object.create(ExpressionContext.prototype);
DocumentExpressionContext.prototype.constructor = DocumentExpressionContext;

DocumentExpressionContext.prototype.document_expression = function() {
    return this.getTypedRuleContext(Document_expressionContext,0);
};
DocumentExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDocumentExpression(this);
	}
};

DocumentExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDocumentExpression(this);
	}
};


function NotExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotExpressionContext.prototype.constructor = NotExpressionContext;

NotExpressionContext.prototype.NOT = function() {
    return this.getToken(EParser.NOT, 0);
};

NotExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
NotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNotExpression(this);
	}
};

NotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNotExpression(this);
	}
};


function GreaterThanExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GreaterThanExpressionContext.prototype = Object.create(ExpressionContext.prototype);
GreaterThanExpressionContext.prototype.constructor = GreaterThanExpressionContext;

GreaterThanExpressionContext.prototype.GT = function() {
    return this.getToken(EParser.GT, 0);
};

GreaterThanExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
GreaterThanExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterGreaterThanExpression(this);
	}
};

GreaterThanExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitGreaterThanExpression(this);
	}
};


function InvocationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Invocation_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InvocationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
InvocationExpressionContext.prototype.constructor = InvocationExpressionContext;

InvocationExpressionContext.prototype.invocation_expression = function() {
    return this.getTypedRuleContext(Invocation_expressionContext,0);
};
InvocationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterInvocationExpression(this);
	}
};

InvocationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitInvocationExpression(this);
	}
};


function OrExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OrExpressionContext.prototype = Object.create(ExpressionContext.prototype);
OrExpressionContext.prototype.constructor = OrExpressionContext;

OrExpressionContext.prototype.OR = function() {
    return this.getToken(EParser.OR, 0);
};

OrExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
OrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOrExpression(this);
	}
};

OrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOrExpression(this);
	}
};


function CodeExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CodeExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CodeExpressionContext.prototype.constructor = CodeExpressionContext;

CodeExpressionContext.prototype.CODE = function() {
    return this.getToken(EParser.CODE, 0);
};

CodeExpressionContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

CodeExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
CodeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCodeExpression(this);
	}
};

CodeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCodeExpression(this);
	}
};


function AmbiguousExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Ambiguous_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AmbiguousExpressionContext.prototype = Object.create(ExpressionContext.prototype);
AmbiguousExpressionContext.prototype.constructor = AmbiguousExpressionContext;

AmbiguousExpressionContext.prototype.ambiguous_expression = function() {
    return this.getTypedRuleContext(Ambiguous_expressionContext,0);
};
AmbiguousExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAmbiguousExpression(this);
	}
};

AmbiguousExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAmbiguousExpression(this);
	}
};


function LessThanOrEqualExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LessThanOrEqualExpressionContext.prototype = Object.create(ExpressionContext.prototype);
LessThanOrEqualExpressionContext.prototype.constructor = LessThanOrEqualExpressionContext;

LessThanOrEqualExpressionContext.prototype.LTE = function() {
    return this.getToken(EParser.LTE, 0);
};

LessThanOrEqualExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
LessThanOrEqualExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLessThanOrEqualExpression(this);
	}
};

LessThanOrEqualExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLessThanOrEqualExpression(this);
	}
};


function ReadOneExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Read_one_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReadOneExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ReadOneExpressionContext.prototype.constructor = ReadOneExpressionContext;

ReadOneExpressionContext.prototype.read_one_expression = function() {
    return this.getTypedRuleContext(Read_one_expressionContext,0);
};
ReadOneExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterReadOneExpression(this);
	}
};

ReadOneExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitReadOneExpression(this);
	}
};


function AndExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AndExpressionContext.prototype = Object.create(ExpressionContext.prototype);
AndExpressionContext.prototype.constructor = AndExpressionContext;

AndExpressionContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

AndExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
AndExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAndExpression(this);
	}
};

AndExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAndExpression(this);
	}
};


function MethodCallExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Unresolved_expressionContext;
    this.args = null; // Argument_assignment_listContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodCallExpressionContext.prototype = Object.create(ExpressionContext.prototype);
MethodCallExpressionContext.prototype.constructor = MethodCallExpressionContext;

MethodCallExpressionContext.prototype.unresolved_expression = function() {
    return this.getTypedRuleContext(Unresolved_expressionContext,0);
};

MethodCallExpressionContext.prototype.argument_assignment_list = function() {
    return this.getTypedRuleContext(Argument_assignment_listContext,0);
};
MethodCallExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMethodCallExpression(this);
	}
};

MethodCallExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMethodCallExpression(this);
	}
};


function ClosureExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.name = null; // Method_identifierContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClosureExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ClosureExpressionContext.prototype.constructor = ClosureExpressionContext;

ClosureExpressionContext.prototype.METHOD_T = function() {
    return this.getToken(EParser.METHOD_T, 0);
};

ClosureExpressionContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

ClosureExpressionContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};
ClosureExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterClosureExpression(this);
	}
};

ClosureExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitClosureExpression(this);
	}
};


function SortedExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Sorted_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SortedExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SortedExpressionContext.prototype.constructor = SortedExpressionContext;

SortedExpressionContext.prototype.sorted_expression = function() {
    return this.getTypedRuleContext(Sorted_expressionContext,0);
};
SortedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSortedExpression(this);
	}
};

SortedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSortedExpression(this);
	}
};


function BlobExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Blob_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BlobExpressionContext.prototype = Object.create(ExpressionContext.prototype);
BlobExpressionContext.prototype.constructor = BlobExpressionContext;

BlobExpressionContext.prototype.blob_expression = function() {
    return this.getTypedRuleContext(Blob_expressionContext,0);
};
BlobExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterBlobExpression(this);
	}
};

BlobExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitBlobExpression(this);
	}
};


function NotContainsAnyExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotContainsAnyExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotContainsAnyExpressionContext.prototype.constructor = NotContainsAnyExpressionContext;

NotContainsAnyExpressionContext.prototype.NOT = function() {
    return this.getToken(EParser.NOT, 0);
};

NotContainsAnyExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(EParser.CONTAINS, 0);
};

NotContainsAnyExpressionContext.prototype.ANY = function() {
    return this.getToken(EParser.ANY, 0);
};

NotContainsAnyExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotContainsAnyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNotContainsAnyExpression(this);
	}
};

NotContainsAnyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNotContainsAnyExpression(this);
	}
};


function ContainsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ContainsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ContainsExpressionContext.prototype.constructor = ContainsExpressionContext;

ContainsExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(EParser.CONTAINS, 0);
};

ContainsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ContainsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterContainsExpression(this);
	}
};

ContainsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitContainsExpression(this);
	}
};


function FilteredListExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.src = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FilteredListExpressionContext.prototype = Object.create(ExpressionContext.prototype);
FilteredListExpressionContext.prototype.constructor = FilteredListExpressionContext;

FilteredListExpressionContext.prototype.filtered_list_suffix = function() {
    return this.getTypedRuleContext(Filtered_list_suffixContext,0);
};

FilteredListExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
FilteredListExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterFilteredListExpression(this);
	}
};

FilteredListExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitFilteredListExpression(this);
	}
};


function ConstructorExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Constructor_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstructorExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ConstructorExpressionContext.prototype.constructor = ConstructorExpressionContext;

ConstructorExpressionContext.prototype.constructor_expression = function() {
    return this.getTypedRuleContext(Constructor_expressionContext,0);
};
ConstructorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterConstructorExpression(this);
	}
};

ConstructorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitConstructorExpression(this);
	}
};


function NotContainsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotContainsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotContainsExpressionContext.prototype.constructor = NotContainsExpressionContext;

NotContainsExpressionContext.prototype.NOT = function() {
    return this.getToken(EParser.NOT, 0);
};

NotContainsExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(EParser.CONTAINS, 0);
};

NotContainsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotContainsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNotContainsExpression(this);
	}
};

NotContainsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNotContainsExpression(this);
	}
};


function MultiplyExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiplyExpressionContext.prototype = Object.create(ExpressionContext.prototype);
MultiplyExpressionContext.prototype.constructor = MultiplyExpressionContext;

MultiplyExpressionContext.prototype.multiply = function() {
    return this.getTypedRuleContext(MultiplyContext,0);
};

MultiplyExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
MultiplyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMultiplyExpression(this);
	}
};

MultiplyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMultiplyExpression(this);
	}
};


function RoughlyEqualsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RoughlyEqualsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
RoughlyEqualsExpressionContext.prototype.constructor = RoughlyEqualsExpressionContext;

RoughlyEqualsExpressionContext.prototype.TILDE = function() {
    return this.getToken(EParser.TILDE, 0);
};

RoughlyEqualsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
RoughlyEqualsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterRoughlyEqualsExpression(this);
	}
};

RoughlyEqualsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitRoughlyEqualsExpression(this);
	}
};


function ExecuteExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExecuteExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ExecuteExpressionContext.prototype.constructor = ExecuteExpressionContext;

ExecuteExpressionContext.prototype.EXECUTE = function() {
    return this.getToken(EParser.EXECUTE, 0);
};

ExecuteExpressionContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

ExecuteExpressionContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
ExecuteExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterExecuteExpression(this);
	}
};

ExecuteExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitExecuteExpression(this);
	}
};


function GreaterThanOrEqualExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GreaterThanOrEqualExpressionContext.prototype = Object.create(ExpressionContext.prototype);
GreaterThanOrEqualExpressionContext.prototype.constructor = GreaterThanOrEqualExpressionContext;

GreaterThanOrEqualExpressionContext.prototype.GTE = function() {
    return this.getToken(EParser.GTE, 0);
};

GreaterThanOrEqualExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
GreaterThanOrEqualExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterGreaterThanOrEqualExpression(this);
	}
};

GreaterThanOrEqualExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitGreaterThanOrEqualExpression(this);
	}
};


function NotInExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotInExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotInExpressionContext.prototype.constructor = NotInExpressionContext;

NotInExpressionContext.prototype.NOT = function() {
    return this.getToken(EParser.NOT, 0);
};

NotInExpressionContext.prototype.IN = function() {
    return this.getToken(EParser.IN, 0);
};

NotInExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotInExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNotInExpression(this);
	}
};

NotInExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNotInExpression(this);
	}
};


function IteratorExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    this.name = null; // Variable_identifierContext;
    this.source = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IteratorExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IteratorExpressionContext.prototype.constructor = IteratorExpressionContext;

IteratorExpressionContext.prototype.FOR = function() {
    return this.getToken(EParser.FOR, 0);
};

IteratorExpressionContext.prototype.EACH = function() {
    return this.getToken(EParser.EACH, 0);
};

IteratorExpressionContext.prototype.IN = function() {
    return this.getToken(EParser.IN, 0);
};

IteratorExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

IteratorExpressionContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
IteratorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIteratorExpression(this);
	}
};

IteratorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIteratorExpression(this);
	}
};


function UnresolvedExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Unresolved_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnresolvedExpressionContext.prototype = Object.create(ExpressionContext.prototype);
UnresolvedExpressionContext.prototype.constructor = UnresolvedExpressionContext;

UnresolvedExpressionContext.prototype.unresolved_expression = function() {
    return this.getTypedRuleContext(Unresolved_expressionContext,0);
};
UnresolvedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterUnresolvedExpression(this);
	}
};

UnresolvedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitUnresolvedExpression(this);
	}
};


function IsNotExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // Is_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsNotExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IsNotExpressionContext.prototype.constructor = IsNotExpressionContext;

IsNotExpressionContext.prototype.IS = function() {
    return this.getToken(EParser.IS, 0);
};

IsNotExpressionContext.prototype.NOT = function() {
    return this.getToken(EParser.NOT, 0);
};

IsNotExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IsNotExpressionContext.prototype.is_expression = function() {
    return this.getTypedRuleContext(Is_expressionContext,0);
};
IsNotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIsNotExpression(this);
	}
};

IsNotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIsNotExpression(this);
	}
};


function DivideExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DivideExpressionContext.prototype = Object.create(ExpressionContext.prototype);
DivideExpressionContext.prototype.constructor = DivideExpressionContext;

DivideExpressionContext.prototype.divide = function() {
    return this.getTypedRuleContext(DivideContext,0);
};

DivideExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
DivideExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDivideExpression(this);
	}
};

DivideExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDivideExpression(this);
	}
};


function IsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // Is_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IsExpressionContext.prototype.constructor = IsExpressionContext;

IsExpressionContext.prototype.IS = function() {
    return this.getToken(EParser.IS, 0);
};

IsExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IsExpressionContext.prototype.is_expression = function() {
    return this.getTypedRuleContext(Is_expressionContext,0);
};
IsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIsExpression(this);
	}
};

IsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIsExpression(this);
	}
};


function MinusExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MinusExpressionContext.prototype = Object.create(ExpressionContext.prototype);
MinusExpressionContext.prototype.constructor = MinusExpressionContext;

MinusExpressionContext.prototype.MINUS = function() {
    return this.getToken(EParser.MINUS, 0);
};

MinusExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
MinusExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMinusExpression(this);
	}
};

MinusExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMinusExpression(this);
	}
};


function AddExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.op = null; // Token;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AddExpressionContext.prototype = Object.create(ExpressionContext.prototype);
AddExpressionContext.prototype.constructor = AddExpressionContext;

AddExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AddExpressionContext.prototype.PLUS = function() {
    return this.getToken(EParser.PLUS, 0);
};

AddExpressionContext.prototype.MINUS = function() {
    return this.getToken(EParser.MINUS, 0);
};
AddExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAddExpression(this);
	}
};

AddExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAddExpression(this);
	}
};


function NotContainsAllExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotContainsAllExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotContainsAllExpressionContext.prototype.constructor = NotContainsAllExpressionContext;

NotContainsAllExpressionContext.prototype.NOT = function() {
    return this.getToken(EParser.NOT, 0);
};

NotContainsAllExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(EParser.CONTAINS, 0);
};

NotContainsAllExpressionContext.prototype.ALL = function() {
    return this.getToken(EParser.ALL, 0);
};

NotContainsAllExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotContainsAllExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNotContainsAllExpression(this);
	}
};

NotContainsAllExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNotContainsAllExpression(this);
	}
};


function InstanceExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Instance_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstanceExpressionContext.prototype = Object.create(ExpressionContext.prototype);
InstanceExpressionContext.prototype.constructor = InstanceExpressionContext;

InstanceExpressionContext.prototype.instance_expression = function() {
    return this.getTypedRuleContext(Instance_expressionContext,0);
};
InstanceExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterInstanceExpression(this);
	}
};

InstanceExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitInstanceExpression(this);
	}
};


function ReadAllExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Read_all_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReadAllExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ReadAllExpressionContext.prototype.constructor = ReadAllExpressionContext;

ReadAllExpressionContext.prototype.read_all_expression = function() {
    return this.getTypedRuleContext(Read_all_expressionContext,0);
};
ReadAllExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterReadAllExpression(this);
	}
};

ReadAllExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitReadAllExpression(this);
	}
};


function ContainsAnyExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ContainsAnyExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ContainsAnyExpressionContext.prototype.constructor = ContainsAnyExpressionContext;

ContainsAnyExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(EParser.CONTAINS, 0);
};

ContainsAnyExpressionContext.prototype.ANY = function() {
    return this.getToken(EParser.ANY, 0);
};

ContainsAnyExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ContainsAnyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterContainsAnyExpression(this);
	}
};

ContainsAnyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitContainsAnyExpression(this);
	}
};


function CastExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // Category_or_any_typeContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CastExpressionContext.prototype.constructor = CastExpressionContext;

CastExpressionContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

CastExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CastExpressionContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};
CastExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCastExpression(this);
	}
};

CastExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCastExpression(this);
	}
};


function ModuloExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ModuloExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ModuloExpressionContext.prototype.constructor = ModuloExpressionContext;

ModuloExpressionContext.prototype.modulo = function() {
    return this.getTypedRuleContext(ModuloContext,0);
};

ModuloExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ModuloExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterModuloExpression(this);
	}
};

ModuloExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitModuloExpression(this);
	}
};


function LessThanExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LessThanExpressionContext.prototype = Object.create(ExpressionContext.prototype);
LessThanExpressionContext.prototype.constructor = LessThanExpressionContext;

LessThanExpressionContext.prototype.LT = function() {
    return this.getToken(EParser.LT, 0);
};

LessThanExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
LessThanExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLessThanExpression(this);
	}
};

LessThanExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLessThanExpression(this);
	}
};


function EqualsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
EqualsExpressionContext.prototype.constructor = EqualsExpressionContext;

EqualsExpressionContext.prototype.EQ = function() {
    return this.getToken(EParser.EQ, 0);
};

EqualsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
EqualsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterEqualsExpression(this);
	}
};

EqualsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitEqualsExpression(this);
	}
};



EParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 86;
    this.enterRecursionRule(localctx, 86, EParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1049;
        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MinusExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1022;
            this.match(EParser.MINUS);
            this.state = 1023; 
            localctx.exp = this.expression(42);
            break;

        case 2:
            localctx = new NotExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1024;
            this.match(EParser.NOT);
            this.state = 1025; 
            localctx.exp = this.expression(41);
            break;

        case 3:
            localctx = new CodeExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1026;
            this.match(EParser.CODE);
            this.state = 1027;
            this.match(EParser.COLON);
            this.state = 1028; 
            localctx.exp = this.expression(14);
            break;

        case 4:
            localctx = new InstanceExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1029; 
            localctx.exp = this.instance_expression(0);
            break;

        case 5:
            localctx = new UnresolvedExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1030; 
            localctx.exp = this.unresolved_expression(0);
            break;

        case 6:
            localctx = new MethodCallExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1031; 
            localctx.exp = this.unresolved_expression(0);
            this.state = 1032; 
            localctx.args = this.argument_assignment_list();
            break;

        case 7:
            localctx = new ExecuteExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1034;
            this.match(EParser.EXECUTE);
            this.state = 1035;
            this.match(EParser.COLON);
            this.state = 1036; 
            localctx.name = this.variable_identifier();
            break;

        case 8:
            localctx = new ClosureExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1037;
            this.match(EParser.METHOD_T);
            this.state = 1038;
            this.match(EParser.COLON);
            this.state = 1039; 
            localctx.name = this.method_identifier();
            break;

        case 9:
            localctx = new BlobExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1040; 
            localctx.exp = this.blob_expression();
            break;

        case 10:
            localctx = new DocumentExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1041; 
            localctx.exp = this.document_expression();
            break;

        case 11:
            localctx = new ConstructorExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1042; 
            localctx.exp = this.constructor_expression();
            break;

        case 12:
            localctx = new FetchStoreExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1043; 
            localctx.exp = this.fetch_store_expression();
            break;

        case 13:
            localctx = new ReadAllExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1044; 
            localctx.exp = this.read_all_expression();
            break;

        case 14:
            localctx = new ReadOneExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1045; 
            localctx.exp = this.read_one_expression();
            break;

        case 15:
            localctx = new SortedExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1046; 
            localctx.exp = this.sorted_expression();
            break;

        case 16:
            localctx = new AmbiguousExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1047; 
            localctx.exp = this.ambiguous_expression();
            break;

        case 17:
            localctx = new InvocationExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1048; 
            localctx.exp = this.invocation_expression();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1156;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1154;
                var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new MultiplyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1051;
                    if (!( this.precpred(this._ctx, 40))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 40)");
                    }
                    this.state = 1052; 
                    this.multiply();
                    this.state = 1053; 
                    localctx.right = this.expression(41);
                    break;

                case 2:
                    localctx = new DivideExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1055;
                    if (!( this.precpred(this._ctx, 39))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 39)");
                    }
                    this.state = 1056; 
                    this.divide();
                    this.state = 1057; 
                    localctx.right = this.expression(40);
                    break;

                case 3:
                    localctx = new ModuloExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1059;
                    if (!( this.precpred(this._ctx, 38))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 38)");
                    }
                    this.state = 1060; 
                    this.modulo();
                    this.state = 1061; 
                    localctx.right = this.expression(39);
                    break;

                case 4:
                    localctx = new IntDivideExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1063;
                    if (!( this.precpred(this._ctx, 37))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 37)");
                    }
                    this.state = 1064; 
                    this.idivide();
                    this.state = 1065; 
                    localctx.right = this.expression(38);
                    break;

                case 5:
                    localctx = new AddExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1067;
                    if (!( this.precpred(this._ctx, 36))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 36)");
                    }
                    this.state = 1068;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===EParser.PLUS || _la===EParser.MINUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    this.consume();
                    this.state = 1069; 
                    localctx.right = this.expression(37);
                    break;

                case 6:
                    localctx = new LessThanExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1070;
                    if (!( this.precpred(this._ctx, 35))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 35)");
                    }
                    this.state = 1071;
                    this.match(EParser.LT);
                    this.state = 1072; 
                    localctx.right = this.expression(36);
                    break;

                case 7:
                    localctx = new LessThanOrEqualExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1073;
                    if (!( this.precpred(this._ctx, 34))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 34)");
                    }
                    this.state = 1074;
                    this.match(EParser.LTE);
                    this.state = 1075; 
                    localctx.right = this.expression(35);
                    break;

                case 8:
                    localctx = new GreaterThanExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1076;
                    if (!( this.precpred(this._ctx, 33))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 33)");
                    }
                    this.state = 1077;
                    this.match(EParser.GT);
                    this.state = 1078; 
                    localctx.right = this.expression(34);
                    break;

                case 9:
                    localctx = new GreaterThanOrEqualExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1079;
                    if (!( this.precpred(this._ctx, 32))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 32)");
                    }
                    this.state = 1080;
                    this.match(EParser.GTE);
                    this.state = 1081; 
                    localctx.right = this.expression(33);
                    break;

                case 10:
                    localctx = new EqualsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1082;
                    if (!( this.precpred(this._ctx, 29))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 29)");
                    }
                    this.state = 1083;
                    this.match(EParser.EQ);
                    this.state = 1084; 
                    localctx.right = this.expression(30);
                    break;

                case 11:
                    localctx = new NotEqualsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1085;
                    if (!( this.precpred(this._ctx, 28))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
                    }
                    this.state = 1086;
                    this.match(EParser.LTGT);
                    this.state = 1087; 
                    localctx.right = this.expression(29);
                    break;

                case 12:
                    localctx = new RoughlyEqualsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1088;
                    if (!( this.precpred(this._ctx, 27))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
                    }
                    this.state = 1089;
                    this.match(EParser.TILDE);
                    this.state = 1090; 
                    localctx.right = this.expression(28);
                    break;

                case 13:
                    localctx = new OrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1091;
                    if (!( this.precpred(this._ctx, 26))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
                    }
                    this.state = 1092;
                    this.match(EParser.OR);
                    this.state = 1093; 
                    localctx.right = this.expression(27);
                    break;

                case 14:
                    localctx = new AndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1094;
                    if (!( this.precpred(this._ctx, 25))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                    }
                    this.state = 1095;
                    this.match(EParser.AND);
                    this.state = 1096; 
                    localctx.right = this.expression(26);
                    break;

                case 15:
                    localctx = new TernaryExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.ifTrue = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1097;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 1098;
                    this.match(EParser.IF);
                    this.state = 1099; 
                    localctx.test = this.expression(0);
                    this.state = 1100;
                    this.match(EParser.ELSE);
                    this.state = 1101; 
                    localctx.ifFalse = this.expression(25);
                    break;

                case 16:
                    localctx = new InExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1103;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 1104;
                    this.match(EParser.IN);
                    this.state = 1105; 
                    localctx.right = this.expression(23);
                    break;

                case 17:
                    localctx = new ContainsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1106;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 1107;
                    this.match(EParser.CONTAINS);
                    this.state = 1108; 
                    localctx.right = this.expression(22);
                    break;

                case 18:
                    localctx = new ContainsAllExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1109;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 1110;
                    this.match(EParser.CONTAINS);
                    this.state = 1111;
                    this.match(EParser.ALL);
                    this.state = 1112; 
                    localctx.right = this.expression(21);
                    break;

                case 19:
                    localctx = new ContainsAnyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1113;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 1114;
                    this.match(EParser.CONTAINS);
                    this.state = 1115;
                    this.match(EParser.ANY);
                    this.state = 1116; 
                    localctx.right = this.expression(20);
                    break;

                case 20:
                    localctx = new NotInExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1117;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 1118;
                    this.match(EParser.NOT);
                    this.state = 1119;
                    this.match(EParser.IN);
                    this.state = 1120; 
                    localctx.right = this.expression(19);
                    break;

                case 21:
                    localctx = new NotContainsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1121;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 1122;
                    this.match(EParser.NOT);
                    this.state = 1123;
                    this.match(EParser.CONTAINS);
                    this.state = 1124; 
                    localctx.right = this.expression(18);
                    break;

                case 22:
                    localctx = new NotContainsAllExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1125;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 1126;
                    this.match(EParser.NOT);
                    this.state = 1127;
                    this.match(EParser.CONTAINS);
                    this.state = 1128;
                    this.match(EParser.ALL);
                    this.state = 1129; 
                    localctx.right = this.expression(17);
                    break;

                case 23:
                    localctx = new NotContainsAnyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1130;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 1131;
                    this.match(EParser.NOT);
                    this.state = 1132;
                    this.match(EParser.CONTAINS);
                    this.state = 1133;
                    this.match(EParser.ANY);
                    this.state = 1134; 
                    localctx.right = this.expression(16);
                    break;

                case 24:
                    localctx = new IteratorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.exp = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1135;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1136;
                    this.match(EParser.FOR);
                    this.state = 1137;
                    this.match(EParser.EACH);
                    this.state = 1138; 
                    localctx.name = this.variable_identifier();
                    this.state = 1139;
                    this.match(EParser.IN);
                    this.state = 1140; 
                    localctx.source = this.expression(2);
                    break;

                case 25:
                    localctx = new IsNotExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1142;
                    if (!( this.precpred(this._ctx, 31))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 31)");
                    }
                    this.state = 1143;
                    this.match(EParser.IS);
                    this.state = 1144;
                    this.match(EParser.NOT);
                    this.state = 1145; 
                    localctx.right = this.is_expression();
                    break;

                case 26:
                    localctx = new IsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1146;
                    if (!( this.precpred(this._ctx, 30))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 30)");
                    }
                    this.state = 1147;
                    this.match(EParser.IS);
                    this.state = 1148; 
                    localctx.right = this.is_expression();
                    break;

                case 27:
                    localctx = new CastExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1149;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 1150;
                    this.match(EParser.AS);
                    this.state = 1151; 
                    localctx.right = this.category_or_any_type();
                    break;

                case 28:
                    localctx = new FilteredListExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.src = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1152;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 1153; 
                    this.filtered_list_suffix();
                    break;

                } 
            }
            this.state = 1158;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Unresolved_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_unresolved_expression;
    return this;
}

Unresolved_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unresolved_expressionContext.prototype.constructor = Unresolved_expressionContext;


 
Unresolved_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function UnresolvedSelectorContext(parser, ctx) {
	Unresolved_expressionContext.call(this, parser);
    this.parent = null; // Unresolved_expressionContext;
    this.selector = null; // Unresolved_selectorContext;
    Unresolved_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnresolvedSelectorContext.prototype = Object.create(Unresolved_expressionContext.prototype);
UnresolvedSelectorContext.prototype.constructor = UnresolvedSelectorContext;

UnresolvedSelectorContext.prototype.unresolved_expression = function() {
    return this.getTypedRuleContext(Unresolved_expressionContext,0);
};

UnresolvedSelectorContext.prototype.unresolved_selector = function() {
    return this.getTypedRuleContext(Unresolved_selectorContext,0);
};
UnresolvedSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterUnresolvedSelector(this);
	}
};

UnresolvedSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitUnresolvedSelector(this);
	}
};


function UnresolvedIdentifierContext(parser, ctx) {
	Unresolved_expressionContext.call(this, parser);
    this.name = null; // IdentifierContext;
    Unresolved_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnresolvedIdentifierContext.prototype = Object.create(Unresolved_expressionContext.prototype);
UnresolvedIdentifierContext.prototype.constructor = UnresolvedIdentifierContext;

UnresolvedIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
UnresolvedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterUnresolvedIdentifier(this);
	}
};

UnresolvedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitUnresolvedIdentifier(this);
	}
};



EParser.prototype.unresolved_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Unresolved_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 88;
    this.enterRecursionRule(localctx, 88, EParser.RULE_unresolved_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new UnresolvedIdentifierContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1160; 
        localctx.name = this.identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1166;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,56,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new UnresolvedSelectorContext(this, new Unresolved_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_unresolved_expression);
                this.state = 1162;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1163; 
                localctx.selector = this.unresolved_selector(); 
            }
            this.state = 1168;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,56,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Unresolved_selectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_unresolved_selector;
    this.name = null; // IdentifierContext
    return this;
}

Unresolved_selectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unresolved_selectorContext.prototype.constructor = Unresolved_selectorContext;

Unresolved_selectorContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

Unresolved_selectorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Unresolved_selectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterUnresolved_selector(this);
	}
};

Unresolved_selectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitUnresolved_selector(this);
	}
};




EParser.prototype.unresolved_selector = function() {

    var localctx = new Unresolved_selectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, EParser.RULE_unresolved_selector);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1169;
        if (!( this.wasNot(EParser.WS))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
        }
        this.state = 1170;
        this.match(EParser.DOT);
        this.state = 1171; 
        localctx.name = this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Invocation_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_invocation_expression;
    this.name = null; // Variable_identifierContext
    return this;
}

Invocation_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Invocation_expressionContext.prototype.constructor = Invocation_expressionContext;

Invocation_expressionContext.prototype.INVOKE = function() {
    return this.getToken(EParser.INVOKE, 0);
};

Invocation_expressionContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Invocation_expressionContext.prototype.invocation_trailer = function() {
    return this.getTypedRuleContext(Invocation_trailerContext,0);
};

Invocation_expressionContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Invocation_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterInvocation_expression(this);
	}
};

Invocation_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitInvocation_expression(this);
	}
};




EParser.prototype.invocation_expression = function() {

    var localctx = new Invocation_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, EParser.RULE_invocation_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1173;
        this.match(EParser.INVOKE);
        this.state = 1174;
        this.match(EParser.COLON);
        this.state = 1175; 
        localctx.name = this.variable_identifier();
        this.state = 1176; 
        this.invocation_trailer();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Invocation_trailerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_invocation_trailer;
    return this;
}

Invocation_trailerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Invocation_trailerContext.prototype.constructor = Invocation_trailerContext;


Invocation_trailerContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterInvocation_trailer(this);
	}
};

Invocation_trailerContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitInvocation_trailer(this);
	}
};




EParser.prototype.invocation_trailer = function() {

    var localctx = new Invocation_trailerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, EParser.RULE_invocation_trailer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1178;
        if (!( this.willBe(EParser.LF))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.willBe(EParser.LF)");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Instance_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_instance_expression;
    return this;
}

Instance_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Instance_expressionContext.prototype.constructor = Instance_expressionContext;


 
Instance_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function SelectorExpressionContext(parser, ctx) {
	Instance_expressionContext.call(this, parser);
    this.parent = null; // Instance_expressionContext;
    this.selector = null; // Instance_selectorContext;
    Instance_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectorExpressionContext.prototype = Object.create(Instance_expressionContext.prototype);
SelectorExpressionContext.prototype.constructor = SelectorExpressionContext;

SelectorExpressionContext.prototype.instance_expression = function() {
    return this.getTypedRuleContext(Instance_expressionContext,0);
};

SelectorExpressionContext.prototype.instance_selector = function() {
    return this.getTypedRuleContext(Instance_selectorContext,0);
};
SelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSelectorExpression(this);
	}
};

SelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSelectorExpression(this);
	}
};


function SelectableExpressionContext(parser, ctx) {
	Instance_expressionContext.call(this, parser);
    this.parent = null; // Selectable_expressionContext;
    Instance_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectableExpressionContext.prototype = Object.create(Instance_expressionContext.prototype);
SelectableExpressionContext.prototype.constructor = SelectableExpressionContext;

SelectableExpressionContext.prototype.selectable_expression = function() {
    return this.getTypedRuleContext(Selectable_expressionContext,0);
};
SelectableExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSelectableExpression(this);
	}
};

SelectableExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSelectableExpression(this);
	}
};



EParser.prototype.instance_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Instance_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 96;
    this.enterRecursionRule(localctx, 96, EParser.RULE_instance_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new SelectableExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1181; 
        localctx.parent = this.selectable_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1187;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,57,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new SelectorExpressionContext(this, new Instance_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_instance_expression);
                this.state = 1183;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1184; 
                localctx.selector = this.instance_selector(); 
            }
            this.state = 1189;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,57,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Instance_selectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_instance_selector;
    return this;
}

Instance_selectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Instance_selectorContext.prototype.constructor = Instance_selectorContext;


 
Instance_selectorContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SliceSelectorContext(parser, ctx) {
	Instance_selectorContext.call(this, parser);
    this.xslice = null; // Slice_argumentsContext;
    Instance_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceSelectorContext.prototype = Object.create(Instance_selectorContext.prototype);
SliceSelectorContext.prototype.constructor = SliceSelectorContext;

SliceSelectorContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

SliceSelectorContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

SliceSelectorContext.prototype.slice_arguments = function() {
    return this.getTypedRuleContext(Slice_argumentsContext,0);
};
SliceSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSliceSelector(this);
	}
};

SliceSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSliceSelector(this);
	}
};


function MemberSelectorContext(parser, ctx) {
	Instance_selectorContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    Instance_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberSelectorContext.prototype = Object.create(Instance_selectorContext.prototype);
MemberSelectorContext.prototype.constructor = MemberSelectorContext;

MemberSelectorContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

MemberSelectorContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
MemberSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMemberSelector(this);
	}
};

MemberSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMemberSelector(this);
	}
};


function ItemSelectorContext(parser, ctx) {
	Instance_selectorContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Instance_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ItemSelectorContext.prototype = Object.create(Instance_selectorContext.prototype);
ItemSelectorContext.prototype.constructor = ItemSelectorContext;

ItemSelectorContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

ItemSelectorContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

ItemSelectorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ItemSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterItemSelector(this);
	}
};

ItemSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitItemSelector(this);
	}
};



EParser.prototype.instance_selector = function() {

    var localctx = new Instance_selectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, EParser.RULE_instance_selector);
    try {
        this.state = 1203;
        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MemberSelectorContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1190;
            if (!( this.wasNot(EParser.WS))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
            }
            this.state = 1191;
            this.match(EParser.DOT);
            this.state = 1192; 
            localctx.name = this.variable_identifier();
            break;

        case 2:
            localctx = new SliceSelectorContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1193;
            if (!( this.wasNot(EParser.WS))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
            }
            this.state = 1194;
            this.match(EParser.LBRAK);
            this.state = 1195; 
            localctx.xslice = this.slice_arguments();
            this.state = 1196;
            this.match(EParser.RBRAK);
            break;

        case 3:
            localctx = new ItemSelectorContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1198;
            if (!( this.wasNot(EParser.WS))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
            }
            this.state = 1199;
            this.match(EParser.LBRAK);
            this.state = 1200; 
            localctx.exp = this.expression(0);
            this.state = 1201;
            this.match(EParser.RBRAK);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Document_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_document_expression;
    return this;
}

Document_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Document_expressionContext.prototype.constructor = Document_expressionContext;

Document_expressionContext.prototype.DOCUMENT = function() {
    return this.getToken(EParser.DOCUMENT, 0);
};

Document_expressionContext.prototype.FROM = function() {
    return this.getToken(EParser.FROM, 0);
};

Document_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Document_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDocument_expression(this);
	}
};

Document_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDocument_expression(this);
	}
};




EParser.prototype.document_expression = function() {

    var localctx = new Document_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, EParser.RULE_document_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1205;
        this.match(EParser.DOCUMENT);
        this.state = 1208;
        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
        if(la_===1) {
            this.state = 1206;
            this.match(EParser.FROM);
            this.state = 1207; 
            this.expression(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Blob_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_blob_expression;
    return this;
}

Blob_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Blob_expressionContext.prototype.constructor = Blob_expressionContext;

Blob_expressionContext.prototype.BLOB = function() {
    return this.getToken(EParser.BLOB, 0);
};

Blob_expressionContext.prototype.FROM = function() {
    return this.getToken(EParser.FROM, 0);
};

Blob_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Blob_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterBlob_expression(this);
	}
};

Blob_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitBlob_expression(this);
	}
};




EParser.prototype.blob_expression = function() {

    var localctx = new Blob_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, EParser.RULE_blob_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1210;
        this.match(EParser.BLOB);
        this.state = 1211;
        this.match(EParser.FROM);
        this.state = 1212; 
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constructor_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_constructor_expression;
    return this;
}

Constructor_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constructor_expressionContext.prototype.constructor = Constructor_expressionContext;


 
Constructor_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ConstructorFromContext(parser, ctx) {
	Constructor_expressionContext.call(this, parser);
    this.typ = null; // Mutable_category_typeContext;
    this.firstArg = null; // ExpressionContext;
    this.args = null; // With_argument_assignment_listContext;
    this.arg = null; // Argument_assignmentContext;
    Constructor_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstructorFromContext.prototype = Object.create(Constructor_expressionContext.prototype);
ConstructorFromContext.prototype.constructor = ConstructorFromContext;

ConstructorFromContext.prototype.FROM = function() {
    return this.getToken(EParser.FROM, 0);
};

ConstructorFromContext.prototype.mutable_category_type = function() {
    return this.getTypedRuleContext(Mutable_category_typeContext,0);
};

ConstructorFromContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConstructorFromContext.prototype.with_argument_assignment_list = function() {
    return this.getTypedRuleContext(With_argument_assignment_listContext,0);
};

ConstructorFromContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

ConstructorFromContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

ConstructorFromContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};
ConstructorFromContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterConstructorFrom(this);
	}
};

ConstructorFromContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitConstructorFrom(this);
	}
};


function ConstructorNoFromContext(parser, ctx) {
	Constructor_expressionContext.call(this, parser);
    this.typ = null; // Mutable_category_typeContext;
    this.args = null; // With_argument_assignment_listContext;
    this.arg = null; // Argument_assignmentContext;
    Constructor_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstructorNoFromContext.prototype = Object.create(Constructor_expressionContext.prototype);
ConstructorNoFromContext.prototype.constructor = ConstructorNoFromContext;

ConstructorNoFromContext.prototype.mutable_category_type = function() {
    return this.getTypedRuleContext(Mutable_category_typeContext,0);
};

ConstructorNoFromContext.prototype.with_argument_assignment_list = function() {
    return this.getTypedRuleContext(With_argument_assignment_listContext,0);
};

ConstructorNoFromContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

ConstructorNoFromContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};
ConstructorNoFromContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterConstructorNoFrom(this);
	}
};

ConstructorNoFromContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitConstructorNoFrom(this);
	}
};



EParser.prototype.constructor_expression = function() {

    var localctx = new Constructor_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, EParser.RULE_constructor_expression);
    var _la = 0; // Token type
    try {
        this.state = 1235;
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ConstructorFromContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1214; 
            localctx.typ = this.mutable_category_type();
            this.state = 1215;
            this.match(EParser.FROM);
            this.state = 1216; 
            localctx.firstArg = this.expression(0);
            this.state = 1225;
            var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
            if(la_===1) {
                this.state = 1218;
                _la = this._input.LA(1);
                if(_la===EParser.COMMA) {
                    this.state = 1217;
                    this.match(EParser.COMMA);
                }

                this.state = 1220; 
                localctx.args = this.with_argument_assignment_list(0);
                this.state = 1223;
                var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
                if(la_===1) {
                    this.state = 1221;
                    this.match(EParser.AND);
                    this.state = 1222; 
                    localctx.arg = this.argument_assignment();

                }

            }
            break;

        case 2:
            localctx = new ConstructorNoFromContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1227; 
            localctx.typ = this.mutable_category_type();
            this.state = 1233;
            var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
            if(la_===1) {
                this.state = 1228; 
                localctx.args = this.with_argument_assignment_list(0);
                this.state = 1231;
                var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
                if(la_===1) {
                    this.state = 1229;
                    this.match(EParser.AND);
                    this.state = 1230; 
                    localctx.arg = this.argument_assignment();

                }

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Write_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_write_statement;
    this.what = null; // ExpressionContext
    this.target = null; // ExpressionContext
    return this;
}

Write_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Write_statementContext.prototype.constructor = Write_statementContext;

Write_statementContext.prototype.WRITE = function() {
    return this.getToken(EParser.WRITE, 0);
};

Write_statementContext.prototype.TO = function() {
    return this.getToken(EParser.TO, 0);
};

Write_statementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Write_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterWrite_statement(this);
	}
};

Write_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitWrite_statement(this);
	}
};




EParser.prototype.write_statement = function() {

    var localctx = new Write_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, EParser.RULE_write_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1237;
        this.match(EParser.WRITE);
        this.state = 1238; 
        localctx.what = this.expression(0);
        this.state = 1239;
        this.match(EParser.TO);
        this.state = 1240; 
        localctx.target = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ambiguous_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_ambiguous_expression;
    this.method = null; // Unresolved_expressionContext
    this.exp = null; // ExpressionContext
    return this;
}

Ambiguous_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ambiguous_expressionContext.prototype.constructor = Ambiguous_expressionContext;

Ambiguous_expressionContext.prototype.MINUS = function() {
    return this.getToken(EParser.MINUS, 0);
};

Ambiguous_expressionContext.prototype.unresolved_expression = function() {
    return this.getTypedRuleContext(Unresolved_expressionContext,0);
};

Ambiguous_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Ambiguous_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAmbiguous_expression(this);
	}
};

Ambiguous_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAmbiguous_expression(this);
	}
};




EParser.prototype.ambiguous_expression = function() {

    var localctx = new Ambiguous_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, EParser.RULE_ambiguous_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1242; 
        localctx.method = this.unresolved_expression(0);
        this.state = 1243;
        this.match(EParser.MINUS);
        this.state = 1244; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Filtered_list_suffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_filtered_list_suffix;
    this.name = null; // Variable_identifierContext
    this.predicate = null; // ExpressionContext
    return this;
}

Filtered_list_suffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Filtered_list_suffixContext.prototype.constructor = Filtered_list_suffixContext;

Filtered_list_suffixContext.prototype.FILTERED = function() {
    return this.getToken(EParser.FILTERED, 0);
};

Filtered_list_suffixContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

Filtered_list_suffixContext.prototype.WHERE = function() {
    return this.getToken(EParser.WHERE, 0);
};

Filtered_list_suffixContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Filtered_list_suffixContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Filtered_list_suffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterFiltered_list_suffix(this);
	}
};

Filtered_list_suffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitFiltered_list_suffix(this);
	}
};




EParser.prototype.filtered_list_suffix = function() {

    var localctx = new Filtered_list_suffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, EParser.RULE_filtered_list_suffix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1246;
        this.match(EParser.FILTERED);
        this.state = 1247;
        this.match(EParser.WITH);
        this.state = 1248; 
        localctx.name = this.variable_identifier();
        this.state = 1249;
        this.match(EParser.WHERE);
        this.state = 1250; 
        localctx.predicate = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fetch_store_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_fetch_store_expression;
    return this;
}

Fetch_store_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fetch_store_expressionContext.prototype.constructor = Fetch_store_expressionContext;


 
Fetch_store_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FetchOneContext(parser, ctx) {
	Fetch_store_expressionContext.call(this, parser);
    this.typ = null; // Mutable_category_typeContext;
    this.predicate = null; // ExpressionContext;
    Fetch_store_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FetchOneContext.prototype = Object.create(Fetch_store_expressionContext.prototype);
FetchOneContext.prototype.constructor = FetchOneContext;

FetchOneContext.prototype.FETCH = function() {
    return this.getToken(EParser.FETCH, 0);
};

FetchOneContext.prototype.ONE = function() {
    return this.getToken(EParser.ONE, 0);
};

FetchOneContext.prototype.WHERE = function() {
    return this.getToken(EParser.WHERE, 0);
};

FetchOneContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FetchOneContext.prototype.mutable_category_type = function() {
    return this.getTypedRuleContext(Mutable_category_typeContext,0);
};
FetchOneContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterFetchOne(this);
	}
};

FetchOneContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitFetchOne(this);
	}
};


function FetchManyContext(parser, ctx) {
	Fetch_store_expressionContext.call(this, parser);
    this.typ = null; // Mutable_category_typeContext;
    this.xstart = null; // ExpressionContext;
    this.xstop = null; // ExpressionContext;
    this.predicate = null; // ExpressionContext;
    this.orderby = null; // Order_by_listContext;
    Fetch_store_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FetchManyContext.prototype = Object.create(Fetch_store_expressionContext.prototype);
FetchManyContext.prototype.constructor = FetchManyContext;

FetchManyContext.prototype.FETCH = function() {
    return this.getToken(EParser.FETCH, 0);
};

FetchManyContext.prototype.WHERE = function() {
    return this.getToken(EParser.WHERE, 0);
};

FetchManyContext.prototype.ORDER = function() {
    return this.getToken(EParser.ORDER, 0);
};

FetchManyContext.prototype.BY = function() {
    return this.getToken(EParser.BY, 0);
};

FetchManyContext.prototype.ALL = function() {
    return this.getToken(EParser.ALL, 0);
};

FetchManyContext.prototype.TO = function() {
    return this.getToken(EParser.TO, 0);
};

FetchManyContext.prototype.ROWS = function() {
    return this.getToken(EParser.ROWS, 0);
};

FetchManyContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

FetchManyContext.prototype.order_by_list = function() {
    return this.getTypedRuleContext(Order_by_listContext,0);
};

FetchManyContext.prototype.mutable_category_type = function() {
    return this.getTypedRuleContext(Mutable_category_typeContext,0);
};
FetchManyContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterFetchMany(this);
	}
};

FetchManyContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitFetchMany(this);
	}
};



EParser.prototype.fetch_store_expression = function() {

    var localctx = new Fetch_store_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, EParser.RULE_fetch_store_expression);
    var _la = 0; // Token type
    try {
        this.state = 1288;
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            localctx = new FetchOneContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1252;
            this.match(EParser.FETCH);
            this.state = 1253;
            this.match(EParser.ONE);

            this.state = 1255;
            _la = this._input.LA(1);
            if(_la===EParser.MUTABLE || _la===EParser.TYPE_IDENTIFIER) {
                this.state = 1254; 
                localctx.typ = this.mutable_category_type();
            }

            this.state = 1257;
            this.match(EParser.WHERE);
            this.state = 1258; 
            localctx.predicate = this.expression(0);
            break;

        case 2:
            localctx = new FetchManyContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1259;
            this.match(EParser.FETCH);
            this.state = 1277;
            switch(this._input.LA(1)) {
            case EParser.ALL:
                this.state = 1260;
                this.match(EParser.ALL);
                this.state = 1262;
                var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
                if(la_===1) {
                    this.state = 1261; 
                    localctx.typ = this.mutable_category_type();

                }
                break;
            case EParser.MUTABLE:
            case EParser.TYPE_IDENTIFIER:
                this.state = 1264; 
                localctx.typ = this.mutable_category_type();
                this.state = 1266;
                _la = this._input.LA(1);
                if(_la===EParser.ROWS) {
                    this.state = 1265;
                    this.match(EParser.ROWS);
                }

                this.state = 1268; 
                localctx.xstart = this.expression(0);
                this.state = 1269;
                this.match(EParser.TO);
                this.state = 1270; 
                localctx.xstop = this.expression(0);
                break;
            case EParser.ROWS:
                this.state = 1272;
                this.match(EParser.ROWS);
                this.state = 1273; 
                localctx.xstart = this.expression(0);
                this.state = 1274;
                this.match(EParser.TO);
                this.state = 1275; 
                localctx.xstop = this.expression(0);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1281;
            var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
            if(la_===1) {
                this.state = 1279;
                this.match(EParser.WHERE);
                this.state = 1280; 
                localctx.predicate = this.expression(0);

            }
            this.state = 1286;
            var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
            if(la_===1) {
                this.state = 1283;
                this.match(EParser.ORDER);
                this.state = 1284;
                this.match(EParser.BY);
                this.state = 1285; 
                localctx.orderby = this.order_by_list();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sorted_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_sorted_expression;
    this.source = null; // Instance_expressionContext
    this.key = null; // Instance_expressionContext
    return this;
}

Sorted_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sorted_expressionContext.prototype.constructor = Sorted_expressionContext;

Sorted_expressionContext.prototype.SORTED = function() {
    return this.getToken(EParser.SORTED, 0);
};

Sorted_expressionContext.prototype.instance_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Instance_expressionContext);
    } else {
        return this.getTypedRuleContext(Instance_expressionContext,i);
    }
};

Sorted_expressionContext.prototype.DESC = function() {
    return this.getToken(EParser.DESC, 0);
};

Sorted_expressionContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

Sorted_expressionContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Sorted_expressionContext.prototype.key_token = function() {
    return this.getTypedRuleContext(Key_tokenContext,0);
};

Sorted_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSorted_expression(this);
	}
};

Sorted_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSorted_expression(this);
	}
};




EParser.prototype.sorted_expression = function() {

    var localctx = new Sorted_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, EParser.RULE_sorted_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1290;
        this.match(EParser.SORTED);
        this.state = 1292;
        _la = this._input.LA(1);
        if(_la===EParser.DESC) {
            this.state = 1291;
            this.match(EParser.DESC);
        }

        this.state = 1294; 
        localctx.source = this.instance_expression(0);
        this.state = 1300;
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        if(la_===1) {
            this.state = 1295;
            this.match(EParser.WITH);
            this.state = 1296; 
            localctx.key = this.instance_expression(0);
            this.state = 1297;
            this.match(EParser.AS);
            this.state = 1298; 
            this.key_token();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Argument_assignment_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_argument_assignment_list;
    return this;
}

Argument_assignment_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_assignment_listContext.prototype.constructor = Argument_assignment_listContext;


 
Argument_assignment_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ArgumentAssignmentListExpressionContext(parser, ctx) {
	Argument_assignment_listContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    this.items = null; // With_argument_assignment_listContext;
    this.item = null; // Argument_assignmentContext;
    Argument_assignment_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentAssignmentListExpressionContext.prototype = Object.create(Argument_assignment_listContext.prototype);
ArgumentAssignmentListExpressionContext.prototype.constructor = ArgumentAssignmentListExpressionContext;

ArgumentAssignmentListExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ArgumentAssignmentListExpressionContext.prototype.with_argument_assignment_list = function() {
    return this.getTypedRuleContext(With_argument_assignment_listContext,0);
};

ArgumentAssignmentListExpressionContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

ArgumentAssignmentListExpressionContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};
ArgumentAssignmentListExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterArgumentAssignmentListExpression(this);
	}
};

ArgumentAssignmentListExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitArgumentAssignmentListExpression(this);
	}
};


function ArgumentAssignmentListNoExpressionContext(parser, ctx) {
	Argument_assignment_listContext.call(this, parser);
    this.items = null; // With_argument_assignment_listContext;
    this.item = null; // Argument_assignmentContext;
    Argument_assignment_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentAssignmentListNoExpressionContext.prototype = Object.create(Argument_assignment_listContext.prototype);
ArgumentAssignmentListNoExpressionContext.prototype.constructor = ArgumentAssignmentListNoExpressionContext;

ArgumentAssignmentListNoExpressionContext.prototype.with_argument_assignment_list = function() {
    return this.getTypedRuleContext(With_argument_assignment_listContext,0);
};

ArgumentAssignmentListNoExpressionContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

ArgumentAssignmentListNoExpressionContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};
ArgumentAssignmentListNoExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterArgumentAssignmentListNoExpression(this);
	}
};

ArgumentAssignmentListNoExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitArgumentAssignmentListNoExpression(this);
	}
};



EParser.prototype.argument_assignment_list = function() {

    var localctx = new Argument_assignment_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, EParser.RULE_argument_assignment_list);
    try {
        this.state = 1316;
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ArgumentAssignmentListExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1302;
            if (!( this.was(EParser.WS))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.was(EParser.WS)");
            }
            this.state = 1303; 
            localctx.exp = this.expression(0);
            this.state = 1309;
            var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
            if(la_===1) {
                this.state = 1304; 
                localctx.items = this.with_argument_assignment_list(0);
                this.state = 1307;
                var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
                if(la_===1) {
                    this.state = 1305;
                    this.match(EParser.AND);
                    this.state = 1306; 
                    localctx.item = this.argument_assignment();

                }

            }
            break;

        case 2:
            localctx = new ArgumentAssignmentListNoExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1311; 
            localctx.items = this.with_argument_assignment_list(0);
            this.state = 1314;
            var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
            if(la_===1) {
                this.state = 1312;
                this.match(EParser.AND);
                this.state = 1313; 
                localctx.item = this.argument_assignment();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_argument_assignment_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_with_argument_assignment_list;
    return this;
}

With_argument_assignment_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_argument_assignment_listContext.prototype.constructor = With_argument_assignment_listContext;


 
With_argument_assignment_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ArgumentAssignmentListContext(parser, ctx) {
	With_argument_assignment_listContext.call(this, parser);
    this.item = null; // Argument_assignmentContext;
    With_argument_assignment_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentAssignmentListContext.prototype = Object.create(With_argument_assignment_listContext.prototype);
ArgumentAssignmentListContext.prototype.constructor = ArgumentAssignmentListContext;

ArgumentAssignmentListContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

ArgumentAssignmentListContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};
ArgumentAssignmentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterArgumentAssignmentList(this);
	}
};

ArgumentAssignmentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitArgumentAssignmentList(this);
	}
};


function ArgumentAssignmentListItemContext(parser, ctx) {
	With_argument_assignment_listContext.call(this, parser);
    this.items = null; // With_argument_assignment_listContext;
    this.item = null; // Argument_assignmentContext;
    With_argument_assignment_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentAssignmentListItemContext.prototype = Object.create(With_argument_assignment_listContext.prototype);
ArgumentAssignmentListItemContext.prototype.constructor = ArgumentAssignmentListItemContext;

ArgumentAssignmentListItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

ArgumentAssignmentListItemContext.prototype.with_argument_assignment_list = function() {
    return this.getTypedRuleContext(With_argument_assignment_listContext,0);
};

ArgumentAssignmentListItemContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};
ArgumentAssignmentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterArgumentAssignmentListItem(this);
	}
};

ArgumentAssignmentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitArgumentAssignmentListItem(this);
	}
};



EParser.prototype.with_argument_assignment_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new With_argument_assignment_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 118;
    this.enterRecursionRule(localctx, 118, EParser.RULE_with_argument_assignment_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new ArgumentAssignmentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1319;
        this.match(EParser.WITH);
        this.state = 1320; 
        localctx.item = this.argument_assignment();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1327;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,79,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ArgumentAssignmentListItemContext(this, new With_argument_assignment_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_with_argument_assignment_list);
                this.state = 1322;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1323;
                this.match(EParser.COMMA);
                this.state = 1324; 
                localctx.item = this.argument_assignment(); 
            }
            this.state = 1329;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,79,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Argument_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_argument_assignment;
    this.exp = null; // ExpressionContext
    this.name = null; // Variable_identifierContext
    return this;
}

Argument_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_assignmentContext.prototype.constructor = Argument_assignmentContext;

Argument_assignmentContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Argument_assignmentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Argument_assignmentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Argument_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterArgument_assignment(this);
	}
};

Argument_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitArgument_assignment(this);
	}
};




EParser.prototype.argument_assignment = function() {

    var localctx = new Argument_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, EParser.RULE_argument_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1330; 
        localctx.exp = this.expression(0);
        this.state = 1331;
        this.match(EParser.AS);
        this.state = 1332; 
        localctx.name = this.variable_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assign_instance_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_assign_instance_statement;
    this.inst = null; // Assignable_instanceContext
    this.exp = null; // ExpressionContext
    return this;
}

Assign_instance_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assign_instance_statementContext.prototype.constructor = Assign_instance_statementContext;

Assign_instance_statementContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Assign_instance_statementContext.prototype.assignable_instance = function() {
    return this.getTypedRuleContext(Assignable_instanceContext,0);
};

Assign_instance_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Assign_instance_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAssign_instance_statement(this);
	}
};

Assign_instance_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAssign_instance_statement(this);
	}
};




EParser.prototype.assign_instance_statement = function() {

    var localctx = new Assign_instance_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, EParser.RULE_assign_instance_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1334; 
        localctx.inst = this.assignable_instance(0);
        this.state = 1335; 
        this.assign();
        this.state = 1336; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Child_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_child_instance;
    return this;
}

Child_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Child_instanceContext.prototype.constructor = Child_instanceContext;


 
Child_instanceContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MemberInstanceContext(parser, ctx) {
	Child_instanceContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    Child_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberInstanceContext.prototype = Object.create(Child_instanceContext.prototype);
MemberInstanceContext.prototype.constructor = MemberInstanceContext;

MemberInstanceContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

MemberInstanceContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
MemberInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMemberInstance(this);
	}
};

MemberInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMemberInstance(this);
	}
};


function ItemInstanceContext(parser, ctx) {
	Child_instanceContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Child_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ItemInstanceContext.prototype = Object.create(Child_instanceContext.prototype);
ItemInstanceContext.prototype.constructor = ItemInstanceContext;

ItemInstanceContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

ItemInstanceContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

ItemInstanceContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ItemInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterItemInstance(this);
	}
};

ItemInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitItemInstance(this);
	}
};



EParser.prototype.child_instance = function() {

    var localctx = new Child_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, EParser.RULE_child_instance);
    try {
        this.state = 1346;
        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MemberInstanceContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1338;
            if (!( this.wasNot(EParser.WS))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
            }
            this.state = 1339;
            this.match(EParser.DOT);
            this.state = 1340; 
            localctx.name = this.variable_identifier();
            break;

        case 2:
            localctx = new ItemInstanceContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1341;
            if (!( this.wasNot(EParser.WS))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
            }
            this.state = 1342;
            this.match(EParser.LBRAK);
            this.state = 1343; 
            localctx.exp = this.expression(0);
            this.state = 1344;
            this.match(EParser.RBRAK);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assign_tuple_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_assign_tuple_statement;
    this.items = null; // Variable_identifier_listContext
    this.exp = null; // ExpressionContext
    return this;
}

Assign_tuple_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assign_tuple_statementContext.prototype.constructor = Assign_tuple_statementContext;

Assign_tuple_statementContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Assign_tuple_statementContext.prototype.variable_identifier_list = function() {
    return this.getTypedRuleContext(Variable_identifier_listContext,0);
};

Assign_tuple_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Assign_tuple_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAssign_tuple_statement(this);
	}
};

Assign_tuple_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAssign_tuple_statement(this);
	}
};




EParser.prototype.assign_tuple_statement = function() {

    var localctx = new Assign_tuple_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, EParser.RULE_assign_tuple_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1348; 
        localctx.items = this.variable_identifier_list();
        this.state = 1349; 
        this.assign();
        this.state = 1350; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LfsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_lfs;
    return this;
}

LfsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LfsContext.prototype.constructor = LfsContext;

LfsContext.prototype.LF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.LF);
    } else {
        return this.getToken(EParser.LF, i);
    }
};


LfsContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLfs(this);
	}
};

LfsContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLfs(this);
	}
};




EParser.prototype.lfs = function() {

    var localctx = new LfsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, EParser.RULE_lfs);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1355;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1352;
                this.match(EParser.LF); 
            }
            this.state = 1357;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LfpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_lfp;
    return this;
}

LfpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LfpContext.prototype.constructor = LfpContext;

LfpContext.prototype.LF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.LF);
    } else {
        return this.getToken(EParser.LF, i);
    }
};


LfpContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLfp(this);
	}
};

LfpContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLfp(this);
	}
};




EParser.prototype.lfp = function() {

    var localctx = new LfpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, EParser.RULE_lfp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1359; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1358;
            this.match(EParser.LF);
            this.state = 1361; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===EParser.LF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_indent;
    return this;
}

IndentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndentContext.prototype.constructor = IndentContext;

IndentContext.prototype.INDENT = function() {
    return this.getToken(EParser.INDENT, 0);
};

IndentContext.prototype.LF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.LF);
    } else {
        return this.getToken(EParser.LF, i);
    }
};


IndentContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIndent(this);
	}
};

IndentContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIndent(this);
	}
};




EParser.prototype.indent = function() {

    var localctx = new IndentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, EParser.RULE_indent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1364; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1363;
            this.match(EParser.LF);
            this.state = 1366; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===EParser.LF);
        this.state = 1368;
        this.match(EParser.INDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DedentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_dedent;
    return this;
}

DedentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DedentContext.prototype.constructor = DedentContext;

DedentContext.prototype.DEDENT = function() {
    return this.getToken(EParser.DEDENT, 0);
};

DedentContext.prototype.LF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.LF);
    } else {
        return this.getToken(EParser.LF, i);
    }
};


DedentContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDedent(this);
	}
};

DedentContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDedent(this);
	}
};




EParser.prototype.dedent = function() {

    var localctx = new DedentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, EParser.RULE_dedent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1373;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===EParser.LF) {
            this.state = 1370;
            this.match(EParser.LF);
            this.state = 1375;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1376;
        this.match(EParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Null_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_null_literal;
    return this;
}

Null_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Null_literalContext.prototype.constructor = Null_literalContext;

Null_literalContext.prototype.NOTHING = function() {
    return this.getToken(EParser.NOTHING, 0);
};

Null_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNull_literal(this);
	}
};

Null_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNull_literal(this);
	}
};




EParser.prototype.null_literal = function() {

    var localctx = new Null_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, EParser.RULE_null_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1378;
        this.match(EParser.NOTHING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declaration_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_declaration_list;
    return this;
}

Declaration_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declaration_listContext.prototype.constructor = Declaration_listContext;


 
Declaration_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FullDeclarationListContext(parser, ctx) {
	Declaration_listContext.call(this, parser);
    Declaration_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FullDeclarationListContext.prototype = Object.create(Declaration_listContext.prototype);
FullDeclarationListContext.prototype.constructor = FullDeclarationListContext;

FullDeclarationListContext.prototype.lfs = function() {
    return this.getTypedRuleContext(LfsContext,0);
};

FullDeclarationListContext.prototype.EOF = function() {
    return this.getToken(EParser.EOF, 0);
};

FullDeclarationListContext.prototype.declarations = function() {
    return this.getTypedRuleContext(DeclarationsContext,0);
};
FullDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterFullDeclarationList(this);
	}
};

FullDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitFullDeclarationList(this);
	}
};



EParser.prototype.declaration_list = function() {

    var localctx = new Declaration_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, EParser.RULE_declaration_list);
    var _la = 0; // Token type
    try {
        localctx = new FullDeclarationListContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1381;
        _la = this._input.LA(1);
        if(_la===EParser.COMMENT || _la===EParser.DEFINE) {
            this.state = 1380; 
            this.declarations();
        }

        this.state = 1383; 
        this.lfs();
        this.state = 1384;
        this.match(EParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_declarations;
    return this;
}

DeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationsContext.prototype.constructor = DeclarationsContext;

DeclarationsContext.prototype.declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationContext);
    } else {
        return this.getTypedRuleContext(DeclarationContext,i);
    }
};

DeclarationsContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

DeclarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDeclarations(this);
	}
};

DeclarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDeclarations(this);
	}
};




EParser.prototype.declarations = function() {

    var localctx = new DeclarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, EParser.RULE_declarations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1386; 
        this.declaration();
        this.state = 1392;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1387; 
                this.lfp();
                this.state = 1388; 
                this.declaration(); 
            }
            this.state = 1394;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.attribute_declaration = function() {
    return this.getTypedRuleContext(Attribute_declarationContext,0);
};

DeclarationContext.prototype.category_declaration = function() {
    return this.getTypedRuleContext(Category_declarationContext,0);
};

DeclarationContext.prototype.resource_declaration = function() {
    return this.getTypedRuleContext(Resource_declarationContext,0);
};

DeclarationContext.prototype.enum_declaration = function() {
    return this.getTypedRuleContext(Enum_declarationContext,0);
};

DeclarationContext.prototype.method_declaration = function() {
    return this.getTypedRuleContext(Method_declarationContext,0);
};

DeclarationContext.prototype.comment_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Comment_statementContext);
    } else {
        return this.getTypedRuleContext(Comment_statementContext,i);
    }
};

DeclarationContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

DeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDeclaration(this);
	}
};

DeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDeclaration(this);
	}
};




EParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, EParser.RULE_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1400;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===EParser.COMMENT) {
            this.state = 1395; 
            this.comment_statement();
            this.state = 1396; 
            this.lfp();
            this.state = 1402;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1408;
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1403; 
            this.attribute_declaration();
            break;

        case 2:
            this.state = 1404; 
            this.category_declaration();
            break;

        case 3:
            this.state = 1405; 
            this.resource_declaration();
            break;

        case 4:
            this.state = 1406; 
            this.enum_declaration();
            break;

        case 5:
            this.state = 1407; 
            this.method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Resource_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_resource_declaration;
    return this;
}

Resource_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Resource_declarationContext.prototype.constructor = Resource_declarationContext;

Resource_declarationContext.prototype.native_resource_declaration = function() {
    return this.getTypedRuleContext(Native_resource_declarationContext,0);
};

Resource_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterResource_declaration(this);
	}
};

Resource_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitResource_declaration(this);
	}
};




EParser.prototype.resource_declaration = function() {

    var localctx = new Resource_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, EParser.RULE_resource_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1410; 
        this.native_resource_declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enum_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_enum_declaration;
    return this;
}

Enum_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_declarationContext.prototype.constructor = Enum_declarationContext;

Enum_declarationContext.prototype.enum_category_declaration = function() {
    return this.getTypedRuleContext(Enum_category_declarationContext,0);
};

Enum_declarationContext.prototype.enum_native_declaration = function() {
    return this.getTypedRuleContext(Enum_native_declarationContext,0);
};

Enum_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterEnum_declaration(this);
	}
};

Enum_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitEnum_declaration(this);
	}
};




EParser.prototype.enum_declaration = function() {

    var localctx = new Enum_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, EParser.RULE_enum_declaration);
    try {
        this.state = 1414;
        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1412; 
            this.enum_category_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1413; 
            this.enum_native_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_symbol_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_symbol_list;
    return this;
}

Native_symbol_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_symbol_listContext.prototype.constructor = Native_symbol_listContext;

Native_symbol_listContext.prototype.native_symbol = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Native_symbolContext);
    } else {
        return this.getTypedRuleContext(Native_symbolContext,i);
    }
};

Native_symbol_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Native_symbol_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNative_symbol_list(this);
	}
};

Native_symbol_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNative_symbol_list(this);
	}
};




EParser.prototype.native_symbol_list = function() {

    var localctx = new Native_symbol_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, EParser.RULE_native_symbol_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1416; 
        this.native_symbol();
        this.state = 1422;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1417; 
                this.lfp();
                this.state = 1418; 
                this.native_symbol(); 
            }
            this.state = 1424;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_symbol_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_category_symbol_list;
    return this;
}

Category_symbol_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_symbol_listContext.prototype.constructor = Category_symbol_listContext;

Category_symbol_listContext.prototype.category_symbol = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Category_symbolContext);
    } else {
        return this.getTypedRuleContext(Category_symbolContext,i);
    }
};

Category_symbol_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Category_symbol_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCategory_symbol_list(this);
	}
};

Category_symbol_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCategory_symbol_list(this);
	}
};




EParser.prototype.category_symbol_list = function() {

    var localctx = new Category_symbol_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, EParser.RULE_category_symbol_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1425; 
        this.category_symbol();
        this.state = 1431;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1426; 
                this.lfp();
                this.state = 1427; 
                this.category_symbol(); 
            }
            this.state = 1433;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Symbol_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_symbol_list;
    return this;
}

Symbol_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Symbol_listContext.prototype.constructor = Symbol_listContext;

Symbol_listContext.prototype.symbol_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Symbol_identifierContext);
    } else {
        return this.getTypedRuleContext(Symbol_identifierContext,i);
    }
};

Symbol_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COMMA);
    } else {
        return this.getToken(EParser.COMMA, i);
    }
};


Symbol_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSymbol_list(this);
	}
};

Symbol_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSymbol_list(this);
	}
};




EParser.prototype.symbol_list = function() {

    var localctx = new Symbol_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, EParser.RULE_symbol_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1434; 
        this.symbol_identifier();
        this.state = 1439;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===EParser.COMMA) {
            this.state = 1435;
            this.match(EParser.COMMA);
            this.state = 1436; 
            this.symbol_identifier();
            this.state = 1441;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_attribute_constraint;
    return this;
}

Attribute_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_constraintContext.prototype.constructor = Attribute_constraintContext;


 
Attribute_constraintContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MatchingSetContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.source = null; // Set_literalContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingSetContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingSetContext.prototype.constructor = MatchingSetContext;

MatchingSetContext.prototype.IN = function() {
    return this.getToken(EParser.IN, 0);
};

MatchingSetContext.prototype.set_literal = function() {
    return this.getTypedRuleContext(Set_literalContext,0);
};
MatchingSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMatchingSet(this);
	}
};

MatchingSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMatchingSet(this);
	}
};


function MatchingPatternContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.text = null; // Token;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingPatternContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingPatternContext.prototype.constructor = MatchingPatternContext;

MatchingPatternContext.prototype.MATCHING = function() {
    return this.getToken(EParser.MATCHING, 0);
};

MatchingPatternContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(EParser.TEXT_LITERAL, 0);
};
MatchingPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMatchingPattern(this);
	}
};

MatchingPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMatchingPattern(this);
	}
};


function MatchingListContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.source = null; // List_literalContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingListContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingListContext.prototype.constructor = MatchingListContext;

MatchingListContext.prototype.IN = function() {
    return this.getToken(EParser.IN, 0);
};

MatchingListContext.prototype.list_literal = function() {
    return this.getTypedRuleContext(List_literalContext,0);
};
MatchingListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMatchingList(this);
	}
};

MatchingListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMatchingList(this);
	}
};


function MatchingRangeContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.source = null; // Range_literalContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingRangeContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingRangeContext.prototype.constructor = MatchingRangeContext;

MatchingRangeContext.prototype.IN = function() {
    return this.getToken(EParser.IN, 0);
};

MatchingRangeContext.prototype.range_literal = function() {
    return this.getTypedRuleContext(Range_literalContext,0);
};
MatchingRangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMatchingRange(this);
	}
};

MatchingRangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMatchingRange(this);
	}
};


function MatchingExpressionContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingExpressionContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingExpressionContext.prototype.constructor = MatchingExpressionContext;

MatchingExpressionContext.prototype.MATCHING = function() {
    return this.getToken(EParser.MATCHING, 0);
};

MatchingExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
MatchingExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMatchingExpression(this);
	}
};

MatchingExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMatchingExpression(this);
	}
};



EParser.prototype.attribute_constraint = function() {

    var localctx = new Attribute_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, EParser.RULE_attribute_constraint);
    try {
        this.state = 1452;
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MatchingListContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1442;
            this.match(EParser.IN);
            this.state = 1443; 
            localctx.source = this.list_literal();
            break;

        case 2:
            localctx = new MatchingSetContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1444;
            this.match(EParser.IN);
            this.state = 1445; 
            localctx.source = this.set_literal();
            break;

        case 3:
            localctx = new MatchingRangeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1446;
            this.match(EParser.IN);
            this.state = 1447; 
            localctx.source = this.range_literal();
            break;

        case 4:
            localctx = new MatchingPatternContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1448;
            this.match(EParser.MATCHING);
            this.state = 1449;
            localctx.text = this.match(EParser.TEXT_LITERAL);
            break;

        case 5:
            localctx = new MatchingExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1450;
            this.match(EParser.MATCHING);
            this.state = 1451; 
            localctx.exp = this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function List_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_list_literal;
    return this;
}

List_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_literalContext.prototype.constructor = List_literalContext;

List_literalContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

List_literalContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

List_literalContext.prototype.MUTABLE = function() {
    return this.getToken(EParser.MUTABLE, 0);
};

List_literalContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

List_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterList_literal(this);
	}
};

List_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitList_literal(this);
	}
};




EParser.prototype.list_literal = function() {

    var localctx = new List_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, EParser.RULE_list_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1455;
        _la = this._input.LA(1);
        if(_la===EParser.MUTABLE) {
            this.state = 1454;
            this.match(EParser.MUTABLE);
        }

        this.state = 1457;
        this.match(EParser.LBRAK);
        this.state = 1459;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << EParser.LPAR) | (1 << EParser.LBRAK) | (1 << EParser.LCURL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (EParser.MINUS - 33)) | (1 << (EParser.LT - 33)) | (1 << (EParser.METHOD_T - 33)) | (1 << (EParser.CODE - 33)) | (1 << (EParser.DOCUMENT - 33)) | (1 << (EParser.BLOB - 33)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (EParser.EXECUTE - 98)) | (1 << (EParser.FETCH - 98)) | (1 << (EParser.INVOKE - 98)) | (1 << (EParser.MUTABLE - 98)) | (1 << (EParser.NOT - 98)) | (1 << (EParser.NOTHING - 98)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (EParser.READ - 132)) | (1 << (EParser.SELF - 132)) | (1 << (EParser.SORTED - 132)) | (1 << (EParser.THIS - 132)) | (1 << (EParser.BOOLEAN_LITERAL - 132)) | (1 << (EParser.CHAR_LITERAL - 132)) | (1 << (EParser.MIN_INTEGER - 132)) | (1 << (EParser.MAX_INTEGER - 132)) | (1 << (EParser.SYMBOL_IDENTIFIER - 132)) | (1 << (EParser.TYPE_IDENTIFIER - 132)) | (1 << (EParser.VARIABLE_IDENTIFIER - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (EParser.TEXT_LITERAL - 165)) | (1 << (EParser.UUID_LITERAL - 165)) | (1 << (EParser.INTEGER_LITERAL - 165)) | (1 << (EParser.HEXA_LITERAL - 165)) | (1 << (EParser.DECIMAL_LITERAL - 165)) | (1 << (EParser.DATETIME_LITERAL - 165)) | (1 << (EParser.TIME_LITERAL - 165)) | (1 << (EParser.DATE_LITERAL - 165)) | (1 << (EParser.PERIOD_LITERAL - 165)))) !== 0)) {
            this.state = 1458; 
            this.expression_list();
        }

        this.state = 1461;
        this.match(EParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_set_literal;
    return this;
}

Set_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_literalContext.prototype.constructor = Set_literalContext;

Set_literalContext.prototype.LT = function() {
    return this.getToken(EParser.LT, 0);
};

Set_literalContext.prototype.GT = function() {
    return this.getToken(EParser.GT, 0);
};

Set_literalContext.prototype.MUTABLE = function() {
    return this.getToken(EParser.MUTABLE, 0);
};

Set_literalContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Set_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSet_literal(this);
	}
};

Set_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSet_literal(this);
	}
};




EParser.prototype.set_literal = function() {

    var localctx = new Set_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, EParser.RULE_set_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1464;
        _la = this._input.LA(1);
        if(_la===EParser.MUTABLE) {
            this.state = 1463;
            this.match(EParser.MUTABLE);
        }

        this.state = 1466;
        this.match(EParser.LT);
        this.state = 1468;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << EParser.LPAR) | (1 << EParser.LBRAK) | (1 << EParser.LCURL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (EParser.MINUS - 33)) | (1 << (EParser.LT - 33)) | (1 << (EParser.METHOD_T - 33)) | (1 << (EParser.CODE - 33)) | (1 << (EParser.DOCUMENT - 33)) | (1 << (EParser.BLOB - 33)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (EParser.EXECUTE - 98)) | (1 << (EParser.FETCH - 98)) | (1 << (EParser.INVOKE - 98)) | (1 << (EParser.MUTABLE - 98)) | (1 << (EParser.NOT - 98)) | (1 << (EParser.NOTHING - 98)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (EParser.READ - 132)) | (1 << (EParser.SELF - 132)) | (1 << (EParser.SORTED - 132)) | (1 << (EParser.THIS - 132)) | (1 << (EParser.BOOLEAN_LITERAL - 132)) | (1 << (EParser.CHAR_LITERAL - 132)) | (1 << (EParser.MIN_INTEGER - 132)) | (1 << (EParser.MAX_INTEGER - 132)) | (1 << (EParser.SYMBOL_IDENTIFIER - 132)) | (1 << (EParser.TYPE_IDENTIFIER - 132)) | (1 << (EParser.VARIABLE_IDENTIFIER - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (EParser.TEXT_LITERAL - 165)) | (1 << (EParser.UUID_LITERAL - 165)) | (1 << (EParser.INTEGER_LITERAL - 165)) | (1 << (EParser.HEXA_LITERAL - 165)) | (1 << (EParser.DECIMAL_LITERAL - 165)) | (1 << (EParser.DATETIME_LITERAL - 165)) | (1 << (EParser.TIME_LITERAL - 165)) | (1 << (EParser.DATE_LITERAL - 165)) | (1 << (EParser.PERIOD_LITERAL - 165)))) !== 0)) {
            this.state = 1467; 
            this.expression_list();
        }

        this.state = 1470;
        this.match(EParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_expression_list;
    return this;
}

Expression_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_listContext.prototype.constructor = Expression_listContext;

Expression_listContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Expression_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COMMA);
    } else {
        return this.getToken(EParser.COMMA, i);
    }
};


Expression_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterExpression_list(this);
	}
};

Expression_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitExpression_list(this);
	}
};




EParser.prototype.expression_list = function() {

    var localctx = new Expression_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, EParser.RULE_expression_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1472; 
        this.expression(0);
        this.state = 1477;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===EParser.COMMA) {
            this.state = 1473;
            this.match(EParser.COMMA);
            this.state = 1474; 
            this.expression(0);
            this.state = 1479;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Range_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_range_literal;
    this.low = null; // ExpressionContext
    this.high = null; // ExpressionContext
    return this;
}

Range_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Range_literalContext.prototype.constructor = Range_literalContext;

Range_literalContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

Range_literalContext.prototype.RANGE = function() {
    return this.getToken(EParser.RANGE, 0);
};

Range_literalContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

Range_literalContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Range_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterRange_literal(this);
	}
};

Range_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitRange_literal(this);
	}
};




EParser.prototype.range_literal = function() {

    var localctx = new Range_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, EParser.RULE_range_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1480;
        this.match(EParser.LBRAK);
        this.state = 1481; 
        localctx.low = this.expression(0);
        this.state = 1482;
        this.match(EParser.RANGE);
        this.state = 1483; 
        localctx.high = this.expression(0);
        this.state = 1484;
        this.match(EParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypedefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_typedef;
    return this;
}

TypedefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedefContext.prototype.constructor = TypedefContext;


 
TypedefContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function IteratorTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.i = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IteratorTypeContext.prototype = Object.create(TypedefContext.prototype);
IteratorTypeContext.prototype.constructor = IteratorTypeContext;

IteratorTypeContext.prototype.ITERATOR = function() {
    return this.getToken(EParser.ITERATOR, 0);
};

IteratorTypeContext.prototype.LT = function() {
    return this.getToken(EParser.LT, 0);
};

IteratorTypeContext.prototype.GT = function() {
    return this.getToken(EParser.GT, 0);
};

IteratorTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
IteratorTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIteratorType(this);
	}
};

IteratorTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIteratorType(this);
	}
};


function SetTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.s = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetTypeContext.prototype = Object.create(TypedefContext.prototype);
SetTypeContext.prototype.constructor = SetTypeContext;

SetTypeContext.prototype.LTGT = function() {
    return this.getToken(EParser.LTGT, 0);
};

SetTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
SetTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSetType(this);
	}
};

SetTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSetType(this);
	}
};


function ListTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.l = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListTypeContext.prototype = Object.create(TypedefContext.prototype);
ListTypeContext.prototype.constructor = ListTypeContext;

ListTypeContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

ListTypeContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

ListTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
ListTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterListType(this);
	}
};

ListTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitListType(this);
	}
};


function DictTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.d = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DictTypeContext.prototype = Object.create(TypedefContext.prototype);
DictTypeContext.prototype.constructor = DictTypeContext;

DictTypeContext.prototype.LCURL = function() {
    return this.getToken(EParser.LCURL, 0);
};

DictTypeContext.prototype.RCURL = function() {
    return this.getToken(EParser.RCURL, 0);
};

DictTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
DictTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDictType(this);
	}
};

DictTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDictType(this);
	}
};


function CursorTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.c = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CursorTypeContext.prototype = Object.create(TypedefContext.prototype);
CursorTypeContext.prototype.constructor = CursorTypeContext;

CursorTypeContext.prototype.CURSOR = function() {
    return this.getToken(EParser.CURSOR, 0);
};

CursorTypeContext.prototype.LT = function() {
    return this.getToken(EParser.LT, 0);
};

CursorTypeContext.prototype.GT = function() {
    return this.getToken(EParser.GT, 0);
};

CursorTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
CursorTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCursorType(this);
	}
};

CursorTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCursorType(this);
	}
};


function PrimaryTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.p = null; // Primary_typeContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrimaryTypeContext.prototype = Object.create(TypedefContext.prototype);
PrimaryTypeContext.prototype.constructor = PrimaryTypeContext;

PrimaryTypeContext.prototype.primary_type = function() {
    return this.getTypedRuleContext(Primary_typeContext,0);
};
PrimaryTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPrimaryType(this);
	}
};

PrimaryTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPrimaryType(this);
	}
};



EParser.prototype.typedef = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypedefContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 164;
    this.enterRecursionRule(localctx, 164, EParser.RULE_typedef, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1498;
        switch(this._input.LA(1)) {
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.CODE:
        case EParser.DOCUMENT:
        case EParser.BLOB:
        case EParser.IMAGE:
        case EParser.UUID:
        case EParser.TYPE_IDENTIFIER:
            localctx = new PrimaryTypeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1487; 
            localctx.p = this.primary_type();
            break;
        case EParser.CURSOR:
            localctx = new CursorTypeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1488;
            this.match(EParser.CURSOR);
            this.state = 1489;
            this.match(EParser.LT);
            this.state = 1490; 
            localctx.c = this.typedef(0);
            this.state = 1491;
            this.match(EParser.GT);
            break;
        case EParser.ITERATOR:
            localctx = new IteratorTypeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1493;
            this.match(EParser.ITERATOR);
            this.state = 1494;
            this.match(EParser.LT);
            this.state = 1495; 
            localctx.i = this.typedef(0);
            this.state = 1496;
            this.match(EParser.GT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1510;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,101,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1508;
                var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new SetTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
                    localctx.s = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_typedef);
                    this.state = 1500;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1501;
                    this.match(EParser.LTGT);
                    break;

                case 2:
                    localctx = new ListTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
                    localctx.l = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_typedef);
                    this.state = 1502;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 1503;
                    this.match(EParser.LBRAK);
                    this.state = 1504;
                    this.match(EParser.RBRAK);
                    break;

                case 3:
                    localctx = new DictTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
                    localctx.d = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_typedef);
                    this.state = 1505;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1506;
                    this.match(EParser.LCURL);
                    this.state = 1507;
                    this.match(EParser.RCURL);
                    break;

                } 
            }
            this.state = 1512;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,101,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Primary_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_primary_type;
    return this;
}

Primary_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Primary_typeContext.prototype.constructor = Primary_typeContext;


 
Primary_typeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function NativeTypeContext(parser, ctx) {
	Primary_typeContext.call(this, parser);
    this.n = null; // Native_typeContext;
    Primary_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeTypeContext.prototype = Object.create(Primary_typeContext.prototype);
NativeTypeContext.prototype.constructor = NativeTypeContext;

NativeTypeContext.prototype.native_type = function() {
    return this.getTypedRuleContext(Native_typeContext,0);
};
NativeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNativeType(this);
	}
};

NativeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNativeType(this);
	}
};


function CategoryTypeContext(parser, ctx) {
	Primary_typeContext.call(this, parser);
    this.c = null; // Category_typeContext;
    Primary_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CategoryTypeContext.prototype = Object.create(Primary_typeContext.prototype);
CategoryTypeContext.prototype.constructor = CategoryTypeContext;

CategoryTypeContext.prototype.category_type = function() {
    return this.getTypedRuleContext(Category_typeContext,0);
};
CategoryTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCategoryType(this);
	}
};

CategoryTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCategoryType(this);
	}
};



EParser.prototype.primary_type = function() {

    var localctx = new Primary_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, EParser.RULE_primary_type);
    try {
        this.state = 1515;
        switch(this._input.LA(1)) {
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.CODE:
        case EParser.DOCUMENT:
        case EParser.BLOB:
        case EParser.IMAGE:
        case EParser.UUID:
            localctx = new NativeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1513; 
            localctx.n = this.native_type();
            break;
        case EParser.TYPE_IDENTIFIER:
            localctx = new CategoryTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1514; 
            localctx.c = this.category_type();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_type;
    return this;
}

Native_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_typeContext.prototype.constructor = Native_typeContext;


 
Native_typeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PeriodTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PeriodTypeContext.prototype = Object.create(Native_typeContext.prototype);
PeriodTypeContext.prototype.constructor = PeriodTypeContext;

PeriodTypeContext.prototype.PERIOD = function() {
    return this.getToken(EParser.PERIOD, 0);
};
PeriodTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPeriodType(this);
	}
};

PeriodTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPeriodType(this);
	}
};


function BooleanTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanTypeContext.prototype = Object.create(Native_typeContext.prototype);
BooleanTypeContext.prototype.constructor = BooleanTypeContext;

BooleanTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(EParser.BOOLEAN, 0);
};
BooleanTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterBooleanType(this);
	}
};

BooleanTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitBooleanType(this);
	}
};


function DocumentTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocumentTypeContext.prototype = Object.create(Native_typeContext.prototype);
DocumentTypeContext.prototype.constructor = DocumentTypeContext;

DocumentTypeContext.prototype.DOCUMENT = function() {
    return this.getToken(EParser.DOCUMENT, 0);
};
DocumentTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDocumentType(this);
	}
};

DocumentTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDocumentType(this);
	}
};


function CharacterTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CharacterTypeContext.prototype = Object.create(Native_typeContext.prototype);
CharacterTypeContext.prototype.constructor = CharacterTypeContext;

CharacterTypeContext.prototype.CHARACTER = function() {
    return this.getToken(EParser.CHARACTER, 0);
};
CharacterTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCharacterType(this);
	}
};

CharacterTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCharacterType(this);
	}
};


function TextTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TextTypeContext.prototype = Object.create(Native_typeContext.prototype);
TextTypeContext.prototype.constructor = TextTypeContext;

TextTypeContext.prototype.TEXT = function() {
    return this.getToken(EParser.TEXT, 0);
};
TextTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTextType(this);
	}
};

TextTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTextType(this);
	}
};


function ImageTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ImageTypeContext.prototype = Object.create(Native_typeContext.prototype);
ImageTypeContext.prototype.constructor = ImageTypeContext;

ImageTypeContext.prototype.IMAGE = function() {
    return this.getToken(EParser.IMAGE, 0);
};
ImageTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterImageType(this);
	}
};

ImageTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitImageType(this);
	}
};


function TimeTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeTypeContext.prototype = Object.create(Native_typeContext.prototype);
TimeTypeContext.prototype.constructor = TimeTypeContext;

TimeTypeContext.prototype.TIME = function() {
    return this.getToken(EParser.TIME, 0);
};
TimeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTimeType(this);
	}
};

TimeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTimeType(this);
	}
};


function IntegerTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntegerTypeContext.prototype = Object.create(Native_typeContext.prototype);
IntegerTypeContext.prototype.constructor = IntegerTypeContext;

IntegerTypeContext.prototype.INTEGER = function() {
    return this.getToken(EParser.INTEGER, 0);
};
IntegerTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIntegerType(this);
	}
};

IntegerTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIntegerType(this);
	}
};


function DateTimeTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateTimeTypeContext.prototype = Object.create(Native_typeContext.prototype);
DateTimeTypeContext.prototype.constructor = DateTimeTypeContext;

DateTimeTypeContext.prototype.DATETIME = function() {
    return this.getToken(EParser.DATETIME, 0);
};
DateTimeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDateTimeType(this);
	}
};

DateTimeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDateTimeType(this);
	}
};


function BlobTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BlobTypeContext.prototype = Object.create(Native_typeContext.prototype);
BlobTypeContext.prototype.constructor = BlobTypeContext;

BlobTypeContext.prototype.BLOB = function() {
    return this.getToken(EParser.BLOB, 0);
};
BlobTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterBlobType(this);
	}
};

BlobTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitBlobType(this);
	}
};


function UUIDTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UUIDTypeContext.prototype = Object.create(Native_typeContext.prototype);
UUIDTypeContext.prototype.constructor = UUIDTypeContext;

UUIDTypeContext.prototype.UUID = function() {
    return this.getToken(EParser.UUID, 0);
};
UUIDTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterUUIDType(this);
	}
};

UUIDTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitUUIDType(this);
	}
};


function DecimalTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DecimalTypeContext.prototype = Object.create(Native_typeContext.prototype);
DecimalTypeContext.prototype.constructor = DecimalTypeContext;

DecimalTypeContext.prototype.DECIMAL = function() {
    return this.getToken(EParser.DECIMAL, 0);
};
DecimalTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDecimalType(this);
	}
};

DecimalTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDecimalType(this);
	}
};


function CodeTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CodeTypeContext.prototype = Object.create(Native_typeContext.prototype);
CodeTypeContext.prototype.constructor = CodeTypeContext;

CodeTypeContext.prototype.CODE = function() {
    return this.getToken(EParser.CODE, 0);
};
CodeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCodeType(this);
	}
};

CodeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCodeType(this);
	}
};


function DateTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateTypeContext.prototype = Object.create(Native_typeContext.prototype);
DateTypeContext.prototype.constructor = DateTypeContext;

DateTypeContext.prototype.DATE = function() {
    return this.getToken(EParser.DATE, 0);
};
DateTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDateType(this);
	}
};

DateTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDateType(this);
	}
};



EParser.prototype.native_type = function() {

    var localctx = new Native_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, EParser.RULE_native_type);
    try {
        this.state = 1531;
        switch(this._input.LA(1)) {
        case EParser.BOOLEAN:
            localctx = new BooleanTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1517;
            this.match(EParser.BOOLEAN);
            break;
        case EParser.CHARACTER:
            localctx = new CharacterTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1518;
            this.match(EParser.CHARACTER);
            break;
        case EParser.TEXT:
            localctx = new TextTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1519;
            this.match(EParser.TEXT);
            break;
        case EParser.IMAGE:
            localctx = new ImageTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1520;
            this.match(EParser.IMAGE);
            break;
        case EParser.INTEGER:
            localctx = new IntegerTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1521;
            this.match(EParser.INTEGER);
            break;
        case EParser.DECIMAL:
            localctx = new DecimalTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1522;
            this.match(EParser.DECIMAL);
            break;
        case EParser.DOCUMENT:
            localctx = new DocumentTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1523;
            this.match(EParser.DOCUMENT);
            break;
        case EParser.DATE:
            localctx = new DateTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 1524;
            this.match(EParser.DATE);
            break;
        case EParser.DATETIME:
            localctx = new DateTimeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 1525;
            this.match(EParser.DATETIME);
            break;
        case EParser.TIME:
            localctx = new TimeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 1526;
            this.match(EParser.TIME);
            break;
        case EParser.PERIOD:
            localctx = new PeriodTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 1527;
            this.match(EParser.PERIOD);
            break;
        case EParser.CODE:
            localctx = new CodeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 1528;
            this.match(EParser.CODE);
            break;
        case EParser.BLOB:
            localctx = new BlobTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 1529;
            this.match(EParser.BLOB);
            break;
        case EParser.UUID:
            localctx = new UUIDTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 1530;
            this.match(EParser.UUID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_category_type;
    this.t1 = null; // Token
    return this;
}

Category_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_typeContext.prototype.constructor = Category_typeContext;

Category_typeContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(EParser.TYPE_IDENTIFIER, 0);
};

Category_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCategory_type(this);
	}
};

Category_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCategory_type(this);
	}
};




EParser.prototype.category_type = function() {

    var localctx = new Category_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, EParser.RULE_category_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1533;
        localctx.t1 = this.match(EParser.TYPE_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mutable_category_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_mutable_category_type;
    return this;
}

Mutable_category_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mutable_category_typeContext.prototype.constructor = Mutable_category_typeContext;

Mutable_category_typeContext.prototype.category_type = function() {
    return this.getTypedRuleContext(Category_typeContext,0);
};

Mutable_category_typeContext.prototype.MUTABLE = function() {
    return this.getToken(EParser.MUTABLE, 0);
};

Mutable_category_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMutable_category_type(this);
	}
};

Mutable_category_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMutable_category_type(this);
	}
};




EParser.prototype.mutable_category_type = function() {

    var localctx = new Mutable_category_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, EParser.RULE_mutable_category_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1536;
        _la = this._input.LA(1);
        if(_la===EParser.MUTABLE) {
            this.state = 1535;
            this.match(EParser.MUTABLE);
        }

        this.state = 1538; 
        this.category_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Code_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_code_type;
    this.t1 = null; // Token
    return this;
}

Code_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Code_typeContext.prototype.constructor = Code_typeContext;

Code_typeContext.prototype.CODE = function() {
    return this.getToken(EParser.CODE, 0);
};

Code_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCode_type(this);
	}
};

Code_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCode_type(this);
	}
};




EParser.prototype.code_type = function() {

    var localctx = new Code_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, EParser.RULE_code_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1540;
        localctx.t1 = this.match(EParser.CODE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_category_declaration;
    return this;
}

Category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_declarationContext.prototype.constructor = Category_declarationContext;


 
Category_declarationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ConcreteCategoryDeclarationContext(parser, ctx) {
	Category_declarationContext.call(this, parser);
    this.decl = null; // Concrete_category_declarationContext;
    Category_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConcreteCategoryDeclarationContext.prototype = Object.create(Category_declarationContext.prototype);
ConcreteCategoryDeclarationContext.prototype.constructor = ConcreteCategoryDeclarationContext;

ConcreteCategoryDeclarationContext.prototype.concrete_category_declaration = function() {
    return this.getTypedRuleContext(Concrete_category_declarationContext,0);
};
ConcreteCategoryDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterConcreteCategoryDeclaration(this);
	}
};

ConcreteCategoryDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitConcreteCategoryDeclaration(this);
	}
};


function NativeCategoryDeclarationContext(parser, ctx) {
	Category_declarationContext.call(this, parser);
    this.decl = null; // Native_category_declarationContext;
    Category_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeCategoryDeclarationContext.prototype = Object.create(Category_declarationContext.prototype);
NativeCategoryDeclarationContext.prototype.constructor = NativeCategoryDeclarationContext;

NativeCategoryDeclarationContext.prototype.native_category_declaration = function() {
    return this.getTypedRuleContext(Native_category_declarationContext,0);
};
NativeCategoryDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNativeCategoryDeclaration(this);
	}
};

NativeCategoryDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNativeCategoryDeclaration(this);
	}
};


function SingletonCategoryDeclarationContext(parser, ctx) {
	Category_declarationContext.call(this, parser);
    this.decl = null; // Singleton_category_declarationContext;
    Category_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SingletonCategoryDeclarationContext.prototype = Object.create(Category_declarationContext.prototype);
SingletonCategoryDeclarationContext.prototype.constructor = SingletonCategoryDeclarationContext;

SingletonCategoryDeclarationContext.prototype.singleton_category_declaration = function() {
    return this.getTypedRuleContext(Singleton_category_declarationContext,0);
};
SingletonCategoryDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSingletonCategoryDeclaration(this);
	}
};

SingletonCategoryDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSingletonCategoryDeclaration(this);
	}
};



EParser.prototype.category_declaration = function() {

    var localctx = new Category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, EParser.RULE_category_declaration);
    try {
        this.state = 1545;
        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ConcreteCategoryDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1542; 
            localctx.decl = this.concrete_category_declaration();
            break;

        case 2:
            localctx = new NativeCategoryDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1543; 
            localctx.decl = this.native_category_declaration();
            break;

        case 3:
            localctx = new SingletonCategoryDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1544; 
            localctx.decl = this.singleton_category_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_identifier_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_type_identifier_list;
    return this;
}

Type_identifier_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_identifier_listContext.prototype.constructor = Type_identifier_listContext;

Type_identifier_listContext.prototype.type_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_identifierContext);
    } else {
        return this.getTypedRuleContext(Type_identifierContext,i);
    }
};

Type_identifier_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COMMA);
    } else {
        return this.getToken(EParser.COMMA, i);
    }
};


Type_identifier_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterType_identifier_list(this);
	}
};

Type_identifier_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitType_identifier_list(this);
	}
};




EParser.prototype.type_identifier_list = function() {

    var localctx = new Type_identifier_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, EParser.RULE_type_identifier_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1547; 
        this.type_identifier();
        this.state = 1552;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===EParser.COMMA) {
            this.state = 1548;
            this.match(EParser.COMMA);
            this.state = 1549; 
            this.type_identifier();
            this.state = 1554;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_method_identifier;
    return this;
}

Method_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_identifierContext.prototype.constructor = Method_identifierContext;

Method_identifierContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Method_identifierContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Method_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMethod_identifier(this);
	}
};

Method_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMethod_identifier(this);
	}
};




EParser.prototype.method_identifier = function() {

    var localctx = new Method_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, EParser.RULE_method_identifier);
    try {
        this.state = 1557;
        switch(this._input.LA(1)) {
        case EParser.VARIABLE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1555; 
            this.variable_identifier();
            break;
        case EParser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 1556; 
            this.type_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;


 
IdentifierContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TypeIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
TypeIdentifierContext.prototype.constructor = TypeIdentifierContext;

TypeIdentifierContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};
TypeIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTypeIdentifier(this);
	}
};

TypeIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTypeIdentifier(this);
	}
};


function SymbolIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SymbolIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
SymbolIdentifierContext.prototype.constructor = SymbolIdentifierContext;

SymbolIdentifierContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};
SymbolIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSymbolIdentifier(this);
	}
};

SymbolIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSymbolIdentifier(this);
	}
};


function VariableIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VariableIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
VariableIdentifierContext.prototype.constructor = VariableIdentifierContext;

VariableIdentifierContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
VariableIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterVariableIdentifier(this);
	}
};

VariableIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitVariableIdentifier(this);
	}
};



EParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, EParser.RULE_identifier);
    try {
        this.state = 1562;
        switch(this._input.LA(1)) {
        case EParser.VARIABLE_IDENTIFIER:
            localctx = new VariableIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1559; 
            this.variable_identifier();
            break;
        case EParser.TYPE_IDENTIFIER:
            localctx = new TypeIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1560; 
            this.type_identifier();
            break;
        case EParser.SYMBOL_IDENTIFIER:
            localctx = new SymbolIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1561; 
            this.symbol_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_variable_identifier;
    return this;
}

Variable_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_identifierContext.prototype.constructor = Variable_identifierContext;

Variable_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

Variable_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterVariable_identifier(this);
	}
};

Variable_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitVariable_identifier(this);
	}
};




EParser.prototype.variable_identifier = function() {

    var localctx = new Variable_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, EParser.RULE_variable_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1564;
        this.match(EParser.VARIABLE_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_attribute_identifier;
    return this;
}

Attribute_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_identifierContext.prototype.constructor = Attribute_identifierContext;

Attribute_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

Attribute_identifierContext.prototype.STORABLE = function() {
    return this.getToken(EParser.STORABLE, 0);
};

Attribute_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAttribute_identifier(this);
	}
};

Attribute_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAttribute_identifier(this);
	}
};




EParser.prototype.attribute_identifier = function() {

    var localctx = new Attribute_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, EParser.RULE_attribute_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1566;
        _la = this._input.LA(1);
        if(!(_la===EParser.STORABLE || _la===EParser.VARIABLE_IDENTIFIER)) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_type_identifier;
    return this;
}

Type_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_identifierContext.prototype.constructor = Type_identifierContext;

Type_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(EParser.TYPE_IDENTIFIER, 0);
};

Type_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterType_identifier(this);
	}
};

Type_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitType_identifier(this);
	}
};




EParser.prototype.type_identifier = function() {

    var localctx = new Type_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, EParser.RULE_type_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1568;
        this.match(EParser.TYPE_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Symbol_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_symbol_identifier;
    return this;
}

Symbol_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Symbol_identifierContext.prototype.constructor = Symbol_identifierContext;

Symbol_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
};

Symbol_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSymbol_identifier(this);
	}
};

Symbol_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSymbol_identifier(this);
	}
};




EParser.prototype.symbol_identifier = function() {

    var localctx = new Symbol_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, EParser.RULE_symbol_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1570;
        this.match(EParser.SYMBOL_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_argument_list;
    return this;
}

Argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_listContext.prototype.constructor = Argument_listContext;

Argument_listContext.prototype.argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentContext);
    } else {
        return this.getTypedRuleContext(ArgumentContext,i);
    }
};

Argument_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COMMA);
    } else {
        return this.getToken(EParser.COMMA, i);
    }
};


Argument_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterArgument_list(this);
	}
};

Argument_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitArgument_list(this);
	}
};




EParser.prototype.argument_list = function() {

    var localctx = new Argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, EParser.RULE_argument_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1572; 
        this.argument();
        this.state = 1577;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===EParser.COMMA) {
            this.state = 1573;
            this.match(EParser.COMMA);
            this.state = 1574; 
            this.argument();
            this.state = 1579;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_argument;
    return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;


 
ArgumentContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function OperatorArgumentContext(parser, ctx) {
	ArgumentContext.call(this, parser);
    this.arg = null; // Operator_argumentContext;
    ArgumentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorArgumentContext.prototype = Object.create(ArgumentContext.prototype);
OperatorArgumentContext.prototype.constructor = OperatorArgumentContext;

OperatorArgumentContext.prototype.operator_argument = function() {
    return this.getTypedRuleContext(Operator_argumentContext,0);
};

OperatorArgumentContext.prototype.MUTABLE = function() {
    return this.getToken(EParser.MUTABLE, 0);
};
OperatorArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOperatorArgument(this);
	}
};

OperatorArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOperatorArgument(this);
	}
};


function CodeArgumentContext(parser, ctx) {
	ArgumentContext.call(this, parser);
    this.arg = null; // Code_argumentContext;
    ArgumentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CodeArgumentContext.prototype = Object.create(ArgumentContext.prototype);
CodeArgumentContext.prototype.constructor = CodeArgumentContext;

CodeArgumentContext.prototype.code_argument = function() {
    return this.getTypedRuleContext(Code_argumentContext,0);
};
CodeArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCodeArgument(this);
	}
};

CodeArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCodeArgument(this);
	}
};



EParser.prototype.argument = function() {

    var localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, EParser.RULE_argument);
    var _la = 0; // Token type
    try {
        this.state = 1585;
        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
        switch(la_) {
        case 1:
            localctx = new CodeArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1580; 
            localctx.arg = this.code_argument();
            break;

        case 2:
            localctx = new OperatorArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1582;
            _la = this._input.LA(1);
            if(_la===EParser.MUTABLE) {
                this.state = 1581;
                this.match(EParser.MUTABLE);
            }

            this.state = 1584; 
            localctx.arg = this.operator_argument();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Operator_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_operator_argument;
    return this;
}

Operator_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operator_argumentContext.prototype.constructor = Operator_argumentContext;

Operator_argumentContext.prototype.named_argument = function() {
    return this.getTypedRuleContext(Named_argumentContext,0);
};

Operator_argumentContext.prototype.typed_argument = function() {
    return this.getTypedRuleContext(Typed_argumentContext,0);
};

Operator_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOperator_argument(this);
	}
};

Operator_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOperator_argument(this);
	}
};




EParser.prototype.operator_argument = function() {

    var localctx = new Operator_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, EParser.RULE_operator_argument);
    try {
        this.state = 1589;
        switch(this._input.LA(1)) {
        case EParser.VARIABLE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1587; 
            this.named_argument();
            break;
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.CODE:
        case EParser.DOCUMENT:
        case EParser.BLOB:
        case EParser.IMAGE:
        case EParser.UUID:
        case EParser.ITERATOR:
        case EParser.CURSOR:
        case EParser.ANY:
        case EParser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 1588; 
            this.typed_argument();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Named_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_named_argument;
    return this;
}

Named_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Named_argumentContext.prototype.constructor = Named_argumentContext;

Named_argumentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Named_argumentContext.prototype.EQ = function() {
    return this.getToken(EParser.EQ, 0);
};

Named_argumentContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};

Named_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNamed_argument(this);
	}
};

Named_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNamed_argument(this);
	}
};




EParser.prototype.named_argument = function() {

    var localctx = new Named_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, EParser.RULE_named_argument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1591; 
        this.variable_identifier();
        this.state = 1594;
        _la = this._input.LA(1);
        if(_la===EParser.EQ) {
            this.state = 1592;
            this.match(EParser.EQ);
            this.state = 1593; 
            this.literal_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Code_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_code_argument;
    this.name = null; // Variable_identifierContext
    return this;
}

Code_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Code_argumentContext.prototype.constructor = Code_argumentContext;

Code_argumentContext.prototype.code_type = function() {
    return this.getTypedRuleContext(Code_typeContext,0);
};

Code_argumentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Code_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCode_argument(this);
	}
};

Code_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCode_argument(this);
	}
};




EParser.prototype.code_argument = function() {

    var localctx = new Code_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, EParser.RULE_code_argument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1596; 
        this.code_type();
        this.state = 1597; 
        localctx.name = this.variable_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_or_any_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_category_or_any_type;
    return this;
}

Category_or_any_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_or_any_typeContext.prototype.constructor = Category_or_any_typeContext;

Category_or_any_typeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Category_or_any_typeContext.prototype.any_type = function() {
    return this.getTypedRuleContext(Any_typeContext,0);
};

Category_or_any_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCategory_or_any_type(this);
	}
};

Category_or_any_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCategory_or_any_type(this);
	}
};




EParser.prototype.category_or_any_type = function() {

    var localctx = new Category_or_any_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, EParser.RULE_category_or_any_type);
    try {
        this.state = 1601;
        switch(this._input.LA(1)) {
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.CODE:
        case EParser.DOCUMENT:
        case EParser.BLOB:
        case EParser.IMAGE:
        case EParser.UUID:
        case EParser.ITERATOR:
        case EParser.CURSOR:
        case EParser.TYPE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1599; 
            this.typedef(0);
            break;
        case EParser.ANY:
            this.enterOuterAlt(localctx, 2);
            this.state = 1600; 
            this.any_type(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Any_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_any_type;
    return this;
}

Any_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Any_typeContext.prototype.constructor = Any_typeContext;


 
Any_typeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function AnyListTypeContext(parser, ctx) {
	Any_typeContext.call(this, parser);
    Any_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnyListTypeContext.prototype = Object.create(Any_typeContext.prototype);
AnyListTypeContext.prototype.constructor = AnyListTypeContext;

AnyListTypeContext.prototype.any_type = function() {
    return this.getTypedRuleContext(Any_typeContext,0);
};

AnyListTypeContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

AnyListTypeContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};
AnyListTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAnyListType(this);
	}
};

AnyListTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAnyListType(this);
	}
};


function AnyTypeContext(parser, ctx) {
	Any_typeContext.call(this, parser);
    Any_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnyTypeContext.prototype = Object.create(Any_typeContext.prototype);
AnyTypeContext.prototype.constructor = AnyTypeContext;

AnyTypeContext.prototype.ANY = function() {
    return this.getToken(EParser.ANY, 0);
};
AnyTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAnyType(this);
	}
};

AnyTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAnyType(this);
	}
};


function AnyDictTypeContext(parser, ctx) {
	Any_typeContext.call(this, parser);
    Any_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnyDictTypeContext.prototype = Object.create(Any_typeContext.prototype);
AnyDictTypeContext.prototype.constructor = AnyDictTypeContext;

AnyDictTypeContext.prototype.any_type = function() {
    return this.getTypedRuleContext(Any_typeContext,0);
};

AnyDictTypeContext.prototype.LCURL = function() {
    return this.getToken(EParser.LCURL, 0);
};

AnyDictTypeContext.prototype.RCURL = function() {
    return this.getToken(EParser.RCURL, 0);
};
AnyDictTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAnyDictType(this);
	}
};

AnyDictTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAnyDictType(this);
	}
};



EParser.prototype.any_type = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Any_typeContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 204;
    this.enterRecursionRule(localctx, 204, EParser.RULE_any_type, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new AnyTypeContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1604;
        this.match(EParser.ANY);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1614;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,116,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1612;
                var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AnyListTypeContext(this, new Any_typeContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_any_type);
                    this.state = 1606;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1607;
                    this.match(EParser.LBRAK);
                    this.state = 1608;
                    this.match(EParser.RBRAK);
                    break;

                case 2:
                    localctx = new AnyDictTypeContext(this, new Any_typeContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_any_type);
                    this.state = 1609;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1610;
                    this.match(EParser.LCURL);
                    this.state = 1611;
                    this.match(EParser.RCURL);
                    break;

                } 
            }
            this.state = 1616;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,116,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Member_method_declaration_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_member_method_declaration_list;
    return this;
}

Member_method_declaration_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_method_declaration_listContext.prototype.constructor = Member_method_declaration_listContext;

Member_method_declaration_listContext.prototype.member_method_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Member_method_declarationContext);
    } else {
        return this.getTypedRuleContext(Member_method_declarationContext,i);
    }
};

Member_method_declaration_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Member_method_declaration_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMember_method_declaration_list(this);
	}
};

Member_method_declaration_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMember_method_declaration_list(this);
	}
};




EParser.prototype.member_method_declaration_list = function() {

    var localctx = new Member_method_declaration_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, EParser.RULE_member_method_declaration_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1617; 
        this.member_method_declaration();
        this.state = 1623;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,117,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1618; 
                this.lfp();
                this.state = 1619; 
                this.member_method_declaration(); 
            }
            this.state = 1625;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,117,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Member_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_member_method_declaration;
    return this;
}

Member_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_method_declarationContext.prototype.constructor = Member_method_declarationContext;

Member_method_declarationContext.prototype.setter_method_declaration = function() {
    return this.getTypedRuleContext(Setter_method_declarationContext,0);
};

Member_method_declarationContext.prototype.getter_method_declaration = function() {
    return this.getTypedRuleContext(Getter_method_declarationContext,0);
};

Member_method_declarationContext.prototype.concrete_method_declaration = function() {
    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
};

Member_method_declarationContext.prototype.abstract_method_declaration = function() {
    return this.getTypedRuleContext(Abstract_method_declarationContext,0);
};

Member_method_declarationContext.prototype.operator_method_declaration = function() {
    return this.getTypedRuleContext(Operator_method_declarationContext,0);
};

Member_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMember_method_declaration(this);
	}
};

Member_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMember_method_declaration(this);
	}
};




EParser.prototype.member_method_declaration = function() {

    var localctx = new Member_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, EParser.RULE_member_method_declaration);
    try {
        this.state = 1631;
        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1626; 
            this.setter_method_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1627; 
            this.getter_method_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1628; 
            this.concrete_method_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1629; 
            this.abstract_method_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1630; 
            this.operator_method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_member_method_declaration_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_member_method_declaration_list;
    return this;
}

Native_member_method_declaration_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_member_method_declaration_listContext.prototype.constructor = Native_member_method_declaration_listContext;

Native_member_method_declaration_listContext.prototype.native_member_method_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Native_member_method_declarationContext);
    } else {
        return this.getTypedRuleContext(Native_member_method_declarationContext,i);
    }
};

Native_member_method_declaration_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Native_member_method_declaration_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNative_member_method_declaration_list(this);
	}
};

Native_member_method_declaration_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNative_member_method_declaration_list(this);
	}
};




EParser.prototype.native_member_method_declaration_list = function() {

    var localctx = new Native_member_method_declaration_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, EParser.RULE_native_member_method_declaration_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1633; 
        this.native_member_method_declaration();
        this.state = 1639;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,119,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1634; 
                this.lfp();
                this.state = 1635; 
                this.native_member_method_declaration(); 
            }
            this.state = 1641;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,119,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_member_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_member_method_declaration;
    return this;
}

Native_member_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_member_method_declarationContext.prototype.constructor = Native_member_method_declarationContext;

Native_member_method_declarationContext.prototype.native_getter_declaration = function() {
    return this.getTypedRuleContext(Native_getter_declarationContext,0);
};

Native_member_method_declarationContext.prototype.native_setter_declaration = function() {
    return this.getTypedRuleContext(Native_setter_declarationContext,0);
};

Native_member_method_declarationContext.prototype.native_method_declaration = function() {
    return this.getTypedRuleContext(Native_method_declarationContext,0);
};

Native_member_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNative_member_method_declaration(this);
	}
};

Native_member_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNative_member_method_declaration(this);
	}
};




EParser.prototype.native_member_method_declaration = function() {

    var localctx = new Native_member_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, EParser.RULE_native_member_method_declaration);
    try {
        this.state = 1645;
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1642; 
            this.native_getter_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1643; 
            this.native_setter_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1644; 
            this.native_method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_bindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_category_binding;
    return this;
}

Native_category_bindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_bindingContext.prototype.constructor = Native_category_bindingContext;


 
Native_category_bindingContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function Python2CategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Python_category_bindingContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python2CategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
Python2CategoryBindingContext.prototype.constructor = Python2CategoryBindingContext;

Python2CategoryBindingContext.prototype.PYTHON2 = function() {
    return this.getToken(EParser.PYTHON2, 0);
};

Python2CategoryBindingContext.prototype.python_category_binding = function() {
    return this.getTypedRuleContext(Python_category_bindingContext,0);
};
Python2CategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython2CategoryBinding(this);
	}
};

Python2CategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython2CategoryBinding(this);
	}
};


function Python3CategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Python_category_bindingContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python3CategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
Python3CategoryBindingContext.prototype.constructor = Python3CategoryBindingContext;

Python3CategoryBindingContext.prototype.PYTHON3 = function() {
    return this.getToken(EParser.PYTHON3, 0);
};

Python3CategoryBindingContext.prototype.python_category_binding = function() {
    return this.getTypedRuleContext(Python_category_bindingContext,0);
};
Python3CategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython3CategoryBinding(this);
	}
};

Python3CategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython3CategoryBinding(this);
	}
};


function JavaCategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Java_class_identifier_expressionContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaCategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
JavaCategoryBindingContext.prototype.constructor = JavaCategoryBindingContext;

JavaCategoryBindingContext.prototype.JAVA = function() {
    return this.getToken(EParser.JAVA, 0);
};

JavaCategoryBindingContext.prototype.java_class_identifier_expression = function() {
    return this.getTypedRuleContext(Java_class_identifier_expressionContext,0);
};
JavaCategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaCategoryBinding(this);
	}
};

JavaCategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaCategoryBinding(this);
	}
};


function CSharpCategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Csharp_identifier_expressionContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpCategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
CSharpCategoryBindingContext.prototype.constructor = CSharpCategoryBindingContext;

CSharpCategoryBindingContext.prototype.CSHARP = function() {
    return this.getToken(EParser.CSHARP, 0);
};

CSharpCategoryBindingContext.prototype.csharp_identifier_expression = function() {
    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
};
CSharpCategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpCategoryBinding(this);
	}
};

CSharpCategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpCategoryBinding(this);
	}
};


function JavaScriptCategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Javascript_category_bindingContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptCategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
JavaScriptCategoryBindingContext.prototype.constructor = JavaScriptCategoryBindingContext;

JavaScriptCategoryBindingContext.prototype.JAVASCRIPT = function() {
    return this.getToken(EParser.JAVASCRIPT, 0);
};

JavaScriptCategoryBindingContext.prototype.javascript_category_binding = function() {
    return this.getTypedRuleContext(Javascript_category_bindingContext,0);
};
JavaScriptCategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaScriptCategoryBinding(this);
	}
};

JavaScriptCategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaScriptCategoryBinding(this);
	}
};



EParser.prototype.native_category_binding = function() {

    var localctx = new Native_category_bindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, EParser.RULE_native_category_binding);
    try {
        this.state = 1657;
        switch(this._input.LA(1)) {
        case EParser.JAVA:
            localctx = new JavaCategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1647;
            this.match(EParser.JAVA);
            this.state = 1648; 
            localctx.binding = this.java_class_identifier_expression(0);
            break;
        case EParser.CSHARP:
            localctx = new CSharpCategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1649;
            this.match(EParser.CSHARP);
            this.state = 1650; 
            localctx.binding = this.csharp_identifier_expression(0);
            break;
        case EParser.PYTHON2:
            localctx = new Python2CategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1651;
            this.match(EParser.PYTHON2);
            this.state = 1652; 
            localctx.binding = this.python_category_binding();
            break;
        case EParser.PYTHON3:
            localctx = new Python3CategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1653;
            this.match(EParser.PYTHON3);
            this.state = 1654; 
            localctx.binding = this.python_category_binding();
            break;
        case EParser.JAVASCRIPT:
            localctx = new JavaScriptCategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1655;
            this.match(EParser.JAVASCRIPT);
            this.state = 1656; 
            localctx.binding = this.javascript_category_binding();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_category_bindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_category_binding;
    return this;
}

Python_category_bindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_category_bindingContext.prototype.constructor = Python_category_bindingContext;

Python_category_bindingContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Python_category_bindingContext.prototype.python_module = function() {
    return this.getTypedRuleContext(Python_moduleContext,0);
};

Python_category_bindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython_category_binding(this);
	}
};

Python_category_bindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython_category_binding(this);
	}
};




EParser.prototype.python_category_binding = function() {

    var localctx = new Python_category_bindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, EParser.RULE_python_category_binding);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1659; 
        this.identifier();
        this.state = 1661;
        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
        if(la_===1) {
            this.state = 1660; 
            this.python_module();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_moduleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_module;
    return this;
}

Python_moduleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_moduleContext.prototype.constructor = Python_moduleContext;

Python_moduleContext.prototype.FROM = function() {
    return this.getToken(EParser.FROM, 0);
};

Python_moduleContext.prototype.module_token = function() {
    return this.getTypedRuleContext(Module_tokenContext,0);
};

Python_moduleContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Python_moduleContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Python_moduleContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.DOT);
    } else {
        return this.getToken(EParser.DOT, i);
    }
};


Python_moduleContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython_module(this);
	}
};

Python_moduleContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython_module(this);
	}
};




EParser.prototype.python_module = function() {

    var localctx = new Python_moduleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, EParser.RULE_python_module);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1663;
        this.match(EParser.FROM);
        this.state = 1664; 
        this.module_token();
        this.state = 1665;
        this.match(EParser.COLON);
        this.state = 1666; 
        this.identifier();
        this.state = 1671;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,123,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1667;
                this.match(EParser.DOT);
                this.state = 1668; 
                this.identifier(); 
            }
            this.state = 1673;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,123,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_category_bindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_category_binding;
    return this;
}

Javascript_category_bindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_category_bindingContext.prototype.constructor = Javascript_category_bindingContext;

Javascript_category_bindingContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Javascript_category_bindingContext.prototype.javascript_module = function() {
    return this.getTypedRuleContext(Javascript_moduleContext,0);
};

Javascript_category_bindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascript_category_binding(this);
	}
};

Javascript_category_bindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascript_category_binding(this);
	}
};




EParser.prototype.javascript_category_binding = function() {

    var localctx = new Javascript_category_bindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, EParser.RULE_javascript_category_binding);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1674; 
        this.identifier();
        this.state = 1676;
        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
        if(la_===1) {
            this.state = 1675; 
            this.javascript_module();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_moduleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_module;
    return this;
}

Javascript_moduleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_moduleContext.prototype.constructor = Javascript_moduleContext;

Javascript_moduleContext.prototype.FROM = function() {
    return this.getToken(EParser.FROM, 0);
};

Javascript_moduleContext.prototype.module_token = function() {
    return this.getTypedRuleContext(Module_tokenContext,0);
};

Javascript_moduleContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Javascript_moduleContext.prototype.javascript_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Javascript_identifierContext);
    } else {
        return this.getTypedRuleContext(Javascript_identifierContext,i);
    }
};

Javascript_moduleContext.prototype.SLASH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.SLASH);
    } else {
        return this.getToken(EParser.SLASH, i);
    }
};


Javascript_moduleContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

Javascript_moduleContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascript_module(this);
	}
};

Javascript_moduleContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascript_module(this);
	}
};




EParser.prototype.javascript_module = function() {

    var localctx = new Javascript_moduleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, EParser.RULE_javascript_module);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1678;
        this.match(EParser.FROM);
        this.state = 1679; 
        this.module_token();
        this.state = 1680;
        this.match(EParser.COLON);
        this.state = 1682;
        _la = this._input.LA(1);
        if(_la===EParser.SLASH) {
            this.state = 1681;
            this.match(EParser.SLASH);
        }

        this.state = 1684; 
        this.javascript_identifier();
        this.state = 1689;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,126,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1685;
                this.match(EParser.SLASH);
                this.state = 1686; 
                this.javascript_identifier(); 
            }
            this.state = 1691;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,126,this._ctx);
        }

        this.state = 1694;
        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
        if(la_===1) {
            this.state = 1692;
            this.match(EParser.DOT);
            this.state = 1693; 
            this.javascript_identifier();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_identifier_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_variable_identifier_list;
    return this;
}

Variable_identifier_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_identifier_listContext.prototype.constructor = Variable_identifier_listContext;

Variable_identifier_listContext.prototype.variable_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_identifierContext);
    } else {
        return this.getTypedRuleContext(Variable_identifierContext,i);
    }
};

Variable_identifier_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COMMA);
    } else {
        return this.getToken(EParser.COMMA, i);
    }
};


Variable_identifier_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterVariable_identifier_list(this);
	}
};

Variable_identifier_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitVariable_identifier_list(this);
	}
};




EParser.prototype.variable_identifier_list = function() {

    var localctx = new Variable_identifier_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, EParser.RULE_variable_identifier_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1696; 
        this.variable_identifier();
        this.state = 1701;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===EParser.COMMA) {
            this.state = 1697;
            this.match(EParser.COMMA);
            this.state = 1698; 
            this.variable_identifier();
            this.state = 1703;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_identifier_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_attribute_identifier_list;
    return this;
}

Attribute_identifier_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_identifier_listContext.prototype.constructor = Attribute_identifier_listContext;

Attribute_identifier_listContext.prototype.attribute_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_identifierContext);
    } else {
        return this.getTypedRuleContext(Attribute_identifierContext,i);
    }
};

Attribute_identifier_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COMMA);
    } else {
        return this.getToken(EParser.COMMA, i);
    }
};


Attribute_identifier_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAttribute_identifier_list(this);
	}
};

Attribute_identifier_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAttribute_identifier_list(this);
	}
};




EParser.prototype.attribute_identifier_list = function() {

    var localctx = new Attribute_identifier_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, EParser.RULE_attribute_identifier_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1704; 
        this.attribute_identifier();
        this.state = 1709;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,129,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1705;
                this.match(EParser.COMMA);
                this.state = 1706; 
                this.attribute_identifier(); 
            }
            this.state = 1711;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,129,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_method_declaration;
    return this;
}

Method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_declarationContext.prototype.constructor = Method_declarationContext;

Method_declarationContext.prototype.abstract_method_declaration = function() {
    return this.getTypedRuleContext(Abstract_method_declarationContext,0);
};

Method_declarationContext.prototype.concrete_method_declaration = function() {
    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
};

Method_declarationContext.prototype.native_method_declaration = function() {
    return this.getTypedRuleContext(Native_method_declarationContext,0);
};

Method_declarationContext.prototype.test_method_declaration = function() {
    return this.getTypedRuleContext(Test_method_declarationContext,0);
};

Method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMethod_declaration(this);
	}
};

Method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMethod_declaration(this);
	}
};




EParser.prototype.method_declaration = function() {

    var localctx = new Method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, EParser.RULE_method_declaration);
    try {
        this.state = 1716;
        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1712; 
            this.abstract_method_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1713; 
            this.concrete_method_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1714; 
            this.native_method_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1715; 
            this.test_method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comment_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_comment_statement;
    return this;
}

Comment_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comment_statementContext.prototype.constructor = Comment_statementContext;

Comment_statementContext.prototype.COMMENT = function() {
    return this.getToken(EParser.COMMENT, 0);
};

Comment_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterComment_statement(this);
	}
};

Comment_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitComment_statement(this);
	}
};




EParser.prototype.comment_statement = function() {

    var localctx = new Comment_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, EParser.RULE_comment_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1718;
        this.match(EParser.COMMENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_statement_list;
    return this;
}

Native_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_statement_listContext.prototype.constructor = Native_statement_listContext;

Native_statement_listContext.prototype.native_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Native_statementContext);
    } else {
        return this.getTypedRuleContext(Native_statementContext,i);
    }
};

Native_statement_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Native_statement_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNative_statement_list(this);
	}
};

Native_statement_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNative_statement_list(this);
	}
};




EParser.prototype.native_statement_list = function() {

    var localctx = new Native_statement_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, EParser.RULE_native_statement_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1720; 
        this.native_statement();
        this.state = 1726;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,131,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1721; 
                this.lfp();
                this.state = 1722; 
                this.native_statement(); 
            }
            this.state = 1728;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,131,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_statement;
    return this;
}

Native_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_statementContext.prototype.constructor = Native_statementContext;


 
Native_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpNativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpNativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
CSharpNativeStatementContext.prototype.constructor = CSharpNativeStatementContext;

CSharpNativeStatementContext.prototype.CSHARP = function() {
    return this.getToken(EParser.CSHARP, 0);
};

CSharpNativeStatementContext.prototype.csharp_statement = function() {
    return this.getTypedRuleContext(Csharp_statementContext,0);
};
CSharpNativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpNativeStatement(this);
	}
};

CSharpNativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpNativeStatement(this);
	}
};


function JavaNativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaNativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
JavaNativeStatementContext.prototype.constructor = JavaNativeStatementContext;

JavaNativeStatementContext.prototype.JAVA = function() {
    return this.getToken(EParser.JAVA, 0);
};

JavaNativeStatementContext.prototype.java_statement = function() {
    return this.getTypedRuleContext(Java_statementContext,0);
};
JavaNativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaNativeStatement(this);
	}
};

JavaNativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaNativeStatement(this);
	}
};


function JavaScriptNativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptNativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
JavaScriptNativeStatementContext.prototype.constructor = JavaScriptNativeStatementContext;

JavaScriptNativeStatementContext.prototype.JAVASCRIPT = function() {
    return this.getToken(EParser.JAVASCRIPT, 0);
};

JavaScriptNativeStatementContext.prototype.javascript_native_statement = function() {
    return this.getTypedRuleContext(Javascript_native_statementContext,0);
};
JavaScriptNativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaScriptNativeStatement(this);
	}
};

JavaScriptNativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaScriptNativeStatement(this);
	}
};


function Python2NativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python2NativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
Python2NativeStatementContext.prototype.constructor = Python2NativeStatementContext;

Python2NativeStatementContext.prototype.PYTHON2 = function() {
    return this.getToken(EParser.PYTHON2, 0);
};

Python2NativeStatementContext.prototype.python_native_statement = function() {
    return this.getTypedRuleContext(Python_native_statementContext,0);
};
Python2NativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython2NativeStatement(this);
	}
};

Python2NativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython2NativeStatement(this);
	}
};


function Python3NativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python3NativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
Python3NativeStatementContext.prototype.constructor = Python3NativeStatementContext;

Python3NativeStatementContext.prototype.PYTHON3 = function() {
    return this.getToken(EParser.PYTHON3, 0);
};

Python3NativeStatementContext.prototype.python_native_statement = function() {
    return this.getTypedRuleContext(Python_native_statementContext,0);
};
Python3NativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython3NativeStatement(this);
	}
};

Python3NativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython3NativeStatement(this);
	}
};



EParser.prototype.native_statement = function() {

    var localctx = new Native_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, EParser.RULE_native_statement);
    try {
        this.state = 1739;
        switch(this._input.LA(1)) {
        case EParser.JAVA:
            localctx = new JavaNativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1729;
            this.match(EParser.JAVA);
            this.state = 1730; 
            this.java_statement();
            break;
        case EParser.CSHARP:
            localctx = new CSharpNativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1731;
            this.match(EParser.CSHARP);
            this.state = 1732; 
            this.csharp_statement();
            break;
        case EParser.PYTHON2:
            localctx = new Python2NativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1733;
            this.match(EParser.PYTHON2);
            this.state = 1734; 
            this.python_native_statement();
            break;
        case EParser.PYTHON3:
            localctx = new Python3NativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1735;
            this.match(EParser.PYTHON3);
            this.state = 1736; 
            this.python_native_statement();
            break;
        case EParser.JAVASCRIPT:
            localctx = new JavaScriptNativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1737;
            this.match(EParser.JAVASCRIPT);
            this.state = 1738; 
            this.javascript_native_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_native_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_native_statement;
    return this;
}

Python_native_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_native_statementContext.prototype.constructor = Python_native_statementContext;

Python_native_statementContext.prototype.python_statement = function() {
    return this.getTypedRuleContext(Python_statementContext,0);
};

Python_native_statementContext.prototype.SEMI = function() {
    return this.getToken(EParser.SEMI, 0);
};

Python_native_statementContext.prototype.python_module = function() {
    return this.getTypedRuleContext(Python_moduleContext,0);
};

Python_native_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython_native_statement(this);
	}
};

Python_native_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython_native_statement(this);
	}
};




EParser.prototype.python_native_statement = function() {

    var localctx = new Python_native_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, EParser.RULE_python_native_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1741; 
        this.python_statement();
        this.state = 1743;
        _la = this._input.LA(1);
        if(_la===EParser.SEMI) {
            this.state = 1742;
            this.match(EParser.SEMI);
        }

        this.state = 1746;
        _la = this._input.LA(1);
        if(_la===EParser.FROM) {
            this.state = 1745; 
            this.python_module();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_native_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_native_statement;
    return this;
}

Javascript_native_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_native_statementContext.prototype.constructor = Javascript_native_statementContext;

Javascript_native_statementContext.prototype.javascript_statement = function() {
    return this.getTypedRuleContext(Javascript_statementContext,0);
};

Javascript_native_statementContext.prototype.SEMI = function() {
    return this.getToken(EParser.SEMI, 0);
};

Javascript_native_statementContext.prototype.javascript_module = function() {
    return this.getTypedRuleContext(Javascript_moduleContext,0);
};

Javascript_native_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascript_native_statement(this);
	}
};

Javascript_native_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascript_native_statement(this);
	}
};




EParser.prototype.javascript_native_statement = function() {

    var localctx = new Javascript_native_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, EParser.RULE_javascript_native_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1748; 
        this.javascript_statement();
        this.state = 1750;
        _la = this._input.LA(1);
        if(_la===EParser.SEMI) {
            this.state = 1749;
            this.match(EParser.SEMI);
        }

        this.state = 1753;
        _la = this._input.LA(1);
        if(_la===EParser.FROM) {
            this.state = 1752; 
            this.javascript_module();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_statement_list;
    return this;
}

Statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_listContext.prototype.constructor = Statement_listContext;

Statement_listContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

Statement_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Statement_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterStatement_list(this);
	}
};

Statement_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitStatement_list(this);
	}
};




EParser.prototype.statement_list = function() {

    var localctx = new Statement_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, EParser.RULE_statement_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1755; 
        this.statement();
        this.state = 1761;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,137,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1756; 
                this.lfp();
                this.state = 1757; 
                this.statement(); 
            }
            this.state = 1763;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,137,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assertion_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_assertion_list;
    return this;
}

Assertion_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assertion_listContext.prototype.constructor = Assertion_listContext;

Assertion_listContext.prototype.assertion = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssertionContext);
    } else {
        return this.getTypedRuleContext(AssertionContext,i);
    }
};

Assertion_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Assertion_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAssertion_list(this);
	}
};

Assertion_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAssertion_list(this);
	}
};




EParser.prototype.assertion_list = function() {

    var localctx = new Assertion_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, EParser.RULE_assertion_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1764; 
        this.assertion();
        this.state = 1770;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,138,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1765; 
                this.lfp();
                this.state = 1766; 
                this.assertion(); 
            }
            this.state = 1772;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,138,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_case_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_switch_case_statement_list;
    return this;
}

Switch_case_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_case_statement_listContext.prototype.constructor = Switch_case_statement_listContext;

Switch_case_statement_listContext.prototype.switch_case_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Switch_case_statementContext);
    } else {
        return this.getTypedRuleContext(Switch_case_statementContext,i);
    }
};

Switch_case_statement_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Switch_case_statement_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSwitch_case_statement_list(this);
	}
};

Switch_case_statement_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSwitch_case_statement_list(this);
	}
};




EParser.prototype.switch_case_statement_list = function() {

    var localctx = new Switch_case_statement_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, EParser.RULE_switch_case_statement_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1773; 
        this.switch_case_statement();
        this.state = 1779;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,139,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1774; 
                this.lfp();
                this.state = 1775; 
                this.switch_case_statement(); 
            }
            this.state = 1781;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,139,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Catch_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_catch_statement_list;
    return this;
}

Catch_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Catch_statement_listContext.prototype.constructor = Catch_statement_listContext;

Catch_statement_listContext.prototype.catch_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Catch_statementContext);
    } else {
        return this.getTypedRuleContext(Catch_statementContext,i);
    }
};

Catch_statement_listContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

Catch_statement_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCatch_statement_list(this);
	}
};

Catch_statement_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCatch_statement_list(this);
	}
};




EParser.prototype.catch_statement_list = function() {

    var localctx = new Catch_statement_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, EParser.RULE_catch_statement_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1782; 
        this.catch_statement();
        this.state = 1788;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,140,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1783; 
                this.lfp();
                this.state = 1784; 
                this.catch_statement(); 
            }
            this.state = 1790;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,140,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Literal_collectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_literal_collection;
    return this;
}

Literal_collectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_collectionContext.prototype.constructor = Literal_collectionContext;


 
Literal_collectionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function LiteralListLiteralContext(parser, ctx) {
	Literal_collectionContext.call(this, parser);
    Literal_collectionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralListLiteralContext.prototype = Object.create(Literal_collectionContext.prototype);
LiteralListLiteralContext.prototype.constructor = LiteralListLiteralContext;

LiteralListLiteralContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

LiteralListLiteralContext.prototype.literal_list_literal = function() {
    return this.getTypedRuleContext(Literal_list_literalContext,0);
};

LiteralListLiteralContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};
LiteralListLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLiteralListLiteral(this);
	}
};

LiteralListLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLiteralListLiteral(this);
	}
};


function LiteralRangeLiteralContext(parser, ctx) {
	Literal_collectionContext.call(this, parser);
    this.low = null; // Atomic_literalContext;
    this.high = null; // Atomic_literalContext;
    Literal_collectionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralRangeLiteralContext.prototype = Object.create(Literal_collectionContext.prototype);
LiteralRangeLiteralContext.prototype.constructor = LiteralRangeLiteralContext;

LiteralRangeLiteralContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

LiteralRangeLiteralContext.prototype.RANGE = function() {
    return this.getToken(EParser.RANGE, 0);
};

LiteralRangeLiteralContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

LiteralRangeLiteralContext.prototype.atomic_literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Atomic_literalContext);
    } else {
        return this.getTypedRuleContext(Atomic_literalContext,i);
    }
};
LiteralRangeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLiteralRangeLiteral(this);
	}
};

LiteralRangeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLiteralRangeLiteral(this);
	}
};


function LiteralSetLiteralContext(parser, ctx) {
	Literal_collectionContext.call(this, parser);
    Literal_collectionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralSetLiteralContext.prototype = Object.create(Literal_collectionContext.prototype);
LiteralSetLiteralContext.prototype.constructor = LiteralSetLiteralContext;

LiteralSetLiteralContext.prototype.LT = function() {
    return this.getToken(EParser.LT, 0);
};

LiteralSetLiteralContext.prototype.literal_list_literal = function() {
    return this.getTypedRuleContext(Literal_list_literalContext,0);
};

LiteralSetLiteralContext.prototype.GT = function() {
    return this.getToken(EParser.GT, 0);
};
LiteralSetLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLiteralSetLiteral(this);
	}
};

LiteralSetLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLiteralSetLiteral(this);
	}
};



EParser.prototype.literal_collection = function() {

    var localctx = new Literal_collectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, EParser.RULE_literal_collection);
    try {
        this.state = 1805;
        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LiteralRangeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1791;
            this.match(EParser.LBRAK);
            this.state = 1792; 
            localctx.low = this.atomic_literal();
            this.state = 1793;
            this.match(EParser.RANGE);
            this.state = 1794; 
            localctx.high = this.atomic_literal();
            this.state = 1795;
            this.match(EParser.RBRAK);
            break;

        case 2:
            localctx = new LiteralListLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1797;
            this.match(EParser.LBRAK);
            this.state = 1798; 
            this.literal_list_literal();
            this.state = 1799;
            this.match(EParser.RBRAK);
            break;

        case 3:
            localctx = new LiteralSetLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1801;
            this.match(EParser.LT);
            this.state = 1802; 
            this.literal_list_literal();
            this.state = 1803;
            this.match(EParser.GT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Atomic_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_atomic_literal;
    return this;
}

Atomic_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Atomic_literalContext.prototype.constructor = Atomic_literalContext;


 
Atomic_literalContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MinIntegerLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MinIntegerLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
MinIntegerLiteralContext.prototype.constructor = MinIntegerLiteralContext;

MinIntegerLiteralContext.prototype.MIN_INTEGER = function() {
    return this.getToken(EParser.MIN_INTEGER, 0);
};
MinIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMinIntegerLiteral(this);
	}
};

MinIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMinIntegerLiteral(this);
	}
};


function DateLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
DateLiteralContext.prototype.constructor = DateLiteralContext;

DateLiteralContext.prototype.DATE_LITERAL = function() {
    return this.getToken(EParser.DATE_LITERAL, 0);
};
DateLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDateLiteral(this);
	}
};

DateLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDateLiteral(this);
	}
};


function BooleanLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

BooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(EParser.BOOLEAN_LITERAL, 0);
};
BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitBooleanLiteral(this);
	}
};


function HexadecimalLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HexadecimalLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
HexadecimalLiteralContext.prototype.constructor = HexadecimalLiteralContext;

HexadecimalLiteralContext.prototype.HEXA_LITERAL = function() {
    return this.getToken(EParser.HEXA_LITERAL, 0);
};
HexadecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterHexadecimalLiteral(this);
	}
};

HexadecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitHexadecimalLiteral(this);
	}
};


function UUIDLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UUIDLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
UUIDLiteralContext.prototype.constructor = UUIDLiteralContext;

UUIDLiteralContext.prototype.UUID_LITERAL = function() {
    return this.getToken(EParser.UUID_LITERAL, 0);
};
UUIDLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterUUIDLiteral(this);
	}
};

UUIDLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitUUIDLiteral(this);
	}
};


function MaxIntegerLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MaxIntegerLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
MaxIntegerLiteralContext.prototype.constructor = MaxIntegerLiteralContext;

MaxIntegerLiteralContext.prototype.MAX_INTEGER = function() {
    return this.getToken(EParser.MAX_INTEGER, 0);
};
MaxIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMaxIntegerLiteral(this);
	}
};

MaxIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMaxIntegerLiteral(this);
	}
};


function DateTimeLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateTimeLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
DateTimeLiteralContext.prototype.constructor = DateTimeLiteralContext;

DateTimeLiteralContext.prototype.DATETIME_LITERAL = function() {
    return this.getToken(EParser.DATETIME_LITERAL, 0);
};
DateTimeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDateTimeLiteral(this);
	}
};

DateTimeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDateTimeLiteral(this);
	}
};


function PeriodLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PeriodLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
PeriodLiteralContext.prototype.constructor = PeriodLiteralContext;

PeriodLiteralContext.prototype.PERIOD_LITERAL = function() {
    return this.getToken(EParser.PERIOD_LITERAL, 0);
};
PeriodLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPeriodLiteral(this);
	}
};

PeriodLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPeriodLiteral(this);
	}
};


function DecimalLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DecimalLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
DecimalLiteralContext.prototype.constructor = DecimalLiteralContext;

DecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(EParser.DECIMAL_LITERAL, 0);
};
DecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDecimalLiteral(this);
	}
};


function TextLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TextLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
TextLiteralContext.prototype.constructor = TextLiteralContext;

TextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(EParser.TEXT_LITERAL, 0);
};
TextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTextLiteral(this);
	}
};

TextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTextLiteral(this);
	}
};


function NullLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.n = null; // Null_literalContext;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
NullLiteralContext.prototype.constructor = NullLiteralContext;

NullLiteralContext.prototype.null_literal = function() {
    return this.getTypedRuleContext(Null_literalContext,0);
};
NullLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNullLiteral(this);
	}
};

NullLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNullLiteral(this);
	}
};


function IntegerLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntegerLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
IntegerLiteralContext.prototype.constructor = IntegerLiteralContext;

IntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(EParser.INTEGER_LITERAL, 0);
};
IntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIntegerLiteral(this);
	}
};

IntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIntegerLiteral(this);
	}
};


function TimeLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
TimeLiteralContext.prototype.constructor = TimeLiteralContext;

TimeLiteralContext.prototype.TIME_LITERAL = function() {
    return this.getToken(EParser.TIME_LITERAL, 0);
};
TimeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTimeLiteral(this);
	}
};

TimeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTimeLiteral(this);
	}
};


function CharacterLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CharacterLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
CharacterLiteralContext.prototype.constructor = CharacterLiteralContext;

CharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(EParser.CHAR_LITERAL, 0);
};
CharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCharacterLiteral(this);
	}
};

CharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCharacterLiteral(this);
	}
};



EParser.prototype.atomic_literal = function() {

    var localctx = new Atomic_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, EParser.RULE_atomic_literal);
    try {
        this.state = 1821;
        switch(this._input.LA(1)) {
        case EParser.MIN_INTEGER:
            localctx = new MinIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1807;
            localctx.t = this.match(EParser.MIN_INTEGER);
            break;
        case EParser.MAX_INTEGER:
            localctx = new MaxIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1808;
            localctx.t = this.match(EParser.MAX_INTEGER);
            break;
        case EParser.INTEGER_LITERAL:
            localctx = new IntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1809;
            localctx.t = this.match(EParser.INTEGER_LITERAL);
            break;
        case EParser.HEXA_LITERAL:
            localctx = new HexadecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1810;
            localctx.t = this.match(EParser.HEXA_LITERAL);
            break;
        case EParser.CHAR_LITERAL:
            localctx = new CharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1811;
            localctx.t = this.match(EParser.CHAR_LITERAL);
            break;
        case EParser.DATE_LITERAL:
            localctx = new DateLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1812;
            localctx.t = this.match(EParser.DATE_LITERAL);
            break;
        case EParser.TIME_LITERAL:
            localctx = new TimeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1813;
            localctx.t = this.match(EParser.TIME_LITERAL);
            break;
        case EParser.TEXT_LITERAL:
            localctx = new TextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 1814;
            localctx.t = this.match(EParser.TEXT_LITERAL);
            break;
        case EParser.DECIMAL_LITERAL:
            localctx = new DecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 1815;
            localctx.t = this.match(EParser.DECIMAL_LITERAL);
            break;
        case EParser.DATETIME_LITERAL:
            localctx = new DateTimeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 1816;
            localctx.t = this.match(EParser.DATETIME_LITERAL);
            break;
        case EParser.BOOLEAN_LITERAL:
            localctx = new BooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 1817;
            localctx.t = this.match(EParser.BOOLEAN_LITERAL);
            break;
        case EParser.PERIOD_LITERAL:
            localctx = new PeriodLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 1818;
            localctx.t = this.match(EParser.PERIOD_LITERAL);
            break;
        case EParser.UUID_LITERAL:
            localctx = new UUIDLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 1819;
            localctx.t = this.match(EParser.UUID_LITERAL);
            break;
        case EParser.NOTHING:
            localctx = new NullLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 1820; 
            localctx.n = this.null_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Literal_list_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_literal_list_literal;
    return this;
}

Literal_list_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_list_literalContext.prototype.constructor = Literal_list_literalContext;

Literal_list_literalContext.prototype.atomic_literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Atomic_literalContext);
    } else {
        return this.getTypedRuleContext(Atomic_literalContext,i);
    }
};

Literal_list_literalContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COMMA);
    } else {
        return this.getToken(EParser.COMMA, i);
    }
};


Literal_list_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLiteral_list_literal(this);
	}
};

Literal_list_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLiteral_list_literal(this);
	}
};




EParser.prototype.literal_list_literal = function() {

    var localctx = new Literal_list_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, EParser.RULE_literal_list_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1823; 
        this.atomic_literal();
        this.state = 1828;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===EParser.COMMA) {
            this.state = 1824;
            this.match(EParser.COMMA);
            this.state = 1825; 
            this.atomic_literal();
            this.state = 1830;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Selectable_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_selectable_expression;
    return this;
}

Selectable_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Selectable_expressionContext.prototype.constructor = Selectable_expressionContext;


 
Selectable_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ThisExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // This_expressionContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ThisExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
ThisExpressionContext.prototype.constructor = ThisExpressionContext;

ThisExpressionContext.prototype.this_expression = function() {
    return this.getTypedRuleContext(This_expressionContext,0);
};
ThisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterThisExpression(this);
	}
};

ThisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitThisExpression(this);
	}
};


function ParenthesisExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // Parenthesis_expressionContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesisExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
ParenthesisExpressionContext.prototype.constructor = ParenthesisExpressionContext;

ParenthesisExpressionContext.prototype.parenthesis_expression = function() {
    return this.getTypedRuleContext(Parenthesis_expressionContext,0);
};
ParenthesisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterParenthesisExpression(this);
	}
};

ParenthesisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitParenthesisExpression(this);
	}
};


function LiteralExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // Literal_expressionContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
LiteralExpressionContext.prototype.constructor = LiteralExpressionContext;

LiteralExpressionContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};
LiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLiteralExpression(this);
	}
};

LiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLiteralExpression(this);
	}
};


function IdentifierExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // IdentifierContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdentifierExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
IdentifierExpressionContext.prototype.constructor = IdentifierExpressionContext;

IdentifierExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
IdentifierExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIdentifierExpression(this);
	}
};

IdentifierExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIdentifierExpression(this);
	}
};



EParser.prototype.selectable_expression = function() {

    var localctx = new Selectable_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, EParser.RULE_selectable_expression);
    try {
        this.state = 1835;
        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ParenthesisExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1831; 
            localctx.exp = this.parenthesis_expression();
            break;

        case 2:
            localctx = new LiteralExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1832; 
            localctx.exp = this.literal_expression();
            break;

        case 3:
            localctx = new IdentifierExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1833; 
            localctx.exp = this.identifier();
            break;

        case 4:
            localctx = new ThisExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1834; 
            localctx.exp = this.this_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function This_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_this_expression;
    return this;
}

This_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
This_expressionContext.prototype.constructor = This_expressionContext;

This_expressionContext.prototype.SELF = function() {
    return this.getToken(EParser.SELF, 0);
};

This_expressionContext.prototype.THIS = function() {
    return this.getToken(EParser.THIS, 0);
};

This_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterThis_expression(this);
	}
};

This_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitThis_expression(this);
	}
};




EParser.prototype.this_expression = function() {

    var localctx = new This_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, EParser.RULE_this_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1837;
        _la = this._input.LA(1);
        if(!(_la===EParser.SELF || _la===EParser.THIS)) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_parenthesis_expression;
    return this;
}

Parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parenthesis_expressionContext.prototype.constructor = Parenthesis_expressionContext;

Parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Parenthesis_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterParenthesis_expression(this);
	}
};

Parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitParenthesis_expression(this);
	}
};




EParser.prototype.parenthesis_expression = function() {

    var localctx = new Parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, EParser.RULE_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1839;
        this.match(EParser.LPAR);
        this.state = 1840; 
        this.expression(0);
        this.state = 1841;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_literal_expression;
    return this;
}

Literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_expressionContext.prototype.constructor = Literal_expressionContext;

Literal_expressionContext.prototype.atomic_literal = function() {
    return this.getTypedRuleContext(Atomic_literalContext,0);
};

Literal_expressionContext.prototype.collection_literal = function() {
    return this.getTypedRuleContext(Collection_literalContext,0);
};

Literal_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLiteral_expression(this);
	}
};

Literal_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLiteral_expression(this);
	}
};




EParser.prototype.literal_expression = function() {

    var localctx = new Literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, EParser.RULE_literal_expression);
    try {
        this.state = 1845;
        switch(this._input.LA(1)) {
        case EParser.NOTHING:
        case EParser.BOOLEAN_LITERAL:
        case EParser.CHAR_LITERAL:
        case EParser.MIN_INTEGER:
        case EParser.MAX_INTEGER:
        case EParser.TEXT_LITERAL:
        case EParser.UUID_LITERAL:
        case EParser.INTEGER_LITERAL:
        case EParser.HEXA_LITERAL:
        case EParser.DECIMAL_LITERAL:
        case EParser.DATETIME_LITERAL:
        case EParser.TIME_LITERAL:
        case EParser.DATE_LITERAL:
        case EParser.PERIOD_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1843; 
            this.atomic_literal();
            break;
        case EParser.LPAR:
        case EParser.LBRAK:
        case EParser.LCURL:
        case EParser.LT:
        case EParser.MUTABLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1844; 
            this.collection_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collection_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_collection_literal;
    return this;
}

Collection_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collection_literalContext.prototype.constructor = Collection_literalContext;

Collection_literalContext.prototype.range_literal = function() {
    return this.getTypedRuleContext(Range_literalContext,0);
};

Collection_literalContext.prototype.list_literal = function() {
    return this.getTypedRuleContext(List_literalContext,0);
};

Collection_literalContext.prototype.set_literal = function() {
    return this.getTypedRuleContext(Set_literalContext,0);
};

Collection_literalContext.prototype.dict_literal = function() {
    return this.getTypedRuleContext(Dict_literalContext,0);
};

Collection_literalContext.prototype.tuple_literal = function() {
    return this.getTypedRuleContext(Tuple_literalContext,0);
};

Collection_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCollection_literal(this);
	}
};

Collection_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCollection_literal(this);
	}
};




EParser.prototype.collection_literal = function() {

    var localctx = new Collection_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, EParser.RULE_collection_literal);
    try {
        this.state = 1852;
        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1847; 
            this.range_literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1848; 
            this.list_literal();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1849; 
            this.set_literal();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1850; 
            this.dict_literal();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1851; 
            this.tuple_literal();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Tuple_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_tuple_literal;
    return this;
}

Tuple_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tuple_literalContext.prototype.constructor = Tuple_literalContext;

Tuple_literalContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Tuple_literalContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Tuple_literalContext.prototype.MUTABLE = function() {
    return this.getToken(EParser.MUTABLE, 0);
};

Tuple_literalContext.prototype.expression_tuple = function() {
    return this.getTypedRuleContext(Expression_tupleContext,0);
};

Tuple_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTuple_literal(this);
	}
};

Tuple_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTuple_literal(this);
	}
};




EParser.prototype.tuple_literal = function() {

    var localctx = new Tuple_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, EParser.RULE_tuple_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1855;
        _la = this._input.LA(1);
        if(_la===EParser.MUTABLE) {
            this.state = 1854;
            this.match(EParser.MUTABLE);
        }

        this.state = 1857;
        this.match(EParser.LPAR);
        this.state = 1859;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << EParser.LPAR) | (1 << EParser.LBRAK) | (1 << EParser.LCURL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (EParser.MINUS - 33)) | (1 << (EParser.LT - 33)) | (1 << (EParser.METHOD_T - 33)) | (1 << (EParser.CODE - 33)) | (1 << (EParser.DOCUMENT - 33)) | (1 << (EParser.BLOB - 33)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (EParser.EXECUTE - 98)) | (1 << (EParser.FETCH - 98)) | (1 << (EParser.INVOKE - 98)) | (1 << (EParser.MUTABLE - 98)) | (1 << (EParser.NOT - 98)) | (1 << (EParser.NOTHING - 98)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (EParser.READ - 132)) | (1 << (EParser.SELF - 132)) | (1 << (EParser.SORTED - 132)) | (1 << (EParser.THIS - 132)) | (1 << (EParser.BOOLEAN_LITERAL - 132)) | (1 << (EParser.CHAR_LITERAL - 132)) | (1 << (EParser.MIN_INTEGER - 132)) | (1 << (EParser.MAX_INTEGER - 132)) | (1 << (EParser.SYMBOL_IDENTIFIER - 132)) | (1 << (EParser.TYPE_IDENTIFIER - 132)) | (1 << (EParser.VARIABLE_IDENTIFIER - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (EParser.TEXT_LITERAL - 165)) | (1 << (EParser.UUID_LITERAL - 165)) | (1 << (EParser.INTEGER_LITERAL - 165)) | (1 << (EParser.HEXA_LITERAL - 165)) | (1 << (EParser.DECIMAL_LITERAL - 165)) | (1 << (EParser.DATETIME_LITERAL - 165)) | (1 << (EParser.TIME_LITERAL - 165)) | (1 << (EParser.DATE_LITERAL - 165)) | (1 << (EParser.PERIOD_LITERAL - 165)))) !== 0)) {
            this.state = 1858; 
            this.expression_tuple();
        }

        this.state = 1861;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dict_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_dict_literal;
    return this;
}

Dict_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dict_literalContext.prototype.constructor = Dict_literalContext;

Dict_literalContext.prototype.LCURL = function() {
    return this.getToken(EParser.LCURL, 0);
};

Dict_literalContext.prototype.RCURL = function() {
    return this.getToken(EParser.RCURL, 0);
};

Dict_literalContext.prototype.MUTABLE = function() {
    return this.getToken(EParser.MUTABLE, 0);
};

Dict_literalContext.prototype.dict_entry_list = function() {
    return this.getTypedRuleContext(Dict_entry_listContext,0);
};

Dict_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDict_literal(this);
	}
};

Dict_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDict_literal(this);
	}
};




EParser.prototype.dict_literal = function() {

    var localctx = new Dict_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, EParser.RULE_dict_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1864;
        _la = this._input.LA(1);
        if(_la===EParser.MUTABLE) {
            this.state = 1863;
            this.match(EParser.MUTABLE);
        }

        this.state = 1866;
        this.match(EParser.LCURL);
        this.state = 1868;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << EParser.LPAR) | (1 << EParser.LBRAK) | (1 << EParser.LCURL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (EParser.MINUS - 33)) | (1 << (EParser.LT - 33)) | (1 << (EParser.METHOD_T - 33)) | (1 << (EParser.CODE - 33)) | (1 << (EParser.DOCUMENT - 33)) | (1 << (EParser.BLOB - 33)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (EParser.EXECUTE - 98)) | (1 << (EParser.FETCH - 98)) | (1 << (EParser.INVOKE - 98)) | (1 << (EParser.MUTABLE - 98)) | (1 << (EParser.NOT - 98)) | (1 << (EParser.NOTHING - 98)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (EParser.READ - 132)) | (1 << (EParser.SELF - 132)) | (1 << (EParser.SORTED - 132)) | (1 << (EParser.THIS - 132)) | (1 << (EParser.BOOLEAN_LITERAL - 132)) | (1 << (EParser.CHAR_LITERAL - 132)) | (1 << (EParser.MIN_INTEGER - 132)) | (1 << (EParser.MAX_INTEGER - 132)) | (1 << (EParser.SYMBOL_IDENTIFIER - 132)) | (1 << (EParser.TYPE_IDENTIFIER - 132)) | (1 << (EParser.VARIABLE_IDENTIFIER - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (EParser.TEXT_LITERAL - 165)) | (1 << (EParser.UUID_LITERAL - 165)) | (1 << (EParser.INTEGER_LITERAL - 165)) | (1 << (EParser.HEXA_LITERAL - 165)) | (1 << (EParser.DECIMAL_LITERAL - 165)) | (1 << (EParser.DATETIME_LITERAL - 165)) | (1 << (EParser.TIME_LITERAL - 165)) | (1 << (EParser.DATE_LITERAL - 165)) | (1 << (EParser.PERIOD_LITERAL - 165)))) !== 0)) {
            this.state = 1867; 
            this.dict_entry_list();
        }

        this.state = 1870;
        this.match(EParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_tupleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_expression_tuple;
    return this;
}

Expression_tupleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_tupleContext.prototype.constructor = Expression_tupleContext;

Expression_tupleContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Expression_tupleContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COMMA);
    } else {
        return this.getToken(EParser.COMMA, i);
    }
};


Expression_tupleContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterExpression_tuple(this);
	}
};

Expression_tupleContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitExpression_tuple(this);
	}
};




EParser.prototype.expression_tuple = function() {

    var localctx = new Expression_tupleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, EParser.RULE_expression_tuple);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1872; 
        this.expression(0);
        this.state = 1873;
        this.match(EParser.COMMA);
        this.state = 1882;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << EParser.LPAR) | (1 << EParser.LBRAK) | (1 << EParser.LCURL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (EParser.MINUS - 33)) | (1 << (EParser.LT - 33)) | (1 << (EParser.METHOD_T - 33)) | (1 << (EParser.CODE - 33)) | (1 << (EParser.DOCUMENT - 33)) | (1 << (EParser.BLOB - 33)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (EParser.EXECUTE - 98)) | (1 << (EParser.FETCH - 98)) | (1 << (EParser.INVOKE - 98)) | (1 << (EParser.MUTABLE - 98)) | (1 << (EParser.NOT - 98)) | (1 << (EParser.NOTHING - 98)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (EParser.READ - 132)) | (1 << (EParser.SELF - 132)) | (1 << (EParser.SORTED - 132)) | (1 << (EParser.THIS - 132)) | (1 << (EParser.BOOLEAN_LITERAL - 132)) | (1 << (EParser.CHAR_LITERAL - 132)) | (1 << (EParser.MIN_INTEGER - 132)) | (1 << (EParser.MAX_INTEGER - 132)) | (1 << (EParser.SYMBOL_IDENTIFIER - 132)) | (1 << (EParser.TYPE_IDENTIFIER - 132)) | (1 << (EParser.VARIABLE_IDENTIFIER - 132)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (EParser.TEXT_LITERAL - 165)) | (1 << (EParser.UUID_LITERAL - 165)) | (1 << (EParser.INTEGER_LITERAL - 165)) | (1 << (EParser.HEXA_LITERAL - 165)) | (1 << (EParser.DECIMAL_LITERAL - 165)) | (1 << (EParser.DATETIME_LITERAL - 165)) | (1 << (EParser.TIME_LITERAL - 165)) | (1 << (EParser.DATE_LITERAL - 165)) | (1 << (EParser.PERIOD_LITERAL - 165)))) !== 0)) {
            this.state = 1874; 
            this.expression(0);
            this.state = 1879;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===EParser.COMMA) {
                this.state = 1875;
                this.match(EParser.COMMA);
                this.state = 1876; 
                this.expression(0);
                this.state = 1881;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dict_entry_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_dict_entry_list;
    return this;
}

Dict_entry_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dict_entry_listContext.prototype.constructor = Dict_entry_listContext;

Dict_entry_listContext.prototype.dict_entry = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dict_entryContext);
    } else {
        return this.getTypedRuleContext(Dict_entryContext,i);
    }
};

Dict_entry_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COMMA);
    } else {
        return this.getToken(EParser.COMMA, i);
    }
};


Dict_entry_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDict_entry_list(this);
	}
};

Dict_entry_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDict_entry_list(this);
	}
};




EParser.prototype.dict_entry_list = function() {

    var localctx = new Dict_entry_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, EParser.RULE_dict_entry_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1884; 
        this.dict_entry();
        this.state = 1889;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===EParser.COMMA) {
            this.state = 1885;
            this.match(EParser.COMMA);
            this.state = 1886; 
            this.dict_entry();
            this.state = 1891;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dict_entryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_dict_entry;
    this.key = null; // ExpressionContext
    this.value = null; // ExpressionContext
    return this;
}

Dict_entryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dict_entryContext.prototype.constructor = Dict_entryContext;

Dict_entryContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Dict_entryContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Dict_entryContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDict_entry(this);
	}
};

Dict_entryContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDict_entry(this);
	}
};




EParser.prototype.dict_entry = function() {

    var localctx = new Dict_entryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, EParser.RULE_dict_entry);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1892; 
        localctx.key = this.expression(0);
        this.state = 1893;
        this.match(EParser.COLON);
        this.state = 1894; 
        localctx.value = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Slice_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_slice_arguments;
    return this;
}

Slice_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Slice_argumentsContext.prototype.constructor = Slice_argumentsContext;


 
Slice_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SliceFirstAndLastContext(parser, ctx) {
	Slice_argumentsContext.call(this, parser);
    this.first = null; // ExpressionContext;
    this.last = null; // ExpressionContext;
    Slice_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceFirstAndLastContext.prototype = Object.create(Slice_argumentsContext.prototype);
SliceFirstAndLastContext.prototype.constructor = SliceFirstAndLastContext;

SliceFirstAndLastContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

SliceFirstAndLastContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
SliceFirstAndLastContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSliceFirstAndLast(this);
	}
};

SliceFirstAndLastContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSliceFirstAndLast(this);
	}
};


function SliceLastOnlyContext(parser, ctx) {
	Slice_argumentsContext.call(this, parser);
    this.last = null; // ExpressionContext;
    Slice_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceLastOnlyContext.prototype = Object.create(Slice_argumentsContext.prototype);
SliceLastOnlyContext.prototype.constructor = SliceLastOnlyContext;

SliceLastOnlyContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

SliceLastOnlyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SliceLastOnlyContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSliceLastOnly(this);
	}
};

SliceLastOnlyContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSliceLastOnly(this);
	}
};


function SliceFirstOnlyContext(parser, ctx) {
	Slice_argumentsContext.call(this, parser);
    this.first = null; // ExpressionContext;
    Slice_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceFirstOnlyContext.prototype = Object.create(Slice_argumentsContext.prototype);
SliceFirstOnlyContext.prototype.constructor = SliceFirstOnlyContext;

SliceFirstOnlyContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

SliceFirstOnlyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SliceFirstOnlyContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSliceFirstOnly(this);
	}
};

SliceFirstOnlyContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSliceFirstOnly(this);
	}
};



EParser.prototype.slice_arguments = function() {

    var localctx = new Slice_argumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, EParser.RULE_slice_arguments);
    try {
        this.state = 1905;
        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SliceFirstAndLastContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1896; 
            localctx.first = this.expression(0);
            this.state = 1897;
            this.match(EParser.COLON);
            this.state = 1898; 
            localctx.last = this.expression(0);
            break;

        case 2:
            localctx = new SliceFirstOnlyContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1900; 
            localctx.first = this.expression(0);
            this.state = 1901;
            this.match(EParser.COLON);
            break;

        case 3:
            localctx = new SliceLastOnlyContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1903;
            this.match(EParser.COLON);
            this.state = 1904; 
            localctx.last = this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assign_variable_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_assign_variable_statement;
    return this;
}

Assign_variable_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assign_variable_statementContext.prototype.constructor = Assign_variable_statementContext;

Assign_variable_statementContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Assign_variable_statementContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Assign_variable_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Assign_variable_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAssign_variable_statement(this);
	}
};

Assign_variable_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAssign_variable_statement(this);
	}
};




EParser.prototype.assign_variable_statement = function() {

    var localctx = new Assign_variable_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, EParser.RULE_assign_variable_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1907; 
        this.variable_identifier();
        this.state = 1908; 
        this.assign();
        this.state = 1909; 
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assignable_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_assignable_instance;
    return this;
}

Assignable_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assignable_instanceContext.prototype.constructor = Assignable_instanceContext;


 
Assignable_instanceContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ChildInstanceContext(parser, ctx) {
	Assignable_instanceContext.call(this, parser);
    Assignable_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ChildInstanceContext.prototype = Object.create(Assignable_instanceContext.prototype);
ChildInstanceContext.prototype.constructor = ChildInstanceContext;

ChildInstanceContext.prototype.assignable_instance = function() {
    return this.getTypedRuleContext(Assignable_instanceContext,0);
};

ChildInstanceContext.prototype.child_instance = function() {
    return this.getTypedRuleContext(Child_instanceContext,0);
};
ChildInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterChildInstance(this);
	}
};

ChildInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitChildInstance(this);
	}
};


function RootInstanceContext(parser, ctx) {
	Assignable_instanceContext.call(this, parser);
    Assignable_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RootInstanceContext.prototype = Object.create(Assignable_instanceContext.prototype);
RootInstanceContext.prototype.constructor = RootInstanceContext;

RootInstanceContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
RootInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterRootInstance(this);
	}
};

RootInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitRootInstance(this);
	}
};



EParser.prototype.assignable_instance = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Assignable_instanceContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 278;
    this.enterRecursionRule(localctx, 278, EParser.RULE_assignable_instance, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new RootInstanceContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1912; 
        this.variable_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1918;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,155,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ChildInstanceContext(this, new Assignable_instanceContext(this, _parentctx, _parentState));
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_assignable_instance);
                this.state = 1914;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1915; 
                this.child_instance(); 
            }
            this.state = 1920;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,155,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Is_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_is_expression;
    return this;
}

Is_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Is_expressionContext.prototype.constructor = Is_expressionContext;


 
Is_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function IsATypeExpressionContext(parser, ctx) {
	Is_expressionContext.call(this, parser);
    Is_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsATypeExpressionContext.prototype = Object.create(Is_expressionContext.prototype);
IsATypeExpressionContext.prototype.constructor = IsATypeExpressionContext;

IsATypeExpressionContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

IsATypeExpressionContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};
IsATypeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIsATypeExpression(this);
	}
};

IsATypeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIsATypeExpression(this);
	}
};


function IsOtherExpressionContext(parser, ctx) {
	Is_expressionContext.call(this, parser);
    Is_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsOtherExpressionContext.prototype = Object.create(Is_expressionContext.prototype);
IsOtherExpressionContext.prototype.constructor = IsOtherExpressionContext;

IsOtherExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
IsOtherExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIsOtherExpression(this);
	}
};

IsOtherExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIsOtherExpression(this);
	}
};



EParser.prototype.is_expression = function() {

    var localctx = new Is_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, EParser.RULE_is_expression);
    try {
        this.state = 1925;
        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
        switch(la_) {
        case 1:
            localctx = new IsATypeExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1921;
            if (!( this.willBeAOrAn())) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.willBeAOrAn()");
            }
            this.state = 1922;
            this.match(EParser.VARIABLE_IDENTIFIER);
            this.state = 1923; 
            this.category_or_any_type();
            break;

        case 2:
            localctx = new IsOtherExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1924; 
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Read_all_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_read_all_expression;
    this.source = null; // ExpressionContext
    return this;
}

Read_all_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Read_all_expressionContext.prototype.constructor = Read_all_expressionContext;

Read_all_expressionContext.prototype.READ = function() {
    return this.getToken(EParser.READ, 0);
};

Read_all_expressionContext.prototype.ALL = function() {
    return this.getToken(EParser.ALL, 0);
};

Read_all_expressionContext.prototype.FROM = function() {
    return this.getToken(EParser.FROM, 0);
};

Read_all_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Read_all_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterRead_all_expression(this);
	}
};

Read_all_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitRead_all_expression(this);
	}
};




EParser.prototype.read_all_expression = function() {

    var localctx = new Read_all_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, EParser.RULE_read_all_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1927;
        this.match(EParser.READ);
        this.state = 1928;
        this.match(EParser.ALL);
        this.state = 1929;
        this.match(EParser.FROM);
        this.state = 1930; 
        localctx.source = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Read_one_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_read_one_expression;
    this.source = null; // ExpressionContext
    return this;
}

Read_one_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Read_one_expressionContext.prototype.constructor = Read_one_expressionContext;

Read_one_expressionContext.prototype.READ = function() {
    return this.getToken(EParser.READ, 0);
};

Read_one_expressionContext.prototype.ONE = function() {
    return this.getToken(EParser.ONE, 0);
};

Read_one_expressionContext.prototype.FROM = function() {
    return this.getToken(EParser.FROM, 0);
};

Read_one_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Read_one_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterRead_one_expression(this);
	}
};

Read_one_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitRead_one_expression(this);
	}
};




EParser.prototype.read_one_expression = function() {

    var localctx = new Read_one_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, EParser.RULE_read_one_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1932;
        this.match(EParser.READ);
        this.state = 1933;
        this.match(EParser.ONE);
        this.state = 1934;
        this.match(EParser.FROM);
        this.state = 1935; 
        localctx.source = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_by_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_order_by_list;
    return this;
}

Order_by_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_by_listContext.prototype.constructor = Order_by_listContext;

Order_by_listContext.prototype.order_by = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Order_byContext);
    } else {
        return this.getTypedRuleContext(Order_byContext,i);
    }
};

Order_by_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COMMA);
    } else {
        return this.getToken(EParser.COMMA, i);
    }
};


Order_by_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOrder_by_list(this);
	}
};

Order_by_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOrder_by_list(this);
	}
};




EParser.prototype.order_by_list = function() {

    var localctx = new Order_by_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, EParser.RULE_order_by_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1937; 
        this.order_by();
        this.state = 1942;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,157,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1938;
                this.match(EParser.COMMA);
                this.state = 1939; 
                this.order_by(); 
            }
            this.state = 1944;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,157,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_byContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_order_by;
    return this;
}

Order_byContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_byContext.prototype.constructor = Order_byContext;

Order_byContext.prototype.variable_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_identifierContext);
    } else {
        return this.getTypedRuleContext(Variable_identifierContext,i);
    }
};

Order_byContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.DOT);
    } else {
        return this.getToken(EParser.DOT, i);
    }
};


Order_byContext.prototype.ASC = function() {
    return this.getToken(EParser.ASC, 0);
};

Order_byContext.prototype.DESC = function() {
    return this.getToken(EParser.DESC, 0);
};

Order_byContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOrder_by(this);
	}
};

Order_byContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOrder_by(this);
	}
};




EParser.prototype.order_by = function() {

    var localctx = new Order_byContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, EParser.RULE_order_by);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1945; 
        this.variable_identifier();
        this.state = 1950;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,158,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1946;
                this.match(EParser.DOT);
                this.state = 1947; 
                this.variable_identifier(); 
            }
            this.state = 1952;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,158,this._ctx);
        }

        this.state = 1954;
        var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
        if(la_===1) {
            this.state = 1953;
            _la = this._input.LA(1);
            if(!(_la===EParser.ASC || _la===EParser.DESC)) {
            this._errHandler.recoverInline(this);
            }
            this.consume();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_operator;
    return this;
}

OperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorContext.prototype.constructor = OperatorContext;


 
OperatorContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function OperatorPlusContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorPlusContext.prototype = Object.create(OperatorContext.prototype);
OperatorPlusContext.prototype.constructor = OperatorPlusContext;

OperatorPlusContext.prototype.PLUS = function() {
    return this.getToken(EParser.PLUS, 0);
};
OperatorPlusContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOperatorPlus(this);
	}
};

OperatorPlusContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOperatorPlus(this);
	}
};


function OperatorDivideContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorDivideContext.prototype = Object.create(OperatorContext.prototype);
OperatorDivideContext.prototype.constructor = OperatorDivideContext;

OperatorDivideContext.prototype.divide = function() {
    return this.getTypedRuleContext(DivideContext,0);
};
OperatorDivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOperatorDivide(this);
	}
};

OperatorDivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOperatorDivide(this);
	}
};


function OperatorIDivideContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorIDivideContext.prototype = Object.create(OperatorContext.prototype);
OperatorIDivideContext.prototype.constructor = OperatorIDivideContext;

OperatorIDivideContext.prototype.idivide = function() {
    return this.getTypedRuleContext(IdivideContext,0);
};
OperatorIDivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOperatorIDivide(this);
	}
};

OperatorIDivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOperatorIDivide(this);
	}
};


function OperatorMultiplyContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorMultiplyContext.prototype = Object.create(OperatorContext.prototype);
OperatorMultiplyContext.prototype.constructor = OperatorMultiplyContext;

OperatorMultiplyContext.prototype.multiply = function() {
    return this.getTypedRuleContext(MultiplyContext,0);
};
OperatorMultiplyContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOperatorMultiply(this);
	}
};

OperatorMultiplyContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOperatorMultiply(this);
	}
};


function OperatorMinusContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorMinusContext.prototype = Object.create(OperatorContext.prototype);
OperatorMinusContext.prototype.constructor = OperatorMinusContext;

OperatorMinusContext.prototype.MINUS = function() {
    return this.getToken(EParser.MINUS, 0);
};
OperatorMinusContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOperatorMinus(this);
	}
};

OperatorMinusContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOperatorMinus(this);
	}
};


function OperatorModuloContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorModuloContext.prototype = Object.create(OperatorContext.prototype);
OperatorModuloContext.prototype.constructor = OperatorModuloContext;

OperatorModuloContext.prototype.modulo = function() {
    return this.getTypedRuleContext(ModuloContext,0);
};
OperatorModuloContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOperatorModulo(this);
	}
};

OperatorModuloContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOperatorModulo(this);
	}
};



EParser.prototype.operator = function() {

    var localctx = new OperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, EParser.RULE_operator);
    try {
        this.state = 1962;
        switch(this._input.LA(1)) {
        case EParser.PLUS:
            localctx = new OperatorPlusContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1956;
            this.match(EParser.PLUS);
            break;
        case EParser.MINUS:
            localctx = new OperatorMinusContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1957;
            this.match(EParser.MINUS);
            break;
        case EParser.STAR:
            localctx = new OperatorMultiplyContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1958; 
            this.multiply();
            break;
        case EParser.SLASH:
            localctx = new OperatorDivideContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1959; 
            this.divide();
            break;
        case EParser.BSLASH:
            localctx = new OperatorIDivideContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1960; 
            this.idivide();
            break;
        case EParser.PERCENT:
        case EParser.MODULO:
            localctx = new OperatorModuloContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1961; 
            this.modulo();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function New_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_new_token;
    this.i1 = null; // Token
    return this;
}

New_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
New_tokenContext.prototype.constructor = New_tokenContext;

New_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

New_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNew_token(this);
	}
};

New_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNew_token(this);
	}
};




EParser.prototype.new_token = function() {

    var localctx = new New_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, EParser.RULE_new_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1964;
        localctx.i1 = this.match(EParser.VARIABLE_IDENTIFIER);
        this.state = 1965;
        if (!( this.isText(localctx.i1,"new"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"new\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Key_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_key_token;
    this.i1 = null; // Token
    return this;
}

Key_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Key_tokenContext.prototype.constructor = Key_tokenContext;

Key_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

Key_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterKey_token(this);
	}
};

Key_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitKey_token(this);
	}
};




EParser.prototype.key_token = function() {

    var localctx = new Key_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, EParser.RULE_key_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1967;
        localctx.i1 = this.match(EParser.VARIABLE_IDENTIFIER);
        this.state = 1968;
        if (!( this.isText(localctx.i1,"key"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"key\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Module_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_module_token;
    this.i1 = null; // Token
    return this;
}

Module_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_tokenContext.prototype.constructor = Module_tokenContext;

Module_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

Module_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterModule_token(this);
	}
};

Module_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitModule_token(this);
	}
};




EParser.prototype.module_token = function() {

    var localctx = new Module_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, EParser.RULE_module_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1970;
        localctx.i1 = this.match(EParser.VARIABLE_IDENTIFIER);
        this.state = 1971;
        if (!( this.isText(localctx.i1,"module"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"module\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Value_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_value_token;
    this.i1 = null; // Token
    return this;
}

Value_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Value_tokenContext.prototype.constructor = Value_tokenContext;

Value_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

Value_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterValue_token(this);
	}
};

Value_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitValue_token(this);
	}
};




EParser.prototype.value_token = function() {

    var localctx = new Value_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, EParser.RULE_value_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1973;
        localctx.i1 = this.match(EParser.VARIABLE_IDENTIFIER);
        this.state = 1974;
        if (!( this.isText(localctx.i1,"value"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"value\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Symbols_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_symbols_token;
    this.i1 = null; // Token
    return this;
}

Symbols_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Symbols_tokenContext.prototype.constructor = Symbols_tokenContext;

Symbols_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

Symbols_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSymbols_token(this);
	}
};

Symbols_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSymbols_token(this);
	}
};




EParser.prototype.symbols_token = function() {

    var localctx = new Symbols_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, EParser.RULE_symbols_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1976;
        localctx.i1 = this.match(EParser.VARIABLE_IDENTIFIER);
        this.state = 1977;
        if (!( this.isText(localctx.i1,"symbols"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"symbols\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_assign;
    return this;
}

AssignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignContext.prototype.constructor = AssignContext;

AssignContext.prototype.EQ = function() {
    return this.getToken(EParser.EQ, 0);
};

AssignContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAssign(this);
	}
};

AssignContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAssign(this);
	}
};




EParser.prototype.assign = function() {

    var localctx = new AssignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, EParser.RULE_assign);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1979;
        this.match(EParser.EQ);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiplyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_multiply;
    return this;
}

MultiplyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplyContext.prototype.constructor = MultiplyContext;

MultiplyContext.prototype.STAR = function() {
    return this.getToken(EParser.STAR, 0);
};

MultiplyContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMultiply(this);
	}
};

MultiplyContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMultiply(this);
	}
};




EParser.prototype.multiply = function() {

    var localctx = new MultiplyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, EParser.RULE_multiply);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1981;
        this.match(EParser.STAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DivideContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_divide;
    return this;
}

DivideContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DivideContext.prototype.constructor = DivideContext;

DivideContext.prototype.SLASH = function() {
    return this.getToken(EParser.SLASH, 0);
};

DivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDivide(this);
	}
};

DivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDivide(this);
	}
};




EParser.prototype.divide = function() {

    var localctx = new DivideContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, EParser.RULE_divide);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1983;
        this.match(EParser.SLASH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdivideContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_idivide;
    return this;
}

IdivideContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdivideContext.prototype.constructor = IdivideContext;

IdivideContext.prototype.BSLASH = function() {
    return this.getToken(EParser.BSLASH, 0);
};

IdivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIdivide(this);
	}
};

IdivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIdivide(this);
	}
};




EParser.prototype.idivide = function() {

    var localctx = new IdivideContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, EParser.RULE_idivide);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1985;
        this.match(EParser.BSLASH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuloContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_modulo;
    return this;
}

ModuloContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuloContext.prototype.constructor = ModuloContext;

ModuloContext.prototype.PERCENT = function() {
    return this.getToken(EParser.PERCENT, 0);
};

ModuloContext.prototype.MODULO = function() {
    return this.getToken(EParser.MODULO, 0);
};

ModuloContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterModulo(this);
	}
};

ModuloContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitModulo(this);
	}
};




EParser.prototype.modulo = function() {

    var localctx = new ModuloContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, EParser.RULE_modulo);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1987;
        _la = this._input.LA(1);
        if(!(_la===EParser.PERCENT || _la===EParser.MODULO)) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_statement;
    return this;
}

Javascript_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_statementContext.prototype.constructor = Javascript_statementContext;


 
Javascript_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavascriptStatementContext(parser, ctx) {
	Javascript_statementContext.call(this, parser);
    this.exp = null; // Javascript_expressionContext;
    Javascript_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptStatementContext.prototype = Object.create(Javascript_statementContext.prototype);
JavascriptStatementContext.prototype.constructor = JavascriptStatementContext;

JavascriptStatementContext.prototype.SEMI = function() {
    return this.getToken(EParser.SEMI, 0);
};

JavascriptStatementContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptStatement(this);
	}
};

JavascriptStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptStatement(this);
	}
};


function JavascriptReturnStatementContext(parser, ctx) {
	Javascript_statementContext.call(this, parser);
    this.exp = null; // Javascript_expressionContext;
    Javascript_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptReturnStatementContext.prototype = Object.create(Javascript_statementContext.prototype);
JavascriptReturnStatementContext.prototype.constructor = JavascriptReturnStatementContext;

JavascriptReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(EParser.RETURN, 0);
};

JavascriptReturnStatementContext.prototype.SEMI = function() {
    return this.getToken(EParser.SEMI, 0);
};

JavascriptReturnStatementContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptReturnStatement(this);
	}
};

JavascriptReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptReturnStatement(this);
	}
};



EParser.prototype.javascript_statement = function() {

    var localctx = new Javascript_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, EParser.RULE_javascript_statement);
    try {
        this.state = 1996;
        switch(this._input.LA(1)) {
        case EParser.RETURN:
            localctx = new JavascriptReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1989;
            this.match(EParser.RETURN);
            this.state = 1990; 
            localctx.exp = this.javascript_expression(0);
            this.state = 1991;
            this.match(EParser.SEMI);
            break;
        case EParser.LPAR:
        case EParser.LBRAK:
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.READ:
        case EParser.SELF:
        case EParser.TEST:
        case EParser.THIS:
        case EParser.WRITE:
        case EParser.BOOLEAN_LITERAL:
        case EParser.CHAR_LITERAL:
        case EParser.SYMBOL_IDENTIFIER:
        case EParser.TYPE_IDENTIFIER:
        case EParser.VARIABLE_IDENTIFIER:
        case EParser.DOLLAR_IDENTIFIER:
        case EParser.TEXT_LITERAL:
        case EParser.INTEGER_LITERAL:
        case EParser.DECIMAL_LITERAL:
            localctx = new JavascriptStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1993; 
            localctx.exp = this.javascript_expression(0);
            this.state = 1994;
            this.match(EParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_expression;
    return this;
}

Javascript_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_expressionContext.prototype.constructor = Javascript_expressionContext;


 
Javascript_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavascriptSelectorExpressionContext(parser, ctx) {
	Javascript_expressionContext.call(this, parser);
    this.parent = null; // Javascript_expressionContext;
    this.child = null; // Javascript_selector_expressionContext;
    Javascript_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptSelectorExpressionContext.prototype = Object.create(Javascript_expressionContext.prototype);
JavascriptSelectorExpressionContext.prototype.constructor = JavascriptSelectorExpressionContext;

JavascriptSelectorExpressionContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};

JavascriptSelectorExpressionContext.prototype.javascript_selector_expression = function() {
    return this.getTypedRuleContext(Javascript_selector_expressionContext,0);
};
JavascriptSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptSelectorExpression(this);
	}
};

JavascriptSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptSelectorExpression(this);
	}
};


function JavascriptPrimaryExpressionContext(parser, ctx) {
	Javascript_expressionContext.call(this, parser);
    this.exp = null; // Javascript_primary_expressionContext;
    Javascript_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptPrimaryExpressionContext.prototype = Object.create(Javascript_expressionContext.prototype);
JavascriptPrimaryExpressionContext.prototype.constructor = JavascriptPrimaryExpressionContext;

JavascriptPrimaryExpressionContext.prototype.javascript_primary_expression = function() {
    return this.getTypedRuleContext(Javascript_primary_expressionContext,0);
};
JavascriptPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptPrimaryExpression(this);
	}
};

JavascriptPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptPrimaryExpression(this);
	}
};



EParser.prototype.javascript_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Javascript_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 314;
    this.enterRecursionRule(localctx, 314, EParser.RULE_javascript_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavascriptPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1999; 
        localctx.exp = this.javascript_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2005;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,162,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavascriptSelectorExpressionContext(this, new Javascript_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_javascript_expression);
                this.state = 2001;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2002; 
                localctx.child = this.javascript_selector_expression(); 
            }
            this.state = 2007;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,162,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Javascript_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_primary_expression;
    return this;
}

Javascript_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_primary_expressionContext.prototype.constructor = Javascript_primary_expressionContext;

Javascript_primary_expressionContext.prototype.javascript_this_expression = function() {
    return this.getTypedRuleContext(Javascript_this_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_new_expression = function() {
    return this.getTypedRuleContext(Javascript_new_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_parenthesis_expression = function() {
    return this.getTypedRuleContext(Javascript_parenthesis_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_identifier_expression = function() {
    return this.getTypedRuleContext(Javascript_identifier_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_literal_expression = function() {
    return this.getTypedRuleContext(Javascript_literal_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_method_expression = function() {
    return this.getTypedRuleContext(Javascript_method_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_item_expression = function() {
    return this.getTypedRuleContext(Javascript_item_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascript_primary_expression(this);
	}
};

Javascript_primary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascript_primary_expression(this);
	}
};




EParser.prototype.javascript_primary_expression = function() {

    var localctx = new Javascript_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, EParser.RULE_javascript_primary_expression);
    try {
        this.state = 2015;
        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2008; 
            this.javascript_this_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2009; 
            this.javascript_new_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2010; 
            this.javascript_parenthesis_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2011; 
            this.javascript_identifier_expression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2012; 
            this.javascript_literal_expression();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2013; 
            this.javascript_method_expression();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2014; 
            this.javascript_item_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_this_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_this_expression;
    return this;
}

Javascript_this_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_this_expressionContext.prototype.constructor = Javascript_this_expressionContext;

Javascript_this_expressionContext.prototype.this_expression = function() {
    return this.getTypedRuleContext(This_expressionContext,0);
};

Javascript_this_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascript_this_expression(this);
	}
};

Javascript_this_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascript_this_expression(this);
	}
};




EParser.prototype.javascript_this_expression = function() {

    var localctx = new Javascript_this_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, EParser.RULE_javascript_this_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2017; 
        this.this_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_new_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_new_expression;
    return this;
}

Javascript_new_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_new_expressionContext.prototype.constructor = Javascript_new_expressionContext;

Javascript_new_expressionContext.prototype.new_token = function() {
    return this.getTypedRuleContext(New_tokenContext,0);
};

Javascript_new_expressionContext.prototype.javascript_method_expression = function() {
    return this.getTypedRuleContext(Javascript_method_expressionContext,0);
};

Javascript_new_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascript_new_expression(this);
	}
};

Javascript_new_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascript_new_expression(this);
	}
};




EParser.prototype.javascript_new_expression = function() {

    var localctx = new Javascript_new_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, EParser.RULE_javascript_new_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2019; 
        this.new_token();
        this.state = 2020; 
        this.javascript_method_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_selector_expression;
    return this;
}

Javascript_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_selector_expressionContext.prototype.constructor = Javascript_selector_expressionContext;


 
Javascript_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaScriptMemberExpressionContext(parser, ctx) {
	Javascript_selector_expressionContext.call(this, parser);
    this.name = null; // Javascript_identifierContext;
    Javascript_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptMemberExpressionContext.prototype = Object.create(Javascript_selector_expressionContext.prototype);
JavaScriptMemberExpressionContext.prototype.constructor = JavaScriptMemberExpressionContext;

JavaScriptMemberExpressionContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

JavaScriptMemberExpressionContext.prototype.javascript_identifier = function() {
    return this.getTypedRuleContext(Javascript_identifierContext,0);
};
JavaScriptMemberExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaScriptMemberExpression(this);
	}
};

JavaScriptMemberExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaScriptMemberExpression(this);
	}
};


function JavaScriptItemExpressionContext(parser, ctx) {
	Javascript_selector_expressionContext.call(this, parser);
    this.exp = null; // Javascript_item_expressionContext;
    Javascript_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptItemExpressionContext.prototype = Object.create(Javascript_selector_expressionContext.prototype);
JavaScriptItemExpressionContext.prototype.constructor = JavaScriptItemExpressionContext;

JavaScriptItemExpressionContext.prototype.javascript_item_expression = function() {
    return this.getTypedRuleContext(Javascript_item_expressionContext,0);
};
JavaScriptItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaScriptItemExpression(this);
	}
};

JavaScriptItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaScriptItemExpression(this);
	}
};


function JavaScriptMethodExpressionContext(parser, ctx) {
	Javascript_selector_expressionContext.call(this, parser);
    this.method = null; // Javascript_method_expressionContext;
    Javascript_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptMethodExpressionContext.prototype = Object.create(Javascript_selector_expressionContext.prototype);
JavaScriptMethodExpressionContext.prototype.constructor = JavaScriptMethodExpressionContext;

JavaScriptMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

JavaScriptMethodExpressionContext.prototype.javascript_method_expression = function() {
    return this.getTypedRuleContext(Javascript_method_expressionContext,0);
};
JavaScriptMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaScriptMethodExpression(this);
	}
};

JavaScriptMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaScriptMethodExpression(this);
	}
};



EParser.prototype.javascript_selector_expression = function() {

    var localctx = new Javascript_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, EParser.RULE_javascript_selector_expression);
    try {
        this.state = 2027;
        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
        switch(la_) {
        case 1:
            localctx = new JavaScriptMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2022;
            this.match(EParser.DOT);
            this.state = 2023; 
            localctx.method = this.javascript_method_expression();
            break;

        case 2:
            localctx = new JavaScriptMemberExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2024;
            this.match(EParser.DOT);
            this.state = 2025; 
            localctx.name = this.javascript_identifier();
            break;

        case 3:
            localctx = new JavaScriptItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2026; 
            localctx.exp = this.javascript_item_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_method_expression;
    this.name = null; // Javascript_identifierContext
    this.args = null; // Javascript_argumentsContext
    return this;
}

Javascript_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_method_expressionContext.prototype.constructor = Javascript_method_expressionContext;

Javascript_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Javascript_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Javascript_method_expressionContext.prototype.javascript_identifier = function() {
    return this.getTypedRuleContext(Javascript_identifierContext,0);
};

Javascript_method_expressionContext.prototype.javascript_arguments = function() {
    return this.getTypedRuleContext(Javascript_argumentsContext,0);
};

Javascript_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascript_method_expression(this);
	}
};

Javascript_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascript_method_expression(this);
	}
};




EParser.prototype.javascript_method_expression = function() {

    var localctx = new Javascript_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, EParser.RULE_javascript_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2029; 
        localctx.name = this.javascript_identifier();
        this.state = 2030;
        this.match(EParser.LPAR);
        this.state = 2032;
        _la = this._input.LA(1);
        if(_la===EParser.LPAR || _la===EParser.LBRAK || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (EParser.BOOLEAN - 50)) | (1 << (EParser.CHARACTER - 50)) | (1 << (EParser.TEXT - 50)) | (1 << (EParser.INTEGER - 50)) | (1 << (EParser.DECIMAL - 50)) | (1 << (EParser.DATE - 50)) | (1 << (EParser.TIME - 50)) | (1 << (EParser.DATETIME - 50)) | (1 << (EParser.PERIOD - 50)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (EParser.READ - 132)) | (1 << (EParser.SELF - 132)) | (1 << (EParser.TEST - 132)) | (1 << (EParser.THIS - 132)) | (1 << (EParser.WRITE - 132)) | (1 << (EParser.BOOLEAN_LITERAL - 132)) | (1 << (EParser.CHAR_LITERAL - 132)) | (1 << (EParser.SYMBOL_IDENTIFIER - 132)) | (1 << (EParser.TYPE_IDENTIFIER - 132)) | (1 << (EParser.VARIABLE_IDENTIFIER - 132)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (EParser.DOLLAR_IDENTIFIER - 164)) | (1 << (EParser.TEXT_LITERAL - 164)) | (1 << (EParser.INTEGER_LITERAL - 164)) | (1 << (EParser.DECIMAL_LITERAL - 164)))) !== 0)) {
            this.state = 2031; 
            localctx.args = this.javascript_arguments(0);
        }

        this.state = 2034;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_arguments;
    return this;
}

Javascript_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_argumentsContext.prototype.constructor = Javascript_argumentsContext;


 
Javascript_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavascriptArgumentListContext(parser, ctx) {
	Javascript_argumentsContext.call(this, parser);
    this.item = null; // Javascript_expressionContext;
    Javascript_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptArgumentListContext.prototype = Object.create(Javascript_argumentsContext.prototype);
JavascriptArgumentListContext.prototype.constructor = JavascriptArgumentListContext;

JavascriptArgumentListContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptArgumentList(this);
	}
};

JavascriptArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptArgumentList(this);
	}
};


function JavascriptArgumentListItemContext(parser, ctx) {
	Javascript_argumentsContext.call(this, parser);
    this.items = null; // Javascript_argumentsContext;
    this.item = null; // Javascript_expressionContext;
    Javascript_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptArgumentListItemContext.prototype = Object.create(Javascript_argumentsContext.prototype);
JavascriptArgumentListItemContext.prototype.constructor = JavascriptArgumentListItemContext;

JavascriptArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

JavascriptArgumentListItemContext.prototype.javascript_arguments = function() {
    return this.getTypedRuleContext(Javascript_argumentsContext,0);
};

JavascriptArgumentListItemContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptArgumentListItem(this);
	}
};

JavascriptArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptArgumentListItem(this);
	}
};



EParser.prototype.javascript_arguments = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Javascript_argumentsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 326;
    this.enterRecursionRule(localctx, 326, EParser.RULE_javascript_arguments, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavascriptArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2037; 
        localctx.item = this.javascript_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2044;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,166,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavascriptArgumentListItemContext(this, new Javascript_argumentsContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_javascript_arguments);
                this.state = 2039;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2040;
                this.match(EParser.COMMA);
                this.state = 2041; 
                localctx.item = this.javascript_expression(0); 
            }
            this.state = 2046;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,166,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Javascript_item_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_item_expression;
    this.exp = null; // Javascript_expressionContext
    return this;
}

Javascript_item_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_item_expressionContext.prototype.constructor = Javascript_item_expressionContext;

Javascript_item_expressionContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

Javascript_item_expressionContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

Javascript_item_expressionContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};

Javascript_item_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascript_item_expression(this);
	}
};

Javascript_item_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascript_item_expression(this);
	}
};




EParser.prototype.javascript_item_expression = function() {

    var localctx = new Javascript_item_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, EParser.RULE_javascript_item_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2047;
        this.match(EParser.LBRAK);
        this.state = 2048; 
        localctx.exp = this.javascript_expression(0);
        this.state = 2049;
        this.match(EParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_parenthesis_expression;
    this.exp = null; // Javascript_expressionContext
    return this;
}

Javascript_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_parenthesis_expressionContext.prototype.constructor = Javascript_parenthesis_expressionContext;

Javascript_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Javascript_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Javascript_parenthesis_expressionContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};

Javascript_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascript_parenthesis_expression(this);
	}
};

Javascript_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascript_parenthesis_expression(this);
	}
};




EParser.prototype.javascript_parenthesis_expression = function() {

    var localctx = new Javascript_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, EParser.RULE_javascript_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2051;
        this.match(EParser.LPAR);
        this.state = 2052; 
        localctx.exp = this.javascript_expression(0);
        this.state = 2053;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_identifier_expression;
    this.name = null; // Javascript_identifierContext
    return this;
}

Javascript_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_identifier_expressionContext.prototype.constructor = Javascript_identifier_expressionContext;

Javascript_identifier_expressionContext.prototype.javascript_identifier = function() {
    return this.getTypedRuleContext(Javascript_identifierContext,0);
};

Javascript_identifier_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascript_identifier_expression(this);
	}
};

Javascript_identifier_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascript_identifier_expression(this);
	}
};




EParser.prototype.javascript_identifier_expression = function() {

    var localctx = new Javascript_identifier_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, EParser.RULE_javascript_identifier_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2055; 
        localctx.name = this.javascript_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_literal_expression;
    return this;
}

Javascript_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_literal_expressionContext.prototype.constructor = Javascript_literal_expressionContext;


 
Javascript_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavascriptIntegerLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptIntegerLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptIntegerLiteralContext.prototype.constructor = JavascriptIntegerLiteralContext;

JavascriptIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(EParser.INTEGER_LITERAL, 0);
};
JavascriptIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptIntegerLiteral(this);
	}
};

JavascriptIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptIntegerLiteral(this);
	}
};


function JavascriptBooleanLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptBooleanLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptBooleanLiteralContext.prototype.constructor = JavascriptBooleanLiteralContext;

JavascriptBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(EParser.BOOLEAN_LITERAL, 0);
};
JavascriptBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptBooleanLiteral(this);
	}
};

JavascriptBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptBooleanLiteral(this);
	}
};


function JavascriptCharacterLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptCharacterLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptCharacterLiteralContext.prototype.constructor = JavascriptCharacterLiteralContext;

JavascriptCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(EParser.CHAR_LITERAL, 0);
};
JavascriptCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptCharacterLiteral(this);
	}
};

JavascriptCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptCharacterLiteral(this);
	}
};


function JavascriptTextLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptTextLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptTextLiteralContext.prototype.constructor = JavascriptTextLiteralContext;

JavascriptTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(EParser.TEXT_LITERAL, 0);
};
JavascriptTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptTextLiteral(this);
	}
};

JavascriptTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptTextLiteral(this);
	}
};


function JavascriptDecimalLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptDecimalLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptDecimalLiteralContext.prototype.constructor = JavascriptDecimalLiteralContext;

JavascriptDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(EParser.DECIMAL_LITERAL, 0);
};
JavascriptDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptDecimalLiteral(this);
	}
};

JavascriptDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptDecimalLiteral(this);
	}
};



EParser.prototype.javascript_literal_expression = function() {

    var localctx = new Javascript_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, EParser.RULE_javascript_literal_expression);
    try {
        this.state = 2062;
        switch(this._input.LA(1)) {
        case EParser.INTEGER_LITERAL:
            localctx = new JavascriptIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2057;
            localctx.t = this.match(EParser.INTEGER_LITERAL);
            break;
        case EParser.DECIMAL_LITERAL:
            localctx = new JavascriptDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2058;
            localctx.t = this.match(EParser.DECIMAL_LITERAL);
            break;
        case EParser.TEXT_LITERAL:
            localctx = new JavascriptTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2059;
            localctx.t = this.match(EParser.TEXT_LITERAL);
            break;
        case EParser.BOOLEAN_LITERAL:
            localctx = new JavascriptBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2060;
            localctx.t = this.match(EParser.BOOLEAN_LITERAL);
            break;
        case EParser.CHAR_LITERAL:
            localctx = new JavascriptCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2061;
            localctx.t = this.match(EParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_identifier;
    return this;
}

Javascript_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_identifierContext.prototype.constructor = Javascript_identifierContext;

Javascript_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

Javascript_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
};

Javascript_identifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(EParser.DOLLAR_IDENTIFIER, 0);
};

Javascript_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(EParser.TYPE_IDENTIFIER, 0);
};

Javascript_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(EParser.BOOLEAN, 0);
};

Javascript_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(EParser.CHARACTER, 0);
};

Javascript_identifierContext.prototype.TEXT = function() {
    return this.getToken(EParser.TEXT, 0);
};

Javascript_identifierContext.prototype.INTEGER = function() {
    return this.getToken(EParser.INTEGER, 0);
};

Javascript_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(EParser.DECIMAL, 0);
};

Javascript_identifierContext.prototype.DATE = function() {
    return this.getToken(EParser.DATE, 0);
};

Javascript_identifierContext.prototype.TIME = function() {
    return this.getToken(EParser.TIME, 0);
};

Javascript_identifierContext.prototype.DATETIME = function() {
    return this.getToken(EParser.DATETIME, 0);
};

Javascript_identifierContext.prototype.PERIOD = function() {
    return this.getToken(EParser.PERIOD, 0);
};

Javascript_identifierContext.prototype.READ = function() {
    return this.getToken(EParser.READ, 0);
};

Javascript_identifierContext.prototype.WRITE = function() {
    return this.getToken(EParser.WRITE, 0);
};

Javascript_identifierContext.prototype.TEST = function() {
    return this.getToken(EParser.TEST, 0);
};

Javascript_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascript_identifier(this);
	}
};

Javascript_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascript_identifier(this);
	}
};




EParser.prototype.javascript_identifier = function() {

    var localctx = new Javascript_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, EParser.RULE_javascript_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2064;
        _la = this._input.LA(1);
        if(!(((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (EParser.BOOLEAN - 50)) | (1 << (EParser.CHARACTER - 50)) | (1 << (EParser.TEXT - 50)) | (1 << (EParser.INTEGER - 50)) | (1 << (EParser.DECIMAL - 50)) | (1 << (EParser.DATE - 50)) | (1 << (EParser.TIME - 50)) | (1 << (EParser.DATETIME - 50)) | (1 << (EParser.PERIOD - 50)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (EParser.READ - 132)) | (1 << (EParser.TEST - 132)) | (1 << (EParser.WRITE - 132)) | (1 << (EParser.SYMBOL_IDENTIFIER - 132)) | (1 << (EParser.TYPE_IDENTIFIER - 132)) | (1 << (EParser.VARIABLE_IDENTIFIER - 132)))) !== 0) || _la===EParser.DOLLAR_IDENTIFIER)) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_statement;
    return this;
}

Python_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_statementContext.prototype.constructor = Python_statementContext;


 
Python_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonStatementContext(parser, ctx) {
	Python_statementContext.call(this, parser);
    this.exp = null; // Python_expressionContext;
    Python_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonStatementContext.prototype = Object.create(Python_statementContext.prototype);
PythonStatementContext.prototype.constructor = PythonStatementContext;

PythonStatementContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonStatement(this);
	}
};

PythonStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonStatement(this);
	}
};


function PythonReturnStatementContext(parser, ctx) {
	Python_statementContext.call(this, parser);
    this.exp = null; // Python_expressionContext;
    Python_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonReturnStatementContext.prototype = Object.create(Python_statementContext.prototype);
PythonReturnStatementContext.prototype.constructor = PythonReturnStatementContext;

PythonReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(EParser.RETURN, 0);
};

PythonReturnStatementContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonReturnStatement(this);
	}
};

PythonReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonReturnStatement(this);
	}
};



EParser.prototype.python_statement = function() {

    var localctx = new Python_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, EParser.RULE_python_statement);
    try {
        this.state = 2069;
        switch(this._input.LA(1)) {
        case EParser.RETURN:
            localctx = new PythonReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2066;
            this.match(EParser.RETURN);
            this.state = 2067; 
            localctx.exp = this.python_expression(0);
            break;
        case EParser.LPAR:
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.READ:
        case EParser.SELF:
        case EParser.TEST:
        case EParser.THIS:
        case EParser.WRITE:
        case EParser.BOOLEAN_LITERAL:
        case EParser.CHAR_LITERAL:
        case EParser.SYMBOL_IDENTIFIER:
        case EParser.TYPE_IDENTIFIER:
        case EParser.VARIABLE_IDENTIFIER:
        case EParser.DOLLAR_IDENTIFIER:
        case EParser.TEXT_LITERAL:
        case EParser.INTEGER_LITERAL:
        case EParser.DECIMAL_LITERAL:
            localctx = new PythonStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2068; 
            localctx.exp = this.python_expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_expression;
    return this;
}

Python_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_expressionContext.prototype.constructor = Python_expressionContext;


 
Python_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonSelectorExpressionContext(parser, ctx) {
	Python_expressionContext.call(this, parser);
    this.parent = null; // Python_expressionContext;
    this.child = null; // Python_selector_expressionContext;
    Python_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonSelectorExpressionContext.prototype = Object.create(Python_expressionContext.prototype);
PythonSelectorExpressionContext.prototype.constructor = PythonSelectorExpressionContext;

PythonSelectorExpressionContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};

PythonSelectorExpressionContext.prototype.python_selector_expression = function() {
    return this.getTypedRuleContext(Python_selector_expressionContext,0);
};
PythonSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonSelectorExpression(this);
	}
};

PythonSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonSelectorExpression(this);
	}
};


function PythonPrimaryExpressionContext(parser, ctx) {
	Python_expressionContext.call(this, parser);
    this.exp = null; // Python_primary_expressionContext;
    Python_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonPrimaryExpressionContext.prototype = Object.create(Python_expressionContext.prototype);
PythonPrimaryExpressionContext.prototype.constructor = PythonPrimaryExpressionContext;

PythonPrimaryExpressionContext.prototype.python_primary_expression = function() {
    return this.getTypedRuleContext(Python_primary_expressionContext,0);
};
PythonPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonPrimaryExpression(this);
	}
};

PythonPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonPrimaryExpression(this);
	}
};



EParser.prototype.python_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 340;
    this.enterRecursionRule(localctx, 340, EParser.RULE_python_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new PythonPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2072; 
        localctx.exp = this.python_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2078;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,169,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonSelectorExpressionContext(this, new Python_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_python_expression);
                this.state = 2074;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2075; 
                localctx.child = this.python_selector_expression(); 
            }
            this.state = 2080;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,169,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_primary_expression;
    return this;
}

Python_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_primary_expressionContext.prototype.constructor = Python_primary_expressionContext;


 
Python_primary_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonParenthesisExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_parenthesis_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonParenthesisExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonParenthesisExpressionContext.prototype.constructor = PythonParenthesisExpressionContext;

PythonParenthesisExpressionContext.prototype.python_parenthesis_expression = function() {
    return this.getTypedRuleContext(Python_parenthesis_expressionContext,0);
};
PythonParenthesisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonParenthesisExpression(this);
	}
};

PythonParenthesisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonParenthesisExpression(this);
	}
};


function PythonIdentifierExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_identifier_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonIdentifierExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonIdentifierExpressionContext.prototype.constructor = PythonIdentifierExpressionContext;

PythonIdentifierExpressionContext.prototype.python_identifier_expression = function() {
    return this.getTypedRuleContext(Python_identifier_expressionContext,0);
};
PythonIdentifierExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonIdentifierExpression(this);
	}
};

PythonIdentifierExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonIdentifierExpression(this);
	}
};


function PythonLiteralExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_literal_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonLiteralExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonLiteralExpressionContext.prototype.constructor = PythonLiteralExpressionContext;

PythonLiteralExpressionContext.prototype.python_literal_expression = function() {
    return this.getTypedRuleContext(Python_literal_expressionContext,0);
};
PythonLiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonLiteralExpression(this);
	}
};

PythonLiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonLiteralExpression(this);
	}
};


function PythonGlobalMethodExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_method_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonGlobalMethodExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonGlobalMethodExpressionContext.prototype.constructor = PythonGlobalMethodExpressionContext;

PythonGlobalMethodExpressionContext.prototype.python_method_expression = function() {
    return this.getTypedRuleContext(Python_method_expressionContext,0);
};
PythonGlobalMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonGlobalMethodExpression(this);
	}
};

PythonGlobalMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonGlobalMethodExpression(this);
	}
};



EParser.prototype.python_primary_expression = function() {

    var localctx = new Python_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, EParser.RULE_python_primary_expression);
    try {
        this.state = 2085;
        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PythonParenthesisExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2081; 
            localctx.exp = this.python_parenthesis_expression();
            break;

        case 2:
            localctx = new PythonIdentifierExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2082; 
            localctx.exp = this.python_identifier_expression(0);
            break;

        case 3:
            localctx = new PythonLiteralExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2083; 
            localctx.exp = this.python_literal_expression();
            break;

        case 4:
            localctx = new PythonGlobalMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2084; 
            localctx.exp = this.python_method_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_selector_expression;
    return this;
}

Python_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_selector_expressionContext.prototype.constructor = Python_selector_expressionContext;


 
Python_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonMethodExpressionContext(parser, ctx) {
	Python_selector_expressionContext.call(this, parser);
    this.exp = null; // Python_method_expressionContext;
    Python_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonMethodExpressionContext.prototype = Object.create(Python_selector_expressionContext.prototype);
PythonMethodExpressionContext.prototype.constructor = PythonMethodExpressionContext;

PythonMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

PythonMethodExpressionContext.prototype.python_method_expression = function() {
    return this.getTypedRuleContext(Python_method_expressionContext,0);
};
PythonMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonMethodExpression(this);
	}
};

PythonMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonMethodExpression(this);
	}
};


function PythonItemExpressionContext(parser, ctx) {
	Python_selector_expressionContext.call(this, parser);
    this.exp = null; // Python_expressionContext;
    Python_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonItemExpressionContext.prototype = Object.create(Python_selector_expressionContext.prototype);
PythonItemExpressionContext.prototype.constructor = PythonItemExpressionContext;

PythonItemExpressionContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

PythonItemExpressionContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

PythonItemExpressionContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonItemExpression(this);
	}
};

PythonItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonItemExpression(this);
	}
};



EParser.prototype.python_selector_expression = function() {

    var localctx = new Python_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, EParser.RULE_python_selector_expression);
    try {
        this.state = 2093;
        switch(this._input.LA(1)) {
        case EParser.DOT:
            localctx = new PythonMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2087;
            this.match(EParser.DOT);
            this.state = 2088; 
            localctx.exp = this.python_method_expression();
            break;
        case EParser.LBRAK:
            localctx = new PythonItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2089;
            this.match(EParser.LBRAK);
            this.state = 2090; 
            localctx.exp = this.python_expression(0);
            this.state = 2091;
            this.match(EParser.RBRAK);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_method_expression;
    this.name = null; // Python_identifierContext
    this.args = null; // Python_argument_listContext
    return this;
}

Python_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_method_expressionContext.prototype.constructor = Python_method_expressionContext;

Python_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Python_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Python_method_expressionContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};

Python_method_expressionContext.prototype.python_argument_list = function() {
    return this.getTypedRuleContext(Python_argument_listContext,0);
};

Python_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython_method_expression(this);
	}
};

Python_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython_method_expression(this);
	}
};




EParser.prototype.python_method_expression = function() {

    var localctx = new Python_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, EParser.RULE_python_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2095; 
        localctx.name = this.python_identifier();
        this.state = 2096;
        this.match(EParser.LPAR);
        this.state = 2098;
        _la = this._input.LA(1);
        if(_la===EParser.LPAR || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (EParser.BOOLEAN - 50)) | (1 << (EParser.CHARACTER - 50)) | (1 << (EParser.TEXT - 50)) | (1 << (EParser.INTEGER - 50)) | (1 << (EParser.DECIMAL - 50)) | (1 << (EParser.DATE - 50)) | (1 << (EParser.TIME - 50)) | (1 << (EParser.DATETIME - 50)) | (1 << (EParser.PERIOD - 50)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (EParser.READ - 132)) | (1 << (EParser.SELF - 132)) | (1 << (EParser.TEST - 132)) | (1 << (EParser.THIS - 132)) | (1 << (EParser.WRITE - 132)) | (1 << (EParser.BOOLEAN_LITERAL - 132)) | (1 << (EParser.CHAR_LITERAL - 132)) | (1 << (EParser.SYMBOL_IDENTIFIER - 132)) | (1 << (EParser.TYPE_IDENTIFIER - 132)) | (1 << (EParser.VARIABLE_IDENTIFIER - 132)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (EParser.DOLLAR_IDENTIFIER - 164)) | (1 << (EParser.TEXT_LITERAL - 164)) | (1 << (EParser.INTEGER_LITERAL - 164)) | (1 << (EParser.DECIMAL_LITERAL - 164)))) !== 0)) {
            this.state = 2097; 
            localctx.args = this.python_argument_list();
        }

        this.state = 2100;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_argument_list;
    return this;
}

Python_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_argument_listContext.prototype.constructor = Python_argument_listContext;


 
Python_argument_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonOrdinalOnlyArgumentListContext(parser, ctx) {
	Python_argument_listContext.call(this, parser);
    this.ordinal = null; // Python_ordinal_argument_listContext;
    Python_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonOrdinalOnlyArgumentListContext.prototype = Object.create(Python_argument_listContext.prototype);
PythonOrdinalOnlyArgumentListContext.prototype.constructor = PythonOrdinalOnlyArgumentListContext;

PythonOrdinalOnlyArgumentListContext.prototype.python_ordinal_argument_list = function() {
    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
};
PythonOrdinalOnlyArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonOrdinalOnlyArgumentList(this);
	}
};

PythonOrdinalOnlyArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonOrdinalOnlyArgumentList(this);
	}
};


function PythonNamedOnlyArgumentListContext(parser, ctx) {
	Python_argument_listContext.call(this, parser);
    this.named = null; // Python_named_argument_listContext;
    Python_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonNamedOnlyArgumentListContext.prototype = Object.create(Python_argument_listContext.prototype);
PythonNamedOnlyArgumentListContext.prototype.constructor = PythonNamedOnlyArgumentListContext;

PythonNamedOnlyArgumentListContext.prototype.python_named_argument_list = function() {
    return this.getTypedRuleContext(Python_named_argument_listContext,0);
};
PythonNamedOnlyArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonNamedOnlyArgumentList(this);
	}
};

PythonNamedOnlyArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonNamedOnlyArgumentList(this);
	}
};


function PythonArgumentListContext(parser, ctx) {
	Python_argument_listContext.call(this, parser);
    this.ordinal = null; // Python_ordinal_argument_listContext;
    this.named = null; // Python_named_argument_listContext;
    Python_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonArgumentListContext.prototype = Object.create(Python_argument_listContext.prototype);
PythonArgumentListContext.prototype.constructor = PythonArgumentListContext;

PythonArgumentListContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

PythonArgumentListContext.prototype.python_ordinal_argument_list = function() {
    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
};

PythonArgumentListContext.prototype.python_named_argument_list = function() {
    return this.getTypedRuleContext(Python_named_argument_listContext,0);
};
PythonArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonArgumentList(this);
	}
};

PythonArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonArgumentList(this);
	}
};



EParser.prototype.python_argument_list = function() {

    var localctx = new Python_argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, EParser.RULE_python_argument_list);
    try {
        this.state = 2108;
        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PythonOrdinalOnlyArgumentListContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2102; 
            localctx.ordinal = this.python_ordinal_argument_list(0);
            break;

        case 2:
            localctx = new PythonNamedOnlyArgumentListContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2103; 
            localctx.named = this.python_named_argument_list(0);
            break;

        case 3:
            localctx = new PythonArgumentListContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2104; 
            localctx.ordinal = this.python_ordinal_argument_list(0);
            this.state = 2105;
            this.match(EParser.COMMA);
            this.state = 2106; 
            localctx.named = this.python_named_argument_list(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_ordinal_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_ordinal_argument_list;
    return this;
}

Python_ordinal_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_ordinal_argument_listContext.prototype.constructor = Python_ordinal_argument_listContext;


 
Python_ordinal_argument_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonOrdinalArgumentListContext(parser, ctx) {
	Python_ordinal_argument_listContext.call(this, parser);
    this.item = null; // Python_expressionContext;
    Python_ordinal_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonOrdinalArgumentListContext.prototype = Object.create(Python_ordinal_argument_listContext.prototype);
PythonOrdinalArgumentListContext.prototype.constructor = PythonOrdinalArgumentListContext;

PythonOrdinalArgumentListContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonOrdinalArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonOrdinalArgumentList(this);
	}
};

PythonOrdinalArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonOrdinalArgumentList(this);
	}
};


function PythonOrdinalArgumentListItemContext(parser, ctx) {
	Python_ordinal_argument_listContext.call(this, parser);
    this.items = null; // Python_ordinal_argument_listContext;
    this.item = null; // Python_expressionContext;
    Python_ordinal_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonOrdinalArgumentListItemContext.prototype = Object.create(Python_ordinal_argument_listContext.prototype);
PythonOrdinalArgumentListItemContext.prototype.constructor = PythonOrdinalArgumentListItemContext;

PythonOrdinalArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

PythonOrdinalArgumentListItemContext.prototype.python_ordinal_argument_list = function() {
    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
};

PythonOrdinalArgumentListItemContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonOrdinalArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonOrdinalArgumentListItem(this);
	}
};

PythonOrdinalArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonOrdinalArgumentListItem(this);
	}
};



EParser.prototype.python_ordinal_argument_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_ordinal_argument_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 350;
    this.enterRecursionRule(localctx, 350, EParser.RULE_python_ordinal_argument_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new PythonOrdinalArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2111; 
        localctx.item = this.python_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2118;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,174,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonOrdinalArgumentListItemContext(this, new Python_ordinal_argument_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_python_ordinal_argument_list);
                this.state = 2113;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2114;
                this.match(EParser.COMMA);
                this.state = 2115; 
                localctx.item = this.python_expression(0); 
            }
            this.state = 2120;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,174,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_named_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_named_argument_list;
    return this;
}

Python_named_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_named_argument_listContext.prototype.constructor = Python_named_argument_listContext;


 
Python_named_argument_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonNamedArgumentListContext(parser, ctx) {
	Python_named_argument_listContext.call(this, parser);
    this.name = null; // Python_identifierContext;
    this.exp = null; // Python_expressionContext;
    Python_named_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonNamedArgumentListContext.prototype = Object.create(Python_named_argument_listContext.prototype);
PythonNamedArgumentListContext.prototype.constructor = PythonNamedArgumentListContext;

PythonNamedArgumentListContext.prototype.EQ = function() {
    return this.getToken(EParser.EQ, 0);
};

PythonNamedArgumentListContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};

PythonNamedArgumentListContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonNamedArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonNamedArgumentList(this);
	}
};

PythonNamedArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonNamedArgumentList(this);
	}
};


function PythonNamedArgumentListItemContext(parser, ctx) {
	Python_named_argument_listContext.call(this, parser);
    this.items = null; // Python_named_argument_listContext;
    this.name = null; // Python_identifierContext;
    this.exp = null; // Python_expressionContext;
    Python_named_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonNamedArgumentListItemContext.prototype = Object.create(Python_named_argument_listContext.prototype);
PythonNamedArgumentListItemContext.prototype.constructor = PythonNamedArgumentListItemContext;

PythonNamedArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

PythonNamedArgumentListItemContext.prototype.EQ = function() {
    return this.getToken(EParser.EQ, 0);
};

PythonNamedArgumentListItemContext.prototype.python_named_argument_list = function() {
    return this.getTypedRuleContext(Python_named_argument_listContext,0);
};

PythonNamedArgumentListItemContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};

PythonNamedArgumentListItemContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonNamedArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonNamedArgumentListItem(this);
	}
};

PythonNamedArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonNamedArgumentListItem(this);
	}
};



EParser.prototype.python_named_argument_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_named_argument_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 352;
    this.enterRecursionRule(localctx, 352, EParser.RULE_python_named_argument_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new PythonNamedArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2122; 
        localctx.name = this.python_identifier();
        this.state = 2123;
        this.match(EParser.EQ);
        this.state = 2124; 
        localctx.exp = this.python_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2134;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,175,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonNamedArgumentListItemContext(this, new Python_named_argument_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_python_named_argument_list);
                this.state = 2126;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2127;
                this.match(EParser.COMMA);
                this.state = 2128; 
                localctx.name = this.python_identifier();
                this.state = 2129;
                this.match(EParser.EQ);
                this.state = 2130; 
                localctx.exp = this.python_expression(0); 
            }
            this.state = 2136;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,175,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_parenthesis_expression;
    this.exp = null; // Python_expressionContext
    return this;
}

Python_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_parenthesis_expressionContext.prototype.constructor = Python_parenthesis_expressionContext;

Python_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Python_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Python_parenthesis_expressionContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};

Python_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython_parenthesis_expression(this);
	}
};

Python_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython_parenthesis_expression(this);
	}
};




EParser.prototype.python_parenthesis_expression = function() {

    var localctx = new Python_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, EParser.RULE_python_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2137;
        this.match(EParser.LPAR);
        this.state = 2138; 
        localctx.exp = this.python_expression(0);
        this.state = 2139;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_identifier_expression;
    return this;
}

Python_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_identifier_expressionContext.prototype.constructor = Python_identifier_expressionContext;


 
Python_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonChildIdentifierContext(parser, ctx) {
	Python_identifier_expressionContext.call(this, parser);
    this.parent = null; // Python_identifier_expressionContext;
    this.name = null; // Python_identifierContext;
    Python_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonChildIdentifierContext.prototype = Object.create(Python_identifier_expressionContext.prototype);
PythonChildIdentifierContext.prototype.constructor = PythonChildIdentifierContext;

PythonChildIdentifierContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

PythonChildIdentifierContext.prototype.python_identifier_expression = function() {
    return this.getTypedRuleContext(Python_identifier_expressionContext,0);
};

PythonChildIdentifierContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};
PythonChildIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonChildIdentifier(this);
	}
};

PythonChildIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonChildIdentifier(this);
	}
};


function PythonPromptoIdentifierContext(parser, ctx) {
	Python_identifier_expressionContext.call(this, parser);
    Python_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonPromptoIdentifierContext.prototype = Object.create(Python_identifier_expressionContext.prototype);
PythonPromptoIdentifierContext.prototype.constructor = PythonPromptoIdentifierContext;

PythonPromptoIdentifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(EParser.DOLLAR_IDENTIFIER, 0);
};
PythonPromptoIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonPromptoIdentifier(this);
	}
};

PythonPromptoIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonPromptoIdentifier(this);
	}
};


function PythonIdentifierContext(parser, ctx) {
	Python_identifier_expressionContext.call(this, parser);
    this.name = null; // Python_identifierContext;
    Python_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonIdentifierContext.prototype = Object.create(Python_identifier_expressionContext.prototype);
PythonIdentifierContext.prototype.constructor = PythonIdentifierContext;

PythonIdentifierContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};
PythonIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonIdentifier(this);
	}
};

PythonIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonIdentifier(this);
	}
};



EParser.prototype.python_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 356;
    this.enterRecursionRule(localctx, 356, EParser.RULE_python_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2144;
        switch(this._input.LA(1)) {
        case EParser.DOLLAR_IDENTIFIER:
            localctx = new PythonPromptoIdentifierContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 2142;
            this.match(EParser.DOLLAR_IDENTIFIER);
            break;
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.READ:
        case EParser.SELF:
        case EParser.TEST:
        case EParser.THIS:
        case EParser.WRITE:
        case EParser.SYMBOL_IDENTIFIER:
        case EParser.TYPE_IDENTIFIER:
        case EParser.VARIABLE_IDENTIFIER:
            localctx = new PythonIdentifierContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2143; 
            localctx.name = this.python_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2151;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,177,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonChildIdentifierContext(this, new Python_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_python_identifier_expression);
                this.state = 2146;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2147;
                this.match(EParser.DOT);
                this.state = 2148; 
                localctx.name = this.python_identifier(); 
            }
            this.state = 2153;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,177,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_literal_expression;
    return this;
}

Python_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_literal_expressionContext.prototype.constructor = Python_literal_expressionContext;


 
Python_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonIntegerLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonIntegerLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonIntegerLiteralContext.prototype.constructor = PythonIntegerLiteralContext;

PythonIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(EParser.INTEGER_LITERAL, 0);
};
PythonIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonIntegerLiteral(this);
	}
};

PythonIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonIntegerLiteral(this);
	}
};


function PythonBooleanLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonBooleanLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonBooleanLiteralContext.prototype.constructor = PythonBooleanLiteralContext;

PythonBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(EParser.BOOLEAN_LITERAL, 0);
};
PythonBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonBooleanLiteral(this);
	}
};

PythonBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonBooleanLiteral(this);
	}
};


function PythonCharacterLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonCharacterLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonCharacterLiteralContext.prototype.constructor = PythonCharacterLiteralContext;

PythonCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(EParser.CHAR_LITERAL, 0);
};
PythonCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonCharacterLiteral(this);
	}
};

PythonCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonCharacterLiteral(this);
	}
};


function PythonTextLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonTextLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonTextLiteralContext.prototype.constructor = PythonTextLiteralContext;

PythonTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(EParser.TEXT_LITERAL, 0);
};
PythonTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonTextLiteral(this);
	}
};

PythonTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonTextLiteral(this);
	}
};


function PythonDecimalLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonDecimalLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonDecimalLiteralContext.prototype.constructor = PythonDecimalLiteralContext;

PythonDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(EParser.DECIMAL_LITERAL, 0);
};
PythonDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonDecimalLiteral(this);
	}
};

PythonDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonDecimalLiteral(this);
	}
};



EParser.prototype.python_literal_expression = function() {

    var localctx = new Python_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, EParser.RULE_python_literal_expression);
    try {
        this.state = 2159;
        switch(this._input.LA(1)) {
        case EParser.INTEGER_LITERAL:
            localctx = new PythonIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2154;
            localctx.t = this.match(EParser.INTEGER_LITERAL);
            break;
        case EParser.DECIMAL_LITERAL:
            localctx = new PythonDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2155;
            localctx.t = this.match(EParser.DECIMAL_LITERAL);
            break;
        case EParser.TEXT_LITERAL:
            localctx = new PythonTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2156;
            localctx.t = this.match(EParser.TEXT_LITERAL);
            break;
        case EParser.BOOLEAN_LITERAL:
            localctx = new PythonBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2157;
            localctx.t = this.match(EParser.BOOLEAN_LITERAL);
            break;
        case EParser.CHAR_LITERAL:
            localctx = new PythonCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2158;
            localctx.t = this.match(EParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_identifier;
    return this;
}

Python_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_identifierContext.prototype.constructor = Python_identifierContext;

Python_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

Python_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
};

Python_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(EParser.TYPE_IDENTIFIER, 0);
};

Python_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(EParser.BOOLEAN, 0);
};

Python_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(EParser.CHARACTER, 0);
};

Python_identifierContext.prototype.TEXT = function() {
    return this.getToken(EParser.TEXT, 0);
};

Python_identifierContext.prototype.INTEGER = function() {
    return this.getToken(EParser.INTEGER, 0);
};

Python_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(EParser.DECIMAL, 0);
};

Python_identifierContext.prototype.DATE = function() {
    return this.getToken(EParser.DATE, 0);
};

Python_identifierContext.prototype.TIME = function() {
    return this.getToken(EParser.TIME, 0);
};

Python_identifierContext.prototype.DATETIME = function() {
    return this.getToken(EParser.DATETIME, 0);
};

Python_identifierContext.prototype.PERIOD = function() {
    return this.getToken(EParser.PERIOD, 0);
};

Python_identifierContext.prototype.READ = function() {
    return this.getToken(EParser.READ, 0);
};

Python_identifierContext.prototype.WRITE = function() {
    return this.getToken(EParser.WRITE, 0);
};

Python_identifierContext.prototype.TEST = function() {
    return this.getToken(EParser.TEST, 0);
};

Python_identifierContext.prototype.SELF = function() {
    return this.getToken(EParser.SELF, 0);
};

Python_identifierContext.prototype.THIS = function() {
    return this.getToken(EParser.THIS, 0);
};

Python_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython_identifier(this);
	}
};

Python_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython_identifier(this);
	}
};




EParser.prototype.python_identifier = function() {

    var localctx = new Python_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, EParser.RULE_python_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2161;
        _la = this._input.LA(1);
        if(!(((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (EParser.BOOLEAN - 50)) | (1 << (EParser.CHARACTER - 50)) | (1 << (EParser.TEXT - 50)) | (1 << (EParser.INTEGER - 50)) | (1 << (EParser.DECIMAL - 50)) | (1 << (EParser.DATE - 50)) | (1 << (EParser.TIME - 50)) | (1 << (EParser.DATETIME - 50)) | (1 << (EParser.PERIOD - 50)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (EParser.READ - 132)) | (1 << (EParser.SELF - 132)) | (1 << (EParser.TEST - 132)) | (1 << (EParser.THIS - 132)) | (1 << (EParser.WRITE - 132)) | (1 << (EParser.SYMBOL_IDENTIFIER - 132)) | (1 << (EParser.TYPE_IDENTIFIER - 132)) | (1 << (EParser.VARIABLE_IDENTIFIER - 132)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_statement;
    return this;
}

Java_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_statementContext.prototype.constructor = Java_statementContext;


 
Java_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaReturnStatementContext(parser, ctx) {
	Java_statementContext.call(this, parser);
    this.exp = null; // Java_expressionContext;
    Java_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaReturnStatementContext.prototype = Object.create(Java_statementContext.prototype);
JavaReturnStatementContext.prototype.constructor = JavaReturnStatementContext;

JavaReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(EParser.RETURN, 0);
};

JavaReturnStatementContext.prototype.SEMI = function() {
    return this.getToken(EParser.SEMI, 0);
};

JavaReturnStatementContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaReturnStatement(this);
	}
};

JavaReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaReturnStatement(this);
	}
};


function JavaStatementContext(parser, ctx) {
	Java_statementContext.call(this, parser);
    this.exp = null; // Java_expressionContext;
    Java_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaStatementContext.prototype = Object.create(Java_statementContext.prototype);
JavaStatementContext.prototype.constructor = JavaStatementContext;

JavaStatementContext.prototype.SEMI = function() {
    return this.getToken(EParser.SEMI, 0);
};

JavaStatementContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaStatement(this);
	}
};

JavaStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaStatement(this);
	}
};



EParser.prototype.java_statement = function() {

    var localctx = new Java_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, EParser.RULE_java_statement);
    try {
        this.state = 2170;
        switch(this._input.LA(1)) {
        case EParser.RETURN:
            localctx = new JavaReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2163;
            this.match(EParser.RETURN);
            this.state = 2164; 
            localctx.exp = this.java_expression(0);
            this.state = 2165;
            this.match(EParser.SEMI);
            break;
        case EParser.LPAR:
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.READ:
        case EParser.SELF:
        case EParser.TEST:
        case EParser.THIS:
        case EParser.WRITE:
        case EParser.BOOLEAN_LITERAL:
        case EParser.CHAR_LITERAL:
        case EParser.SYMBOL_IDENTIFIER:
        case EParser.TYPE_IDENTIFIER:
        case EParser.VARIABLE_IDENTIFIER:
        case EParser.NATIVE_IDENTIFIER:
        case EParser.DOLLAR_IDENTIFIER:
        case EParser.TEXT_LITERAL:
        case EParser.INTEGER_LITERAL:
        case EParser.DECIMAL_LITERAL:
            localctx = new JavaStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2167; 
            localctx.exp = this.java_expression(0);
            this.state = 2168;
            this.match(EParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_expression;
    return this;
}

Java_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_expressionContext.prototype.constructor = Java_expressionContext;


 
Java_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaSelectorExpressionContext(parser, ctx) {
	Java_expressionContext.call(this, parser);
    this.parent = null; // Java_expressionContext;
    this.child = null; // Java_selector_expressionContext;
    Java_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaSelectorExpressionContext.prototype = Object.create(Java_expressionContext.prototype);
JavaSelectorExpressionContext.prototype.constructor = JavaSelectorExpressionContext;

JavaSelectorExpressionContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};

JavaSelectorExpressionContext.prototype.java_selector_expression = function() {
    return this.getTypedRuleContext(Java_selector_expressionContext,0);
};
JavaSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaSelectorExpression(this);
	}
};

JavaSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaSelectorExpression(this);
	}
};


function JavaPrimaryExpressionContext(parser, ctx) {
	Java_expressionContext.call(this, parser);
    this.exp = null; // Java_primary_expressionContext;
    Java_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaPrimaryExpressionContext.prototype = Object.create(Java_expressionContext.prototype);
JavaPrimaryExpressionContext.prototype.constructor = JavaPrimaryExpressionContext;

JavaPrimaryExpressionContext.prototype.java_primary_expression = function() {
    return this.getTypedRuleContext(Java_primary_expressionContext,0);
};
JavaPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaPrimaryExpression(this);
	}
};

JavaPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaPrimaryExpression(this);
	}
};



EParser.prototype.java_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 364;
    this.enterRecursionRule(localctx, 364, EParser.RULE_java_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2173; 
        localctx.exp = this.java_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2179;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,180,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaSelectorExpressionContext(this, new Java_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_java_expression);
                this.state = 2175;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2176; 
                localctx.child = this.java_selector_expression(); 
            }
            this.state = 2181;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,180,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_primary_expression;
    return this;
}

Java_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_primary_expressionContext.prototype.constructor = Java_primary_expressionContext;

Java_primary_expressionContext.prototype.java_this_expression = function() {
    return this.getTypedRuleContext(Java_this_expressionContext,0);
};

Java_primary_expressionContext.prototype.java_new_expression = function() {
    return this.getTypedRuleContext(Java_new_expressionContext,0);
};

Java_primary_expressionContext.prototype.java_parenthesis_expression = function() {
    return this.getTypedRuleContext(Java_parenthesis_expressionContext,0);
};

Java_primary_expressionContext.prototype.java_identifier_expression = function() {
    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
};

Java_primary_expressionContext.prototype.java_literal_expression = function() {
    return this.getTypedRuleContext(Java_literal_expressionContext,0);
};

Java_primary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJava_primary_expression(this);
	}
};

Java_primary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJava_primary_expression(this);
	}
};




EParser.prototype.java_primary_expression = function() {

    var localctx = new Java_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, EParser.RULE_java_primary_expression);
    try {
        this.state = 2187;
        var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2182; 
            this.java_this_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2183; 
            this.java_new_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2184; 
            this.java_parenthesis_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2185; 
            this.java_identifier_expression(0);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2186; 
            this.java_literal_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_this_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_this_expression;
    return this;
}

Java_this_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_this_expressionContext.prototype.constructor = Java_this_expressionContext;

Java_this_expressionContext.prototype.this_expression = function() {
    return this.getTypedRuleContext(This_expressionContext,0);
};

Java_this_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJava_this_expression(this);
	}
};

Java_this_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJava_this_expression(this);
	}
};




EParser.prototype.java_this_expression = function() {

    var localctx = new Java_this_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, EParser.RULE_java_this_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2189; 
        this.this_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_new_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_new_expression;
    return this;
}

Java_new_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_new_expressionContext.prototype.constructor = Java_new_expressionContext;

Java_new_expressionContext.prototype.new_token = function() {
    return this.getTypedRuleContext(New_tokenContext,0);
};

Java_new_expressionContext.prototype.java_method_expression = function() {
    return this.getTypedRuleContext(Java_method_expressionContext,0);
};

Java_new_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJava_new_expression(this);
	}
};

Java_new_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJava_new_expression(this);
	}
};




EParser.prototype.java_new_expression = function() {

    var localctx = new Java_new_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, EParser.RULE_java_new_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2191; 
        this.new_token();
        this.state = 2192; 
        this.java_method_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_selector_expression;
    return this;
}

Java_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_selector_expressionContext.prototype.constructor = Java_selector_expressionContext;


 
Java_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaItemExpressionContext(parser, ctx) {
	Java_selector_expressionContext.call(this, parser);
    this.exp = null; // Java_item_expressionContext;
    Java_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaItemExpressionContext.prototype = Object.create(Java_selector_expressionContext.prototype);
JavaItemExpressionContext.prototype.constructor = JavaItemExpressionContext;

JavaItemExpressionContext.prototype.java_item_expression = function() {
    return this.getTypedRuleContext(Java_item_expressionContext,0);
};
JavaItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaItemExpression(this);
	}
};

JavaItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaItemExpression(this);
	}
};


function JavaMethodExpressionContext(parser, ctx) {
	Java_selector_expressionContext.call(this, parser);
    this.exp = null; // Java_method_expressionContext;
    Java_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaMethodExpressionContext.prototype = Object.create(Java_selector_expressionContext.prototype);
JavaMethodExpressionContext.prototype.constructor = JavaMethodExpressionContext;

JavaMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

JavaMethodExpressionContext.prototype.java_method_expression = function() {
    return this.getTypedRuleContext(Java_method_expressionContext,0);
};
JavaMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaMethodExpression(this);
	}
};

JavaMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaMethodExpression(this);
	}
};



EParser.prototype.java_selector_expression = function() {

    var localctx = new Java_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, EParser.RULE_java_selector_expression);
    try {
        this.state = 2197;
        switch(this._input.LA(1)) {
        case EParser.DOT:
            localctx = new JavaMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2194;
            this.match(EParser.DOT);
            this.state = 2195; 
            localctx.exp = this.java_method_expression();
            break;
        case EParser.LBRAK:
            localctx = new JavaItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2196; 
            localctx.exp = this.java_item_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_method_expression;
    this.name = null; // Java_identifierContext
    this.args = null; // Java_argumentsContext
    return this;
}

Java_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_method_expressionContext.prototype.constructor = Java_method_expressionContext;

Java_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Java_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Java_method_expressionContext.prototype.java_identifier = function() {
    return this.getTypedRuleContext(Java_identifierContext,0);
};

Java_method_expressionContext.prototype.java_arguments = function() {
    return this.getTypedRuleContext(Java_argumentsContext,0);
};

Java_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJava_method_expression(this);
	}
};

Java_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJava_method_expression(this);
	}
};




EParser.prototype.java_method_expression = function() {

    var localctx = new Java_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, EParser.RULE_java_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2199; 
        localctx.name = this.java_identifier();
        this.state = 2200;
        this.match(EParser.LPAR);
        this.state = 2202;
        _la = this._input.LA(1);
        if(_la===EParser.LPAR || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (EParser.BOOLEAN - 50)) | (1 << (EParser.CHARACTER - 50)) | (1 << (EParser.TEXT - 50)) | (1 << (EParser.INTEGER - 50)) | (1 << (EParser.DECIMAL - 50)) | (1 << (EParser.DATE - 50)) | (1 << (EParser.TIME - 50)) | (1 << (EParser.DATETIME - 50)) | (1 << (EParser.PERIOD - 50)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (EParser.READ - 132)) | (1 << (EParser.SELF - 132)) | (1 << (EParser.TEST - 132)) | (1 << (EParser.THIS - 132)) | (1 << (EParser.WRITE - 132)) | (1 << (EParser.BOOLEAN_LITERAL - 132)) | (1 << (EParser.CHAR_LITERAL - 132)) | (1 << (EParser.SYMBOL_IDENTIFIER - 132)) | (1 << (EParser.TYPE_IDENTIFIER - 132)) | (1 << (EParser.VARIABLE_IDENTIFIER - 132)) | (1 << (EParser.NATIVE_IDENTIFIER - 132)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (EParser.DOLLAR_IDENTIFIER - 164)) | (1 << (EParser.TEXT_LITERAL - 164)) | (1 << (EParser.INTEGER_LITERAL - 164)) | (1 << (EParser.DECIMAL_LITERAL - 164)))) !== 0)) {
            this.state = 2201; 
            localctx.args = this.java_arguments(0);
        }

        this.state = 2204;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_arguments;
    return this;
}

Java_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_argumentsContext.prototype.constructor = Java_argumentsContext;


 
Java_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaArgumentListItemContext(parser, ctx) {
	Java_argumentsContext.call(this, parser);
    this.items = null; // Java_argumentsContext;
    this.item = null; // Java_expressionContext;
    Java_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaArgumentListItemContext.prototype = Object.create(Java_argumentsContext.prototype);
JavaArgumentListItemContext.prototype.constructor = JavaArgumentListItemContext;

JavaArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

JavaArgumentListItemContext.prototype.java_arguments = function() {
    return this.getTypedRuleContext(Java_argumentsContext,0);
};

JavaArgumentListItemContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaArgumentListItem(this);
	}
};

JavaArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaArgumentListItem(this);
	}
};


function JavaArgumentListContext(parser, ctx) {
	Java_argumentsContext.call(this, parser);
    this.item = null; // Java_expressionContext;
    Java_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaArgumentListContext.prototype = Object.create(Java_argumentsContext.prototype);
JavaArgumentListContext.prototype.constructor = JavaArgumentListContext;

JavaArgumentListContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaArgumentList(this);
	}
};

JavaArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaArgumentList(this);
	}
};



EParser.prototype.java_arguments = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_argumentsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 376;
    this.enterRecursionRule(localctx, 376, EParser.RULE_java_arguments, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2207; 
        localctx.item = this.java_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2214;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,184,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaArgumentListItemContext(this, new Java_argumentsContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_java_arguments);
                this.state = 2209;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2210;
                this.match(EParser.COMMA);
                this.state = 2211; 
                localctx.item = this.java_expression(0); 
            }
            this.state = 2216;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,184,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_item_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_item_expression;
    this.exp = null; // Java_expressionContext
    return this;
}

Java_item_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_item_expressionContext.prototype.constructor = Java_item_expressionContext;

Java_item_expressionContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

Java_item_expressionContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

Java_item_expressionContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};

Java_item_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJava_item_expression(this);
	}
};

Java_item_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJava_item_expression(this);
	}
};




EParser.prototype.java_item_expression = function() {

    var localctx = new Java_item_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, EParser.RULE_java_item_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2217;
        this.match(EParser.LBRAK);
        this.state = 2218; 
        localctx.exp = this.java_expression(0);
        this.state = 2219;
        this.match(EParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_parenthesis_expression;
    this.exp = null; // Java_expressionContext
    return this;
}

Java_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_parenthesis_expressionContext.prototype.constructor = Java_parenthesis_expressionContext;

Java_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Java_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Java_parenthesis_expressionContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};

Java_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJava_parenthesis_expression(this);
	}
};

Java_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJava_parenthesis_expression(this);
	}
};




EParser.prototype.java_parenthesis_expression = function() {

    var localctx = new Java_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, EParser.RULE_java_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2221;
        this.match(EParser.LPAR);
        this.state = 2222; 
        localctx.exp = this.java_expression(0);
        this.state = 2223;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_identifier_expression;
    return this;
}

Java_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_identifier_expressionContext.prototype.constructor = Java_identifier_expressionContext;


 
Java_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaIdentifierContext(parser, ctx) {
	Java_identifier_expressionContext.call(this, parser);
    this.name = null; // Java_identifierContext;
    Java_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaIdentifierContext.prototype = Object.create(Java_identifier_expressionContext.prototype);
JavaIdentifierContext.prototype.constructor = JavaIdentifierContext;

JavaIdentifierContext.prototype.java_identifier = function() {
    return this.getTypedRuleContext(Java_identifierContext,0);
};
JavaIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaIdentifier(this);
	}
};

JavaIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaIdentifier(this);
	}
};


function JavaChildIdentifierContext(parser, ctx) {
	Java_identifier_expressionContext.call(this, parser);
    this.parent = null; // Java_identifier_expressionContext;
    this.name = null; // Java_identifierContext;
    Java_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaChildIdentifierContext.prototype = Object.create(Java_identifier_expressionContext.prototype);
JavaChildIdentifierContext.prototype.constructor = JavaChildIdentifierContext;

JavaChildIdentifierContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

JavaChildIdentifierContext.prototype.java_identifier_expression = function() {
    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
};

JavaChildIdentifierContext.prototype.java_identifier = function() {
    return this.getTypedRuleContext(Java_identifierContext,0);
};
JavaChildIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaChildIdentifier(this);
	}
};

JavaChildIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaChildIdentifier(this);
	}
};



EParser.prototype.java_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 382;
    this.enterRecursionRule(localctx, 382, EParser.RULE_java_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaIdentifierContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2226; 
        localctx.name = this.java_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2233;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,185,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaChildIdentifierContext(this, new Java_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_java_identifier_expression);
                this.state = 2228;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2229;
                this.match(EParser.DOT);
                this.state = 2230; 
                localctx.name = this.java_identifier(); 
            }
            this.state = 2235;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,185,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_class_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_class_identifier_expression;
    return this;
}

Java_class_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_class_identifier_expressionContext.prototype.constructor = Java_class_identifier_expressionContext;


 
Java_class_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaClassIdentifierContext(parser, ctx) {
	Java_class_identifier_expressionContext.call(this, parser);
    this.klass = null; // Java_identifier_expressionContext;
    Java_class_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaClassIdentifierContext.prototype = Object.create(Java_class_identifier_expressionContext.prototype);
JavaClassIdentifierContext.prototype.constructor = JavaClassIdentifierContext;

JavaClassIdentifierContext.prototype.java_identifier_expression = function() {
    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
};
JavaClassIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaClassIdentifier(this);
	}
};

JavaClassIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaClassIdentifier(this);
	}
};


function JavaChildClassIdentifierContext(parser, ctx) {
	Java_class_identifier_expressionContext.call(this, parser);
    this.parent = null; // Java_class_identifier_expressionContext;
    this.name = null; // Token;
    Java_class_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaChildClassIdentifierContext.prototype = Object.create(Java_class_identifier_expressionContext.prototype);
JavaChildClassIdentifierContext.prototype.constructor = JavaChildClassIdentifierContext;

JavaChildClassIdentifierContext.prototype.java_class_identifier_expression = function() {
    return this.getTypedRuleContext(Java_class_identifier_expressionContext,0);
};

JavaChildClassIdentifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(EParser.DOLLAR_IDENTIFIER, 0);
};
JavaChildClassIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaChildClassIdentifier(this);
	}
};

JavaChildClassIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaChildClassIdentifier(this);
	}
};



EParser.prototype.java_class_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_class_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 384;
    this.enterRecursionRule(localctx, 384, EParser.RULE_java_class_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaClassIdentifierContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2237; 
        localctx.klass = this.java_identifier_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2243;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,186,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaChildClassIdentifierContext(this, new Java_class_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_java_class_identifier_expression);
                this.state = 2239;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2240;
                localctx.name = this.match(EParser.DOLLAR_IDENTIFIER); 
            }
            this.state = 2245;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,186,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_literal_expression;
    return this;
}

Java_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_literal_expressionContext.prototype.constructor = Java_literal_expressionContext;


 
Java_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaBooleanLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaBooleanLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaBooleanLiteralContext.prototype.constructor = JavaBooleanLiteralContext;

JavaBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(EParser.BOOLEAN_LITERAL, 0);
};
JavaBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaBooleanLiteral(this);
	}
};

JavaBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaBooleanLiteral(this);
	}
};


function JavaCharacterLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaCharacterLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaCharacterLiteralContext.prototype.constructor = JavaCharacterLiteralContext;

JavaCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(EParser.CHAR_LITERAL, 0);
};
JavaCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaCharacterLiteral(this);
	}
};

JavaCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaCharacterLiteral(this);
	}
};


function JavaIntegerLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaIntegerLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaIntegerLiteralContext.prototype.constructor = JavaIntegerLiteralContext;

JavaIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(EParser.INTEGER_LITERAL, 0);
};
JavaIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaIntegerLiteral(this);
	}
};

JavaIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaIntegerLiteral(this);
	}
};


function JavaTextLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaTextLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaTextLiteralContext.prototype.constructor = JavaTextLiteralContext;

JavaTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(EParser.TEXT_LITERAL, 0);
};
JavaTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaTextLiteral(this);
	}
};

JavaTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaTextLiteral(this);
	}
};


function JavaDecimalLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaDecimalLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaDecimalLiteralContext.prototype.constructor = JavaDecimalLiteralContext;

JavaDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(EParser.DECIMAL_LITERAL, 0);
};
JavaDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaDecimalLiteral(this);
	}
};

JavaDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaDecimalLiteral(this);
	}
};



EParser.prototype.java_literal_expression = function() {

    var localctx = new Java_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, EParser.RULE_java_literal_expression);
    try {
        this.state = 2251;
        switch(this._input.LA(1)) {
        case EParser.INTEGER_LITERAL:
            localctx = new JavaIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2246;
            localctx.t = this.match(EParser.INTEGER_LITERAL);
            break;
        case EParser.DECIMAL_LITERAL:
            localctx = new JavaDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2247;
            localctx.t = this.match(EParser.DECIMAL_LITERAL);
            break;
        case EParser.TEXT_LITERAL:
            localctx = new JavaTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2248;
            localctx.t = this.match(EParser.TEXT_LITERAL);
            break;
        case EParser.BOOLEAN_LITERAL:
            localctx = new JavaBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2249;
            localctx.t = this.match(EParser.BOOLEAN_LITERAL);
            break;
        case EParser.CHAR_LITERAL:
            localctx = new JavaCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2250;
            localctx.t = this.match(EParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_identifier;
    return this;
}

Java_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_identifierContext.prototype.constructor = Java_identifierContext;

Java_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

Java_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
};

Java_identifierContext.prototype.NATIVE_IDENTIFIER = function() {
    return this.getToken(EParser.NATIVE_IDENTIFIER, 0);
};

Java_identifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(EParser.DOLLAR_IDENTIFIER, 0);
};

Java_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(EParser.TYPE_IDENTIFIER, 0);
};

Java_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(EParser.BOOLEAN, 0);
};

Java_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(EParser.CHARACTER, 0);
};

Java_identifierContext.prototype.TEXT = function() {
    return this.getToken(EParser.TEXT, 0);
};

Java_identifierContext.prototype.INTEGER = function() {
    return this.getToken(EParser.INTEGER, 0);
};

Java_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(EParser.DECIMAL, 0);
};

Java_identifierContext.prototype.DATE = function() {
    return this.getToken(EParser.DATE, 0);
};

Java_identifierContext.prototype.TIME = function() {
    return this.getToken(EParser.TIME, 0);
};

Java_identifierContext.prototype.DATETIME = function() {
    return this.getToken(EParser.DATETIME, 0);
};

Java_identifierContext.prototype.PERIOD = function() {
    return this.getToken(EParser.PERIOD, 0);
};

Java_identifierContext.prototype.READ = function() {
    return this.getToken(EParser.READ, 0);
};

Java_identifierContext.prototype.WRITE = function() {
    return this.getToken(EParser.WRITE, 0);
};

Java_identifierContext.prototype.TEST = function() {
    return this.getToken(EParser.TEST, 0);
};

Java_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJava_identifier(this);
	}
};

Java_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJava_identifier(this);
	}
};




EParser.prototype.java_identifier = function() {

    var localctx = new Java_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, EParser.RULE_java_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2253;
        _la = this._input.LA(1);
        if(!(((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (EParser.BOOLEAN - 50)) | (1 << (EParser.CHARACTER - 50)) | (1 << (EParser.TEXT - 50)) | (1 << (EParser.INTEGER - 50)) | (1 << (EParser.DECIMAL - 50)) | (1 << (EParser.DATE - 50)) | (1 << (EParser.TIME - 50)) | (1 << (EParser.DATETIME - 50)) | (1 << (EParser.PERIOD - 50)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (EParser.READ - 132)) | (1 << (EParser.TEST - 132)) | (1 << (EParser.WRITE - 132)) | (1 << (EParser.SYMBOL_IDENTIFIER - 132)) | (1 << (EParser.TYPE_IDENTIFIER - 132)) | (1 << (EParser.VARIABLE_IDENTIFIER - 132)) | (1 << (EParser.NATIVE_IDENTIFIER - 132)))) !== 0) || _la===EParser.DOLLAR_IDENTIFIER)) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_statement;
    return this;
}

Csharp_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_statementContext.prototype.constructor = Csharp_statementContext;


 
Csharp_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpReturnStatementContext(parser, ctx) {
	Csharp_statementContext.call(this, parser);
    this.exp = null; // Csharp_expressionContext;
    Csharp_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpReturnStatementContext.prototype = Object.create(Csharp_statementContext.prototype);
CSharpReturnStatementContext.prototype.constructor = CSharpReturnStatementContext;

CSharpReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(EParser.RETURN, 0);
};

CSharpReturnStatementContext.prototype.SEMI = function() {
    return this.getToken(EParser.SEMI, 0);
};

CSharpReturnStatementContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpReturnStatement(this);
	}
};

CSharpReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpReturnStatement(this);
	}
};


function CSharpStatementContext(parser, ctx) {
	Csharp_statementContext.call(this, parser);
    this.exp = null; // Csharp_expressionContext;
    Csharp_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpStatementContext.prototype = Object.create(Csharp_statementContext.prototype);
CSharpStatementContext.prototype.constructor = CSharpStatementContext;

CSharpStatementContext.prototype.SEMI = function() {
    return this.getToken(EParser.SEMI, 0);
};

CSharpStatementContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpStatement(this);
	}
};

CSharpStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpStatement(this);
	}
};



EParser.prototype.csharp_statement = function() {

    var localctx = new Csharp_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, EParser.RULE_csharp_statement);
    try {
        this.state = 2262;
        switch(this._input.LA(1)) {
        case EParser.RETURN:
            localctx = new CSharpReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2255;
            this.match(EParser.RETURN);
            this.state = 2256; 
            localctx.exp = this.csharp_expression(0);
            this.state = 2257;
            this.match(EParser.SEMI);
            break;
        case EParser.LPAR:
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.READ:
        case EParser.SELF:
        case EParser.TEST:
        case EParser.THIS:
        case EParser.WRITE:
        case EParser.BOOLEAN_LITERAL:
        case EParser.CHAR_LITERAL:
        case EParser.SYMBOL_IDENTIFIER:
        case EParser.TYPE_IDENTIFIER:
        case EParser.VARIABLE_IDENTIFIER:
        case EParser.DOLLAR_IDENTIFIER:
        case EParser.TEXT_LITERAL:
        case EParser.INTEGER_LITERAL:
        case EParser.DECIMAL_LITERAL:
            localctx = new CSharpStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2259; 
            localctx.exp = this.csharp_expression(0);
            this.state = 2260;
            this.match(EParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_expression;
    return this;
}

Csharp_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_expressionContext.prototype.constructor = Csharp_expressionContext;


 
Csharp_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CSharpSelectorExpressionContext(parser, ctx) {
	Csharp_expressionContext.call(this, parser);
    this.parent = null; // Csharp_expressionContext;
    this.child = null; // Csharp_selector_expressionContext;
    Csharp_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpSelectorExpressionContext.prototype = Object.create(Csharp_expressionContext.prototype);
CSharpSelectorExpressionContext.prototype.constructor = CSharpSelectorExpressionContext;

CSharpSelectorExpressionContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};

CSharpSelectorExpressionContext.prototype.csharp_selector_expression = function() {
    return this.getTypedRuleContext(Csharp_selector_expressionContext,0);
};
CSharpSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpSelectorExpression(this);
	}
};

CSharpSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpSelectorExpression(this);
	}
};


function CSharpPrimaryExpressionContext(parser, ctx) {
	Csharp_expressionContext.call(this, parser);
    this.exp = null; // Csharp_primary_expressionContext;
    Csharp_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpPrimaryExpressionContext.prototype = Object.create(Csharp_expressionContext.prototype);
CSharpPrimaryExpressionContext.prototype.constructor = CSharpPrimaryExpressionContext;

CSharpPrimaryExpressionContext.prototype.csharp_primary_expression = function() {
    return this.getTypedRuleContext(Csharp_primary_expressionContext,0);
};
CSharpPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpPrimaryExpression(this);
	}
};

CSharpPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpPrimaryExpression(this);
	}
};



EParser.prototype.csharp_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Csharp_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 392;
    this.enterRecursionRule(localctx, 392, EParser.RULE_csharp_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new CSharpPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2265; 
        localctx.exp = this.csharp_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2271;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,189,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CSharpSelectorExpressionContext(this, new Csharp_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_csharp_expression);
                this.state = 2267;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2268; 
                localctx.child = this.csharp_selector_expression(); 
            }
            this.state = 2273;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,189,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Csharp_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_primary_expression;
    return this;
}

Csharp_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_primary_expressionContext.prototype.constructor = Csharp_primary_expressionContext;

Csharp_primary_expressionContext.prototype.csharp_this_expression = function() {
    return this.getTypedRuleContext(Csharp_this_expressionContext,0);
};

Csharp_primary_expressionContext.prototype.csharp_new_expression = function() {
    return this.getTypedRuleContext(Csharp_new_expressionContext,0);
};

Csharp_primary_expressionContext.prototype.csharp_parenthesis_expression = function() {
    return this.getTypedRuleContext(Csharp_parenthesis_expressionContext,0);
};

Csharp_primary_expressionContext.prototype.csharp_identifier_expression = function() {
    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
};

Csharp_primary_expressionContext.prototype.csharp_literal_expression = function() {
    return this.getTypedRuleContext(Csharp_literal_expressionContext,0);
};

Csharp_primary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCsharp_primary_expression(this);
	}
};

Csharp_primary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCsharp_primary_expression(this);
	}
};




EParser.prototype.csharp_primary_expression = function() {

    var localctx = new Csharp_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, EParser.RULE_csharp_primary_expression);
    try {
        this.state = 2279;
        var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2274; 
            this.csharp_this_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2275; 
            this.csharp_new_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2276; 
            this.csharp_parenthesis_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2277; 
            this.csharp_identifier_expression(0);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2278; 
            this.csharp_literal_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_this_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_this_expression;
    return this;
}

Csharp_this_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_this_expressionContext.prototype.constructor = Csharp_this_expressionContext;

Csharp_this_expressionContext.prototype.this_expression = function() {
    return this.getTypedRuleContext(This_expressionContext,0);
};

Csharp_this_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCsharp_this_expression(this);
	}
};

Csharp_this_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCsharp_this_expression(this);
	}
};




EParser.prototype.csharp_this_expression = function() {

    var localctx = new Csharp_this_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, EParser.RULE_csharp_this_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2281; 
        this.this_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_new_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_new_expression;
    return this;
}

Csharp_new_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_new_expressionContext.prototype.constructor = Csharp_new_expressionContext;

Csharp_new_expressionContext.prototype.new_token = function() {
    return this.getTypedRuleContext(New_tokenContext,0);
};

Csharp_new_expressionContext.prototype.csharp_method_expression = function() {
    return this.getTypedRuleContext(Csharp_method_expressionContext,0);
};

Csharp_new_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCsharp_new_expression(this);
	}
};

Csharp_new_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCsharp_new_expression(this);
	}
};




EParser.prototype.csharp_new_expression = function() {

    var localctx = new Csharp_new_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, EParser.RULE_csharp_new_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2283; 
        this.new_token();
        this.state = 2284; 
        this.csharp_method_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_selector_expression;
    return this;
}

Csharp_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_selector_expressionContext.prototype.constructor = Csharp_selector_expressionContext;


 
Csharp_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpMethodExpressionContext(parser, ctx) {
	Csharp_selector_expressionContext.call(this, parser);
    this.exp = null; // Csharp_method_expressionContext;
    Csharp_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpMethodExpressionContext.prototype = Object.create(Csharp_selector_expressionContext.prototype);
CSharpMethodExpressionContext.prototype.constructor = CSharpMethodExpressionContext;

CSharpMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

CSharpMethodExpressionContext.prototype.csharp_method_expression = function() {
    return this.getTypedRuleContext(Csharp_method_expressionContext,0);
};
CSharpMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpMethodExpression(this);
	}
};

CSharpMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpMethodExpression(this);
	}
};


function CSharpItemExpressionContext(parser, ctx) {
	Csharp_selector_expressionContext.call(this, parser);
    this.exp = null; // Csharp_item_expressionContext;
    Csharp_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpItemExpressionContext.prototype = Object.create(Csharp_selector_expressionContext.prototype);
CSharpItemExpressionContext.prototype.constructor = CSharpItemExpressionContext;

CSharpItemExpressionContext.prototype.csharp_item_expression = function() {
    return this.getTypedRuleContext(Csharp_item_expressionContext,0);
};
CSharpItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpItemExpression(this);
	}
};

CSharpItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpItemExpression(this);
	}
};



EParser.prototype.csharp_selector_expression = function() {

    var localctx = new Csharp_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, EParser.RULE_csharp_selector_expression);
    try {
        this.state = 2289;
        switch(this._input.LA(1)) {
        case EParser.DOT:
            localctx = new CSharpMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2286;
            this.match(EParser.DOT);
            this.state = 2287; 
            localctx.exp = this.csharp_method_expression();
            break;
        case EParser.LBRAK:
            localctx = new CSharpItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2288; 
            localctx.exp = this.csharp_item_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_method_expression;
    this.name = null; // Csharp_identifierContext
    this.args = null; // Csharp_argumentsContext
    return this;
}

Csharp_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_method_expressionContext.prototype.constructor = Csharp_method_expressionContext;

Csharp_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Csharp_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Csharp_method_expressionContext.prototype.csharp_identifier = function() {
    return this.getTypedRuleContext(Csharp_identifierContext,0);
};

Csharp_method_expressionContext.prototype.csharp_arguments = function() {
    return this.getTypedRuleContext(Csharp_argumentsContext,0);
};

Csharp_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCsharp_method_expression(this);
	}
};

Csharp_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCsharp_method_expression(this);
	}
};




EParser.prototype.csharp_method_expression = function() {

    var localctx = new Csharp_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, EParser.RULE_csharp_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2291; 
        localctx.name = this.csharp_identifier();
        this.state = 2292;
        this.match(EParser.LPAR);
        this.state = 2294;
        _la = this._input.LA(1);
        if(_la===EParser.LPAR || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (EParser.BOOLEAN - 50)) | (1 << (EParser.CHARACTER - 50)) | (1 << (EParser.TEXT - 50)) | (1 << (EParser.INTEGER - 50)) | (1 << (EParser.DECIMAL - 50)) | (1 << (EParser.DATE - 50)) | (1 << (EParser.TIME - 50)) | (1 << (EParser.DATETIME - 50)) | (1 << (EParser.PERIOD - 50)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (EParser.READ - 132)) | (1 << (EParser.SELF - 132)) | (1 << (EParser.TEST - 132)) | (1 << (EParser.THIS - 132)) | (1 << (EParser.WRITE - 132)) | (1 << (EParser.BOOLEAN_LITERAL - 132)) | (1 << (EParser.CHAR_LITERAL - 132)) | (1 << (EParser.SYMBOL_IDENTIFIER - 132)) | (1 << (EParser.TYPE_IDENTIFIER - 132)) | (1 << (EParser.VARIABLE_IDENTIFIER - 132)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (EParser.DOLLAR_IDENTIFIER - 164)) | (1 << (EParser.TEXT_LITERAL - 164)) | (1 << (EParser.INTEGER_LITERAL - 164)) | (1 << (EParser.DECIMAL_LITERAL - 164)))) !== 0)) {
            this.state = 2293; 
            localctx.args = this.csharp_arguments(0);
        }

        this.state = 2296;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_arguments;
    return this;
}

Csharp_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_argumentsContext.prototype.constructor = Csharp_argumentsContext;


 
Csharp_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CSharpArgumentListContext(parser, ctx) {
	Csharp_argumentsContext.call(this, parser);
    this.item = null; // Csharp_expressionContext;
    Csharp_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpArgumentListContext.prototype = Object.create(Csharp_argumentsContext.prototype);
CSharpArgumentListContext.prototype.constructor = CSharpArgumentListContext;

CSharpArgumentListContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpArgumentList(this);
	}
};

CSharpArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpArgumentList(this);
	}
};


function CSharpArgumentListItemContext(parser, ctx) {
	Csharp_argumentsContext.call(this, parser);
    this.items = null; // Csharp_argumentsContext;
    this.item = null; // Csharp_expressionContext;
    Csharp_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpArgumentListItemContext.prototype = Object.create(Csharp_argumentsContext.prototype);
CSharpArgumentListItemContext.prototype.constructor = CSharpArgumentListItemContext;

CSharpArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

CSharpArgumentListItemContext.prototype.csharp_arguments = function() {
    return this.getTypedRuleContext(Csharp_argumentsContext,0);
};

CSharpArgumentListItemContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpArgumentListItem(this);
	}
};

CSharpArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpArgumentListItem(this);
	}
};



EParser.prototype.csharp_arguments = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Csharp_argumentsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 404;
    this.enterRecursionRule(localctx, 404, EParser.RULE_csharp_arguments, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new CSharpArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2299; 
        localctx.item = this.csharp_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2306;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,193,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CSharpArgumentListItemContext(this, new Csharp_argumentsContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_csharp_arguments);
                this.state = 2301;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2302;
                this.match(EParser.COMMA);
                this.state = 2303; 
                localctx.item = this.csharp_expression(0); 
            }
            this.state = 2308;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,193,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Csharp_item_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_item_expression;
    this.exp = null; // Csharp_expressionContext
    return this;
}

Csharp_item_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_item_expressionContext.prototype.constructor = Csharp_item_expressionContext;

Csharp_item_expressionContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

Csharp_item_expressionContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

Csharp_item_expressionContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};

Csharp_item_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCsharp_item_expression(this);
	}
};

Csharp_item_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCsharp_item_expression(this);
	}
};




EParser.prototype.csharp_item_expression = function() {

    var localctx = new Csharp_item_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, EParser.RULE_csharp_item_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2309;
        this.match(EParser.LBRAK);
        this.state = 2310; 
        localctx.exp = this.csharp_expression(0);
        this.state = 2311;
        this.match(EParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_parenthesis_expression;
    this.exp = null; // Csharp_expressionContext
    return this;
}

Csharp_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_parenthesis_expressionContext.prototype.constructor = Csharp_parenthesis_expressionContext;

Csharp_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Csharp_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Csharp_parenthesis_expressionContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};

Csharp_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCsharp_parenthesis_expression(this);
	}
};

Csharp_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCsharp_parenthesis_expression(this);
	}
};




EParser.prototype.csharp_parenthesis_expression = function() {

    var localctx = new Csharp_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, EParser.RULE_csharp_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2313;
        this.match(EParser.LPAR);
        this.state = 2314; 
        localctx.exp = this.csharp_expression(0);
        this.state = 2315;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_identifier_expression;
    return this;
}

Csharp_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_identifier_expressionContext.prototype.constructor = Csharp_identifier_expressionContext;


 
Csharp_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CSharpIdentifierContext(parser, ctx) {
	Csharp_identifier_expressionContext.call(this, parser);
    this.name = null; // Csharp_identifierContext;
    Csharp_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpIdentifierContext.prototype = Object.create(Csharp_identifier_expressionContext.prototype);
CSharpIdentifierContext.prototype.constructor = CSharpIdentifierContext;

CSharpIdentifierContext.prototype.csharp_identifier = function() {
    return this.getTypedRuleContext(Csharp_identifierContext,0);
};
CSharpIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpIdentifier(this);
	}
};

CSharpIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpIdentifier(this);
	}
};


function CSharpChildIdentifierContext(parser, ctx) {
	Csharp_identifier_expressionContext.call(this, parser);
    this.parent = null; // Csharp_identifier_expressionContext;
    this.name = null; // Csharp_identifierContext;
    Csharp_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpChildIdentifierContext.prototype = Object.create(Csharp_identifier_expressionContext.prototype);
CSharpChildIdentifierContext.prototype.constructor = CSharpChildIdentifierContext;

CSharpChildIdentifierContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

CSharpChildIdentifierContext.prototype.csharp_identifier_expression = function() {
    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
};

CSharpChildIdentifierContext.prototype.csharp_identifier = function() {
    return this.getTypedRuleContext(Csharp_identifierContext,0);
};
CSharpChildIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpChildIdentifier(this);
	}
};

CSharpChildIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpChildIdentifier(this);
	}
};


function CSharpPromptoIdentifierContext(parser, ctx) {
	Csharp_identifier_expressionContext.call(this, parser);
    Csharp_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpPromptoIdentifierContext.prototype = Object.create(Csharp_identifier_expressionContext.prototype);
CSharpPromptoIdentifierContext.prototype.constructor = CSharpPromptoIdentifierContext;

CSharpPromptoIdentifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(EParser.DOLLAR_IDENTIFIER, 0);
};
CSharpPromptoIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpPromptoIdentifier(this);
	}
};

CSharpPromptoIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpPromptoIdentifier(this);
	}
};



EParser.prototype.csharp_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Csharp_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 410;
    this.enterRecursionRule(localctx, 410, EParser.RULE_csharp_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2320;
        switch(this._input.LA(1)) {
        case EParser.DOLLAR_IDENTIFIER:
            localctx = new CSharpPromptoIdentifierContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 2318;
            this.match(EParser.DOLLAR_IDENTIFIER);
            break;
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.READ:
        case EParser.TEST:
        case EParser.WRITE:
        case EParser.SYMBOL_IDENTIFIER:
        case EParser.TYPE_IDENTIFIER:
        case EParser.VARIABLE_IDENTIFIER:
            localctx = new CSharpIdentifierContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2319; 
            localctx.name = this.csharp_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2327;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,195,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CSharpChildIdentifierContext(this, new Csharp_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_csharp_identifier_expression);
                this.state = 2322;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2323;
                this.match(EParser.DOT);
                this.state = 2324; 
                localctx.name = this.csharp_identifier(); 
            }
            this.state = 2329;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,195,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Csharp_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_literal_expression;
    return this;
}

Csharp_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_literal_expressionContext.prototype.constructor = Csharp_literal_expressionContext;


 
Csharp_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpBooleanLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpBooleanLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpBooleanLiteralContext.prototype.constructor = CSharpBooleanLiteralContext;

CSharpBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(EParser.BOOLEAN_LITERAL, 0);
};
CSharpBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpBooleanLiteral(this);
	}
};

CSharpBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpBooleanLiteral(this);
	}
};


function CSharpIntegerLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpIntegerLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpIntegerLiteralContext.prototype.constructor = CSharpIntegerLiteralContext;

CSharpIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(EParser.INTEGER_LITERAL, 0);
};
CSharpIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpIntegerLiteral(this);
	}
};

CSharpIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpIntegerLiteral(this);
	}
};


function CSharpDecimalLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpDecimalLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpDecimalLiteralContext.prototype.constructor = CSharpDecimalLiteralContext;

CSharpDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(EParser.DECIMAL_LITERAL, 0);
};
CSharpDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpDecimalLiteral(this);
	}
};

CSharpDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpDecimalLiteral(this);
	}
};


function CSharpCharacterLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpCharacterLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpCharacterLiteralContext.prototype.constructor = CSharpCharacterLiteralContext;

CSharpCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(EParser.CHAR_LITERAL, 0);
};
CSharpCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpCharacterLiteral(this);
	}
};

CSharpCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpCharacterLiteral(this);
	}
};


function CSharpTextLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpTextLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpTextLiteralContext.prototype.constructor = CSharpTextLiteralContext;

CSharpTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(EParser.TEXT_LITERAL, 0);
};
CSharpTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpTextLiteral(this);
	}
};

CSharpTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpTextLiteral(this);
	}
};



EParser.prototype.csharp_literal_expression = function() {

    var localctx = new Csharp_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, EParser.RULE_csharp_literal_expression);
    try {
        this.state = 2335;
        switch(this._input.LA(1)) {
        case EParser.INTEGER_LITERAL:
            localctx = new CSharpIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2330;
            this.match(EParser.INTEGER_LITERAL);
            break;
        case EParser.DECIMAL_LITERAL:
            localctx = new CSharpDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2331;
            this.match(EParser.DECIMAL_LITERAL);
            break;
        case EParser.TEXT_LITERAL:
            localctx = new CSharpTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2332;
            this.match(EParser.TEXT_LITERAL);
            break;
        case EParser.BOOLEAN_LITERAL:
            localctx = new CSharpBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2333;
            this.match(EParser.BOOLEAN_LITERAL);
            break;
        case EParser.CHAR_LITERAL:
            localctx = new CSharpCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2334;
            this.match(EParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_identifier;
    return this;
}

Csharp_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_identifierContext.prototype.constructor = Csharp_identifierContext;

Csharp_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

Csharp_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
};

Csharp_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(EParser.TYPE_IDENTIFIER, 0);
};

Csharp_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(EParser.BOOLEAN, 0);
};

Csharp_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(EParser.CHARACTER, 0);
};

Csharp_identifierContext.prototype.TEXT = function() {
    return this.getToken(EParser.TEXT, 0);
};

Csharp_identifierContext.prototype.INTEGER = function() {
    return this.getToken(EParser.INTEGER, 0);
};

Csharp_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(EParser.DECIMAL, 0);
};

Csharp_identifierContext.prototype.DATE = function() {
    return this.getToken(EParser.DATE, 0);
};

Csharp_identifierContext.prototype.TIME = function() {
    return this.getToken(EParser.TIME, 0);
};

Csharp_identifierContext.prototype.DATETIME = function() {
    return this.getToken(EParser.DATETIME, 0);
};

Csharp_identifierContext.prototype.PERIOD = function() {
    return this.getToken(EParser.PERIOD, 0);
};

Csharp_identifierContext.prototype.READ = function() {
    return this.getToken(EParser.READ, 0);
};

Csharp_identifierContext.prototype.WRITE = function() {
    return this.getToken(EParser.WRITE, 0);
};

Csharp_identifierContext.prototype.TEST = function() {
    return this.getToken(EParser.TEST, 0);
};

Csharp_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCsharp_identifier(this);
	}
};

Csharp_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCsharp_identifier(this);
	}
};




EParser.prototype.csharp_identifier = function() {

    var localctx = new Csharp_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, EParser.RULE_csharp_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2337;
        _la = this._input.LA(1);
        if(!(((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (EParser.BOOLEAN - 50)) | (1 << (EParser.CHARACTER - 50)) | (1 << (EParser.TEXT - 50)) | (1 << (EParser.INTEGER - 50)) | (1 << (EParser.DECIMAL - 50)) | (1 << (EParser.DATE - 50)) | (1 << (EParser.TIME - 50)) | (1 << (EParser.DATETIME - 50)) | (1 << (EParser.PERIOD - 50)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (EParser.READ - 132)) | (1 << (EParser.TEST - 132)) | (1 << (EParser.WRITE - 132)) | (1 << (EParser.SYMBOL_IDENTIFIER - 132)) | (1 << (EParser.TYPE_IDENTIFIER - 132)) | (1 << (EParser.VARIABLE_IDENTIFIER - 132)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


EParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 16:
			return this.native_category_binding_list_sempred(localctx, predIndex);
	case 37:
			return this.else_if_statement_list_sempred(localctx, predIndex);
	case 43:
			return this.expression_sempred(localctx, predIndex);
	case 44:
			return this.unresolved_expression_sempred(localctx, predIndex);
	case 45:
			return this.unresolved_selector_sempred(localctx, predIndex);
	case 47:
			return this.invocation_trailer_sempred(localctx, predIndex);
	case 48:
			return this.instance_expression_sempred(localctx, predIndex);
	case 49:
			return this.instance_selector_sempred(localctx, predIndex);
	case 58:
			return this.argument_assignment_list_sempred(localctx, predIndex);
	case 59:
			return this.with_argument_assignment_list_sempred(localctx, predIndex);
	case 62:
			return this.child_instance_sempred(localctx, predIndex);
	case 82:
			return this.typedef_sempred(localctx, predIndex);
	case 102:
			return this.any_type_sempred(localctx, predIndex);
	case 139:
			return this.assignable_instance_sempred(localctx, predIndex);
	case 140:
			return this.is_expression_sempred(localctx, predIndex);
	case 146:
			return this.new_token_sempred(localctx, predIndex);
	case 147:
			return this.key_token_sempred(localctx, predIndex);
	case 148:
			return this.module_token_sempred(localctx, predIndex);
	case 149:
			return this.value_token_sempred(localctx, predIndex);
	case 150:
			return this.symbols_token_sempred(localctx, predIndex);
	case 157:
			return this.javascript_expression_sempred(localctx, predIndex);
	case 163:
			return this.javascript_arguments_sempred(localctx, predIndex);
	case 170:
			return this.python_expression_sempred(localctx, predIndex);
	case 175:
			return this.python_ordinal_argument_list_sempred(localctx, predIndex);
	case 176:
			return this.python_named_argument_list_sempred(localctx, predIndex);
	case 178:
			return this.python_identifier_expression_sempred(localctx, predIndex);
	case 182:
			return this.java_expression_sempred(localctx, predIndex);
	case 188:
			return this.java_arguments_sempred(localctx, predIndex);
	case 191:
			return this.java_identifier_expression_sempred(localctx, predIndex);
	case 192:
			return this.java_class_identifier_expression_sempred(localctx, predIndex);
	case 196:
			return this.csharp_expression_sempred(localctx, predIndex);
	case 202:
			return this.csharp_arguments_sempred(localctx, predIndex);
	case 205:
			return this.csharp_identifier_expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

EParser.prototype.native_category_binding_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.else_if_statement_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 40);
		case 3:
			return this.precpred(this._ctx, 39);
		case 4:
			return this.precpred(this._ctx, 38);
		case 5:
			return this.precpred(this._ctx, 37);
		case 6:
			return this.precpred(this._ctx, 36);
		case 7:
			return this.precpred(this._ctx, 35);
		case 8:
			return this.precpred(this._ctx, 34);
		case 9:
			return this.precpred(this._ctx, 33);
		case 10:
			return this.precpred(this._ctx, 32);
		case 11:
			return this.precpred(this._ctx, 29);
		case 12:
			return this.precpred(this._ctx, 28);
		case 13:
			return this.precpred(this._ctx, 27);
		case 14:
			return this.precpred(this._ctx, 26);
		case 15:
			return this.precpred(this._ctx, 25);
		case 16:
			return this.precpred(this._ctx, 24);
		case 17:
			return this.precpred(this._ctx, 22);
		case 18:
			return this.precpred(this._ctx, 21);
		case 19:
			return this.precpred(this._ctx, 20);
		case 20:
			return this.precpred(this._ctx, 19);
		case 21:
			return this.precpred(this._ctx, 18);
		case 22:
			return this.precpred(this._ctx, 17);
		case 23:
			return this.precpred(this._ctx, 16);
		case 24:
			return this.precpred(this._ctx, 15);
		case 25:
			return this.precpred(this._ctx, 1);
		case 26:
			return this.precpred(this._ctx, 31);
		case 27:
			return this.precpred(this._ctx, 30);
		case 28:
			return this.precpred(this._ctx, 23);
		case 29:
			return this.precpred(this._ctx, 8);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.unresolved_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 30:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.unresolved_selector_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 31:
			return this.wasNot(EParser.WS);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.invocation_trailer_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 32:
			return this.willBe(EParser.LF);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.instance_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 33:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.instance_selector_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 34:
			return this.wasNot(EParser.WS);
		case 35:
			return this.wasNot(EParser.WS);
		case 36:
			return this.wasNot(EParser.WS);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.argument_assignment_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 37:
			return this.was(EParser.WS);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.with_argument_assignment_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 38:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.child_instance_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 39:
			return this.wasNot(EParser.WS);
		case 40:
			return this.wasNot(EParser.WS);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.typedef_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 41:
			return this.precpred(this._ctx, 5);
		case 42:
			return this.precpred(this._ctx, 4);
		case 43:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.any_type_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 44:
			return this.precpred(this._ctx, 2);
		case 45:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.assignable_instance_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 46:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.is_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 47:
			return this.willBeAOrAn();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.new_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 48:
			return this.isText(localctx.i1,"new");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.key_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 49:
			return this.isText(localctx.i1,"key");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.module_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 50:
			return this.isText(localctx.i1,"module");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.value_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 51:
			return this.isText(localctx.i1,"value");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.symbols_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 52:
			return this.isText(localctx.i1,"symbols");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.javascript_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 53:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.javascript_arguments_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 54:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.python_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 55:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.python_ordinal_argument_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 56:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.python_named_argument_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 57:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.python_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 58:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.java_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 59:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.java_arguments_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 60:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.java_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 61:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.java_class_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 62:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.csharp_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 63:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.csharp_arguments_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 64:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.csharp_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 65:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.EParser = EParser;
