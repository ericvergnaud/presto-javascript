// Generated from SParser.g4 by ANTLR 4.5
// jshint ignore: start
var antlr4 = require('antlr4/index');
var SParserListener = require('./SParserListener').SParserListener;
var AbstractParser = require('./AbstractParser').AbstractParser;

var grammarFileName = "SParser.g4";

var serializedATN = ["\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\3\u009b\u07f7\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t",
    "\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20",
    "\t\20\4\21\t\21\4\22\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4",
    "\27\t\27\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35",
    "\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'",
    "\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61",
    "\t\61\4\62\t\62\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4",
    "8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C",
    "\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\t",
    "N\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY",
    "\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\t",
    "d\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to",
    "\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4z\tz\4",
    "{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080\4\u0081\t\u0081\4",
    "\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085\t\u0085\4\u0086",
    "\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a",
    "\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e\4\u008f",
    "\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092\4\u0093\t\u0093",
    "\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098",
    "\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c",
    "\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0\t\u00a0\4\u00a1",
    "\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4\4\u00a5\t\u00a5",
    "\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa",
    "\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae\t\u00ae",
    "\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2\t\u00b2\4\u00b3",
    "\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7",
    "\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc",
    "\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\3\2\3\2\3\2\3\2\3\2\3\2\5\2",
    "\u0183\n\2\3\2\5\2\u0186\n\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3",
    "\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\5\3\5\3\5\5\5\u019f\n\5\3",
    "\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u01ac\n\6\3\6\3\6\3\7",
    "\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u01b9\n\7\3\7\3\7\3\7\3\7\3\7\5",
    "\7\u01c0\n\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u01cd\n",
    "\b\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u01db\n\n\3\n",
    "\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3",
    "\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\5\r\u01fb",
    "\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0204\n\r\3\r\3\r\3\16\3\16\3\16",
    "\3\16\3\16\5\16\u020d\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u0216",
    "\n\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3",
    "\20\3\20\3\20\3\20\3\20\7\20\u0229\n\20\f\20\16\20\u022c\13\20\3\21",
    "\3\21\3\22\3\22\3\22\3\22\3\22\5\22\u0235\n\22\3\22\3\22\3\22\5\22\u023a",
    "\n\22\3\23\3\23\3\23\3\23\5\23\u0240\n\23\3\23\3\23\3\23\5\23\u0245",
    "\n\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\5\24\u0251\n",
    "\24\3\24\3\24\3\24\5\24\u0256\n\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25",
    "\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3",
    "\25\3\25\5\25\u026e\n\25\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27",
    "\5\27\u0279\n\27\3\27\3\27\5\27\u027d\n\27\3\30\3\30\3\30\3\30\3\30",
    "\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u028e\n\30\3",
    "\31\3\31\3\31\5\31\u0293\n\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\5\32",
    "\u029c\n\32\3\33\3\33\3\33\3\33\3\33\7\33\u02a3\n\33\f\33\16\33\u02a6",
    "\13\33\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u02ae\n\34\3\35\3\35\3\35",
    "\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3",
    "\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u02cb\n\37",
    "\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u02de\n ",
    "\3!\3!\3!\3!\5!\u02e4\n!\3!\3!\3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3",
    "\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u0306",
    "\n$\3$\3$\3$\3$\3$\3$\3$\5$\u030f\n$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3",
    "%\3%\3%\3%\3%\3%\3%\3%\3%\7%\u0324\n%\f%\16%\u0327\13%\3&\3&\3&\3\'",
    "\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u0334\n\'\3\'\3\'\3\'\3\'\3\'\3\'\3",
    "\'\5\'\u033d\n\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u0346\n\'\3\'\3\'\3",
    "(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u035d\n(",
    "\3)\3)\5)\u0361\n)\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3",
    "*\3*\5*\u0375\n*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*",
    "\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3",
    "*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*",
    "\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3",
    "*\3*\3*\3*\3*\3*\3*\3*\3*\3*\7*\u03d5\n*\f*\16*\u03d8\13*\3+\3+\3,\3",
    ",\3,\3,\3,\7,\u03e1\n,\f,\16,\u03e4\13,\3-\3-\3-\3-\3-\3-\5-\u03ec\n",
    "-\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u03fb\n.\3/\3/\3\60\5\60",
    "\u0400\n\60\3\60\3\60\3\60\5\60\u0405\n\60\3\60\3\60\3\61\3\61\3\61",
    "\3\61\3\61\5\61\u040e\n\61\3\61\3\61\3\61\7\61\u0413\n\61\f\61\16\61",
    "\u0416\13\61\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63\3\64\3\64\3\64",
    "\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\66\3\66\3\66\3\66\3",
    "\66\3\66\3\66\3\66\5\66\u0434\n\66\3\66\3\66\3\67\3\67\3\67\3\67\38",
    "\38\38\38\38\38\38\38\58\u0444\n8\39\39\39\39\3:\7:\u044b\n:\f:\16:",
    "\u044e\13:\3;\6;\u0451\n;\r;\16;\u0452\3<\6<\u0456\n<\r<\16<\u0457\3",
    "<\3<\3=\7=\u045d\n=\f=\16=\u0460\13=\3=\3=\3>\3>\3?\5?\u0467\n?\3?\3",
    "?\3?\3@\3@\3@\3@\3@\3@\3@\7@\u0473\n@\f@\16@\u0476\13@\3A\3A\3A\3A\3",
    "A\5A\u047d\nA\3B\3B\3C\3C\5C\u0483\nC\3D\3D\3D\3D\3D\3D\3D\7D\u048c",
    "\nD\fD\16D\u048f\13D\3E\3E\3E\3E\3E\3E\3E\7E\u0498\nE\fE\16E\u049b\13",
    "E\3F\3F\3F\3F\3F\3F\7F\u04a3\nF\fF\16F\u04a6\13F\3G\3G\3G\3G\3G\3G\3",
    "G\3G\3G\3G\5G\u04b2\nG\3H\3H\5H\u04b6\nH\3H\3H\3I\3I\5I\u04bc\nI\3I",
    "\3I\3J\3J\3J\3J\3J\3J\7J\u04c6\nJ\fJ\16J\u04c9\13J\3K\3K\3K\3K\3K\3",
    "K\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\7L\u04dc\nL\fL\16L\u04df\13L\3M\3",
    "M\5M\u04e3\nM\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\5N\u04ef\nN\3O\3O\3P\3P",
    "\3Q\3Q\3R\3R\3R\5R\u04fa\nR\3S\3S\3S\3S\3S\3S\7S\u0502\nS\fS\16S\u0505",
    "\13S\3T\3T\5T\u0509\nT\3U\3U\3U\5U\u050e\nU\3V\3V\3W\3W\3X\3X\3Y\3Y",
    "\3Y\3Y\3Y\3Y\7Y\u051c\nY\fY\16Y\u051f\13Y\3Z\3Z\5Z\u0523\nZ\3Z\5Z\u0526",
    "\nZ\3[\3[\5[\u052a\n[\3\\\3\\\3\\\5\\\u052f\n\\\3]\3]\3]\3^\3^\5^\u0536",
    "\n^\3_\3_\3_\3_\3_\3_\3_\3_\3_\7_\u0541\n_\f_\16_\u0544\13_\3`\3`\3",
    "`\3`\3`\3`\3`\7`\u054d\n`\f`\16`\u0550\13`\3a\3a\3a\3a\3a\5a\u0557\n",
    "a\3b\3b\3b\3b\3b\3b\3b\7b\u0560\nb\fb\16b\u0563\13b\3c\3c\5c\u0567\n",
    "c\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\5d\u0573\nd\3e\3e\5e\u0577\ne\3f\3f",
    "\3f\3f\3f\3f\7f\u057f\nf\ff\16f\u0582\13f\3g\3g\3g\3h\3h\5h\u0589\n",
    "h\3i\3i\3i\3i\5i\u058f\ni\3i\3i\3i\7i\u0594\ni\fi\16i\u0597\13i\3i\3",
    "i\5i\u059b\ni\3j\3j\3j\3j\3j\3j\7j\u05a3\nj\fj\16j\u05a6\13j\3k\3k\3",
    "k\3k\5k\u05ac\nk\3l\3l\3l\3l\3l\3l\3l\7l\u05b5\nl\fl\16l\u05b8\13l\3",
    "m\3m\3m\3m\3m\3m\3m\3m\3m\3m\5m\u05c4\nm\3n\3n\5n\u05c8\nn\3n\5n\u05cb",
    "\nn\3o\3o\5o\u05cf\no\3o\5o\u05d2\no\3p\3p\3p\3p\3p\3p\3p\7p\u05db\n",
    "p\fp\16p\u05de\13p\3q\3q\3q\3q\3q\3q\3q\7q\u05e7\nq\fq\16q\u05ea\13",
    "q\3r\3r\3r\3r\3r\3r\3r\7r\u05f3\nr\fr\16r\u05f6\13r\3s\3s\3s\3s\3s\3",
    "s\3s\7s\u05ff\ns\fs\16s\u0602\13s\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3",
    "t\3t\3t\5t\u0612\nt\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\5u\u0621",
    "\nu\3v\3v\3v\3v\3v\3v\7v\u0629\nv\fv\16v\u062c\13v\3w\3w\3w\3w\5w\u0632",
    "\nw\3x\3x\3y\3y\3y\3y\3z\3z\5z\u063c\nz\3{\3{\3{\3{\3{\5{\u0643\n{\3",
    "|\3|\5|\u0647\n|\3|\3|\3}\3}\5}\u064d\n}\3}\3}\3~\3~\3~\3~\3~\3~\7~",
    "\u0657\n~\f~\16~\u065a\13~\3\177\3\177\3\177\3\177\3\177\3\177\7\177",
    "\u0662\n\177\f\177\16\177\u0665\13\177\3\u0080\3\u0080\3\u0080\3\u0080",
    "\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081",
    "\5\u0081\u0674\n\u0081\3\u0082\3\u0082\3\u0082\3\u0082\3\u0083\3\u0083",
    "\3\u0083\3\u0083\3\u0083\7\u0083\u067f\n\u0083\f\u0083\16\u0083\u0682",
    "\13\u0083\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0688\n\u0084\3\u0085",
    "\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u0690\n\u0085\3\u0086",
    "\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088\3\u0089",
    "\3\u0089\3\u008a\3\u008a\3\u008b\3\u008b\3\u008c\3\u008c\3\u008d\3\u008d",
    "\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u06ac",
    "\n\u008e\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\7\u008f\u06b3\n\u008f",
    "\f\u008f\16\u008f\u06b6\13\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090",
    "\3\u0090\5\u0090\u06be\n\u0090\3\u0091\3\u0091\3\u0092\3\u0092\3\u0092",
    "\3\u0092\3\u0092\5\u0092\u06c7\n\u0092\3\u0093\3\u0093\3\u0093\5\u0093",
    "\u06cc\n\u0093\3\u0093\3\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094",
    "\3\u0094\7\u0094\u06d6\n\u0094\f\u0094\16\u0094\u06d9\13\u0094\3\u0095",
    "\3\u0095\3\u0095\3\u0095\3\u0096\3\u0096\3\u0096\3\u0096\3\u0097\3\u0097",
    "\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u06ea\n\u0098\3\u0099",
    "\3\u0099\3\u009a\3\u009a\3\u009a\5\u009a\u06f1\n\u009a\3\u009b\3\u009b",
    "\3\u009b\3\u009b\3\u009b\7\u009b\u06f8\n\u009b\f\u009b\16\u009b\u06fb",
    "\13\u009b\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0701\n\u009c\3\u009d",
    "\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0709\n\u009d\3\u009e",
    "\3\u009e\3\u009e\5\u009e\u070e\n\u009e\3\u009e\3\u009e\3\u009f\3\u009f",
    "\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0718\n\u009f\3\u00a0\3\u00a0",
    "\3\u00a0\3\u00a0\3\u00a0\3\u00a0\7\u00a0\u0720\n\u00a0\f\u00a0\16\u00a0",
    "\u0723\13\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1",
    "\3\u00a1\3\u00a1\3\u00a1\3\u00a1\7\u00a1\u0730\n\u00a1\f\u00a1\16\u00a1",
    "\u0733\13\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a3",
    "\5\u00a3\u073c\n\u00a3\3\u00a3\3\u00a3\3\u00a3\7\u00a3\u0741\n\u00a3",
    "\f\u00a3\16\u00a3\u0744\13\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4",
    "\5\u00a4\u074b\n\u00a4\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6",
    "\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0756\n\u00a6\3\u00a7\3\u00a7\3\u00a7",
    "\3\u00a7\3\u00a7\7\u00a7\u075d\n\u00a7\f\u00a7\16\u00a7\u0760\13\u00a7",
    "\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0766\n\u00a8\3\u00a9\3\u00a9",
    "\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u076d\n\u00aa\3\u00ab\3\u00ab\3\u00ab",
    "\5\u00ab\u0772\n\u00ab\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac",
    "\3\u00ac\3\u00ac\7\u00ac\u077c\n\u00ac\f\u00ac\16\u00ac\u077f\13\u00ac",
    "\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00af",
    "\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\7\u00af\u078f\n\u00af\f\u00af",
    "\16\u00af\u0792\13\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0",
    "\u0799\n\u00b0\f\u00b0\16\u00b0\u079c\13\u00b0\3\u00b1\3\u00b1\3\u00b1",
    "\3\u00b1\3\u00b1\5\u00b1\u07a3\n\u00b1\3\u00b2\3\u00b2\3\u00b3\3\u00b3",
    "\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u07ae\n\u00b3\3\u00b4",
    "\3\u00b4\3\u00b4\3\u00b4\3\u00b4\7\u00b4\u07b5\n\u00b4\f\u00b4\16\u00b4",
    "\u07b8\13\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u07be\n\u00b5",
    "\3\u00b6\3\u00b6\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u07c5\n\u00b7\3\u00b8",
    "\3\u00b8\3\u00b8\5\u00b8\u07ca\n\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9",
    "\3\u00b9\3\u00b9\3\u00b9\3\u00b9\7\u00b9\u07d4\n\u00b9\f\u00b9\16\u00b9",
    "\u07d7\13\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00bb\3\u00bb\3\u00bb",
    "\3\u00bb\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u07e4\n\u00bc\3\u00bc\3\u00bc",
    "\3\u00bc\7\u00bc\u07e9\n\u00bc\f\u00bc\16\u00bc\u07ec\13\u00bc\3\u00bd",
    "\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u07f3\n\u00bd\3\u00be\3\u00be",
    "\3\u00be\2*\36\64HRV`~\u0086\u0088\u008a\u0092\u0096\u00a4\u00b0\u00bc",
    "\u00be\u00c2\u00d2\u00d6\u00de\u00e0\u00e2\u00e4\u00ea\u00fa\u00fc\u0104",
    "\u011c\u0126\u0134\u013e\u0140\u0144\u014c\u0156\u015c\u015e\u0166\u0170",
    "\u0176\u00bf\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64",
    "\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0",
    "\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8",
    "\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0",
    "\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8",
    "\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100",
    "\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118",
    "\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130",
    "\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148",
    "\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160",
    "\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178",
    "\u017a\2\n\3\2KL\3\2!\"\4\2{{\u0081\u0081\4\2&&hh\b\2\63;vv\u0080\u0080",
    "\u0089\u0089\u008e\u0090\u0092\u0092\b\2\63;vv{{\u0080\u0081\u0089\u0089",
    "\u008e\u0090\7\2\63;vv\u0080\u0080\u0089\u0089\u008e\u0092\7\2\63;v",
    "v\u0080\u0080\u0089\u0089\u008e\u0090\u084d\2\u017c\3\2\2\2\4\u018d",
    "\3\2\2\2\6\u0197\3\2\2\2\b\u019b\3\2\2\2\n\u01a2\3\2\2\2\f\u01af\3\2",
    "\2\2\16\u01c3\3\2\2\2\20\u01d0\3\2\2\2\22\u01d2\3\2\2\2\24\u01e1\3\2",
    "\2\2\26\u01eb\3\2\2\2\30\u01f5\3\2\2\2\32\u0207\3\2\2\2\34\u0219\3\2",
    "\2\2\36\u0221\3\2\2\2 \u022d\3\2\2\2\"\u022f\3\2\2\2$\u023b\3\2\2\2",
    "&\u024b\3\2\2\2(\u025c\3\2\2\2*\u026f\3\2\2\2,\u0271\3\2\2\2.\u028d",
    "\3\2\2\2\60\u028f\3\2\2\2\62\u029b\3\2\2\2\64\u029d\3\2\2\2\66\u02ad",
    "\3\2\2\28\u02af\3\2\2\2:\u02b6\3\2\2\2<\u02bd\3\2\2\2>\u02dd\3\2\2\2",
    "@\u02df\3\2\2\2B\u02ec\3\2\2\2D\u02f5\3\2\2\2F\u02fc\3\2\2\2H\u0310",
    "\3\2\2\2J\u0328\3\2\2\2L\u032b\3\2\2\2N\u035c\3\2\2\2P\u035e\3\2\2\2",
    "R\u0374\3\2\2\2T\u03d9\3\2\2\2V\u03db\3\2\2\2X\u03eb\3\2\2\2Z\u03fa",
    "\3\2\2\2\\\u03fc\3\2\2\2^\u03ff\3\2\2\2`\u040d\3\2\2\2b\u0417\3\2\2",
    "\2d\u041b\3\2\2\2f\u041f\3\2\2\2h\u0424\3\2\2\2j\u042b\3\2\2\2l\u0437",
    "\3\2\2\2n\u0443\3\2\2\2p\u0445\3\2\2\2r\u044c\3\2\2\2t\u0450\3\2\2\2",
    "v\u0455\3\2\2\2x\u045e\3\2\2\2z\u0463\3\2\2\2|\u0466\3\2\2\2~\u046b",
    "\3\2\2\2\u0080\u047c\3\2\2\2\u0082\u047e\3\2\2\2\u0084\u0482\3\2\2\2",
    "\u0086\u0484\3\2\2\2\u0088\u0490\3\2\2\2\u008a\u049c\3\2\2\2\u008c\u04b1",
    "\3\2\2\2\u008e\u04b3\3\2\2\2\u0090\u04b9\3\2\2\2\u0092\u04bf\3\2\2\2",
    "\u0094\u04ca\3\2\2\2\u0096\u04d0\3\2\2\2\u0098\u04e2\3\2\2\2\u009a\u04ee",
    "\3\2\2\2\u009c\u04f0\3\2\2\2\u009e\u04f2\3\2\2\2\u00a0\u04f4\3\2\2\2",
    "\u00a2\u04f9\3\2\2\2\u00a4\u04fb\3\2\2\2\u00a6\u0508\3\2\2\2\u00a8\u050d",
    "\3\2\2\2\u00aa\u050f\3\2\2\2\u00ac\u0511\3\2\2\2\u00ae\u0513\3\2\2\2",
    "\u00b0\u0515\3\2\2\2\u00b2\u0525\3\2\2\2\u00b4\u0529\3\2\2\2\u00b6\u052b",
    "\3\2\2\2\u00b8\u0530\3\2\2\2\u00ba\u0535\3\2\2\2\u00bc\u0537\3\2\2\2",
    "\u00be\u0545\3\2\2\2\u00c0\u0556\3\2\2\2\u00c2\u0558\3\2\2\2\u00c4\u0566",
    "\3\2\2\2\u00c6\u0572\3\2\2\2\u00c8\u0574\3\2\2\2\u00ca\u0578\3\2\2\2",
    "\u00cc\u0583\3\2\2\2\u00ce\u0586\3\2\2\2\u00d0\u058a\3\2\2\2\u00d2\u059c",
    "\3\2\2\2\u00d4\u05ab\3\2\2\2\u00d6\u05ad\3\2\2\2\u00d8\u05c3\3\2\2\2",
    "\u00da\u05c5\3\2\2\2\u00dc\u05cc\3\2\2\2\u00de\u05d3\3\2\2\2\u00e0\u05df",
    "\3\2\2\2\u00e2\u05eb\3\2\2\2\u00e4\u05f7\3\2\2\2\u00e6\u0611\3\2\2\2",
    "\u00e8\u0620\3\2\2\2\u00ea\u0622\3\2\2\2\u00ec\u0631\3\2\2\2\u00ee\u0633",
    "\3\2\2\2\u00f0\u0635\3\2\2\2\u00f2\u063b\3\2\2\2\u00f4\u0642\3\2\2\2",
    "\u00f6\u0644\3\2\2\2\u00f8\u064a\3\2\2\2\u00fa\u0650\3\2\2\2\u00fc\u065b",
    "\3\2\2\2\u00fe\u0666\3\2\2\2\u0100\u0673\3\2\2\2\u0102\u0675\3\2\2\2",
    "\u0104\u0679\3\2\2\2\u0106\u0687\3\2\2\2\u0108\u068f\3\2\2\2\u010a\u0691",
    "\3\2\2\2\u010c\u0694\3\2\2\2\u010e\u0697\3\2\2\2\u0110\u069a\3\2\2\2",
    "\u0112\u069c\3\2\2\2\u0114\u069e\3\2\2\2\u0116\u06a0\3\2\2\2\u0118\u06a2",
    "\3\2\2\2\u011a\u06ab\3\2\2\2\u011c\u06ad\3\2\2\2\u011e\u06bd\3\2\2\2",
    "\u0120\u06bf\3\2\2\2\u0122\u06c6\3\2\2\2\u0124\u06c8\3\2\2\2\u0126\u06cf",
    "\3\2\2\2\u0128\u06da\3\2\2\2\u012a\u06de\3\2\2\2\u012c\u06e2\3\2\2\2",
    "\u012e\u06e9\3\2\2\2\u0130\u06eb\3\2\2\2\u0132\u06f0\3\2\2\2\u0134\u06f2",
    "\3\2\2\2\u0136\u0700\3\2\2\2\u0138\u0708\3\2\2\2\u013a\u070a\3\2\2\2",
    "\u013c\u0717\3\2\2\2\u013e\u0719\3\2\2\2\u0140\u0724\3\2\2\2\u0142\u0734",
    "\3\2\2\2\u0144\u073b\3\2\2\2\u0146\u074a\3\2\2\2\u0148\u074c\3\2\2\2",
    "\u014a\u0755\3\2\2\2\u014c\u0757\3\2\2\2\u014e\u0765\3\2\2\2\u0150\u0767",
    "\3\2\2\2\u0152\u076c\3\2\2\2\u0154\u076e\3\2\2\2\u0156\u0775\3\2\2\2",
    "\u0158\u0780\3\2\2\2\u015a\u0784\3\2\2\2\u015c\u0788\3\2\2\2\u015e\u0793",
    "\3\2\2\2\u0160\u07a2\3\2\2\2\u0162\u07a4\3\2\2\2\u0164\u07ad\3\2\2\2",
    "\u0166\u07af\3\2\2\2\u0168\u07bd\3\2\2\2\u016a\u07bf\3\2\2\2\u016c\u07c4",
    "\3\2\2\2\u016e\u07c6\3\2\2\2\u0170\u07cd\3\2\2\2\u0172\u07d8\3\2\2\2",
    "\u0174\u07dc\3\2\2\2\u0176\u07e3\3\2\2\2\u0178\u07f2\3\2\2\2\u017a\u07f4",
    "\3\2\2\2\u017c\u017d\7V\2\2\u017d\u017e\5\u00acW\2\u017e\u0185\7\25",
    "\2\2\u017f\u0182\5\u00acW\2\u0180\u0181\7\22\2\2\u0181\u0183\5 \21\2",
    "\u0182\u0180\3\2\2\2\u0182\u0183\3\2\2\2\u0183\u0186\3\2\2\2\u0184\u0186",
    "\5 \21\2\u0185\u017f\3\2\2\2\u0185\u0184\3\2\2\2\u0186\u0187\3\2\2\2",
    "\u0187\u0188\7\26\2\2\u0188\u0189\7\20\2\2\u0189\u018a\5v<\2\u018a\u018b",
    "\5\u0088E\2\u018b\u018c\5x=\2\u018c\3\3\2\2\2\u018d\u018e\7V\2\2\u018e",
    "\u018f\5\u00acW\2\u018f\u0190\7\25\2\2\u0190\u0191\5\u009aN\2\u0191",
    "\u0192\7\26\2\2\u0192\u0193\7\20\2\2\u0193\u0194\5v<\2\u0194\u0195\5",
    "\u0086D\2\u0195\u0196\5x=\2\u0196\5\3\2\2\2\u0197\u0198\5\u00aeX\2\u0198",
    "\u0199\7,\2\2\u0199\u019a\5R*\2\u019a\7\3\2\2\2\u019b\u019c\5\u00ae",
    "X\2\u019c\u019e\7\25\2\2\u019d\u019f\5`\61\2\u019e\u019d\3\2\2\2\u019e",
    "\u019f\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u01a1\7\26\2\2\u01a1\t\3\2",
    "\2\2\u01a2\u01a3\7E\2\2\u01a3\u01a4\5\u00aaV\2\u01a4\u01a5\7\25\2\2",
    "\u01a5\u01a6\5\u0096L\2\u01a6\u01a7\7\26\2\2\u01a7\u01a8\7\20\2\2\u01a8",
    "\u01ab\5v<\2\u01a9\u01ac\5\u008cG\2\u01aa\u01ac\7t\2\2\u01ab\u01a9\3",
    "\2\2\2\u01ab\u01aa\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01ae\5x=\2\u01ae",
    "\13\3\2\2\2\u01af\u01b0\t\2\2\2\u01b0\u01b1\5\u00acW\2\u01b1\u01b8\7",
    "\25\2\2\u01b2\u01b9\5\20\t\2\u01b3\u01b9\5 \21\2\u01b4\u01b5\5\20\t",
    "\2\u01b5\u01b6\7\22\2\2\u01b6\u01b7\5 \21\2\u01b7\u01b9\3\2\2\2\u01b8",
    "\u01b2\3\2\2\2\u01b8\u01b3\3\2\2\2\u01b8\u01b4\3\2\2\2\u01b9\u01ba\3",
    "\2\2\2\u01ba\u01bb\7\26\2\2\u01bb\u01bc\7\20\2\2\u01bc\u01bf\5v<\2\u01bd",
    "\u01c0\5\u00be`\2\u01be\u01c0\7t\2\2\u01bf\u01bd\3\2\2\2\u01bf\u01be",
    "\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1\u01c2\5x=\2\u01c2\r\3\2\2\2\u01c3",
    "\u01c4\7}\2\2\u01c4\u01c5\5\u00acW\2\u01c5\u01c6\7\25\2\2\u01c6\u01c7",
    "\5 \21\2\u01c7\u01c8\7\26\2\2\u01c8\u01c9\7\20\2\2\u01c9\u01cc\5v<\2",
    "\u01ca\u01cd\5\u00be`\2\u01cb\u01cd\7t\2\2\u01cc\u01ca\3\2\2\2\u01cc",
    "\u01cb\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce\u01cf\5x=\2\u01cf\17\3\2\2",
    "\2\u01d0\u01d1\5\u00a4S\2\u01d1\21\3\2\2\2\u01d2\u01d3\7O\2\2\u01d3",
    "\u01d4\7q\2\2\u01d4\u01d5\5\u0108\u0085\2\u01d5\u01d6\7\25\2\2\u01d6",
    "\u01d7\5\u00b4[\2\u01d7\u01da\7\26\2\2\u01d8\u01d9\7\62\2\2\u01d9\u01db",
    "\5\u0096L\2\u01da\u01d8\3\2\2\2\u01da\u01db\3\2\2\2\u01db\u01dc\3\2",
    "\2\2\u01dc\u01dd\7\20\2\2\u01dd\u01de\5v<\2\u01de\u01df\5\u00dep\2\u01df",
    "\u01e0\5x=\2\u01e0\23\3\2\2\2\u01e1\u01e2\7O\2\2\u01e2\u01e3\5\u00aa",
    "V\2\u01e3\u01e4\7|\2\2\u01e4\u01e5\7\25\2\2\u01e5\u01e6\7\26\2\2\u01e6",
    "\u01e7\7\20\2\2\u01e7\u01e8\5v<\2\u01e8\u01e9\5\u00dep\2\u01e9\u01ea",
    "\5x=\2\u01ea\25\3\2\2\2\u01eb\u01ec\7O\2\2\u01ec\u01ed\5\u00aaV\2\u01ed",
    "\u01ee\7`\2\2\u01ee\u01ef\7\25\2\2\u01ef\u01f0\7\26\2\2\u01f0\u01f1",
    "\7\20\2\2\u01f1\u01f2\5v<\2\u01f2\u01f3\5\u00dep\2\u01f3\u01f4\5x=\2",
    "\u01f4\27\3\2\2\2\u01f5\u01f6\7j\2\2\u01f6\u01f7\t\2\2\2\u01f7\u01f8",
    "\5\u00acW\2\u01f8\u01fa\7\25\2\2\u01f9\u01fb\5 \21\2\u01fa\u01f9\3\2",
    "\2\2\u01fa\u01fb\3\2\2\2\u01fb\u01fc\3\2\2\2\u01fc\u01fd\7\26\2\2\u01fd",
    "\u01fe\7\20\2\2\u01fe\u01ff\5v<\2\u01ff\u0203\5\34\17\2\u0200\u0201",
    "\5t;\2\u0201\u0202\5\u00c2b\2\u0202\u0204\3\2\2\2\u0203\u0200\3\2\2",
    "\2\u0203\u0204\3\2\2\2\u0204\u0205\3\2\2\2\u0205\u0206\5x=\2\u0206\31",
    "\3\2\2\2\u0207\u0208\7j\2\2\u0208\u0209\7x\2\2\u0209\u020a\5\u00acW",
    "\2\u020a\u020c\7\25\2\2\u020b\u020d\5 \21\2\u020c\u020b\3\2\2\2\u020c",
    "\u020d\3\2\2\2\u020d\u020e\3\2\2\2\u020e\u020f\7\26\2\2\u020f\u0210",
    "\7\20\2\2\u0210\u0211\5v<\2\u0211\u0215\5\34\17\2\u0212\u0213\5t;\2",
    "\u0213\u0214\5\u00c2b\2\u0214\u0216\3\2\2\2\u0215\u0212\3\2\2\2\u0215",
    "\u0216\3\2\2\2\u0216\u0217\3\2\2\2\u0217\u0218\5x=\2\u0218\33\3\2\2",
    "\2\u0219\u021a\7O\2\2\u021a\u021b\t\2\2\2\u021b\u021c\7H\2\2\u021c\u021d",
    "\7\20\2\2\u021d\u021e\5v<\2\u021e\u021f\5\36\20\2\u021f\u0220\5x=\2",
    "\u0220\35\3\2\2\2\u0221\u0222\b\20\1\2\u0222\u0223\5\u00c6d\2\u0223",
    "\u022a\3\2\2\2\u0224\u0225\f\3\2\2\u0225\u0226\5t;\2\u0226\u0227\5\u00c6",
    "d\2\u0227\u0229\3\2\2\2\u0228\u0224\3\2\2\2\u0229\u022c\3\2\2\2\u022a",
    "\u0228\3\2\2\2\u022a\u022b\3\2\2\2\u022b\37\3\2\2\2\u022c\u022a\3\2",
    "\2\2\u022d\u022e\5\u00d2j\2\u022e!\3\2\2\2\u022f\u0230\7?\2\2\u0230",
    "\u0231\7O\2\2\u0231\u0232\5\u00a6T\2\u0232\u0234\7\25\2\2\u0233\u0235",
    "\5\u00b0Y\2\u0234\u0233\3\2\2\2\u0234\u0235\3\2\2\2\u0235\u0236\3\2",
    "\2\2\u0236\u0239\7\26\2\2\u0237\u0238\7\62\2\2\u0238\u023a\5\u0096L",
    "\2\u0239\u0237\3\2\2\2\u0239\u023a\3\2\2\2\u023a#\3\2\2\2\u023b\u023c",
    "\7O\2\2\u023c\u023d\5\u00a6T\2\u023d\u023f\7\25\2\2\u023e\u0240\5\u00b0",
    "Y\2\u023f\u023e\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0241\3\2\2\2\u0241",
    "\u0244\7\26\2\2\u0242\u0243\7\62\2\2\u0243\u0245\5\u0096L\2\u0244\u0242",
    "\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u0247\7\20\2",
    "\2\u0247\u0248\5v<\2\u0248\u0249\5\u00dep\2\u0249\u024a\5x=\2\u024a",
    "%\3\2\2\2\u024b\u024c\7O\2\2\u024c\u024d\7j\2\2\u024d\u024e\5\u00a6",
    "T\2\u024e\u0250\7\25\2\2\u024f\u0251\5\u00b0Y\2\u0250\u024f\3\2\2\2",
    "\u0250\u0251\3\2\2\2\u0251\u0252\3\2\2\2\u0252\u0255\7\26\2\2\u0253",
    "\u0254\7\62\2\2\u0254\u0256\5\u00ba^\2\u0255\u0253\3\2\2\2\u0255\u0256",
    "\3\2\2\2\u0256\u0257\3\2\2\2\u0257\u0258\7\20\2\2\u0258\u0259\5v<\2",
    "\u0259\u025a\5\u00d6l\2\u025a\u025b\5x=\2\u025b\'\3\2\2\2\u025c\u025d",
    "\7O\2\2\u025d\u025e\7\u0080\2\2\u025e\u025f\7\u0093\2\2\u025f\u0260",
    "\7\25\2\2\u0260\u0261\7\26\2\2\u0261\u0262\7\20\2\2\u0262\u0263\5v<",
    "\2\u0263\u0264\5\u00dep\2\u0264\u0265\5x=\2\u0265\u0266\5t;\2\u0266",
    "\u0267\7Z\2\2\u0267\u026d\7\20\2\2\u0268\u0269\5v<\2\u0269\u026a\5\u00e0",
    "q\2\u026a\u026b\5x=\2\u026b\u026e\3\2\2\2\u026c\u026e\5\u00aeX\2\u026d",
    "\u0268\3\2\2\2\u026d\u026c\3\2\2\2\u026e)\3\2\2\2\u026f\u0270\5R*\2",
    "\u0270+\3\2\2\2\u0271\u0272\5\u00aaV\2\u0272\u0273\7\20\2\2\u0273\u0278",
    "\5\u00ba^\2\u0274\u0275\7\25\2\2\u0275\u0276\5 \21\2\u0276\u0277\7\26",
    "\2\2\u0277\u0279\3\2\2\2\u0278\u0274\3\2\2\2\u0278\u0279\3\2\2\2\u0279",
    "\u027c\3\2\2\2\u027a\u027b\7,\2\2\u027b\u027d\5\u00f2z\2\u027c\u027a",
    "\3\2\2\2\u027c\u027d\3\2\2\2\u027d-\3\2\2\2\u027e\u028e\5\60\31\2\u027f",
    "\u028e\5l\67\2\u0280\u028e\5p9\2\u0281\u028e\5P)\2\u0282\u028e\5F$\2",
    "\u0283\u028e\5<\37\2\u0284\u028e\5@!\2\u0285\u028e\5D#\2\u0286\u028e",
    "\5B\"\2\u0287\u028e\5J&\2\u0288\u028e\5L\'\2\u0289\u028e\5f\64\2\u028a",
    "\u028e\58\35\2\u028b\u028e\5:\36\2\u028c\u028e\5$\23\2\u028d\u027e\3",
    "\2\2\2\u028d\u027f\3\2\2\2\u028d\u0280\3\2\2\2\u028d\u0281\3\2\2\2\u028d",
    "\u0282\3\2\2\2\u028d\u0283\3\2\2\2\u028d\u0284\3\2\2\2\u028d\u0285\3",
    "\2\2\2\u028d\u0286\3\2\2\2\u028d\u0287\3\2\2\2\u028d\u0288\3\2\2\2\u028d",
    "\u0289\3\2\2\2\u028d\u028a\3\2\2\2\u028d\u028b\3\2\2\2\u028d\u028c\3",
    "\2\2\2\u028e/\3\2\2\2\u028f\u0290\5\62\32\2\u0290\u0292\7\25\2\2\u0291",
    "\u0293\5`\61\2\u0292\u0291\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0294\3",
    "\2\2\2\u0294\u0295\7\26\2\2\u0295\61\3\2\2\2\u0296\u029c\5\u00a6T\2",
    "\u0297\u0298\5\64\33\2\u0298\u0299\7\24\2\2\u0299\u029a\5\u00a6T\2\u029a",
    "\u029c\3\2\2\2\u029b\u0296\3\2\2\2\u029b\u0297\3\2\2\2\u029c\63\3\2",
    "\2\2\u029d\u029e\b\33\1\2\u029e\u029f\5\u00a8U\2\u029f\u02a4\3\2\2\2",
    "\u02a0\u02a1\f\3\2\2\u02a1\u02a3\5\66\34\2\u02a2\u02a0\3\2\2\2\u02a3",
    "\u02a6\3\2\2\2\u02a4\u02a2\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5\65\3\2",
    "\2\2\u02a6\u02a4\3\2\2\2\u02a7\u02a8\7\24\2\2\u02a8\u02ae\5\u00aaV\2",
    "\u02a9\u02aa\7\27\2\2\u02aa\u02ab\5R*\2\u02ab\u02ac\7\30\2\2\u02ac\u02ae",
    "\3\2\2\2\u02ad\u02a7\3\2\2\2\u02ad\u02a9\3\2\2\2\u02ae\67\3\2\2\2\u02af",
    "\u02b0\7\u0085\2\2\u02b0\u02b1\5\u0102\u0082\2\u02b1\u02b2\7\20\2\2",
    "\u02b2\u02b3\5v<\2\u02b3\u02b4\5\u00dep\2\u02b4\u02b5\5x=\2\u02b59\3",
    "\2\2\2\u02b6\u02b7\7\u0085\2\2\u02b7\u02b8\5\u00acW\2\u02b8\u02b9\7",
    "\20\2\2\u02b9\u02ba\5v<\2\u02ba\u02bb\5\u00dep\2\u02bb\u02bc\5x=\2\u02bc",
    ";\3\2\2\2\u02bd\u02be\7\177\2\2\u02be\u02bf\7o\2\2\u02bf\u02c0\5R*\2",
    "\u02c0\u02c1\7\20\2\2\u02c1\u02c2\5v<\2\u02c2\u02ca\5\u00e2r\2\u02c3",
    "\u02c4\5t;\2\u02c4\u02c5\7s\2\2\u02c5\u02c6\7\20\2\2\u02c6\u02c7\5v",
    "<\2\u02c7\u02c8\5\u00dep\2\u02c8\u02c9\5x=\2\u02c9\u02cb\3\2\2\2\u02ca",
    "\u02c3\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02cd\5",
    "x=\2\u02cd=\3\2\2\2\u02ce\u02cf\7\u0086\2\2\u02cf\u02d0\5\u00e8u\2\u02d0",
    "\u02d1\7\20\2\2\u02d1\u02d2\5v<\2\u02d2\u02d3\5\u00dep\2\u02d3\u02d4",
    "\5x=\2\u02d4\u02de\3\2\2\2\u02d5\u02d6\7\u0086\2\2\u02d6\u02d7\7b\2",
    "\2\u02d7\u02d8\5\u00e6t\2\u02d8\u02d9\7\20\2\2\u02d9\u02da\5v<\2\u02da",
    "\u02db\5\u00dep\2\u02db\u02dc\5x=\2\u02dc\u02de\3\2\2\2\u02dd\u02ce",
    "\3\2\2\2\u02dd\u02d5\3\2\2\2\u02de?\3\2\2\2\u02df\u02e0\7^\2\2\u02e0",
    "\u02e3\5\u00aaV\2\u02e1\u02e2\7\22\2\2\u02e2\u02e4\5\u00aaV\2\u02e3",
    "\u02e1\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e6\7",
    "b\2\2\u02e6\u02e7\5R*\2\u02e7\u02e8\7\20\2\2\u02e8\u02e9\5v<\2\u02e9",
    "\u02ea\5\u00dep\2\u02ea\u02eb\5x=\2\u02ebA\3\2\2\2\u02ec\u02ed\7R\2",
    "\2\u02ed\u02ee\7\20\2\2\u02ee\u02ef\5v<\2\u02ef\u02f0\5\u00dep\2\u02f0",
    "\u02f1\5x=\2\u02f1\u02f2\5t;\2\u02f2\u02f3\7\u0088\2\2\u02f3\u02f4\5",
    "R*\2\u02f4C\3\2\2\2\u02f5\u02f6\7\u0088\2\2\u02f6\u02f7\5R*\2\u02f7",
    "\u02f8\7\20\2\2\u02f8\u02f9\5v<\2\u02f9\u02fa\5\u00dep\2\u02fa\u02fb",
    "\5x=\2\u02fbE\3\2\2\2\u02fc\u02fd\7a\2\2\u02fd\u02fe\5R*\2\u02fe\u02ff",
    "\7\20\2\2\u02ff\u0300\5v<\2\u0300\u0301\5\u00dep\2\u0301\u0305\5x=\2",
    "\u0302\u0303\5t;\2\u0303\u0304\5H%\2\u0304\u0306\3\2\2\2\u0305\u0302",
    "\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u030e\3\2\2\2\u0307\u0308\5t;\2\u0308",
    "\u0309\7U\2\2\u0309\u030a\7\20\2\2\u030a\u030b\5v<\2\u030b\u030c\5\u00de",
    "p\2\u030c\u030d\5x=\2\u030d\u030f\3\2\2\2\u030e\u0307\3\2\2\2\u030e",
    "\u030f\3\2\2\2\u030fG\3\2\2\2\u0310\u0311\b%\1\2\u0311\u0312\7U\2\2",
    "\u0312\u0313\7a\2\2\u0313\u0314\5R*\2\u0314\u0315\7\20\2\2\u0315\u0316",
    "\5v<\2\u0316\u0317\5\u00dep\2\u0317\u0318\5x=\2\u0318\u0325\3\2\2\2",
    "\u0319\u031a\f\3\2\2\u031a\u031b\5t;\2\u031b\u031c\7U\2\2\u031c\u031d",
    "\7a\2\2\u031d\u031e\5R*\2\u031e\u031f\7\20\2\2\u031f\u0320\5v<\2\u0320",
    "\u0321\5\u00dep\2\u0321\u0322\5x=\2\u0322\u0324\3\2\2\2\u0323\u0319",
    "\3\2\2\2\u0324\u0327\3\2\2\2\u0325\u0323\3\2\2\2\u0325\u0326\3\2\2\2",
    "\u0326I\3\2\2\2\u0327\u0325\3\2\2\2\u0328\u0329\7u\2\2\u0329\u032a\5",
    "R*\2\u032aK\3\2\2\2\u032b\u032c\7\u0084\2\2\u032c\u032d\5\u00aaV\2\u032d",
    "\u032e\7\20\2\2\u032e\u032f\5v<\2\u032f\u0330\5\u00dep\2\u0330\u0331",
    "\5x=\2\u0331\u0333\5r:\2\u0332\u0334\5\u00e4s\2\u0333\u0332\3\2\2\2",
    "\u0333\u0334\3\2\2\2\u0334\u033c\3\2\2\2\u0335\u0336\7X\2\2\u0336\u0337",
    "\7\20\2\2\u0337\u0338\5v<\2\u0338\u0339\5\u00dep\2\u0339\u033a\5x=\2",
    "\u033a\u033b\5r:\2\u033b\u033d\3\2\2\2\u033c\u0335\3\2\2\2\u033c\u033d",
    "\3\2\2\2\u033d\u0345\3\2\2\2\u033e\u033f\7]\2\2\u033f\u0340\7\20\2\2",
    "\u0340\u0341\5v<\2\u0341\u0342\5\u00dep\2\u0342\u0343\5x=\2\u0343\u0344",
    "\5r:\2\u0344\u0346\3\2\2\2\u0345\u033e\3\2\2\2\u0345\u0346\3\2\2\2\u0346",
    "\u0347\3\2\2\2\u0347\u0348\5r:\2\u0348M\3\2\2\2\u0349\u034a\7X\2\2\u034a",
    "\u034b\5\u00aeX\2\u034b\u034c\7\20\2\2\u034c\u034d\5v<\2\u034d\u034e",
    "\5\u00dep\2\u034e\u034f\5x=\2\u034f\u0350\5r:\2\u0350\u035d\3\2\2\2",
    "\u0351\u0352\7X\2\2\u0352\u0353\7b\2\2\u0353\u0354\7\27\2\2\u0354\u0355",
    "\5\u008aF\2\u0355\u0356\7\30\2\2\u0356\u0357\7\20\2\2\u0357\u0358\5",
    "v<\2\u0358\u0359\5\u00dep\2\u0359\u035a\5x=\2\u035a\u035b\5r:\2\u035b",
    "\u035d\3\2\2\2\u035c\u0349\3\2\2\2\u035c\u0351\3\2\2\2\u035dO\3\2\2",
    "\2\u035e\u0360\7y\2\2\u035f\u0361\5R*\2\u0360\u035f\3\2\2\2\u0360\u0361",
    "\3\2\2\2\u0361Q\3\2\2\2\u0362\u0363\b*\1\2\u0363\u0364\7\"\2\2\u0364",
    "\u0375\5R*!\u0365\u0366\7l\2\2\u0366\u0375\5R* \u0367\u0375\5V,\2\u0368",
    "\u0375\5X-\2\u0369\u036a\7=\2\2\u036a\u036b\7\25\2\2\u036b\u036c\5R",
    "*\2\u036c\u036d\7\26\2\2\u036d\u0375\3\2\2\2\u036e\u036f\7Y\2\2\u036f",
    "\u0370\7\25\2\2\u0370\u0371\5\u00aaV\2\u0371\u0372\7\26\2\2\u0372\u0375",
    "\3\2\2\2\u0373\u0375\5T+\2\u0374\u0362\3\2\2\2\u0374\u0365\3\2\2\2\u0374",
    "\u0367\3\2\2\2\u0374\u0368\3\2\2\2\u0374\u0369\3\2\2\2\u0374\u036e\3",
    "\2\2\2\u0374\u0373\3\2\2\2\u0375\u03d6\3\2\2\2\u0376\u0377\f\37\2\2",
    "\u0377\u0378\5\u0112\u008a\2\u0378\u0379\5R* \u0379\u03d5\3\2\2\2\u037a",
    "\u037b\f\36\2\2\u037b\u037c\5\u0114\u008b\2\u037c\u037d\5R*\37\u037d",
    "\u03d5\3\2\2\2\u037e\u037f\f\35\2\2\u037f\u0380\5\u0118\u008d\2\u0380",
    "\u0381\5R*\36\u0381\u03d5\3\2\2\2\u0382\u0383\f\34\2\2\u0383\u0384\5",
    "\u0116\u008c\2\u0384\u0385\5R*\35\u0385\u03d5\3\2\2\2\u0386\u0387\f",
    "\33\2\2\u0387\u0388\t\3\2\2\u0388\u03d5\5R*\34\u0389\u038a\f\32\2\2",
    "\u038a\u038b\7)\2\2\u038b\u03d5\5R*\33\u038c\u038d\f\31\2\2\u038d\u038e",
    "\7*\2\2\u038e\u03d5\5R*\32\u038f\u0390\f\30\2\2\u0390\u0391\7\'\2\2",
    "\u0391\u03d5\5R*\31\u0392\u0393\f\27\2\2\u0393\u0394\7(\2\2\u0394\u03d5",
    "\5R*\30\u0395\u0396\f\24\2\2\u0396\u0397\7.\2\2\u0397\u03d5\5R*\25\u0398",
    "\u0399\f\23\2\2\u0399\u039a\7-\2\2\u039a\u03d5\5R*\24\u039b\u039c\f",
    "\22\2\2\u039c\u039d\7/\2\2\u039d\u03d5\5R*\23\u039e\u039f\f\21\2\2\u039f",
    "\u03a0\7r\2\2\u03a0\u03d5\5R*\22\u03a1\u03a2\f\20\2\2\u03a2\u03a3\7",
    "B\2\2\u03a3\u03d5\5R*\21\u03a4\u03a5\f\17\2\2\u03a5\u03a6\7a\2\2\u03a6",
    "\u03a7\5R*\2\u03a7\u03a8\7U\2\2\u03a8\u03a9\5R*\20\u03a9\u03d5\3\2\2",
    "\2\u03aa\u03ab\f\r\2\2\u03ab\u03ac\7b\2\2\u03ac\u03d5\5R*\16\u03ad\u03ae",
    "\f\f\2\2\u03ae\u03af\7N\2\2\u03af\u03d5\5R*\r\u03b0\u03b1\f\13\2\2\u03b1",
    "\u03b2\7N\2\2\u03b2\u03b3\7@\2\2\u03b3\u03d5\5R*\f\u03b4\u03b5\f\n\2",
    "\2\u03b5\u03b6\7N\2\2\u03b6\u03b7\7C\2\2\u03b7\u03d5\5R*\13\u03b8\u03b9",
    "\f\t\2\2\u03b9\u03ba\7l\2\2\u03ba\u03bb\7b\2\2\u03bb\u03d5\5R*\n\u03bc",
    "\u03bd\f\b\2\2\u03bd\u03be\7l\2\2\u03be\u03bf\7N\2\2\u03bf\u03d5\5R",
    "*\t\u03c0\u03c1\f\7\2\2\u03c1\u03c2\7l\2\2\u03c2\u03c3\7N\2\2\u03c3",
    "\u03c4\7@\2\2\u03c4\u03d5\5R*\b\u03c5\u03c6\f\6\2\2\u03c6\u03c7\7l\2",
    "\2\u03c7\u03c8\7N\2\2\u03c8\u03c9\7C\2\2\u03c9\u03d5\5R*\7\u03ca\u03cb",
    "\f\26\2\2\u03cb\u03cc\7d\2\2\u03cc\u03cd\7l\2\2\u03cd\u03d5\5\u0106",
    "\u0084\2\u03ce\u03cf\f\25\2\2\u03cf\u03d0\7d\2\2\u03d0\u03d5\5\u0106",
    "\u0084\2\u03d1\u03d2\f\16\2\2\u03d2\u03d3\7D\2\2\u03d3\u03d5\5\u00ba",
    "^\2\u03d4\u0376\3\2\2\2\u03d4\u037a\3\2\2\2\u03d4\u037e\3\2\2\2\u03d4",
    "\u0382\3\2\2\2\u03d4\u0386\3\2\2\2\u03d4\u0389\3\2\2\2\u03d4\u038c\3",
    "\2\2\2\u03d4\u038f\3\2\2\2\u03d4\u0392\3\2\2\2\u03d4\u0395\3\2\2\2\u03d4",
    "\u0398\3\2\2\2\u03d4\u039b\3\2\2\2\u03d4\u039e\3\2\2\2\u03d4\u03a1\3",
    "\2\2\2\u03d4\u03a4\3\2\2\2\u03d4\u03aa\3\2\2\2\u03d4\u03ad\3\2\2\2\u03d4",
    "\u03b0\3\2\2\2\u03d4\u03b4\3\2\2\2\u03d4\u03b8\3\2\2\2\u03d4\u03bc\3",
    "\2\2\2\u03d4\u03c0\3\2\2\2\u03d4\u03c5\3\2\2\2\u03d4\u03ca\3\2\2\2\u03d4",
    "\u03ce\3\2\2\2\u03d4\u03d1\3\2\2\2\u03d5\u03d8\3\2\2\2\u03d6\u03d4\3",
    "\2\2\2\u03d6\u03d7\3\2\2\2\u03d7S\3\2\2\2\u03d8\u03d6\3\2\2\2\u03d9",
    "\u03da\5\u00acW\2\u03daU\3\2\2\2\u03db\u03dc\b,\1\2\u03dc\u03dd\5\u00ec",
    "w\2\u03dd\u03e2\3\2\2\2\u03de\u03df\f\3\2\2\u03df\u03e1\5Z.\2\u03e0",
    "\u03de\3\2\2\2\u03e1\u03e4\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e2\u03e3\3",
    "\2\2\2\u03e3W\3\2\2\2\u03e4\u03e2\3\2\2\2\u03e5\u03ec\5\\/\2\u03e6\u03ec",
    "\5h\65\2\u03e7\u03ec\5d\63\2\u03e8\u03ec\5j\66\2\u03e9\u03ec\5\60\31",
    "\2\u03ea\u03ec\5^\60\2\u03eb\u03e5\3\2\2\2\u03eb\u03e6\3\2\2\2\u03eb",
    "\u03e7\3\2\2\2\u03eb\u03e8\3\2\2\2\u03eb\u03e9\3\2\2\2\u03eb\u03ea\3",
    "\2\2\2\u03ecY\3\2\2\2\u03ed\u03ee\6. \3\u03ee\u03ef\7\24\2\2\u03ef\u03fb",
    "\5\u00aaV\2\u03f0\u03f1\6.!\3\u03f1\u03f2\7\27\2\2\u03f2\u03f3\5\u0100",
    "\u0081\2\u03f3\u03f4\7\30\2\2\u03f4\u03fb\3\2\2\2\u03f5\u03f6\6.\"\3",
    "\u03f6\u03f7\7\27\2\2\u03f7\u03f8\5R*\2\u03f8\u03f9\7\30\2\2\u03f9\u03fb",
    "\3\2\2\2\u03fa\u03ed\3\2\2\2\u03fa\u03f0\3\2\2\2\u03fa\u03f5\3\2\2\2",
    "\u03fb[\3\2\2\2\u03fc\u03fd\5\u00a0Q\2\u03fd]\3\2\2\2\u03fe\u0400\7",
    "i\2\2\u03ff\u03fe\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u0401\3\2\2\2\u0401",
    "\u0402\5\u009cO\2\u0402\u0404\7\25\2\2\u0403\u0405\5`\61\2\u0404\u0403",
    "\3\2\2\2\u0404\u0405\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0407\7\26\2",
    "\2\u0407_\3\2\2\2\u0408\u0409\b\61\1\2\u0409\u040a\5R*\2\u040a\u040b",
    "\6\61#\3\u040b\u040e\3\2\2\2\u040c\u040e\5b\62\2\u040d\u0408\3\2\2\2",
    "\u040d\u040c\3\2\2\2\u040e\u0414\3\2\2\2\u040f\u0410\f\3\2\2\u0410\u0411",
    "\7\22\2\2\u0411\u0413\5b\62\2\u0412\u040f\3\2\2\2\u0413\u0416\3\2\2",
    "\2\u0414\u0412\3\2\2\2\u0414\u0415\3\2\2\2\u0415a\3\2\2\2\u0416\u0414",
    "\3\2\2\2\u0417\u0418\5\u00aaV\2\u0418\u0419\5\u0110\u0089\2\u0419\u041a",
    "\5R*\2\u041ac\3\2\2\2\u041b\u041c\7v\2\2\u041c\u041d\7_\2\2\u041d\u041e",
    "\5R*\2\u041ee\3\2\2\2\u041f\u0420\7\u0089\2\2\u0420\u0421\5R*\2\u0421",
    "\u0422\7\u0083\2\2\u0422\u0423\5R*\2\u0423g\3\2\2\2\u0424\u0425\7\\",
    "\2\2\u0425\u0426\5\u00aaV\2\u0426\u0427\7_\2\2\u0427\u0428\5R*\2\u0428",
    "\u0429\7\u0087\2\2\u0429\u042a\5R*\2\u042ai\3\2\2\2\u042b\u042c\7~\2",
    "\2\u042c\u042d\7\25\2\2\u042d\u0433\5V,\2\u042e\u042f\7\22\2\2\u042f",
    "\u0430\5\u010a\u0086\2\u0430\u0431\7,\2\2\u0431\u0432\5V,\2\u0432\u0434",
    "\3\2\2\2\u0433\u042e\3\2\2\2\u0433\u0434\3\2\2\2\u0434\u0435\3\2\2\2",
    "\u0435\u0436\7\26\2\2\u0436k\3\2\2\2\u0437\u0438\5\u0104\u0083\2\u0438",
    "\u0439\5\u0110\u0089\2\u0439\u043a\5R*\2\u043am\3\2\2\2\u043b\u043c",
    "\68%\3\u043c\u043d\7\24\2\2\u043d\u0444\5\u00aaV\2\u043e\u043f\68&\3",
    "\u043f\u0440\7\27\2\2\u0440\u0441\5R*\2\u0441\u0442\7\30\2\2\u0442\u0444",
    "\3\2\2\2\u0443\u043b\3\2\2\2\u0443\u043e\3\2\2\2\u0444o\3\2\2\2\u0445",
    "\u0446\5\u00d2j\2\u0446\u0447\5\u0110\u0089\2\u0447\u0448\5R*\2\u0448",
    "q\3\2\2\2\u0449\u044b\7\7\2\2\u044a\u0449\3\2\2\2\u044b\u044e\3\2\2",
    "\2\u044c\u044a\3\2\2\2\u044c\u044d\3\2\2\2\u044ds\3\2\2\2\u044e\u044c",
    "\3\2\2\2\u044f\u0451\7\7\2\2\u0450\u044f\3\2\2\2\u0451\u0452\3\2\2\2",
    "\u0452\u0450\3\2\2\2\u0452\u0453\3\2\2\2\u0453u\3\2\2\2\u0454\u0456",
    "\7\7\2\2\u0455\u0454\3\2\2\2\u0456\u0457\3\2\2\2\u0457\u0455\3\2\2\2",
    "\u0457\u0458\3\2\2\2\u0458\u0459\3\2\2\2\u0459\u045a\7\3\2\2\u045aw",
    "\3\2\2\2\u045b\u045d\7\7\2\2\u045c\u045b\3\2\2\2\u045d\u0460\3\2\2\2",
    "\u045e\u045c\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u0461\3\2\2\2\u0460\u045e",
    "\3\2\2\2\u0461\u0462\7\4\2\2\u0462y\3\2\2\2\u0463\u0464\7k\2\2\u0464",
    "{\3\2\2\2\u0465\u0467\5~@\2\u0466\u0465\3\2\2\2\u0466\u0467\3\2\2\2",
    "\u0467\u0468\3\2\2\2\u0468\u0469\5r:\2\u0469\u046a\7\2\2\3\u046a}\3",
    "\2\2\2\u046b\u046c\b@\1\2\u046c\u046d\5\u0080A\2\u046d\u0474\3\2\2\2",
    "\u046e\u046f\f\3\2\2\u046f\u0470\5t;\2\u0470\u0471\5\u0080A\2\u0471",
    "\u0473\3\2\2\2\u0472\u046e\3\2\2\2\u0473\u0476\3\2\2\2\u0474\u0472\3",
    "\2\2\2\u0474\u0475\3\2\2\2\u0475\177\3\2\2\2\u0476\u0474\3\2\2\2\u0477",
    "\u047d\5\n\6\2\u0478\u047d\5\u00a2R\2\u0479\u047d\5\u0082B\2\u047a\u047d",
    "\5\u0084C\2\u047b\u047d\5\u00d4k\2\u047c\u0477\3\2\2\2\u047c\u0478\3",
    "\2\2\2\u047c\u0479\3\2\2\2\u047c\u047a\3\2\2\2\u047c\u047b\3\2\2\2\u047d",
    "\u0081\3\2\2\2\u047e\u047f\5\32\16\2\u047f\u0083\3\2\2\2\u0480\u0483",
    "\5\2\2\2\u0481\u0483\5\4\3\2\u0482\u0480\3\2\2\2\u0482\u0481\3\2\2\2",
    "\u0483\u0085\3\2\2\2\u0484\u0485\bD\1\2\u0485\u0486\5\6\4\2\u0486\u048d",
    "\3\2\2\2\u0487\u0488\f\3\2\2\u0488\u0489\5t;\2\u0489\u048a\5\6\4\2\u048a",
    "\u048c\3\2\2\2\u048b\u0487\3\2\2\2\u048c\u048f\3\2\2\2\u048d\u048b\3",
    "\2\2\2\u048d\u048e\3\2\2\2\u048e\u0087\3\2\2\2\u048f\u048d\3\2\2\2\u0490",
    "\u0491\bE\1\2\u0491\u0492\5\b\5\2\u0492\u0499\3\2\2\2\u0493\u0494\f",
    "\3\2\2\u0494\u0495\5t;\2\u0495\u0496\5\b\5\2\u0496\u0498\3\2\2\2\u0497",
    "\u0493\3\2\2\2\u0498\u049b\3\2\2\2\u0499\u0497\3\2\2\2\u0499\u049a\3",
    "\2\2\2\u049a\u0089\3\2\2\2\u049b\u0499\3\2\2\2\u049c\u049d\bF\1\2\u049d",
    "\u049e\5\u00aeX\2\u049e\u04a4\3\2\2\2\u049f\u04a0\f\3\2\2\u04a0\u04a1",
    "\7\22\2\2\u04a1\u04a3\5\u00aeX\2\u04a2\u049f\3\2\2\2\u04a3\u04a6\3\2",
    "\2\2\u04a4\u04a2\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u008b\3\2\2\2\u04a6",
    "\u04a4\3\2\2\2\u04a7\u04a8\7b\2\2\u04a8\u04b2\5\u008eH\2\u04a9\u04aa",
    "\7b\2\2\u04aa\u04b2\5\u0090I\2\u04ab\u04ac\7b\2\2\u04ac\u04b2\5\u0094",
    "K\2\u04ad\u04ae\7e\2\2\u04ae\u04b2\7\u0093\2\2\u04af\u04b0\7e\2\2\u04b0",
    "\u04b2\5R*\2\u04b1\u04a7\3\2\2\2\u04b1\u04a9\3\2\2\2\u04b1\u04ab\3\2",
    "\2\2\u04b1\u04ad\3\2\2\2\u04b1\u04af\3\2\2\2\u04b2\u008d\3\2\2\2\u04b3",
    "\u04b5\7\27\2\2\u04b4\u04b6\5\u0092J\2\u04b5\u04b4\3\2\2\2\u04b5\u04b6",
    "\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7\u04b8\7\30\2\2\u04b8\u008f\3\2\2",
    "\2\u04b9\u04bb\7)\2\2\u04ba\u04bc\5\u0092J\2\u04bb\u04ba\3\2\2\2\u04bb",
    "\u04bc\3\2\2\2\u04bc\u04bd\3\2\2\2\u04bd\u04be\7\'\2\2\u04be\u0091\3",
    "\2\2\2\u04bf\u04c0\bJ\1\2\u04c0\u04c1\5R*\2\u04c1\u04c7\3\2\2\2\u04c2",
    "\u04c3\f\3\2\2\u04c3\u04c4\7\22\2\2\u04c4\u04c6\5R*\2\u04c5\u04c2\3",
    "\2\2\2\u04c6\u04c9\3\2\2\2\u04c7\u04c5\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8",
    "\u0093\3\2\2\2\u04c9\u04c7\3\2\2\2\u04ca\u04cb\7\27\2\2\u04cb\u04cc",
    "\5R*\2\u04cc\u04cd\7\23\2\2\u04cd\u04ce\5R*\2\u04ce\u04cf\7\30\2\2\u04cf",
    "\u0095\3\2\2\2\u04d0\u04d1\bL\1\2\u04d1\u04d2\5\u0098M\2\u04d2\u04dd",
    "\3\2\2\2\u04d3\u04d4\f\5\2\2\u04d4\u04dc\7+\2\2\u04d5\u04d6\f\4\2\2",
    "\u04d6\u04d7\7\27\2\2\u04d7\u04dc\7\30\2\2\u04d8\u04d9\f\3\2\2\u04d9",
    "\u04da\7\31\2\2\u04da\u04dc\7\32\2\2\u04db\u04d3\3\2\2\2\u04db\u04d5",
    "\3\2\2\2\u04db\u04d8\3\2\2\2\u04dc\u04df\3\2\2\2\u04dd\u04db\3\2\2\2",
    "\u04dd\u04de\3\2\2\2\u04de\u0097\3\2\2\2\u04df\u04dd\3\2\2\2\u04e0\u04e3",
    "\5\u009aN\2\u04e1\u04e3\5\u009cO\2\u04e2\u04e0\3\2\2\2\u04e2\u04e1\3",
    "\2\2\2\u04e3\u0099\3\2\2\2\u04e4\u04ef\7\63\2\2\u04e5\u04ef\7\64\2\2",
    "\u04e6\u04ef\7\65\2\2\u04e7\u04ef\7\66\2\2\u04e8\u04ef\7\67\2\2\u04e9",
    "\u04ef\78\2\2\u04ea\u04ef\7:\2\2\u04eb\u04ef\79\2\2\u04ec\u04ef\7;\2",
    "\2\u04ed\u04ef\7=\2\2\u04ee\u04e4\3\2\2\2\u04ee\u04e5\3\2\2\2\u04ee",
    "\u04e6\3\2\2\2\u04ee\u04e7\3\2\2\2\u04ee\u04e8\3\2\2\2\u04ee\u04e9\3",
    "\2\2\2\u04ee\u04ea\3\2\2\2\u04ee\u04eb\3\2\2\2\u04ee\u04ec\3\2\2\2\u04ee",
    "\u04ed\3\2\2\2\u04ef\u009b\3\2\2\2\u04f0\u04f1\7\u008f\2\2\u04f1\u009d",
    "\3\2\2\2\u04f2\u04f3\7=\2\2\u04f3\u009f\3\2\2\2\u04f4\u04f5\7>\2\2\u04f5",
    "\u00a1\3\2\2\2\u04f6\u04fa\5\f\7\2\u04f7\u04fa\5\30\r\2\u04f8\u04fa",
    "\5\16\b\2\u04f9\u04f6\3\2\2\2\u04f9\u04f7\3\2\2\2\u04f9\u04f8\3\2\2",
    "\2\u04fa\u00a3\3\2\2\2\u04fb\u04fc\bS\1\2\u04fc\u04fd\5\u00acW\2\u04fd",
    "\u0503\3\2\2\2\u04fe\u04ff\f\3\2\2\u04ff\u0500\7\22\2\2\u0500\u0502",
    "\5\u00acW\2\u0501\u04fe\3\2\2\2\u0502\u0505\3\2\2\2\u0503\u0501\3\2",
    "\2\2\u0503\u0504\3\2\2\2\u0504\u00a5\3\2\2\2\u0505\u0503\3\2\2\2\u0506",
    "\u0509\5\u00aaV\2\u0507\u0509\5\u00acW\2\u0508\u0506\3\2\2\2\u0508\u0507",
    "\3\2\2\2\u0509\u00a7\3\2\2\2\u050a\u050e\5\u00aaV\2\u050b\u050e\5\u00ac",
    "W\2\u050c\u050e\5\u00aeX\2\u050d\u050a\3\2\2\2\u050d\u050b\3\2\2\2\u050d",
    "\u050c\3\2\2\2\u050e\u00a9\3\2\2\2\u050f\u0510\7\u0090\2\2\u0510\u00ab",
    "\3\2\2\2\u0511\u0512\7\u008f\2\2\u0512\u00ad\3\2\2\2\u0513\u0514\7\u008e",
    "\2\2\u0514\u00af\3\2\2\2\u0515\u0516\bY\1\2\u0516\u0517\5\u00b2Z\2\u0517",
    "\u051d\3\2\2\2\u0518\u0519\f\3\2\2\u0519\u051a\7\22\2\2\u051a\u051c",
    "\5\u00b2Z\2\u051b\u0518\3\2\2\2\u051c\u051f\3\2\2\2\u051d\u051b\3\2",
    "\2\2\u051d\u051e\3\2\2\2\u051e\u00b1\3\2\2\2\u051f\u051d\3\2\2\2\u0520",
    "\u0526\5\u00b8]\2\u0521\u0523\7i\2\2\u0522\u0521\3\2\2\2\u0522\u0523",
    "\3\2\2\2\u0523\u0524\3\2\2\2\u0524\u0526\5\u00b4[\2\u0525\u0520\3\2",
    "\2\2\u0525\u0522\3\2\2\2\u0526\u00b3\3\2\2\2\u0527\u052a\5\u00b6\\\2",
    "\u0528\u052a\5,\27\2\u0529\u0527\3\2\2\2\u0529\u0528\3\2\2\2\u052a\u00b5",
    "\3\2\2\2\u052b\u052e\5\u00aaV\2\u052c\u052d\7,\2\2\u052d\u052f\5\u00f2",
    "z\2\u052e\u052c\3\2\2\2\u052e\u052f\3\2\2\2\u052f\u00b7\3\2\2\2\u0530",
    "\u0531\5\u009eP\2\u0531\u0532\5\u00aaV\2\u0532\u00b9\3\2\2\2\u0533\u0536",
    "\5\u0096L\2\u0534\u0536\5\u00bc_\2\u0535\u0533\3\2\2\2\u0535\u0534\3",
    "\2\2\2\u0536\u00bb\3\2\2\2\u0537\u0538\b_\1\2\u0538\u0539\7C\2\2\u0539",
    "\u0542\3\2\2\2\u053a\u053b\f\4\2\2\u053b\u053c\7\27\2\2\u053c\u0541",
    "\7\30\2\2\u053d\u053e\f\3\2\2\u053e\u053f\7\31\2\2\u053f\u0541\7\32",
    "\2\2\u0540\u053a\3\2\2\2\u0540\u053d\3\2\2\2\u0541\u0544\3\2\2\2\u0542",
    "\u0540\3\2\2\2\u0542\u0543\3\2\2\2\u0543\u00bd\3\2\2\2\u0544\u0542\3",
    "\2\2\2\u0545\u0546\b`\1\2\u0546\u0547\5\u00c0a\2\u0547\u054e\3\2\2\2",
    "\u0548\u0549\f\3\2\2\u0549\u054a\5t;\2\u054a\u054b\5\u00c0a\2\u054b",
    "\u054d\3\2\2\2\u054c\u0548\3\2\2\2\u054d\u0550\3\2\2\2\u054e\u054c\3",
    "\2\2\2\u054e\u054f\3\2\2\2\u054f\u00bf\3\2\2\2\u0550\u054e\3\2\2\2\u0551",
    "\u0557\5\24\13\2\u0552\u0557\5\26\f\2\u0553\u0557\5$\23\2\u0554\u0557",
    "\5\"\22\2\u0555\u0557\5\22\n\2\u0556\u0551\3\2\2\2\u0556\u0552\3\2\2",
    "\2\u0556\u0553\3\2\2\2\u0556\u0554\3\2\2\2\u0556\u0555\3\2\2\2\u0557",
    "\u00c1\3\2\2\2\u0558\u0559\bb\1\2\u0559\u055a\5\u00c4c\2\u055a\u0561",
    "\3\2\2\2\u055b\u055c\f\3\2\2\u055c\u055d\5t;\2\u055d\u055e\5\u00c4c",
    "\2\u055e\u0560\3\2\2\2\u055f\u055b\3\2\2\2\u0560\u0563\3\2\2\2\u0561",
    "\u055f\3\2\2\2\u0561\u0562\3\2\2\2\u0562\u00c3\3\2\2\2\u0563\u0561\3",
    "\2\2\2\u0564\u0567\5\u00c0a\2\u0565\u0567\5&\24\2\u0566\u0564\3\2\2",
    "\2\u0566\u0565\3\2\2\2\u0567\u00c5\3\2\2\2\u0568\u0569\7\n\2\2\u0569",
    "\u0573\5\u015e\u00b0\2\u056a\u056b\7\13\2\2\u056b\u0573\5\u0176\u00bc",
    "\2\u056c\u056d\7\f\2\2\u056d\u0573\5\u00c8e\2\u056e\u056f\7\r\2\2\u056f",
    "\u0573\5\u00c8e\2\u0570\u0571\7\16\2\2\u0571\u0573\5\u00ceh\2\u0572",
    "\u0568\3\2\2\2\u0572\u056a\3\2\2\2\u0572\u056c\3\2\2\2\u0572\u056e\3",
    "\2\2\2\u0572\u0570\3\2\2\2\u0573\u00c7\3\2\2\2\u0574\u0576\5\u00a8U",
    "\2\u0575\u0577\5\u00caf\2\u0576\u0575\3\2\2\2\u0576\u0577\3\2\2\2\u0577",
    "\u00c9\3\2\2\2\u0578\u0579\7_\2\2\u0579\u057a\5\u00ccg\2\u057a\u057b",
    "\7\20\2\2\u057b\u0580\5\u00a8U\2\u057c\u057d\7\24\2\2\u057d\u057f\5",
    "\u00a8U\2\u057e\u057c\3\2\2\2\u057f\u0582\3\2\2\2\u0580\u057e\3\2\2",
    "\2\u0580\u0581\3\2\2\2\u0581\u00cb\3\2\2\2\u0582\u0580\3\2\2\2\u0583",
    "\u0584\7\u0090\2\2\u0584\u0585\6g\65\3\u0585\u00cd\3\2\2\2\u0586\u0588",
    "\5\u00a8U\2\u0587\u0589\5\u00d0i\2\u0588\u0587\3\2\2\2\u0588\u0589\3",
    "\2\2\2\u0589\u00cf\3\2\2\2\u058a\u058b\7_\2\2\u058b\u058c\5\u00ccg\2",
    "\u058c\u058e\7\20\2\2\u058d\u058f\7$\2\2\u058e\u058d\3\2\2\2\u058e\u058f",
    "\3\2\2\2\u058f\u0590\3\2\2\2\u0590\u0595\5\u0130\u0099\2\u0591\u0592",
    "\7$\2\2\u0592\u0594\5\u0130\u0099\2\u0593\u0591\3\2\2\2\u0594\u0597",
    "\3\2\2\2\u0595\u0593\3\2\2\2\u0595\u0596\3\2\2\2\u0596\u059a\3\2\2\2",
    "\u0597\u0595\3\2\2\2\u0598\u0599\7\24\2\2\u0599\u059b\5\u0130\u0099",
    "\2\u059a\u0598\3\2\2\2\u059a\u059b\3\2\2\2\u059b\u00d1\3\2\2\2\u059c",
    "\u059d\bj\1\2\u059d\u059e\5\u00aaV\2\u059e\u05a4\3\2\2\2\u059f\u05a0",
    "\f\3\2\2\u05a0\u05a1\7\22\2\2\u05a1\u05a3\5\u00aaV\2\u05a2\u059f\3\2",
    "\2\2\u05a3\u05a6\3\2\2\2\u05a4\u05a2\3\2\2\2\u05a4\u05a5\3\2\2\2\u05a5",
    "\u00d3\3\2\2\2\u05a6\u05a4\3\2\2\2\u05a7\u05ac\5\"\22\2\u05a8\u05ac",
    "\5$\23\2\u05a9\u05ac\5&\24\2\u05aa\u05ac\5(\25\2\u05ab\u05a7\3\2\2\2",
    "\u05ab\u05a8\3\2\2\2\u05ab\u05a9\3\2\2\2\u05ab\u05aa\3\2\2\2\u05ac\u00d5",
    "\3\2\2\2\u05ad\u05ae\bl\1\2\u05ae\u05af\5\u00d8m\2\u05af\u05b6\3\2\2",
    "\2\u05b0\u05b1\f\3\2\2\u05b1\u05b2\5t;\2\u05b2\u05b3\5\u00d8m\2\u05b3",
    "\u05b5\3\2\2\2\u05b4\u05b0\3\2\2\2\u05b5\u05b8\3\2\2\2\u05b6\u05b4\3",
    "\2\2\2\u05b6\u05b7\3\2\2\2\u05b7\u00d7\3\2\2\2\u05b8\u05b6\3\2\2\2\u05b9",
    "\u05ba\7\n\2\2\u05ba\u05c4\5\u014a\u00a6\2\u05bb\u05bc\7\13\2\2\u05bc",
    "\u05c4\5\u0164\u00b3\2\u05bd\u05be\7\f\2\2\u05be\u05c4\5\u00dan\2\u05bf",
    "\u05c0\7\r\2\2\u05c0\u05c4\5\u00dan\2\u05c1\u05c2\7\16\2\2\u05c2\u05c4",
    "\5\u00dco\2\u05c3\u05b9\3\2\2\2\u05c3\u05bb\3\2\2\2\u05c3\u05bd\3\2",
    "\2\2\u05c3\u05bf\3\2\2\2\u05c3\u05c1\3\2\2\2\u05c4\u00d9\3\2\2\2\u05c5",
    "\u05c7\5\u0132\u009a\2\u05c6\u05c8\7\21\2\2\u05c7\u05c6\3\2\2\2\u05c7",
    "\u05c8\3\2\2\2\u05c8\u05ca\3\2\2\2\u05c9\u05cb\5\u00caf\2\u05ca\u05c9",
    "\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u00db\3\2\2\2\u05cc\u05ce\5\u011a",
    "\u008e\2\u05cd\u05cf\7\21\2\2\u05ce\u05cd\3\2\2\2\u05ce\u05cf\3\2\2",
    "\2\u05cf\u05d1\3\2\2\2\u05d0\u05d2\5\u00d0i\2\u05d1\u05d0\3\2\2\2\u05d1",
    "\u05d2\3\2\2\2\u05d2\u00dd\3\2\2\2\u05d3\u05d4\bp\1\2\u05d4\u05d5\5",
    ".\30\2\u05d5\u05dc\3\2\2\2\u05d6\u05d7\f\3\2\2\u05d7\u05d8\5t;\2\u05d8",
    "\u05d9\5.\30\2\u05d9\u05db\3\2\2\2\u05da\u05d6\3\2\2\2\u05db\u05de\3",
    "\2\2\2\u05dc\u05da\3\2\2\2\u05dc\u05dd\3\2\2\2\u05dd\u00df\3\2\2\2\u05de",
    "\u05dc\3\2\2\2\u05df\u05e0\bq\1\2\u05e0\u05e1\5*\26\2\u05e1\u05e8\3",
    "\2\2\2\u05e2\u05e3\f\3\2\2\u05e3\u05e4\5t;\2\u05e4\u05e5\5*\26\2\u05e5",
    "\u05e7\3\2\2\2\u05e6\u05e2\3\2\2\2\u05e7\u05ea\3\2\2\2\u05e8\u05e6\3",
    "\2\2\2\u05e8\u05e9\3\2\2\2\u05e9\u00e1\3\2\2\2\u05ea\u05e8\3\2\2\2\u05eb",
    "\u05ec\br\1\2\u05ec\u05ed\5> \2\u05ed\u05f4\3\2\2\2\u05ee\u05ef\f\3",
    "\2\2\u05ef\u05f0\5t;\2\u05f0\u05f1\5> \2\u05f1\u05f3\3\2\2\2\u05f2\u05ee",
    "\3\2\2\2\u05f3\u05f6\3\2\2\2\u05f4\u05f2\3\2\2\2\u05f4\u05f5\3\2\2\2",
    "\u05f5\u00e3\3\2\2\2\u05f6\u05f4\3\2\2\2\u05f7\u05f8\bs\1\2\u05f8\u05f9",
    "\5N(\2\u05f9\u0600\3\2\2\2\u05fa\u05fb\f\3\2\2\u05fb\u05fc\5t;\2\u05fc",
    "\u05fd\5N(\2\u05fd\u05ff\3\2\2\2\u05fe\u05fa\3\2\2\2\u05ff\u0602\3\2",
    "\2\2\u0600\u05fe\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u00e5\3\2\2\2\u0602",
    "\u0600\3\2\2\2\u0603\u0604\7\27\2\2\u0604\u0605\5\u00e8u\2\u0605\u0606",
    "\7\23\2\2\u0606\u0607\5\u00e8u\2\u0607\u0608\7\30\2\2\u0608\u0612\3",
    "\2\2\2\u0609\u060a\7\27\2\2\u060a\u060b\5\u00eav\2\u060b\u060c\7\30",
    "\2\2\u060c\u0612\3\2\2\2\u060d\u060e\7)\2\2\u060e\u060f\5\u00eav\2\u060f",
    "\u0610\7\'\2\2\u0610\u0612\3\2\2\2\u0611\u0603\3\2\2\2\u0611\u0609\3",
    "\2\2\2\u0611\u060d\3\2\2\2\u0612\u00e7\3\2\2\2\u0613\u0621\7\u008c\2",
    "\2\u0614\u0621\7\u008d\2\2\u0615\u0621\7\u0094\2\2\u0616\u0621\7\u0095",
    "\2\2\u0617\u0621\7\u008b\2\2\u0618\u0621\7\u0099\2\2\u0619\u0621\7\u0098",
    "\2\2\u061a\u0621\7\u0093\2\2\u061b\u0621\7\u0096\2\2\u061c\u0621\7\u0097",
    "\2\2\u061d\u0621\7\u008a\2\2\u061e\u0621\7\u009a\2\2\u061f\u0621\5z",
    ">\2\u0620\u0613\3\2\2\2\u0620\u0614\3\2\2\2\u0620\u0615\3\2\2\2\u0620",
    "\u0616\3\2\2\2\u0620\u0617\3\2\2\2\u0620\u0618\3\2\2\2\u0620\u0619\3",
    "\2\2\2\u0620\u061a\3\2\2\2\u0620\u061b\3\2\2\2\u0620\u061c\3\2\2\2\u0620",
    "\u061d\3\2\2\2\u0620\u061e\3\2\2\2\u0620\u061f\3\2\2\2\u0621\u00e9\3",
    "\2\2\2\u0622\u0623\bv\1\2\u0623\u0624\5\u00e8u\2\u0624\u062a\3\2\2\2",
    "\u0625\u0626\f\3\2\2\u0626\u0627\7\22\2\2\u0627\u0629\5\u00e8u\2\u0628",
    "\u0625\3\2\2\2\u0629\u062c\3\2\2\2\u062a\u0628\3\2\2\2\u062a\u062b\3",
    "\2\2\2\u062b\u00eb\3\2\2\2\u062c\u062a\3\2\2\2\u062d\u0632\5\u00f0y",
    "\2\u062e\u0632\5\u00f2z\2\u062f\u0632\5\u00a8U\2\u0630\u0632\5\u00ee",
    "x\2\u0631\u062d\3\2\2\2\u0631\u062e\3\2\2\2\u0631\u062f\3\2\2\2\u0631",
    "\u0630\3\2\2\2\u0632\u00ed\3\2\2\2\u0633\u0634\t\4\2\2\u0634\u00ef\3",
    "\2\2\2\u0635\u0636\7\25\2\2\u0636\u0637\5R*\2\u0637\u0638\7\26\2\2\u0638",
    "\u00f1\3\2\2\2\u0639\u063c\5\u00e8u\2\u063a\u063c\5\u00f4{\2\u063b\u0639",
    "\3\2\2\2\u063b\u063a\3\2\2\2\u063c\u00f3\3\2\2\2\u063d\u0643\5\u0094",
    "K\2\u063e\u0643\5\u008eH\2\u063f\u0643\5\u0090I\2\u0640\u0643\5\u00f8",
    "}\2\u0641\u0643\5\u00f6|\2\u0642\u063d\3\2\2\2\u0642\u063e\3\2\2\2\u0642",
    "\u063f\3\2\2\2\u0642\u0640\3\2\2\2\u0642\u0641\3\2\2\2\u0643\u00f5\3",
    "\2\2\2\u0644\u0646\7\25\2\2\u0645\u0647\5\u00fa~\2\u0646\u0645\3\2\2",
    "\2\u0646\u0647\3\2\2\2\u0647\u0648\3\2\2\2\u0648\u0649\7\26\2\2\u0649",
    "\u00f7\3\2\2\2\u064a\u064c\7\31\2\2\u064b\u064d\5\u00fc\177\2\u064c",
    "\u064b\3\2\2\2\u064c\u064d\3\2\2\2\u064d\u064e\3\2\2\2\u064e\u064f\7",
    "\32\2\2\u064f\u00f9\3\2\2\2\u0650\u0651\b~\1\2\u0651\u0652\5R*\2\u0652",
    "\u0658\3\2\2\2\u0653\u0654\f\3\2\2\u0654\u0655\7\22\2\2\u0655\u0657",
    "\5R*\2\u0656\u0653\3\2\2\2\u0657\u065a\3\2\2\2\u0658\u0656\3\2\2\2\u0658",
    "\u0659\3\2\2\2\u0659\u00fb\3\2\2\2\u065a\u0658\3\2\2\2\u065b\u065c\b",
    "\177\1\2\u065c\u065d\5\u00fe\u0080\2\u065d\u0663\3\2\2\2\u065e\u065f",
    "\f\3\2\2\u065f\u0660\7\22\2\2\u0660\u0662\5\u00fe\u0080\2\u0661\u065e",
    "\3\2\2\2\u0662\u0665\3\2\2\2\u0663\u0661\3\2\2\2\u0663\u0664\3\2\2\2",
    "\u0664\u00fd\3\2\2\2\u0665\u0663\3\2\2\2\u0666\u0667\5R*\2\u0667\u0668",
    "\7\20\2\2\u0668\u0669\5R*\2\u0669\u00ff\3\2\2\2\u066a\u066b\5R*\2\u066b",
    "\u066c\7\20\2\2\u066c\u066d\5R*\2\u066d\u0674\3\2\2\2\u066e\u066f\5",
    "R*\2\u066f\u0670\7\20\2\2\u0670\u0674\3\2\2\2\u0671\u0672\7\20\2\2\u0672",
    "\u0674\5R*\2\u0673\u066a\3\2\2\2\u0673\u066e\3\2\2\2\u0673\u0671\3\2",
    "\2\2\u0674\u0101\3\2\2\2\u0675\u0676\5\u00aaV\2\u0676\u0677\5\u0110",
    "\u0089\2\u0677\u0678\5R*\2\u0678\u0103\3\2\2\2\u0679\u067a\b\u0083\1",
    "\2\u067a\u067b\5\u00aaV\2\u067b\u0680\3\2\2\2\u067c\u067d\f\3\2\2\u067d",
    "\u067f\5n8\2\u067e\u067c\3\2\2\2\u067f\u0682\3\2\2\2\u0680\u067e\3\2",
    "\2\2\u0680\u0681\3\2\2\2\u0681\u0105\3\2\2\2\u0682\u0680\3\2\2\2\u0683",
    "\u0684\6\u0084@\3\u0684\u0685\7\u0090\2\2\u0685\u0688\5\u00ba^\2\u0686",
    "\u0688\5R*\2\u0687\u0683\3\2\2\2\u0687\u0686\3\2\2\2\u0688\u0107\3\2",
    "\2\2\u0689\u0690\7!\2\2\u068a\u0690\7\"\2\2\u068b\u0690\5\u0112\u008a",
    "\2\u068c\u0690\5\u0114\u008b\2\u068d\u0690\5\u0116\u008c\2\u068e\u0690",
    "\5\u0118\u008d\2\u068f\u0689\3\2\2\2\u068f\u068a\3\2\2\2\u068f\u068b",
    "\3\2\2\2\u068f\u068c\3\2\2\2\u068f\u068d\3\2\2\2\u068f\u068e\3\2\2\2",
    "\u0690\u0109\3\2\2\2\u0691\u0692\7\u0090\2\2\u0692\u0693\6\u0086A\3",
    "\u0693\u010b\3\2\2\2\u0694\u0695\7\u0090\2\2\u0695\u0696\6\u0087B\3",
    "\u0696\u010d\3\2\2\2\u0697\u0698\7\u0090\2\2\u0698\u0699\6\u0088C\3",
    "\u0699\u010f\3\2\2\2\u069a\u069b\7,\2\2\u069b\u0111\3\2\2\2\u069c\u069d",
    "\7#\2\2\u069d\u0113\3\2\2\2\u069e\u069f\7$\2\2\u069f\u0115\3\2\2\2\u06a0",
    "\u06a1\7%\2\2\u06a1\u0117\3\2\2\2\u06a2\u06a3\t\5\2\2\u06a3\u0119\3",
    "\2\2\2\u06a4\u06a5\7y\2\2\u06a5\u06a6\5\u011c\u008f\2\u06a6\u06a7\7",
    "\21\2\2\u06a7\u06ac\3\2\2\2\u06a8\u06a9\5\u011c\u008f\2\u06a9\u06aa",
    "\7\21\2\2\u06aa\u06ac\3\2\2\2\u06ab\u06a4\3\2\2\2\u06ab\u06a8\3\2\2",
    "\2\u06ac\u011b\3\2\2\2\u06ad\u06ae\b\u008f\1\2\u06ae\u06af\5\u011e\u0090",
    "\2\u06af\u06b4\3\2\2\2\u06b0\u06b1\f\3\2\2\u06b1\u06b3\5\u0122\u0092",
    "\2\u06b2\u06b0\3\2\2\2\u06b3\u06b6\3\2\2\2\u06b4\u06b2\3\2\2\2\u06b4",
    "\u06b5\3\2\2\2\u06b5\u011d\3\2\2\2\u06b6\u06b4\3\2\2\2\u06b7\u06be\5",
    "\u0120\u0091\2\u06b8\u06be\5\u012a\u0096\2\u06b9\u06be\5\u012c\u0097",
    "\2\u06ba\u06be\5\u012e\u0098\2\u06bb\u06be\5\u0124\u0093\2\u06bc\u06be",
    "\5\u0128\u0095\2\u06bd\u06b7\3\2\2\2\u06bd\u06b8\3\2\2\2\u06bd\u06b9",
    "\3\2\2\2\u06bd\u06ba\3\2\2\2\u06bd\u06bb\3\2\2\2\u06bd\u06bc\3\2\2\2",
    "\u06be\u011f\3\2\2\2\u06bf\u06c0\5\u00eex\2\u06c0\u0121\3\2\2\2\u06c1",
    "\u06c2\7\24\2\2\u06c2\u06c7\5\u0124\u0093\2\u06c3\u06c4\7\24\2\2\u06c4",
    "\u06c7\5\u0130\u0099\2\u06c5\u06c7\5\u0128\u0095\2\u06c6\u06c1\3\2\2",
    "\2\u06c6\u06c3\3\2\2\2\u06c6\u06c5\3\2\2\2\u06c7\u0123\3\2\2\2\u06c8",
    "\u06c9\5\u0130\u0099\2\u06c9\u06cb\7\25\2\2\u06ca\u06cc\5\u0126\u0094",
    "\2\u06cb\u06ca\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06cd\3\2\2\2\u06cd",
    "\u06ce\7\26\2\2\u06ce\u0125\3\2\2\2\u06cf\u06d0\b\u0094\1\2\u06d0\u06d1",
    "\5\u011c\u008f\2\u06d1\u06d7\3\2\2\2\u06d2\u06d3\f\3\2\2\u06d3\u06d4",
    "\7\22\2\2\u06d4\u06d6\5\u011c\u008f\2\u06d5\u06d2\3\2\2\2\u06d6\u06d9",
    "\3\2\2\2\u06d7\u06d5\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8\u0127\3\2\2\2",
    "\u06d9\u06d7\3\2\2\2\u06da\u06db\7\27\2\2\u06db\u06dc\5\u011c\u008f",
    "\2\u06dc\u06dd\7\30\2\2\u06dd\u0129\3\2\2\2\u06de\u06df\7\25\2\2\u06df",
    "\u06e0\5\u011c\u008f\2\u06e0\u06e1\7\26\2\2\u06e1\u012b\3\2\2\2\u06e2",
    "\u06e3\5\u0130\u0099\2\u06e3\u012d\3\2\2\2\u06e4\u06ea\7\u0094\2\2\u06e5",
    "\u06ea\7\u0096\2\2\u06e6\u06ea\7\u0093\2\2\u06e7\u06ea\7\u008a\2\2\u06e8",
    "\u06ea\7\u008b\2\2\u06e9\u06e4\3\2\2\2\u06e9\u06e5\3\2\2\2\u06e9\u06e6",
    "\3\2\2\2\u06e9\u06e7\3\2\2\2\u06e9\u06e8\3\2\2\2\u06ea\u012f\3\2\2\2",
    "\u06eb\u06ec\t\6\2\2\u06ec\u0131\3\2\2\2\u06ed\u06ee\7y\2\2\u06ee\u06f1",
    "\5\u0134\u009b\2\u06ef\u06f1\5\u0134\u009b\2\u06f0\u06ed\3\2\2\2\u06f0",
    "\u06ef\3\2\2\2\u06f1\u0133\3\2\2\2\u06f2\u06f3\b\u009b\1\2\u06f3\u06f4",
    "\5\u0136\u009c\2\u06f4\u06f9\3\2\2\2\u06f5\u06f6\f\3\2\2\u06f6\u06f8",
    "\5\u0138\u009d\2\u06f7\u06f5\3\2\2\2\u06f8\u06fb\3\2\2\2\u06f9\u06f7",
    "\3\2\2\2\u06f9\u06fa\3\2\2\2\u06fa\u0135\3\2\2\2\u06fb\u06f9\3\2\2\2",
    "\u06fc\u0701\5\u0142\u00a2\2\u06fd\u0701\5\u0144\u00a3\2\u06fe\u0701",
    "\5\u0146\u00a4\2\u06ff\u0701\5\u013a\u009e\2\u0700\u06fc\3\2\2\2\u0700",
    "\u06fd\3\2\2\2\u0700\u06fe\3\2\2\2\u0700\u06ff\3\2\2\2\u0701\u0137\3",
    "\2\2\2\u0702\u0703\7\24\2\2\u0703\u0709\5\u013a\u009e\2\u0704\u0705",
    "\7\27\2\2\u0705\u0706\5\u0134\u009b\2\u0706\u0707\7\30\2\2\u0707\u0709",
    "\3\2\2\2\u0708\u0702\3\2\2\2\u0708\u0704\3\2\2\2\u0709\u0139\3\2\2\2",
    "\u070a\u070b\5\u0148\u00a5\2\u070b\u070d\7\25\2\2\u070c\u070e\5\u013c",
    "\u009f\2\u070d\u070c\3\2\2\2\u070d\u070e\3\2\2\2\u070e\u070f\3\2\2\2",
    "\u070f\u0710\7\26\2\2\u0710\u013b\3\2\2\2\u0711\u0718\5\u013e\u00a0",
    "\2\u0712\u0718\5\u0140\u00a1\2\u0713\u0714\5\u013e\u00a0\2\u0714\u0715",
    "\7\22\2\2\u0715\u0716\5\u0140\u00a1\2\u0716\u0718\3\2\2\2\u0717\u0711",
    "\3\2\2\2\u0717\u0712\3\2\2\2\u0717\u0713\3\2\2\2\u0718\u013d\3\2\2\2",
    "\u0719\u071a\b\u00a0\1\2\u071a\u071b\5\u0134\u009b\2\u071b\u0721\3\2",
    "\2\2\u071c\u071d\f\3\2\2\u071d\u071e\7\22\2\2\u071e\u0720\5\u0134\u009b",
    "\2\u071f\u071c\3\2\2\2\u0720\u0723\3\2\2\2\u0721\u071f\3\2\2\2\u0721",
    "\u0722\3\2\2\2\u0722\u013f\3\2\2\2\u0723\u0721\3\2\2\2\u0724\u0725\b",
    "\u00a1\1\2\u0725\u0726\5\u0148\u00a5\2\u0726\u0727\7,\2\2\u0727\u0728",
    "\5\u0134\u009b\2\u0728\u0731\3\2\2\2\u0729\u072a\f\3\2\2\u072a\u072b",
    "\7\22\2\2\u072b\u072c\5\u0148\u00a5\2\u072c\u072d\7,\2\2\u072d\u072e",
    "\5\u0134\u009b\2\u072e\u0730\3\2\2\2\u072f\u0729\3\2\2\2\u0730\u0733",
    "\3\2\2\2\u0731\u072f\3\2\2\2\u0731\u0732\3\2\2\2\u0732\u0141\3\2\2\2",
    "\u0733\u0731\3\2\2\2\u0734\u0735\7\25\2\2\u0735\u0736\5\u0134\u009b",
    "\2\u0736\u0737\7\26\2\2\u0737\u0143\3\2\2\2\u0738\u0739\b\u00a3\1\2",
    "\u0739\u073c\7\u0092\2\2\u073a\u073c\5\u0148\u00a5\2\u073b\u0738\3\2",
    "\2\2\u073b\u073a\3\2\2\2\u073c\u0742\3\2\2\2\u073d\u073e\f\3\2\2\u073e",
    "\u073f\7\24\2\2\u073f\u0741\5\u0148\u00a5\2\u0740\u073d\3\2\2\2\u0741",
    "\u0744\3\2\2\2\u0742\u0740\3\2\2\2\u0742\u0743\3\2\2\2\u0743\u0145\3",
    "\2\2\2\u0744\u0742\3\2\2\2\u0745\u074b\7\u0094\2\2\u0746\u074b\7\u0096",
    "\2\2\u0747\u074b\7\u0093\2\2\u0748\u074b\7\u008a\2\2\u0749\u074b\7\u008b",
    "\2\2\u074a\u0745\3\2\2\2\u074a\u0746\3\2\2\2\u074a\u0747\3\2\2\2\u074a",
    "\u0748\3\2\2\2\u074a\u0749\3\2\2\2\u074b\u0147\3\2\2\2\u074c\u074d\t",
    "\7\2\2\u074d\u0149\3\2\2\2\u074e\u074f\7y\2\2\u074f\u0750\5\u014c\u00a7",
    "\2\u0750\u0751\7\21\2\2\u0751\u0756\3\2\2\2\u0752\u0753\5\u014c\u00a7",
    "\2\u0753\u0754\7\21\2\2\u0754\u0756\3\2\2\2\u0755\u074e\3\2\2\2\u0755",
    "\u0752\3\2\2\2\u0756\u014b\3\2\2\2\u0757\u0758\b\u00a7\1\2\u0758\u0759",
    "\5\u014e\u00a8\2\u0759\u075e\3\2\2\2\u075a\u075b\f\3\2\2\u075b\u075d",
    "\5\u0152\u00aa\2\u075c\u075a\3\2\2\2\u075d\u0760\3\2\2\2\u075e\u075c",
    "\3\2\2\2\u075e\u075f\3\2\2\2\u075f\u014d\3\2\2\2\u0760\u075e\3\2\2\2",
    "\u0761\u0766\5\u0150\u00a9\2\u0762\u0766\5\u015a\u00ae\2\u0763\u0766",
    "\5\u015c\u00af\2\u0764\u0766\5\u0160\u00b1\2\u0765\u0761\3\2\2\2\u0765",
    "\u0762\3\2\2\2\u0765\u0763\3\2\2\2\u0765\u0764\3\2\2\2\u0766\u014f\3",
    "\2\2\2\u0767\u0768\5\u00eex\2\u0768\u0151\3\2\2\2\u0769\u076a\7\24\2",
    "\2\u076a\u076d\5\u0154\u00ab\2\u076b\u076d\5\u0158\u00ad\2\u076c\u0769",
    "\3\2\2\2\u076c\u076b\3\2\2\2\u076d\u0153\3\2\2\2\u076e\u076f\5\u0162",
    "\u00b2\2\u076f\u0771\7\25\2\2\u0770\u0772\5\u0156\u00ac\2\u0771\u0770",
    "\3\2\2\2\u0771\u0772\3\2\2\2\u0772\u0773\3\2\2\2\u0773\u0774\7\26\2",
    "\2\u0774\u0155\3\2\2\2\u0775\u0776\b\u00ac\1\2\u0776\u0777\5\u014c\u00a7",
    "\2\u0777\u077d\3\2\2\2\u0778\u0779\f\3\2\2\u0779\u077a\7\22\2\2\u077a",
    "\u077c\5\u014c\u00a7\2\u077b\u0778\3\2\2\2\u077c\u077f\3\2\2\2\u077d",
    "\u077b\3\2\2\2\u077d\u077e\3\2\2\2\u077e\u0157\3\2\2\2\u077f\u077d\3",
    "\2\2\2\u0780\u0781\7\27\2\2\u0781\u0782\5\u014c\u00a7\2\u0782\u0783",
    "\7\30\2\2\u0783\u0159\3\2\2\2\u0784\u0785\7\25\2\2\u0785\u0786\5\u014c",
    "\u00a7\2\u0786\u0787\7\26\2\2\u0787\u015b\3\2\2\2\u0788\u0789\b\u00af",
    "\1\2\u0789\u078a\5\u0162\u00b2\2\u078a\u0790\3\2\2\2\u078b\u078c\f\3",
    "\2\2\u078c\u078d\7\24\2\2\u078d\u078f\5\u0162\u00b2\2\u078e\u078b\3",
    "\2\2\2\u078f\u0792\3\2\2\2\u0790\u078e\3\2\2\2\u0790\u0791\3\2\2\2\u0791",
    "\u015d\3\2\2\2\u0792\u0790\3\2\2\2\u0793\u0794\b\u00b0\1\2\u0794\u0795",
    "\5\u015c\u00af\2\u0795\u079a\3\2\2\2\u0796\u0797\f\3\2\2\u0797\u0799",
    "\7\u0092\2\2\u0798\u0796\3\2\2\2\u0799\u079c\3\2\2\2\u079a\u0798\3\2",
    "\2\2\u079a\u079b\3\2\2\2\u079b\u015f\3\2\2\2\u079c\u079a\3\2\2\2\u079d",
    "\u07a3\7\u0094\2\2\u079e\u07a3\7\u0096\2\2\u079f\u07a3\7\u0093\2\2\u07a0",
    "\u07a3\7\u008a\2\2\u07a1\u07a3\7\u008b\2\2\u07a2\u079d\3\2\2\2\u07a2",
    "\u079e\3\2\2\2\u07a2\u079f\3\2\2\2\u07a2\u07a0\3\2\2\2\u07a2\u07a1\3",
    "\2\2\2\u07a3\u0161\3\2\2\2\u07a4\u07a5\t\b\2\2\u07a5\u0163\3\2\2\2\u07a6",
    "\u07a7\7y\2\2\u07a7\u07a8\5\u0166\u00b4\2\u07a8\u07a9\7\21\2\2\u07a9",
    "\u07ae\3\2\2\2\u07aa\u07ab\5\u0166\u00b4\2\u07ab\u07ac\7\21\2\2\u07ac",
    "\u07ae\3\2\2\2\u07ad\u07a6\3\2\2\2\u07ad\u07aa\3\2\2\2\u07ae\u0165\3",
    "\2\2\2\u07af\u07b0\b\u00b4\1\2\u07b0\u07b1\5\u0168\u00b5\2\u07b1\u07b6",
    "\3\2\2\2\u07b2\u07b3\f\3\2\2\u07b3\u07b5\5\u016c\u00b7\2\u07b4\u07b2",
    "\3\2\2\2\u07b5\u07b8\3\2\2\2\u07b6\u07b4\3\2\2\2\u07b6\u07b7\3\2\2\2",
    "\u07b7\u0167\3\2\2\2\u07b8\u07b6\3\2\2\2\u07b9\u07be\5\u016a\u00b6\2",
    "\u07ba\u07be\5\u0174\u00bb\2\u07bb\u07be\5\u0176\u00bc\2\u07bc\u07be",
    "\5\u0178\u00bd\2\u07bd\u07b9\3\2\2\2\u07bd\u07ba\3\2\2\2\u07bd\u07bb",
    "\3\2\2\2\u07bd\u07bc\3\2\2\2\u07be\u0169\3\2\2\2\u07bf\u07c0\5\u00ee",
    "x\2\u07c0\u016b\3\2\2\2\u07c1\u07c2\7\24\2\2\u07c2\u07c5\5\u016e\u00b8",
    "\2\u07c3\u07c5\5\u0172\u00ba\2\u07c4\u07c1\3\2\2\2\u07c4\u07c3\3\2\2",
    "\2\u07c5\u016d\3\2\2\2\u07c6\u07c7\5\u017a\u00be\2\u07c7\u07c9\7\25",
    "\2\2\u07c8\u07ca\5\u0170\u00b9\2\u07c9\u07c8\3\2\2\2\u07c9\u07ca\3\2",
    "\2\2\u07ca\u07cb\3\2\2\2\u07cb\u07cc\7\26\2\2\u07cc\u016f\3\2\2\2\u07cd",
    "\u07ce\b\u00b9\1\2\u07ce\u07cf\5\u0166\u00b4\2\u07cf\u07d5\3\2\2\2\u07d0",
    "\u07d1\f\3\2\2\u07d1\u07d2\7\22\2\2\u07d2\u07d4\5\u0166\u00b4\2\u07d3",
    "\u07d0\3\2\2\2\u07d4\u07d7\3\2\2\2\u07d5\u07d3\3\2\2\2\u07d5\u07d6\3",
    "\2\2\2\u07d6\u0171\3\2\2\2\u07d7\u07d5\3\2\2\2\u07d8\u07d9\7\27\2\2",
    "\u07d9\u07da\5\u0166\u00b4\2\u07da\u07db\7\30\2\2\u07db\u0173\3\2\2",
    "\2\u07dc\u07dd\7\25\2\2\u07dd\u07de\5\u0166\u00b4\2\u07de\u07df\7\26",
    "\2\2\u07df\u0175\3\2\2\2\u07e0\u07e1\b\u00bc\1\2\u07e1\u07e4\7\u0092",
    "\2\2\u07e2\u07e4\5\u017a\u00be\2\u07e3\u07e0\3\2\2\2\u07e3\u07e2\3\2",
    "\2\2\u07e4\u07ea\3\2\2\2\u07e5\u07e6\f\3\2\2\u07e6\u07e7\7\24\2\2\u07e7",
    "\u07e9\5\u017a\u00be\2\u07e8\u07e5\3\2\2\2\u07e9\u07ec\3\2\2\2\u07ea",
    "\u07e8\3\2\2\2\u07ea\u07eb\3\2\2\2\u07eb\u0177\3\2\2\2\u07ec\u07ea\3",
    "\2\2\2\u07ed\u07f3\7\u0094\2\2\u07ee\u07f3\7\u0096\2\2\u07ef\u07f3\7",
    "\u0093\2\2\u07f0\u07f3\7\u008a\2\2\u07f1\u07f3\7\u008b\2\2\u07f2\u07ed",
    "\3\2\2\2\u07f2\u07ee\3\2\2\2\u07f2\u07ef\3\2\2\2\u07f2\u07f0\3\2\2\2",
    "\u07f2\u07f1\3\2\2\2\u07f3\u0179\3\2\2\2\u07f4\u07f5\t\t\2\2\u07f5\u017b",
    "\3\2\2\2\u009c\u0182\u0185\u019e\u01ab\u01b8\u01bf\u01cc\u01da\u01fa",
    "\u0203\u020c\u0215\u022a\u0234\u0239\u023f\u0244\u0250\u0255\u026d\u0278",
    "\u027c\u028d\u0292\u029b\u02a4\u02ad\u02ca\u02dd\u02e3\u0305\u030e\u0325",
    "\u0333\u033c\u0345\u035c\u0360\u0374\u03d4\u03d6\u03e2\u03eb\u03fa\u03ff",
    "\u0404\u040d\u0414\u0433\u0443\u044c\u0452\u0457\u045e\u0466\u0474\u047c",
    "\u0482\u048d\u0499\u04a4\u04b1\u04b5\u04bb\u04c7\u04db\u04dd\u04e2\u04ee",
    "\u04f9\u0503\u0508\u050d\u051d\u0522\u0525\u0529\u052e\u0535\u0540\u0542",
    "\u054e\u0556\u0561\u0566\u0572\u0576\u0580\u0588\u058e\u0595\u059a\u05a4",
    "\u05ab\u05b6\u05c3\u05c7\u05ca\u05ce\u05d1\u05dc\u05e8\u05f4\u0600\u0611",
    "\u0620\u062a\u0631\u063b\u0642\u0646\u064c\u0658\u0663\u0673\u0680\u0687",
    "\u068f\u06ab\u06b4\u06bd\u06c6\u06cb\u06d7\u06e9\u06f0\u06f9\u0700\u0708",
    "\u070d\u0717\u0721\u0731\u073b\u0742\u074a\u0755\u075e\u0765\u076c\u0771",
    "\u077d\u0790\u079a\u07a2\u07ad\u07b6\u07bd\u07c4\u07c9\u07d5\u07e3\u07ea",
    "\u07f2"].join("");
		

var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ 'null', 'null', 'null', 'null', 'null', 'null', "'\t'", 
                     "' '", "'Java:'", "'C#:'", "'Python2:'", "'Python3:'", 
                     "'JavaScript:'", "'Swift:'", "':'", "';'", "','", "'..'", 
                     "'.'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'?'", 
                     "'!'", "'&'", "'&&'", "'|'", "'||'", "'+'", "'-'", 
                     "'*'", "'/'", "'\\'", "'%'", "'>'", "'>='", "'<'", 
                     "'<='", "'<>'", "'='", "'!='", "'=='", "'~='", "'~'", 
                     "'<-'", "'->'", "'Boolean'", "'Character'", "'Text'", 
                     "'Integer'", "'Decimal'", "'Date'", "'Time'", "'DateTime'", 
                     "'Period'", "'Method'", "'Code'", "'Document'", "'abstract'", 
                     "'all'", "'always'", "'and'", "'any'", "'as'", "'attr'", 
                     "'attribute'", "'attributes'", "'bindings'", "'case'", 
                     "'catch'", "'category'", "'class'", "'close'", "'contains'", 
                     "'def'", "'default'", "'define'", "'do'", "'doing'", 
                     "'each'", "'else'", "'enum'", "'enumerated'", "'except'", 
                     "'execute'", "'expecting'", "'extends'", "'fetch'", 
                     "'finally'", "'for'", "'from'", "'getter'", "'if'", 
                     "'in'", "'invoke'", "'is'", "'matching'", "'method'", 
                     "'methods'", "'modulo'", "'mutable'", "'native'", "'None'", 
                     "'not'", 'null', "'null'", "'on'", "'open'", "'operator'", 
                     "'or'", "'otherwise'", "'pass'", "'raise'", "'read'", 
                     "'receiving'", "'resource'", "'return'", "'returning'", 
                     "'self'", "'setter'", "'singleton'", "'sorted'", "'switch'", 
                     "'test'", "'this'", "'throw'", "'to'", "'try'", "'with'", 
                     "'when'", "'where'", "'while'", "'write'", 'null', 
                     'null', "'MIN_INTEGER'", "'MAX_INTEGER'" ];

var symbolicNames = [ 'null', "INDENT", "DEDENT", "LF_TAB", "LF_MORE", "LF", 
                      "TAB", "WS", "JAVA", "CSHARP", "PYTHON2", "PYTHON3", 
                      "JAVASCRIPT", "SWIFT", "COLON", "SEMI", "COMMA", "RANGE", 
                      "DOT", "LPAR", "RPAR", "LBRAK", "RBRAK", "LCURL", 
                      "RCURL", "QMARK", "XMARK", "AMP", "AMP2", "PIPE", 
                      "PIPE2", "PLUS", "MINUS", "STAR", "SLASH", "BSLASH", 
                      "PERCENT", "GT", "GTE", "LT", "LTE", "LTGT", "EQ", 
                      "XEQ", "EQ2", "TEQ", "TILDE", "LARROW", "RARROW", 
                      "BOOLEAN", "CHARACTER", "TEXT", "INTEGER", "DECIMAL", 
                      "DATE", "TIME", "DATETIME", "PERIOD", "METHOD_T", 
                      "CODE", "DOCUMENT", "ABSTRACT", "ALL", "ALWAYS", "AND", 
                      "ANY", "AS", "ATTR", "ATTRIBUTE", "ATTRIBUTES", "BINDINGS", 
                      "CASE", "CATCH", "CATEGORY", "CLASS", "CLOSE", "CONTAINS", 
                      "DEF", "DEFAULT", "DEFINE", "DO", "DOING", "EACH", 
                      "ELSE", "ENUM", "ENUMERATED", "EXCEPT", "EXECUTE", 
                      "EXPECTING", "EXTENDS", "FETCH", "FINALLY", "FOR", 
                      "FROM", "GETTER", "IF", "IN", "INVOKE", "IS", "MATCHING", 
                      "METHOD", "METHODS", "MODULO", "MUTABLE", "NATIVE", 
                      "NONE", "NOT", "NOTHING", "NULL", "ON", "OPEN", "OPERATOR", 
                      "OR", "OTHERWISE", "PASS", "RAISE", "READ", "RECEIVING", 
                      "RESOURCE", "RETURN", "RETURNING", "SELF", "SETTER", 
                      "SINGLETON", "SORTED", "SWITCH", "TEST", "THIS", "THROW", 
                      "TO", "TRY", "WITH", "WHEN", "WHERE", "WHILE", "WRITE", 
                      "BOOLEAN_LITERAL", "CHAR_LITERAL", "MIN_INTEGER", 
                      "MAX_INTEGER", "SYMBOL_IDENTIFIER", "TYPE_IDENTIFIER", 
                      "VARIABLE_IDENTIFIER", "NATIVE_IDENTIFIER", "DOLLAR_IDENTIFIER", 
                      "TEXT_LITERAL", "INTEGER_LITERAL", "HEXA_LITERAL", 
                      "DECIMAL_LITERAL", "DATETIME_LITERAL", "TIME_LITERAL", 
                      "DATE_LITERAL", "PERIOD_LITERAL", "COMMENT" ];

var ruleNames =  [ "enum_category_declaration", "enum_native_declaration", 
                   "native_symbol", "category_symbol", "attribute_declaration", 
                   "concrete_category_declaration", "singleton_category_declaration", 
                   "derived_list", "operator_method_declaration", "setter_method_declaration", 
                   "getter_method_declaration", "native_category_declaration", 
                   "native_resource_declaration", "native_category_bindings", 
                   "native_category_binding_list", "attribute_list", "abstract_method_declaration", 
                   "concrete_method_declaration", "native_method_declaration", 
                   "test_method_declaration", "assertion", "typed_argument", 
                   "statement", "method_call", "method_selector", "callable_parent", 
                   "callable_selector", "with_resource_statement", "with_singleton_statement", 
                   "switch_statement", "switch_case_statement", "for_each_statement", 
                   "do_while_statement", "while_statement", "if_statement", 
                   "else_if_statement_list", "raise_statement", "try_statement", 
                   "catch_statement", "return_statement", "expression", 
                   "closure_expression", "instance_expression", "method_expression", 
                   "instance_selector", "document_expression", "constructor_expression", 
                   "argument_assignment_list", "argument_assignment", "read_expression", 
                   "write_statement", "fetch_expression", "sorted_expression", 
                   "assign_instance_statement", "child_instance", "assign_tuple_statement", 
                   "lfs", "lfp", "indent", "dedent", "null_literal", "declaration_list", 
                   "declarations", "declaration", "resource_declaration", 
                   "enum_declaration", "native_symbol_list", "category_symbol_list", 
                   "symbol_list", "attribute_constraint", "list_literal", 
                   "set_literal", "expression_list", "range_literal", "typedef", 
                   "primary_type", "native_type", "category_type", "code_type", 
                   "document_type", "category_declaration", "type_identifier_list", 
                   "method_identifier", "identifier", "variable_identifier", 
                   "type_identifier", "symbol_identifier", "argument_list", 
                   "argument", "operator_argument", "named_argument", "code_argument", 
                   "category_or_any_type", "any_type", "member_method_declaration_list", 
                   "member_method_declaration", "native_member_method_declaration_list", 
                   "native_member_method_declaration", "native_category_binding", 
                   "python_category_binding", "python_module", "module_token", 
                   "javascript_category_binding", "javascript_module", "variable_identifier_list", 
                   "method_declaration", "native_statement_list", "native_statement", 
                   "python_native_statement", "javascript_native_statement", 
                   "statement_list", "assertion_list", "switch_case_statement_list", 
                   "catch_statement_list", "literal_collection", "atomic_literal", 
                   "literal_list_literal", "selectable_expression", "this_expression", 
                   "parenthesis_expression", "literal_expression", "collection_literal", 
                   "tuple_literal", "dict_literal", "expression_tuple", 
                   "dict_entry_list", "dict_entry", "slice_arguments", "assign_variable_statement", 
                   "assignable_instance", "is_expression", "operator", "key_token", 
                   "value_token", "symbols_token", "assign", "multiply", 
                   "divide", "idivide", "modulo", "javascript_statement", 
                   "javascript_expression", "javascript_primary_expression", 
                   "javascript_this_expression", "javascript_selector_expression", 
                   "javascript_method_expression", "javascript_arguments", 
                   "javascript_item_expression", "javascript_parenthesis_expression", 
                   "javascript_identifier_expression", "javascript_literal_expression", 
                   "javascript_identifier", "python_statement", "python_expression", 
                   "python_primary_expression", "python_selector_expression", 
                   "python_method_expression", "python_argument_list", "python_ordinal_argument_list", 
                   "python_named_argument_list", "python_parenthesis_expression", 
                   "python_identifier_expression", "python_literal_expression", 
                   "python_identifier", "java_statement", "java_expression", 
                   "java_primary_expression", "java_this_expression", "java_selector_expression", 
                   "java_method_expression", "java_arguments", "java_item_expression", 
                   "java_parenthesis_expression", "java_identifier_expression", 
                   "java_class_identifier_expression", "java_literal_expression", 
                   "java_identifier", "csharp_statement", "csharp_expression", 
                   "csharp_primary_expression", "csharp_this_expression", 
                   "csharp_selector_expression", "csharp_method_expression", 
                   "csharp_arguments", "csharp_item_expression", "csharp_parenthesis_expression", 
                   "csharp_identifier_expression", "csharp_literal_expression", 
                   "csharp_identifier" ];

function SParser (input) {
	AbstractParser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

SParser.prototype = Object.create(AbstractParser.prototype);
SParser.prototype.constructor = SParser;

Object.defineProperty(SParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

SParser.EOF = antlr4.Token.EOF;
SParser.INDENT = 1;
SParser.DEDENT = 2;
SParser.LF_TAB = 3;
SParser.LF_MORE = 4;
SParser.LF = 5;
SParser.TAB = 6;
SParser.WS = 7;
SParser.JAVA = 8;
SParser.CSHARP = 9;
SParser.PYTHON2 = 10;
SParser.PYTHON3 = 11;
SParser.JAVASCRIPT = 12;
SParser.SWIFT = 13;
SParser.COLON = 14;
SParser.SEMI = 15;
SParser.COMMA = 16;
SParser.RANGE = 17;
SParser.DOT = 18;
SParser.LPAR = 19;
SParser.RPAR = 20;
SParser.LBRAK = 21;
SParser.RBRAK = 22;
SParser.LCURL = 23;
SParser.RCURL = 24;
SParser.QMARK = 25;
SParser.XMARK = 26;
SParser.AMP = 27;
SParser.AMP2 = 28;
SParser.PIPE = 29;
SParser.PIPE2 = 30;
SParser.PLUS = 31;
SParser.MINUS = 32;
SParser.STAR = 33;
SParser.SLASH = 34;
SParser.BSLASH = 35;
SParser.PERCENT = 36;
SParser.GT = 37;
SParser.GTE = 38;
SParser.LT = 39;
SParser.LTE = 40;
SParser.LTGT = 41;
SParser.EQ = 42;
SParser.XEQ = 43;
SParser.EQ2 = 44;
SParser.TEQ = 45;
SParser.TILDE = 46;
SParser.LARROW = 47;
SParser.RARROW = 48;
SParser.BOOLEAN = 49;
SParser.CHARACTER = 50;
SParser.TEXT = 51;
SParser.INTEGER = 52;
SParser.DECIMAL = 53;
SParser.DATE = 54;
SParser.TIME = 55;
SParser.DATETIME = 56;
SParser.PERIOD = 57;
SParser.METHOD_T = 58;
SParser.CODE = 59;
SParser.DOCUMENT = 60;
SParser.ABSTRACT = 61;
SParser.ALL = 62;
SParser.ALWAYS = 63;
SParser.AND = 64;
SParser.ANY = 65;
SParser.AS = 66;
SParser.ATTR = 67;
SParser.ATTRIBUTE = 68;
SParser.ATTRIBUTES = 69;
SParser.BINDINGS = 70;
SParser.CASE = 71;
SParser.CATCH = 72;
SParser.CATEGORY = 73;
SParser.CLASS = 74;
SParser.CLOSE = 75;
SParser.CONTAINS = 76;
SParser.DEF = 77;
SParser.DEFAULT = 78;
SParser.DEFINE = 79;
SParser.DO = 80;
SParser.DOING = 81;
SParser.EACH = 82;
SParser.ELSE = 83;
SParser.ENUM = 84;
SParser.ENUMERATED = 85;
SParser.EXCEPT = 86;
SParser.EXECUTE = 87;
SParser.EXPECTING = 88;
SParser.EXTENDS = 89;
SParser.FETCH = 90;
SParser.FINALLY = 91;
SParser.FOR = 92;
SParser.FROM = 93;
SParser.GETTER = 94;
SParser.IF = 95;
SParser.IN = 96;
SParser.INVOKE = 97;
SParser.IS = 98;
SParser.MATCHING = 99;
SParser.METHOD = 100;
SParser.METHODS = 101;
SParser.MODULO = 102;
SParser.MUTABLE = 103;
SParser.NATIVE = 104;
SParser.NONE = 105;
SParser.NOT = 106;
SParser.NOTHING = 107;
SParser.NULL = 108;
SParser.ON = 109;
SParser.OPEN = 110;
SParser.OPERATOR = 111;
SParser.OR = 112;
SParser.OTHERWISE = 113;
SParser.PASS = 114;
SParser.RAISE = 115;
SParser.READ = 116;
SParser.RECEIVING = 117;
SParser.RESOURCE = 118;
SParser.RETURN = 119;
SParser.RETURNING = 120;
SParser.SELF = 121;
SParser.SETTER = 122;
SParser.SINGLETON = 123;
SParser.SORTED = 124;
SParser.SWITCH = 125;
SParser.TEST = 126;
SParser.THIS = 127;
SParser.THROW = 128;
SParser.TO = 129;
SParser.TRY = 130;
SParser.WITH = 131;
SParser.WHEN = 132;
SParser.WHERE = 133;
SParser.WHILE = 134;
SParser.WRITE = 135;
SParser.BOOLEAN_LITERAL = 136;
SParser.CHAR_LITERAL = 137;
SParser.MIN_INTEGER = 138;
SParser.MAX_INTEGER = 139;
SParser.SYMBOL_IDENTIFIER = 140;
SParser.TYPE_IDENTIFIER = 141;
SParser.VARIABLE_IDENTIFIER = 142;
SParser.NATIVE_IDENTIFIER = 143;
SParser.DOLLAR_IDENTIFIER = 144;
SParser.TEXT_LITERAL = 145;
SParser.INTEGER_LITERAL = 146;
SParser.HEXA_LITERAL = 147;
SParser.DECIMAL_LITERAL = 148;
SParser.DATETIME_LITERAL = 149;
SParser.TIME_LITERAL = 150;
SParser.DATE_LITERAL = 151;
SParser.PERIOD_LITERAL = 152;
SParser.COMMENT = 153;

SParser.RULE_enum_category_declaration = 0;
SParser.RULE_enum_native_declaration = 1;
SParser.RULE_native_symbol = 2;
SParser.RULE_category_symbol = 3;
SParser.RULE_attribute_declaration = 4;
SParser.RULE_concrete_category_declaration = 5;
SParser.RULE_singleton_category_declaration = 6;
SParser.RULE_derived_list = 7;
SParser.RULE_operator_method_declaration = 8;
SParser.RULE_setter_method_declaration = 9;
SParser.RULE_getter_method_declaration = 10;
SParser.RULE_native_category_declaration = 11;
SParser.RULE_native_resource_declaration = 12;
SParser.RULE_native_category_bindings = 13;
SParser.RULE_native_category_binding_list = 14;
SParser.RULE_attribute_list = 15;
SParser.RULE_abstract_method_declaration = 16;
SParser.RULE_concrete_method_declaration = 17;
SParser.RULE_native_method_declaration = 18;
SParser.RULE_test_method_declaration = 19;
SParser.RULE_assertion = 20;
SParser.RULE_typed_argument = 21;
SParser.RULE_statement = 22;
SParser.RULE_method_call = 23;
SParser.RULE_method_selector = 24;
SParser.RULE_callable_parent = 25;
SParser.RULE_callable_selector = 26;
SParser.RULE_with_resource_statement = 27;
SParser.RULE_with_singleton_statement = 28;
SParser.RULE_switch_statement = 29;
SParser.RULE_switch_case_statement = 30;
SParser.RULE_for_each_statement = 31;
SParser.RULE_do_while_statement = 32;
SParser.RULE_while_statement = 33;
SParser.RULE_if_statement = 34;
SParser.RULE_else_if_statement_list = 35;
SParser.RULE_raise_statement = 36;
SParser.RULE_try_statement = 37;
SParser.RULE_catch_statement = 38;
SParser.RULE_return_statement = 39;
SParser.RULE_expression = 40;
SParser.RULE_closure_expression = 41;
SParser.RULE_instance_expression = 42;
SParser.RULE_method_expression = 43;
SParser.RULE_instance_selector = 44;
SParser.RULE_document_expression = 45;
SParser.RULE_constructor_expression = 46;
SParser.RULE_argument_assignment_list = 47;
SParser.RULE_argument_assignment = 48;
SParser.RULE_read_expression = 49;
SParser.RULE_write_statement = 50;
SParser.RULE_fetch_expression = 51;
SParser.RULE_sorted_expression = 52;
SParser.RULE_assign_instance_statement = 53;
SParser.RULE_child_instance = 54;
SParser.RULE_assign_tuple_statement = 55;
SParser.RULE_lfs = 56;
SParser.RULE_lfp = 57;
SParser.RULE_indent = 58;
SParser.RULE_dedent = 59;
SParser.RULE_null_literal = 60;
SParser.RULE_declaration_list = 61;
SParser.RULE_declarations = 62;
SParser.RULE_declaration = 63;
SParser.RULE_resource_declaration = 64;
SParser.RULE_enum_declaration = 65;
SParser.RULE_native_symbol_list = 66;
SParser.RULE_category_symbol_list = 67;
SParser.RULE_symbol_list = 68;
SParser.RULE_attribute_constraint = 69;
SParser.RULE_list_literal = 70;
SParser.RULE_set_literal = 71;
SParser.RULE_expression_list = 72;
SParser.RULE_range_literal = 73;
SParser.RULE_typedef = 74;
SParser.RULE_primary_type = 75;
SParser.RULE_native_type = 76;
SParser.RULE_category_type = 77;
SParser.RULE_code_type = 78;
SParser.RULE_document_type = 79;
SParser.RULE_category_declaration = 80;
SParser.RULE_type_identifier_list = 81;
SParser.RULE_method_identifier = 82;
SParser.RULE_identifier = 83;
SParser.RULE_variable_identifier = 84;
SParser.RULE_type_identifier = 85;
SParser.RULE_symbol_identifier = 86;
SParser.RULE_argument_list = 87;
SParser.RULE_argument = 88;
SParser.RULE_operator_argument = 89;
SParser.RULE_named_argument = 90;
SParser.RULE_code_argument = 91;
SParser.RULE_category_or_any_type = 92;
SParser.RULE_any_type = 93;
SParser.RULE_member_method_declaration_list = 94;
SParser.RULE_member_method_declaration = 95;
SParser.RULE_native_member_method_declaration_list = 96;
SParser.RULE_native_member_method_declaration = 97;
SParser.RULE_native_category_binding = 98;
SParser.RULE_python_category_binding = 99;
SParser.RULE_python_module = 100;
SParser.RULE_module_token = 101;
SParser.RULE_javascript_category_binding = 102;
SParser.RULE_javascript_module = 103;
SParser.RULE_variable_identifier_list = 104;
SParser.RULE_method_declaration = 105;
SParser.RULE_native_statement_list = 106;
SParser.RULE_native_statement = 107;
SParser.RULE_python_native_statement = 108;
SParser.RULE_javascript_native_statement = 109;
SParser.RULE_statement_list = 110;
SParser.RULE_assertion_list = 111;
SParser.RULE_switch_case_statement_list = 112;
SParser.RULE_catch_statement_list = 113;
SParser.RULE_literal_collection = 114;
SParser.RULE_atomic_literal = 115;
SParser.RULE_literal_list_literal = 116;
SParser.RULE_selectable_expression = 117;
SParser.RULE_this_expression = 118;
SParser.RULE_parenthesis_expression = 119;
SParser.RULE_literal_expression = 120;
SParser.RULE_collection_literal = 121;
SParser.RULE_tuple_literal = 122;
SParser.RULE_dict_literal = 123;
SParser.RULE_expression_tuple = 124;
SParser.RULE_dict_entry_list = 125;
SParser.RULE_dict_entry = 126;
SParser.RULE_slice_arguments = 127;
SParser.RULE_assign_variable_statement = 128;
SParser.RULE_assignable_instance = 129;
SParser.RULE_is_expression = 130;
SParser.RULE_operator = 131;
SParser.RULE_key_token = 132;
SParser.RULE_value_token = 133;
SParser.RULE_symbols_token = 134;
SParser.RULE_assign = 135;
SParser.RULE_multiply = 136;
SParser.RULE_divide = 137;
SParser.RULE_idivide = 138;
SParser.RULE_modulo = 139;
SParser.RULE_javascript_statement = 140;
SParser.RULE_javascript_expression = 141;
SParser.RULE_javascript_primary_expression = 142;
SParser.RULE_javascript_this_expression = 143;
SParser.RULE_javascript_selector_expression = 144;
SParser.RULE_javascript_method_expression = 145;
SParser.RULE_javascript_arguments = 146;
SParser.RULE_javascript_item_expression = 147;
SParser.RULE_javascript_parenthesis_expression = 148;
SParser.RULE_javascript_identifier_expression = 149;
SParser.RULE_javascript_literal_expression = 150;
SParser.RULE_javascript_identifier = 151;
SParser.RULE_python_statement = 152;
SParser.RULE_python_expression = 153;
SParser.RULE_python_primary_expression = 154;
SParser.RULE_python_selector_expression = 155;
SParser.RULE_python_method_expression = 156;
SParser.RULE_python_argument_list = 157;
SParser.RULE_python_ordinal_argument_list = 158;
SParser.RULE_python_named_argument_list = 159;
SParser.RULE_python_parenthesis_expression = 160;
SParser.RULE_python_identifier_expression = 161;
SParser.RULE_python_literal_expression = 162;
SParser.RULE_python_identifier = 163;
SParser.RULE_java_statement = 164;
SParser.RULE_java_expression = 165;
SParser.RULE_java_primary_expression = 166;
SParser.RULE_java_this_expression = 167;
SParser.RULE_java_selector_expression = 168;
SParser.RULE_java_method_expression = 169;
SParser.RULE_java_arguments = 170;
SParser.RULE_java_item_expression = 171;
SParser.RULE_java_parenthesis_expression = 172;
SParser.RULE_java_identifier_expression = 173;
SParser.RULE_java_class_identifier_expression = 174;
SParser.RULE_java_literal_expression = 175;
SParser.RULE_java_identifier = 176;
SParser.RULE_csharp_statement = 177;
SParser.RULE_csharp_expression = 178;
SParser.RULE_csharp_primary_expression = 179;
SParser.RULE_csharp_this_expression = 180;
SParser.RULE_csharp_selector_expression = 181;
SParser.RULE_csharp_method_expression = 182;
SParser.RULE_csharp_arguments = 183;
SParser.RULE_csharp_item_expression = 184;
SParser.RULE_csharp_parenthesis_expression = 185;
SParser.RULE_csharp_identifier_expression = 186;
SParser.RULE_csharp_literal_expression = 187;
SParser.RULE_csharp_identifier = 188;

function Enum_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_enum_category_declaration;
    this.name = null; // Type_identifierContext
    this.derived = null; // Type_identifierContext
    this.attrs = null; // Attribute_listContext
    this.symbols = null; // Category_symbol_listContext
    return this;
}

Enum_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_category_declarationContext.prototype.constructor = Enum_category_declarationContext;

Enum_category_declarationContext.prototype.ENUM = function() {
    return this.getToken(SParser.ENUM, 0);
};

Enum_category_declarationContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Enum_category_declarationContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Enum_category_declarationContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

Enum_category_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Enum_category_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Enum_category_declarationContext.prototype.type_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_identifierContext);
    } else {
        return this.getTypedRuleContext(Type_identifierContext,i);
    }
};

Enum_category_declarationContext.prototype.category_symbol_list = function() {
    return this.getTypedRuleContext(Category_symbol_listContext,0);
};

Enum_category_declarationContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Enum_category_declarationContext.prototype.COMMA = function() {
    return this.getToken(SParser.COMMA, 0);
};

Enum_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterEnum_category_declaration(this);
	}
};

Enum_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitEnum_category_declaration(this);
	}
};




SParser.prototype.enum_category_declaration = function() {

    var localctx = new Enum_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SParser.RULE_enum_category_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 378;
        this.match(SParser.ENUM);
        this.state = 379; 
        localctx.name = this.type_identifier();
        this.state = 380;
        this.match(SParser.LPAR);
        this.state = 387;
        switch(this._input.LA(1)) {
        case SParser.TYPE_IDENTIFIER:
            this.state = 381; 
            localctx.derived = this.type_identifier();
            this.state = 384;
            _la = this._input.LA(1);
            if(_la===SParser.COMMA) {
                this.state = 382;
                this.match(SParser.COMMA);
                this.state = 383; 
                localctx.attrs = this.attribute_list();
            }

            break;
        case SParser.VARIABLE_IDENTIFIER:
            this.state = 386; 
            localctx.attrs = this.attribute_list();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 389;
        this.match(SParser.RPAR);
        this.state = 390;
        this.match(SParser.COLON);
        this.state = 391; 
        this.indent();
        this.state = 392; 
        localctx.symbols = this.category_symbol_list(0);
        this.state = 393; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enum_native_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_enum_native_declaration;
    this.name = null; // Type_identifierContext
    this.typ = null; // Native_typeContext
    this.symbols = null; // Native_symbol_listContext
    return this;
}

Enum_native_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_native_declarationContext.prototype.constructor = Enum_native_declarationContext;

Enum_native_declarationContext.prototype.ENUM = function() {
    return this.getToken(SParser.ENUM, 0);
};

Enum_native_declarationContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Enum_native_declarationContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Enum_native_declarationContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

Enum_native_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Enum_native_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Enum_native_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Enum_native_declarationContext.prototype.native_type = function() {
    return this.getTypedRuleContext(Native_typeContext,0);
};

Enum_native_declarationContext.prototype.native_symbol_list = function() {
    return this.getTypedRuleContext(Native_symbol_listContext,0);
};

Enum_native_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterEnum_native_declaration(this);
	}
};

Enum_native_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitEnum_native_declaration(this);
	}
};




SParser.prototype.enum_native_declaration = function() {

    var localctx = new Enum_native_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SParser.RULE_enum_native_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 395;
        this.match(SParser.ENUM);
        this.state = 396; 
        localctx.name = this.type_identifier();
        this.state = 397;
        this.match(SParser.LPAR);
        this.state = 398; 
        localctx.typ = this.native_type();
        this.state = 399;
        this.match(SParser.RPAR);
        this.state = 400;
        this.match(SParser.COLON);
        this.state = 401; 
        this.indent();
        this.state = 402; 
        localctx.symbols = this.native_symbol_list(0);
        this.state = 403; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_symbolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_native_symbol;
    this.name = null; // Symbol_identifierContext
    this.exp = null; // ExpressionContext
    return this;
}

Native_symbolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_symbolContext.prototype.constructor = Native_symbolContext;

Native_symbolContext.prototype.EQ = function() {
    return this.getToken(SParser.EQ, 0);
};

Native_symbolContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};

Native_symbolContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Native_symbolContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNative_symbol(this);
	}
};

Native_symbolContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNative_symbol(this);
	}
};




SParser.prototype.native_symbol = function() {

    var localctx = new Native_symbolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SParser.RULE_native_symbol);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 405; 
        localctx.name = this.symbol_identifier();
        this.state = 406;
        this.match(SParser.EQ);
        this.state = 407; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_symbolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_category_symbol;
    this.name = null; // Symbol_identifierContext
    this.args = null; // Argument_assignment_listContext
    return this;
}

Category_symbolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_symbolContext.prototype.constructor = Category_symbolContext;

Category_symbolContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Category_symbolContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Category_symbolContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};

Category_symbolContext.prototype.argument_assignment_list = function() {
    return this.getTypedRuleContext(Argument_assignment_listContext,0);
};

Category_symbolContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCategory_symbol(this);
	}
};

Category_symbolContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCategory_symbol(this);
	}
};




SParser.prototype.category_symbol = function() {

    var localctx = new Category_symbolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SParser.RULE_category_symbol);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 409; 
        localctx.name = this.symbol_identifier();
        this.state = 410;
        this.match(SParser.LPAR);
        this.state = 412;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SParser.LPAR) | (1 << SParser.LBRAK) | (1 << SParser.LCURL))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SParser.MINUS - 32)) | (1 << (SParser.LT - 32)) | (1 << (SParser.CODE - 32)) | (1 << (SParser.DOCUMENT - 32)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (SParser.EXECUTE - 87)) | (1 << (SParser.FETCH - 87)) | (1 << (SParser.MUTABLE - 87)) | (1 << (SParser.NONE - 87)) | (1 << (SParser.NOT - 87)) | (1 << (SParser.READ - 87)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (SParser.SELF - 121)) | (1 << (SParser.SORTED - 121)) | (1 << (SParser.THIS - 121)) | (1 << (SParser.BOOLEAN_LITERAL - 121)) | (1 << (SParser.CHAR_LITERAL - 121)) | (1 << (SParser.MIN_INTEGER - 121)) | (1 << (SParser.MAX_INTEGER - 121)) | (1 << (SParser.SYMBOL_IDENTIFIER - 121)) | (1 << (SParser.TYPE_IDENTIFIER - 121)) | (1 << (SParser.VARIABLE_IDENTIFIER - 121)) | (1 << (SParser.TEXT_LITERAL - 121)) | (1 << (SParser.INTEGER_LITERAL - 121)) | (1 << (SParser.HEXA_LITERAL - 121)) | (1 << (SParser.DECIMAL_LITERAL - 121)) | (1 << (SParser.DATETIME_LITERAL - 121)) | (1 << (SParser.TIME_LITERAL - 121)) | (1 << (SParser.DATE_LITERAL - 121)) | (1 << (SParser.PERIOD_LITERAL - 121)))) !== 0)) {
            this.state = 411; 
            localctx.args = this.argument_assignment_list(0);
        }

        this.state = 414;
        this.match(SParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_attribute_declaration;
    this.name = null; // Variable_identifierContext
    this.typ = null; // TypedefContext
    this.match = null; // Attribute_constraintContext
    return this;
}

Attribute_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_declarationContext.prototype.constructor = Attribute_declarationContext;

Attribute_declarationContext.prototype.ATTR = function() {
    return this.getToken(SParser.ATTR, 0);
};

Attribute_declarationContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Attribute_declarationContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Attribute_declarationContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

Attribute_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Attribute_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Attribute_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Attribute_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Attribute_declarationContext.prototype.PASS = function() {
    return this.getToken(SParser.PASS, 0);
};

Attribute_declarationContext.prototype.attribute_constraint = function() {
    return this.getTypedRuleContext(Attribute_constraintContext,0);
};

Attribute_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAttribute_declaration(this);
	}
};

Attribute_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAttribute_declaration(this);
	}
};




SParser.prototype.attribute_declaration = function() {

    var localctx = new Attribute_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SParser.RULE_attribute_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 416;
        this.match(SParser.ATTR);
        this.state = 417; 
        localctx.name = this.variable_identifier();
        this.state = 418;
        this.match(SParser.LPAR);
        this.state = 419; 
        localctx.typ = this.typedef(0);
        this.state = 420;
        this.match(SParser.RPAR);
        this.state = 421;
        this.match(SParser.COLON);
        this.state = 422; 
        this.indent();
        this.state = 425;
        switch(this._input.LA(1)) {
        case SParser.IN:
        case SParser.MATCHING:
            this.state = 423; 
            localctx.match = this.attribute_constraint();
            break;
        case SParser.PASS:
            this.state = 424;
            this.match(SParser.PASS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 427; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Concrete_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_concrete_category_declaration;
    this.name = null; // Type_identifierContext
    this.derived = null; // Derived_listContext
    this.attrs = null; // Attribute_listContext
    this.methods = null; // Member_method_declaration_listContext
    return this;
}

Concrete_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concrete_category_declarationContext.prototype.constructor = Concrete_category_declarationContext;

Concrete_category_declarationContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Concrete_category_declarationContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Concrete_category_declarationContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

Concrete_category_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Concrete_category_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Concrete_category_declarationContext.prototype.CLASS = function() {
    return this.getToken(SParser.CLASS, 0);
};

Concrete_category_declarationContext.prototype.CATEGORY = function() {
    return this.getToken(SParser.CATEGORY, 0);
};

Concrete_category_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Concrete_category_declarationContext.prototype.COMMA = function() {
    return this.getToken(SParser.COMMA, 0);
};

Concrete_category_declarationContext.prototype.PASS = function() {
    return this.getToken(SParser.PASS, 0);
};

Concrete_category_declarationContext.prototype.derived_list = function() {
    return this.getTypedRuleContext(Derived_listContext,0);
};

Concrete_category_declarationContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Concrete_category_declarationContext.prototype.member_method_declaration_list = function() {
    return this.getTypedRuleContext(Member_method_declaration_listContext,0);
};

Concrete_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterConcrete_category_declaration(this);
	}
};

Concrete_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitConcrete_category_declaration(this);
	}
};




SParser.prototype.concrete_category_declaration = function() {

    var localctx = new Concrete_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SParser.RULE_concrete_category_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 429;
        _la = this._input.LA(1);
        if(!(_la===SParser.CATEGORY || _la===SParser.CLASS)) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
        this.state = 430; 
        localctx.name = this.type_identifier();
        this.state = 431;
        this.match(SParser.LPAR);
        this.state = 438;
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.state = 432; 
            localctx.derived = this.derived_list();
            break;

        case 2:
            this.state = 433; 
            localctx.attrs = this.attribute_list();
            break;

        case 3:
            this.state = 434; 
            localctx.derived = this.derived_list();
            this.state = 435;
            this.match(SParser.COMMA);
            this.state = 436; 
            localctx.attrs = this.attribute_list();
            break;

        }
        this.state = 440;
        this.match(SParser.RPAR);
        this.state = 441;
        this.match(SParser.COLON);
        this.state = 442; 
        this.indent();
        this.state = 445;
        switch(this._input.LA(1)) {
        case SParser.ABSTRACT:
        case SParser.DEF:
            this.state = 443; 
            localctx.methods = this.member_method_declaration_list(0);
            break;
        case SParser.PASS:
            this.state = 444;
            this.match(SParser.PASS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 447; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Singleton_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_singleton_category_declaration;
    this.name = null; // Type_identifierContext
    this.attrs = null; // Attribute_listContext
    this.methods = null; // Member_method_declaration_listContext
    return this;
}

Singleton_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Singleton_category_declarationContext.prototype.constructor = Singleton_category_declarationContext;

Singleton_category_declarationContext.prototype.SINGLETON = function() {
    return this.getToken(SParser.SINGLETON, 0);
};

Singleton_category_declarationContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Singleton_category_declarationContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Singleton_category_declarationContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

Singleton_category_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Singleton_category_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Singleton_category_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Singleton_category_declarationContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Singleton_category_declarationContext.prototype.PASS = function() {
    return this.getToken(SParser.PASS, 0);
};

Singleton_category_declarationContext.prototype.member_method_declaration_list = function() {
    return this.getTypedRuleContext(Member_method_declaration_listContext,0);
};

Singleton_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSingleton_category_declaration(this);
	}
};

Singleton_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSingleton_category_declaration(this);
	}
};




SParser.prototype.singleton_category_declaration = function() {

    var localctx = new Singleton_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SParser.RULE_singleton_category_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 449;
        this.match(SParser.SINGLETON);
        this.state = 450; 
        localctx.name = this.type_identifier();
        this.state = 451;
        this.match(SParser.LPAR);
        this.state = 452; 
        localctx.attrs = this.attribute_list();
        this.state = 453;
        this.match(SParser.RPAR);
        this.state = 454;
        this.match(SParser.COLON);
        this.state = 455; 
        this.indent();
        this.state = 458;
        switch(this._input.LA(1)) {
        case SParser.ABSTRACT:
        case SParser.DEF:
            this.state = 456; 
            localctx.methods = this.member_method_declaration_list(0);
            break;
        case SParser.PASS:
            this.state = 457;
            this.match(SParser.PASS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 460; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Derived_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_derived_list;
    this.items = null; // Type_identifier_listContext
    return this;
}

Derived_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Derived_listContext.prototype.constructor = Derived_listContext;

Derived_listContext.prototype.type_identifier_list = function() {
    return this.getTypedRuleContext(Type_identifier_listContext,0);
};

Derived_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDerived_list(this);
	}
};

Derived_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDerived_list(this);
	}
};




SParser.prototype.derived_list = function() {

    var localctx = new Derived_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SParser.RULE_derived_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 462; 
        localctx.items = this.type_identifier_list(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Operator_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_operator_method_declaration;
    this.op = null; // OperatorContext
    this.arg = null; // Operator_argumentContext
    this.typ = null; // TypedefContext
    this.stmts = null; // Statement_listContext
    return this;
}

Operator_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operator_method_declarationContext.prototype.constructor = Operator_method_declarationContext;

Operator_method_declarationContext.prototype.DEF = function() {
    return this.getToken(SParser.DEF, 0);
};

Operator_method_declarationContext.prototype.OPERATOR = function() {
    return this.getToken(SParser.OPERATOR, 0);
};

Operator_method_declarationContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Operator_method_declarationContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Operator_method_declarationContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

Operator_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Operator_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Operator_method_declarationContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Operator_method_declarationContext.prototype.operator_argument = function() {
    return this.getTypedRuleContext(Operator_argumentContext,0);
};

Operator_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Operator_method_declarationContext.prototype.RARROW = function() {
    return this.getToken(SParser.RARROW, 0);
};

Operator_method_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Operator_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterOperator_method_declaration(this);
	}
};

Operator_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitOperator_method_declaration(this);
	}
};




SParser.prototype.operator_method_declaration = function() {

    var localctx = new Operator_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SParser.RULE_operator_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 464;
        this.match(SParser.DEF);
        this.state = 465;
        this.match(SParser.OPERATOR);
        this.state = 466; 
        localctx.op = this.operator();
        this.state = 467;
        this.match(SParser.LPAR);
        this.state = 468; 
        localctx.arg = this.operator_argument();
        this.state = 469;
        this.match(SParser.RPAR);
        this.state = 472;
        _la = this._input.LA(1);
        if(_la===SParser.RARROW) {
            this.state = 470;
            this.match(SParser.RARROW);
            this.state = 471; 
            localctx.typ = this.typedef(0);
        }

        this.state = 474;
        this.match(SParser.COLON);
        this.state = 475; 
        this.indent();
        this.state = 476; 
        localctx.stmts = this.statement_list(0);
        this.state = 477; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Setter_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_setter_method_declaration;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Statement_listContext
    return this;
}

Setter_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Setter_method_declarationContext.prototype.constructor = Setter_method_declarationContext;

Setter_method_declarationContext.prototype.DEF = function() {
    return this.getToken(SParser.DEF, 0);
};

Setter_method_declarationContext.prototype.SETTER = function() {
    return this.getToken(SParser.SETTER, 0);
};

Setter_method_declarationContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Setter_method_declarationContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Setter_method_declarationContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

Setter_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Setter_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Setter_method_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Setter_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Setter_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSetter_method_declaration(this);
	}
};

Setter_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSetter_method_declaration(this);
	}
};




SParser.prototype.setter_method_declaration = function() {

    var localctx = new Setter_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SParser.RULE_setter_method_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 479;
        this.match(SParser.DEF);
        this.state = 480; 
        localctx.name = this.variable_identifier();
        this.state = 481;
        this.match(SParser.SETTER);
        this.state = 482;
        this.match(SParser.LPAR);
        this.state = 483;
        this.match(SParser.RPAR);
        this.state = 484;
        this.match(SParser.COLON);
        this.state = 485; 
        this.indent();
        this.state = 486; 
        localctx.stmts = this.statement_list(0);
        this.state = 487; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Getter_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_getter_method_declaration;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Statement_listContext
    return this;
}

Getter_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Getter_method_declarationContext.prototype.constructor = Getter_method_declarationContext;

Getter_method_declarationContext.prototype.DEF = function() {
    return this.getToken(SParser.DEF, 0);
};

Getter_method_declarationContext.prototype.GETTER = function() {
    return this.getToken(SParser.GETTER, 0);
};

Getter_method_declarationContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Getter_method_declarationContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Getter_method_declarationContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

Getter_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Getter_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Getter_method_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Getter_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Getter_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterGetter_method_declaration(this);
	}
};

Getter_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitGetter_method_declaration(this);
	}
};




SParser.prototype.getter_method_declaration = function() {

    var localctx = new Getter_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SParser.RULE_getter_method_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 489;
        this.match(SParser.DEF);
        this.state = 490; 
        localctx.name = this.variable_identifier();
        this.state = 491;
        this.match(SParser.GETTER);
        this.state = 492;
        this.match(SParser.LPAR);
        this.state = 493;
        this.match(SParser.RPAR);
        this.state = 494;
        this.match(SParser.COLON);
        this.state = 495; 
        this.indent();
        this.state = 496; 
        localctx.stmts = this.statement_list(0);
        this.state = 497; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_native_category_declaration;
    this.name = null; // Type_identifierContext
    this.attrs = null; // Attribute_listContext
    this.bindings = null; // Native_category_bindingsContext
    this.methods = null; // Native_member_method_declaration_listContext
    return this;
}

Native_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_declarationContext.prototype.constructor = Native_category_declarationContext;

Native_category_declarationContext.prototype.NATIVE = function() {
    return this.getToken(SParser.NATIVE, 0);
};

Native_category_declarationContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Native_category_declarationContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Native_category_declarationContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

Native_category_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Native_category_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Native_category_declarationContext.prototype.CLASS = function() {
    return this.getToken(SParser.CLASS, 0);
};

Native_category_declarationContext.prototype.CATEGORY = function() {
    return this.getToken(SParser.CATEGORY, 0);
};

Native_category_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Native_category_declarationContext.prototype.native_category_bindings = function() {
    return this.getTypedRuleContext(Native_category_bindingsContext,0);
};

Native_category_declarationContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

Native_category_declarationContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Native_category_declarationContext.prototype.native_member_method_declaration_list = function() {
    return this.getTypedRuleContext(Native_member_method_declaration_listContext,0);
};

Native_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNative_category_declaration(this);
	}
};

Native_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNative_category_declaration(this);
	}
};




SParser.prototype.native_category_declaration = function() {

    var localctx = new Native_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SParser.RULE_native_category_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 499;
        this.match(SParser.NATIVE);
        this.state = 500;
        _la = this._input.LA(1);
        if(!(_la===SParser.CATEGORY || _la===SParser.CLASS)) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
        this.state = 501; 
        localctx.name = this.type_identifier();
        this.state = 502;
        this.match(SParser.LPAR);
        this.state = 504;
        _la = this._input.LA(1);
        if(_la===SParser.VARIABLE_IDENTIFIER) {
            this.state = 503; 
            localctx.attrs = this.attribute_list();
        }

        this.state = 506;
        this.match(SParser.RPAR);
        this.state = 507;
        this.match(SParser.COLON);
        this.state = 508; 
        this.indent();
        this.state = 509; 
        localctx.bindings = this.native_category_bindings();
        this.state = 513;
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        if(la_===1) {
            this.state = 510; 
            this.lfp();
            this.state = 511; 
            localctx.methods = this.native_member_method_declaration_list(0);

        }
        this.state = 515; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_resource_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_native_resource_declaration;
    this.name = null; // Type_identifierContext
    this.attrs = null; // Attribute_listContext
    this.bindings = null; // Native_category_bindingsContext
    this.methods = null; // Native_member_method_declaration_listContext
    return this;
}

Native_resource_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_resource_declarationContext.prototype.constructor = Native_resource_declarationContext;

Native_resource_declarationContext.prototype.NATIVE = function() {
    return this.getToken(SParser.NATIVE, 0);
};

Native_resource_declarationContext.prototype.RESOURCE = function() {
    return this.getToken(SParser.RESOURCE, 0);
};

Native_resource_declarationContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Native_resource_declarationContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Native_resource_declarationContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

Native_resource_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Native_resource_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Native_resource_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Native_resource_declarationContext.prototype.native_category_bindings = function() {
    return this.getTypedRuleContext(Native_category_bindingsContext,0);
};

Native_resource_declarationContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

Native_resource_declarationContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Native_resource_declarationContext.prototype.native_member_method_declaration_list = function() {
    return this.getTypedRuleContext(Native_member_method_declaration_listContext,0);
};

Native_resource_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNative_resource_declaration(this);
	}
};

Native_resource_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNative_resource_declaration(this);
	}
};




SParser.prototype.native_resource_declaration = function() {

    var localctx = new Native_resource_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SParser.RULE_native_resource_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 517;
        this.match(SParser.NATIVE);
        this.state = 518;
        this.match(SParser.RESOURCE);
        this.state = 519; 
        localctx.name = this.type_identifier();
        this.state = 520;
        this.match(SParser.LPAR);
        this.state = 522;
        _la = this._input.LA(1);
        if(_la===SParser.VARIABLE_IDENTIFIER) {
            this.state = 521; 
            localctx.attrs = this.attribute_list();
        }

        this.state = 524;
        this.match(SParser.RPAR);
        this.state = 525;
        this.match(SParser.COLON);
        this.state = 526; 
        this.indent();
        this.state = 527; 
        localctx.bindings = this.native_category_bindings();
        this.state = 531;
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        if(la_===1) {
            this.state = 528; 
            this.lfp();
            this.state = 529; 
            localctx.methods = this.native_member_method_declaration_list(0);

        }
        this.state = 533; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_bindingsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_native_category_bindings;
    this.items = null; // Native_category_binding_listContext
    return this;
}

Native_category_bindingsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_bindingsContext.prototype.constructor = Native_category_bindingsContext;

Native_category_bindingsContext.prototype.DEF = function() {
    return this.getToken(SParser.DEF, 0);
};

Native_category_bindingsContext.prototype.BINDINGS = function() {
    return this.getToken(SParser.BINDINGS, 0);
};

Native_category_bindingsContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

Native_category_bindingsContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Native_category_bindingsContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Native_category_bindingsContext.prototype.CLASS = function() {
    return this.getToken(SParser.CLASS, 0);
};

Native_category_bindingsContext.prototype.CATEGORY = function() {
    return this.getToken(SParser.CATEGORY, 0);
};

Native_category_bindingsContext.prototype.native_category_binding_list = function() {
    return this.getTypedRuleContext(Native_category_binding_listContext,0);
};

Native_category_bindingsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNative_category_bindings(this);
	}
};

Native_category_bindingsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNative_category_bindings(this);
	}
};




SParser.prototype.native_category_bindings = function() {

    var localctx = new Native_category_bindingsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SParser.RULE_native_category_bindings);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 535;
        this.match(SParser.DEF);
        this.state = 536;
        _la = this._input.LA(1);
        if(!(_la===SParser.CATEGORY || _la===SParser.CLASS)) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
        this.state = 537;
        this.match(SParser.BINDINGS);
        this.state = 538;
        this.match(SParser.COLON);
        this.state = 539; 
        this.indent();
        this.state = 540; 
        localctx.items = this.native_category_binding_list(0);
        this.state = 541; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_binding_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_native_category_binding_list;
    return this;
}

Native_category_binding_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_binding_listContext.prototype.constructor = Native_category_binding_listContext;


 
Native_category_binding_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function NativeCategoryBindingListItemContext(parser, ctx) {
	Native_category_binding_listContext.call(this, parser);
    this.items = null; // Native_category_binding_listContext;
    this.item = null; // Native_category_bindingContext;
    Native_category_binding_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeCategoryBindingListItemContext.prototype = Object.create(Native_category_binding_listContext.prototype);
NativeCategoryBindingListItemContext.prototype.constructor = NativeCategoryBindingListItemContext;

NativeCategoryBindingListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

NativeCategoryBindingListItemContext.prototype.native_category_binding_list = function() {
    return this.getTypedRuleContext(Native_category_binding_listContext,0);
};

NativeCategoryBindingListItemContext.prototype.native_category_binding = function() {
    return this.getTypedRuleContext(Native_category_bindingContext,0);
};
NativeCategoryBindingListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNativeCategoryBindingListItem(this);
	}
};

NativeCategoryBindingListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNativeCategoryBindingListItem(this);
	}
};


function NativeCategoryBindingListContext(parser, ctx) {
	Native_category_binding_listContext.call(this, parser);
    this.item = null; // Native_category_bindingContext;
    Native_category_binding_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeCategoryBindingListContext.prototype = Object.create(Native_category_binding_listContext.prototype);
NativeCategoryBindingListContext.prototype.constructor = NativeCategoryBindingListContext;

NativeCategoryBindingListContext.prototype.native_category_binding = function() {
    return this.getTypedRuleContext(Native_category_bindingContext,0);
};
NativeCategoryBindingListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNativeCategoryBindingList(this);
	}
};

NativeCategoryBindingListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNativeCategoryBindingList(this);
	}
};



SParser.prototype.native_category_binding_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Native_category_binding_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 28;
    this.enterRecursionRule(localctx, 28, SParser.RULE_native_category_binding_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new NativeCategoryBindingListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 544; 
        localctx.item = this.native_category_binding();
        this._ctx.stop = this._input.LT(-1);
        this.state = 552;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new NativeCategoryBindingListItemContext(this, new Native_category_binding_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_native_category_binding_list);
                this.state = 546;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 547; 
                this.lfp();
                this.state = 548; 
                localctx.item = this.native_category_binding(); 
            }
            this.state = 554;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Attribute_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_attribute_list;
    this.items = null; // Variable_identifier_listContext
    return this;
}

Attribute_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_listContext.prototype.constructor = Attribute_listContext;

Attribute_listContext.prototype.variable_identifier_list = function() {
    return this.getTypedRuleContext(Variable_identifier_listContext,0);
};

Attribute_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAttribute_list(this);
	}
};

Attribute_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAttribute_list(this);
	}
};




SParser.prototype.attribute_list = function() {

    var localctx = new Attribute_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SParser.RULE_attribute_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 555; 
        localctx.items = this.variable_identifier_list(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Abstract_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_abstract_method_declaration;
    this.name = null; // Method_identifierContext
    this.args = null; // Argument_listContext
    this.typ = null; // TypedefContext
    return this;
}

Abstract_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Abstract_method_declarationContext.prototype.constructor = Abstract_method_declarationContext;

Abstract_method_declarationContext.prototype.ABSTRACT = function() {
    return this.getToken(SParser.ABSTRACT, 0);
};

Abstract_method_declarationContext.prototype.DEF = function() {
    return this.getToken(SParser.DEF, 0);
};

Abstract_method_declarationContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Abstract_method_declarationContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Abstract_method_declarationContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};

Abstract_method_declarationContext.prototype.RARROW = function() {
    return this.getToken(SParser.RARROW, 0);
};

Abstract_method_declarationContext.prototype.argument_list = function() {
    return this.getTypedRuleContext(Argument_listContext,0);
};

Abstract_method_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Abstract_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAbstract_method_declaration(this);
	}
};

Abstract_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAbstract_method_declaration(this);
	}
};




SParser.prototype.abstract_method_declaration = function() {

    var localctx = new Abstract_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SParser.RULE_abstract_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 557;
        this.match(SParser.ABSTRACT);
        this.state = 558;
        this.match(SParser.DEF);
        this.state = 559; 
        localctx.name = this.method_identifier();
        this.state = 560;
        this.match(SParser.LPAR);
        this.state = 562;
        _la = this._input.LA(1);
        if(_la===SParser.CODE || _la===SParser.MUTABLE || _la===SParser.VARIABLE_IDENTIFIER) {
            this.state = 561; 
            localctx.args = this.argument_list(0);
        }

        this.state = 564;
        this.match(SParser.RPAR);
        this.state = 567;
        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
        if(la_===1) {
            this.state = 565;
            this.match(SParser.RARROW);
            this.state = 566; 
            localctx.typ = this.typedef(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Concrete_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_concrete_method_declaration;
    this.name = null; // Method_identifierContext
    this.args = null; // Argument_listContext
    this.typ = null; // TypedefContext
    this.stmts = null; // Statement_listContext
    return this;
}

Concrete_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concrete_method_declarationContext.prototype.constructor = Concrete_method_declarationContext;

Concrete_method_declarationContext.prototype.DEF = function() {
    return this.getToken(SParser.DEF, 0);
};

Concrete_method_declarationContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Concrete_method_declarationContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Concrete_method_declarationContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

Concrete_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Concrete_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Concrete_method_declarationContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};

Concrete_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Concrete_method_declarationContext.prototype.RARROW = function() {
    return this.getToken(SParser.RARROW, 0);
};

Concrete_method_declarationContext.prototype.argument_list = function() {
    return this.getTypedRuleContext(Argument_listContext,0);
};

Concrete_method_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Concrete_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterConcrete_method_declaration(this);
	}
};

Concrete_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitConcrete_method_declaration(this);
	}
};




SParser.prototype.concrete_method_declaration = function() {

    var localctx = new Concrete_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SParser.RULE_concrete_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 569;
        this.match(SParser.DEF);
        this.state = 570; 
        localctx.name = this.method_identifier();
        this.state = 571;
        this.match(SParser.LPAR);
        this.state = 573;
        _la = this._input.LA(1);
        if(_la===SParser.CODE || _la===SParser.MUTABLE || _la===SParser.VARIABLE_IDENTIFIER) {
            this.state = 572; 
            localctx.args = this.argument_list(0);
        }

        this.state = 575;
        this.match(SParser.RPAR);
        this.state = 578;
        _la = this._input.LA(1);
        if(_la===SParser.RARROW) {
            this.state = 576;
            this.match(SParser.RARROW);
            this.state = 577; 
            localctx.typ = this.typedef(0);
        }

        this.state = 580;
        this.match(SParser.COLON);
        this.state = 581; 
        this.indent();
        this.state = 582; 
        localctx.stmts = this.statement_list(0);
        this.state = 583; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_native_method_declaration;
    this.name = null; // Method_identifierContext
    this.args = null; // Argument_listContext
    this.typ = null; // Category_or_any_typeContext
    this.stmts = null; // Native_statement_listContext
    return this;
}

Native_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_method_declarationContext.prototype.constructor = Native_method_declarationContext;

Native_method_declarationContext.prototype.DEF = function() {
    return this.getToken(SParser.DEF, 0);
};

Native_method_declarationContext.prototype.NATIVE = function() {
    return this.getToken(SParser.NATIVE, 0);
};

Native_method_declarationContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Native_method_declarationContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Native_method_declarationContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

Native_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Native_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Native_method_declarationContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};

Native_method_declarationContext.prototype.native_statement_list = function() {
    return this.getTypedRuleContext(Native_statement_listContext,0);
};

Native_method_declarationContext.prototype.RARROW = function() {
    return this.getToken(SParser.RARROW, 0);
};

Native_method_declarationContext.prototype.argument_list = function() {
    return this.getTypedRuleContext(Argument_listContext,0);
};

Native_method_declarationContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};

Native_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNative_method_declaration(this);
	}
};

Native_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNative_method_declaration(this);
	}
};




SParser.prototype.native_method_declaration = function() {

    var localctx = new Native_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SParser.RULE_native_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 585;
        this.match(SParser.DEF);
        this.state = 586;
        this.match(SParser.NATIVE);
        this.state = 587; 
        localctx.name = this.method_identifier();
        this.state = 588;
        this.match(SParser.LPAR);
        this.state = 590;
        _la = this._input.LA(1);
        if(_la===SParser.CODE || _la===SParser.MUTABLE || _la===SParser.VARIABLE_IDENTIFIER) {
            this.state = 589; 
            localctx.args = this.argument_list(0);
        }

        this.state = 592;
        this.match(SParser.RPAR);
        this.state = 595;
        _la = this._input.LA(1);
        if(_la===SParser.RARROW) {
            this.state = 593;
            this.match(SParser.RARROW);
            this.state = 594; 
            localctx.typ = this.category_or_any_type();
        }

        this.state = 597;
        this.match(SParser.COLON);
        this.state = 598; 
        this.indent();
        this.state = 599; 
        localctx.stmts = this.native_statement_list(0);
        this.state = 600; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Test_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_test_method_declaration;
    this.name = null; // Token
    this.stmts = null; // Statement_listContext
    this.exps = null; // Assertion_listContext
    this.error = null; // Symbol_identifierContext
    return this;
}

Test_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Test_method_declarationContext.prototype.constructor = Test_method_declarationContext;

Test_method_declarationContext.prototype.DEF = function() {
    return this.getToken(SParser.DEF, 0);
};

Test_method_declarationContext.prototype.TEST = function() {
    return this.getToken(SParser.TEST, 0);
};

Test_method_declarationContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Test_method_declarationContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Test_method_declarationContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SParser.COLON);
    } else {
        return this.getToken(SParser.COLON, i);
    }
};


Test_method_declarationContext.prototype.indent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndentContext);
    } else {
        return this.getTypedRuleContext(IndentContext,i);
    }
};

Test_method_declarationContext.prototype.dedent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DedentContext);
    } else {
        return this.getTypedRuleContext(DedentContext,i);
    }
};

Test_method_declarationContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

Test_method_declarationContext.prototype.EXPECTING = function() {
    return this.getToken(SParser.EXPECTING, 0);
};

Test_method_declarationContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(SParser.TEXT_LITERAL, 0);
};

Test_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Test_method_declarationContext.prototype.assertion_list = function() {
    return this.getTypedRuleContext(Assertion_listContext,0);
};

Test_method_declarationContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};

Test_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterTest_method_declaration(this);
	}
};

Test_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitTest_method_declaration(this);
	}
};




SParser.prototype.test_method_declaration = function() {

    var localctx = new Test_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SParser.RULE_test_method_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 602;
        this.match(SParser.DEF);
        this.state = 603;
        this.match(SParser.TEST);
        this.state = 604;
        localctx.name = this.match(SParser.TEXT_LITERAL);
        this.state = 605;
        this.match(SParser.LPAR);
        this.state = 606;
        this.match(SParser.RPAR);
        this.state = 607;
        this.match(SParser.COLON);
        this.state = 608; 
        this.indent();
        this.state = 609; 
        localctx.stmts = this.statement_list(0);
        this.state = 610; 
        this.dedent();
        this.state = 611; 
        this.lfp();
        this.state = 612;
        this.match(SParser.EXPECTING);
        this.state = 613;
        this.match(SParser.COLON);
        this.state = 619;
        switch(this._input.LA(1)) {
        case SParser.LF:
            this.state = 614; 
            this.indent();
            this.state = 615; 
            localctx.exps = this.assertion_list(0);
            this.state = 616; 
            this.dedent();
            break;
        case SParser.SYMBOL_IDENTIFIER:
            this.state = 618; 
            localctx.error = this.symbol_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssertionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_assertion;
    this.exp = null; // ExpressionContext
    return this;
}

AssertionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssertionContext.prototype.constructor = AssertionContext;

AssertionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AssertionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAssertion(this);
	}
};

AssertionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAssertion(this);
	}
};




SParser.prototype.assertion = function() {

    var localctx = new AssertionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SParser.RULE_assertion);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 621; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Typed_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_typed_argument;
    this.name = null; // Variable_identifierContext
    this.typ = null; // Category_or_any_typeContext
    this.attrs = null; // Attribute_listContext
    this.value = null; // Literal_expressionContext
    return this;
}

Typed_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Typed_argumentContext.prototype.constructor = Typed_argumentContext;

Typed_argumentContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

Typed_argumentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Typed_argumentContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};

Typed_argumentContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Typed_argumentContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Typed_argumentContext.prototype.EQ = function() {
    return this.getToken(SParser.EQ, 0);
};

Typed_argumentContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Typed_argumentContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};

Typed_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterTyped_argument(this);
	}
};

Typed_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitTyped_argument(this);
	}
};




SParser.prototype.typed_argument = function() {

    var localctx = new Typed_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SParser.RULE_typed_argument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 623; 
        localctx.name = this.variable_identifier();
        this.state = 624;
        this.match(SParser.COLON);
        this.state = 625; 
        localctx.typ = this.category_or_any_type();
        this.state = 630;
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        if(la_===1) {
            this.state = 626;
            this.match(SParser.LPAR);
            this.state = 627; 
            localctx.attrs = this.attribute_list();
            this.state = 628;
            this.match(SParser.RPAR);

        }
        this.state = 634;
        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
        if(la_===1) {
            this.state = 632;
            this.match(SParser.EQ);
            this.state = 633; 
            localctx.value = this.literal_expression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;


 
StatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function WithSingletonStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // With_singleton_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WithSingletonStatementContext.prototype = Object.create(StatementContext.prototype);
WithSingletonStatementContext.prototype.constructor = WithSingletonStatementContext;

WithSingletonStatementContext.prototype.with_singleton_statement = function() {
    return this.getTypedRuleContext(With_singleton_statementContext,0);
};
WithSingletonStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterWithSingletonStatement(this);
	}
};

WithSingletonStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitWithSingletonStatement(this);
	}
};


function WriteStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Write_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WriteStatementContext.prototype = Object.create(StatementContext.prototype);
WriteStatementContext.prototype.constructor = WriteStatementContext;

WriteStatementContext.prototype.write_statement = function() {
    return this.getTypedRuleContext(Write_statementContext,0);
};
WriteStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterWriteStatement(this);
	}
};

WriteStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitWriteStatement(this);
	}
};


function WhileStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // While_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WhileStatementContext.prototype = Object.create(StatementContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

WhileStatementContext.prototype.while_statement = function() {
    return this.getTypedRuleContext(While_statementContext,0);
};
WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitWhileStatement(this);
	}
};


function WithResourceStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // With_resource_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WithResourceStatementContext.prototype = Object.create(StatementContext.prototype);
WithResourceStatementContext.prototype.constructor = WithResourceStatementContext;

WithResourceStatementContext.prototype.with_resource_statement = function() {
    return this.getTypedRuleContext(With_resource_statementContext,0);
};
WithResourceStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterWithResourceStatement(this);
	}
};

WithResourceStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitWithResourceStatement(this);
	}
};


function RaiseStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Raise_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RaiseStatementContext.prototype = Object.create(StatementContext.prototype);
RaiseStatementContext.prototype.constructor = RaiseStatementContext;

RaiseStatementContext.prototype.raise_statement = function() {
    return this.getTypedRuleContext(Raise_statementContext,0);
};
RaiseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterRaiseStatement(this);
	}
};

RaiseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitRaiseStatement(this);
	}
};


function AssignInstanceStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Assign_instance_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignInstanceStatementContext.prototype = Object.create(StatementContext.prototype);
AssignInstanceStatementContext.prototype.constructor = AssignInstanceStatementContext;

AssignInstanceStatementContext.prototype.assign_instance_statement = function() {
    return this.getTypedRuleContext(Assign_instance_statementContext,0);
};
AssignInstanceStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAssignInstanceStatement(this);
	}
};

AssignInstanceStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAssignInstanceStatement(this);
	}
};


function IfStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // If_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IfStatementContext.prototype = Object.create(StatementContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.if_statement = function() {
    return this.getTypedRuleContext(If_statementContext,0);
};
IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitIfStatement(this);
	}
};


function SwitchStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Switch_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SwitchStatementContext.prototype = Object.create(StatementContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

SwitchStatementContext.prototype.switch_statement = function() {
    return this.getTypedRuleContext(Switch_statementContext,0);
};
SwitchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSwitchStatement(this);
	}
};

SwitchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSwitchStatement(this);
	}
};


function TryStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Try_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TryStatementContext.prototype = Object.create(StatementContext.prototype);
TryStatementContext.prototype.constructor = TryStatementContext;

TryStatementContext.prototype.try_statement = function() {
    return this.getTypedRuleContext(Try_statementContext,0);
};
TryStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterTryStatement(this);
	}
};

TryStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitTryStatement(this);
	}
};


function MethodCallStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Method_callContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodCallStatementContext.prototype = Object.create(StatementContext.prototype);
MethodCallStatementContext.prototype.constructor = MethodCallStatementContext;

MethodCallStatementContext.prototype.method_call = function() {
    return this.getTypedRuleContext(Method_callContext,0);
};
MethodCallStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMethodCallStatement(this);
	}
};

MethodCallStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMethodCallStatement(this);
	}
};


function ReturnStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Return_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReturnStatementContext.prototype = Object.create(StatementContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.return_statement = function() {
    return this.getTypedRuleContext(Return_statementContext,0);
};
ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitReturnStatement(this);
	}
};


function AssignTupleStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Assign_tuple_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignTupleStatementContext.prototype = Object.create(StatementContext.prototype);
AssignTupleStatementContext.prototype.constructor = AssignTupleStatementContext;

AssignTupleStatementContext.prototype.assign_tuple_statement = function() {
    return this.getTypedRuleContext(Assign_tuple_statementContext,0);
};
AssignTupleStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAssignTupleStatement(this);
	}
};

AssignTupleStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAssignTupleStatement(this);
	}
};


function ClosureStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.decl = null; // Concrete_method_declarationContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClosureStatementContext.prototype = Object.create(StatementContext.prototype);
ClosureStatementContext.prototype.constructor = ClosureStatementContext;

ClosureStatementContext.prototype.concrete_method_declaration = function() {
    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
};
ClosureStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterClosureStatement(this);
	}
};

ClosureStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitClosureStatement(this);
	}
};


function DoWhileStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Do_while_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DoWhileStatementContext.prototype = Object.create(StatementContext.prototype);
DoWhileStatementContext.prototype.constructor = DoWhileStatementContext;

DoWhileStatementContext.prototype.do_while_statement = function() {
    return this.getTypedRuleContext(Do_while_statementContext,0);
};
DoWhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDoWhileStatement(this);
	}
};

DoWhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDoWhileStatement(this);
	}
};


function ForEachStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // For_each_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForEachStatementContext.prototype = Object.create(StatementContext.prototype);
ForEachStatementContext.prototype.constructor = ForEachStatementContext;

ForEachStatementContext.prototype.for_each_statement = function() {
    return this.getTypedRuleContext(For_each_statementContext,0);
};
ForEachStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterForEachStatement(this);
	}
};

ForEachStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitForEachStatement(this);
	}
};



SParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SParser.RULE_statement);
    try {
        this.state = 651;
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MethodCallStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 636; 
            localctx.stmt = this.method_call();
            break;

        case 2:
            localctx = new AssignInstanceStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 637; 
            localctx.stmt = this.assign_instance_statement();
            break;

        case 3:
            localctx = new AssignTupleStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 638; 
            localctx.stmt = this.assign_tuple_statement();
            break;

        case 4:
            localctx = new ReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 639; 
            localctx.stmt = this.return_statement();
            break;

        case 5:
            localctx = new IfStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 640; 
            localctx.stmt = this.if_statement();
            break;

        case 6:
            localctx = new SwitchStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 641; 
            localctx.stmt = this.switch_statement();
            break;

        case 7:
            localctx = new ForEachStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 642; 
            localctx.stmt = this.for_each_statement();
            break;

        case 8:
            localctx = new WhileStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 643; 
            localctx.stmt = this.while_statement();
            break;

        case 9:
            localctx = new DoWhileStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 644; 
            localctx.stmt = this.do_while_statement();
            break;

        case 10:
            localctx = new RaiseStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 645; 
            localctx.stmt = this.raise_statement();
            break;

        case 11:
            localctx = new TryStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 646; 
            localctx.stmt = this.try_statement();
            break;

        case 12:
            localctx = new WriteStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 647; 
            localctx.stmt = this.write_statement();
            break;

        case 13:
            localctx = new WithResourceStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 648; 
            localctx.stmt = this.with_resource_statement();
            break;

        case 14:
            localctx = new WithSingletonStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 649; 
            localctx.stmt = this.with_singleton_statement();
            break;

        case 15:
            localctx = new ClosureStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 650; 
            localctx.decl = this.concrete_method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_callContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_method_call;
    this.method = null; // Method_selectorContext
    this.args = null; // Argument_assignment_listContext
    return this;
}

Method_callContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_callContext.prototype.constructor = Method_callContext;

Method_callContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Method_callContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Method_callContext.prototype.method_selector = function() {
    return this.getTypedRuleContext(Method_selectorContext,0);
};

Method_callContext.prototype.argument_assignment_list = function() {
    return this.getTypedRuleContext(Argument_assignment_listContext,0);
};

Method_callContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMethod_call(this);
	}
};

Method_callContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMethod_call(this);
	}
};




SParser.prototype.method_call = function() {

    var localctx = new Method_callContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SParser.RULE_method_call);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 653; 
        localctx.method = this.method_selector();
        this.state = 654;
        this.match(SParser.LPAR);
        this.state = 656;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SParser.LPAR) | (1 << SParser.LBRAK) | (1 << SParser.LCURL))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SParser.MINUS - 32)) | (1 << (SParser.LT - 32)) | (1 << (SParser.CODE - 32)) | (1 << (SParser.DOCUMENT - 32)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (SParser.EXECUTE - 87)) | (1 << (SParser.FETCH - 87)) | (1 << (SParser.MUTABLE - 87)) | (1 << (SParser.NONE - 87)) | (1 << (SParser.NOT - 87)) | (1 << (SParser.READ - 87)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (SParser.SELF - 121)) | (1 << (SParser.SORTED - 121)) | (1 << (SParser.THIS - 121)) | (1 << (SParser.BOOLEAN_LITERAL - 121)) | (1 << (SParser.CHAR_LITERAL - 121)) | (1 << (SParser.MIN_INTEGER - 121)) | (1 << (SParser.MAX_INTEGER - 121)) | (1 << (SParser.SYMBOL_IDENTIFIER - 121)) | (1 << (SParser.TYPE_IDENTIFIER - 121)) | (1 << (SParser.VARIABLE_IDENTIFIER - 121)) | (1 << (SParser.TEXT_LITERAL - 121)) | (1 << (SParser.INTEGER_LITERAL - 121)) | (1 << (SParser.HEXA_LITERAL - 121)) | (1 << (SParser.DECIMAL_LITERAL - 121)) | (1 << (SParser.DATETIME_LITERAL - 121)) | (1 << (SParser.TIME_LITERAL - 121)) | (1 << (SParser.DATE_LITERAL - 121)) | (1 << (SParser.PERIOD_LITERAL - 121)))) !== 0)) {
            this.state = 655; 
            localctx.args = this.argument_assignment_list(0);
        }

        this.state = 658;
        this.match(SParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_selectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_method_selector;
    return this;
}

Method_selectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_selectorContext.prototype.constructor = Method_selectorContext;


 
Method_selectorContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MethodParentContext(parser, ctx) {
	Method_selectorContext.call(this, parser);
    this.parent = null; // Callable_parentContext;
    this.name = null; // Method_identifierContext;
    Method_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodParentContext.prototype = Object.create(Method_selectorContext.prototype);
MethodParentContext.prototype.constructor = MethodParentContext;

MethodParentContext.prototype.DOT = function() {
    return this.getToken(SParser.DOT, 0);
};

MethodParentContext.prototype.callable_parent = function() {
    return this.getTypedRuleContext(Callable_parentContext,0);
};

MethodParentContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};
MethodParentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMethodParent(this);
	}
};

MethodParentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMethodParent(this);
	}
};


function MethodNameContext(parser, ctx) {
	Method_selectorContext.call(this, parser);
    this.name = null; // Method_identifierContext;
    Method_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodNameContext.prototype = Object.create(Method_selectorContext.prototype);
MethodNameContext.prototype.constructor = MethodNameContext;

MethodNameContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};
MethodNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMethodName(this);
	}
};

MethodNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMethodName(this);
	}
};



SParser.prototype.method_selector = function() {

    var localctx = new Method_selectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SParser.RULE_method_selector);
    try {
        this.state = 665;
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MethodNameContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 660; 
            localctx.name = this.method_identifier();
            break;

        case 2:
            localctx = new MethodParentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 661; 
            localctx.parent = this.callable_parent(0);
            this.state = 662;
            this.match(SParser.DOT);
            this.state = 663; 
            localctx.name = this.method_identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Callable_parentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_callable_parent;
    return this;
}

Callable_parentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Callable_parentContext.prototype.constructor = Callable_parentContext;


 
Callable_parentContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CallableSelectorContext(parser, ctx) {
	Callable_parentContext.call(this, parser);
    this.parent = null; // Callable_parentContext;
    this.select = null; // Callable_selectorContext;
    Callable_parentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CallableSelectorContext.prototype = Object.create(Callable_parentContext.prototype);
CallableSelectorContext.prototype.constructor = CallableSelectorContext;

CallableSelectorContext.prototype.callable_parent = function() {
    return this.getTypedRuleContext(Callable_parentContext,0);
};

CallableSelectorContext.prototype.callable_selector = function() {
    return this.getTypedRuleContext(Callable_selectorContext,0);
};
CallableSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCallableSelector(this);
	}
};

CallableSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCallableSelector(this);
	}
};


function CallableRootContext(parser, ctx) {
	Callable_parentContext.call(this, parser);
    this.name = null; // IdentifierContext;
    Callable_parentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CallableRootContext.prototype = Object.create(Callable_parentContext.prototype);
CallableRootContext.prototype.constructor = CallableRootContext;

CallableRootContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
CallableRootContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCallableRoot(this);
	}
};

CallableRootContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCallableRoot(this);
	}
};



SParser.prototype.callable_parent = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Callable_parentContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 50;
    this.enterRecursionRule(localctx, 50, SParser.RULE_callable_parent, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new CallableRootContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 668; 
        localctx.name = this.identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 674;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,25,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CallableSelectorContext(this, new Callable_parentContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_callable_parent);
                this.state = 670;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 671; 
                localctx.select = this.callable_selector(); 
            }
            this.state = 676;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,25,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Callable_selectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_callable_selector;
    return this;
}

Callable_selectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Callable_selectorContext.prototype.constructor = Callable_selectorContext;


 
Callable_selectorContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CallableItemSelectorContext(parser, ctx) {
	Callable_selectorContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Callable_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CallableItemSelectorContext.prototype = Object.create(Callable_selectorContext.prototype);
CallableItemSelectorContext.prototype.constructor = CallableItemSelectorContext;

CallableItemSelectorContext.prototype.LBRAK = function() {
    return this.getToken(SParser.LBRAK, 0);
};

CallableItemSelectorContext.prototype.RBRAK = function() {
    return this.getToken(SParser.RBRAK, 0);
};

CallableItemSelectorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
CallableItemSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCallableItemSelector(this);
	}
};

CallableItemSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCallableItemSelector(this);
	}
};


function CallableMemberSelectorContext(parser, ctx) {
	Callable_selectorContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    Callable_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CallableMemberSelectorContext.prototype = Object.create(Callable_selectorContext.prototype);
CallableMemberSelectorContext.prototype.constructor = CallableMemberSelectorContext;

CallableMemberSelectorContext.prototype.DOT = function() {
    return this.getToken(SParser.DOT, 0);
};

CallableMemberSelectorContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
CallableMemberSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCallableMemberSelector(this);
	}
};

CallableMemberSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCallableMemberSelector(this);
	}
};



SParser.prototype.callable_selector = function() {

    var localctx = new Callable_selectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SParser.RULE_callable_selector);
    try {
        this.state = 683;
        switch(this._input.LA(1)) {
        case SParser.DOT:
            localctx = new CallableMemberSelectorContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 677;
            this.match(SParser.DOT);
            this.state = 678; 
            localctx.name = this.variable_identifier();
            break;
        case SParser.LBRAK:
            localctx = new CallableItemSelectorContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 679;
            this.match(SParser.LBRAK);
            this.state = 680; 
            localctx.exp = this.expression(0);
            this.state = 681;
            this.match(SParser.RBRAK);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_resource_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_with_resource_statement;
    this.stmt = null; // Assign_variable_statementContext
    this.stmts = null; // Statement_listContext
    return this;
}

With_resource_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_resource_statementContext.prototype.constructor = With_resource_statementContext;

With_resource_statementContext.prototype.WITH = function() {
    return this.getToken(SParser.WITH, 0);
};

With_resource_statementContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

With_resource_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

With_resource_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

With_resource_statementContext.prototype.assign_variable_statement = function() {
    return this.getTypedRuleContext(Assign_variable_statementContext,0);
};

With_resource_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

With_resource_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterWith_resource_statement(this);
	}
};

With_resource_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitWith_resource_statement(this);
	}
};




SParser.prototype.with_resource_statement = function() {

    var localctx = new With_resource_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SParser.RULE_with_resource_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 685;
        this.match(SParser.WITH);
        this.state = 686; 
        localctx.stmt = this.assign_variable_statement();
        this.state = 687;
        this.match(SParser.COLON);
        this.state = 688; 
        this.indent();
        this.state = 689; 
        localctx.stmts = this.statement_list(0);
        this.state = 690; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_singleton_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_with_singleton_statement;
    this.typ = null; // Type_identifierContext
    this.stmts = null; // Statement_listContext
    return this;
}

With_singleton_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_singleton_statementContext.prototype.constructor = With_singleton_statementContext;

With_singleton_statementContext.prototype.WITH = function() {
    return this.getToken(SParser.WITH, 0);
};

With_singleton_statementContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

With_singleton_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

With_singleton_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

With_singleton_statementContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

With_singleton_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

With_singleton_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterWith_singleton_statement(this);
	}
};

With_singleton_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitWith_singleton_statement(this);
	}
};




SParser.prototype.with_singleton_statement = function() {

    var localctx = new With_singleton_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SParser.RULE_with_singleton_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 692;
        this.match(SParser.WITH);
        this.state = 693; 
        localctx.typ = this.type_identifier();
        this.state = 694;
        this.match(SParser.COLON);
        this.state = 695; 
        this.indent();
        this.state = 696; 
        localctx.stmts = this.statement_list(0);
        this.state = 697; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_switch_statement;
    this.exp = null; // ExpressionContext
    this.cases = null; // Switch_case_statement_listContext
    this.stmts = null; // Statement_listContext
    return this;
}

Switch_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_statementContext.prototype.constructor = Switch_statementContext;

Switch_statementContext.prototype.SWITCH = function() {
    return this.getToken(SParser.SWITCH, 0);
};

Switch_statementContext.prototype.ON = function() {
    return this.getToken(SParser.ON, 0);
};

Switch_statementContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SParser.COLON);
    } else {
        return this.getToken(SParser.COLON, i);
    }
};


Switch_statementContext.prototype.indent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndentContext);
    } else {
        return this.getTypedRuleContext(IndentContext,i);
    }
};

Switch_statementContext.prototype.dedent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DedentContext);
    } else {
        return this.getTypedRuleContext(DedentContext,i);
    }
};

Switch_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Switch_statementContext.prototype.switch_case_statement_list = function() {
    return this.getTypedRuleContext(Switch_case_statement_listContext,0);
};

Switch_statementContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

Switch_statementContext.prototype.OTHERWISE = function() {
    return this.getToken(SParser.OTHERWISE, 0);
};

Switch_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Switch_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSwitch_statement(this);
	}
};

Switch_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSwitch_statement(this);
	}
};




SParser.prototype.switch_statement = function() {

    var localctx = new Switch_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SParser.RULE_switch_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 699;
        this.match(SParser.SWITCH);
        this.state = 700;
        this.match(SParser.ON);
        this.state = 701; 
        localctx.exp = this.expression(0);
        this.state = 702;
        this.match(SParser.COLON);
        this.state = 703; 
        this.indent();
        this.state = 704; 
        localctx.cases = this.switch_case_statement_list(0);
        this.state = 712;
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        if(la_===1) {
            this.state = 705; 
            this.lfp();
            this.state = 706;
            this.match(SParser.OTHERWISE);
            this.state = 707;
            this.match(SParser.COLON);
            this.state = 708; 
            this.indent();
            this.state = 709; 
            localctx.stmts = this.statement_list(0);
            this.state = 710; 
            this.dedent();

        }
        this.state = 714; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_case_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_switch_case_statement;
    return this;
}

Switch_case_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_case_statementContext.prototype.constructor = Switch_case_statementContext;


 
Switch_case_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AtomicSwitchCaseContext(parser, ctx) {
	Switch_case_statementContext.call(this, parser);
    this.exp = null; // Atomic_literalContext;
    this.stmts = null; // Statement_listContext;
    Switch_case_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtomicSwitchCaseContext.prototype = Object.create(Switch_case_statementContext.prototype);
AtomicSwitchCaseContext.prototype.constructor = AtomicSwitchCaseContext;

AtomicSwitchCaseContext.prototype.WHEN = function() {
    return this.getToken(SParser.WHEN, 0);
};

AtomicSwitchCaseContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

AtomicSwitchCaseContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

AtomicSwitchCaseContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

AtomicSwitchCaseContext.prototype.atomic_literal = function() {
    return this.getTypedRuleContext(Atomic_literalContext,0);
};

AtomicSwitchCaseContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
AtomicSwitchCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAtomicSwitchCase(this);
	}
};

AtomicSwitchCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAtomicSwitchCase(this);
	}
};


function CollectionSwitchCaseContext(parser, ctx) {
	Switch_case_statementContext.call(this, parser);
    this.exp = null; // Literal_collectionContext;
    this.stmts = null; // Statement_listContext;
    Switch_case_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CollectionSwitchCaseContext.prototype = Object.create(Switch_case_statementContext.prototype);
CollectionSwitchCaseContext.prototype.constructor = CollectionSwitchCaseContext;

CollectionSwitchCaseContext.prototype.WHEN = function() {
    return this.getToken(SParser.WHEN, 0);
};

CollectionSwitchCaseContext.prototype.IN = function() {
    return this.getToken(SParser.IN, 0);
};

CollectionSwitchCaseContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

CollectionSwitchCaseContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

CollectionSwitchCaseContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

CollectionSwitchCaseContext.prototype.literal_collection = function() {
    return this.getTypedRuleContext(Literal_collectionContext,0);
};

CollectionSwitchCaseContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
CollectionSwitchCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCollectionSwitchCase(this);
	}
};

CollectionSwitchCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCollectionSwitchCase(this);
	}
};



SParser.prototype.switch_case_statement = function() {

    var localctx = new Switch_case_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SParser.RULE_switch_case_statement);
    try {
        this.state = 731;
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AtomicSwitchCaseContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 716;
            this.match(SParser.WHEN);
            this.state = 717; 
            localctx.exp = this.atomic_literal();
            this.state = 718;
            this.match(SParser.COLON);
            this.state = 719; 
            this.indent();
            this.state = 720; 
            localctx.stmts = this.statement_list(0);
            this.state = 721; 
            this.dedent();
            break;

        case 2:
            localctx = new CollectionSwitchCaseContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 723;
            this.match(SParser.WHEN);
            this.state = 724;
            this.match(SParser.IN);
            this.state = 725; 
            localctx.exp = this.literal_collection();
            this.state = 726;
            this.match(SParser.COLON);
            this.state = 727; 
            this.indent();
            this.state = 728; 
            localctx.stmts = this.statement_list(0);
            this.state = 729; 
            this.dedent();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_each_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_for_each_statement;
    this.name1 = null; // Variable_identifierContext
    this.name2 = null; // Variable_identifierContext
    this.source = null; // ExpressionContext
    this.stmts = null; // Statement_listContext
    return this;
}

For_each_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_each_statementContext.prototype.constructor = For_each_statementContext;

For_each_statementContext.prototype.FOR = function() {
    return this.getToken(SParser.FOR, 0);
};

For_each_statementContext.prototype.IN = function() {
    return this.getToken(SParser.IN, 0);
};

For_each_statementContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

For_each_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

For_each_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

For_each_statementContext.prototype.variable_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_identifierContext);
    } else {
        return this.getTypedRuleContext(Variable_identifierContext,i);
    }
};

For_each_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

For_each_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

For_each_statementContext.prototype.COMMA = function() {
    return this.getToken(SParser.COMMA, 0);
};

For_each_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterFor_each_statement(this);
	}
};

For_each_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitFor_each_statement(this);
	}
};




SParser.prototype.for_each_statement = function() {

    var localctx = new For_each_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SParser.RULE_for_each_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 733;
        this.match(SParser.FOR);
        this.state = 734; 
        localctx.name1 = this.variable_identifier();
        this.state = 737;
        _la = this._input.LA(1);
        if(_la===SParser.COMMA) {
            this.state = 735;
            this.match(SParser.COMMA);
            this.state = 736; 
            localctx.name2 = this.variable_identifier();
        }

        this.state = 739;
        this.match(SParser.IN);
        this.state = 740; 
        localctx.source = this.expression(0);
        this.state = 741;
        this.match(SParser.COLON);
        this.state = 742; 
        this.indent();
        this.state = 743; 
        localctx.stmts = this.statement_list(0);
        this.state = 744; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Do_while_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_do_while_statement;
    this.stmts = null; // Statement_listContext
    this.exp = null; // ExpressionContext
    return this;
}

Do_while_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Do_while_statementContext.prototype.constructor = Do_while_statementContext;

Do_while_statementContext.prototype.DO = function() {
    return this.getToken(SParser.DO, 0);
};

Do_while_statementContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

Do_while_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Do_while_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Do_while_statementContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

Do_while_statementContext.prototype.WHILE = function() {
    return this.getToken(SParser.WHILE, 0);
};

Do_while_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Do_while_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Do_while_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDo_while_statement(this);
	}
};

Do_while_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDo_while_statement(this);
	}
};




SParser.prototype.do_while_statement = function() {

    var localctx = new Do_while_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SParser.RULE_do_while_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 746;
        this.match(SParser.DO);
        this.state = 747;
        this.match(SParser.COLON);
        this.state = 748; 
        this.indent();
        this.state = 749; 
        localctx.stmts = this.statement_list(0);
        this.state = 750; 
        this.dedent();
        this.state = 751; 
        this.lfp();
        this.state = 752;
        this.match(SParser.WHILE);
        this.state = 753; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function While_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_while_statement;
    this.exp = null; // ExpressionContext
    this.stmts = null; // Statement_listContext
    return this;
}

While_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
While_statementContext.prototype.constructor = While_statementContext;

While_statementContext.prototype.WHILE = function() {
    return this.getToken(SParser.WHILE, 0);
};

While_statementContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

While_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

While_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

While_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

While_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

While_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterWhile_statement(this);
	}
};

While_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitWhile_statement(this);
	}
};




SParser.prototype.while_statement = function() {

    var localctx = new While_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SParser.RULE_while_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 755;
        this.match(SParser.WHILE);
        this.state = 756; 
        localctx.exp = this.expression(0);
        this.state = 757;
        this.match(SParser.COLON);
        this.state = 758; 
        this.indent();
        this.state = 759; 
        localctx.stmts = this.statement_list(0);
        this.state = 760; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function If_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_if_statement;
    this.exp = null; // ExpressionContext
    this.stmts = null; // Statement_listContext
    this.elseIfs = null; // Else_if_statement_listContext
    this.elseStmts = null; // Statement_listContext
    return this;
}

If_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_statementContext.prototype.constructor = If_statementContext;

If_statementContext.prototype.IF = function() {
    return this.getToken(SParser.IF, 0);
};

If_statementContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SParser.COLON);
    } else {
        return this.getToken(SParser.COLON, i);
    }
};


If_statementContext.prototype.indent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndentContext);
    } else {
        return this.getTypedRuleContext(IndentContext,i);
    }
};

If_statementContext.prototype.dedent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DedentContext);
    } else {
        return this.getTypedRuleContext(DedentContext,i);
    }
};

If_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

If_statementContext.prototype.statement_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Statement_listContext);
    } else {
        return this.getTypedRuleContext(Statement_listContext,i);
    }
};

If_statementContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

If_statementContext.prototype.ELSE = function() {
    return this.getToken(SParser.ELSE, 0);
};

If_statementContext.prototype.else_if_statement_list = function() {
    return this.getTypedRuleContext(Else_if_statement_listContext,0);
};

If_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterIf_statement(this);
	}
};

If_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitIf_statement(this);
	}
};




SParser.prototype.if_statement = function() {

    var localctx = new If_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SParser.RULE_if_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 762;
        this.match(SParser.IF);
        this.state = 763; 
        localctx.exp = this.expression(0);
        this.state = 764;
        this.match(SParser.COLON);
        this.state = 765; 
        this.indent();
        this.state = 766; 
        localctx.stmts = this.statement_list(0);
        this.state = 767; 
        this.dedent();
        this.state = 771;
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        if(la_===1) {
            this.state = 768; 
            this.lfp();
            this.state = 769; 
            localctx.elseIfs = this.else_if_statement_list(0);

        }
        this.state = 780;
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        if(la_===1) {
            this.state = 773; 
            this.lfp();
            this.state = 774;
            this.match(SParser.ELSE);
            this.state = 775;
            this.match(SParser.COLON);
            this.state = 776; 
            this.indent();
            this.state = 777; 
            localctx.elseStmts = this.statement_list(0);
            this.state = 778; 
            this.dedent();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Else_if_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_else_if_statement_list;
    return this;
}

Else_if_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Else_if_statement_listContext.prototype.constructor = Else_if_statement_listContext;


 
Else_if_statement_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ElseIfStatementListContext(parser, ctx) {
	Else_if_statement_listContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    this.stmts = null; // Statement_listContext;
    Else_if_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ElseIfStatementListContext.prototype = Object.create(Else_if_statement_listContext.prototype);
ElseIfStatementListContext.prototype.constructor = ElseIfStatementListContext;

ElseIfStatementListContext.prototype.ELSE = function() {
    return this.getToken(SParser.ELSE, 0);
};

ElseIfStatementListContext.prototype.IF = function() {
    return this.getToken(SParser.IF, 0);
};

ElseIfStatementListContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

ElseIfStatementListContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

ElseIfStatementListContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

ElseIfStatementListContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElseIfStatementListContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
ElseIfStatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterElseIfStatementList(this);
	}
};

ElseIfStatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitElseIfStatementList(this);
	}
};


function ElseIfStatementListItemContext(parser, ctx) {
	Else_if_statement_listContext.call(this, parser);
    this.items = null; // Else_if_statement_listContext;
    this.exp = null; // ExpressionContext;
    this.stmts = null; // Statement_listContext;
    Else_if_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ElseIfStatementListItemContext.prototype = Object.create(Else_if_statement_listContext.prototype);
ElseIfStatementListItemContext.prototype.constructor = ElseIfStatementListItemContext;

ElseIfStatementListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

ElseIfStatementListItemContext.prototype.ELSE = function() {
    return this.getToken(SParser.ELSE, 0);
};

ElseIfStatementListItemContext.prototype.IF = function() {
    return this.getToken(SParser.IF, 0);
};

ElseIfStatementListItemContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

ElseIfStatementListItemContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

ElseIfStatementListItemContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

ElseIfStatementListItemContext.prototype.else_if_statement_list = function() {
    return this.getTypedRuleContext(Else_if_statement_listContext,0);
};

ElseIfStatementListItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElseIfStatementListItemContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
ElseIfStatementListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterElseIfStatementListItem(this);
	}
};

ElseIfStatementListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitElseIfStatementListItem(this);
	}
};



SParser.prototype.else_if_statement_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Else_if_statement_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 70;
    this.enterRecursionRule(localctx, 70, SParser.RULE_else_if_statement_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new ElseIfStatementListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 783;
        this.match(SParser.ELSE);
        this.state = 784;
        this.match(SParser.IF);
        this.state = 785; 
        localctx.exp = this.expression(0);
        this.state = 786;
        this.match(SParser.COLON);
        this.state = 787; 
        this.indent();
        this.state = 788; 
        localctx.stmts = this.statement_list(0);
        this.state = 789; 
        this.dedent();
        this._ctx.stop = this._input.LT(-1);
        this.state = 803;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,32,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ElseIfStatementListItemContext(this, new Else_if_statement_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_else_if_statement_list);
                this.state = 791;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 792; 
                this.lfp();
                this.state = 793;
                this.match(SParser.ELSE);
                this.state = 794;
                this.match(SParser.IF);
                this.state = 795; 
                localctx.exp = this.expression(0);
                this.state = 796;
                this.match(SParser.COLON);
                this.state = 797; 
                this.indent();
                this.state = 798; 
                localctx.stmts = this.statement_list(0);
                this.state = 799; 
                this.dedent(); 
            }
            this.state = 805;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,32,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Raise_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_raise_statement;
    this.exp = null; // ExpressionContext
    return this;
}

Raise_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raise_statementContext.prototype.constructor = Raise_statementContext;

Raise_statementContext.prototype.RAISE = function() {
    return this.getToken(SParser.RAISE, 0);
};

Raise_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Raise_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterRaise_statement(this);
	}
};

Raise_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitRaise_statement(this);
	}
};




SParser.prototype.raise_statement = function() {

    var localctx = new Raise_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SParser.RULE_raise_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 806;
        this.match(SParser.RAISE);
        this.state = 807; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Try_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_try_statement;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Statement_listContext
    this.handlers = null; // Catch_statement_listContext
    this.anyStmts = null; // Statement_listContext
    this.finalStmts = null; // Statement_listContext
    return this;
}

Try_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Try_statementContext.prototype.constructor = Try_statementContext;

Try_statementContext.prototype.TRY = function() {
    return this.getToken(SParser.TRY, 0);
};

Try_statementContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SParser.COLON);
    } else {
        return this.getToken(SParser.COLON, i);
    }
};


Try_statementContext.prototype.indent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndentContext);
    } else {
        return this.getTypedRuleContext(IndentContext,i);
    }
};

Try_statementContext.prototype.dedent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DedentContext);
    } else {
        return this.getTypedRuleContext(DedentContext,i);
    }
};

Try_statementContext.prototype.lfs = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfsContext);
    } else {
        return this.getTypedRuleContext(LfsContext,i);
    }
};

Try_statementContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Try_statementContext.prototype.statement_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Statement_listContext);
    } else {
        return this.getTypedRuleContext(Statement_listContext,i);
    }
};

Try_statementContext.prototype.EXCEPT = function() {
    return this.getToken(SParser.EXCEPT, 0);
};

Try_statementContext.prototype.FINALLY = function() {
    return this.getToken(SParser.FINALLY, 0);
};

Try_statementContext.prototype.catch_statement_list = function() {
    return this.getTypedRuleContext(Catch_statement_listContext,0);
};

Try_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterTry_statement(this);
	}
};

Try_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitTry_statement(this);
	}
};




SParser.prototype.try_statement = function() {

    var localctx = new Try_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SParser.RULE_try_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 809;
        this.match(SParser.TRY);
        this.state = 810; 
        localctx.name = this.variable_identifier();
        this.state = 811;
        this.match(SParser.COLON);
        this.state = 812; 
        this.indent();
        this.state = 813; 
        localctx.stmts = this.statement_list(0);
        this.state = 814; 
        this.dedent();
        this.state = 815; 
        this.lfs();
        this.state = 817;
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        if(la_===1) {
            this.state = 816; 
            localctx.handlers = this.catch_statement_list(0);

        }
        this.state = 826;
        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
        if(la_===1) {
            this.state = 819;
            this.match(SParser.EXCEPT);
            this.state = 820;
            this.match(SParser.COLON);
            this.state = 821; 
            this.indent();
            this.state = 822; 
            localctx.anyStmts = this.statement_list(0);
            this.state = 823; 
            this.dedent();
            this.state = 824; 
            this.lfs();

        }
        this.state = 835;
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        if(la_===1) {
            this.state = 828;
            this.match(SParser.FINALLY);
            this.state = 829;
            this.match(SParser.COLON);
            this.state = 830; 
            this.indent();
            this.state = 831; 
            localctx.finalStmts = this.statement_list(0);
            this.state = 832; 
            this.dedent();
            this.state = 833; 
            this.lfs();

        }
        this.state = 837; 
        this.lfs();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Catch_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_catch_statement;
    return this;
}

Catch_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Catch_statementContext.prototype.constructor = Catch_statementContext;


 
Catch_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CatchAtomicStatementContext(parser, ctx) {
	Catch_statementContext.call(this, parser);
    this.name = null; // Symbol_identifierContext;
    this.stmts = null; // Statement_listContext;
    Catch_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CatchAtomicStatementContext.prototype = Object.create(Catch_statementContext.prototype);
CatchAtomicStatementContext.prototype.constructor = CatchAtomicStatementContext;

CatchAtomicStatementContext.prototype.EXCEPT = function() {
    return this.getToken(SParser.EXCEPT, 0);
};

CatchAtomicStatementContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

CatchAtomicStatementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

CatchAtomicStatementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

CatchAtomicStatementContext.prototype.lfs = function() {
    return this.getTypedRuleContext(LfsContext,0);
};

CatchAtomicStatementContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};

CatchAtomicStatementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
CatchAtomicStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCatchAtomicStatement(this);
	}
};

CatchAtomicStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCatchAtomicStatement(this);
	}
};


function CatchCollectionStatementContext(parser, ctx) {
	Catch_statementContext.call(this, parser);
    this.exp = null; // Symbol_listContext;
    this.stmts = null; // Statement_listContext;
    Catch_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CatchCollectionStatementContext.prototype = Object.create(Catch_statementContext.prototype);
CatchCollectionStatementContext.prototype.constructor = CatchCollectionStatementContext;

CatchCollectionStatementContext.prototype.EXCEPT = function() {
    return this.getToken(SParser.EXCEPT, 0);
};

CatchCollectionStatementContext.prototype.IN = function() {
    return this.getToken(SParser.IN, 0);
};

CatchCollectionStatementContext.prototype.LBRAK = function() {
    return this.getToken(SParser.LBRAK, 0);
};

CatchCollectionStatementContext.prototype.RBRAK = function() {
    return this.getToken(SParser.RBRAK, 0);
};

CatchCollectionStatementContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

CatchCollectionStatementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

CatchCollectionStatementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

CatchCollectionStatementContext.prototype.lfs = function() {
    return this.getTypedRuleContext(LfsContext,0);
};

CatchCollectionStatementContext.prototype.symbol_list = function() {
    return this.getTypedRuleContext(Symbol_listContext,0);
};

CatchCollectionStatementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
CatchCollectionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCatchCollectionStatement(this);
	}
};

CatchCollectionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCatchCollectionStatement(this);
	}
};



SParser.prototype.catch_statement = function() {

    var localctx = new Catch_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SParser.RULE_catch_statement);
    try {
        this.state = 858;
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        switch(la_) {
        case 1:
            localctx = new CatchAtomicStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 839;
            this.match(SParser.EXCEPT);
            this.state = 840; 
            localctx.name = this.symbol_identifier();
            this.state = 841;
            this.match(SParser.COLON);
            this.state = 842; 
            this.indent();
            this.state = 843; 
            localctx.stmts = this.statement_list(0);
            this.state = 844; 
            this.dedent();
            this.state = 845; 
            this.lfs();
            break;

        case 2:
            localctx = new CatchCollectionStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 847;
            this.match(SParser.EXCEPT);
            this.state = 848;
            this.match(SParser.IN);
            this.state = 849;
            this.match(SParser.LBRAK);
            this.state = 850; 
            localctx.exp = this.symbol_list(0);
            this.state = 851;
            this.match(SParser.RBRAK);
            this.state = 852;
            this.match(SParser.COLON);
            this.state = 853; 
            this.indent();
            this.state = 854; 
            localctx.stmts = this.statement_list(0);
            this.state = 855; 
            this.dedent();
            this.state = 856; 
            this.lfs();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Return_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_return_statement;
    this.exp = null; // ExpressionContext
    return this;
}

Return_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_statementContext.prototype.constructor = Return_statementContext;

Return_statementContext.prototype.RETURN = function() {
    return this.getToken(SParser.RETURN, 0);
};

Return_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Return_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterReturn_statement(this);
	}
};

Return_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitReturn_statement(this);
	}
};




SParser.prototype.return_statement = function() {

    var localctx = new Return_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, SParser.RULE_return_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 860;
        this.match(SParser.RETURN);
        this.state = 862;
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        if(la_===1) {
            this.state = 861; 
            localctx.exp = this.expression(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function IntDivideExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntDivideExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IntDivideExpressionContext.prototype.constructor = IntDivideExpressionContext;

IntDivideExpressionContext.prototype.idivide = function() {
    return this.getTypedRuleContext(IdivideContext,0);
};

IntDivideExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
IntDivideExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterIntDivideExpression(this);
	}
};

IntDivideExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitIntDivideExpression(this);
	}
};


function TernaryExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.ifTrue = null; // ExpressionContext;
    this.test = null; // ExpressionContext;
    this.ifFalse = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TernaryExpressionContext.prototype = Object.create(ExpressionContext.prototype);
TernaryExpressionContext.prototype.constructor = TernaryExpressionContext;

TernaryExpressionContext.prototype.IF = function() {
    return this.getToken(SParser.IF, 0);
};

TernaryExpressionContext.prototype.ELSE = function() {
    return this.getToken(SParser.ELSE, 0);
};

TernaryExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
TernaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterTernaryExpression(this);
	}
};

TernaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitTernaryExpression(this);
	}
};


function ContainsAllExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ContainsAllExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ContainsAllExpressionContext.prototype.constructor = ContainsAllExpressionContext;

ContainsAllExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(SParser.CONTAINS, 0);
};

ContainsAllExpressionContext.prototype.ALL = function() {
    return this.getToken(SParser.ALL, 0);
};

ContainsAllExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ContainsAllExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterContainsAllExpression(this);
	}
};

ContainsAllExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitContainsAllExpression(this);
	}
};


function NotEqualsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotEqualsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotEqualsExpressionContext.prototype.constructor = NotEqualsExpressionContext;

NotEqualsExpressionContext.prototype.XEQ = function() {
    return this.getToken(SParser.XEQ, 0);
};

NotEqualsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotEqualsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNotEqualsExpression(this);
	}
};

NotEqualsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNotEqualsExpression(this);
	}
};


function InExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InExpressionContext.prototype = Object.create(ExpressionContext.prototype);
InExpressionContext.prototype.constructor = InExpressionContext;

InExpressionContext.prototype.IN = function() {
    return this.getToken(SParser.IN, 0);
};

InExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
InExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterInExpression(this);
	}
};

InExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitInExpression(this);
	}
};


function NotExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotExpressionContext.prototype.constructor = NotExpressionContext;

NotExpressionContext.prototype.NOT = function() {
    return this.getToken(SParser.NOT, 0);
};

NotExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
NotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNotExpression(this);
	}
};

NotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNotExpression(this);
	}
};


function GreaterThanExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GreaterThanExpressionContext.prototype = Object.create(ExpressionContext.prototype);
GreaterThanExpressionContext.prototype.constructor = GreaterThanExpressionContext;

GreaterThanExpressionContext.prototype.GT = function() {
    return this.getToken(SParser.GT, 0);
};

GreaterThanExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
GreaterThanExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterGreaterThanExpression(this);
	}
};

GreaterThanExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitGreaterThanExpression(this);
	}
};


function OrExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OrExpressionContext.prototype = Object.create(ExpressionContext.prototype);
OrExpressionContext.prototype.constructor = OrExpressionContext;

OrExpressionContext.prototype.OR = function() {
    return this.getToken(SParser.OR, 0);
};

OrExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
OrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterOrExpression(this);
	}
};

OrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitOrExpression(this);
	}
};


function CodeExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CodeExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CodeExpressionContext.prototype.constructor = CodeExpressionContext;

CodeExpressionContext.prototype.CODE = function() {
    return this.getToken(SParser.CODE, 0);
};

CodeExpressionContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

CodeExpressionContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

CodeExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
CodeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCodeExpression(this);
	}
};

CodeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCodeExpression(this);
	}
};


function LessThanOrEqualExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LessThanOrEqualExpressionContext.prototype = Object.create(ExpressionContext.prototype);
LessThanOrEqualExpressionContext.prototype.constructor = LessThanOrEqualExpressionContext;

LessThanOrEqualExpressionContext.prototype.LTE = function() {
    return this.getToken(SParser.LTE, 0);
};

LessThanOrEqualExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
LessThanOrEqualExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterLessThanOrEqualExpression(this);
	}
};

LessThanOrEqualExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitLessThanOrEqualExpression(this);
	}
};


function AndExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AndExpressionContext.prototype = Object.create(ExpressionContext.prototype);
AndExpressionContext.prototype.constructor = AndExpressionContext;

AndExpressionContext.prototype.AND = function() {
    return this.getToken(SParser.AND, 0);
};

AndExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
AndExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAndExpression(this);
	}
};

AndExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAndExpression(this);
	}
};


function ClosureExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Closure_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClosureExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ClosureExpressionContext.prototype.constructor = ClosureExpressionContext;

ClosureExpressionContext.prototype.closure_expression = function() {
    return this.getTypedRuleContext(Closure_expressionContext,0);
};
ClosureExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterClosureExpression(this);
	}
};

ClosureExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitClosureExpression(this);
	}
};


function NotContainsAnyExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotContainsAnyExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotContainsAnyExpressionContext.prototype.constructor = NotContainsAnyExpressionContext;

NotContainsAnyExpressionContext.prototype.NOT = function() {
    return this.getToken(SParser.NOT, 0);
};

NotContainsAnyExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(SParser.CONTAINS, 0);
};

NotContainsAnyExpressionContext.prototype.ANY = function() {
    return this.getToken(SParser.ANY, 0);
};

NotContainsAnyExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotContainsAnyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNotContainsAnyExpression(this);
	}
};

NotContainsAnyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNotContainsAnyExpression(this);
	}
};


function ContainsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ContainsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ContainsExpressionContext.prototype.constructor = ContainsExpressionContext;

ContainsExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(SParser.CONTAINS, 0);
};

ContainsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ContainsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterContainsExpression(this);
	}
};

ContainsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitContainsExpression(this);
	}
};


function NotContainsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotContainsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotContainsExpressionContext.prototype.constructor = NotContainsExpressionContext;

NotContainsExpressionContext.prototype.NOT = function() {
    return this.getToken(SParser.NOT, 0);
};

NotContainsExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(SParser.CONTAINS, 0);
};

NotContainsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotContainsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNotContainsExpression(this);
	}
};

NotContainsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNotContainsExpression(this);
	}
};


function MultiplyExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiplyExpressionContext.prototype = Object.create(ExpressionContext.prototype);
MultiplyExpressionContext.prototype.constructor = MultiplyExpressionContext;

MultiplyExpressionContext.prototype.multiply = function() {
    return this.getTypedRuleContext(MultiplyContext,0);
};

MultiplyExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
MultiplyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMultiplyExpression(this);
	}
};

MultiplyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMultiplyExpression(this);
	}
};


function RoughlyEqualsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RoughlyEqualsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
RoughlyEqualsExpressionContext.prototype.constructor = RoughlyEqualsExpressionContext;

RoughlyEqualsExpressionContext.prototype.TEQ = function() {
    return this.getToken(SParser.TEQ, 0);
};

RoughlyEqualsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
RoughlyEqualsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterRoughlyEqualsExpression(this);
	}
};

RoughlyEqualsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitRoughlyEqualsExpression(this);
	}
};


function ExecuteExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExecuteExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ExecuteExpressionContext.prototype.constructor = ExecuteExpressionContext;

ExecuteExpressionContext.prototype.EXECUTE = function() {
    return this.getToken(SParser.EXECUTE, 0);
};

ExecuteExpressionContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

ExecuteExpressionContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

ExecuteExpressionContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
ExecuteExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterExecuteExpression(this);
	}
};

ExecuteExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitExecuteExpression(this);
	}
};


function MethodExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Method_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodExpressionContext.prototype = Object.create(ExpressionContext.prototype);
MethodExpressionContext.prototype.constructor = MethodExpressionContext;

MethodExpressionContext.prototype.method_expression = function() {
    return this.getTypedRuleContext(Method_expressionContext,0);
};
MethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMethodExpression(this);
	}
};

MethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMethodExpression(this);
	}
};


function GreaterThanOrEqualExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GreaterThanOrEqualExpressionContext.prototype = Object.create(ExpressionContext.prototype);
GreaterThanOrEqualExpressionContext.prototype.constructor = GreaterThanOrEqualExpressionContext;

GreaterThanOrEqualExpressionContext.prototype.GTE = function() {
    return this.getToken(SParser.GTE, 0);
};

GreaterThanOrEqualExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
GreaterThanOrEqualExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterGreaterThanOrEqualExpression(this);
	}
};

GreaterThanOrEqualExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitGreaterThanOrEqualExpression(this);
	}
};


function NotInExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotInExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotInExpressionContext.prototype.constructor = NotInExpressionContext;

NotInExpressionContext.prototype.NOT = function() {
    return this.getToken(SParser.NOT, 0);
};

NotInExpressionContext.prototype.IN = function() {
    return this.getToken(SParser.IN, 0);
};

NotInExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotInExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNotInExpression(this);
	}
};

NotInExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNotInExpression(this);
	}
};


function IsNotExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // Is_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsNotExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IsNotExpressionContext.prototype.constructor = IsNotExpressionContext;

IsNotExpressionContext.prototype.IS = function() {
    return this.getToken(SParser.IS, 0);
};

IsNotExpressionContext.prototype.NOT = function() {
    return this.getToken(SParser.NOT, 0);
};

IsNotExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IsNotExpressionContext.prototype.is_expression = function() {
    return this.getTypedRuleContext(Is_expressionContext,0);
};
IsNotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterIsNotExpression(this);
	}
};

IsNotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitIsNotExpression(this);
	}
};


function DivideExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DivideExpressionContext.prototype = Object.create(ExpressionContext.prototype);
DivideExpressionContext.prototype.constructor = DivideExpressionContext;

DivideExpressionContext.prototype.divide = function() {
    return this.getTypedRuleContext(DivideContext,0);
};

DivideExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
DivideExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDivideExpression(this);
	}
};

DivideExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDivideExpression(this);
	}
};


function IsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // Is_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IsExpressionContext.prototype.constructor = IsExpressionContext;

IsExpressionContext.prototype.IS = function() {
    return this.getToken(SParser.IS, 0);
};

IsExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IsExpressionContext.prototype.is_expression = function() {
    return this.getTypedRuleContext(Is_expressionContext,0);
};
IsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterIsExpression(this);
	}
};

IsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitIsExpression(this);
	}
};


function MinusExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MinusExpressionContext.prototype = Object.create(ExpressionContext.prototype);
MinusExpressionContext.prototype.constructor = MinusExpressionContext;

MinusExpressionContext.prototype.MINUS = function() {
    return this.getToken(SParser.MINUS, 0);
};

MinusExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
MinusExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMinusExpression(this);
	}
};

MinusExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMinusExpression(this);
	}
};


function AddExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.op = null; // Token;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AddExpressionContext.prototype = Object.create(ExpressionContext.prototype);
AddExpressionContext.prototype.constructor = AddExpressionContext;

AddExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AddExpressionContext.prototype.PLUS = function() {
    return this.getToken(SParser.PLUS, 0);
};

AddExpressionContext.prototype.MINUS = function() {
    return this.getToken(SParser.MINUS, 0);
};
AddExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAddExpression(this);
	}
};

AddExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAddExpression(this);
	}
};


function NotContainsAllExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotContainsAllExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotContainsAllExpressionContext.prototype.constructor = NotContainsAllExpressionContext;

NotContainsAllExpressionContext.prototype.NOT = function() {
    return this.getToken(SParser.NOT, 0);
};

NotContainsAllExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(SParser.CONTAINS, 0);
};

NotContainsAllExpressionContext.prototype.ALL = function() {
    return this.getToken(SParser.ALL, 0);
};

NotContainsAllExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotContainsAllExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNotContainsAllExpression(this);
	}
};

NotContainsAllExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNotContainsAllExpression(this);
	}
};


function InstanceExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Instance_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstanceExpressionContext.prototype = Object.create(ExpressionContext.prototype);
InstanceExpressionContext.prototype.constructor = InstanceExpressionContext;

InstanceExpressionContext.prototype.instance_expression = function() {
    return this.getTypedRuleContext(Instance_expressionContext,0);
};
InstanceExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterInstanceExpression(this);
	}
};

InstanceExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitInstanceExpression(this);
	}
};


function ContainsAnyExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ContainsAnyExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ContainsAnyExpressionContext.prototype.constructor = ContainsAnyExpressionContext;

ContainsAnyExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(SParser.CONTAINS, 0);
};

ContainsAnyExpressionContext.prototype.ANY = function() {
    return this.getToken(SParser.ANY, 0);
};

ContainsAnyExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ContainsAnyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterContainsAnyExpression(this);
	}
};

ContainsAnyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitContainsAnyExpression(this);
	}
};


function CastExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // Category_or_any_typeContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CastExpressionContext.prototype.constructor = CastExpressionContext;

CastExpressionContext.prototype.AS = function() {
    return this.getToken(SParser.AS, 0);
};

CastExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CastExpressionContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};
CastExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCastExpression(this);
	}
};

CastExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCastExpression(this);
	}
};


function ModuloExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ModuloExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ModuloExpressionContext.prototype.constructor = ModuloExpressionContext;

ModuloExpressionContext.prototype.modulo = function() {
    return this.getTypedRuleContext(ModuloContext,0);
};

ModuloExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ModuloExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterModuloExpression(this);
	}
};

ModuloExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitModuloExpression(this);
	}
};


function LessThanExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LessThanExpressionContext.prototype = Object.create(ExpressionContext.prototype);
LessThanExpressionContext.prototype.constructor = LessThanExpressionContext;

LessThanExpressionContext.prototype.LT = function() {
    return this.getToken(SParser.LT, 0);
};

LessThanExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
LessThanExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterLessThanExpression(this);
	}
};

LessThanExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitLessThanExpression(this);
	}
};


function EqualsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
EqualsExpressionContext.prototype.constructor = EqualsExpressionContext;

EqualsExpressionContext.prototype.EQ2 = function() {
    return this.getToken(SParser.EQ2, 0);
};

EqualsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
EqualsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterEqualsExpression(this);
	}
};

EqualsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitEqualsExpression(this);
	}
};



SParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 80;
    this.enterRecursionRule(localctx, 80, SParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 882;
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MinusExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 865;
            this.match(SParser.MINUS);
            this.state = 866; 
            localctx.exp = this.expression(31);
            break;

        case 2:
            localctx = new NotExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 867;
            this.match(SParser.NOT);
            this.state = 868; 
            localctx.exp = this.expression(30);
            break;

        case 3:
            localctx = new InstanceExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 869; 
            localctx.exp = this.instance_expression(0);
            break;

        case 4:
            localctx = new MethodExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 870; 
            localctx.exp = this.method_expression();
            break;

        case 5:
            localctx = new CodeExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 871;
            this.match(SParser.CODE);
            this.state = 872;
            this.match(SParser.LPAR);
            this.state = 873; 
            localctx.exp = this.expression(0);
            this.state = 874;
            this.match(SParser.RPAR);
            break;

        case 6:
            localctx = new ExecuteExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 876;
            this.match(SParser.EXECUTE);
            this.state = 877;
            this.match(SParser.LPAR);
            this.state = 878; 
            localctx.name = this.variable_identifier();
            this.state = 879;
            this.match(SParser.RPAR);
            break;

        case 7:
            localctx = new ClosureExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 881; 
            localctx.exp = this.closure_expression();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 980;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 978;
                var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new MultiplyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 884;
                    if (!( this.precpred(this._ctx, 29))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 29)");
                    }
                    this.state = 885; 
                    this.multiply();
                    this.state = 886; 
                    localctx.right = this.expression(30);
                    break;

                case 2:
                    localctx = new DivideExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 888;
                    if (!( this.precpred(this._ctx, 28))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
                    }
                    this.state = 889; 
                    this.divide();
                    this.state = 890; 
                    localctx.right = this.expression(29);
                    break;

                case 3:
                    localctx = new ModuloExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 892;
                    if (!( this.precpred(this._ctx, 27))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
                    }
                    this.state = 893; 
                    this.modulo();
                    this.state = 894; 
                    localctx.right = this.expression(28);
                    break;

                case 4:
                    localctx = new IntDivideExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 896;
                    if (!( this.precpred(this._ctx, 26))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
                    }
                    this.state = 897; 
                    this.idivide();
                    this.state = 898; 
                    localctx.right = this.expression(27);
                    break;

                case 5:
                    localctx = new AddExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 900;
                    if (!( this.precpred(this._ctx, 25))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                    }
                    this.state = 901;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===SParser.PLUS || _la===SParser.MINUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    this.consume();
                    this.state = 902; 
                    localctx.right = this.expression(26);
                    break;

                case 6:
                    localctx = new LessThanExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 903;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 904;
                    this.match(SParser.LT);
                    this.state = 905; 
                    localctx.right = this.expression(25);
                    break;

                case 7:
                    localctx = new LessThanOrEqualExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 906;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 907;
                    this.match(SParser.LTE);
                    this.state = 908; 
                    localctx.right = this.expression(24);
                    break;

                case 8:
                    localctx = new GreaterThanExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 909;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 910;
                    this.match(SParser.GT);
                    this.state = 911; 
                    localctx.right = this.expression(23);
                    break;

                case 9:
                    localctx = new GreaterThanOrEqualExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 912;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 913;
                    this.match(SParser.GTE);
                    this.state = 914; 
                    localctx.right = this.expression(22);
                    break;

                case 10:
                    localctx = new EqualsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 915;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 916;
                    this.match(SParser.EQ2);
                    this.state = 917; 
                    localctx.right = this.expression(19);
                    break;

                case 11:
                    localctx = new NotEqualsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 918;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 919;
                    this.match(SParser.XEQ);
                    this.state = 920; 
                    localctx.right = this.expression(18);
                    break;

                case 12:
                    localctx = new RoughlyEqualsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 921;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 922;
                    this.match(SParser.TEQ);
                    this.state = 923; 
                    localctx.right = this.expression(17);
                    break;

                case 13:
                    localctx = new OrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 924;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 925;
                    this.match(SParser.OR);
                    this.state = 926; 
                    localctx.right = this.expression(16);
                    break;

                case 14:
                    localctx = new AndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 927;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 928;
                    this.match(SParser.AND);
                    this.state = 929; 
                    localctx.right = this.expression(15);
                    break;

                case 15:
                    localctx = new TernaryExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.ifTrue = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 930;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 931;
                    this.match(SParser.IF);
                    this.state = 932; 
                    localctx.test = this.expression(0);
                    this.state = 933;
                    this.match(SParser.ELSE);
                    this.state = 934; 
                    localctx.ifFalse = this.expression(14);
                    break;

                case 16:
                    localctx = new InExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 936;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 937;
                    this.match(SParser.IN);
                    this.state = 938; 
                    localctx.right = this.expression(12);
                    break;

                case 17:
                    localctx = new ContainsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 939;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 940;
                    this.match(SParser.CONTAINS);
                    this.state = 941; 
                    localctx.right = this.expression(11);
                    break;

                case 18:
                    localctx = new ContainsAllExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 942;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 943;
                    this.match(SParser.CONTAINS);
                    this.state = 944;
                    this.match(SParser.ALL);
                    this.state = 945; 
                    localctx.right = this.expression(10);
                    break;

                case 19:
                    localctx = new ContainsAnyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 946;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 947;
                    this.match(SParser.CONTAINS);
                    this.state = 948;
                    this.match(SParser.ANY);
                    this.state = 949; 
                    localctx.right = this.expression(9);
                    break;

                case 20:
                    localctx = new NotInExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 950;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 951;
                    this.match(SParser.NOT);
                    this.state = 952;
                    this.match(SParser.IN);
                    this.state = 953; 
                    localctx.right = this.expression(8);
                    break;

                case 21:
                    localctx = new NotContainsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 954;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 955;
                    this.match(SParser.NOT);
                    this.state = 956;
                    this.match(SParser.CONTAINS);
                    this.state = 957; 
                    localctx.right = this.expression(7);
                    break;

                case 22:
                    localctx = new NotContainsAllExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 958;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 959;
                    this.match(SParser.NOT);
                    this.state = 960;
                    this.match(SParser.CONTAINS);
                    this.state = 961;
                    this.match(SParser.ALL);
                    this.state = 962; 
                    localctx.right = this.expression(6);
                    break;

                case 23:
                    localctx = new NotContainsAnyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 963;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 964;
                    this.match(SParser.NOT);
                    this.state = 965;
                    this.match(SParser.CONTAINS);
                    this.state = 966;
                    this.match(SParser.ANY);
                    this.state = 967; 
                    localctx.right = this.expression(5);
                    break;

                case 24:
                    localctx = new IsNotExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 968;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 969;
                    this.match(SParser.IS);
                    this.state = 970;
                    this.match(SParser.NOT);
                    this.state = 971; 
                    localctx.right = this.is_expression();
                    break;

                case 25:
                    localctx = new IsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 972;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 973;
                    this.match(SParser.IS);
                    this.state = 974; 
                    localctx.right = this.is_expression();
                    break;

                case 26:
                    localctx = new CastExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression);
                    this.state = 975;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 976;
                    this.match(SParser.AS);
                    this.state = 977; 
                    localctx.right = this.category_or_any_type();
                    break;

                } 
            }
            this.state = 982;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Closure_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_closure_expression;
    this.name = null; // Type_identifierContext
    return this;
}

Closure_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Closure_expressionContext.prototype.constructor = Closure_expressionContext;

Closure_expressionContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Closure_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterClosure_expression(this);
	}
};

Closure_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitClosure_expression(this);
	}
};




SParser.prototype.closure_expression = function() {

    var localctx = new Closure_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SParser.RULE_closure_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 983; 
        localctx.name = this.type_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Instance_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_instance_expression;
    return this;
}

Instance_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Instance_expressionContext.prototype.constructor = Instance_expressionContext;


 
Instance_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function SelectorExpressionContext(parser, ctx) {
	Instance_expressionContext.call(this, parser);
    this.parent = null; // Instance_expressionContext;
    this.selector = null; // Instance_selectorContext;
    Instance_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectorExpressionContext.prototype = Object.create(Instance_expressionContext.prototype);
SelectorExpressionContext.prototype.constructor = SelectorExpressionContext;

SelectorExpressionContext.prototype.instance_expression = function() {
    return this.getTypedRuleContext(Instance_expressionContext,0);
};

SelectorExpressionContext.prototype.instance_selector = function() {
    return this.getTypedRuleContext(Instance_selectorContext,0);
};
SelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSelectorExpression(this);
	}
};

SelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSelectorExpression(this);
	}
};


function SelectableExpressionContext(parser, ctx) {
	Instance_expressionContext.call(this, parser);
    this.parent = null; // Selectable_expressionContext;
    Instance_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectableExpressionContext.prototype = Object.create(Instance_expressionContext.prototype);
SelectableExpressionContext.prototype.constructor = SelectableExpressionContext;

SelectableExpressionContext.prototype.selectable_expression = function() {
    return this.getTypedRuleContext(Selectable_expressionContext,0);
};
SelectableExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSelectableExpression(this);
	}
};

SelectableExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSelectableExpression(this);
	}
};



SParser.prototype.instance_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Instance_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 84;
    this.enterRecursionRule(localctx, 84, SParser.RULE_instance_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new SelectableExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 986; 
        localctx.parent = this.selectable_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 992;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new SelectorExpressionContext(this, new Instance_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_instance_expression);
                this.state = 988;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 989; 
                localctx.selector = this.instance_selector(); 
            }
            this.state = 994;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_method_expression;
    return this;
}

Method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_expressionContext.prototype.constructor = Method_expressionContext;


 
Method_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ReadExpressionContext(parser, ctx) {
	Method_expressionContext.call(this, parser);
    this.exp = null; // Read_expressionContext;
    Method_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReadExpressionContext.prototype = Object.create(Method_expressionContext.prototype);
ReadExpressionContext.prototype.constructor = ReadExpressionContext;

ReadExpressionContext.prototype.read_expression = function() {
    return this.getTypedRuleContext(Read_expressionContext,0);
};
ReadExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterReadExpression(this);
	}
};

ReadExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitReadExpression(this);
	}
};


function MethodCallExpressionContext(parser, ctx) {
	Method_expressionContext.call(this, parser);
    this.exp = null; // Method_callContext;
    Method_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodCallExpressionContext.prototype = Object.create(Method_expressionContext.prototype);
MethodCallExpressionContext.prototype.constructor = MethodCallExpressionContext;

MethodCallExpressionContext.prototype.method_call = function() {
    return this.getTypedRuleContext(Method_callContext,0);
};
MethodCallExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMethodCallExpression(this);
	}
};

MethodCallExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMethodCallExpression(this);
	}
};


function FetchExpressionContext(parser, ctx) {
	Method_expressionContext.call(this, parser);
    this.exp = null; // Fetch_expressionContext;
    Method_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FetchExpressionContext.prototype = Object.create(Method_expressionContext.prototype);
FetchExpressionContext.prototype.constructor = FetchExpressionContext;

FetchExpressionContext.prototype.fetch_expression = function() {
    return this.getTypedRuleContext(Fetch_expressionContext,0);
};
FetchExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterFetchExpression(this);
	}
};

FetchExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitFetchExpression(this);
	}
};


function ConstructorExpressionContext(parser, ctx) {
	Method_expressionContext.call(this, parser);
    this.exp = null; // Constructor_expressionContext;
    Method_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstructorExpressionContext.prototype = Object.create(Method_expressionContext.prototype);
ConstructorExpressionContext.prototype.constructor = ConstructorExpressionContext;

ConstructorExpressionContext.prototype.constructor_expression = function() {
    return this.getTypedRuleContext(Constructor_expressionContext,0);
};
ConstructorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterConstructorExpression(this);
	}
};

ConstructorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitConstructorExpression(this);
	}
};


function DocumentExpressionContext(parser, ctx) {
	Method_expressionContext.call(this, parser);
    this.exp = null; // Document_expressionContext;
    Method_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocumentExpressionContext.prototype = Object.create(Method_expressionContext.prototype);
DocumentExpressionContext.prototype.constructor = DocumentExpressionContext;

DocumentExpressionContext.prototype.document_expression = function() {
    return this.getTypedRuleContext(Document_expressionContext,0);
};
DocumentExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDocumentExpression(this);
	}
};

DocumentExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDocumentExpression(this);
	}
};


function SortedExpressionContext(parser, ctx) {
	Method_expressionContext.call(this, parser);
    this.exp = null; // Sorted_expressionContext;
    Method_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SortedExpressionContext.prototype = Object.create(Method_expressionContext.prototype);
SortedExpressionContext.prototype.constructor = SortedExpressionContext;

SortedExpressionContext.prototype.sorted_expression = function() {
    return this.getTypedRuleContext(Sorted_expressionContext,0);
};
SortedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSortedExpression(this);
	}
};

SortedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSortedExpression(this);
	}
};



SParser.prototype.method_expression = function() {

    var localctx = new Method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, SParser.RULE_method_expression);
    try {
        this.state = 1001;
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        switch(la_) {
        case 1:
            localctx = new DocumentExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 995; 
            localctx.exp = this.document_expression();
            break;

        case 2:
            localctx = new FetchExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 996; 
            localctx.exp = this.fetch_expression();
            break;

        case 3:
            localctx = new ReadExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 997; 
            localctx.exp = this.read_expression();
            break;

        case 4:
            localctx = new SortedExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 998; 
            localctx.exp = this.sorted_expression();
            break;

        case 5:
            localctx = new MethodCallExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 999; 
            localctx.exp = this.method_call();
            break;

        case 6:
            localctx = new ConstructorExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1000; 
            localctx.exp = this.constructor_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Instance_selectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_instance_selector;
    return this;
}

Instance_selectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Instance_selectorContext.prototype.constructor = Instance_selectorContext;


 
Instance_selectorContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SliceSelectorContext(parser, ctx) {
	Instance_selectorContext.call(this, parser);
    this.xslice = null; // Slice_argumentsContext;
    Instance_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceSelectorContext.prototype = Object.create(Instance_selectorContext.prototype);
SliceSelectorContext.prototype.constructor = SliceSelectorContext;

SliceSelectorContext.prototype.LBRAK = function() {
    return this.getToken(SParser.LBRAK, 0);
};

SliceSelectorContext.prototype.RBRAK = function() {
    return this.getToken(SParser.RBRAK, 0);
};

SliceSelectorContext.prototype.slice_arguments = function() {
    return this.getTypedRuleContext(Slice_argumentsContext,0);
};
SliceSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSliceSelector(this);
	}
};

SliceSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSliceSelector(this);
	}
};


function MemberSelectorContext(parser, ctx) {
	Instance_selectorContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    Instance_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberSelectorContext.prototype = Object.create(Instance_selectorContext.prototype);
MemberSelectorContext.prototype.constructor = MemberSelectorContext;

MemberSelectorContext.prototype.DOT = function() {
    return this.getToken(SParser.DOT, 0);
};

MemberSelectorContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
MemberSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMemberSelector(this);
	}
};

MemberSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMemberSelector(this);
	}
};


function ItemSelectorContext(parser, ctx) {
	Instance_selectorContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Instance_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ItemSelectorContext.prototype = Object.create(Instance_selectorContext.prototype);
ItemSelectorContext.prototype.constructor = ItemSelectorContext;

ItemSelectorContext.prototype.LBRAK = function() {
    return this.getToken(SParser.LBRAK, 0);
};

ItemSelectorContext.prototype.RBRAK = function() {
    return this.getToken(SParser.RBRAK, 0);
};

ItemSelectorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ItemSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterItemSelector(this);
	}
};

ItemSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitItemSelector(this);
	}
};



SParser.prototype.instance_selector = function() {

    var localctx = new Instance_selectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SParser.RULE_instance_selector);
    try {
        this.state = 1016;
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MemberSelectorContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1003;
            if (!( this.wasNot(SParser.WS))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
            }
            this.state = 1004;
            this.match(SParser.DOT);
            this.state = 1005; 
            localctx.name = this.variable_identifier();
            break;

        case 2:
            localctx = new SliceSelectorContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1006;
            if (!( this.wasNot(SParser.WS))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
            }
            this.state = 1007;
            this.match(SParser.LBRAK);
            this.state = 1008; 
            localctx.xslice = this.slice_arguments();
            this.state = 1009;
            this.match(SParser.RBRAK);
            break;

        case 3:
            localctx = new ItemSelectorContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1011;
            if (!( this.wasNot(SParser.WS))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
            }
            this.state = 1012;
            this.match(SParser.LBRAK);
            this.state = 1013; 
            localctx.exp = this.expression(0);
            this.state = 1014;
            this.match(SParser.RBRAK);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Document_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_document_expression;
    return this;
}

Document_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Document_expressionContext.prototype.constructor = Document_expressionContext;

Document_expressionContext.prototype.document_type = function() {
    return this.getTypedRuleContext(Document_typeContext,0);
};

Document_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDocument_expression(this);
	}
};

Document_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDocument_expression(this);
	}
};




SParser.prototype.document_expression = function() {

    var localctx = new Document_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SParser.RULE_document_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1018; 
        this.document_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constructor_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_constructor_expression;
    this.typ = null; // Category_typeContext
    this.args = null; // Argument_assignment_listContext
    return this;
}

Constructor_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constructor_expressionContext.prototype.constructor = Constructor_expressionContext;

Constructor_expressionContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Constructor_expressionContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Constructor_expressionContext.prototype.category_type = function() {
    return this.getTypedRuleContext(Category_typeContext,0);
};

Constructor_expressionContext.prototype.MUTABLE = function() {
    return this.getToken(SParser.MUTABLE, 0);
};

Constructor_expressionContext.prototype.argument_assignment_list = function() {
    return this.getTypedRuleContext(Argument_assignment_listContext,0);
};

Constructor_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterConstructor_expression(this);
	}
};

Constructor_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitConstructor_expression(this);
	}
};




SParser.prototype.constructor_expression = function() {

    var localctx = new Constructor_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SParser.RULE_constructor_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1021;
        _la = this._input.LA(1);
        if(_la===SParser.MUTABLE) {
            this.state = 1020;
            this.match(SParser.MUTABLE);
        }

        this.state = 1023; 
        localctx.typ = this.category_type();
        this.state = 1024;
        this.match(SParser.LPAR);
        this.state = 1026;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SParser.LPAR) | (1 << SParser.LBRAK) | (1 << SParser.LCURL))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SParser.MINUS - 32)) | (1 << (SParser.LT - 32)) | (1 << (SParser.CODE - 32)) | (1 << (SParser.DOCUMENT - 32)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (SParser.EXECUTE - 87)) | (1 << (SParser.FETCH - 87)) | (1 << (SParser.MUTABLE - 87)) | (1 << (SParser.NONE - 87)) | (1 << (SParser.NOT - 87)) | (1 << (SParser.READ - 87)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (SParser.SELF - 121)) | (1 << (SParser.SORTED - 121)) | (1 << (SParser.THIS - 121)) | (1 << (SParser.BOOLEAN_LITERAL - 121)) | (1 << (SParser.CHAR_LITERAL - 121)) | (1 << (SParser.MIN_INTEGER - 121)) | (1 << (SParser.MAX_INTEGER - 121)) | (1 << (SParser.SYMBOL_IDENTIFIER - 121)) | (1 << (SParser.TYPE_IDENTIFIER - 121)) | (1 << (SParser.VARIABLE_IDENTIFIER - 121)) | (1 << (SParser.TEXT_LITERAL - 121)) | (1 << (SParser.INTEGER_LITERAL - 121)) | (1 << (SParser.HEXA_LITERAL - 121)) | (1 << (SParser.DECIMAL_LITERAL - 121)) | (1 << (SParser.DATETIME_LITERAL - 121)) | (1 << (SParser.TIME_LITERAL - 121)) | (1 << (SParser.DATE_LITERAL - 121)) | (1 << (SParser.PERIOD_LITERAL - 121)))) !== 0)) {
            this.state = 1025; 
            localctx.args = this.argument_assignment_list(0);
        }

        this.state = 1028;
        this.match(SParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Argument_assignment_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_argument_assignment_list;
    return this;
}

Argument_assignment_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_assignment_listContext.prototype.constructor = Argument_assignment_listContext;


 
Argument_assignment_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ExpressionAssignmentListContext(parser, ctx) {
	Argument_assignment_listContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Argument_assignment_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExpressionAssignmentListContext.prototype = Object.create(Argument_assignment_listContext.prototype);
ExpressionAssignmentListContext.prototype.constructor = ExpressionAssignmentListContext;

ExpressionAssignmentListContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ExpressionAssignmentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterExpressionAssignmentList(this);
	}
};

ExpressionAssignmentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitExpressionAssignmentList(this);
	}
};


function ArgumentAssignmentListContext(parser, ctx) {
	Argument_assignment_listContext.call(this, parser);
    this.item = null; // Argument_assignmentContext;
    Argument_assignment_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentAssignmentListContext.prototype = Object.create(Argument_assignment_listContext.prototype);
ArgumentAssignmentListContext.prototype.constructor = ArgumentAssignmentListContext;

ArgumentAssignmentListContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};
ArgumentAssignmentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterArgumentAssignmentList(this);
	}
};

ArgumentAssignmentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitArgumentAssignmentList(this);
	}
};


function ArgumentAssignmentListItemContext(parser, ctx) {
	Argument_assignment_listContext.call(this, parser);
    this.items = null; // Argument_assignment_listContext;
    this.item = null; // Argument_assignmentContext;
    Argument_assignment_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentAssignmentListItemContext.prototype = Object.create(Argument_assignment_listContext.prototype);
ArgumentAssignmentListItemContext.prototype.constructor = ArgumentAssignmentListItemContext;

ArgumentAssignmentListItemContext.prototype.COMMA = function() {
    return this.getToken(SParser.COMMA, 0);
};

ArgumentAssignmentListItemContext.prototype.argument_assignment_list = function() {
    return this.getTypedRuleContext(Argument_assignment_listContext,0);
};

ArgumentAssignmentListItemContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};
ArgumentAssignmentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterArgumentAssignmentListItem(this);
	}
};

ArgumentAssignmentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitArgumentAssignmentListItem(this);
	}
};



SParser.prototype.argument_assignment_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Argument_assignment_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 94;
    this.enterRecursionRule(localctx, 94, SParser.RULE_argument_assignment_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1035;
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ExpressionAssignmentListContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1031; 
            localctx.exp = this.expression(0);
            this.state = 1032;
            if (!( this.willNotBe(this.equalToken()))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.willNotBe($parser.equalToken())");
            }
            break;

        case 2:
            localctx = new ArgumentAssignmentListContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1034; 
            localctx.item = this.argument_assignment();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1042;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,47,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ArgumentAssignmentListItemContext(this, new Argument_assignment_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_argument_assignment_list);
                this.state = 1037;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1038;
                this.match(SParser.COMMA);
                this.state = 1039; 
                localctx.item = this.argument_assignment(); 
            }
            this.state = 1044;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,47,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Argument_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_argument_assignment;
    this.name = null; // Variable_identifierContext
    this.exp = null; // ExpressionContext
    return this;
}

Argument_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_assignmentContext.prototype.constructor = Argument_assignmentContext;

Argument_assignmentContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Argument_assignmentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Argument_assignmentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Argument_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterArgument_assignment(this);
	}
};

Argument_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitArgument_assignment(this);
	}
};




SParser.prototype.argument_assignment = function() {

    var localctx = new Argument_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SParser.RULE_argument_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1045; 
        localctx.name = this.variable_identifier();
        this.state = 1046; 
        this.assign();
        this.state = 1047; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Read_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_read_expression;
    this.source = null; // ExpressionContext
    return this;
}

Read_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Read_expressionContext.prototype.constructor = Read_expressionContext;

Read_expressionContext.prototype.READ = function() {
    return this.getToken(SParser.READ, 0);
};

Read_expressionContext.prototype.FROM = function() {
    return this.getToken(SParser.FROM, 0);
};

Read_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Read_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterRead_expression(this);
	}
};

Read_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitRead_expression(this);
	}
};




SParser.prototype.read_expression = function() {

    var localctx = new Read_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SParser.RULE_read_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1049;
        this.match(SParser.READ);
        this.state = 1050;
        this.match(SParser.FROM);
        this.state = 1051; 
        localctx.source = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Write_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_write_statement;
    this.what = null; // ExpressionContext
    this.target = null; // ExpressionContext
    return this;
}

Write_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Write_statementContext.prototype.constructor = Write_statementContext;

Write_statementContext.prototype.WRITE = function() {
    return this.getToken(SParser.WRITE, 0);
};

Write_statementContext.prototype.TO = function() {
    return this.getToken(SParser.TO, 0);
};

Write_statementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Write_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterWrite_statement(this);
	}
};

Write_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitWrite_statement(this);
	}
};




SParser.prototype.write_statement = function() {

    var localctx = new Write_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SParser.RULE_write_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1053;
        this.match(SParser.WRITE);
        this.state = 1054; 
        localctx.what = this.expression(0);
        this.state = 1055;
        this.match(SParser.TO);
        this.state = 1056; 
        localctx.target = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fetch_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_fetch_expression;
    this.name = null; // Variable_identifierContext
    this.source = null; // ExpressionContext
    this.xfilter = null; // ExpressionContext
    return this;
}

Fetch_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fetch_expressionContext.prototype.constructor = Fetch_expressionContext;

Fetch_expressionContext.prototype.FETCH = function() {
    return this.getToken(SParser.FETCH, 0);
};

Fetch_expressionContext.prototype.FROM = function() {
    return this.getToken(SParser.FROM, 0);
};

Fetch_expressionContext.prototype.WHERE = function() {
    return this.getToken(SParser.WHERE, 0);
};

Fetch_expressionContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Fetch_expressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Fetch_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterFetch_expression(this);
	}
};

Fetch_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitFetch_expression(this);
	}
};




SParser.prototype.fetch_expression = function() {

    var localctx = new Fetch_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SParser.RULE_fetch_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1058;
        this.match(SParser.FETCH);
        this.state = 1059; 
        localctx.name = this.variable_identifier();
        this.state = 1060;
        this.match(SParser.FROM);
        this.state = 1061; 
        localctx.source = this.expression(0);
        this.state = 1062;
        this.match(SParser.WHERE);
        this.state = 1063; 
        localctx.xfilter = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sorted_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_sorted_expression;
    this.source = null; // Instance_expressionContext
    this.key = null; // Instance_expressionContext
    return this;
}

Sorted_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sorted_expressionContext.prototype.constructor = Sorted_expressionContext;

Sorted_expressionContext.prototype.SORTED = function() {
    return this.getToken(SParser.SORTED, 0);
};

Sorted_expressionContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Sorted_expressionContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Sorted_expressionContext.prototype.instance_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Instance_expressionContext);
    } else {
        return this.getTypedRuleContext(Instance_expressionContext,i);
    }
};

Sorted_expressionContext.prototype.COMMA = function() {
    return this.getToken(SParser.COMMA, 0);
};

Sorted_expressionContext.prototype.key_token = function() {
    return this.getTypedRuleContext(Key_tokenContext,0);
};

Sorted_expressionContext.prototype.EQ = function() {
    return this.getToken(SParser.EQ, 0);
};

Sorted_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSorted_expression(this);
	}
};

Sorted_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSorted_expression(this);
	}
};




SParser.prototype.sorted_expression = function() {

    var localctx = new Sorted_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SParser.RULE_sorted_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1065;
        this.match(SParser.SORTED);
        this.state = 1066;
        this.match(SParser.LPAR);
        this.state = 1067; 
        localctx.source = this.instance_expression(0);
        this.state = 1073;
        _la = this._input.LA(1);
        if(_la===SParser.COMMA) {
            this.state = 1068;
            this.match(SParser.COMMA);
            this.state = 1069; 
            this.key_token();
            this.state = 1070;
            this.match(SParser.EQ);
            this.state = 1071; 
            localctx.key = this.instance_expression(0);
        }

        this.state = 1075;
        this.match(SParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assign_instance_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_assign_instance_statement;
    this.inst = null; // Assignable_instanceContext
    this.exp = null; // ExpressionContext
    return this;
}

Assign_instance_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assign_instance_statementContext.prototype.constructor = Assign_instance_statementContext;

Assign_instance_statementContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Assign_instance_statementContext.prototype.assignable_instance = function() {
    return this.getTypedRuleContext(Assignable_instanceContext,0);
};

Assign_instance_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Assign_instance_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAssign_instance_statement(this);
	}
};

Assign_instance_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAssign_instance_statement(this);
	}
};




SParser.prototype.assign_instance_statement = function() {

    var localctx = new Assign_instance_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SParser.RULE_assign_instance_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1077; 
        localctx.inst = this.assignable_instance(0);
        this.state = 1078; 
        this.assign();
        this.state = 1079; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Child_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_child_instance;
    return this;
}

Child_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Child_instanceContext.prototype.constructor = Child_instanceContext;


 
Child_instanceContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MemberInstanceContext(parser, ctx) {
	Child_instanceContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    Child_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberInstanceContext.prototype = Object.create(Child_instanceContext.prototype);
MemberInstanceContext.prototype.constructor = MemberInstanceContext;

MemberInstanceContext.prototype.DOT = function() {
    return this.getToken(SParser.DOT, 0);
};

MemberInstanceContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
MemberInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMemberInstance(this);
	}
};

MemberInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMemberInstance(this);
	}
};


function ItemInstanceContext(parser, ctx) {
	Child_instanceContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Child_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ItemInstanceContext.prototype = Object.create(Child_instanceContext.prototype);
ItemInstanceContext.prototype.constructor = ItemInstanceContext;

ItemInstanceContext.prototype.LBRAK = function() {
    return this.getToken(SParser.LBRAK, 0);
};

ItemInstanceContext.prototype.RBRAK = function() {
    return this.getToken(SParser.RBRAK, 0);
};

ItemInstanceContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ItemInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterItemInstance(this);
	}
};

ItemInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitItemInstance(this);
	}
};



SParser.prototype.child_instance = function() {

    var localctx = new Child_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SParser.RULE_child_instance);
    try {
        this.state = 1089;
        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MemberInstanceContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1081;
            if (!( this.wasNot(SParser.WS))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
            }
            this.state = 1082;
            this.match(SParser.DOT);
            this.state = 1083; 
            localctx.name = this.variable_identifier();
            break;

        case 2:
            localctx = new ItemInstanceContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1084;
            if (!( this.wasNot(SParser.WS))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(SParser.WS)");
            }
            this.state = 1085;
            this.match(SParser.LBRAK);
            this.state = 1086; 
            localctx.exp = this.expression(0);
            this.state = 1087;
            this.match(SParser.RBRAK);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assign_tuple_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_assign_tuple_statement;
    this.items = null; // Variable_identifier_listContext
    this.exp = null; // ExpressionContext
    return this;
}

Assign_tuple_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assign_tuple_statementContext.prototype.constructor = Assign_tuple_statementContext;

Assign_tuple_statementContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Assign_tuple_statementContext.prototype.variable_identifier_list = function() {
    return this.getTypedRuleContext(Variable_identifier_listContext,0);
};

Assign_tuple_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Assign_tuple_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAssign_tuple_statement(this);
	}
};

Assign_tuple_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAssign_tuple_statement(this);
	}
};




SParser.prototype.assign_tuple_statement = function() {

    var localctx = new Assign_tuple_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SParser.RULE_assign_tuple_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1091; 
        localctx.items = this.variable_identifier_list(0);
        this.state = 1092; 
        this.assign();
        this.state = 1093; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LfsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_lfs;
    return this;
}

LfsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LfsContext.prototype.constructor = LfsContext;

LfsContext.prototype.LF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SParser.LF);
    } else {
        return this.getToken(SParser.LF, i);
    }
};


LfsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterLfs(this);
	}
};

LfsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitLfs(this);
	}
};




SParser.prototype.lfs = function() {

    var localctx = new LfsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SParser.RULE_lfs);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1098;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,50,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1095;
                this.match(SParser.LF); 
            }
            this.state = 1100;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,50,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LfpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_lfp;
    return this;
}

LfpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LfpContext.prototype.constructor = LfpContext;

LfpContext.prototype.LF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SParser.LF);
    } else {
        return this.getToken(SParser.LF, i);
    }
};


LfpContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterLfp(this);
	}
};

LfpContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitLfp(this);
	}
};




SParser.prototype.lfp = function() {

    var localctx = new LfpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SParser.RULE_lfp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1102; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1101;
            this.match(SParser.LF);
            this.state = 1104; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SParser.LF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_indent;
    return this;
}

IndentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndentContext.prototype.constructor = IndentContext;

IndentContext.prototype.INDENT = function() {
    return this.getToken(SParser.INDENT, 0);
};

IndentContext.prototype.LF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SParser.LF);
    } else {
        return this.getToken(SParser.LF, i);
    }
};


IndentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterIndent(this);
	}
};

IndentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitIndent(this);
	}
};




SParser.prototype.indent = function() {

    var localctx = new IndentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, SParser.RULE_indent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1107; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1106;
            this.match(SParser.LF);
            this.state = 1109; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SParser.LF);
        this.state = 1111;
        this.match(SParser.INDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DedentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_dedent;
    return this;
}

DedentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DedentContext.prototype.constructor = DedentContext;

DedentContext.prototype.DEDENT = function() {
    return this.getToken(SParser.DEDENT, 0);
};

DedentContext.prototype.LF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SParser.LF);
    } else {
        return this.getToken(SParser.LF, i);
    }
};


DedentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDedent(this);
	}
};

DedentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDedent(this);
	}
};




SParser.prototype.dedent = function() {

    var localctx = new DedentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SParser.RULE_dedent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1116;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SParser.LF) {
            this.state = 1113;
            this.match(SParser.LF);
            this.state = 1118;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1119;
        this.match(SParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Null_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_null_literal;
    return this;
}

Null_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Null_literalContext.prototype.constructor = Null_literalContext;

Null_literalContext.prototype.NONE = function() {
    return this.getToken(SParser.NONE, 0);
};

Null_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNull_literal(this);
	}
};

Null_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNull_literal(this);
	}
};




SParser.prototype.null_literal = function() {

    var localctx = new Null_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SParser.RULE_null_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1121;
        this.match(SParser.NONE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declaration_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_declaration_list;
    return this;
}

Declaration_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declaration_listContext.prototype.constructor = Declaration_listContext;


 
Declaration_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FullDeclarationListContext(parser, ctx) {
	Declaration_listContext.call(this, parser);
    this.items = null; // DeclarationsContext;
    Declaration_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FullDeclarationListContext.prototype = Object.create(Declaration_listContext.prototype);
FullDeclarationListContext.prototype.constructor = FullDeclarationListContext;

FullDeclarationListContext.prototype.lfs = function() {
    return this.getTypedRuleContext(LfsContext,0);
};

FullDeclarationListContext.prototype.EOF = function() {
    return this.getToken(SParser.EOF, 0);
};

FullDeclarationListContext.prototype.declarations = function() {
    return this.getTypedRuleContext(DeclarationsContext,0);
};
FullDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterFullDeclarationList(this);
	}
};

FullDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitFullDeclarationList(this);
	}
};



SParser.prototype.declaration_list = function() {

    var localctx = new Declaration_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SParser.RULE_declaration_list);
    var _la = 0; // Token type
    try {
        localctx = new FullDeclarationListContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1124;
        _la = this._input.LA(1);
        if(((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (SParser.ABSTRACT - 61)) | (1 << (SParser.ATTR - 61)) | (1 << (SParser.CATEGORY - 61)) | (1 << (SParser.CLASS - 61)) | (1 << (SParser.DEF - 61)) | (1 << (SParser.ENUM - 61)))) !== 0) || _la===SParser.NATIVE || _la===SParser.SINGLETON) {
            this.state = 1123; 
            localctx.items = this.declarations(0);
        }

        this.state = 1126; 
        this.lfs();
        this.state = 1127;
        this.match(SParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_declarations;
    return this;
}

DeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationsContext.prototype.constructor = DeclarationsContext;


 
DeclarationsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function DeclarationListItemContext(parser, ctx) {
	DeclarationsContext.call(this, parser);
    this.items = null; // DeclarationsContext;
    this.item = null; // DeclarationContext;
    DeclarationsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DeclarationListItemContext.prototype = Object.create(DeclarationsContext.prototype);
DeclarationListItemContext.prototype.constructor = DeclarationListItemContext;

DeclarationListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

DeclarationListItemContext.prototype.declarations = function() {
    return this.getTypedRuleContext(DeclarationsContext,0);
};

DeclarationListItemContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};
DeclarationListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDeclarationListItem(this);
	}
};

DeclarationListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDeclarationListItem(this);
	}
};


function DeclarationListContext(parser, ctx) {
	DeclarationsContext.call(this, parser);
    this.item = null; // DeclarationContext;
    DeclarationsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DeclarationListContext.prototype = Object.create(DeclarationsContext.prototype);
DeclarationListContext.prototype.constructor = DeclarationListContext;

DeclarationListContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};
DeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDeclarationList(this);
	}
};

DeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDeclarationList(this);
	}
};



SParser.prototype.declarations = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new DeclarationsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 124;
    this.enterRecursionRule(localctx, 124, SParser.RULE_declarations, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new DeclarationListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1130; 
        localctx.item = this.declaration();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1138;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new DeclarationListItemContext(this, new DeclarationsContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_declarations);
                this.state = 1132;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1133; 
                this.lfp();
                this.state = 1134; 
                localctx.item = this.declaration(); 
            }
            this.state = 1140;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;


 
DeclarationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ResourceDeclarationContext(parser, ctx) {
	DeclarationContext.call(this, parser);
    this.decl = null; // Resource_declarationContext;
    DeclarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ResourceDeclarationContext.prototype = Object.create(DeclarationContext.prototype);
ResourceDeclarationContext.prototype.constructor = ResourceDeclarationContext;

ResourceDeclarationContext.prototype.resource_declaration = function() {
    return this.getTypedRuleContext(Resource_declarationContext,0);
};
ResourceDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterResourceDeclaration(this);
	}
};

ResourceDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitResourceDeclaration(this);
	}
};


function MethodDeclarationContext(parser, ctx) {
	DeclarationContext.call(this, parser);
    this.decl = null; // Method_declarationContext;
    DeclarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodDeclarationContext.prototype = Object.create(DeclarationContext.prototype);
MethodDeclarationContext.prototype.constructor = MethodDeclarationContext;

MethodDeclarationContext.prototype.method_declaration = function() {
    return this.getTypedRuleContext(Method_declarationContext,0);
};
MethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMethodDeclaration(this);
	}
};

MethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMethodDeclaration(this);
	}
};


function CategoryDeclarationContext(parser, ctx) {
	DeclarationContext.call(this, parser);
    this.decl = null; // Category_declarationContext;
    DeclarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CategoryDeclarationContext.prototype = Object.create(DeclarationContext.prototype);
CategoryDeclarationContext.prototype.constructor = CategoryDeclarationContext;

CategoryDeclarationContext.prototype.category_declaration = function() {
    return this.getTypedRuleContext(Category_declarationContext,0);
};
CategoryDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCategoryDeclaration(this);
	}
};

CategoryDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCategoryDeclaration(this);
	}
};


function AttributeDeclarationContext(parser, ctx) {
	DeclarationContext.call(this, parser);
    this.decl = null; // Attribute_declarationContext;
    DeclarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AttributeDeclarationContext.prototype = Object.create(DeclarationContext.prototype);
AttributeDeclarationContext.prototype.constructor = AttributeDeclarationContext;

AttributeDeclarationContext.prototype.attribute_declaration = function() {
    return this.getTypedRuleContext(Attribute_declarationContext,0);
};
AttributeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAttributeDeclaration(this);
	}
};

AttributeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAttributeDeclaration(this);
	}
};


function EnumDeclarationContext(parser, ctx) {
	DeclarationContext.call(this, parser);
    this.decl = null; // Enum_declarationContext;
    DeclarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EnumDeclarationContext.prototype = Object.create(DeclarationContext.prototype);
EnumDeclarationContext.prototype.constructor = EnumDeclarationContext;

EnumDeclarationContext.prototype.enum_declaration = function() {
    return this.getTypedRuleContext(Enum_declarationContext,0);
};
EnumDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterEnumDeclaration(this);
	}
};

EnumDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitEnumDeclaration(this);
	}
};



SParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, SParser.RULE_declaration);
    try {
        this.state = 1146;
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AttributeDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1141; 
            localctx.decl = this.attribute_declaration();
            break;

        case 2:
            localctx = new CategoryDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1142; 
            localctx.decl = this.category_declaration();
            break;

        case 3:
            localctx = new ResourceDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1143; 
            localctx.decl = this.resource_declaration();
            break;

        case 4:
            localctx = new EnumDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1144; 
            localctx.decl = this.enum_declaration();
            break;

        case 5:
            localctx = new MethodDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1145; 
            localctx.decl = this.method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Resource_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_resource_declaration;
    this.decl = null; // Native_resource_declarationContext
    return this;
}

Resource_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Resource_declarationContext.prototype.constructor = Resource_declarationContext;

Resource_declarationContext.prototype.native_resource_declaration = function() {
    return this.getTypedRuleContext(Native_resource_declarationContext,0);
};

Resource_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterResource_declaration(this);
	}
};

Resource_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitResource_declaration(this);
	}
};




SParser.prototype.resource_declaration = function() {

    var localctx = new Resource_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, SParser.RULE_resource_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1148; 
        localctx.decl = this.native_resource_declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enum_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_enum_declaration;
    return this;
}

Enum_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_declarationContext.prototype.constructor = Enum_declarationContext;


 
Enum_declarationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function EnumCategoryDeclarationContext(parser, ctx) {
	Enum_declarationContext.call(this, parser);
    this.decl = null; // Enum_category_declarationContext;
    Enum_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EnumCategoryDeclarationContext.prototype = Object.create(Enum_declarationContext.prototype);
EnumCategoryDeclarationContext.prototype.constructor = EnumCategoryDeclarationContext;

EnumCategoryDeclarationContext.prototype.enum_category_declaration = function() {
    return this.getTypedRuleContext(Enum_category_declarationContext,0);
};
EnumCategoryDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterEnumCategoryDeclaration(this);
	}
};

EnumCategoryDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitEnumCategoryDeclaration(this);
	}
};


function EnumNativeDeclarationContext(parser, ctx) {
	Enum_declarationContext.call(this, parser);
    this.decl = null; // Enum_native_declarationContext;
    Enum_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EnumNativeDeclarationContext.prototype = Object.create(Enum_declarationContext.prototype);
EnumNativeDeclarationContext.prototype.constructor = EnumNativeDeclarationContext;

EnumNativeDeclarationContext.prototype.enum_native_declaration = function() {
    return this.getTypedRuleContext(Enum_native_declarationContext,0);
};
EnumNativeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterEnumNativeDeclaration(this);
	}
};

EnumNativeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitEnumNativeDeclaration(this);
	}
};



SParser.prototype.enum_declaration = function() {

    var localctx = new Enum_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, SParser.RULE_enum_declaration);
    try {
        this.state = 1152;
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        switch(la_) {
        case 1:
            localctx = new EnumCategoryDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1150; 
            localctx.decl = this.enum_category_declaration();
            break;

        case 2:
            localctx = new EnumNativeDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1151; 
            localctx.decl = this.enum_native_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_symbol_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_native_symbol_list;
    return this;
}

Native_symbol_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_symbol_listContext.prototype.constructor = Native_symbol_listContext;


 
Native_symbol_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function NativeSymbolListContext(parser, ctx) {
	Native_symbol_listContext.call(this, parser);
    this.item = null; // Native_symbolContext;
    Native_symbol_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeSymbolListContext.prototype = Object.create(Native_symbol_listContext.prototype);
NativeSymbolListContext.prototype.constructor = NativeSymbolListContext;

NativeSymbolListContext.prototype.native_symbol = function() {
    return this.getTypedRuleContext(Native_symbolContext,0);
};
NativeSymbolListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNativeSymbolList(this);
	}
};

NativeSymbolListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNativeSymbolList(this);
	}
};


function NativeSymbolListItemContext(parser, ctx) {
	Native_symbol_listContext.call(this, parser);
    this.items = null; // Native_symbol_listContext;
    this.item = null; // Native_symbolContext;
    Native_symbol_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeSymbolListItemContext.prototype = Object.create(Native_symbol_listContext.prototype);
NativeSymbolListItemContext.prototype.constructor = NativeSymbolListItemContext;

NativeSymbolListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

NativeSymbolListItemContext.prototype.native_symbol_list = function() {
    return this.getTypedRuleContext(Native_symbol_listContext,0);
};

NativeSymbolListItemContext.prototype.native_symbol = function() {
    return this.getTypedRuleContext(Native_symbolContext,0);
};
NativeSymbolListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNativeSymbolListItem(this);
	}
};

NativeSymbolListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNativeSymbolListItem(this);
	}
};



SParser.prototype.native_symbol_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Native_symbol_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 132;
    this.enterRecursionRule(localctx, 132, SParser.RULE_native_symbol_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new NativeSymbolListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1155; 
        localctx.item = this.native_symbol();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1163;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new NativeSymbolListItemContext(this, new Native_symbol_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_native_symbol_list);
                this.state = 1157;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1158; 
                this.lfp();
                this.state = 1159; 
                localctx.item = this.native_symbol(); 
            }
            this.state = 1165;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Category_symbol_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_category_symbol_list;
    return this;
}

Category_symbol_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_symbol_listContext.prototype.constructor = Category_symbol_listContext;


 
Category_symbol_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CategorySymbolListItemContext(parser, ctx) {
	Category_symbol_listContext.call(this, parser);
    this.items = null; // Category_symbol_listContext;
    this.item = null; // Category_symbolContext;
    Category_symbol_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CategorySymbolListItemContext.prototype = Object.create(Category_symbol_listContext.prototype);
CategorySymbolListItemContext.prototype.constructor = CategorySymbolListItemContext;

CategorySymbolListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

CategorySymbolListItemContext.prototype.category_symbol_list = function() {
    return this.getTypedRuleContext(Category_symbol_listContext,0);
};

CategorySymbolListItemContext.prototype.category_symbol = function() {
    return this.getTypedRuleContext(Category_symbolContext,0);
};
CategorySymbolListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCategorySymbolListItem(this);
	}
};

CategorySymbolListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCategorySymbolListItem(this);
	}
};


function CategorySymbolListContext(parser, ctx) {
	Category_symbol_listContext.call(this, parser);
    this.item = null; // Category_symbolContext;
    Category_symbol_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CategorySymbolListContext.prototype = Object.create(Category_symbol_listContext.prototype);
CategorySymbolListContext.prototype.constructor = CategorySymbolListContext;

CategorySymbolListContext.prototype.category_symbol = function() {
    return this.getTypedRuleContext(Category_symbolContext,0);
};
CategorySymbolListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCategorySymbolList(this);
	}
};

CategorySymbolListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCategorySymbolList(this);
	}
};



SParser.prototype.category_symbol_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Category_symbol_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 134;
    this.enterRecursionRule(localctx, 134, SParser.RULE_category_symbol_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new CategorySymbolListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1167; 
        localctx.item = this.category_symbol();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1175;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,59,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CategorySymbolListItemContext(this, new Category_symbol_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_category_symbol_list);
                this.state = 1169;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1170; 
                this.lfp();
                this.state = 1171; 
                localctx.item = this.category_symbol(); 
            }
            this.state = 1177;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,59,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Symbol_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_symbol_list;
    return this;
}

Symbol_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Symbol_listContext.prototype.constructor = Symbol_listContext;


 
Symbol_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function SymbolListContext(parser, ctx) {
	Symbol_listContext.call(this, parser);
    this.item = null; // Symbol_identifierContext;
    Symbol_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SymbolListContext.prototype = Object.create(Symbol_listContext.prototype);
SymbolListContext.prototype.constructor = SymbolListContext;

SymbolListContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};
SymbolListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSymbolList(this);
	}
};

SymbolListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSymbolList(this);
	}
};


function SymbolListItemContext(parser, ctx) {
	Symbol_listContext.call(this, parser);
    this.items = null; // Symbol_listContext;
    this.item = null; // Symbol_identifierContext;
    Symbol_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SymbolListItemContext.prototype = Object.create(Symbol_listContext.prototype);
SymbolListItemContext.prototype.constructor = SymbolListItemContext;

SymbolListItemContext.prototype.COMMA = function() {
    return this.getToken(SParser.COMMA, 0);
};

SymbolListItemContext.prototype.symbol_list = function() {
    return this.getTypedRuleContext(Symbol_listContext,0);
};

SymbolListItemContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};
SymbolListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSymbolListItem(this);
	}
};

SymbolListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSymbolListItem(this);
	}
};



SParser.prototype.symbol_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Symbol_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 136;
    this.enterRecursionRule(localctx, 136, SParser.RULE_symbol_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new SymbolListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1179; 
        localctx.item = this.symbol_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1186;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new SymbolListItemContext(this, new Symbol_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_symbol_list);
                this.state = 1181;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1182;
                this.match(SParser.COMMA);
                this.state = 1183; 
                localctx.item = this.symbol_identifier(); 
            }
            this.state = 1188;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Attribute_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_attribute_constraint;
    return this;
}

Attribute_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_constraintContext.prototype.constructor = Attribute_constraintContext;


 
Attribute_constraintContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MatchingSetContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.source = null; // Set_literalContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingSetContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingSetContext.prototype.constructor = MatchingSetContext;

MatchingSetContext.prototype.IN = function() {
    return this.getToken(SParser.IN, 0);
};

MatchingSetContext.prototype.set_literal = function() {
    return this.getTypedRuleContext(Set_literalContext,0);
};
MatchingSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMatchingSet(this);
	}
};

MatchingSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMatchingSet(this);
	}
};


function MatchingPatternContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.text = null; // Token;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingPatternContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingPatternContext.prototype.constructor = MatchingPatternContext;

MatchingPatternContext.prototype.MATCHING = function() {
    return this.getToken(SParser.MATCHING, 0);
};

MatchingPatternContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(SParser.TEXT_LITERAL, 0);
};
MatchingPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMatchingPattern(this);
	}
};

MatchingPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMatchingPattern(this);
	}
};


function MatchingListContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.source = null; // List_literalContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingListContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingListContext.prototype.constructor = MatchingListContext;

MatchingListContext.prototype.IN = function() {
    return this.getToken(SParser.IN, 0);
};

MatchingListContext.prototype.list_literal = function() {
    return this.getTypedRuleContext(List_literalContext,0);
};
MatchingListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMatchingList(this);
	}
};

MatchingListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMatchingList(this);
	}
};


function MatchingRangeContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.source = null; // Range_literalContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingRangeContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingRangeContext.prototype.constructor = MatchingRangeContext;

MatchingRangeContext.prototype.IN = function() {
    return this.getToken(SParser.IN, 0);
};

MatchingRangeContext.prototype.range_literal = function() {
    return this.getTypedRuleContext(Range_literalContext,0);
};
MatchingRangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMatchingRange(this);
	}
};

MatchingRangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMatchingRange(this);
	}
};


function MatchingExpressionContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingExpressionContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingExpressionContext.prototype.constructor = MatchingExpressionContext;

MatchingExpressionContext.prototype.MATCHING = function() {
    return this.getToken(SParser.MATCHING, 0);
};

MatchingExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
MatchingExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMatchingExpression(this);
	}
};

MatchingExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMatchingExpression(this);
	}
};



SParser.prototype.attribute_constraint = function() {

    var localctx = new Attribute_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, SParser.RULE_attribute_constraint);
    try {
        this.state = 1199;
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MatchingListContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1189;
            this.match(SParser.IN);
            this.state = 1190; 
            localctx.source = this.list_literal();
            break;

        case 2:
            localctx = new MatchingSetContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1191;
            this.match(SParser.IN);
            this.state = 1192; 
            localctx.source = this.set_literal();
            break;

        case 3:
            localctx = new MatchingRangeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1193;
            this.match(SParser.IN);
            this.state = 1194; 
            localctx.source = this.range_literal();
            break;

        case 4:
            localctx = new MatchingPatternContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1195;
            this.match(SParser.MATCHING);
            this.state = 1196;
            localctx.text = this.match(SParser.TEXT_LITERAL);
            break;

        case 5:
            localctx = new MatchingExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1197;
            this.match(SParser.MATCHING);
            this.state = 1198; 
            localctx.exp = this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function List_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_list_literal;
    this.items = null; // Expression_listContext
    return this;
}

List_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_literalContext.prototype.constructor = List_literalContext;

List_literalContext.prototype.LBRAK = function() {
    return this.getToken(SParser.LBRAK, 0);
};

List_literalContext.prototype.RBRAK = function() {
    return this.getToken(SParser.RBRAK, 0);
};

List_literalContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

List_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterList_literal(this);
	}
};

List_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitList_literal(this);
	}
};




SParser.prototype.list_literal = function() {

    var localctx = new List_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, SParser.RULE_list_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1201;
        this.match(SParser.LBRAK);
        this.state = 1203;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SParser.LPAR) | (1 << SParser.LBRAK) | (1 << SParser.LCURL))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SParser.MINUS - 32)) | (1 << (SParser.LT - 32)) | (1 << (SParser.CODE - 32)) | (1 << (SParser.DOCUMENT - 32)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (SParser.EXECUTE - 87)) | (1 << (SParser.FETCH - 87)) | (1 << (SParser.MUTABLE - 87)) | (1 << (SParser.NONE - 87)) | (1 << (SParser.NOT - 87)) | (1 << (SParser.READ - 87)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (SParser.SELF - 121)) | (1 << (SParser.SORTED - 121)) | (1 << (SParser.THIS - 121)) | (1 << (SParser.BOOLEAN_LITERAL - 121)) | (1 << (SParser.CHAR_LITERAL - 121)) | (1 << (SParser.MIN_INTEGER - 121)) | (1 << (SParser.MAX_INTEGER - 121)) | (1 << (SParser.SYMBOL_IDENTIFIER - 121)) | (1 << (SParser.TYPE_IDENTIFIER - 121)) | (1 << (SParser.VARIABLE_IDENTIFIER - 121)) | (1 << (SParser.TEXT_LITERAL - 121)) | (1 << (SParser.INTEGER_LITERAL - 121)) | (1 << (SParser.HEXA_LITERAL - 121)) | (1 << (SParser.DECIMAL_LITERAL - 121)) | (1 << (SParser.DATETIME_LITERAL - 121)) | (1 << (SParser.TIME_LITERAL - 121)) | (1 << (SParser.DATE_LITERAL - 121)) | (1 << (SParser.PERIOD_LITERAL - 121)))) !== 0)) {
            this.state = 1202; 
            localctx.items = this.expression_list(0);
        }

        this.state = 1205;
        this.match(SParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_set_literal;
    this.items = null; // Expression_listContext
    return this;
}

Set_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_literalContext.prototype.constructor = Set_literalContext;

Set_literalContext.prototype.LT = function() {
    return this.getToken(SParser.LT, 0);
};

Set_literalContext.prototype.GT = function() {
    return this.getToken(SParser.GT, 0);
};

Set_literalContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Set_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSet_literal(this);
	}
};

Set_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSet_literal(this);
	}
};




SParser.prototype.set_literal = function() {

    var localctx = new Set_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, SParser.RULE_set_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1207;
        this.match(SParser.LT);
        this.state = 1209;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SParser.LPAR) | (1 << SParser.LBRAK) | (1 << SParser.LCURL))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SParser.MINUS - 32)) | (1 << (SParser.LT - 32)) | (1 << (SParser.CODE - 32)) | (1 << (SParser.DOCUMENT - 32)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (SParser.EXECUTE - 87)) | (1 << (SParser.FETCH - 87)) | (1 << (SParser.MUTABLE - 87)) | (1 << (SParser.NONE - 87)) | (1 << (SParser.NOT - 87)) | (1 << (SParser.READ - 87)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (SParser.SELF - 121)) | (1 << (SParser.SORTED - 121)) | (1 << (SParser.THIS - 121)) | (1 << (SParser.BOOLEAN_LITERAL - 121)) | (1 << (SParser.CHAR_LITERAL - 121)) | (1 << (SParser.MIN_INTEGER - 121)) | (1 << (SParser.MAX_INTEGER - 121)) | (1 << (SParser.SYMBOL_IDENTIFIER - 121)) | (1 << (SParser.TYPE_IDENTIFIER - 121)) | (1 << (SParser.VARIABLE_IDENTIFIER - 121)) | (1 << (SParser.TEXT_LITERAL - 121)) | (1 << (SParser.INTEGER_LITERAL - 121)) | (1 << (SParser.HEXA_LITERAL - 121)) | (1 << (SParser.DECIMAL_LITERAL - 121)) | (1 << (SParser.DATETIME_LITERAL - 121)) | (1 << (SParser.TIME_LITERAL - 121)) | (1 << (SParser.DATE_LITERAL - 121)) | (1 << (SParser.PERIOD_LITERAL - 121)))) !== 0)) {
            this.state = 1208; 
            localctx.items = this.expression_list(0);
        }

        this.state = 1211;
        this.match(SParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_expression_list;
    return this;
}

Expression_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_listContext.prototype.constructor = Expression_listContext;


 
Expression_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ValueListContext(parser, ctx) {
	Expression_listContext.call(this, parser);
    this.item = null; // ExpressionContext;
    Expression_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValueListContext.prototype = Object.create(Expression_listContext.prototype);
ValueListContext.prototype.constructor = ValueListContext;

ValueListContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ValueListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterValueList(this);
	}
};

ValueListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitValueList(this);
	}
};


function ValueListItemContext(parser, ctx) {
	Expression_listContext.call(this, parser);
    this.items = null; // Expression_listContext;
    this.item = null; // ExpressionContext;
    Expression_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValueListItemContext.prototype = Object.create(Expression_listContext.prototype);
ValueListItemContext.prototype.constructor = ValueListItemContext;

ValueListItemContext.prototype.COMMA = function() {
    return this.getToken(SParser.COMMA, 0);
};

ValueListItemContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

ValueListItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ValueListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterValueListItem(this);
	}
};

ValueListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitValueListItem(this);
	}
};



SParser.prototype.expression_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Expression_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 144;
    this.enterRecursionRule(localctx, 144, SParser.RULE_expression_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new ValueListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1214; 
        localctx.item = this.expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1221;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ValueListItemContext(this, new Expression_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression_list);
                this.state = 1216;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1217;
                this.match(SParser.COMMA);
                this.state = 1218; 
                localctx.item = this.expression(0); 
            }
            this.state = 1223;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Range_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_range_literal;
    this.low = null; // ExpressionContext
    this.high = null; // ExpressionContext
    return this;
}

Range_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Range_literalContext.prototype.constructor = Range_literalContext;

Range_literalContext.prototype.LBRAK = function() {
    return this.getToken(SParser.LBRAK, 0);
};

Range_literalContext.prototype.RANGE = function() {
    return this.getToken(SParser.RANGE, 0);
};

Range_literalContext.prototype.RBRAK = function() {
    return this.getToken(SParser.RBRAK, 0);
};

Range_literalContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Range_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterRange_literal(this);
	}
};

Range_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitRange_literal(this);
	}
};




SParser.prototype.range_literal = function() {

    var localctx = new Range_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, SParser.RULE_range_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1224;
        this.match(SParser.LBRAK);
        this.state = 1225; 
        localctx.low = this.expression(0);
        this.state = 1226;
        this.match(SParser.RANGE);
        this.state = 1227; 
        localctx.high = this.expression(0);
        this.state = 1228;
        this.match(SParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypedefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_typedef;
    return this;
}

TypedefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedefContext.prototype.constructor = TypedefContext;


 
TypedefContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function SetTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.s = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetTypeContext.prototype = Object.create(TypedefContext.prototype);
SetTypeContext.prototype.constructor = SetTypeContext;

SetTypeContext.prototype.LTGT = function() {
    return this.getToken(SParser.LTGT, 0);
};

SetTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
SetTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSetType(this);
	}
};

SetTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSetType(this);
	}
};


function ListTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.l = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListTypeContext.prototype = Object.create(TypedefContext.prototype);
ListTypeContext.prototype.constructor = ListTypeContext;

ListTypeContext.prototype.LBRAK = function() {
    return this.getToken(SParser.LBRAK, 0);
};

ListTypeContext.prototype.RBRAK = function() {
    return this.getToken(SParser.RBRAK, 0);
};

ListTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
ListTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterListType(this);
	}
};

ListTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitListType(this);
	}
};


function DictTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.d = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DictTypeContext.prototype = Object.create(TypedefContext.prototype);
DictTypeContext.prototype.constructor = DictTypeContext;

DictTypeContext.prototype.LCURL = function() {
    return this.getToken(SParser.LCURL, 0);
};

DictTypeContext.prototype.RCURL = function() {
    return this.getToken(SParser.RCURL, 0);
};

DictTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
DictTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDictType(this);
	}
};

DictTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDictType(this);
	}
};


function PrimaryTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.p = null; // Primary_typeContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrimaryTypeContext.prototype = Object.create(TypedefContext.prototype);
PrimaryTypeContext.prototype.constructor = PrimaryTypeContext;

PrimaryTypeContext.prototype.primary_type = function() {
    return this.getTypedRuleContext(Primary_typeContext,0);
};
PrimaryTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPrimaryType(this);
	}
};

PrimaryTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPrimaryType(this);
	}
};



SParser.prototype.typedef = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypedefContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 148;
    this.enterRecursionRule(localctx, 148, SParser.RULE_typedef, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new PrimaryTypeContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1231; 
        localctx.p = this.primary_type();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1243;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,66,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1241;
                var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new SetTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
                    localctx.s = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_typedef);
                    this.state = 1233;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1234;
                    this.match(SParser.LTGT);
                    break;

                case 2:
                    localctx = new ListTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
                    localctx.l = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_typedef);
                    this.state = 1235;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1236;
                    this.match(SParser.LBRAK);
                    this.state = 1237;
                    this.match(SParser.RBRAK);
                    break;

                case 3:
                    localctx = new DictTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
                    localctx.d = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_typedef);
                    this.state = 1238;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1239;
                    this.match(SParser.LCURL);
                    this.state = 1240;
                    this.match(SParser.RCURL);
                    break;

                } 
            }
            this.state = 1245;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,66,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Primary_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_primary_type;
    return this;
}

Primary_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Primary_typeContext.prototype.constructor = Primary_typeContext;


 
Primary_typeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function NativeTypeContext(parser, ctx) {
	Primary_typeContext.call(this, parser);
    this.n = null; // Native_typeContext;
    Primary_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeTypeContext.prototype = Object.create(Primary_typeContext.prototype);
NativeTypeContext.prototype.constructor = NativeTypeContext;

NativeTypeContext.prototype.native_type = function() {
    return this.getTypedRuleContext(Native_typeContext,0);
};
NativeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNativeType(this);
	}
};

NativeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNativeType(this);
	}
};


function CategoryTypeContext(parser, ctx) {
	Primary_typeContext.call(this, parser);
    this.c = null; // Category_typeContext;
    Primary_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CategoryTypeContext.prototype = Object.create(Primary_typeContext.prototype);
CategoryTypeContext.prototype.constructor = CategoryTypeContext;

CategoryTypeContext.prototype.category_type = function() {
    return this.getTypedRuleContext(Category_typeContext,0);
};
CategoryTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCategoryType(this);
	}
};

CategoryTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCategoryType(this);
	}
};



SParser.prototype.primary_type = function() {

    var localctx = new Primary_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, SParser.RULE_primary_type);
    try {
        this.state = 1248;
        switch(this._input.LA(1)) {
        case SParser.BOOLEAN:
        case SParser.CHARACTER:
        case SParser.TEXT:
        case SParser.INTEGER:
        case SParser.DECIMAL:
        case SParser.DATE:
        case SParser.TIME:
        case SParser.DATETIME:
        case SParser.PERIOD:
        case SParser.CODE:
            localctx = new NativeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1246; 
            localctx.n = this.native_type();
            break;
        case SParser.TYPE_IDENTIFIER:
            localctx = new CategoryTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1247; 
            localctx.c = this.category_type();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_native_type;
    return this;
}

Native_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_typeContext.prototype.constructor = Native_typeContext;


 
Native_typeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function IntegerTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntegerTypeContext.prototype = Object.create(Native_typeContext.prototype);
IntegerTypeContext.prototype.constructor = IntegerTypeContext;

IntegerTypeContext.prototype.INTEGER = function() {
    return this.getToken(SParser.INTEGER, 0);
};
IntegerTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterIntegerType(this);
	}
};

IntegerTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitIntegerType(this);
	}
};


function PeriodTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PeriodTypeContext.prototype = Object.create(Native_typeContext.prototype);
PeriodTypeContext.prototype.constructor = PeriodTypeContext;

PeriodTypeContext.prototype.PERIOD = function() {
    return this.getToken(SParser.PERIOD, 0);
};
PeriodTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPeriodType(this);
	}
};

PeriodTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPeriodType(this);
	}
};


function DateTimeTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateTimeTypeContext.prototype = Object.create(Native_typeContext.prototype);
DateTimeTypeContext.prototype.constructor = DateTimeTypeContext;

DateTimeTypeContext.prototype.DATETIME = function() {
    return this.getToken(SParser.DATETIME, 0);
};
DateTimeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDateTimeType(this);
	}
};

DateTimeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDateTimeType(this);
	}
};


function BooleanTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanTypeContext.prototype = Object.create(Native_typeContext.prototype);
BooleanTypeContext.prototype.constructor = BooleanTypeContext;

BooleanTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(SParser.BOOLEAN, 0);
};
BooleanTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterBooleanType(this);
	}
};

BooleanTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitBooleanType(this);
	}
};


function DecimalTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DecimalTypeContext.prototype = Object.create(Native_typeContext.prototype);
DecimalTypeContext.prototype.constructor = DecimalTypeContext;

DecimalTypeContext.prototype.DECIMAL = function() {
    return this.getToken(SParser.DECIMAL, 0);
};
DecimalTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDecimalType(this);
	}
};

DecimalTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDecimalType(this);
	}
};


function CodeTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CodeTypeContext.prototype = Object.create(Native_typeContext.prototype);
CodeTypeContext.prototype.constructor = CodeTypeContext;

CodeTypeContext.prototype.CODE = function() {
    return this.getToken(SParser.CODE, 0);
};
CodeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCodeType(this);
	}
};

CodeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCodeType(this);
	}
};


function CharacterTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CharacterTypeContext.prototype = Object.create(Native_typeContext.prototype);
CharacterTypeContext.prototype.constructor = CharacterTypeContext;

CharacterTypeContext.prototype.CHARACTER = function() {
    return this.getToken(SParser.CHARACTER, 0);
};
CharacterTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCharacterType(this);
	}
};

CharacterTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCharacterType(this);
	}
};


function DateTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateTypeContext.prototype = Object.create(Native_typeContext.prototype);
DateTypeContext.prototype.constructor = DateTypeContext;

DateTypeContext.prototype.DATE = function() {
    return this.getToken(SParser.DATE, 0);
};
DateTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDateType(this);
	}
};

DateTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDateType(this);
	}
};


function TextTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TextTypeContext.prototype = Object.create(Native_typeContext.prototype);
TextTypeContext.prototype.constructor = TextTypeContext;

TextTypeContext.prototype.TEXT = function() {
    return this.getToken(SParser.TEXT, 0);
};
TextTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterTextType(this);
	}
};

TextTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitTextType(this);
	}
};


function TimeTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeTypeContext.prototype = Object.create(Native_typeContext.prototype);
TimeTypeContext.prototype.constructor = TimeTypeContext;

TimeTypeContext.prototype.TIME = function() {
    return this.getToken(SParser.TIME, 0);
};
TimeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterTimeType(this);
	}
};

TimeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitTimeType(this);
	}
};



SParser.prototype.native_type = function() {

    var localctx = new Native_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, SParser.RULE_native_type);
    try {
        this.state = 1260;
        switch(this._input.LA(1)) {
        case SParser.BOOLEAN:
            localctx = new BooleanTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1250;
            localctx.t1 = this.match(SParser.BOOLEAN);
            break;
        case SParser.CHARACTER:
            localctx = new CharacterTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1251;
            localctx.t1 = this.match(SParser.CHARACTER);
            break;
        case SParser.TEXT:
            localctx = new TextTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1252;
            localctx.t1 = this.match(SParser.TEXT);
            break;
        case SParser.INTEGER:
            localctx = new IntegerTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1253;
            localctx.t1 = this.match(SParser.INTEGER);
            break;
        case SParser.DECIMAL:
            localctx = new DecimalTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1254;
            localctx.t1 = this.match(SParser.DECIMAL);
            break;
        case SParser.DATE:
            localctx = new DateTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1255;
            localctx.t1 = this.match(SParser.DATE);
            break;
        case SParser.DATETIME:
            localctx = new DateTimeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1256;
            localctx.t1 = this.match(SParser.DATETIME);
            break;
        case SParser.TIME:
            localctx = new TimeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 1257;
            localctx.t1 = this.match(SParser.TIME);
            break;
        case SParser.PERIOD:
            localctx = new PeriodTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 1258;
            localctx.t1 = this.match(SParser.PERIOD);
            break;
        case SParser.CODE:
            localctx = new CodeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 1259;
            localctx.t1 = this.match(SParser.CODE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_category_type;
    this.t1 = null; // Token
    return this;
}

Category_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_typeContext.prototype.constructor = Category_typeContext;

Category_typeContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(SParser.TYPE_IDENTIFIER, 0);
};

Category_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCategory_type(this);
	}
};

Category_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCategory_type(this);
	}
};




SParser.prototype.category_type = function() {

    var localctx = new Category_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, SParser.RULE_category_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1262;
        localctx.t1 = this.match(SParser.TYPE_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Code_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_code_type;
    this.t1 = null; // Token
    return this;
}

Code_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Code_typeContext.prototype.constructor = Code_typeContext;

Code_typeContext.prototype.CODE = function() {
    return this.getToken(SParser.CODE, 0);
};

Code_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCode_type(this);
	}
};

Code_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCode_type(this);
	}
};




SParser.prototype.code_type = function() {

    var localctx = new Code_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, SParser.RULE_code_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1264;
        localctx.t1 = this.match(SParser.CODE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Document_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_document_type;
    this.t1 = null; // Token
    return this;
}

Document_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Document_typeContext.prototype.constructor = Document_typeContext;

Document_typeContext.prototype.DOCUMENT = function() {
    return this.getToken(SParser.DOCUMENT, 0);
};

Document_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDocument_type(this);
	}
};

Document_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDocument_type(this);
	}
};




SParser.prototype.document_type = function() {

    var localctx = new Document_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, SParser.RULE_document_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1266;
        localctx.t1 = this.match(SParser.DOCUMENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_category_declaration;
    return this;
}

Category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_declarationContext.prototype.constructor = Category_declarationContext;


 
Category_declarationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ConcreteCategoryDeclarationContext(parser, ctx) {
	Category_declarationContext.call(this, parser);
    this.decl = null; // Concrete_category_declarationContext;
    Category_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConcreteCategoryDeclarationContext.prototype = Object.create(Category_declarationContext.prototype);
ConcreteCategoryDeclarationContext.prototype.constructor = ConcreteCategoryDeclarationContext;

ConcreteCategoryDeclarationContext.prototype.concrete_category_declaration = function() {
    return this.getTypedRuleContext(Concrete_category_declarationContext,0);
};
ConcreteCategoryDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterConcreteCategoryDeclaration(this);
	}
};

ConcreteCategoryDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitConcreteCategoryDeclaration(this);
	}
};


function NativeCategoryDeclarationContext(parser, ctx) {
	Category_declarationContext.call(this, parser);
    this.decl = null; // Native_category_declarationContext;
    Category_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeCategoryDeclarationContext.prototype = Object.create(Category_declarationContext.prototype);
NativeCategoryDeclarationContext.prototype.constructor = NativeCategoryDeclarationContext;

NativeCategoryDeclarationContext.prototype.native_category_declaration = function() {
    return this.getTypedRuleContext(Native_category_declarationContext,0);
};
NativeCategoryDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNativeCategoryDeclaration(this);
	}
};

NativeCategoryDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNativeCategoryDeclaration(this);
	}
};


function SingletonCategoryDeclarationContext(parser, ctx) {
	Category_declarationContext.call(this, parser);
    this.decl = null; // Singleton_category_declarationContext;
    Category_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SingletonCategoryDeclarationContext.prototype = Object.create(Category_declarationContext.prototype);
SingletonCategoryDeclarationContext.prototype.constructor = SingletonCategoryDeclarationContext;

SingletonCategoryDeclarationContext.prototype.singleton_category_declaration = function() {
    return this.getTypedRuleContext(Singleton_category_declarationContext,0);
};
SingletonCategoryDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSingletonCategoryDeclaration(this);
	}
};

SingletonCategoryDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSingletonCategoryDeclaration(this);
	}
};



SParser.prototype.category_declaration = function() {

    var localctx = new Category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, SParser.RULE_category_declaration);
    try {
        this.state = 1271;
        switch(this._input.LA(1)) {
        case SParser.CATEGORY:
        case SParser.CLASS:
            localctx = new ConcreteCategoryDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1268; 
            localctx.decl = this.concrete_category_declaration();
            break;
        case SParser.NATIVE:
            localctx = new NativeCategoryDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1269; 
            localctx.decl = this.native_category_declaration();
            break;
        case SParser.SINGLETON:
            localctx = new SingletonCategoryDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1270; 
            localctx.decl = this.singleton_category_declaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_identifier_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_type_identifier_list;
    return this;
}

Type_identifier_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_identifier_listContext.prototype.constructor = Type_identifier_listContext;


 
Type_identifier_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function TypeIdentifierListContext(parser, ctx) {
	Type_identifier_listContext.call(this, parser);
    this.item = null; // Type_identifierContext;
    Type_identifier_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeIdentifierListContext.prototype = Object.create(Type_identifier_listContext.prototype);
TypeIdentifierListContext.prototype.constructor = TypeIdentifierListContext;

TypeIdentifierListContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};
TypeIdentifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterTypeIdentifierList(this);
	}
};

TypeIdentifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitTypeIdentifierList(this);
	}
};


function TypeIdentifierListItemContext(parser, ctx) {
	Type_identifier_listContext.call(this, parser);
    this.items = null; // Type_identifier_listContext;
    this.item = null; // Type_identifierContext;
    Type_identifier_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeIdentifierListItemContext.prototype = Object.create(Type_identifier_listContext.prototype);
TypeIdentifierListItemContext.prototype.constructor = TypeIdentifierListItemContext;

TypeIdentifierListItemContext.prototype.COMMA = function() {
    return this.getToken(SParser.COMMA, 0);
};

TypeIdentifierListItemContext.prototype.type_identifier_list = function() {
    return this.getTypedRuleContext(Type_identifier_listContext,0);
};

TypeIdentifierListItemContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};
TypeIdentifierListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterTypeIdentifierListItem(this);
	}
};

TypeIdentifierListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitTypeIdentifierListItem(this);
	}
};



SParser.prototype.type_identifier_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Type_identifier_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 162;
    this.enterRecursionRule(localctx, 162, SParser.RULE_type_identifier_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new TypeIdentifierListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1274; 
        localctx.item = this.type_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1281;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,70,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeIdentifierListItemContext(this, new Type_identifier_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_type_identifier_list);
                this.state = 1276;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1277;
                this.match(SParser.COMMA);
                this.state = 1278; 
                localctx.item = this.type_identifier(); 
            }
            this.state = 1283;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,70,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Method_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_method_identifier;
    return this;
}

Method_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_identifierContext.prototype.constructor = Method_identifierContext;


 
Method_identifierContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MethodVariableIdentifierContext(parser, ctx) {
	Method_identifierContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    Method_identifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodVariableIdentifierContext.prototype = Object.create(Method_identifierContext.prototype);
MethodVariableIdentifierContext.prototype.constructor = MethodVariableIdentifierContext;

MethodVariableIdentifierContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
MethodVariableIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMethodVariableIdentifier(this);
	}
};

MethodVariableIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMethodVariableIdentifier(this);
	}
};


function MethodTypeIdentifierContext(parser, ctx) {
	Method_identifierContext.call(this, parser);
    this.name = null; // Type_identifierContext;
    Method_identifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodTypeIdentifierContext.prototype = Object.create(Method_identifierContext.prototype);
MethodTypeIdentifierContext.prototype.constructor = MethodTypeIdentifierContext;

MethodTypeIdentifierContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};
MethodTypeIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMethodTypeIdentifier(this);
	}
};

MethodTypeIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMethodTypeIdentifier(this);
	}
};



SParser.prototype.method_identifier = function() {

    var localctx = new Method_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, SParser.RULE_method_identifier);
    try {
        this.state = 1286;
        switch(this._input.LA(1)) {
        case SParser.VARIABLE_IDENTIFIER:
            localctx = new MethodVariableIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1284; 
            localctx.name = this.variable_identifier();
            break;
        case SParser.TYPE_IDENTIFIER:
            localctx = new MethodTypeIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1285; 
            localctx.name = this.type_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;


 
IdentifierContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TypeIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    this.name = null; // Type_identifierContext;
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
TypeIdentifierContext.prototype.constructor = TypeIdentifierContext;

TypeIdentifierContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};
TypeIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterTypeIdentifier(this);
	}
};

TypeIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitTypeIdentifier(this);
	}
};


function SymbolIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    this.name = null; // Symbol_identifierContext;
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SymbolIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
SymbolIdentifierContext.prototype.constructor = SymbolIdentifierContext;

SymbolIdentifierContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};
SymbolIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSymbolIdentifier(this);
	}
};

SymbolIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSymbolIdentifier(this);
	}
};


function VariableIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VariableIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
VariableIdentifierContext.prototype.constructor = VariableIdentifierContext;

VariableIdentifierContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
VariableIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterVariableIdentifier(this);
	}
};

VariableIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitVariableIdentifier(this);
	}
};



SParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, SParser.RULE_identifier);
    try {
        this.state = 1291;
        switch(this._input.LA(1)) {
        case SParser.VARIABLE_IDENTIFIER:
            localctx = new VariableIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1288; 
            localctx.name = this.variable_identifier();
            break;
        case SParser.TYPE_IDENTIFIER:
            localctx = new TypeIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1289; 
            localctx.name = this.type_identifier();
            break;
        case SParser.SYMBOL_IDENTIFIER:
            localctx = new SymbolIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1290; 
            localctx.name = this.symbol_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_variable_identifier;
    return this;
}

Variable_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_identifierContext.prototype.constructor = Variable_identifierContext;

Variable_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(SParser.VARIABLE_IDENTIFIER, 0);
};

Variable_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterVariable_identifier(this);
	}
};

Variable_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitVariable_identifier(this);
	}
};




SParser.prototype.variable_identifier = function() {

    var localctx = new Variable_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, SParser.RULE_variable_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1293;
        this.match(SParser.VARIABLE_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_type_identifier;
    return this;
}

Type_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_identifierContext.prototype.constructor = Type_identifierContext;

Type_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(SParser.TYPE_IDENTIFIER, 0);
};

Type_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterType_identifier(this);
	}
};

Type_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitType_identifier(this);
	}
};




SParser.prototype.type_identifier = function() {

    var localctx = new Type_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, SParser.RULE_type_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1295;
        this.match(SParser.TYPE_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Symbol_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_symbol_identifier;
    return this;
}

Symbol_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Symbol_identifierContext.prototype.constructor = Symbol_identifierContext;

Symbol_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(SParser.SYMBOL_IDENTIFIER, 0);
};

Symbol_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSymbol_identifier(this);
	}
};

Symbol_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSymbol_identifier(this);
	}
};




SParser.prototype.symbol_identifier = function() {

    var localctx = new Symbol_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, SParser.RULE_symbol_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1297;
        this.match(SParser.SYMBOL_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_argument_list;
    return this;
}

Argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_listContext.prototype.constructor = Argument_listContext;


 
Argument_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ArgumentListItemContext(parser, ctx) {
	Argument_listContext.call(this, parser);
    this.items = null; // Argument_listContext;
    this.item = null; // ArgumentContext;
    Argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentListItemContext.prototype = Object.create(Argument_listContext.prototype);
ArgumentListItemContext.prototype.constructor = ArgumentListItemContext;

ArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(SParser.COMMA, 0);
};

ArgumentListItemContext.prototype.argument_list = function() {
    return this.getTypedRuleContext(Argument_listContext,0);
};

ArgumentListItemContext.prototype.argument = function() {
    return this.getTypedRuleContext(ArgumentContext,0);
};
ArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterArgumentListItem(this);
	}
};

ArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitArgumentListItem(this);
	}
};


function ArgumentListContext(parser, ctx) {
	Argument_listContext.call(this, parser);
    this.item = null; // ArgumentContext;
    Argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentListContext.prototype = Object.create(Argument_listContext.prototype);
ArgumentListContext.prototype.constructor = ArgumentListContext;

ArgumentListContext.prototype.argument = function() {
    return this.getTypedRuleContext(ArgumentContext,0);
};
ArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterArgumentList(this);
	}
};

ArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitArgumentList(this);
	}
};



SParser.prototype.argument_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Argument_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 174;
    this.enterRecursionRule(localctx, 174, SParser.RULE_argument_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new ArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1300; 
        localctx.item = this.argument();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1307;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,73,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ArgumentListItemContext(this, new Argument_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_argument_list);
                this.state = 1302;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1303;
                this.match(SParser.COMMA);
                this.state = 1304; 
                localctx.item = this.argument(); 
            }
            this.state = 1309;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,73,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_argument;
    return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;


 
ArgumentContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function OperatorArgumentContext(parser, ctx) {
	ArgumentContext.call(this, parser);
    this.arg = null; // Operator_argumentContext;
    ArgumentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorArgumentContext.prototype = Object.create(ArgumentContext.prototype);
OperatorArgumentContext.prototype.constructor = OperatorArgumentContext;

OperatorArgumentContext.prototype.operator_argument = function() {
    return this.getTypedRuleContext(Operator_argumentContext,0);
};

OperatorArgumentContext.prototype.MUTABLE = function() {
    return this.getToken(SParser.MUTABLE, 0);
};
OperatorArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterOperatorArgument(this);
	}
};

OperatorArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitOperatorArgument(this);
	}
};


function CodeArgumentContext(parser, ctx) {
	ArgumentContext.call(this, parser);
    this.arg = null; // Code_argumentContext;
    ArgumentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CodeArgumentContext.prototype = Object.create(ArgumentContext.prototype);
CodeArgumentContext.prototype.constructor = CodeArgumentContext;

CodeArgumentContext.prototype.code_argument = function() {
    return this.getTypedRuleContext(Code_argumentContext,0);
};
CodeArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCodeArgument(this);
	}
};

CodeArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCodeArgument(this);
	}
};



SParser.prototype.argument = function() {

    var localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, SParser.RULE_argument);
    var _la = 0; // Token type
    try {
        this.state = 1315;
        switch(this._input.LA(1)) {
        case SParser.CODE:
            localctx = new CodeArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1310; 
            localctx.arg = this.code_argument();
            break;
        case SParser.MUTABLE:
        case SParser.VARIABLE_IDENTIFIER:
            localctx = new OperatorArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1312;
            _la = this._input.LA(1);
            if(_la===SParser.MUTABLE) {
                this.state = 1311;
                this.match(SParser.MUTABLE);
            }

            this.state = 1314; 
            localctx.arg = this.operator_argument();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Operator_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_operator_argument;
    return this;
}

Operator_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operator_argumentContext.prototype.constructor = Operator_argumentContext;


 
Operator_argumentContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TypedArgumentContext(parser, ctx) {
	Operator_argumentContext.call(this, parser);
    this.arg = null; // Typed_argumentContext;
    Operator_argumentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypedArgumentContext.prototype = Object.create(Operator_argumentContext.prototype);
TypedArgumentContext.prototype.constructor = TypedArgumentContext;

TypedArgumentContext.prototype.typed_argument = function() {
    return this.getTypedRuleContext(Typed_argumentContext,0);
};
TypedArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterTypedArgument(this);
	}
};

TypedArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitTypedArgument(this);
	}
};


function NamedArgumentContext(parser, ctx) {
	Operator_argumentContext.call(this, parser);
    this.arg = null; // Named_argumentContext;
    Operator_argumentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NamedArgumentContext.prototype = Object.create(Operator_argumentContext.prototype);
NamedArgumentContext.prototype.constructor = NamedArgumentContext;

NamedArgumentContext.prototype.named_argument = function() {
    return this.getTypedRuleContext(Named_argumentContext,0);
};
NamedArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNamedArgument(this);
	}
};

NamedArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNamedArgument(this);
	}
};



SParser.prototype.operator_argument = function() {

    var localctx = new Operator_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, SParser.RULE_operator_argument);
    try {
        this.state = 1319;
        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
        switch(la_) {
        case 1:
            localctx = new NamedArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1317; 
            localctx.arg = this.named_argument();
            break;

        case 2:
            localctx = new TypedArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1318; 
            localctx.arg = this.typed_argument();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Named_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_named_argument;
    this.name = null; // Variable_identifierContext
    this.value = null; // Literal_expressionContext
    return this;
}

Named_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Named_argumentContext.prototype.constructor = Named_argumentContext;

Named_argumentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Named_argumentContext.prototype.EQ = function() {
    return this.getToken(SParser.EQ, 0);
};

Named_argumentContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};

Named_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNamed_argument(this);
	}
};

Named_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNamed_argument(this);
	}
};




SParser.prototype.named_argument = function() {

    var localctx = new Named_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, SParser.RULE_named_argument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1321; 
        localctx.name = this.variable_identifier();
        this.state = 1324;
        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
        if(la_===1) {
            this.state = 1322;
            this.match(SParser.EQ);
            this.state = 1323; 
            localctx.value = this.literal_expression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Code_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_code_argument;
    this.name = null; // Variable_identifierContext
    return this;
}

Code_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Code_argumentContext.prototype.constructor = Code_argumentContext;

Code_argumentContext.prototype.code_type = function() {
    return this.getTypedRuleContext(Code_typeContext,0);
};

Code_argumentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Code_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCode_argument(this);
	}
};

Code_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCode_argument(this);
	}
};




SParser.prototype.code_argument = function() {

    var localctx = new Code_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, SParser.RULE_code_argument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1326; 
        this.code_type();
        this.state = 1327; 
        localctx.name = this.variable_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_or_any_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_category_or_any_type;
    return this;
}

Category_or_any_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_or_any_typeContext.prototype.constructor = Category_or_any_typeContext;


 
Category_or_any_typeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AnyArgumentTypeContext(parser, ctx) {
	Category_or_any_typeContext.call(this, parser);
    this.typ = null; // Any_typeContext;
    Category_or_any_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnyArgumentTypeContext.prototype = Object.create(Category_or_any_typeContext.prototype);
AnyArgumentTypeContext.prototype.constructor = AnyArgumentTypeContext;

AnyArgumentTypeContext.prototype.any_type = function() {
    return this.getTypedRuleContext(Any_typeContext,0);
};
AnyArgumentTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAnyArgumentType(this);
	}
};

AnyArgumentTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAnyArgumentType(this);
	}
};


function CategoryArgumentTypeContext(parser, ctx) {
	Category_or_any_typeContext.call(this, parser);
    this.typ = null; // TypedefContext;
    Category_or_any_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CategoryArgumentTypeContext.prototype = Object.create(Category_or_any_typeContext.prototype);
CategoryArgumentTypeContext.prototype.constructor = CategoryArgumentTypeContext;

CategoryArgumentTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
CategoryArgumentTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCategoryArgumentType(this);
	}
};

CategoryArgumentTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCategoryArgumentType(this);
	}
};



SParser.prototype.category_or_any_type = function() {

    var localctx = new Category_or_any_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, SParser.RULE_category_or_any_type);
    try {
        this.state = 1331;
        switch(this._input.LA(1)) {
        case SParser.BOOLEAN:
        case SParser.CHARACTER:
        case SParser.TEXT:
        case SParser.INTEGER:
        case SParser.DECIMAL:
        case SParser.DATE:
        case SParser.TIME:
        case SParser.DATETIME:
        case SParser.PERIOD:
        case SParser.CODE:
        case SParser.TYPE_IDENTIFIER:
            localctx = new CategoryArgumentTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1329; 
            localctx.typ = this.typedef(0);
            break;
        case SParser.ANY:
            localctx = new AnyArgumentTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1330; 
            localctx.typ = this.any_type(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Any_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_any_type;
    return this;
}

Any_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Any_typeContext.prototype.constructor = Any_typeContext;


 
Any_typeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function AnyListTypeContext(parser, ctx) {
	Any_typeContext.call(this, parser);
    this.typ = null; // Any_typeContext;
    Any_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnyListTypeContext.prototype = Object.create(Any_typeContext.prototype);
AnyListTypeContext.prototype.constructor = AnyListTypeContext;

AnyListTypeContext.prototype.LBRAK = function() {
    return this.getToken(SParser.LBRAK, 0);
};

AnyListTypeContext.prototype.RBRAK = function() {
    return this.getToken(SParser.RBRAK, 0);
};

AnyListTypeContext.prototype.any_type = function() {
    return this.getTypedRuleContext(Any_typeContext,0);
};
AnyListTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAnyListType(this);
	}
};

AnyListTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAnyListType(this);
	}
};


function AnyTypeContext(parser, ctx) {
	Any_typeContext.call(this, parser);
    Any_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnyTypeContext.prototype = Object.create(Any_typeContext.prototype);
AnyTypeContext.prototype.constructor = AnyTypeContext;

AnyTypeContext.prototype.ANY = function() {
    return this.getToken(SParser.ANY, 0);
};
AnyTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAnyType(this);
	}
};

AnyTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAnyType(this);
	}
};


function AnyDictTypeContext(parser, ctx) {
	Any_typeContext.call(this, parser);
    this.typ = null; // Any_typeContext;
    Any_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnyDictTypeContext.prototype = Object.create(Any_typeContext.prototype);
AnyDictTypeContext.prototype.constructor = AnyDictTypeContext;

AnyDictTypeContext.prototype.LCURL = function() {
    return this.getToken(SParser.LCURL, 0);
};

AnyDictTypeContext.prototype.RCURL = function() {
    return this.getToken(SParser.RCURL, 0);
};

AnyDictTypeContext.prototype.any_type = function() {
    return this.getTypedRuleContext(Any_typeContext,0);
};
AnyDictTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAnyDictType(this);
	}
};

AnyDictTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAnyDictType(this);
	}
};



SParser.prototype.any_type = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Any_typeContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 186;
    this.enterRecursionRule(localctx, 186, SParser.RULE_any_type, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new AnyTypeContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1334;
        this.match(SParser.ANY);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1344;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1342;
                var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AnyListTypeContext(this, new Any_typeContext(this, _parentctx, _parentState));
                    localctx.typ = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_any_type);
                    this.state = 1336;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1337;
                    this.match(SParser.LBRAK);
                    this.state = 1338;
                    this.match(SParser.RBRAK);
                    break;

                case 2:
                    localctx = new AnyDictTypeContext(this, new Any_typeContext(this, _parentctx, _parentState));
                    localctx.typ = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SParser.RULE_any_type);
                    this.state = 1339;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1340;
                    this.match(SParser.LCURL);
                    this.state = 1341;
                    this.match(SParser.RCURL);
                    break;

                } 
            }
            this.state = 1346;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Member_method_declaration_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_member_method_declaration_list;
    return this;
}

Member_method_declaration_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_method_declaration_listContext.prototype.constructor = Member_method_declaration_listContext;


 
Member_method_declaration_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CategoryMethodListItemContext(parser, ctx) {
	Member_method_declaration_listContext.call(this, parser);
    this.items = null; // Member_method_declaration_listContext;
    this.item = null; // Member_method_declarationContext;
    Member_method_declaration_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CategoryMethodListItemContext.prototype = Object.create(Member_method_declaration_listContext.prototype);
CategoryMethodListItemContext.prototype.constructor = CategoryMethodListItemContext;

CategoryMethodListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

CategoryMethodListItemContext.prototype.member_method_declaration_list = function() {
    return this.getTypedRuleContext(Member_method_declaration_listContext,0);
};

CategoryMethodListItemContext.prototype.member_method_declaration = function() {
    return this.getTypedRuleContext(Member_method_declarationContext,0);
};
CategoryMethodListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCategoryMethodListItem(this);
	}
};

CategoryMethodListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCategoryMethodListItem(this);
	}
};


function CategoryMethodListContext(parser, ctx) {
	Member_method_declaration_listContext.call(this, parser);
    this.item = null; // Member_method_declarationContext;
    Member_method_declaration_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CategoryMethodListContext.prototype = Object.create(Member_method_declaration_listContext.prototype);
CategoryMethodListContext.prototype.constructor = CategoryMethodListContext;

CategoryMethodListContext.prototype.member_method_declaration = function() {
    return this.getTypedRuleContext(Member_method_declarationContext,0);
};
CategoryMethodListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCategoryMethodList(this);
	}
};

CategoryMethodListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCategoryMethodList(this);
	}
};



SParser.prototype.member_method_declaration_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Member_method_declaration_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 188;
    this.enterRecursionRule(localctx, 188, SParser.RULE_member_method_declaration_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new CategoryMethodListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1348; 
        localctx.item = this.member_method_declaration();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1356;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CategoryMethodListItemContext(this, new Member_method_declaration_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_member_method_declaration_list);
                this.state = 1350;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1351; 
                this.lfp();
                this.state = 1352; 
                localctx.item = this.member_method_declaration(); 
            }
            this.state = 1358;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Member_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_member_method_declaration;
    return this;
}

Member_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_method_declarationContext.prototype.constructor = Member_method_declarationContext;

Member_method_declarationContext.prototype.setter_method_declaration = function() {
    return this.getTypedRuleContext(Setter_method_declarationContext,0);
};

Member_method_declarationContext.prototype.getter_method_declaration = function() {
    return this.getTypedRuleContext(Getter_method_declarationContext,0);
};

Member_method_declarationContext.prototype.concrete_method_declaration = function() {
    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
};

Member_method_declarationContext.prototype.abstract_method_declaration = function() {
    return this.getTypedRuleContext(Abstract_method_declarationContext,0);
};

Member_method_declarationContext.prototype.operator_method_declaration = function() {
    return this.getTypedRuleContext(Operator_method_declarationContext,0);
};

Member_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMember_method_declaration(this);
	}
};

Member_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMember_method_declaration(this);
	}
};




SParser.prototype.member_method_declaration = function() {

    var localctx = new Member_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, SParser.RULE_member_method_declaration);
    try {
        this.state = 1364;
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1359; 
            this.setter_method_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1360; 
            this.getter_method_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1361; 
            this.concrete_method_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1362; 
            this.abstract_method_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1363; 
            this.operator_method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_member_method_declaration_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_native_member_method_declaration_list;
    return this;
}

Native_member_method_declaration_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_member_method_declaration_listContext.prototype.constructor = Native_member_method_declaration_listContext;


 
Native_member_method_declaration_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function NativeCategoryMethodListContext(parser, ctx) {
	Native_member_method_declaration_listContext.call(this, parser);
    this.item = null; // Native_member_method_declarationContext;
    Native_member_method_declaration_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeCategoryMethodListContext.prototype = Object.create(Native_member_method_declaration_listContext.prototype);
NativeCategoryMethodListContext.prototype.constructor = NativeCategoryMethodListContext;

NativeCategoryMethodListContext.prototype.native_member_method_declaration = function() {
    return this.getTypedRuleContext(Native_member_method_declarationContext,0);
};
NativeCategoryMethodListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNativeCategoryMethodList(this);
	}
};

NativeCategoryMethodListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNativeCategoryMethodList(this);
	}
};


function NativeCategoryMethodListItemContext(parser, ctx) {
	Native_member_method_declaration_listContext.call(this, parser);
    this.items = null; // Native_member_method_declaration_listContext;
    this.item = null; // Native_member_method_declarationContext;
    Native_member_method_declaration_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeCategoryMethodListItemContext.prototype = Object.create(Native_member_method_declaration_listContext.prototype);
NativeCategoryMethodListItemContext.prototype.constructor = NativeCategoryMethodListItemContext;

NativeCategoryMethodListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

NativeCategoryMethodListItemContext.prototype.native_member_method_declaration_list = function() {
    return this.getTypedRuleContext(Native_member_method_declaration_listContext,0);
};

NativeCategoryMethodListItemContext.prototype.native_member_method_declaration = function() {
    return this.getTypedRuleContext(Native_member_method_declarationContext,0);
};
NativeCategoryMethodListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNativeCategoryMethodListItem(this);
	}
};

NativeCategoryMethodListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNativeCategoryMethodListItem(this);
	}
};



SParser.prototype.native_member_method_declaration_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Native_member_method_declaration_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 192;
    this.enterRecursionRule(localctx, 192, SParser.RULE_native_member_method_declaration_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new NativeCategoryMethodListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1367; 
        localctx.item = this.native_member_method_declaration();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1375;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new NativeCategoryMethodListItemContext(this, new Native_member_method_declaration_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_native_member_method_declaration_list);
                this.state = 1369;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1370; 
                this.lfp();
                this.state = 1371; 
                localctx.item = this.native_member_method_declaration(); 
            }
            this.state = 1377;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Native_member_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_native_member_method_declaration;
    return this;
}

Native_member_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_member_method_declarationContext.prototype.constructor = Native_member_method_declarationContext;

Native_member_method_declarationContext.prototype.member_method_declaration = function() {
    return this.getTypedRuleContext(Member_method_declarationContext,0);
};

Native_member_method_declarationContext.prototype.native_method_declaration = function() {
    return this.getTypedRuleContext(Native_method_declarationContext,0);
};

Native_member_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNative_member_method_declaration(this);
	}
};

Native_member_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNative_member_method_declaration(this);
	}
};




SParser.prototype.native_member_method_declaration = function() {

    var localctx = new Native_member_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, SParser.RULE_native_member_method_declaration);
    try {
        this.state = 1380;
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1378; 
            this.member_method_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1379; 
            this.native_method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_bindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_native_category_binding;
    return this;
}

Native_category_bindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_bindingContext.prototype.constructor = Native_category_bindingContext;


 
Native_category_bindingContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function Python2CategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Python_category_bindingContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python2CategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
Python2CategoryBindingContext.prototype.constructor = Python2CategoryBindingContext;

Python2CategoryBindingContext.prototype.PYTHON2 = function() {
    return this.getToken(SParser.PYTHON2, 0);
};

Python2CategoryBindingContext.prototype.python_category_binding = function() {
    return this.getTypedRuleContext(Python_category_bindingContext,0);
};
Python2CategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPython2CategoryBinding(this);
	}
};

Python2CategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPython2CategoryBinding(this);
	}
};


function Python3CategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Python_category_bindingContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python3CategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
Python3CategoryBindingContext.prototype.constructor = Python3CategoryBindingContext;

Python3CategoryBindingContext.prototype.PYTHON3 = function() {
    return this.getToken(SParser.PYTHON3, 0);
};

Python3CategoryBindingContext.prototype.python_category_binding = function() {
    return this.getTypedRuleContext(Python_category_bindingContext,0);
};
Python3CategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPython3CategoryBinding(this);
	}
};

Python3CategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPython3CategoryBinding(this);
	}
};


function JavaCategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Java_class_identifier_expressionContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaCategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
JavaCategoryBindingContext.prototype.constructor = JavaCategoryBindingContext;

JavaCategoryBindingContext.prototype.JAVA = function() {
    return this.getToken(SParser.JAVA, 0);
};

JavaCategoryBindingContext.prototype.java_class_identifier_expression = function() {
    return this.getTypedRuleContext(Java_class_identifier_expressionContext,0);
};
JavaCategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaCategoryBinding(this);
	}
};

JavaCategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaCategoryBinding(this);
	}
};


function CSharpCategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Csharp_identifier_expressionContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpCategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
CSharpCategoryBindingContext.prototype.constructor = CSharpCategoryBindingContext;

CSharpCategoryBindingContext.prototype.CSHARP = function() {
    return this.getToken(SParser.CSHARP, 0);
};

CSharpCategoryBindingContext.prototype.csharp_identifier_expression = function() {
    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
};
CSharpCategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCSharpCategoryBinding(this);
	}
};

CSharpCategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCSharpCategoryBinding(this);
	}
};


function JavaScriptCategoryBindingContext(parser, ctx) {
	Native_category_bindingContext.call(this, parser);
    this.binding = null; // Javascript_category_bindingContext;
    Native_category_bindingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptCategoryBindingContext.prototype = Object.create(Native_category_bindingContext.prototype);
JavaScriptCategoryBindingContext.prototype.constructor = JavaScriptCategoryBindingContext;

JavaScriptCategoryBindingContext.prototype.JAVASCRIPT = function() {
    return this.getToken(SParser.JAVASCRIPT, 0);
};

JavaScriptCategoryBindingContext.prototype.javascript_category_binding = function() {
    return this.getTypedRuleContext(Javascript_category_bindingContext,0);
};
JavaScriptCategoryBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaScriptCategoryBinding(this);
	}
};

JavaScriptCategoryBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaScriptCategoryBinding(this);
	}
};



SParser.prototype.native_category_binding = function() {

    var localctx = new Native_category_bindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, SParser.RULE_native_category_binding);
    try {
        this.state = 1392;
        switch(this._input.LA(1)) {
        case SParser.JAVA:
            localctx = new JavaCategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1382;
            this.match(SParser.JAVA);
            this.state = 1383; 
            localctx.binding = this.java_class_identifier_expression(0);
            break;
        case SParser.CSHARP:
            localctx = new CSharpCategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1384;
            this.match(SParser.CSHARP);
            this.state = 1385; 
            localctx.binding = this.csharp_identifier_expression(0);
            break;
        case SParser.PYTHON2:
            localctx = new Python2CategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1386;
            this.match(SParser.PYTHON2);
            this.state = 1387; 
            localctx.binding = this.python_category_binding();
            break;
        case SParser.PYTHON3:
            localctx = new Python3CategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1388;
            this.match(SParser.PYTHON3);
            this.state = 1389; 
            localctx.binding = this.python_category_binding();
            break;
        case SParser.JAVASCRIPT:
            localctx = new JavaScriptCategoryBindingContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1390;
            this.match(SParser.JAVASCRIPT);
            this.state = 1391; 
            localctx.binding = this.javascript_category_binding();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_category_bindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_python_category_binding;
    this.id_ = null; // IdentifierContext
    this.module = null; // Python_moduleContext
    return this;
}

Python_category_bindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_category_bindingContext.prototype.constructor = Python_category_bindingContext;

Python_category_bindingContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Python_category_bindingContext.prototype.python_module = function() {
    return this.getTypedRuleContext(Python_moduleContext,0);
};

Python_category_bindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPython_category_binding(this);
	}
};

Python_category_bindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPython_category_binding(this);
	}
};




SParser.prototype.python_category_binding = function() {

    var localctx = new Python_category_bindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, SParser.RULE_python_category_binding);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1394; 
        localctx.id_ = this.identifier();
        this.state = 1396;
        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
        if(la_===1) {
            this.state = 1395; 
            localctx.module = this.python_module();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_moduleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_python_module;
    return this;
}

Python_moduleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_moduleContext.prototype.constructor = Python_moduleContext;

Python_moduleContext.prototype.FROM = function() {
    return this.getToken(SParser.FROM, 0);
};

Python_moduleContext.prototype.module_token = function() {
    return this.getTypedRuleContext(Module_tokenContext,0);
};

Python_moduleContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

Python_moduleContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Python_moduleContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SParser.DOT);
    } else {
        return this.getToken(SParser.DOT, i);
    }
};


Python_moduleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPython_module(this);
	}
};

Python_moduleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPython_module(this);
	}
};




SParser.prototype.python_module = function() {

    var localctx = new Python_moduleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, SParser.RULE_python_module);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1398;
        this.match(SParser.FROM);
        this.state = 1399; 
        this.module_token();
        this.state = 1400;
        this.match(SParser.COLON);
        this.state = 1401; 
        this.identifier();
        this.state = 1406;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1402;
                this.match(SParser.DOT);
                this.state = 1403; 
                this.identifier(); 
            }
            this.state = 1408;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Module_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_module_token;
    this.i1 = null; // Token
    return this;
}

Module_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_tokenContext.prototype.constructor = Module_tokenContext;

Module_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(SParser.VARIABLE_IDENTIFIER, 0);
};

Module_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterModule_token(this);
	}
};

Module_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitModule_token(this);
	}
};




SParser.prototype.module_token = function() {

    var localctx = new Module_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, SParser.RULE_module_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1409;
        localctx.i1 = this.match(SParser.VARIABLE_IDENTIFIER);
        this.state = 1410;
        if (!( this.isText(localctx.i1,"module"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"module\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_category_bindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_javascript_category_binding;
    this.id_ = null; // IdentifierContext
    this.module = null; // Javascript_moduleContext
    return this;
}

Javascript_category_bindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_category_bindingContext.prototype.constructor = Javascript_category_bindingContext;

Javascript_category_bindingContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Javascript_category_bindingContext.prototype.javascript_module = function() {
    return this.getTypedRuleContext(Javascript_moduleContext,0);
};

Javascript_category_bindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascript_category_binding(this);
	}
};

Javascript_category_bindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascript_category_binding(this);
	}
};




SParser.prototype.javascript_category_binding = function() {

    var localctx = new Javascript_category_bindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, SParser.RULE_javascript_category_binding);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1412; 
        localctx.id_ = this.identifier();
        this.state = 1414;
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        if(la_===1) {
            this.state = 1413; 
            localctx.module = this.javascript_module();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_moduleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_javascript_module;
    return this;
}

Javascript_moduleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_moduleContext.prototype.constructor = Javascript_moduleContext;

Javascript_moduleContext.prototype.FROM = function() {
    return this.getToken(SParser.FROM, 0);
};

Javascript_moduleContext.prototype.module_token = function() {
    return this.getTypedRuleContext(Module_tokenContext,0);
};

Javascript_moduleContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

Javascript_moduleContext.prototype.javascript_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Javascript_identifierContext);
    } else {
        return this.getTypedRuleContext(Javascript_identifierContext,i);
    }
};

Javascript_moduleContext.prototype.SLASH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SParser.SLASH);
    } else {
        return this.getToken(SParser.SLASH, i);
    }
};


Javascript_moduleContext.prototype.DOT = function() {
    return this.getToken(SParser.DOT, 0);
};

Javascript_moduleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascript_module(this);
	}
};

Javascript_moduleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascript_module(this);
	}
};




SParser.prototype.javascript_module = function() {

    var localctx = new Javascript_moduleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, SParser.RULE_javascript_module);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1416;
        this.match(SParser.FROM);
        this.state = 1417; 
        this.module_token();
        this.state = 1418;
        this.match(SParser.COLON);
        this.state = 1420;
        _la = this._input.LA(1);
        if(_la===SParser.SLASH) {
            this.state = 1419;
            this.match(SParser.SLASH);
        }

        this.state = 1422; 
        this.javascript_identifier();
        this.state = 1427;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1423;
                this.match(SParser.SLASH);
                this.state = 1424; 
                this.javascript_identifier(); 
            }
            this.state = 1429;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
        }

        this.state = 1432;
        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
        if(la_===1) {
            this.state = 1430;
            this.match(SParser.DOT);
            this.state = 1431; 
            this.javascript_identifier();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_identifier_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_variable_identifier_list;
    return this;
}

Variable_identifier_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_identifier_listContext.prototype.constructor = Variable_identifier_listContext;


 
Variable_identifier_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function VariableListContext(parser, ctx) {
	Variable_identifier_listContext.call(this, parser);
    this.item = null; // Variable_identifierContext;
    Variable_identifier_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VariableListContext.prototype = Object.create(Variable_identifier_listContext.prototype);
VariableListContext.prototype.constructor = VariableListContext;

VariableListContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
VariableListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterVariableList(this);
	}
};

VariableListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitVariableList(this);
	}
};


function VariableListItemContext(parser, ctx) {
	Variable_identifier_listContext.call(this, parser);
    this.items = null; // Variable_identifier_listContext;
    this.item = null; // Variable_identifierContext;
    Variable_identifier_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VariableListItemContext.prototype = Object.create(Variable_identifier_listContext.prototype);
VariableListItemContext.prototype.constructor = VariableListItemContext;

VariableListItemContext.prototype.COMMA = function() {
    return this.getToken(SParser.COMMA, 0);
};

VariableListItemContext.prototype.variable_identifier_list = function() {
    return this.getTypedRuleContext(Variable_identifier_listContext,0);
};

VariableListItemContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
VariableListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterVariableListItem(this);
	}
};

VariableListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitVariableListItem(this);
	}
};



SParser.prototype.variable_identifier_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Variable_identifier_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 208;
    this.enterRecursionRule(localctx, 208, SParser.RULE_variable_identifier_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new VariableListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1435; 
        localctx.item = this.variable_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1442;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,92,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new VariableListItemContext(this, new Variable_identifier_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_variable_identifier_list);
                this.state = 1437;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1438;
                this.match(SParser.COMMA);
                this.state = 1439; 
                localctx.item = this.variable_identifier(); 
            }
            this.state = 1444;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,92,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_method_declaration;
    return this;
}

Method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_declarationContext.prototype.constructor = Method_declarationContext;


 
Method_declarationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function NativeMethodContext(parser, ctx) {
	Method_declarationContext.call(this, parser);
    this.decl = null; // Native_method_declarationContext;
    Method_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeMethodContext.prototype = Object.create(Method_declarationContext.prototype);
NativeMethodContext.prototype.constructor = NativeMethodContext;

NativeMethodContext.prototype.native_method_declaration = function() {
    return this.getTypedRuleContext(Native_method_declarationContext,0);
};
NativeMethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNativeMethod(this);
	}
};

NativeMethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNativeMethod(this);
	}
};


function AbstractMethodContext(parser, ctx) {
	Method_declarationContext.call(this, parser);
    this.decl = null; // Abstract_method_declarationContext;
    Method_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AbstractMethodContext.prototype = Object.create(Method_declarationContext.prototype);
AbstractMethodContext.prototype.constructor = AbstractMethodContext;

AbstractMethodContext.prototype.abstract_method_declaration = function() {
    return this.getTypedRuleContext(Abstract_method_declarationContext,0);
};
AbstractMethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAbstractMethod(this);
	}
};

AbstractMethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAbstractMethod(this);
	}
};


function ConcreteMethodContext(parser, ctx) {
	Method_declarationContext.call(this, parser);
    this.decl = null; // Concrete_method_declarationContext;
    Method_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConcreteMethodContext.prototype = Object.create(Method_declarationContext.prototype);
ConcreteMethodContext.prototype.constructor = ConcreteMethodContext;

ConcreteMethodContext.prototype.concrete_method_declaration = function() {
    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
};
ConcreteMethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterConcreteMethod(this);
	}
};

ConcreteMethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitConcreteMethod(this);
	}
};


function TestMethodContext(parser, ctx) {
	Method_declarationContext.call(this, parser);
    this.decl = null; // Test_method_declarationContext;
    Method_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TestMethodContext.prototype = Object.create(Method_declarationContext.prototype);
TestMethodContext.prototype.constructor = TestMethodContext;

TestMethodContext.prototype.test_method_declaration = function() {
    return this.getTypedRuleContext(Test_method_declarationContext,0);
};
TestMethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterTestMethod(this);
	}
};

TestMethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitTestMethod(this);
	}
};



SParser.prototype.method_declaration = function() {

    var localctx = new Method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, SParser.RULE_method_declaration);
    try {
        this.state = 1449;
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AbstractMethodContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1445; 
            localctx.decl = this.abstract_method_declaration();
            break;

        case 2:
            localctx = new ConcreteMethodContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1446; 
            localctx.decl = this.concrete_method_declaration();
            break;

        case 3:
            localctx = new NativeMethodContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1447; 
            localctx.decl = this.native_method_declaration();
            break;

        case 4:
            localctx = new TestMethodContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1448; 
            localctx.decl = this.test_method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_native_statement_list;
    return this;
}

Native_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_statement_listContext.prototype.constructor = Native_statement_listContext;


 
Native_statement_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function NativeStatementListItemContext(parser, ctx) {
	Native_statement_listContext.call(this, parser);
    this.items = null; // Native_statement_listContext;
    this.item = null; // Native_statementContext;
    Native_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeStatementListItemContext.prototype = Object.create(Native_statement_listContext.prototype);
NativeStatementListItemContext.prototype.constructor = NativeStatementListItemContext;

NativeStatementListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

NativeStatementListItemContext.prototype.native_statement_list = function() {
    return this.getTypedRuleContext(Native_statement_listContext,0);
};

NativeStatementListItemContext.prototype.native_statement = function() {
    return this.getTypedRuleContext(Native_statementContext,0);
};
NativeStatementListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNativeStatementListItem(this);
	}
};

NativeStatementListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNativeStatementListItem(this);
	}
};


function NativeStatementListContext(parser, ctx) {
	Native_statement_listContext.call(this, parser);
    this.item = null; // Native_statementContext;
    Native_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeStatementListContext.prototype = Object.create(Native_statement_listContext.prototype);
NativeStatementListContext.prototype.constructor = NativeStatementListContext;

NativeStatementListContext.prototype.native_statement = function() {
    return this.getTypedRuleContext(Native_statementContext,0);
};
NativeStatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNativeStatementList(this);
	}
};

NativeStatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNativeStatementList(this);
	}
};



SParser.prototype.native_statement_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Native_statement_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 212;
    this.enterRecursionRule(localctx, 212, SParser.RULE_native_statement_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new NativeStatementListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1452; 
        localctx.item = this.native_statement();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1460;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,94,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new NativeStatementListItemContext(this, new Native_statement_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_native_statement_list);
                this.state = 1454;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1455; 
                this.lfp();
                this.state = 1456; 
                localctx.item = this.native_statement(); 
            }
            this.state = 1462;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,94,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Native_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_native_statement;
    return this;
}

Native_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_statementContext.prototype.constructor = Native_statementContext;


 
Native_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpNativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    this.stmt = null; // Csharp_statementContext;
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpNativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
CSharpNativeStatementContext.prototype.constructor = CSharpNativeStatementContext;

CSharpNativeStatementContext.prototype.CSHARP = function() {
    return this.getToken(SParser.CSHARP, 0);
};

CSharpNativeStatementContext.prototype.csharp_statement = function() {
    return this.getTypedRuleContext(Csharp_statementContext,0);
};
CSharpNativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCSharpNativeStatement(this);
	}
};

CSharpNativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCSharpNativeStatement(this);
	}
};


function JavaNativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    this.stmt = null; // Java_statementContext;
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaNativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
JavaNativeStatementContext.prototype.constructor = JavaNativeStatementContext;

JavaNativeStatementContext.prototype.JAVA = function() {
    return this.getToken(SParser.JAVA, 0);
};

JavaNativeStatementContext.prototype.java_statement = function() {
    return this.getTypedRuleContext(Java_statementContext,0);
};
JavaNativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaNativeStatement(this);
	}
};

JavaNativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaNativeStatement(this);
	}
};


function JavaScriptNativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    this.stmt = null; // Javascript_native_statementContext;
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptNativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
JavaScriptNativeStatementContext.prototype.constructor = JavaScriptNativeStatementContext;

JavaScriptNativeStatementContext.prototype.JAVASCRIPT = function() {
    return this.getToken(SParser.JAVASCRIPT, 0);
};

JavaScriptNativeStatementContext.prototype.javascript_native_statement = function() {
    return this.getTypedRuleContext(Javascript_native_statementContext,0);
};
JavaScriptNativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaScriptNativeStatement(this);
	}
};

JavaScriptNativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaScriptNativeStatement(this);
	}
};


function Python2NativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    this.stmt = null; // Python_native_statementContext;
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python2NativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
Python2NativeStatementContext.prototype.constructor = Python2NativeStatementContext;

Python2NativeStatementContext.prototype.PYTHON2 = function() {
    return this.getToken(SParser.PYTHON2, 0);
};

Python2NativeStatementContext.prototype.python_native_statement = function() {
    return this.getTypedRuleContext(Python_native_statementContext,0);
};
Python2NativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPython2NativeStatement(this);
	}
};

Python2NativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPython2NativeStatement(this);
	}
};


function Python3NativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    this.stmt = null; // Python_native_statementContext;
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python3NativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
Python3NativeStatementContext.prototype.constructor = Python3NativeStatementContext;

Python3NativeStatementContext.prototype.PYTHON3 = function() {
    return this.getToken(SParser.PYTHON3, 0);
};

Python3NativeStatementContext.prototype.python_native_statement = function() {
    return this.getTypedRuleContext(Python_native_statementContext,0);
};
Python3NativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPython3NativeStatement(this);
	}
};

Python3NativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPython3NativeStatement(this);
	}
};



SParser.prototype.native_statement = function() {

    var localctx = new Native_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, SParser.RULE_native_statement);
    try {
        this.state = 1473;
        switch(this._input.LA(1)) {
        case SParser.JAVA:
            localctx = new JavaNativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1463;
            this.match(SParser.JAVA);
            this.state = 1464; 
            localctx.stmt = this.java_statement();
            break;
        case SParser.CSHARP:
            localctx = new CSharpNativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1465;
            this.match(SParser.CSHARP);
            this.state = 1466; 
            localctx.stmt = this.csharp_statement();
            break;
        case SParser.PYTHON2:
            localctx = new Python2NativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1467;
            this.match(SParser.PYTHON2);
            this.state = 1468; 
            localctx.stmt = this.python_native_statement();
            break;
        case SParser.PYTHON3:
            localctx = new Python3NativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1469;
            this.match(SParser.PYTHON3);
            this.state = 1470; 
            localctx.stmt = this.python_native_statement();
            break;
        case SParser.JAVASCRIPT:
            localctx = new JavaScriptNativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1471;
            this.match(SParser.JAVASCRIPT);
            this.state = 1472; 
            localctx.stmt = this.javascript_native_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_native_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_python_native_statement;
    this.stmt = null; // Python_statementContext
    this.module = null; // Python_moduleContext
    return this;
}

Python_native_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_native_statementContext.prototype.constructor = Python_native_statementContext;

Python_native_statementContext.prototype.python_statement = function() {
    return this.getTypedRuleContext(Python_statementContext,0);
};

Python_native_statementContext.prototype.SEMI = function() {
    return this.getToken(SParser.SEMI, 0);
};

Python_native_statementContext.prototype.python_module = function() {
    return this.getTypedRuleContext(Python_moduleContext,0);
};

Python_native_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPython_native_statement(this);
	}
};

Python_native_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPython_native_statement(this);
	}
};




SParser.prototype.python_native_statement = function() {

    var localctx = new Python_native_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, SParser.RULE_python_native_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1475; 
        localctx.stmt = this.python_statement();
        this.state = 1477;
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        if(la_===1) {
            this.state = 1476;
            this.match(SParser.SEMI);

        }
        this.state = 1480;
        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
        if(la_===1) {
            this.state = 1479; 
            localctx.module = this.python_module();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_native_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_javascript_native_statement;
    this.stmt = null; // Javascript_statementContext
    this.module = null; // Javascript_moduleContext
    return this;
}

Javascript_native_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_native_statementContext.prototype.constructor = Javascript_native_statementContext;

Javascript_native_statementContext.prototype.javascript_statement = function() {
    return this.getTypedRuleContext(Javascript_statementContext,0);
};

Javascript_native_statementContext.prototype.SEMI = function() {
    return this.getToken(SParser.SEMI, 0);
};

Javascript_native_statementContext.prototype.javascript_module = function() {
    return this.getTypedRuleContext(Javascript_moduleContext,0);
};

Javascript_native_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascript_native_statement(this);
	}
};

Javascript_native_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascript_native_statement(this);
	}
};




SParser.prototype.javascript_native_statement = function() {

    var localctx = new Javascript_native_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, SParser.RULE_javascript_native_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1482; 
        localctx.stmt = this.javascript_statement();
        this.state = 1484;
        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
        if(la_===1) {
            this.state = 1483;
            this.match(SParser.SEMI);

        }
        this.state = 1487;
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        if(la_===1) {
            this.state = 1486; 
            localctx.module = this.javascript_module();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_statement_list;
    return this;
}

Statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_listContext.prototype.constructor = Statement_listContext;


 
Statement_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function StatementListContext(parser, ctx) {
	Statement_listContext.call(this, parser);
    this.item = null; // StatementContext;
    Statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StatementListContext.prototype = Object.create(Statement_listContext.prototype);
StatementListContext.prototype.constructor = StatementListContext;

StatementListContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};
StatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterStatementList(this);
	}
};

StatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitStatementList(this);
	}
};


function StatementListItemContext(parser, ctx) {
	Statement_listContext.call(this, parser);
    this.items = null; // Statement_listContext;
    this.item = null; // StatementContext;
    Statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StatementListItemContext.prototype = Object.create(Statement_listContext.prototype);
StatementListItemContext.prototype.constructor = StatementListItemContext;

StatementListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

StatementListItemContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

StatementListItemContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};
StatementListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterStatementListItem(this);
	}
};

StatementListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitStatementListItem(this);
	}
};



SParser.prototype.statement_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Statement_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 220;
    this.enterRecursionRule(localctx, 220, SParser.RULE_statement_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new StatementListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1490; 
        localctx.item = this.statement();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1498;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,100,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new StatementListItemContext(this, new Statement_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_statement_list);
                this.state = 1492;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1493; 
                this.lfp();
                this.state = 1494; 
                localctx.item = this.statement(); 
            }
            this.state = 1500;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,100,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Assertion_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_assertion_list;
    return this;
}

Assertion_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assertion_listContext.prototype.constructor = Assertion_listContext;


 
Assertion_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function AssertionListContext(parser, ctx) {
	Assertion_listContext.call(this, parser);
    this.item = null; // AssertionContext;
    Assertion_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssertionListContext.prototype = Object.create(Assertion_listContext.prototype);
AssertionListContext.prototype.constructor = AssertionListContext;

AssertionListContext.prototype.assertion = function() {
    return this.getTypedRuleContext(AssertionContext,0);
};
AssertionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAssertionList(this);
	}
};

AssertionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAssertionList(this);
	}
};


function AssertionListItemContext(parser, ctx) {
	Assertion_listContext.call(this, parser);
    this.items = null; // Assertion_listContext;
    this.item = null; // AssertionContext;
    Assertion_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssertionListItemContext.prototype = Object.create(Assertion_listContext.prototype);
AssertionListItemContext.prototype.constructor = AssertionListItemContext;

AssertionListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

AssertionListItemContext.prototype.assertion_list = function() {
    return this.getTypedRuleContext(Assertion_listContext,0);
};

AssertionListItemContext.prototype.assertion = function() {
    return this.getTypedRuleContext(AssertionContext,0);
};
AssertionListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAssertionListItem(this);
	}
};

AssertionListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAssertionListItem(this);
	}
};



SParser.prototype.assertion_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Assertion_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 222;
    this.enterRecursionRule(localctx, 222, SParser.RULE_assertion_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new AssertionListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1502; 
        localctx.item = this.assertion();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1510;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,101,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new AssertionListItemContext(this, new Assertion_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_assertion_list);
                this.state = 1504;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1505; 
                this.lfp();
                this.state = 1506; 
                localctx.item = this.assertion(); 
            }
            this.state = 1512;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,101,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Switch_case_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_switch_case_statement_list;
    return this;
}

Switch_case_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_case_statement_listContext.prototype.constructor = Switch_case_statement_listContext;


 
Switch_case_statement_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function SwitchCaseStatementListContext(parser, ctx) {
	Switch_case_statement_listContext.call(this, parser);
    this.item = null; // Switch_case_statementContext;
    Switch_case_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SwitchCaseStatementListContext.prototype = Object.create(Switch_case_statement_listContext.prototype);
SwitchCaseStatementListContext.prototype.constructor = SwitchCaseStatementListContext;

SwitchCaseStatementListContext.prototype.switch_case_statement = function() {
    return this.getTypedRuleContext(Switch_case_statementContext,0);
};
SwitchCaseStatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSwitchCaseStatementList(this);
	}
};

SwitchCaseStatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSwitchCaseStatementList(this);
	}
};


function SwitchCaseStatementListItemContext(parser, ctx) {
	Switch_case_statement_listContext.call(this, parser);
    this.items = null; // Switch_case_statement_listContext;
    this.item = null; // Switch_case_statementContext;
    Switch_case_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SwitchCaseStatementListItemContext.prototype = Object.create(Switch_case_statement_listContext.prototype);
SwitchCaseStatementListItemContext.prototype.constructor = SwitchCaseStatementListItemContext;

SwitchCaseStatementListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

SwitchCaseStatementListItemContext.prototype.switch_case_statement_list = function() {
    return this.getTypedRuleContext(Switch_case_statement_listContext,0);
};

SwitchCaseStatementListItemContext.prototype.switch_case_statement = function() {
    return this.getTypedRuleContext(Switch_case_statementContext,0);
};
SwitchCaseStatementListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSwitchCaseStatementListItem(this);
	}
};

SwitchCaseStatementListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSwitchCaseStatementListItem(this);
	}
};



SParser.prototype.switch_case_statement_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Switch_case_statement_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 224;
    this.enterRecursionRule(localctx, 224, SParser.RULE_switch_case_statement_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new SwitchCaseStatementListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1514; 
        localctx.item = this.switch_case_statement();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1522;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new SwitchCaseStatementListItemContext(this, new Switch_case_statement_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_switch_case_statement_list);
                this.state = 1516;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1517; 
                this.lfp();
                this.state = 1518; 
                localctx.item = this.switch_case_statement(); 
            }
            this.state = 1524;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Catch_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_catch_statement_list;
    return this;
}

Catch_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Catch_statement_listContext.prototype.constructor = Catch_statement_listContext;


 
Catch_statement_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CatchStatementListContext(parser, ctx) {
	Catch_statement_listContext.call(this, parser);
    this.item = null; // Catch_statementContext;
    Catch_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CatchStatementListContext.prototype = Object.create(Catch_statement_listContext.prototype);
CatchStatementListContext.prototype.constructor = CatchStatementListContext;

CatchStatementListContext.prototype.catch_statement = function() {
    return this.getTypedRuleContext(Catch_statementContext,0);
};
CatchStatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCatchStatementList(this);
	}
};

CatchStatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCatchStatementList(this);
	}
};


function CatchStatementListItemContext(parser, ctx) {
	Catch_statement_listContext.call(this, parser);
    this.items = null; // Catch_statement_listContext;
    this.item = null; // Catch_statementContext;
    Catch_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CatchStatementListItemContext.prototype = Object.create(Catch_statement_listContext.prototype);
CatchStatementListItemContext.prototype.constructor = CatchStatementListItemContext;

CatchStatementListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

CatchStatementListItemContext.prototype.catch_statement_list = function() {
    return this.getTypedRuleContext(Catch_statement_listContext,0);
};

CatchStatementListItemContext.prototype.catch_statement = function() {
    return this.getTypedRuleContext(Catch_statementContext,0);
};
CatchStatementListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCatchStatementListItem(this);
	}
};

CatchStatementListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCatchStatementListItem(this);
	}
};



SParser.prototype.catch_statement_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Catch_statement_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 226;
    this.enterRecursionRule(localctx, 226, SParser.RULE_catch_statement_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new CatchStatementListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1526; 
        localctx.item = this.catch_statement();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1534;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,103,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CatchStatementListItemContext(this, new Catch_statement_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_catch_statement_list);
                this.state = 1528;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1529; 
                this.lfp();
                this.state = 1530; 
                localctx.item = this.catch_statement(); 
            }
            this.state = 1536;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,103,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Literal_collectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_literal_collection;
    return this;
}

Literal_collectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_collectionContext.prototype.constructor = Literal_collectionContext;


 
Literal_collectionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function LiteralListLiteralContext(parser, ctx) {
	Literal_collectionContext.call(this, parser);
    this.exp = null; // Literal_list_literalContext;
    Literal_collectionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralListLiteralContext.prototype = Object.create(Literal_collectionContext.prototype);
LiteralListLiteralContext.prototype.constructor = LiteralListLiteralContext;

LiteralListLiteralContext.prototype.LBRAK = function() {
    return this.getToken(SParser.LBRAK, 0);
};

LiteralListLiteralContext.prototype.RBRAK = function() {
    return this.getToken(SParser.RBRAK, 0);
};

LiteralListLiteralContext.prototype.literal_list_literal = function() {
    return this.getTypedRuleContext(Literal_list_literalContext,0);
};
LiteralListLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterLiteralListLiteral(this);
	}
};

LiteralListLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitLiteralListLiteral(this);
	}
};


function LiteralRangeLiteralContext(parser, ctx) {
	Literal_collectionContext.call(this, parser);
    this.low = null; // Atomic_literalContext;
    this.high = null; // Atomic_literalContext;
    Literal_collectionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralRangeLiteralContext.prototype = Object.create(Literal_collectionContext.prototype);
LiteralRangeLiteralContext.prototype.constructor = LiteralRangeLiteralContext;

LiteralRangeLiteralContext.prototype.LBRAK = function() {
    return this.getToken(SParser.LBRAK, 0);
};

LiteralRangeLiteralContext.prototype.RANGE = function() {
    return this.getToken(SParser.RANGE, 0);
};

LiteralRangeLiteralContext.prototype.RBRAK = function() {
    return this.getToken(SParser.RBRAK, 0);
};

LiteralRangeLiteralContext.prototype.atomic_literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Atomic_literalContext);
    } else {
        return this.getTypedRuleContext(Atomic_literalContext,i);
    }
};
LiteralRangeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterLiteralRangeLiteral(this);
	}
};

LiteralRangeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitLiteralRangeLiteral(this);
	}
};


function LiteralSetLiteralContext(parser, ctx) {
	Literal_collectionContext.call(this, parser);
    this.exp = null; // Literal_list_literalContext;
    Literal_collectionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralSetLiteralContext.prototype = Object.create(Literal_collectionContext.prototype);
LiteralSetLiteralContext.prototype.constructor = LiteralSetLiteralContext;

LiteralSetLiteralContext.prototype.LT = function() {
    return this.getToken(SParser.LT, 0);
};

LiteralSetLiteralContext.prototype.GT = function() {
    return this.getToken(SParser.GT, 0);
};

LiteralSetLiteralContext.prototype.literal_list_literal = function() {
    return this.getTypedRuleContext(Literal_list_literalContext,0);
};
LiteralSetLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterLiteralSetLiteral(this);
	}
};

LiteralSetLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitLiteralSetLiteral(this);
	}
};



SParser.prototype.literal_collection = function() {

    var localctx = new Literal_collectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, SParser.RULE_literal_collection);
    try {
        this.state = 1551;
        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LiteralRangeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1537;
            this.match(SParser.LBRAK);
            this.state = 1538; 
            localctx.low = this.atomic_literal();
            this.state = 1539;
            this.match(SParser.RANGE);
            this.state = 1540; 
            localctx.high = this.atomic_literal();
            this.state = 1541;
            this.match(SParser.RBRAK);
            break;

        case 2:
            localctx = new LiteralListLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1543;
            this.match(SParser.LBRAK);
            this.state = 1544; 
            localctx.exp = this.literal_list_literal(0);
            this.state = 1545;
            this.match(SParser.RBRAK);
            break;

        case 3:
            localctx = new LiteralSetLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1547;
            this.match(SParser.LT);
            this.state = 1548; 
            localctx.exp = this.literal_list_literal(0);
            this.state = 1549;
            this.match(SParser.GT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Atomic_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_atomic_literal;
    return this;
}

Atomic_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Atomic_literalContext.prototype.constructor = Atomic_literalContext;


 
Atomic_literalContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MinIntegerLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MinIntegerLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
MinIntegerLiteralContext.prototype.constructor = MinIntegerLiteralContext;

MinIntegerLiteralContext.prototype.MIN_INTEGER = function() {
    return this.getToken(SParser.MIN_INTEGER, 0);
};
MinIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMinIntegerLiteral(this);
	}
};

MinIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMinIntegerLiteral(this);
	}
};


function DateLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
DateLiteralContext.prototype.constructor = DateLiteralContext;

DateLiteralContext.prototype.DATE_LITERAL = function() {
    return this.getToken(SParser.DATE_LITERAL, 0);
};
DateLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDateLiteral(this);
	}
};

DateLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDateLiteral(this);
	}
};


function BooleanLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

BooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(SParser.BOOLEAN_LITERAL, 0);
};
BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitBooleanLiteral(this);
	}
};


function HexadecimalLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HexadecimalLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
HexadecimalLiteralContext.prototype.constructor = HexadecimalLiteralContext;

HexadecimalLiteralContext.prototype.HEXA_LITERAL = function() {
    return this.getToken(SParser.HEXA_LITERAL, 0);
};
HexadecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterHexadecimalLiteral(this);
	}
};

HexadecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitHexadecimalLiteral(this);
	}
};


function MaxIntegerLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MaxIntegerLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
MaxIntegerLiteralContext.prototype.constructor = MaxIntegerLiteralContext;

MaxIntegerLiteralContext.prototype.MAX_INTEGER = function() {
    return this.getToken(SParser.MAX_INTEGER, 0);
};
MaxIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMaxIntegerLiteral(this);
	}
};

MaxIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMaxIntegerLiteral(this);
	}
};


function DateTimeLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateTimeLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
DateTimeLiteralContext.prototype.constructor = DateTimeLiteralContext;

DateTimeLiteralContext.prototype.DATETIME_LITERAL = function() {
    return this.getToken(SParser.DATETIME_LITERAL, 0);
};
DateTimeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDateTimeLiteral(this);
	}
};

DateTimeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDateTimeLiteral(this);
	}
};


function PeriodLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PeriodLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
PeriodLiteralContext.prototype.constructor = PeriodLiteralContext;

PeriodLiteralContext.prototype.PERIOD_LITERAL = function() {
    return this.getToken(SParser.PERIOD_LITERAL, 0);
};
PeriodLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPeriodLiteral(this);
	}
};

PeriodLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPeriodLiteral(this);
	}
};


function DecimalLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DecimalLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
DecimalLiteralContext.prototype.constructor = DecimalLiteralContext;

DecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(SParser.DECIMAL_LITERAL, 0);
};
DecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDecimalLiteral(this);
	}
};


function TextLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TextLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
TextLiteralContext.prototype.constructor = TextLiteralContext;

TextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(SParser.TEXT_LITERAL, 0);
};
TextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterTextLiteral(this);
	}
};

TextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitTextLiteral(this);
	}
};


function NullLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.n = null; // Null_literalContext;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
NullLiteralContext.prototype.constructor = NullLiteralContext;

NullLiteralContext.prototype.null_literal = function() {
    return this.getTypedRuleContext(Null_literalContext,0);
};
NullLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterNullLiteral(this);
	}
};

NullLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitNullLiteral(this);
	}
};


function IntegerLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntegerLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
IntegerLiteralContext.prototype.constructor = IntegerLiteralContext;

IntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(SParser.INTEGER_LITERAL, 0);
};
IntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterIntegerLiteral(this);
	}
};

IntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitIntegerLiteral(this);
	}
};


function TimeLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
TimeLiteralContext.prototype.constructor = TimeLiteralContext;

TimeLiteralContext.prototype.TIME_LITERAL = function() {
    return this.getToken(SParser.TIME_LITERAL, 0);
};
TimeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterTimeLiteral(this);
	}
};

TimeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitTimeLiteral(this);
	}
};


function CharacterLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CharacterLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
CharacterLiteralContext.prototype.constructor = CharacterLiteralContext;

CharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(SParser.CHAR_LITERAL, 0);
};
CharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCharacterLiteral(this);
	}
};

CharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCharacterLiteral(this);
	}
};



SParser.prototype.atomic_literal = function() {

    var localctx = new Atomic_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, SParser.RULE_atomic_literal);
    try {
        this.state = 1566;
        switch(this._input.LA(1)) {
        case SParser.MIN_INTEGER:
            localctx = new MinIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1553;
            localctx.t = this.match(SParser.MIN_INTEGER);
            break;
        case SParser.MAX_INTEGER:
            localctx = new MaxIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1554;
            localctx.t = this.match(SParser.MAX_INTEGER);
            break;
        case SParser.INTEGER_LITERAL:
            localctx = new IntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1555;
            localctx.t = this.match(SParser.INTEGER_LITERAL);
            break;
        case SParser.HEXA_LITERAL:
            localctx = new HexadecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1556;
            localctx.t = this.match(SParser.HEXA_LITERAL);
            break;
        case SParser.CHAR_LITERAL:
            localctx = new CharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1557;
            localctx.t = this.match(SParser.CHAR_LITERAL);
            break;
        case SParser.DATE_LITERAL:
            localctx = new DateLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1558;
            localctx.t = this.match(SParser.DATE_LITERAL);
            break;
        case SParser.TIME_LITERAL:
            localctx = new TimeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1559;
            localctx.t = this.match(SParser.TIME_LITERAL);
            break;
        case SParser.TEXT_LITERAL:
            localctx = new TextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 1560;
            localctx.t = this.match(SParser.TEXT_LITERAL);
            break;
        case SParser.DECIMAL_LITERAL:
            localctx = new DecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 1561;
            localctx.t = this.match(SParser.DECIMAL_LITERAL);
            break;
        case SParser.DATETIME_LITERAL:
            localctx = new DateTimeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 1562;
            localctx.t = this.match(SParser.DATETIME_LITERAL);
            break;
        case SParser.BOOLEAN_LITERAL:
            localctx = new BooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 1563;
            localctx.t = this.match(SParser.BOOLEAN_LITERAL);
            break;
        case SParser.PERIOD_LITERAL:
            localctx = new PeriodLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 1564;
            localctx.t = this.match(SParser.PERIOD_LITERAL);
            break;
        case SParser.NONE:
            localctx = new NullLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 1565; 
            localctx.n = this.null_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Literal_list_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_literal_list_literal;
    return this;
}

Literal_list_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_list_literalContext.prototype.constructor = Literal_list_literalContext;


 
Literal_list_literalContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LiteralListContext(parser, ctx) {
	Literal_list_literalContext.call(this, parser);
    this.item = null; // Atomic_literalContext;
    Literal_list_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralListContext.prototype = Object.create(Literal_list_literalContext.prototype);
LiteralListContext.prototype.constructor = LiteralListContext;

LiteralListContext.prototype.atomic_literal = function() {
    return this.getTypedRuleContext(Atomic_literalContext,0);
};
LiteralListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterLiteralList(this);
	}
};

LiteralListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitLiteralList(this);
	}
};


function LiteralListItemContext(parser, ctx) {
	Literal_list_literalContext.call(this, parser);
    this.items = null; // Literal_list_literalContext;
    this.item = null; // Atomic_literalContext;
    Literal_list_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralListItemContext.prototype = Object.create(Literal_list_literalContext.prototype);
LiteralListItemContext.prototype.constructor = LiteralListItemContext;

LiteralListItemContext.prototype.COMMA = function() {
    return this.getToken(SParser.COMMA, 0);
};

LiteralListItemContext.prototype.literal_list_literal = function() {
    return this.getTypedRuleContext(Literal_list_literalContext,0);
};

LiteralListItemContext.prototype.atomic_literal = function() {
    return this.getTypedRuleContext(Atomic_literalContext,0);
};
LiteralListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterLiteralListItem(this);
	}
};

LiteralListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitLiteralListItem(this);
	}
};



SParser.prototype.literal_list_literal = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Literal_list_literalContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 232;
    this.enterRecursionRule(localctx, 232, SParser.RULE_literal_list_literal, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new LiteralListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1569; 
        localctx.item = this.atomic_literal();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1576;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,106,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new LiteralListItemContext(this, new Literal_list_literalContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_literal_list_literal);
                this.state = 1571;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1572;
                this.match(SParser.COMMA);
                this.state = 1573; 
                localctx.item = this.atomic_literal(); 
            }
            this.state = 1578;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,106,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Selectable_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_selectable_expression;
    return this;
}

Selectable_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Selectable_expressionContext.prototype.constructor = Selectable_expressionContext;


 
Selectable_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ThisExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // This_expressionContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ThisExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
ThisExpressionContext.prototype.constructor = ThisExpressionContext;

ThisExpressionContext.prototype.this_expression = function() {
    return this.getTypedRuleContext(This_expressionContext,0);
};
ThisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterThisExpression(this);
	}
};

ThisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitThisExpression(this);
	}
};


function ParenthesisExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // Parenthesis_expressionContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesisExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
ParenthesisExpressionContext.prototype.constructor = ParenthesisExpressionContext;

ParenthesisExpressionContext.prototype.parenthesis_expression = function() {
    return this.getTypedRuleContext(Parenthesis_expressionContext,0);
};
ParenthesisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterParenthesisExpression(this);
	}
};

ParenthesisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitParenthesisExpression(this);
	}
};


function LiteralExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // Literal_expressionContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
LiteralExpressionContext.prototype.constructor = LiteralExpressionContext;

LiteralExpressionContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};
LiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterLiteralExpression(this);
	}
};

LiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitLiteralExpression(this);
	}
};


function IdentifierExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // IdentifierContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdentifierExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
IdentifierExpressionContext.prototype.constructor = IdentifierExpressionContext;

IdentifierExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
IdentifierExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterIdentifierExpression(this);
	}
};

IdentifierExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitIdentifierExpression(this);
	}
};



SParser.prototype.selectable_expression = function() {

    var localctx = new Selectable_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, SParser.RULE_selectable_expression);
    try {
        this.state = 1583;
        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ParenthesisExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1579; 
            localctx.exp = this.parenthesis_expression();
            break;

        case 2:
            localctx = new LiteralExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1580; 
            localctx.exp = this.literal_expression();
            break;

        case 3:
            localctx = new IdentifierExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1581; 
            localctx.exp = this.identifier();
            break;

        case 4:
            localctx = new ThisExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1582; 
            localctx.exp = this.this_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function This_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_this_expression;
    return this;
}

This_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
This_expressionContext.prototype.constructor = This_expressionContext;

This_expressionContext.prototype.SELF = function() {
    return this.getToken(SParser.SELF, 0);
};

This_expressionContext.prototype.THIS = function() {
    return this.getToken(SParser.THIS, 0);
};

This_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterThis_expression(this);
	}
};

This_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitThis_expression(this);
	}
};




SParser.prototype.this_expression = function() {

    var localctx = new This_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, SParser.RULE_this_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1585;
        _la = this._input.LA(1);
        if(!(_la===SParser.SELF || _la===SParser.THIS)) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_parenthesis_expression;
    this.exp = null; // ExpressionContext
    return this;
}

Parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parenthesis_expressionContext.prototype.constructor = Parenthesis_expressionContext;

Parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Parenthesis_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterParenthesis_expression(this);
	}
};

Parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitParenthesis_expression(this);
	}
};




SParser.prototype.parenthesis_expression = function() {

    var localctx = new Parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, SParser.RULE_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1587;
        this.match(SParser.LPAR);
        this.state = 1588; 
        localctx.exp = this.expression(0);
        this.state = 1589;
        this.match(SParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_literal_expression;
    return this;
}

Literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_expressionContext.prototype.constructor = Literal_expressionContext;


 
Literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CollectionLiteralContext(parser, ctx) {
	Literal_expressionContext.call(this, parser);
    this.exp = null; // Collection_literalContext;
    Literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CollectionLiteralContext.prototype = Object.create(Literal_expressionContext.prototype);
CollectionLiteralContext.prototype.constructor = CollectionLiteralContext;

CollectionLiteralContext.prototype.collection_literal = function() {
    return this.getTypedRuleContext(Collection_literalContext,0);
};
CollectionLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCollectionLiteral(this);
	}
};

CollectionLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCollectionLiteral(this);
	}
};


function AtomicLiteralContext(parser, ctx) {
	Literal_expressionContext.call(this, parser);
    this.exp = null; // Atomic_literalContext;
    Literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtomicLiteralContext.prototype = Object.create(Literal_expressionContext.prototype);
AtomicLiteralContext.prototype.constructor = AtomicLiteralContext;

AtomicLiteralContext.prototype.atomic_literal = function() {
    return this.getTypedRuleContext(Atomic_literalContext,0);
};
AtomicLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAtomicLiteral(this);
	}
};

AtomicLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAtomicLiteral(this);
	}
};



SParser.prototype.literal_expression = function() {

    var localctx = new Literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, SParser.RULE_literal_expression);
    try {
        this.state = 1593;
        switch(this._input.LA(1)) {
        case SParser.NONE:
        case SParser.BOOLEAN_LITERAL:
        case SParser.CHAR_LITERAL:
        case SParser.MIN_INTEGER:
        case SParser.MAX_INTEGER:
        case SParser.TEXT_LITERAL:
        case SParser.INTEGER_LITERAL:
        case SParser.HEXA_LITERAL:
        case SParser.DECIMAL_LITERAL:
        case SParser.DATETIME_LITERAL:
        case SParser.TIME_LITERAL:
        case SParser.DATE_LITERAL:
        case SParser.PERIOD_LITERAL:
            localctx = new AtomicLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1591; 
            localctx.exp = this.atomic_literal();
            break;
        case SParser.LPAR:
        case SParser.LBRAK:
        case SParser.LCURL:
        case SParser.LT:
            localctx = new CollectionLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1592; 
            localctx.exp = this.collection_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collection_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_collection_literal;
    return this;
}

Collection_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collection_literalContext.prototype.constructor = Collection_literalContext;


 
Collection_literalContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ListLiteralContext(parser, ctx) {
	Collection_literalContext.call(this, parser);
    this.exp = null; // List_literalContext;
    Collection_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListLiteralContext.prototype = Object.create(Collection_literalContext.prototype);
ListLiteralContext.prototype.constructor = ListLiteralContext;

ListLiteralContext.prototype.list_literal = function() {
    return this.getTypedRuleContext(List_literalContext,0);
};
ListLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterListLiteral(this);
	}
};

ListLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitListLiteral(this);
	}
};


function RangeLiteralContext(parser, ctx) {
	Collection_literalContext.call(this, parser);
    this.exp = null; // Range_literalContext;
    Collection_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RangeLiteralContext.prototype = Object.create(Collection_literalContext.prototype);
RangeLiteralContext.prototype.constructor = RangeLiteralContext;

RangeLiteralContext.prototype.range_literal = function() {
    return this.getTypedRuleContext(Range_literalContext,0);
};
RangeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterRangeLiteral(this);
	}
};

RangeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitRangeLiteral(this);
	}
};


function TupleLiteralContext(parser, ctx) {
	Collection_literalContext.call(this, parser);
    this.exp = null; // Tuple_literalContext;
    Collection_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TupleLiteralContext.prototype = Object.create(Collection_literalContext.prototype);
TupleLiteralContext.prototype.constructor = TupleLiteralContext;

TupleLiteralContext.prototype.tuple_literal = function() {
    return this.getTypedRuleContext(Tuple_literalContext,0);
};
TupleLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterTupleLiteral(this);
	}
};

TupleLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitTupleLiteral(this);
	}
};


function SetLiteralContext(parser, ctx) {
	Collection_literalContext.call(this, parser);
    this.exp = null; // Set_literalContext;
    Collection_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetLiteralContext.prototype = Object.create(Collection_literalContext.prototype);
SetLiteralContext.prototype.constructor = SetLiteralContext;

SetLiteralContext.prototype.set_literal = function() {
    return this.getTypedRuleContext(Set_literalContext,0);
};
SetLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSetLiteral(this);
	}
};

SetLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSetLiteral(this);
	}
};


function DictLiteralContext(parser, ctx) {
	Collection_literalContext.call(this, parser);
    this.exp = null; // Dict_literalContext;
    Collection_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DictLiteralContext.prototype = Object.create(Collection_literalContext.prototype);
DictLiteralContext.prototype.constructor = DictLiteralContext;

DictLiteralContext.prototype.dict_literal = function() {
    return this.getTypedRuleContext(Dict_literalContext,0);
};
DictLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDictLiteral(this);
	}
};

DictLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDictLiteral(this);
	}
};



SParser.prototype.collection_literal = function() {

    var localctx = new Collection_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, SParser.RULE_collection_literal);
    try {
        this.state = 1600;
        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
        switch(la_) {
        case 1:
            localctx = new RangeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1595; 
            localctx.exp = this.range_literal();
            break;

        case 2:
            localctx = new ListLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1596; 
            localctx.exp = this.list_literal();
            break;

        case 3:
            localctx = new SetLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1597; 
            localctx.exp = this.set_literal();
            break;

        case 4:
            localctx = new DictLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1598; 
            localctx.exp = this.dict_literal();
            break;

        case 5:
            localctx = new TupleLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1599; 
            localctx.exp = this.tuple_literal();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Tuple_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_tuple_literal;
    this.items = null; // Expression_tupleContext
    return this;
}

Tuple_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tuple_literalContext.prototype.constructor = Tuple_literalContext;

Tuple_literalContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Tuple_literalContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Tuple_literalContext.prototype.expression_tuple = function() {
    return this.getTypedRuleContext(Expression_tupleContext,0);
};

Tuple_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterTuple_literal(this);
	}
};

Tuple_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitTuple_literal(this);
	}
};




SParser.prototype.tuple_literal = function() {

    var localctx = new Tuple_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, SParser.RULE_tuple_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1602;
        this.match(SParser.LPAR);
        this.state = 1604;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SParser.LPAR) | (1 << SParser.LBRAK) | (1 << SParser.LCURL))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SParser.MINUS - 32)) | (1 << (SParser.LT - 32)) | (1 << (SParser.CODE - 32)) | (1 << (SParser.DOCUMENT - 32)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (SParser.EXECUTE - 87)) | (1 << (SParser.FETCH - 87)) | (1 << (SParser.MUTABLE - 87)) | (1 << (SParser.NONE - 87)) | (1 << (SParser.NOT - 87)) | (1 << (SParser.READ - 87)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (SParser.SELF - 121)) | (1 << (SParser.SORTED - 121)) | (1 << (SParser.THIS - 121)) | (1 << (SParser.BOOLEAN_LITERAL - 121)) | (1 << (SParser.CHAR_LITERAL - 121)) | (1 << (SParser.MIN_INTEGER - 121)) | (1 << (SParser.MAX_INTEGER - 121)) | (1 << (SParser.SYMBOL_IDENTIFIER - 121)) | (1 << (SParser.TYPE_IDENTIFIER - 121)) | (1 << (SParser.VARIABLE_IDENTIFIER - 121)) | (1 << (SParser.TEXT_LITERAL - 121)) | (1 << (SParser.INTEGER_LITERAL - 121)) | (1 << (SParser.HEXA_LITERAL - 121)) | (1 << (SParser.DECIMAL_LITERAL - 121)) | (1 << (SParser.DATETIME_LITERAL - 121)) | (1 << (SParser.TIME_LITERAL - 121)) | (1 << (SParser.DATE_LITERAL - 121)) | (1 << (SParser.PERIOD_LITERAL - 121)))) !== 0)) {
            this.state = 1603; 
            localctx.items = this.expression_tuple(0);
        }

        this.state = 1606;
        this.match(SParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dict_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_dict_literal;
    this.items = null; // Dict_entry_listContext
    return this;
}

Dict_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dict_literalContext.prototype.constructor = Dict_literalContext;

Dict_literalContext.prototype.LCURL = function() {
    return this.getToken(SParser.LCURL, 0);
};

Dict_literalContext.prototype.RCURL = function() {
    return this.getToken(SParser.RCURL, 0);
};

Dict_literalContext.prototype.dict_entry_list = function() {
    return this.getTypedRuleContext(Dict_entry_listContext,0);
};

Dict_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDict_literal(this);
	}
};

Dict_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDict_literal(this);
	}
};




SParser.prototype.dict_literal = function() {

    var localctx = new Dict_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, SParser.RULE_dict_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1608;
        this.match(SParser.LCURL);
        this.state = 1610;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SParser.LPAR) | (1 << SParser.LBRAK) | (1 << SParser.LCURL))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SParser.MINUS - 32)) | (1 << (SParser.LT - 32)) | (1 << (SParser.CODE - 32)) | (1 << (SParser.DOCUMENT - 32)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (SParser.EXECUTE - 87)) | (1 << (SParser.FETCH - 87)) | (1 << (SParser.MUTABLE - 87)) | (1 << (SParser.NONE - 87)) | (1 << (SParser.NOT - 87)) | (1 << (SParser.READ - 87)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (SParser.SELF - 121)) | (1 << (SParser.SORTED - 121)) | (1 << (SParser.THIS - 121)) | (1 << (SParser.BOOLEAN_LITERAL - 121)) | (1 << (SParser.CHAR_LITERAL - 121)) | (1 << (SParser.MIN_INTEGER - 121)) | (1 << (SParser.MAX_INTEGER - 121)) | (1 << (SParser.SYMBOL_IDENTIFIER - 121)) | (1 << (SParser.TYPE_IDENTIFIER - 121)) | (1 << (SParser.VARIABLE_IDENTIFIER - 121)) | (1 << (SParser.TEXT_LITERAL - 121)) | (1 << (SParser.INTEGER_LITERAL - 121)) | (1 << (SParser.HEXA_LITERAL - 121)) | (1 << (SParser.DECIMAL_LITERAL - 121)) | (1 << (SParser.DATETIME_LITERAL - 121)) | (1 << (SParser.TIME_LITERAL - 121)) | (1 << (SParser.DATE_LITERAL - 121)) | (1 << (SParser.PERIOD_LITERAL - 121)))) !== 0)) {
            this.state = 1609; 
            localctx.items = this.dict_entry_list(0);
        }

        this.state = 1612;
        this.match(SParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_tupleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_expression_tuple;
    return this;
}

Expression_tupleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_tupleContext.prototype.constructor = Expression_tupleContext;


 
Expression_tupleContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ValueTupleContext(parser, ctx) {
	Expression_tupleContext.call(this, parser);
    this.item = null; // ExpressionContext;
    Expression_tupleContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValueTupleContext.prototype = Object.create(Expression_tupleContext.prototype);
ValueTupleContext.prototype.constructor = ValueTupleContext;

ValueTupleContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ValueTupleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterValueTuple(this);
	}
};

ValueTupleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitValueTuple(this);
	}
};


function ValueTupleItemContext(parser, ctx) {
	Expression_tupleContext.call(this, parser);
    this.items = null; // Expression_tupleContext;
    this.item = null; // ExpressionContext;
    Expression_tupleContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValueTupleItemContext.prototype = Object.create(Expression_tupleContext.prototype);
ValueTupleItemContext.prototype.constructor = ValueTupleItemContext;

ValueTupleItemContext.prototype.COMMA = function() {
    return this.getToken(SParser.COMMA, 0);
};

ValueTupleItemContext.prototype.expression_tuple = function() {
    return this.getTypedRuleContext(Expression_tupleContext,0);
};

ValueTupleItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ValueTupleItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterValueTupleItem(this);
	}
};

ValueTupleItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitValueTupleItem(this);
	}
};



SParser.prototype.expression_tuple = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Expression_tupleContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 248;
    this.enterRecursionRule(localctx, 248, SParser.RULE_expression_tuple, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new ValueTupleContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1615; 
        localctx.item = this.expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1622;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,112,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ValueTupleItemContext(this, new Expression_tupleContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_expression_tuple);
                this.state = 1617;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1618;
                this.match(SParser.COMMA);
                this.state = 1619; 
                localctx.item = this.expression(0); 
            }
            this.state = 1624;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,112,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Dict_entry_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_dict_entry_list;
    return this;
}

Dict_entry_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dict_entry_listContext.prototype.constructor = Dict_entry_listContext;


 
Dict_entry_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function DictEntryListContext(parser, ctx) {
	Dict_entry_listContext.call(this, parser);
    this.item = null; // Dict_entryContext;
    Dict_entry_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DictEntryListContext.prototype = Object.create(Dict_entry_listContext.prototype);
DictEntryListContext.prototype.constructor = DictEntryListContext;

DictEntryListContext.prototype.dict_entry = function() {
    return this.getTypedRuleContext(Dict_entryContext,0);
};
DictEntryListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDictEntryList(this);
	}
};

DictEntryListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDictEntryList(this);
	}
};


function DictEntryListItemContext(parser, ctx) {
	Dict_entry_listContext.call(this, parser);
    this.items = null; // Dict_entry_listContext;
    this.item = null; // Dict_entryContext;
    Dict_entry_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DictEntryListItemContext.prototype = Object.create(Dict_entry_listContext.prototype);
DictEntryListItemContext.prototype.constructor = DictEntryListItemContext;

DictEntryListItemContext.prototype.COMMA = function() {
    return this.getToken(SParser.COMMA, 0);
};

DictEntryListItemContext.prototype.dict_entry_list = function() {
    return this.getTypedRuleContext(Dict_entry_listContext,0);
};

DictEntryListItemContext.prototype.dict_entry = function() {
    return this.getTypedRuleContext(Dict_entryContext,0);
};
DictEntryListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDictEntryListItem(this);
	}
};

DictEntryListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDictEntryListItem(this);
	}
};



SParser.prototype.dict_entry_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Dict_entry_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 250;
    this.enterRecursionRule(localctx, 250, SParser.RULE_dict_entry_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new DictEntryListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1626; 
        localctx.item = this.dict_entry();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1633;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,113,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new DictEntryListItemContext(this, new Dict_entry_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_dict_entry_list);
                this.state = 1628;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1629;
                this.match(SParser.COMMA);
                this.state = 1630; 
                localctx.item = this.dict_entry(); 
            }
            this.state = 1635;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,113,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Dict_entryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_dict_entry;
    this.key = null; // ExpressionContext
    this.value = null; // ExpressionContext
    return this;
}

Dict_entryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dict_entryContext.prototype.constructor = Dict_entryContext;

Dict_entryContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

Dict_entryContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Dict_entryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDict_entry(this);
	}
};

Dict_entryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDict_entry(this);
	}
};




SParser.prototype.dict_entry = function() {

    var localctx = new Dict_entryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, SParser.RULE_dict_entry);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1636; 
        localctx.key = this.expression(0);
        this.state = 1637;
        this.match(SParser.COLON);
        this.state = 1638; 
        localctx.value = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Slice_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_slice_arguments;
    return this;
}

Slice_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Slice_argumentsContext.prototype.constructor = Slice_argumentsContext;


 
Slice_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SliceFirstAndLastContext(parser, ctx) {
	Slice_argumentsContext.call(this, parser);
    this.first = null; // ExpressionContext;
    this.last = null; // ExpressionContext;
    Slice_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceFirstAndLastContext.prototype = Object.create(Slice_argumentsContext.prototype);
SliceFirstAndLastContext.prototype.constructor = SliceFirstAndLastContext;

SliceFirstAndLastContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

SliceFirstAndLastContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
SliceFirstAndLastContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSliceFirstAndLast(this);
	}
};

SliceFirstAndLastContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSliceFirstAndLast(this);
	}
};


function SliceLastOnlyContext(parser, ctx) {
	Slice_argumentsContext.call(this, parser);
    this.last = null; // ExpressionContext;
    Slice_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceLastOnlyContext.prototype = Object.create(Slice_argumentsContext.prototype);
SliceLastOnlyContext.prototype.constructor = SliceLastOnlyContext;

SliceLastOnlyContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

SliceLastOnlyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SliceLastOnlyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSliceLastOnly(this);
	}
};

SliceLastOnlyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSliceLastOnly(this);
	}
};


function SliceFirstOnlyContext(parser, ctx) {
	Slice_argumentsContext.call(this, parser);
    this.first = null; // ExpressionContext;
    Slice_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceFirstOnlyContext.prototype = Object.create(Slice_argumentsContext.prototype);
SliceFirstOnlyContext.prototype.constructor = SliceFirstOnlyContext;

SliceFirstOnlyContext.prototype.COLON = function() {
    return this.getToken(SParser.COLON, 0);
};

SliceFirstOnlyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SliceFirstOnlyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSliceFirstOnly(this);
	}
};

SliceFirstOnlyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSliceFirstOnly(this);
	}
};



SParser.prototype.slice_arguments = function() {

    var localctx = new Slice_argumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, SParser.RULE_slice_arguments);
    try {
        this.state = 1649;
        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SliceFirstAndLastContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1640; 
            localctx.first = this.expression(0);
            this.state = 1641;
            this.match(SParser.COLON);
            this.state = 1642; 
            localctx.last = this.expression(0);
            break;

        case 2:
            localctx = new SliceFirstOnlyContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1644; 
            localctx.first = this.expression(0);
            this.state = 1645;
            this.match(SParser.COLON);
            break;

        case 3:
            localctx = new SliceLastOnlyContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1647;
            this.match(SParser.COLON);
            this.state = 1648; 
            localctx.last = this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assign_variable_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_assign_variable_statement;
    this.name = null; // Variable_identifierContext
    this.exp = null; // ExpressionContext
    return this;
}

Assign_variable_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assign_variable_statementContext.prototype.constructor = Assign_variable_statementContext;

Assign_variable_statementContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Assign_variable_statementContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Assign_variable_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Assign_variable_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAssign_variable_statement(this);
	}
};

Assign_variable_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAssign_variable_statement(this);
	}
};




SParser.prototype.assign_variable_statement = function() {

    var localctx = new Assign_variable_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, SParser.RULE_assign_variable_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1651; 
        localctx.name = this.variable_identifier();
        this.state = 1652; 
        this.assign();
        this.state = 1653; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assignable_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_assignable_instance;
    return this;
}

Assignable_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assignable_instanceContext.prototype.constructor = Assignable_instanceContext;


 
Assignable_instanceContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ChildInstanceContext(parser, ctx) {
	Assignable_instanceContext.call(this, parser);
    this.parent = null; // Assignable_instanceContext;
    this.child = null; // Child_instanceContext;
    Assignable_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ChildInstanceContext.prototype = Object.create(Assignable_instanceContext.prototype);
ChildInstanceContext.prototype.constructor = ChildInstanceContext;

ChildInstanceContext.prototype.assignable_instance = function() {
    return this.getTypedRuleContext(Assignable_instanceContext,0);
};

ChildInstanceContext.prototype.child_instance = function() {
    return this.getTypedRuleContext(Child_instanceContext,0);
};
ChildInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterChildInstance(this);
	}
};

ChildInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitChildInstance(this);
	}
};


function RootInstanceContext(parser, ctx) {
	Assignable_instanceContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    Assignable_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RootInstanceContext.prototype = Object.create(Assignable_instanceContext.prototype);
RootInstanceContext.prototype.constructor = RootInstanceContext;

RootInstanceContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
RootInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterRootInstance(this);
	}
};

RootInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitRootInstance(this);
	}
};



SParser.prototype.assignable_instance = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Assignable_instanceContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 258;
    this.enterRecursionRule(localctx, 258, SParser.RULE_assignable_instance, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new RootInstanceContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1656; 
        localctx.name = this.variable_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1662;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,115,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ChildInstanceContext(this, new Assignable_instanceContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_assignable_instance);
                this.state = 1658;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1659; 
                localctx.child = this.child_instance(); 
            }
            this.state = 1664;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,115,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Is_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_is_expression;
    return this;
}

Is_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Is_expressionContext.prototype.constructor = Is_expressionContext;


 
Is_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function IsATypeExpressionContext(parser, ctx) {
	Is_expressionContext.call(this, parser);
    this.typ = null; // Category_or_any_typeContext;
    Is_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsATypeExpressionContext.prototype = Object.create(Is_expressionContext.prototype);
IsATypeExpressionContext.prototype.constructor = IsATypeExpressionContext;

IsATypeExpressionContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(SParser.VARIABLE_IDENTIFIER, 0);
};

IsATypeExpressionContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};
IsATypeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterIsATypeExpression(this);
	}
};

IsATypeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitIsATypeExpression(this);
	}
};


function IsOtherExpressionContext(parser, ctx) {
	Is_expressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Is_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsOtherExpressionContext.prototype = Object.create(Is_expressionContext.prototype);
IsOtherExpressionContext.prototype.constructor = IsOtherExpressionContext;

IsOtherExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
IsOtherExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterIsOtherExpression(this);
	}
};

IsOtherExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitIsOtherExpression(this);
	}
};



SParser.prototype.is_expression = function() {

    var localctx = new Is_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, SParser.RULE_is_expression);
    try {
        this.state = 1669;
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        switch(la_) {
        case 1:
            localctx = new IsATypeExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1665;
            if (!( this.willBeAOrAn())) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.willBeAOrAn()");
            }
            this.state = 1666;
            this.match(SParser.VARIABLE_IDENTIFIER);
            this.state = 1667; 
            localctx.typ = this.category_or_any_type();
            break;

        case 2:
            localctx = new IsOtherExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1668; 
            localctx.exp = this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_operator;
    return this;
}

OperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorContext.prototype.constructor = OperatorContext;


 
OperatorContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function OperatorPlusContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorPlusContext.prototype = Object.create(OperatorContext.prototype);
OperatorPlusContext.prototype.constructor = OperatorPlusContext;

OperatorPlusContext.prototype.PLUS = function() {
    return this.getToken(SParser.PLUS, 0);
};
OperatorPlusContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterOperatorPlus(this);
	}
};

OperatorPlusContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitOperatorPlus(this);
	}
};


function OperatorDivideContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorDivideContext.prototype = Object.create(OperatorContext.prototype);
OperatorDivideContext.prototype.constructor = OperatorDivideContext;

OperatorDivideContext.prototype.divide = function() {
    return this.getTypedRuleContext(DivideContext,0);
};
OperatorDivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterOperatorDivide(this);
	}
};

OperatorDivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitOperatorDivide(this);
	}
};


function OperatorIDivideContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorIDivideContext.prototype = Object.create(OperatorContext.prototype);
OperatorIDivideContext.prototype.constructor = OperatorIDivideContext;

OperatorIDivideContext.prototype.idivide = function() {
    return this.getTypedRuleContext(IdivideContext,0);
};
OperatorIDivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterOperatorIDivide(this);
	}
};

OperatorIDivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitOperatorIDivide(this);
	}
};


function OperatorMultiplyContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorMultiplyContext.prototype = Object.create(OperatorContext.prototype);
OperatorMultiplyContext.prototype.constructor = OperatorMultiplyContext;

OperatorMultiplyContext.prototype.multiply = function() {
    return this.getTypedRuleContext(MultiplyContext,0);
};
OperatorMultiplyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterOperatorMultiply(this);
	}
};

OperatorMultiplyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitOperatorMultiply(this);
	}
};


function OperatorMinusContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorMinusContext.prototype = Object.create(OperatorContext.prototype);
OperatorMinusContext.prototype.constructor = OperatorMinusContext;

OperatorMinusContext.prototype.MINUS = function() {
    return this.getToken(SParser.MINUS, 0);
};
OperatorMinusContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterOperatorMinus(this);
	}
};

OperatorMinusContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitOperatorMinus(this);
	}
};


function OperatorModuloContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorModuloContext.prototype = Object.create(OperatorContext.prototype);
OperatorModuloContext.prototype.constructor = OperatorModuloContext;

OperatorModuloContext.prototype.modulo = function() {
    return this.getTypedRuleContext(ModuloContext,0);
};
OperatorModuloContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterOperatorModulo(this);
	}
};

OperatorModuloContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitOperatorModulo(this);
	}
};



SParser.prototype.operator = function() {

    var localctx = new OperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, SParser.RULE_operator);
    try {
        this.state = 1677;
        switch(this._input.LA(1)) {
        case SParser.PLUS:
            localctx = new OperatorPlusContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1671;
            this.match(SParser.PLUS);
            break;
        case SParser.MINUS:
            localctx = new OperatorMinusContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1672;
            this.match(SParser.MINUS);
            break;
        case SParser.STAR:
            localctx = new OperatorMultiplyContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1673; 
            this.multiply();
            break;
        case SParser.SLASH:
            localctx = new OperatorDivideContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1674; 
            this.divide();
            break;
        case SParser.BSLASH:
            localctx = new OperatorIDivideContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1675; 
            this.idivide();
            break;
        case SParser.PERCENT:
        case SParser.MODULO:
            localctx = new OperatorModuloContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1676; 
            this.modulo();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Key_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_key_token;
    this.i1 = null; // Token
    return this;
}

Key_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Key_tokenContext.prototype.constructor = Key_tokenContext;

Key_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(SParser.VARIABLE_IDENTIFIER, 0);
};

Key_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterKey_token(this);
	}
};

Key_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitKey_token(this);
	}
};




SParser.prototype.key_token = function() {

    var localctx = new Key_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, SParser.RULE_key_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1679;
        localctx.i1 = this.match(SParser.VARIABLE_IDENTIFIER);
        this.state = 1680;
        if (!( this.isText(localctx.i1,"key"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"key\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Value_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_value_token;
    this.i1 = null; // Token
    return this;
}

Value_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Value_tokenContext.prototype.constructor = Value_tokenContext;

Value_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(SParser.VARIABLE_IDENTIFIER, 0);
};

Value_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterValue_token(this);
	}
};

Value_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitValue_token(this);
	}
};




SParser.prototype.value_token = function() {

    var localctx = new Value_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, SParser.RULE_value_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1682;
        localctx.i1 = this.match(SParser.VARIABLE_IDENTIFIER);
        this.state = 1683;
        if (!( this.isText(localctx.i1,"value"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"value\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Symbols_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_symbols_token;
    this.i1 = null; // Token
    return this;
}

Symbols_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Symbols_tokenContext.prototype.constructor = Symbols_tokenContext;

Symbols_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(SParser.VARIABLE_IDENTIFIER, 0);
};

Symbols_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterSymbols_token(this);
	}
};

Symbols_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitSymbols_token(this);
	}
};




SParser.prototype.symbols_token = function() {

    var localctx = new Symbols_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, SParser.RULE_symbols_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1685;
        localctx.i1 = this.match(SParser.VARIABLE_IDENTIFIER);
        this.state = 1686;
        if (!( this.isText(localctx.i1,"symbols"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"symbols\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_assign;
    return this;
}

AssignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignContext.prototype.constructor = AssignContext;

AssignContext.prototype.EQ = function() {
    return this.getToken(SParser.EQ, 0);
};

AssignContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterAssign(this);
	}
};

AssignContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitAssign(this);
	}
};




SParser.prototype.assign = function() {

    var localctx = new AssignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, SParser.RULE_assign);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1688;
        this.match(SParser.EQ);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiplyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_multiply;
    return this;
}

MultiplyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplyContext.prototype.constructor = MultiplyContext;

MultiplyContext.prototype.STAR = function() {
    return this.getToken(SParser.STAR, 0);
};

MultiplyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterMultiply(this);
	}
};

MultiplyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitMultiply(this);
	}
};




SParser.prototype.multiply = function() {

    var localctx = new MultiplyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, SParser.RULE_multiply);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1690;
        this.match(SParser.STAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DivideContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_divide;
    return this;
}

DivideContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DivideContext.prototype.constructor = DivideContext;

DivideContext.prototype.SLASH = function() {
    return this.getToken(SParser.SLASH, 0);
};

DivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterDivide(this);
	}
};

DivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitDivide(this);
	}
};




SParser.prototype.divide = function() {

    var localctx = new DivideContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, SParser.RULE_divide);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1692;
        this.match(SParser.SLASH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdivideContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_idivide;
    return this;
}

IdivideContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdivideContext.prototype.constructor = IdivideContext;

IdivideContext.prototype.BSLASH = function() {
    return this.getToken(SParser.BSLASH, 0);
};

IdivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterIdivide(this);
	}
};

IdivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitIdivide(this);
	}
};




SParser.prototype.idivide = function() {

    var localctx = new IdivideContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, SParser.RULE_idivide);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1694;
        this.match(SParser.BSLASH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuloContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_modulo;
    return this;
}

ModuloContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuloContext.prototype.constructor = ModuloContext;

ModuloContext.prototype.PERCENT = function() {
    return this.getToken(SParser.PERCENT, 0);
};

ModuloContext.prototype.MODULO = function() {
    return this.getToken(SParser.MODULO, 0);
};

ModuloContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterModulo(this);
	}
};

ModuloContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitModulo(this);
	}
};




SParser.prototype.modulo = function() {

    var localctx = new ModuloContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, SParser.RULE_modulo);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1696;
        _la = this._input.LA(1);
        if(!(_la===SParser.PERCENT || _la===SParser.MODULO)) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_javascript_statement;
    return this;
}

Javascript_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_statementContext.prototype.constructor = Javascript_statementContext;


 
Javascript_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavascriptStatementContext(parser, ctx) {
	Javascript_statementContext.call(this, parser);
    this.exp = null; // Javascript_expressionContext;
    Javascript_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptStatementContext.prototype = Object.create(Javascript_statementContext.prototype);
JavascriptStatementContext.prototype.constructor = JavascriptStatementContext;

JavascriptStatementContext.prototype.SEMI = function() {
    return this.getToken(SParser.SEMI, 0);
};

JavascriptStatementContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascriptStatement(this);
	}
};

JavascriptStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascriptStatement(this);
	}
};


function JavascriptReturnStatementContext(parser, ctx) {
	Javascript_statementContext.call(this, parser);
    this.exp = null; // Javascript_expressionContext;
    Javascript_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptReturnStatementContext.prototype = Object.create(Javascript_statementContext.prototype);
JavascriptReturnStatementContext.prototype.constructor = JavascriptReturnStatementContext;

JavascriptReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(SParser.RETURN, 0);
};

JavascriptReturnStatementContext.prototype.SEMI = function() {
    return this.getToken(SParser.SEMI, 0);
};

JavascriptReturnStatementContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascriptReturnStatement(this);
	}
};

JavascriptReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascriptReturnStatement(this);
	}
};



SParser.prototype.javascript_statement = function() {

    var localctx = new Javascript_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, SParser.RULE_javascript_statement);
    try {
        this.state = 1705;
        switch(this._input.LA(1)) {
        case SParser.RETURN:
            localctx = new JavascriptReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1698;
            this.match(SParser.RETURN);
            this.state = 1699; 
            localctx.exp = this.javascript_expression(0);
            this.state = 1700;
            this.match(SParser.SEMI);
            break;
        case SParser.LPAR:
        case SParser.LBRAK:
        case SParser.BOOLEAN:
        case SParser.CHARACTER:
        case SParser.TEXT:
        case SParser.INTEGER:
        case SParser.DECIMAL:
        case SParser.DATE:
        case SParser.TIME:
        case SParser.DATETIME:
        case SParser.PERIOD:
        case SParser.READ:
        case SParser.SELF:
        case SParser.TEST:
        case SParser.THIS:
        case SParser.WRITE:
        case SParser.BOOLEAN_LITERAL:
        case SParser.CHAR_LITERAL:
        case SParser.SYMBOL_IDENTIFIER:
        case SParser.TYPE_IDENTIFIER:
        case SParser.VARIABLE_IDENTIFIER:
        case SParser.DOLLAR_IDENTIFIER:
        case SParser.TEXT_LITERAL:
        case SParser.INTEGER_LITERAL:
        case SParser.DECIMAL_LITERAL:
            localctx = new JavascriptStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1702; 
            localctx.exp = this.javascript_expression(0);
            this.state = 1703;
            this.match(SParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_javascript_expression;
    return this;
}

Javascript_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_expressionContext.prototype.constructor = Javascript_expressionContext;


 
Javascript_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavascriptSelectorExpressionContext(parser, ctx) {
	Javascript_expressionContext.call(this, parser);
    this.parent = null; // Javascript_expressionContext;
    this.child = null; // Javascript_selector_expressionContext;
    Javascript_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptSelectorExpressionContext.prototype = Object.create(Javascript_expressionContext.prototype);
JavascriptSelectorExpressionContext.prototype.constructor = JavascriptSelectorExpressionContext;

JavascriptSelectorExpressionContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};

JavascriptSelectorExpressionContext.prototype.javascript_selector_expression = function() {
    return this.getTypedRuleContext(Javascript_selector_expressionContext,0);
};
JavascriptSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascriptSelectorExpression(this);
	}
};

JavascriptSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascriptSelectorExpression(this);
	}
};


function JavascriptPrimaryExpressionContext(parser, ctx) {
	Javascript_expressionContext.call(this, parser);
    this.exp = null; // Javascript_primary_expressionContext;
    Javascript_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptPrimaryExpressionContext.prototype = Object.create(Javascript_expressionContext.prototype);
JavascriptPrimaryExpressionContext.prototype.constructor = JavascriptPrimaryExpressionContext;

JavascriptPrimaryExpressionContext.prototype.javascript_primary_expression = function() {
    return this.getTypedRuleContext(Javascript_primary_expressionContext,0);
};
JavascriptPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascriptPrimaryExpression(this);
	}
};

JavascriptPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascriptPrimaryExpression(this);
	}
};



SParser.prototype.javascript_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Javascript_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 282;
    this.enterRecursionRule(localctx, 282, SParser.RULE_javascript_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavascriptPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1708; 
        localctx.exp = this.javascript_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1714;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,119,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavascriptSelectorExpressionContext(this, new Javascript_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_javascript_expression);
                this.state = 1710;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1711; 
                localctx.child = this.javascript_selector_expression(); 
            }
            this.state = 1716;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,119,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Javascript_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_javascript_primary_expression;
    return this;
}

Javascript_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_primary_expressionContext.prototype.constructor = Javascript_primary_expressionContext;

Javascript_primary_expressionContext.prototype.javascript_this_expression = function() {
    return this.getTypedRuleContext(Javascript_this_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_parenthesis_expression = function() {
    return this.getTypedRuleContext(Javascript_parenthesis_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_identifier_expression = function() {
    return this.getTypedRuleContext(Javascript_identifier_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_literal_expression = function() {
    return this.getTypedRuleContext(Javascript_literal_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_method_expression = function() {
    return this.getTypedRuleContext(Javascript_method_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.javascript_item_expression = function() {
    return this.getTypedRuleContext(Javascript_item_expressionContext,0);
};

Javascript_primary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascript_primary_expression(this);
	}
};

Javascript_primary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascript_primary_expression(this);
	}
};




SParser.prototype.javascript_primary_expression = function() {

    var localctx = new Javascript_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, SParser.RULE_javascript_primary_expression);
    try {
        this.state = 1723;
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1717; 
            this.javascript_this_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1718; 
            this.javascript_parenthesis_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1719; 
            this.javascript_identifier_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1720; 
            this.javascript_literal_expression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1721; 
            this.javascript_method_expression();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1722; 
            this.javascript_item_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_this_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_javascript_this_expression;
    return this;
}

Javascript_this_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_this_expressionContext.prototype.constructor = Javascript_this_expressionContext;

Javascript_this_expressionContext.prototype.this_expression = function() {
    return this.getTypedRuleContext(This_expressionContext,0);
};

Javascript_this_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascript_this_expression(this);
	}
};

Javascript_this_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascript_this_expression(this);
	}
};




SParser.prototype.javascript_this_expression = function() {

    var localctx = new Javascript_this_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, SParser.RULE_javascript_this_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1725; 
        this.this_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_javascript_selector_expression;
    return this;
}

Javascript_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_selector_expressionContext.prototype.constructor = Javascript_selector_expressionContext;


 
Javascript_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaScriptMemberExpressionContext(parser, ctx) {
	Javascript_selector_expressionContext.call(this, parser);
    this.name = null; // Javascript_identifierContext;
    Javascript_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptMemberExpressionContext.prototype = Object.create(Javascript_selector_expressionContext.prototype);
JavaScriptMemberExpressionContext.prototype.constructor = JavaScriptMemberExpressionContext;

JavaScriptMemberExpressionContext.prototype.DOT = function() {
    return this.getToken(SParser.DOT, 0);
};

JavaScriptMemberExpressionContext.prototype.javascript_identifier = function() {
    return this.getTypedRuleContext(Javascript_identifierContext,0);
};
JavaScriptMemberExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaScriptMemberExpression(this);
	}
};

JavaScriptMemberExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaScriptMemberExpression(this);
	}
};


function JavaScriptItemExpressionContext(parser, ctx) {
	Javascript_selector_expressionContext.call(this, parser);
    this.exp = null; // Javascript_item_expressionContext;
    Javascript_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptItemExpressionContext.prototype = Object.create(Javascript_selector_expressionContext.prototype);
JavaScriptItemExpressionContext.prototype.constructor = JavaScriptItemExpressionContext;

JavaScriptItemExpressionContext.prototype.javascript_item_expression = function() {
    return this.getTypedRuleContext(Javascript_item_expressionContext,0);
};
JavaScriptItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaScriptItemExpression(this);
	}
};

JavaScriptItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaScriptItemExpression(this);
	}
};


function JavaScriptMethodExpressionContext(parser, ctx) {
	Javascript_selector_expressionContext.call(this, parser);
    this.method = null; // Javascript_method_expressionContext;
    Javascript_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptMethodExpressionContext.prototype = Object.create(Javascript_selector_expressionContext.prototype);
JavaScriptMethodExpressionContext.prototype.constructor = JavaScriptMethodExpressionContext;

JavaScriptMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(SParser.DOT, 0);
};

JavaScriptMethodExpressionContext.prototype.javascript_method_expression = function() {
    return this.getTypedRuleContext(Javascript_method_expressionContext,0);
};
JavaScriptMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaScriptMethodExpression(this);
	}
};

JavaScriptMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaScriptMethodExpression(this);
	}
};



SParser.prototype.javascript_selector_expression = function() {

    var localctx = new Javascript_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, SParser.RULE_javascript_selector_expression);
    try {
        this.state = 1732;
        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
        switch(la_) {
        case 1:
            localctx = new JavaScriptMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1727;
            this.match(SParser.DOT);
            this.state = 1728; 
            localctx.method = this.javascript_method_expression();
            break;

        case 2:
            localctx = new JavaScriptMemberExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1729;
            this.match(SParser.DOT);
            this.state = 1730; 
            localctx.name = this.javascript_identifier();
            break;

        case 3:
            localctx = new JavaScriptItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1731; 
            localctx.exp = this.javascript_item_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_javascript_method_expression;
    this.name = null; // Javascript_identifierContext
    this.args = null; // Javascript_argumentsContext
    return this;
}

Javascript_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_method_expressionContext.prototype.constructor = Javascript_method_expressionContext;

Javascript_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Javascript_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Javascript_method_expressionContext.prototype.javascript_identifier = function() {
    return this.getTypedRuleContext(Javascript_identifierContext,0);
};

Javascript_method_expressionContext.prototype.javascript_arguments = function() {
    return this.getTypedRuleContext(Javascript_argumentsContext,0);
};

Javascript_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascript_method_expression(this);
	}
};

Javascript_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascript_method_expression(this);
	}
};




SParser.prototype.javascript_method_expression = function() {

    var localctx = new Javascript_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, SParser.RULE_javascript_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1734; 
        localctx.name = this.javascript_identifier();
        this.state = 1735;
        this.match(SParser.LPAR);
        this.state = 1737;
        _la = this._input.LA(1);
        if(_la===SParser.LPAR || _la===SParser.LBRAK || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (SParser.BOOLEAN - 49)) | (1 << (SParser.CHARACTER - 49)) | (1 << (SParser.TEXT - 49)) | (1 << (SParser.INTEGER - 49)) | (1 << (SParser.DECIMAL - 49)) | (1 << (SParser.DATE - 49)) | (1 << (SParser.TIME - 49)) | (1 << (SParser.DATETIME - 49)) | (1 << (SParser.PERIOD - 49)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (SParser.READ - 116)) | (1 << (SParser.SELF - 116)) | (1 << (SParser.TEST - 116)) | (1 << (SParser.THIS - 116)) | (1 << (SParser.WRITE - 116)) | (1 << (SParser.BOOLEAN_LITERAL - 116)) | (1 << (SParser.CHAR_LITERAL - 116)) | (1 << (SParser.SYMBOL_IDENTIFIER - 116)) | (1 << (SParser.TYPE_IDENTIFIER - 116)) | (1 << (SParser.VARIABLE_IDENTIFIER - 116)) | (1 << (SParser.DOLLAR_IDENTIFIER - 116)) | (1 << (SParser.TEXT_LITERAL - 116)) | (1 << (SParser.INTEGER_LITERAL - 116)))) !== 0) || _la===SParser.DECIMAL_LITERAL) {
            this.state = 1736; 
            localctx.args = this.javascript_arguments(0);
        }

        this.state = 1739;
        this.match(SParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_javascript_arguments;
    return this;
}

Javascript_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_argumentsContext.prototype.constructor = Javascript_argumentsContext;


 
Javascript_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavascriptArgumentListContext(parser, ctx) {
	Javascript_argumentsContext.call(this, parser);
    this.item = null; // Javascript_expressionContext;
    Javascript_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptArgumentListContext.prototype = Object.create(Javascript_argumentsContext.prototype);
JavascriptArgumentListContext.prototype.constructor = JavascriptArgumentListContext;

JavascriptArgumentListContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascriptArgumentList(this);
	}
};

JavascriptArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascriptArgumentList(this);
	}
};


function JavascriptArgumentListItemContext(parser, ctx) {
	Javascript_argumentsContext.call(this, parser);
    this.items = null; // Javascript_argumentsContext;
    this.item = null; // Javascript_expressionContext;
    Javascript_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptArgumentListItemContext.prototype = Object.create(Javascript_argumentsContext.prototype);
JavascriptArgumentListItemContext.prototype.constructor = JavascriptArgumentListItemContext;

JavascriptArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(SParser.COMMA, 0);
};

JavascriptArgumentListItemContext.prototype.javascript_arguments = function() {
    return this.getTypedRuleContext(Javascript_argumentsContext,0);
};

JavascriptArgumentListItemContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascriptArgumentListItem(this);
	}
};

JavascriptArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascriptArgumentListItem(this);
	}
};



SParser.prototype.javascript_arguments = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Javascript_argumentsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 292;
    this.enterRecursionRule(localctx, 292, SParser.RULE_javascript_arguments, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavascriptArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1742; 
        localctx.item = this.javascript_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1749;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,123,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavascriptArgumentListItemContext(this, new Javascript_argumentsContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_javascript_arguments);
                this.state = 1744;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1745;
                this.match(SParser.COMMA);
                this.state = 1746; 
                localctx.item = this.javascript_expression(0); 
            }
            this.state = 1751;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,123,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Javascript_item_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_javascript_item_expression;
    this.exp = null; // Javascript_expressionContext
    return this;
}

Javascript_item_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_item_expressionContext.prototype.constructor = Javascript_item_expressionContext;

Javascript_item_expressionContext.prototype.LBRAK = function() {
    return this.getToken(SParser.LBRAK, 0);
};

Javascript_item_expressionContext.prototype.RBRAK = function() {
    return this.getToken(SParser.RBRAK, 0);
};

Javascript_item_expressionContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};

Javascript_item_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascript_item_expression(this);
	}
};

Javascript_item_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascript_item_expression(this);
	}
};




SParser.prototype.javascript_item_expression = function() {

    var localctx = new Javascript_item_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, SParser.RULE_javascript_item_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1752;
        this.match(SParser.LBRAK);
        this.state = 1753; 
        localctx.exp = this.javascript_expression(0);
        this.state = 1754;
        this.match(SParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_javascript_parenthesis_expression;
    this.exp = null; // Javascript_expressionContext
    return this;
}

Javascript_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_parenthesis_expressionContext.prototype.constructor = Javascript_parenthesis_expressionContext;

Javascript_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Javascript_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Javascript_parenthesis_expressionContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};

Javascript_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascript_parenthesis_expression(this);
	}
};

Javascript_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascript_parenthesis_expression(this);
	}
};




SParser.prototype.javascript_parenthesis_expression = function() {

    var localctx = new Javascript_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, SParser.RULE_javascript_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1756;
        this.match(SParser.LPAR);
        this.state = 1757; 
        localctx.exp = this.javascript_expression(0);
        this.state = 1758;
        this.match(SParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_javascript_identifier_expression;
    this.name = null; // Javascript_identifierContext
    return this;
}

Javascript_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_identifier_expressionContext.prototype.constructor = Javascript_identifier_expressionContext;

Javascript_identifier_expressionContext.prototype.javascript_identifier = function() {
    return this.getTypedRuleContext(Javascript_identifierContext,0);
};

Javascript_identifier_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascript_identifier_expression(this);
	}
};

Javascript_identifier_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascript_identifier_expression(this);
	}
};




SParser.prototype.javascript_identifier_expression = function() {

    var localctx = new Javascript_identifier_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, SParser.RULE_javascript_identifier_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1760; 
        localctx.name = this.javascript_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_javascript_literal_expression;
    return this;
}

Javascript_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_literal_expressionContext.prototype.constructor = Javascript_literal_expressionContext;


 
Javascript_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavascriptIntegerLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptIntegerLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptIntegerLiteralContext.prototype.constructor = JavascriptIntegerLiteralContext;

JavascriptIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(SParser.INTEGER_LITERAL, 0);
};
JavascriptIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascriptIntegerLiteral(this);
	}
};

JavascriptIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascriptIntegerLiteral(this);
	}
};


function JavascriptBooleanLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptBooleanLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptBooleanLiteralContext.prototype.constructor = JavascriptBooleanLiteralContext;

JavascriptBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(SParser.BOOLEAN_LITERAL, 0);
};
JavascriptBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascriptBooleanLiteral(this);
	}
};

JavascriptBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascriptBooleanLiteral(this);
	}
};


function JavascriptCharacterLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptCharacterLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptCharacterLiteralContext.prototype.constructor = JavascriptCharacterLiteralContext;

JavascriptCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(SParser.CHAR_LITERAL, 0);
};
JavascriptCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascriptCharacterLiteral(this);
	}
};

JavascriptCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascriptCharacterLiteral(this);
	}
};


function JavascriptTextLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptTextLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptTextLiteralContext.prototype.constructor = JavascriptTextLiteralContext;

JavascriptTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(SParser.TEXT_LITERAL, 0);
};
JavascriptTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascriptTextLiteral(this);
	}
};

JavascriptTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascriptTextLiteral(this);
	}
};


function JavascriptDecimalLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptDecimalLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptDecimalLiteralContext.prototype.constructor = JavascriptDecimalLiteralContext;

JavascriptDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(SParser.DECIMAL_LITERAL, 0);
};
JavascriptDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascriptDecimalLiteral(this);
	}
};

JavascriptDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascriptDecimalLiteral(this);
	}
};



SParser.prototype.javascript_literal_expression = function() {

    var localctx = new Javascript_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, SParser.RULE_javascript_literal_expression);
    try {
        this.state = 1767;
        switch(this._input.LA(1)) {
        case SParser.INTEGER_LITERAL:
            localctx = new JavascriptIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1762;
            localctx.t = this.match(SParser.INTEGER_LITERAL);
            break;
        case SParser.DECIMAL_LITERAL:
            localctx = new JavascriptDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1763;
            localctx.t = this.match(SParser.DECIMAL_LITERAL);
            break;
        case SParser.TEXT_LITERAL:
            localctx = new JavascriptTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1764;
            localctx.t = this.match(SParser.TEXT_LITERAL);
            break;
        case SParser.BOOLEAN_LITERAL:
            localctx = new JavascriptBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1765;
            localctx.t = this.match(SParser.BOOLEAN_LITERAL);
            break;
        case SParser.CHAR_LITERAL:
            localctx = new JavascriptCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1766;
            localctx.t = this.match(SParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_javascript_identifier;
    return this;
}

Javascript_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_identifierContext.prototype.constructor = Javascript_identifierContext;

Javascript_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(SParser.VARIABLE_IDENTIFIER, 0);
};

Javascript_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(SParser.SYMBOL_IDENTIFIER, 0);
};

Javascript_identifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(SParser.DOLLAR_IDENTIFIER, 0);
};

Javascript_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(SParser.TYPE_IDENTIFIER, 0);
};

Javascript_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(SParser.BOOLEAN, 0);
};

Javascript_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(SParser.CHARACTER, 0);
};

Javascript_identifierContext.prototype.TEXT = function() {
    return this.getToken(SParser.TEXT, 0);
};

Javascript_identifierContext.prototype.INTEGER = function() {
    return this.getToken(SParser.INTEGER, 0);
};

Javascript_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(SParser.DECIMAL, 0);
};

Javascript_identifierContext.prototype.DATE = function() {
    return this.getToken(SParser.DATE, 0);
};

Javascript_identifierContext.prototype.TIME = function() {
    return this.getToken(SParser.TIME, 0);
};

Javascript_identifierContext.prototype.DATETIME = function() {
    return this.getToken(SParser.DATETIME, 0);
};

Javascript_identifierContext.prototype.PERIOD = function() {
    return this.getToken(SParser.PERIOD, 0);
};

Javascript_identifierContext.prototype.READ = function() {
    return this.getToken(SParser.READ, 0);
};

Javascript_identifierContext.prototype.WRITE = function() {
    return this.getToken(SParser.WRITE, 0);
};

Javascript_identifierContext.prototype.TEST = function() {
    return this.getToken(SParser.TEST, 0);
};

Javascript_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavascript_identifier(this);
	}
};

Javascript_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavascript_identifier(this);
	}
};




SParser.prototype.javascript_identifier = function() {

    var localctx = new Javascript_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, SParser.RULE_javascript_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1769;
        _la = this._input.LA(1);
        if(!(((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (SParser.BOOLEAN - 49)) | (1 << (SParser.CHARACTER - 49)) | (1 << (SParser.TEXT - 49)) | (1 << (SParser.INTEGER - 49)) | (1 << (SParser.DECIMAL - 49)) | (1 << (SParser.DATE - 49)) | (1 << (SParser.TIME - 49)) | (1 << (SParser.DATETIME - 49)) | (1 << (SParser.PERIOD - 49)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (SParser.READ - 116)) | (1 << (SParser.TEST - 116)) | (1 << (SParser.WRITE - 116)) | (1 << (SParser.SYMBOL_IDENTIFIER - 116)) | (1 << (SParser.TYPE_IDENTIFIER - 116)) | (1 << (SParser.VARIABLE_IDENTIFIER - 116)) | (1 << (SParser.DOLLAR_IDENTIFIER - 116)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_python_statement;
    return this;
}

Python_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_statementContext.prototype.constructor = Python_statementContext;


 
Python_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonStatementContext(parser, ctx) {
	Python_statementContext.call(this, parser);
    this.exp = null; // Python_expressionContext;
    Python_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonStatementContext.prototype = Object.create(Python_statementContext.prototype);
PythonStatementContext.prototype.constructor = PythonStatementContext;

PythonStatementContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonStatement(this);
	}
};

PythonStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonStatement(this);
	}
};


function PythonReturnStatementContext(parser, ctx) {
	Python_statementContext.call(this, parser);
    this.exp = null; // Python_expressionContext;
    Python_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonReturnStatementContext.prototype = Object.create(Python_statementContext.prototype);
PythonReturnStatementContext.prototype.constructor = PythonReturnStatementContext;

PythonReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(SParser.RETURN, 0);
};

PythonReturnStatementContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonReturnStatement(this);
	}
};

PythonReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonReturnStatement(this);
	}
};



SParser.prototype.python_statement = function() {

    var localctx = new Python_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, SParser.RULE_python_statement);
    try {
        this.state = 1774;
        switch(this._input.LA(1)) {
        case SParser.RETURN:
            localctx = new PythonReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1771;
            this.match(SParser.RETURN);
            this.state = 1772; 
            localctx.exp = this.python_expression(0);
            break;
        case SParser.LPAR:
        case SParser.BOOLEAN:
        case SParser.CHARACTER:
        case SParser.TEXT:
        case SParser.INTEGER:
        case SParser.DECIMAL:
        case SParser.DATE:
        case SParser.TIME:
        case SParser.DATETIME:
        case SParser.PERIOD:
        case SParser.READ:
        case SParser.SELF:
        case SParser.TEST:
        case SParser.THIS:
        case SParser.WRITE:
        case SParser.BOOLEAN_LITERAL:
        case SParser.CHAR_LITERAL:
        case SParser.SYMBOL_IDENTIFIER:
        case SParser.TYPE_IDENTIFIER:
        case SParser.VARIABLE_IDENTIFIER:
        case SParser.DOLLAR_IDENTIFIER:
        case SParser.TEXT_LITERAL:
        case SParser.INTEGER_LITERAL:
        case SParser.DECIMAL_LITERAL:
            localctx = new PythonStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1773; 
            localctx.exp = this.python_expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_python_expression;
    return this;
}

Python_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_expressionContext.prototype.constructor = Python_expressionContext;


 
Python_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonSelectorExpressionContext(parser, ctx) {
	Python_expressionContext.call(this, parser);
    this.parent = null; // Python_expressionContext;
    this.child = null; // Python_selector_expressionContext;
    Python_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonSelectorExpressionContext.prototype = Object.create(Python_expressionContext.prototype);
PythonSelectorExpressionContext.prototype.constructor = PythonSelectorExpressionContext;

PythonSelectorExpressionContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};

PythonSelectorExpressionContext.prototype.python_selector_expression = function() {
    return this.getTypedRuleContext(Python_selector_expressionContext,0);
};
PythonSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonSelectorExpression(this);
	}
};

PythonSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonSelectorExpression(this);
	}
};


function PythonPrimaryExpressionContext(parser, ctx) {
	Python_expressionContext.call(this, parser);
    this.exp = null; // Python_primary_expressionContext;
    Python_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonPrimaryExpressionContext.prototype = Object.create(Python_expressionContext.prototype);
PythonPrimaryExpressionContext.prototype.constructor = PythonPrimaryExpressionContext;

PythonPrimaryExpressionContext.prototype.python_primary_expression = function() {
    return this.getTypedRuleContext(Python_primary_expressionContext,0);
};
PythonPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonPrimaryExpression(this);
	}
};

PythonPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonPrimaryExpression(this);
	}
};



SParser.prototype.python_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 306;
    this.enterRecursionRule(localctx, 306, SParser.RULE_python_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new PythonPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1777; 
        localctx.exp = this.python_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1783;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,126,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonSelectorExpressionContext(this, new Python_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_python_expression);
                this.state = 1779;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1780; 
                localctx.child = this.python_selector_expression(); 
            }
            this.state = 1785;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,126,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_python_primary_expression;
    return this;
}

Python_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_primary_expressionContext.prototype.constructor = Python_primary_expressionContext;


 
Python_primary_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonParenthesisExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_parenthesis_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonParenthesisExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonParenthesisExpressionContext.prototype.constructor = PythonParenthesisExpressionContext;

PythonParenthesisExpressionContext.prototype.python_parenthesis_expression = function() {
    return this.getTypedRuleContext(Python_parenthesis_expressionContext,0);
};
PythonParenthesisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonParenthesisExpression(this);
	}
};

PythonParenthesisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonParenthesisExpression(this);
	}
};


function PythonIdentifierExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_identifier_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonIdentifierExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonIdentifierExpressionContext.prototype.constructor = PythonIdentifierExpressionContext;

PythonIdentifierExpressionContext.prototype.python_identifier_expression = function() {
    return this.getTypedRuleContext(Python_identifier_expressionContext,0);
};
PythonIdentifierExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonIdentifierExpression(this);
	}
};

PythonIdentifierExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonIdentifierExpression(this);
	}
};


function PythonLiteralExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_literal_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonLiteralExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonLiteralExpressionContext.prototype.constructor = PythonLiteralExpressionContext;

PythonLiteralExpressionContext.prototype.python_literal_expression = function() {
    return this.getTypedRuleContext(Python_literal_expressionContext,0);
};
PythonLiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonLiteralExpression(this);
	}
};

PythonLiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonLiteralExpression(this);
	}
};


function PythonGlobalMethodExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_method_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonGlobalMethodExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonGlobalMethodExpressionContext.prototype.constructor = PythonGlobalMethodExpressionContext;

PythonGlobalMethodExpressionContext.prototype.python_method_expression = function() {
    return this.getTypedRuleContext(Python_method_expressionContext,0);
};
PythonGlobalMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonGlobalMethodExpression(this);
	}
};

PythonGlobalMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonGlobalMethodExpression(this);
	}
};



SParser.prototype.python_primary_expression = function() {

    var localctx = new Python_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, SParser.RULE_python_primary_expression);
    try {
        this.state = 1790;
        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PythonParenthesisExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1786; 
            localctx.exp = this.python_parenthesis_expression();
            break;

        case 2:
            localctx = new PythonIdentifierExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1787; 
            localctx.exp = this.python_identifier_expression(0);
            break;

        case 3:
            localctx = new PythonLiteralExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1788; 
            localctx.exp = this.python_literal_expression();
            break;

        case 4:
            localctx = new PythonGlobalMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1789; 
            localctx.exp = this.python_method_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_python_selector_expression;
    return this;
}

Python_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_selector_expressionContext.prototype.constructor = Python_selector_expressionContext;


 
Python_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonMethodExpressionContext(parser, ctx) {
	Python_selector_expressionContext.call(this, parser);
    this.exp = null; // Python_method_expressionContext;
    Python_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonMethodExpressionContext.prototype = Object.create(Python_selector_expressionContext.prototype);
PythonMethodExpressionContext.prototype.constructor = PythonMethodExpressionContext;

PythonMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(SParser.DOT, 0);
};

PythonMethodExpressionContext.prototype.python_method_expression = function() {
    return this.getTypedRuleContext(Python_method_expressionContext,0);
};
PythonMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonMethodExpression(this);
	}
};

PythonMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonMethodExpression(this);
	}
};


function PythonItemExpressionContext(parser, ctx) {
	Python_selector_expressionContext.call(this, parser);
    this.exp = null; // Python_expressionContext;
    Python_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonItemExpressionContext.prototype = Object.create(Python_selector_expressionContext.prototype);
PythonItemExpressionContext.prototype.constructor = PythonItemExpressionContext;

PythonItemExpressionContext.prototype.LBRAK = function() {
    return this.getToken(SParser.LBRAK, 0);
};

PythonItemExpressionContext.prototype.RBRAK = function() {
    return this.getToken(SParser.RBRAK, 0);
};

PythonItemExpressionContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonItemExpression(this);
	}
};

PythonItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonItemExpression(this);
	}
};



SParser.prototype.python_selector_expression = function() {

    var localctx = new Python_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, SParser.RULE_python_selector_expression);
    try {
        this.state = 1798;
        switch(this._input.LA(1)) {
        case SParser.DOT:
            localctx = new PythonMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1792;
            this.match(SParser.DOT);
            this.state = 1793; 
            localctx.exp = this.python_method_expression();
            break;
        case SParser.LBRAK:
            localctx = new PythonItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1794;
            this.match(SParser.LBRAK);
            this.state = 1795; 
            localctx.exp = this.python_expression(0);
            this.state = 1796;
            this.match(SParser.RBRAK);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_python_method_expression;
    this.name = null; // Python_identifierContext
    this.args = null; // Python_argument_listContext
    return this;
}

Python_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_method_expressionContext.prototype.constructor = Python_method_expressionContext;

Python_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Python_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Python_method_expressionContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};

Python_method_expressionContext.prototype.python_argument_list = function() {
    return this.getTypedRuleContext(Python_argument_listContext,0);
};

Python_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPython_method_expression(this);
	}
};

Python_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPython_method_expression(this);
	}
};




SParser.prototype.python_method_expression = function() {

    var localctx = new Python_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, SParser.RULE_python_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1800; 
        localctx.name = this.python_identifier();
        this.state = 1801;
        this.match(SParser.LPAR);
        this.state = 1803;
        _la = this._input.LA(1);
        if(_la===SParser.LPAR || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (SParser.BOOLEAN - 49)) | (1 << (SParser.CHARACTER - 49)) | (1 << (SParser.TEXT - 49)) | (1 << (SParser.INTEGER - 49)) | (1 << (SParser.DECIMAL - 49)) | (1 << (SParser.DATE - 49)) | (1 << (SParser.TIME - 49)) | (1 << (SParser.DATETIME - 49)) | (1 << (SParser.PERIOD - 49)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (SParser.READ - 116)) | (1 << (SParser.SELF - 116)) | (1 << (SParser.TEST - 116)) | (1 << (SParser.THIS - 116)) | (1 << (SParser.WRITE - 116)) | (1 << (SParser.BOOLEAN_LITERAL - 116)) | (1 << (SParser.CHAR_LITERAL - 116)) | (1 << (SParser.SYMBOL_IDENTIFIER - 116)) | (1 << (SParser.TYPE_IDENTIFIER - 116)) | (1 << (SParser.VARIABLE_IDENTIFIER - 116)) | (1 << (SParser.DOLLAR_IDENTIFIER - 116)) | (1 << (SParser.TEXT_LITERAL - 116)) | (1 << (SParser.INTEGER_LITERAL - 116)))) !== 0) || _la===SParser.DECIMAL_LITERAL) {
            this.state = 1802; 
            localctx.args = this.python_argument_list();
        }

        this.state = 1805;
        this.match(SParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_python_argument_list;
    return this;
}

Python_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_argument_listContext.prototype.constructor = Python_argument_listContext;


 
Python_argument_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonOrdinalOnlyArgumentListContext(parser, ctx) {
	Python_argument_listContext.call(this, parser);
    this.ordinal = null; // Python_ordinal_argument_listContext;
    Python_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonOrdinalOnlyArgumentListContext.prototype = Object.create(Python_argument_listContext.prototype);
PythonOrdinalOnlyArgumentListContext.prototype.constructor = PythonOrdinalOnlyArgumentListContext;

PythonOrdinalOnlyArgumentListContext.prototype.python_ordinal_argument_list = function() {
    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
};
PythonOrdinalOnlyArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonOrdinalOnlyArgumentList(this);
	}
};

PythonOrdinalOnlyArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonOrdinalOnlyArgumentList(this);
	}
};


function PythonNamedOnlyArgumentListContext(parser, ctx) {
	Python_argument_listContext.call(this, parser);
    this.named = null; // Python_named_argument_listContext;
    Python_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonNamedOnlyArgumentListContext.prototype = Object.create(Python_argument_listContext.prototype);
PythonNamedOnlyArgumentListContext.prototype.constructor = PythonNamedOnlyArgumentListContext;

PythonNamedOnlyArgumentListContext.prototype.python_named_argument_list = function() {
    return this.getTypedRuleContext(Python_named_argument_listContext,0);
};
PythonNamedOnlyArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonNamedOnlyArgumentList(this);
	}
};

PythonNamedOnlyArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonNamedOnlyArgumentList(this);
	}
};


function PythonArgumentListContext(parser, ctx) {
	Python_argument_listContext.call(this, parser);
    this.ordinal = null; // Python_ordinal_argument_listContext;
    this.named = null; // Python_named_argument_listContext;
    Python_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonArgumentListContext.prototype = Object.create(Python_argument_listContext.prototype);
PythonArgumentListContext.prototype.constructor = PythonArgumentListContext;

PythonArgumentListContext.prototype.COMMA = function() {
    return this.getToken(SParser.COMMA, 0);
};

PythonArgumentListContext.prototype.python_ordinal_argument_list = function() {
    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
};

PythonArgumentListContext.prototype.python_named_argument_list = function() {
    return this.getTypedRuleContext(Python_named_argument_listContext,0);
};
PythonArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonArgumentList(this);
	}
};

PythonArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonArgumentList(this);
	}
};



SParser.prototype.python_argument_list = function() {

    var localctx = new Python_argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, SParser.RULE_python_argument_list);
    try {
        this.state = 1813;
        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PythonOrdinalOnlyArgumentListContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1807; 
            localctx.ordinal = this.python_ordinal_argument_list(0);
            break;

        case 2:
            localctx = new PythonNamedOnlyArgumentListContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1808; 
            localctx.named = this.python_named_argument_list(0);
            break;

        case 3:
            localctx = new PythonArgumentListContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1809; 
            localctx.ordinal = this.python_ordinal_argument_list(0);
            this.state = 1810;
            this.match(SParser.COMMA);
            this.state = 1811; 
            localctx.named = this.python_named_argument_list(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_ordinal_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_python_ordinal_argument_list;
    return this;
}

Python_ordinal_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_ordinal_argument_listContext.prototype.constructor = Python_ordinal_argument_listContext;


 
Python_ordinal_argument_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonOrdinalArgumentListContext(parser, ctx) {
	Python_ordinal_argument_listContext.call(this, parser);
    this.item = null; // Python_expressionContext;
    Python_ordinal_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonOrdinalArgumentListContext.prototype = Object.create(Python_ordinal_argument_listContext.prototype);
PythonOrdinalArgumentListContext.prototype.constructor = PythonOrdinalArgumentListContext;

PythonOrdinalArgumentListContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonOrdinalArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonOrdinalArgumentList(this);
	}
};

PythonOrdinalArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonOrdinalArgumentList(this);
	}
};


function PythonOrdinalArgumentListItemContext(parser, ctx) {
	Python_ordinal_argument_listContext.call(this, parser);
    this.items = null; // Python_ordinal_argument_listContext;
    this.item = null; // Python_expressionContext;
    Python_ordinal_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonOrdinalArgumentListItemContext.prototype = Object.create(Python_ordinal_argument_listContext.prototype);
PythonOrdinalArgumentListItemContext.prototype.constructor = PythonOrdinalArgumentListItemContext;

PythonOrdinalArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(SParser.COMMA, 0);
};

PythonOrdinalArgumentListItemContext.prototype.python_ordinal_argument_list = function() {
    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
};

PythonOrdinalArgumentListItemContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonOrdinalArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonOrdinalArgumentListItem(this);
	}
};

PythonOrdinalArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonOrdinalArgumentListItem(this);
	}
};



SParser.prototype.python_ordinal_argument_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_ordinal_argument_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 316;
    this.enterRecursionRule(localctx, 316, SParser.RULE_python_ordinal_argument_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new PythonOrdinalArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1816; 
        localctx.item = this.python_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1823;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,131,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonOrdinalArgumentListItemContext(this, new Python_ordinal_argument_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_python_ordinal_argument_list);
                this.state = 1818;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1819;
                this.match(SParser.COMMA);
                this.state = 1820; 
                localctx.item = this.python_expression(0); 
            }
            this.state = 1825;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,131,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_named_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_python_named_argument_list;
    return this;
}

Python_named_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_named_argument_listContext.prototype.constructor = Python_named_argument_listContext;


 
Python_named_argument_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonNamedArgumentListContext(parser, ctx) {
	Python_named_argument_listContext.call(this, parser);
    this.name = null; // Python_identifierContext;
    this.exp = null; // Python_expressionContext;
    Python_named_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonNamedArgumentListContext.prototype = Object.create(Python_named_argument_listContext.prototype);
PythonNamedArgumentListContext.prototype.constructor = PythonNamedArgumentListContext;

PythonNamedArgumentListContext.prototype.EQ = function() {
    return this.getToken(SParser.EQ, 0);
};

PythonNamedArgumentListContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};

PythonNamedArgumentListContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonNamedArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonNamedArgumentList(this);
	}
};

PythonNamedArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonNamedArgumentList(this);
	}
};


function PythonNamedArgumentListItemContext(parser, ctx) {
	Python_named_argument_listContext.call(this, parser);
    this.items = null; // Python_named_argument_listContext;
    this.name = null; // Python_identifierContext;
    this.exp = null; // Python_expressionContext;
    Python_named_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonNamedArgumentListItemContext.prototype = Object.create(Python_named_argument_listContext.prototype);
PythonNamedArgumentListItemContext.prototype.constructor = PythonNamedArgumentListItemContext;

PythonNamedArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(SParser.COMMA, 0);
};

PythonNamedArgumentListItemContext.prototype.EQ = function() {
    return this.getToken(SParser.EQ, 0);
};

PythonNamedArgumentListItemContext.prototype.python_named_argument_list = function() {
    return this.getTypedRuleContext(Python_named_argument_listContext,0);
};

PythonNamedArgumentListItemContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};

PythonNamedArgumentListItemContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonNamedArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonNamedArgumentListItem(this);
	}
};

PythonNamedArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonNamedArgumentListItem(this);
	}
};



SParser.prototype.python_named_argument_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_named_argument_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 318;
    this.enterRecursionRule(localctx, 318, SParser.RULE_python_named_argument_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new PythonNamedArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1827; 
        localctx.name = this.python_identifier();
        this.state = 1828;
        this.match(SParser.EQ);
        this.state = 1829; 
        localctx.exp = this.python_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1839;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,132,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonNamedArgumentListItemContext(this, new Python_named_argument_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_python_named_argument_list);
                this.state = 1831;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1832;
                this.match(SParser.COMMA);
                this.state = 1833; 
                localctx.name = this.python_identifier();
                this.state = 1834;
                this.match(SParser.EQ);
                this.state = 1835; 
                localctx.exp = this.python_expression(0); 
            }
            this.state = 1841;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,132,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_python_parenthesis_expression;
    this.exp = null; // Python_expressionContext
    return this;
}

Python_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_parenthesis_expressionContext.prototype.constructor = Python_parenthesis_expressionContext;

Python_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Python_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Python_parenthesis_expressionContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};

Python_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPython_parenthesis_expression(this);
	}
};

Python_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPython_parenthesis_expression(this);
	}
};




SParser.prototype.python_parenthesis_expression = function() {

    var localctx = new Python_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, SParser.RULE_python_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1842;
        this.match(SParser.LPAR);
        this.state = 1843; 
        localctx.exp = this.python_expression(0);
        this.state = 1844;
        this.match(SParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_python_identifier_expression;
    return this;
}

Python_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_identifier_expressionContext.prototype.constructor = Python_identifier_expressionContext;


 
Python_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonChildIdentifierContext(parser, ctx) {
	Python_identifier_expressionContext.call(this, parser);
    this.parent = null; // Python_identifier_expressionContext;
    this.name = null; // Python_identifierContext;
    Python_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonChildIdentifierContext.prototype = Object.create(Python_identifier_expressionContext.prototype);
PythonChildIdentifierContext.prototype.constructor = PythonChildIdentifierContext;

PythonChildIdentifierContext.prototype.DOT = function() {
    return this.getToken(SParser.DOT, 0);
};

PythonChildIdentifierContext.prototype.python_identifier_expression = function() {
    return this.getTypedRuleContext(Python_identifier_expressionContext,0);
};

PythonChildIdentifierContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};
PythonChildIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonChildIdentifier(this);
	}
};

PythonChildIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonChildIdentifier(this);
	}
};


function PythonPromptoIdentifierContext(parser, ctx) {
	Python_identifier_expressionContext.call(this, parser);
    Python_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonPromptoIdentifierContext.prototype = Object.create(Python_identifier_expressionContext.prototype);
PythonPromptoIdentifierContext.prototype.constructor = PythonPromptoIdentifierContext;

PythonPromptoIdentifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(SParser.DOLLAR_IDENTIFIER, 0);
};
PythonPromptoIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonPromptoIdentifier(this);
	}
};

PythonPromptoIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonPromptoIdentifier(this);
	}
};


function PythonIdentifierContext(parser, ctx) {
	Python_identifier_expressionContext.call(this, parser);
    this.name = null; // Python_identifierContext;
    Python_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonIdentifierContext.prototype = Object.create(Python_identifier_expressionContext.prototype);
PythonIdentifierContext.prototype.constructor = PythonIdentifierContext;

PythonIdentifierContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};
PythonIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonIdentifier(this);
	}
};

PythonIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonIdentifier(this);
	}
};



SParser.prototype.python_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 322;
    this.enterRecursionRule(localctx, 322, SParser.RULE_python_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1849;
        switch(this._input.LA(1)) {
        case SParser.DOLLAR_IDENTIFIER:
            localctx = new PythonPromptoIdentifierContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1847;
            this.match(SParser.DOLLAR_IDENTIFIER);
            break;
        case SParser.BOOLEAN:
        case SParser.CHARACTER:
        case SParser.TEXT:
        case SParser.INTEGER:
        case SParser.DECIMAL:
        case SParser.DATE:
        case SParser.TIME:
        case SParser.DATETIME:
        case SParser.PERIOD:
        case SParser.READ:
        case SParser.SELF:
        case SParser.TEST:
        case SParser.THIS:
        case SParser.WRITE:
        case SParser.SYMBOL_IDENTIFIER:
        case SParser.TYPE_IDENTIFIER:
        case SParser.VARIABLE_IDENTIFIER:
            localctx = new PythonIdentifierContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1848; 
            localctx.name = this.python_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1856;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,134,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonChildIdentifierContext(this, new Python_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_python_identifier_expression);
                this.state = 1851;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1852;
                this.match(SParser.DOT);
                this.state = 1853; 
                localctx.name = this.python_identifier(); 
            }
            this.state = 1858;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,134,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_python_literal_expression;
    return this;
}

Python_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_literal_expressionContext.prototype.constructor = Python_literal_expressionContext;


 
Python_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonIntegerLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonIntegerLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonIntegerLiteralContext.prototype.constructor = PythonIntegerLiteralContext;

PythonIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(SParser.INTEGER_LITERAL, 0);
};
PythonIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonIntegerLiteral(this);
	}
};

PythonIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonIntegerLiteral(this);
	}
};


function PythonBooleanLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonBooleanLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonBooleanLiteralContext.prototype.constructor = PythonBooleanLiteralContext;

PythonBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(SParser.BOOLEAN_LITERAL, 0);
};
PythonBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonBooleanLiteral(this);
	}
};

PythonBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonBooleanLiteral(this);
	}
};


function PythonCharacterLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonCharacterLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonCharacterLiteralContext.prototype.constructor = PythonCharacterLiteralContext;

PythonCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(SParser.CHAR_LITERAL, 0);
};
PythonCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonCharacterLiteral(this);
	}
};

PythonCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonCharacterLiteral(this);
	}
};


function PythonTextLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonTextLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonTextLiteralContext.prototype.constructor = PythonTextLiteralContext;

PythonTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(SParser.TEXT_LITERAL, 0);
};
PythonTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonTextLiteral(this);
	}
};

PythonTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonTextLiteral(this);
	}
};


function PythonDecimalLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonDecimalLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonDecimalLiteralContext.prototype.constructor = PythonDecimalLiteralContext;

PythonDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(SParser.DECIMAL_LITERAL, 0);
};
PythonDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPythonDecimalLiteral(this);
	}
};

PythonDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPythonDecimalLiteral(this);
	}
};



SParser.prototype.python_literal_expression = function() {

    var localctx = new Python_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, SParser.RULE_python_literal_expression);
    try {
        this.state = 1864;
        switch(this._input.LA(1)) {
        case SParser.INTEGER_LITERAL:
            localctx = new PythonIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1859;
            localctx.t = this.match(SParser.INTEGER_LITERAL);
            break;
        case SParser.DECIMAL_LITERAL:
            localctx = new PythonDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1860;
            localctx.t = this.match(SParser.DECIMAL_LITERAL);
            break;
        case SParser.TEXT_LITERAL:
            localctx = new PythonTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1861;
            localctx.t = this.match(SParser.TEXT_LITERAL);
            break;
        case SParser.BOOLEAN_LITERAL:
            localctx = new PythonBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1862;
            localctx.t = this.match(SParser.BOOLEAN_LITERAL);
            break;
        case SParser.CHAR_LITERAL:
            localctx = new PythonCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1863;
            localctx.t = this.match(SParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_python_identifier;
    return this;
}

Python_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_identifierContext.prototype.constructor = Python_identifierContext;

Python_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(SParser.VARIABLE_IDENTIFIER, 0);
};

Python_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(SParser.SYMBOL_IDENTIFIER, 0);
};

Python_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(SParser.TYPE_IDENTIFIER, 0);
};

Python_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(SParser.BOOLEAN, 0);
};

Python_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(SParser.CHARACTER, 0);
};

Python_identifierContext.prototype.TEXT = function() {
    return this.getToken(SParser.TEXT, 0);
};

Python_identifierContext.prototype.INTEGER = function() {
    return this.getToken(SParser.INTEGER, 0);
};

Python_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(SParser.DECIMAL, 0);
};

Python_identifierContext.prototype.DATE = function() {
    return this.getToken(SParser.DATE, 0);
};

Python_identifierContext.prototype.TIME = function() {
    return this.getToken(SParser.TIME, 0);
};

Python_identifierContext.prototype.DATETIME = function() {
    return this.getToken(SParser.DATETIME, 0);
};

Python_identifierContext.prototype.PERIOD = function() {
    return this.getToken(SParser.PERIOD, 0);
};

Python_identifierContext.prototype.READ = function() {
    return this.getToken(SParser.READ, 0);
};

Python_identifierContext.prototype.WRITE = function() {
    return this.getToken(SParser.WRITE, 0);
};

Python_identifierContext.prototype.TEST = function() {
    return this.getToken(SParser.TEST, 0);
};

Python_identifierContext.prototype.SELF = function() {
    return this.getToken(SParser.SELF, 0);
};

Python_identifierContext.prototype.THIS = function() {
    return this.getToken(SParser.THIS, 0);
};

Python_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterPython_identifier(this);
	}
};

Python_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitPython_identifier(this);
	}
};




SParser.prototype.python_identifier = function() {

    var localctx = new Python_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, SParser.RULE_python_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1866;
        _la = this._input.LA(1);
        if(!(((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (SParser.BOOLEAN - 49)) | (1 << (SParser.CHARACTER - 49)) | (1 << (SParser.TEXT - 49)) | (1 << (SParser.INTEGER - 49)) | (1 << (SParser.DECIMAL - 49)) | (1 << (SParser.DATE - 49)) | (1 << (SParser.TIME - 49)) | (1 << (SParser.DATETIME - 49)) | (1 << (SParser.PERIOD - 49)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (SParser.READ - 116)) | (1 << (SParser.SELF - 116)) | (1 << (SParser.TEST - 116)) | (1 << (SParser.THIS - 116)) | (1 << (SParser.WRITE - 116)) | (1 << (SParser.SYMBOL_IDENTIFIER - 116)) | (1 << (SParser.TYPE_IDENTIFIER - 116)) | (1 << (SParser.VARIABLE_IDENTIFIER - 116)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_java_statement;
    return this;
}

Java_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_statementContext.prototype.constructor = Java_statementContext;


 
Java_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaReturnStatementContext(parser, ctx) {
	Java_statementContext.call(this, parser);
    this.exp = null; // Java_expressionContext;
    Java_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaReturnStatementContext.prototype = Object.create(Java_statementContext.prototype);
JavaReturnStatementContext.prototype.constructor = JavaReturnStatementContext;

JavaReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(SParser.RETURN, 0);
};

JavaReturnStatementContext.prototype.SEMI = function() {
    return this.getToken(SParser.SEMI, 0);
};

JavaReturnStatementContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaReturnStatement(this);
	}
};

JavaReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaReturnStatement(this);
	}
};


function JavaStatementContext(parser, ctx) {
	Java_statementContext.call(this, parser);
    this.exp = null; // Java_expressionContext;
    Java_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaStatementContext.prototype = Object.create(Java_statementContext.prototype);
JavaStatementContext.prototype.constructor = JavaStatementContext;

JavaStatementContext.prototype.SEMI = function() {
    return this.getToken(SParser.SEMI, 0);
};

JavaStatementContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaStatement(this);
	}
};

JavaStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaStatement(this);
	}
};



SParser.prototype.java_statement = function() {

    var localctx = new Java_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, SParser.RULE_java_statement);
    try {
        this.state = 1875;
        switch(this._input.LA(1)) {
        case SParser.RETURN:
            localctx = new JavaReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1868;
            this.match(SParser.RETURN);
            this.state = 1869; 
            localctx.exp = this.java_expression(0);
            this.state = 1870;
            this.match(SParser.SEMI);
            break;
        case SParser.LPAR:
        case SParser.BOOLEAN:
        case SParser.CHARACTER:
        case SParser.TEXT:
        case SParser.INTEGER:
        case SParser.DECIMAL:
        case SParser.DATE:
        case SParser.TIME:
        case SParser.DATETIME:
        case SParser.PERIOD:
        case SParser.READ:
        case SParser.SELF:
        case SParser.TEST:
        case SParser.THIS:
        case SParser.WRITE:
        case SParser.BOOLEAN_LITERAL:
        case SParser.CHAR_LITERAL:
        case SParser.SYMBOL_IDENTIFIER:
        case SParser.TYPE_IDENTIFIER:
        case SParser.VARIABLE_IDENTIFIER:
        case SParser.NATIVE_IDENTIFIER:
        case SParser.DOLLAR_IDENTIFIER:
        case SParser.TEXT_LITERAL:
        case SParser.INTEGER_LITERAL:
        case SParser.DECIMAL_LITERAL:
            localctx = new JavaStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1872; 
            localctx.exp = this.java_expression(0);
            this.state = 1873;
            this.match(SParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_java_expression;
    return this;
}

Java_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_expressionContext.prototype.constructor = Java_expressionContext;


 
Java_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaSelectorExpressionContext(parser, ctx) {
	Java_expressionContext.call(this, parser);
    this.parent = null; // Java_expressionContext;
    this.child = null; // Java_selector_expressionContext;
    Java_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaSelectorExpressionContext.prototype = Object.create(Java_expressionContext.prototype);
JavaSelectorExpressionContext.prototype.constructor = JavaSelectorExpressionContext;

JavaSelectorExpressionContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};

JavaSelectorExpressionContext.prototype.java_selector_expression = function() {
    return this.getTypedRuleContext(Java_selector_expressionContext,0);
};
JavaSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaSelectorExpression(this);
	}
};

JavaSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaSelectorExpression(this);
	}
};


function JavaPrimaryExpressionContext(parser, ctx) {
	Java_expressionContext.call(this, parser);
    this.exp = null; // Java_primary_expressionContext;
    Java_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaPrimaryExpressionContext.prototype = Object.create(Java_expressionContext.prototype);
JavaPrimaryExpressionContext.prototype.constructor = JavaPrimaryExpressionContext;

JavaPrimaryExpressionContext.prototype.java_primary_expression = function() {
    return this.getTypedRuleContext(Java_primary_expressionContext,0);
};
JavaPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaPrimaryExpression(this);
	}
};

JavaPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaPrimaryExpression(this);
	}
};



SParser.prototype.java_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 330;
    this.enterRecursionRule(localctx, 330, SParser.RULE_java_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1878; 
        localctx.exp = this.java_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1884;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,137,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaSelectorExpressionContext(this, new Java_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_java_expression);
                this.state = 1880;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1881; 
                localctx.child = this.java_selector_expression(); 
            }
            this.state = 1886;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,137,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_java_primary_expression;
    return this;
}

Java_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_primary_expressionContext.prototype.constructor = Java_primary_expressionContext;

Java_primary_expressionContext.prototype.java_this_expression = function() {
    return this.getTypedRuleContext(Java_this_expressionContext,0);
};

Java_primary_expressionContext.prototype.java_parenthesis_expression = function() {
    return this.getTypedRuleContext(Java_parenthesis_expressionContext,0);
};

Java_primary_expressionContext.prototype.java_identifier_expression = function() {
    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
};

Java_primary_expressionContext.prototype.java_literal_expression = function() {
    return this.getTypedRuleContext(Java_literal_expressionContext,0);
};

Java_primary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJava_primary_expression(this);
	}
};

Java_primary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJava_primary_expression(this);
	}
};




SParser.prototype.java_primary_expression = function() {

    var localctx = new Java_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, SParser.RULE_java_primary_expression);
    try {
        this.state = 1891;
        switch(this._input.LA(1)) {
        case SParser.SELF:
        case SParser.THIS:
            this.enterOuterAlt(localctx, 1);
            this.state = 1887; 
            this.java_this_expression();
            break;
        case SParser.LPAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 1888; 
            this.java_parenthesis_expression();
            break;
        case SParser.BOOLEAN:
        case SParser.CHARACTER:
        case SParser.TEXT:
        case SParser.INTEGER:
        case SParser.DECIMAL:
        case SParser.DATE:
        case SParser.TIME:
        case SParser.DATETIME:
        case SParser.PERIOD:
        case SParser.READ:
        case SParser.TEST:
        case SParser.WRITE:
        case SParser.SYMBOL_IDENTIFIER:
        case SParser.TYPE_IDENTIFIER:
        case SParser.VARIABLE_IDENTIFIER:
        case SParser.NATIVE_IDENTIFIER:
        case SParser.DOLLAR_IDENTIFIER:
            this.enterOuterAlt(localctx, 3);
            this.state = 1889; 
            this.java_identifier_expression(0);
            break;
        case SParser.BOOLEAN_LITERAL:
        case SParser.CHAR_LITERAL:
        case SParser.TEXT_LITERAL:
        case SParser.INTEGER_LITERAL:
        case SParser.DECIMAL_LITERAL:
            this.enterOuterAlt(localctx, 4);
            this.state = 1890; 
            this.java_literal_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_this_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_java_this_expression;
    return this;
}

Java_this_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_this_expressionContext.prototype.constructor = Java_this_expressionContext;

Java_this_expressionContext.prototype.this_expression = function() {
    return this.getTypedRuleContext(This_expressionContext,0);
};

Java_this_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJava_this_expression(this);
	}
};

Java_this_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJava_this_expression(this);
	}
};




SParser.prototype.java_this_expression = function() {

    var localctx = new Java_this_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, SParser.RULE_java_this_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1893; 
        this.this_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_java_selector_expression;
    return this;
}

Java_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_selector_expressionContext.prototype.constructor = Java_selector_expressionContext;


 
Java_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaItemExpressionContext(parser, ctx) {
	Java_selector_expressionContext.call(this, parser);
    this.exp = null; // Java_item_expressionContext;
    Java_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaItemExpressionContext.prototype = Object.create(Java_selector_expressionContext.prototype);
JavaItemExpressionContext.prototype.constructor = JavaItemExpressionContext;

JavaItemExpressionContext.prototype.java_item_expression = function() {
    return this.getTypedRuleContext(Java_item_expressionContext,0);
};
JavaItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaItemExpression(this);
	}
};

JavaItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaItemExpression(this);
	}
};


function JavaMethodExpressionContext(parser, ctx) {
	Java_selector_expressionContext.call(this, parser);
    this.exp = null; // Java_method_expressionContext;
    Java_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaMethodExpressionContext.prototype = Object.create(Java_selector_expressionContext.prototype);
JavaMethodExpressionContext.prototype.constructor = JavaMethodExpressionContext;

JavaMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(SParser.DOT, 0);
};

JavaMethodExpressionContext.prototype.java_method_expression = function() {
    return this.getTypedRuleContext(Java_method_expressionContext,0);
};
JavaMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaMethodExpression(this);
	}
};

JavaMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaMethodExpression(this);
	}
};



SParser.prototype.java_selector_expression = function() {

    var localctx = new Java_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, SParser.RULE_java_selector_expression);
    try {
        this.state = 1898;
        switch(this._input.LA(1)) {
        case SParser.DOT:
            localctx = new JavaMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1895;
            this.match(SParser.DOT);
            this.state = 1896; 
            localctx.exp = this.java_method_expression();
            break;
        case SParser.LBRAK:
            localctx = new JavaItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1897; 
            localctx.exp = this.java_item_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_java_method_expression;
    this.name = null; // Java_identifierContext
    this.args = null; // Java_argumentsContext
    return this;
}

Java_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_method_expressionContext.prototype.constructor = Java_method_expressionContext;

Java_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Java_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Java_method_expressionContext.prototype.java_identifier = function() {
    return this.getTypedRuleContext(Java_identifierContext,0);
};

Java_method_expressionContext.prototype.java_arguments = function() {
    return this.getTypedRuleContext(Java_argumentsContext,0);
};

Java_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJava_method_expression(this);
	}
};

Java_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJava_method_expression(this);
	}
};




SParser.prototype.java_method_expression = function() {

    var localctx = new Java_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, SParser.RULE_java_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1900; 
        localctx.name = this.java_identifier();
        this.state = 1901;
        this.match(SParser.LPAR);
        this.state = 1903;
        _la = this._input.LA(1);
        if(_la===SParser.LPAR || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (SParser.BOOLEAN - 49)) | (1 << (SParser.CHARACTER - 49)) | (1 << (SParser.TEXT - 49)) | (1 << (SParser.INTEGER - 49)) | (1 << (SParser.DECIMAL - 49)) | (1 << (SParser.DATE - 49)) | (1 << (SParser.TIME - 49)) | (1 << (SParser.DATETIME - 49)) | (1 << (SParser.PERIOD - 49)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (SParser.READ - 116)) | (1 << (SParser.SELF - 116)) | (1 << (SParser.TEST - 116)) | (1 << (SParser.THIS - 116)) | (1 << (SParser.WRITE - 116)) | (1 << (SParser.BOOLEAN_LITERAL - 116)) | (1 << (SParser.CHAR_LITERAL - 116)) | (1 << (SParser.SYMBOL_IDENTIFIER - 116)) | (1 << (SParser.TYPE_IDENTIFIER - 116)) | (1 << (SParser.VARIABLE_IDENTIFIER - 116)) | (1 << (SParser.NATIVE_IDENTIFIER - 116)) | (1 << (SParser.DOLLAR_IDENTIFIER - 116)) | (1 << (SParser.TEXT_LITERAL - 116)) | (1 << (SParser.INTEGER_LITERAL - 116)))) !== 0) || _la===SParser.DECIMAL_LITERAL) {
            this.state = 1902; 
            localctx.args = this.java_arguments(0);
        }

        this.state = 1905;
        this.match(SParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_java_arguments;
    return this;
}

Java_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_argumentsContext.prototype.constructor = Java_argumentsContext;


 
Java_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaArgumentListItemContext(parser, ctx) {
	Java_argumentsContext.call(this, parser);
    this.items = null; // Java_argumentsContext;
    this.item = null; // Java_expressionContext;
    Java_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaArgumentListItemContext.prototype = Object.create(Java_argumentsContext.prototype);
JavaArgumentListItemContext.prototype.constructor = JavaArgumentListItemContext;

JavaArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(SParser.COMMA, 0);
};

JavaArgumentListItemContext.prototype.java_arguments = function() {
    return this.getTypedRuleContext(Java_argumentsContext,0);
};

JavaArgumentListItemContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaArgumentListItem(this);
	}
};

JavaArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaArgumentListItem(this);
	}
};


function JavaArgumentListContext(parser, ctx) {
	Java_argumentsContext.call(this, parser);
    this.item = null; // Java_expressionContext;
    Java_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaArgumentListContext.prototype = Object.create(Java_argumentsContext.prototype);
JavaArgumentListContext.prototype.constructor = JavaArgumentListContext;

JavaArgumentListContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaArgumentList(this);
	}
};

JavaArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaArgumentList(this);
	}
};



SParser.prototype.java_arguments = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_argumentsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 340;
    this.enterRecursionRule(localctx, 340, SParser.RULE_java_arguments, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1908; 
        localctx.item = this.java_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1915;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,141,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaArgumentListItemContext(this, new Java_argumentsContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_java_arguments);
                this.state = 1910;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1911;
                this.match(SParser.COMMA);
                this.state = 1912; 
                localctx.item = this.java_expression(0); 
            }
            this.state = 1917;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,141,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_item_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_java_item_expression;
    this.exp = null; // Java_expressionContext
    return this;
}

Java_item_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_item_expressionContext.prototype.constructor = Java_item_expressionContext;

Java_item_expressionContext.prototype.LBRAK = function() {
    return this.getToken(SParser.LBRAK, 0);
};

Java_item_expressionContext.prototype.RBRAK = function() {
    return this.getToken(SParser.RBRAK, 0);
};

Java_item_expressionContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};

Java_item_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJava_item_expression(this);
	}
};

Java_item_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJava_item_expression(this);
	}
};




SParser.prototype.java_item_expression = function() {

    var localctx = new Java_item_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, SParser.RULE_java_item_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1918;
        this.match(SParser.LBRAK);
        this.state = 1919; 
        localctx.exp = this.java_expression(0);
        this.state = 1920;
        this.match(SParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_java_parenthesis_expression;
    this.exp = null; // Java_expressionContext
    return this;
}

Java_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_parenthesis_expressionContext.prototype.constructor = Java_parenthesis_expressionContext;

Java_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Java_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Java_parenthesis_expressionContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};

Java_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJava_parenthesis_expression(this);
	}
};

Java_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJava_parenthesis_expression(this);
	}
};




SParser.prototype.java_parenthesis_expression = function() {

    var localctx = new Java_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, SParser.RULE_java_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1922;
        this.match(SParser.LPAR);
        this.state = 1923; 
        localctx.exp = this.java_expression(0);
        this.state = 1924;
        this.match(SParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_java_identifier_expression;
    return this;
}

Java_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_identifier_expressionContext.prototype.constructor = Java_identifier_expressionContext;


 
Java_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaIdentifierContext(parser, ctx) {
	Java_identifier_expressionContext.call(this, parser);
    this.name = null; // Java_identifierContext;
    Java_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaIdentifierContext.prototype = Object.create(Java_identifier_expressionContext.prototype);
JavaIdentifierContext.prototype.constructor = JavaIdentifierContext;

JavaIdentifierContext.prototype.java_identifier = function() {
    return this.getTypedRuleContext(Java_identifierContext,0);
};
JavaIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaIdentifier(this);
	}
};

JavaIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaIdentifier(this);
	}
};


function JavaChildIdentifierContext(parser, ctx) {
	Java_identifier_expressionContext.call(this, parser);
    this.parent = null; // Java_identifier_expressionContext;
    this.name = null; // Java_identifierContext;
    Java_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaChildIdentifierContext.prototype = Object.create(Java_identifier_expressionContext.prototype);
JavaChildIdentifierContext.prototype.constructor = JavaChildIdentifierContext;

JavaChildIdentifierContext.prototype.DOT = function() {
    return this.getToken(SParser.DOT, 0);
};

JavaChildIdentifierContext.prototype.java_identifier_expression = function() {
    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
};

JavaChildIdentifierContext.prototype.java_identifier = function() {
    return this.getTypedRuleContext(Java_identifierContext,0);
};
JavaChildIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaChildIdentifier(this);
	}
};

JavaChildIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaChildIdentifier(this);
	}
};



SParser.prototype.java_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 346;
    this.enterRecursionRule(localctx, 346, SParser.RULE_java_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaIdentifierContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1927; 
        localctx.name = this.java_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1934;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,142,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaChildIdentifierContext(this, new Java_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_java_identifier_expression);
                this.state = 1929;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1930;
                this.match(SParser.DOT);
                this.state = 1931; 
                localctx.name = this.java_identifier(); 
            }
            this.state = 1936;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,142,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_class_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_java_class_identifier_expression;
    return this;
}

Java_class_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_class_identifier_expressionContext.prototype.constructor = Java_class_identifier_expressionContext;


 
Java_class_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaClassIdentifierContext(parser, ctx) {
	Java_class_identifier_expressionContext.call(this, parser);
    this.klass = null; // Java_identifier_expressionContext;
    Java_class_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaClassIdentifierContext.prototype = Object.create(Java_class_identifier_expressionContext.prototype);
JavaClassIdentifierContext.prototype.constructor = JavaClassIdentifierContext;

JavaClassIdentifierContext.prototype.java_identifier_expression = function() {
    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
};
JavaClassIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaClassIdentifier(this);
	}
};

JavaClassIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaClassIdentifier(this);
	}
};


function JavaChildClassIdentifierContext(parser, ctx) {
	Java_class_identifier_expressionContext.call(this, parser);
    this.parent = null; // Java_class_identifier_expressionContext;
    this.name = null; // Token;
    Java_class_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaChildClassIdentifierContext.prototype = Object.create(Java_class_identifier_expressionContext.prototype);
JavaChildClassIdentifierContext.prototype.constructor = JavaChildClassIdentifierContext;

JavaChildClassIdentifierContext.prototype.java_class_identifier_expression = function() {
    return this.getTypedRuleContext(Java_class_identifier_expressionContext,0);
};

JavaChildClassIdentifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(SParser.DOLLAR_IDENTIFIER, 0);
};
JavaChildClassIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaChildClassIdentifier(this);
	}
};

JavaChildClassIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaChildClassIdentifier(this);
	}
};



SParser.prototype.java_class_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_class_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 348;
    this.enterRecursionRule(localctx, 348, SParser.RULE_java_class_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaClassIdentifierContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1938; 
        localctx.klass = this.java_identifier_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1944;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,143,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaChildClassIdentifierContext(this, new Java_class_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_java_class_identifier_expression);
                this.state = 1940;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1941;
                localctx.name = this.match(SParser.DOLLAR_IDENTIFIER); 
            }
            this.state = 1946;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,143,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_java_literal_expression;
    return this;
}

Java_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_literal_expressionContext.prototype.constructor = Java_literal_expressionContext;


 
Java_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaBooleanLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaBooleanLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaBooleanLiteralContext.prototype.constructor = JavaBooleanLiteralContext;

JavaBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(SParser.BOOLEAN_LITERAL, 0);
};
JavaBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaBooleanLiteral(this);
	}
};

JavaBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaBooleanLiteral(this);
	}
};


function JavaCharacterLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaCharacterLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaCharacterLiteralContext.prototype.constructor = JavaCharacterLiteralContext;

JavaCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(SParser.CHAR_LITERAL, 0);
};
JavaCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaCharacterLiteral(this);
	}
};

JavaCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaCharacterLiteral(this);
	}
};


function JavaIntegerLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaIntegerLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaIntegerLiteralContext.prototype.constructor = JavaIntegerLiteralContext;

JavaIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(SParser.INTEGER_LITERAL, 0);
};
JavaIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaIntegerLiteral(this);
	}
};

JavaIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaIntegerLiteral(this);
	}
};


function JavaTextLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaTextLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaTextLiteralContext.prototype.constructor = JavaTextLiteralContext;

JavaTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(SParser.TEXT_LITERAL, 0);
};
JavaTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaTextLiteral(this);
	}
};

JavaTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaTextLiteral(this);
	}
};


function JavaDecimalLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaDecimalLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaDecimalLiteralContext.prototype.constructor = JavaDecimalLiteralContext;

JavaDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(SParser.DECIMAL_LITERAL, 0);
};
JavaDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJavaDecimalLiteral(this);
	}
};

JavaDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJavaDecimalLiteral(this);
	}
};



SParser.prototype.java_literal_expression = function() {

    var localctx = new Java_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, SParser.RULE_java_literal_expression);
    try {
        this.state = 1952;
        switch(this._input.LA(1)) {
        case SParser.INTEGER_LITERAL:
            localctx = new JavaIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1947;
            localctx.t = this.match(SParser.INTEGER_LITERAL);
            break;
        case SParser.DECIMAL_LITERAL:
            localctx = new JavaDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1948;
            localctx.t = this.match(SParser.DECIMAL_LITERAL);
            break;
        case SParser.TEXT_LITERAL:
            localctx = new JavaTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1949;
            localctx.t = this.match(SParser.TEXT_LITERAL);
            break;
        case SParser.BOOLEAN_LITERAL:
            localctx = new JavaBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1950;
            localctx.t = this.match(SParser.BOOLEAN_LITERAL);
            break;
        case SParser.CHAR_LITERAL:
            localctx = new JavaCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1951;
            localctx.t = this.match(SParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_java_identifier;
    return this;
}

Java_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_identifierContext.prototype.constructor = Java_identifierContext;

Java_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(SParser.VARIABLE_IDENTIFIER, 0);
};

Java_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(SParser.SYMBOL_IDENTIFIER, 0);
};

Java_identifierContext.prototype.NATIVE_IDENTIFIER = function() {
    return this.getToken(SParser.NATIVE_IDENTIFIER, 0);
};

Java_identifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(SParser.DOLLAR_IDENTIFIER, 0);
};

Java_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(SParser.TYPE_IDENTIFIER, 0);
};

Java_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(SParser.BOOLEAN, 0);
};

Java_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(SParser.CHARACTER, 0);
};

Java_identifierContext.prototype.TEXT = function() {
    return this.getToken(SParser.TEXT, 0);
};

Java_identifierContext.prototype.INTEGER = function() {
    return this.getToken(SParser.INTEGER, 0);
};

Java_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(SParser.DECIMAL, 0);
};

Java_identifierContext.prototype.DATE = function() {
    return this.getToken(SParser.DATE, 0);
};

Java_identifierContext.prototype.TIME = function() {
    return this.getToken(SParser.TIME, 0);
};

Java_identifierContext.prototype.DATETIME = function() {
    return this.getToken(SParser.DATETIME, 0);
};

Java_identifierContext.prototype.PERIOD = function() {
    return this.getToken(SParser.PERIOD, 0);
};

Java_identifierContext.prototype.READ = function() {
    return this.getToken(SParser.READ, 0);
};

Java_identifierContext.prototype.WRITE = function() {
    return this.getToken(SParser.WRITE, 0);
};

Java_identifierContext.prototype.TEST = function() {
    return this.getToken(SParser.TEST, 0);
};

Java_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterJava_identifier(this);
	}
};

Java_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitJava_identifier(this);
	}
};




SParser.prototype.java_identifier = function() {

    var localctx = new Java_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, SParser.RULE_java_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1954;
        _la = this._input.LA(1);
        if(!(((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (SParser.BOOLEAN - 49)) | (1 << (SParser.CHARACTER - 49)) | (1 << (SParser.TEXT - 49)) | (1 << (SParser.INTEGER - 49)) | (1 << (SParser.DECIMAL - 49)) | (1 << (SParser.DATE - 49)) | (1 << (SParser.TIME - 49)) | (1 << (SParser.DATETIME - 49)) | (1 << (SParser.PERIOD - 49)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (SParser.READ - 116)) | (1 << (SParser.TEST - 116)) | (1 << (SParser.WRITE - 116)) | (1 << (SParser.SYMBOL_IDENTIFIER - 116)) | (1 << (SParser.TYPE_IDENTIFIER - 116)) | (1 << (SParser.VARIABLE_IDENTIFIER - 116)) | (1 << (SParser.NATIVE_IDENTIFIER - 116)) | (1 << (SParser.DOLLAR_IDENTIFIER - 116)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_csharp_statement;
    return this;
}

Csharp_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_statementContext.prototype.constructor = Csharp_statementContext;


 
Csharp_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpReturnStatementContext(parser, ctx) {
	Csharp_statementContext.call(this, parser);
    this.exp = null; // Csharp_expressionContext;
    Csharp_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpReturnStatementContext.prototype = Object.create(Csharp_statementContext.prototype);
CSharpReturnStatementContext.prototype.constructor = CSharpReturnStatementContext;

CSharpReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(SParser.RETURN, 0);
};

CSharpReturnStatementContext.prototype.SEMI = function() {
    return this.getToken(SParser.SEMI, 0);
};

CSharpReturnStatementContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCSharpReturnStatement(this);
	}
};

CSharpReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCSharpReturnStatement(this);
	}
};


function CSharpStatementContext(parser, ctx) {
	Csharp_statementContext.call(this, parser);
    this.exp = null; // Csharp_expressionContext;
    Csharp_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpStatementContext.prototype = Object.create(Csharp_statementContext.prototype);
CSharpStatementContext.prototype.constructor = CSharpStatementContext;

CSharpStatementContext.prototype.SEMI = function() {
    return this.getToken(SParser.SEMI, 0);
};

CSharpStatementContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCSharpStatement(this);
	}
};

CSharpStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCSharpStatement(this);
	}
};



SParser.prototype.csharp_statement = function() {

    var localctx = new Csharp_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, SParser.RULE_csharp_statement);
    try {
        this.state = 1963;
        switch(this._input.LA(1)) {
        case SParser.RETURN:
            localctx = new CSharpReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1956;
            this.match(SParser.RETURN);
            this.state = 1957; 
            localctx.exp = this.csharp_expression(0);
            this.state = 1958;
            this.match(SParser.SEMI);
            break;
        case SParser.LPAR:
        case SParser.BOOLEAN:
        case SParser.CHARACTER:
        case SParser.TEXT:
        case SParser.INTEGER:
        case SParser.DECIMAL:
        case SParser.DATE:
        case SParser.TIME:
        case SParser.DATETIME:
        case SParser.PERIOD:
        case SParser.READ:
        case SParser.SELF:
        case SParser.TEST:
        case SParser.THIS:
        case SParser.WRITE:
        case SParser.BOOLEAN_LITERAL:
        case SParser.CHAR_LITERAL:
        case SParser.SYMBOL_IDENTIFIER:
        case SParser.TYPE_IDENTIFIER:
        case SParser.VARIABLE_IDENTIFIER:
        case SParser.DOLLAR_IDENTIFIER:
        case SParser.TEXT_LITERAL:
        case SParser.INTEGER_LITERAL:
        case SParser.DECIMAL_LITERAL:
            localctx = new CSharpStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1960; 
            localctx.exp = this.csharp_expression(0);
            this.state = 1961;
            this.match(SParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_csharp_expression;
    return this;
}

Csharp_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_expressionContext.prototype.constructor = Csharp_expressionContext;


 
Csharp_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CSharpSelectorExpressionContext(parser, ctx) {
	Csharp_expressionContext.call(this, parser);
    this.parent = null; // Csharp_expressionContext;
    this.child = null; // Csharp_selector_expressionContext;
    Csharp_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpSelectorExpressionContext.prototype = Object.create(Csharp_expressionContext.prototype);
CSharpSelectorExpressionContext.prototype.constructor = CSharpSelectorExpressionContext;

CSharpSelectorExpressionContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};

CSharpSelectorExpressionContext.prototype.csharp_selector_expression = function() {
    return this.getTypedRuleContext(Csharp_selector_expressionContext,0);
};
CSharpSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCSharpSelectorExpression(this);
	}
};

CSharpSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCSharpSelectorExpression(this);
	}
};


function CSharpPrimaryExpressionContext(parser, ctx) {
	Csharp_expressionContext.call(this, parser);
    this.exp = null; // Csharp_primary_expressionContext;
    Csharp_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpPrimaryExpressionContext.prototype = Object.create(Csharp_expressionContext.prototype);
CSharpPrimaryExpressionContext.prototype.constructor = CSharpPrimaryExpressionContext;

CSharpPrimaryExpressionContext.prototype.csharp_primary_expression = function() {
    return this.getTypedRuleContext(Csharp_primary_expressionContext,0);
};
CSharpPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCSharpPrimaryExpression(this);
	}
};

CSharpPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCSharpPrimaryExpression(this);
	}
};



SParser.prototype.csharp_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Csharp_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 356;
    this.enterRecursionRule(localctx, 356, SParser.RULE_csharp_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new CSharpPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1966; 
        localctx.exp = this.csharp_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1972;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,146,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CSharpSelectorExpressionContext(this, new Csharp_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_csharp_expression);
                this.state = 1968;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1969; 
                localctx.child = this.csharp_selector_expression(); 
            }
            this.state = 1974;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,146,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Csharp_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_csharp_primary_expression;
    return this;
}

Csharp_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_primary_expressionContext.prototype.constructor = Csharp_primary_expressionContext;

Csharp_primary_expressionContext.prototype.csharp_this_expression = function() {
    return this.getTypedRuleContext(Csharp_this_expressionContext,0);
};

Csharp_primary_expressionContext.prototype.csharp_parenthesis_expression = function() {
    return this.getTypedRuleContext(Csharp_parenthesis_expressionContext,0);
};

Csharp_primary_expressionContext.prototype.csharp_identifier_expression = function() {
    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
};

Csharp_primary_expressionContext.prototype.csharp_literal_expression = function() {
    return this.getTypedRuleContext(Csharp_literal_expressionContext,0);
};

Csharp_primary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCsharp_primary_expression(this);
	}
};

Csharp_primary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCsharp_primary_expression(this);
	}
};




SParser.prototype.csharp_primary_expression = function() {

    var localctx = new Csharp_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, SParser.RULE_csharp_primary_expression);
    try {
        this.state = 1979;
        switch(this._input.LA(1)) {
        case SParser.SELF:
        case SParser.THIS:
            this.enterOuterAlt(localctx, 1);
            this.state = 1975; 
            this.csharp_this_expression();
            break;
        case SParser.LPAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 1976; 
            this.csharp_parenthesis_expression();
            break;
        case SParser.BOOLEAN:
        case SParser.CHARACTER:
        case SParser.TEXT:
        case SParser.INTEGER:
        case SParser.DECIMAL:
        case SParser.DATE:
        case SParser.TIME:
        case SParser.DATETIME:
        case SParser.PERIOD:
        case SParser.READ:
        case SParser.TEST:
        case SParser.WRITE:
        case SParser.SYMBOL_IDENTIFIER:
        case SParser.TYPE_IDENTIFIER:
        case SParser.VARIABLE_IDENTIFIER:
        case SParser.DOLLAR_IDENTIFIER:
            this.enterOuterAlt(localctx, 3);
            this.state = 1977; 
            this.csharp_identifier_expression(0);
            break;
        case SParser.BOOLEAN_LITERAL:
        case SParser.CHAR_LITERAL:
        case SParser.TEXT_LITERAL:
        case SParser.INTEGER_LITERAL:
        case SParser.DECIMAL_LITERAL:
            this.enterOuterAlt(localctx, 4);
            this.state = 1978; 
            this.csharp_literal_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_this_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_csharp_this_expression;
    return this;
}

Csharp_this_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_this_expressionContext.prototype.constructor = Csharp_this_expressionContext;

Csharp_this_expressionContext.prototype.this_expression = function() {
    return this.getTypedRuleContext(This_expressionContext,0);
};

Csharp_this_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCsharp_this_expression(this);
	}
};

Csharp_this_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCsharp_this_expression(this);
	}
};




SParser.prototype.csharp_this_expression = function() {

    var localctx = new Csharp_this_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, SParser.RULE_csharp_this_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1981; 
        this.this_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_csharp_selector_expression;
    return this;
}

Csharp_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_selector_expressionContext.prototype.constructor = Csharp_selector_expressionContext;


 
Csharp_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpMethodExpressionContext(parser, ctx) {
	Csharp_selector_expressionContext.call(this, parser);
    this.exp = null; // Csharp_method_expressionContext;
    Csharp_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpMethodExpressionContext.prototype = Object.create(Csharp_selector_expressionContext.prototype);
CSharpMethodExpressionContext.prototype.constructor = CSharpMethodExpressionContext;

CSharpMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(SParser.DOT, 0);
};

CSharpMethodExpressionContext.prototype.csharp_method_expression = function() {
    return this.getTypedRuleContext(Csharp_method_expressionContext,0);
};
CSharpMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCSharpMethodExpression(this);
	}
};

CSharpMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCSharpMethodExpression(this);
	}
};


function CSharpItemExpressionContext(parser, ctx) {
	Csharp_selector_expressionContext.call(this, parser);
    this.exp = null; // Csharp_item_expressionContext;
    Csharp_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpItemExpressionContext.prototype = Object.create(Csharp_selector_expressionContext.prototype);
CSharpItemExpressionContext.prototype.constructor = CSharpItemExpressionContext;

CSharpItemExpressionContext.prototype.csharp_item_expression = function() {
    return this.getTypedRuleContext(Csharp_item_expressionContext,0);
};
CSharpItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCSharpItemExpression(this);
	}
};

CSharpItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCSharpItemExpression(this);
	}
};



SParser.prototype.csharp_selector_expression = function() {

    var localctx = new Csharp_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, SParser.RULE_csharp_selector_expression);
    try {
        this.state = 1986;
        switch(this._input.LA(1)) {
        case SParser.DOT:
            localctx = new CSharpMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1983;
            this.match(SParser.DOT);
            this.state = 1984; 
            localctx.exp = this.csharp_method_expression();
            break;
        case SParser.LBRAK:
            localctx = new CSharpItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1985; 
            localctx.exp = this.csharp_item_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_csharp_method_expression;
    this.name = null; // Csharp_identifierContext
    this.args = null; // Csharp_argumentsContext
    return this;
}

Csharp_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_method_expressionContext.prototype.constructor = Csharp_method_expressionContext;

Csharp_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Csharp_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Csharp_method_expressionContext.prototype.csharp_identifier = function() {
    return this.getTypedRuleContext(Csharp_identifierContext,0);
};

Csharp_method_expressionContext.prototype.csharp_arguments = function() {
    return this.getTypedRuleContext(Csharp_argumentsContext,0);
};

Csharp_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCsharp_method_expression(this);
	}
};

Csharp_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCsharp_method_expression(this);
	}
};




SParser.prototype.csharp_method_expression = function() {

    var localctx = new Csharp_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, SParser.RULE_csharp_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1988; 
        localctx.name = this.csharp_identifier();
        this.state = 1989;
        this.match(SParser.LPAR);
        this.state = 1991;
        _la = this._input.LA(1);
        if(_la===SParser.LPAR || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (SParser.BOOLEAN - 49)) | (1 << (SParser.CHARACTER - 49)) | (1 << (SParser.TEXT - 49)) | (1 << (SParser.INTEGER - 49)) | (1 << (SParser.DECIMAL - 49)) | (1 << (SParser.DATE - 49)) | (1 << (SParser.TIME - 49)) | (1 << (SParser.DATETIME - 49)) | (1 << (SParser.PERIOD - 49)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (SParser.READ - 116)) | (1 << (SParser.SELF - 116)) | (1 << (SParser.TEST - 116)) | (1 << (SParser.THIS - 116)) | (1 << (SParser.WRITE - 116)) | (1 << (SParser.BOOLEAN_LITERAL - 116)) | (1 << (SParser.CHAR_LITERAL - 116)) | (1 << (SParser.SYMBOL_IDENTIFIER - 116)) | (1 << (SParser.TYPE_IDENTIFIER - 116)) | (1 << (SParser.VARIABLE_IDENTIFIER - 116)) | (1 << (SParser.DOLLAR_IDENTIFIER - 116)) | (1 << (SParser.TEXT_LITERAL - 116)) | (1 << (SParser.INTEGER_LITERAL - 116)))) !== 0) || _la===SParser.DECIMAL_LITERAL) {
            this.state = 1990; 
            localctx.args = this.csharp_arguments(0);
        }

        this.state = 1993;
        this.match(SParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_csharp_arguments;
    return this;
}

Csharp_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_argumentsContext.prototype.constructor = Csharp_argumentsContext;


 
Csharp_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CSharpArgumentListContext(parser, ctx) {
	Csharp_argumentsContext.call(this, parser);
    this.item = null; // Csharp_expressionContext;
    Csharp_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpArgumentListContext.prototype = Object.create(Csharp_argumentsContext.prototype);
CSharpArgumentListContext.prototype.constructor = CSharpArgumentListContext;

CSharpArgumentListContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCSharpArgumentList(this);
	}
};

CSharpArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCSharpArgumentList(this);
	}
};


function CSharpArgumentListItemContext(parser, ctx) {
	Csharp_argumentsContext.call(this, parser);
    this.items = null; // Csharp_argumentsContext;
    this.item = null; // Csharp_expressionContext;
    Csharp_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpArgumentListItemContext.prototype = Object.create(Csharp_argumentsContext.prototype);
CSharpArgumentListItemContext.prototype.constructor = CSharpArgumentListItemContext;

CSharpArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(SParser.COMMA, 0);
};

CSharpArgumentListItemContext.prototype.csharp_arguments = function() {
    return this.getTypedRuleContext(Csharp_argumentsContext,0);
};

CSharpArgumentListItemContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCSharpArgumentListItem(this);
	}
};

CSharpArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCSharpArgumentListItem(this);
	}
};



SParser.prototype.csharp_arguments = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Csharp_argumentsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 366;
    this.enterRecursionRule(localctx, 366, SParser.RULE_csharp_arguments, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new CSharpArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1996; 
        localctx.item = this.csharp_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2003;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,150,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CSharpArgumentListItemContext(this, new Csharp_argumentsContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_csharp_arguments);
                this.state = 1998;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1999;
                this.match(SParser.COMMA);
                this.state = 2000; 
                localctx.item = this.csharp_expression(0); 
            }
            this.state = 2005;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,150,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Csharp_item_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_csharp_item_expression;
    this.exp = null; // Csharp_expressionContext
    return this;
}

Csharp_item_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_item_expressionContext.prototype.constructor = Csharp_item_expressionContext;

Csharp_item_expressionContext.prototype.LBRAK = function() {
    return this.getToken(SParser.LBRAK, 0);
};

Csharp_item_expressionContext.prototype.RBRAK = function() {
    return this.getToken(SParser.RBRAK, 0);
};

Csharp_item_expressionContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};

Csharp_item_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCsharp_item_expression(this);
	}
};

Csharp_item_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCsharp_item_expression(this);
	}
};




SParser.prototype.csharp_item_expression = function() {

    var localctx = new Csharp_item_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, SParser.RULE_csharp_item_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2006;
        this.match(SParser.LBRAK);
        this.state = 2007; 
        localctx.exp = this.csharp_expression(0);
        this.state = 2008;
        this.match(SParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_csharp_parenthesis_expression;
    this.exp = null; // Csharp_expressionContext
    return this;
}

Csharp_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_parenthesis_expressionContext.prototype.constructor = Csharp_parenthesis_expressionContext;

Csharp_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(SParser.LPAR, 0);
};

Csharp_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(SParser.RPAR, 0);
};

Csharp_parenthesis_expressionContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};

Csharp_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCsharp_parenthesis_expression(this);
	}
};

Csharp_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCsharp_parenthesis_expression(this);
	}
};




SParser.prototype.csharp_parenthesis_expression = function() {

    var localctx = new Csharp_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, SParser.RULE_csharp_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2010;
        this.match(SParser.LPAR);
        this.state = 2011; 
        localctx.exp = this.csharp_expression(0);
        this.state = 2012;
        this.match(SParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_csharp_identifier_expression;
    return this;
}

Csharp_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_identifier_expressionContext.prototype.constructor = Csharp_identifier_expressionContext;


 
Csharp_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CSharpIdentifierContext(parser, ctx) {
	Csharp_identifier_expressionContext.call(this, parser);
    this.name = null; // Csharp_identifierContext;
    Csharp_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpIdentifierContext.prototype = Object.create(Csharp_identifier_expressionContext.prototype);
CSharpIdentifierContext.prototype.constructor = CSharpIdentifierContext;

CSharpIdentifierContext.prototype.csharp_identifier = function() {
    return this.getTypedRuleContext(Csharp_identifierContext,0);
};
CSharpIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCSharpIdentifier(this);
	}
};

CSharpIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCSharpIdentifier(this);
	}
};


function CSharpChildIdentifierContext(parser, ctx) {
	Csharp_identifier_expressionContext.call(this, parser);
    this.parent = null; // Csharp_identifier_expressionContext;
    this.name = null; // Csharp_identifierContext;
    Csharp_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpChildIdentifierContext.prototype = Object.create(Csharp_identifier_expressionContext.prototype);
CSharpChildIdentifierContext.prototype.constructor = CSharpChildIdentifierContext;

CSharpChildIdentifierContext.prototype.DOT = function() {
    return this.getToken(SParser.DOT, 0);
};

CSharpChildIdentifierContext.prototype.csharp_identifier_expression = function() {
    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
};

CSharpChildIdentifierContext.prototype.csharp_identifier = function() {
    return this.getTypedRuleContext(Csharp_identifierContext,0);
};
CSharpChildIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCSharpChildIdentifier(this);
	}
};

CSharpChildIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCSharpChildIdentifier(this);
	}
};


function CSharpPromptoIdentifierContext(parser, ctx) {
	Csharp_identifier_expressionContext.call(this, parser);
    Csharp_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpPromptoIdentifierContext.prototype = Object.create(Csharp_identifier_expressionContext.prototype);
CSharpPromptoIdentifierContext.prototype.constructor = CSharpPromptoIdentifierContext;

CSharpPromptoIdentifierContext.prototype.DOLLAR_IDENTIFIER = function() {
    return this.getToken(SParser.DOLLAR_IDENTIFIER, 0);
};
CSharpPromptoIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCSharpPromptoIdentifier(this);
	}
};

CSharpPromptoIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCSharpPromptoIdentifier(this);
	}
};



SParser.prototype.csharp_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Csharp_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 372;
    this.enterRecursionRule(localctx, 372, SParser.RULE_csharp_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2017;
        switch(this._input.LA(1)) {
        case SParser.DOLLAR_IDENTIFIER:
            localctx = new CSharpPromptoIdentifierContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 2015;
            this.match(SParser.DOLLAR_IDENTIFIER);
            break;
        case SParser.BOOLEAN:
        case SParser.CHARACTER:
        case SParser.TEXT:
        case SParser.INTEGER:
        case SParser.DECIMAL:
        case SParser.DATE:
        case SParser.TIME:
        case SParser.DATETIME:
        case SParser.PERIOD:
        case SParser.READ:
        case SParser.TEST:
        case SParser.WRITE:
        case SParser.SYMBOL_IDENTIFIER:
        case SParser.TYPE_IDENTIFIER:
        case SParser.VARIABLE_IDENTIFIER:
            localctx = new CSharpIdentifierContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 2016; 
            localctx.name = this.csharp_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2024;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,152,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CSharpChildIdentifierContext(this, new Csharp_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SParser.RULE_csharp_identifier_expression);
                this.state = 2019;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2020;
                this.match(SParser.DOT);
                this.state = 2021; 
                localctx.name = this.csharp_identifier(); 
            }
            this.state = 2026;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,152,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Csharp_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_csharp_literal_expression;
    return this;
}

Csharp_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_literal_expressionContext.prototype.constructor = Csharp_literal_expressionContext;


 
Csharp_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpBooleanLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpBooleanLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpBooleanLiteralContext.prototype.constructor = CSharpBooleanLiteralContext;

CSharpBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(SParser.BOOLEAN_LITERAL, 0);
};
CSharpBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCSharpBooleanLiteral(this);
	}
};

CSharpBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCSharpBooleanLiteral(this);
	}
};


function CSharpIntegerLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpIntegerLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpIntegerLiteralContext.prototype.constructor = CSharpIntegerLiteralContext;

CSharpIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(SParser.INTEGER_LITERAL, 0);
};
CSharpIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCSharpIntegerLiteral(this);
	}
};

CSharpIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCSharpIntegerLiteral(this);
	}
};


function CSharpDecimalLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpDecimalLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpDecimalLiteralContext.prototype.constructor = CSharpDecimalLiteralContext;

CSharpDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(SParser.DECIMAL_LITERAL, 0);
};
CSharpDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCSharpDecimalLiteral(this);
	}
};

CSharpDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCSharpDecimalLiteral(this);
	}
};


function CSharpCharacterLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpCharacterLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpCharacterLiteralContext.prototype.constructor = CSharpCharacterLiteralContext;

CSharpCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(SParser.CHAR_LITERAL, 0);
};
CSharpCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCSharpCharacterLiteral(this);
	}
};

CSharpCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCSharpCharacterLiteral(this);
	}
};


function CSharpTextLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpTextLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpTextLiteralContext.prototype.constructor = CSharpTextLiteralContext;

CSharpTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(SParser.TEXT_LITERAL, 0);
};
CSharpTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCSharpTextLiteral(this);
	}
};

CSharpTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCSharpTextLiteral(this);
	}
};



SParser.prototype.csharp_literal_expression = function() {

    var localctx = new Csharp_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, SParser.RULE_csharp_literal_expression);
    try {
        this.state = 2032;
        switch(this._input.LA(1)) {
        case SParser.INTEGER_LITERAL:
            localctx = new CSharpIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2027;
            this.match(SParser.INTEGER_LITERAL);
            break;
        case SParser.DECIMAL_LITERAL:
            localctx = new CSharpDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2028;
            this.match(SParser.DECIMAL_LITERAL);
            break;
        case SParser.TEXT_LITERAL:
            localctx = new CSharpTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2029;
            this.match(SParser.TEXT_LITERAL);
            break;
        case SParser.BOOLEAN_LITERAL:
            localctx = new CSharpBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2030;
            this.match(SParser.BOOLEAN_LITERAL);
            break;
        case SParser.CHAR_LITERAL:
            localctx = new CSharpCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2031;
            this.match(SParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SParser.RULE_csharp_identifier;
    return this;
}

Csharp_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_identifierContext.prototype.constructor = Csharp_identifierContext;

Csharp_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(SParser.VARIABLE_IDENTIFIER, 0);
};

Csharp_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(SParser.SYMBOL_IDENTIFIER, 0);
};

Csharp_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(SParser.TYPE_IDENTIFIER, 0);
};

Csharp_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(SParser.BOOLEAN, 0);
};

Csharp_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(SParser.CHARACTER, 0);
};

Csharp_identifierContext.prototype.TEXT = function() {
    return this.getToken(SParser.TEXT, 0);
};

Csharp_identifierContext.prototype.INTEGER = function() {
    return this.getToken(SParser.INTEGER, 0);
};

Csharp_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(SParser.DECIMAL, 0);
};

Csharp_identifierContext.prototype.DATE = function() {
    return this.getToken(SParser.DATE, 0);
};

Csharp_identifierContext.prototype.TIME = function() {
    return this.getToken(SParser.TIME, 0);
};

Csharp_identifierContext.prototype.DATETIME = function() {
    return this.getToken(SParser.DATETIME, 0);
};

Csharp_identifierContext.prototype.PERIOD = function() {
    return this.getToken(SParser.PERIOD, 0);
};

Csharp_identifierContext.prototype.READ = function() {
    return this.getToken(SParser.READ, 0);
};

Csharp_identifierContext.prototype.WRITE = function() {
    return this.getToken(SParser.WRITE, 0);
};

Csharp_identifierContext.prototype.TEST = function() {
    return this.getToken(SParser.TEST, 0);
};

Csharp_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.enterCsharp_identifier(this);
	}
};

Csharp_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SParserListener ) {
        listener.exitCsharp_identifier(this);
	}
};




SParser.prototype.csharp_identifier = function() {

    var localctx = new Csharp_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, SParser.RULE_csharp_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2034;
        _la = this._input.LA(1);
        if(!(((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (SParser.BOOLEAN - 49)) | (1 << (SParser.CHARACTER - 49)) | (1 << (SParser.TEXT - 49)) | (1 << (SParser.INTEGER - 49)) | (1 << (SParser.DECIMAL - 49)) | (1 << (SParser.DATE - 49)) | (1 << (SParser.TIME - 49)) | (1 << (SParser.DATETIME - 49)) | (1 << (SParser.PERIOD - 49)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (SParser.READ - 116)) | (1 << (SParser.TEST - 116)) | (1 << (SParser.WRITE - 116)) | (1 << (SParser.SYMBOL_IDENTIFIER - 116)) | (1 << (SParser.TYPE_IDENTIFIER - 116)) | (1 << (SParser.VARIABLE_IDENTIFIER - 116)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


SParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 14:
			return this.native_category_binding_list_sempred(localctx, predIndex);
	case 25:
			return this.callable_parent_sempred(localctx, predIndex);
	case 35:
			return this.else_if_statement_list_sempred(localctx, predIndex);
	case 40:
			return this.expression_sempred(localctx, predIndex);
	case 42:
			return this.instance_expression_sempred(localctx, predIndex);
	case 44:
			return this.instance_selector_sempred(localctx, predIndex);
	case 47:
			return this.argument_assignment_list_sempred(localctx, predIndex);
	case 54:
			return this.child_instance_sempred(localctx, predIndex);
	case 62:
			return this.declarations_sempred(localctx, predIndex);
	case 66:
			return this.native_symbol_list_sempred(localctx, predIndex);
	case 67:
			return this.category_symbol_list_sempred(localctx, predIndex);
	case 68:
			return this.symbol_list_sempred(localctx, predIndex);
	case 72:
			return this.expression_list_sempred(localctx, predIndex);
	case 74:
			return this.typedef_sempred(localctx, predIndex);
	case 81:
			return this.type_identifier_list_sempred(localctx, predIndex);
	case 87:
			return this.argument_list_sempred(localctx, predIndex);
	case 93:
			return this.any_type_sempred(localctx, predIndex);
	case 94:
			return this.member_method_declaration_list_sempred(localctx, predIndex);
	case 96:
			return this.native_member_method_declaration_list_sempred(localctx, predIndex);
	case 101:
			return this.module_token_sempred(localctx, predIndex);
	case 104:
			return this.variable_identifier_list_sempred(localctx, predIndex);
	case 106:
			return this.native_statement_list_sempred(localctx, predIndex);
	case 110:
			return this.statement_list_sempred(localctx, predIndex);
	case 111:
			return this.assertion_list_sempred(localctx, predIndex);
	case 112:
			return this.switch_case_statement_list_sempred(localctx, predIndex);
	case 113:
			return this.catch_statement_list_sempred(localctx, predIndex);
	case 116:
			return this.literal_list_literal_sempred(localctx, predIndex);
	case 124:
			return this.expression_tuple_sempred(localctx, predIndex);
	case 125:
			return this.dict_entry_list_sempred(localctx, predIndex);
	case 129:
			return this.assignable_instance_sempred(localctx, predIndex);
	case 130:
			return this.is_expression_sempred(localctx, predIndex);
	case 132:
			return this.key_token_sempred(localctx, predIndex);
	case 133:
			return this.value_token_sempred(localctx, predIndex);
	case 134:
			return this.symbols_token_sempred(localctx, predIndex);
	case 141:
			return this.javascript_expression_sempred(localctx, predIndex);
	case 146:
			return this.javascript_arguments_sempred(localctx, predIndex);
	case 153:
			return this.python_expression_sempred(localctx, predIndex);
	case 158:
			return this.python_ordinal_argument_list_sempred(localctx, predIndex);
	case 159:
			return this.python_named_argument_list_sempred(localctx, predIndex);
	case 161:
			return this.python_identifier_expression_sempred(localctx, predIndex);
	case 165:
			return this.java_expression_sempred(localctx, predIndex);
	case 170:
			return this.java_arguments_sempred(localctx, predIndex);
	case 173:
			return this.java_identifier_expression_sempred(localctx, predIndex);
	case 174:
			return this.java_class_identifier_expression_sempred(localctx, predIndex);
	case 178:
			return this.csharp_expression_sempred(localctx, predIndex);
	case 183:
			return this.csharp_arguments_sempred(localctx, predIndex);
	case 186:
			return this.csharp_identifier_expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

SParser.prototype.native_category_binding_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.callable_parent_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.else_if_statement_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 29);
		case 4:
			return this.precpred(this._ctx, 28);
		case 5:
			return this.precpred(this._ctx, 27);
		case 6:
			return this.precpred(this._ctx, 26);
		case 7:
			return this.precpred(this._ctx, 25);
		case 8:
			return this.precpred(this._ctx, 24);
		case 9:
			return this.precpred(this._ctx, 23);
		case 10:
			return this.precpred(this._ctx, 22);
		case 11:
			return this.precpred(this._ctx, 21);
		case 12:
			return this.precpred(this._ctx, 18);
		case 13:
			return this.precpred(this._ctx, 17);
		case 14:
			return this.precpred(this._ctx, 16);
		case 15:
			return this.precpred(this._ctx, 15);
		case 16:
			return this.precpred(this._ctx, 14);
		case 17:
			return this.precpred(this._ctx, 13);
		case 18:
			return this.precpred(this._ctx, 11);
		case 19:
			return this.precpred(this._ctx, 10);
		case 20:
			return this.precpred(this._ctx, 9);
		case 21:
			return this.precpred(this._ctx, 8);
		case 22:
			return this.precpred(this._ctx, 7);
		case 23:
			return this.precpred(this._ctx, 6);
		case 24:
			return this.precpred(this._ctx, 5);
		case 25:
			return this.precpred(this._ctx, 4);
		case 26:
			return this.precpred(this._ctx, 20);
		case 27:
			return this.precpred(this._ctx, 19);
		case 28:
			return this.precpred(this._ctx, 12);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.instance_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 29:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.instance_selector_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 30:
			return this.wasNot(SParser.WS);
		case 31:
			return this.wasNot(SParser.WS);
		case 32:
			return this.wasNot(SParser.WS);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.argument_assignment_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 33:
			return this.willNotBe(this.equalToken());
		case 34:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.child_instance_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 35:
			return this.wasNot(SParser.WS);
		case 36:
			return this.wasNot(SParser.WS);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.declarations_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 37:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.native_symbol_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 38:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.category_symbol_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 39:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.symbol_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 40:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.expression_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 41:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.typedef_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 42:
			return this.precpred(this._ctx, 3);
		case 43:
			return this.precpred(this._ctx, 2);
		case 44:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.type_identifier_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 45:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.argument_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 46:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.any_type_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 47:
			return this.precpred(this._ctx, 2);
		case 48:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.member_method_declaration_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 49:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.native_member_method_declaration_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 50:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.module_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 51:
			return this.isText(localctx.i1,"module");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.variable_identifier_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 52:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.native_statement_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 53:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.statement_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 54:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.assertion_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 55:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.switch_case_statement_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 56:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.catch_statement_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 57:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.literal_list_literal_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 58:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.expression_tuple_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 59:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.dict_entry_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 60:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.assignable_instance_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 61:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.is_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 62:
			return this.willBeAOrAn();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.key_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 63:
			return this.isText(localctx.i1,"key");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.value_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 64:
			return this.isText(localctx.i1,"value");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.symbols_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 65:
			return this.isText(localctx.i1,"symbols");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.javascript_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 66:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.javascript_arguments_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 67:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.python_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 68:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.python_ordinal_argument_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 69:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.python_named_argument_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 70:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.python_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 71:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.java_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 72:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.java_arguments_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 73:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.java_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 74:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.java_class_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 75:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.csharp_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 76:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.csharp_arguments_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 77:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SParser.prototype.csharp_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 78:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.SParser = SParser;
