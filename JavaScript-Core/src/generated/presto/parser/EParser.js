// Generated from EParser.g4 by ANTLR 4.5
// jshint ignore: start
var antlr4 = require('antlr4/index');
var EParserListener = require('./EParserListener').EParserListener;
var AbstractParser = require('./AbstractParser').AbstractParser;

var grammarFileName = "EParser.g4";

var serializedATN = ["\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\3\u0097\u081e\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t",
    "\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20",
    "\t\20\4\21\t\21\4\22\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4",
    "\27\t\27\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35",
    "\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'",
    "\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61",
    "\t\61\4\62\t\62\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4",
    "8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C",
    "\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\t",
    "N\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY",
    "\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\t",
    "d\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to",
    "\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4z\tz\4",
    "{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080\4\u0081\t\u0081\4",
    "\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085\t\u0085\4\u0086",
    "\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a",
    "\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e\4\u008f",
    "\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092\4\u0093\t\u0093",
    "\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098",
    "\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c",
    "\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0\t\u00a0\4\u00a1",
    "\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4\4\u00a5\t\u00a5",
    "\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa",
    "\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae\t\u00ae",
    "\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2\t\u00b2\4\u00b3",
    "\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7",
    "\4\u00b8\t\u00b8\4\u00b9\t\u00b9\3\2\3\2\3\2\3\2\3\2\3\2\3\2\5\2\u017a",
    "\n\2\3\2\3\2\3\2\5\2\u017f\n\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3",
    "\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3",
    "\5\3\5\3\5\3\5\5\5\u019f\n\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u01a8\n",
    "\6\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u01b0\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7",
    "\3\7\3\7\5\7\u01bb\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u01c4\n\7\3\b",
    "\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u01d4\n\b\3",
    "\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u01dd\n\b\3\t\3\t\3\t\3\t\3\t\5\t\u01e4",
    "\n\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u01ee\n\n\3\n\3\n\3\n\5\n\u01f3",
    "\n\n\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13",
    "\3\13\3\13\3\13\5\13\u0206\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3",
    "\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3",
    "\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16",
    "\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0239\n",
    "\17\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20",
    "\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\7\21\u0251\n\21\f\21\16",
    "\21\u0254\13\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5",
    "\22\u0260\n\22\5\22\u0262\n\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3",
    "\23\3\23\5\23\u026d\n\23\3\23\3\23\3\23\5\23\u0272\n\23\3\24\3\24\3",
    "\24\3\24\3\24\3\24\3\24\3\24\5\24\u027c\n\24\3\24\3\24\3\24\5\24\u0281",
    "\n\24\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3",
    "\25\3\25\3\25\5\25\u0292\n\25\3\25\3\25\3\25\5\25\u0297\n\25\3\25\3",
    "\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\5\26\u02a2\n\26\3\27\3\27\3\27",
    "\5\27\u02a7\n\27\3\27\3\27\5\27\u02ab\n\27\3\30\3\30\3\30\3\30\3\30",
    "\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u02bc\n\30\3",
    "\31\3\31\5\31\u02c0\n\31\3\31\5\31\u02c3\n\31\3\32\3\32\3\32\3\32\3",
    "\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33",
    "\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\5",
    "\34\u02e4\n\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35",
    "\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u02f7\n\35\3\36\3\36\3\36\3\36\3",
    "\36\5\36\u02fe\n\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37",
    "\3\37\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3",
    "!\3!\3!\3!\5!\u0320\n!\3!\3!\3!\3!\3!\3!\3!\5!\u0329\n!\3\"\3\"\3\"",
    "\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\7\"",
    "\u033e\n\"\f\"\16\"\u0341\13\"\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3",
    "$\5$\u0350\n$\3$\3$\3$\5$\u0355\n$\3$\3$\3$\3$\3$\3$\5$\u035d\n$\3$",
    "\3$\3$\3$\3$\3$\3$\5$\u0366\n$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3",
    "%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u037d\n%\3&\3&\5&\u0381\n&\3\'\3\'\3\'",
    "\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'",
    "\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u039d\n\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3",
    "\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3",
    "\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3",
    "\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3",
    "\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3",
    "\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3",
    "\'\3\'\7\'\u03fd\n\'\f\'\16\'\u0400\13\'\3(\3(\3(\3(\3(\7(\u0407\n(",
    "\f(\16(\u040a\13(\3)\3)\3)\3)\3*\3*\3*\3*\3*\3+\3+\3,\3,\3,\3,\3,\7",
    ",\u041c\n,\f,\16,\u041f\13,\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5",
    "-\u042e\n-\3.\3.\3/\3/\3/\3/\5/\u0436\n/\3/\3/\3/\5/\u043b\n/\5/\u043d",
    "\n/\3/\3/\3/\3/\5/\u0443\n/\5/\u0445\n/\5/\u0447\n/\3\60\3\60\3\60\3",
    "\60\3\61\3\61\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63",
    "\3\63\3\63\3\63\3\63\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0465\n",
    "\64\3\65\3\65\3\65\3\65\3\65\5\65\u046c\n\65\5\65\u046e\n\65\3\65\3",
    "\65\3\65\5\65\u0473\n\65\5\65\u0475\n\65\3\66\3\66\3\66\3\66\3\66\3",
    "\66\3\66\7\66\u047e\n\66\f\66\16\66\u0481\13\66\3\67\3\67\3\67\3\67",
    "\38\38\38\38\39\39\39\39\39\39\39\39\59\u0493\n9\3:\3:\3:\3:\3;\7;\u049a",
    "\n;\f;\16;\u049d\13;\3<\6<\u04a0\n<\r<\16<\u04a1\3=\6=\u04a5\n=\r=\16",
    "=\u04a6\3=\3=\3>\7>\u04ac\n>\f>\16>\u04af\13>\3>\3>\3?\3?\3@\5@\u04b6",
    "\n@\3@\3@\3@\3A\3A\3A\3A\3A\3A\3A\7A\u04c2\nA\fA\16A\u04c5\13A\3B\3",
    "B\3B\3B\3B\5B\u04cc\nB\3C\3C\3D\3D\5D\u04d2\nD\3E\3E\3E\3E\3E\3E\3E",
    "\7E\u04db\nE\fE\16E\u04de\13E\3F\3F\3F\3F\3F\3F\3F\7F\u04e7\nF\fF\16",
    "F\u04ea\13F\3G\3G\3G\3G\3G\3G\7G\u04f2\nG\fG\16G\u04f5\13G\3H\3H\3H",
    "\3H\3H\3H\3H\3H\3H\3H\5H\u0501\nH\3I\3I\5I\u0505\nI\3I\3I\3J\3J\5J\u050b",
    "\nJ\3J\3J\3K\3K\3K\3K\3K\3K\7K\u0515\nK\fK\16K\u0518\13K\3L\3L\3L\3",
    "L\3L\3L\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\7M\u052b\nM\fM\16M\u052e\13",
    "M\3N\3N\5N\u0532\nN\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\5O\u053e\nO\3P\3P",
    "\3Q\3Q\3R\3R\3S\3S\3S\5S\u0549\nS\3T\3T\3T\3T\3T\3T\7T\u0551\nT\fT\16",
    "T\u0554\13T\3U\3U\5U\u0558\nU\3V\3V\3V\5V\u055d\nV\3W\3W\3X\3X\3Y\3",
    "Y\3Z\3Z\3Z\3Z\3Z\3Z\7Z\u056b\nZ\fZ\16Z\u056e\13Z\3[\3[\5[\u0572\n[\3",
    "\\\3\\\5\\\u0576\n\\\3]\3]\3]\5]\u057b\n]\3^\3^\3^\3_\3_\5_\u0582\n",
    "_\3`\3`\3`\3`\3`\3`\3`\3`\3`\7`\u058d\n`\f`\16`\u0590\13`\3a\3a\3a\3",
    "a\3a\3a\3a\7a\u0599\na\fa\16a\u059c\13a\3b\3b\3b\3b\5b\u05a2\nb\3c\3",
    "c\3c\3c\3c\3c\3c\3c\3c\3c\5c\u05ae\nc\3d\3d\5d\u05b2\nd\3e\3e\3e\3e",
    "\3e\3e\7e\u05ba\ne\fe\16e\u05bd\13e\3f\3f\3f\3g\3g\5g\u05c4\ng\3h\3",
    "h\3h\3h\5h\u05ca\nh\3h\3h\3h\7h\u05cf\nh\fh\16h\u05d2\13h\3h\3h\5h\u05d6",
    "\nh\3i\3i\3i\3i\3i\3i\7i\u05de\ni\fi\16i\u05e1\13i\3j\3j\3j\5j\u05e6",
    "\nj\3k\3k\3k\3k\3k\3k\3k\7k\u05ef\nk\fk\16k\u05f2\13k\3l\3l\3l\3l\3",
    "l\3l\3l\3l\3l\3l\5l\u05fe\nl\3m\3m\5m\u0602\nm\3m\5m\u0605\nm\3n\3n",
    "\5n\u0609\nn\3n\5n\u060c\nn\3o\3o\3o\3o\3o\3o\3o\7o\u0615\no\fo\16o",
    "\u0618\13o\3p\3p\3p\3p\3p\3p\3p\7p\u0621\np\fp\16p\u0624\13p\3q\3q\3",
    "q\3q\3q\3q\3q\7q\u062d\nq\fq\16q\u0630\13q\3r\3r\3r\3r\3r\3r\3r\3r\3",
    "r\3r\3r\3r\3r\3r\5r\u0640\nr\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s",
    "\5s\u064f\ns\3t\3t\3t\3t\3t\3t\7t\u0657\nt\ft\16t\u065a\13t\3u\3u\3",
    "u\3u\5u\u0660\nu\3v\3v\3w\3w\3w\3w\3x\3x\5x\u066a\nx\3y\3y\3y\3y\3y",
    "\5y\u0671\ny\3z\3z\5z\u0675\nz\3z\3z\3{\3{\5{\u067b\n{\3{\3{\3|\3|\3",
    "|\3|\3|\3|\7|\u0685\n|\f|\16|\u0688\13|\3}\3}\3}\3}\3}\3}\7}\u0690\n",
    "}\f}\16}\u0693\13}\3~\3~\3~\3~\3\177\3\177\3\177\3\177\3\177\3\177\3",
    "\177\3\177\3\177\5\177\u06a2\n\177\3\u0080\3\u0080\3\u0080\3\u0080\3",
    "\u0081\3\u0081\3\u0081\3\u0081\3\u0081\7\u0081\u06ad\n\u0081\f\u0081",
    "\16\u0081\u06b0\13\u0081\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u06b6",
    "\n\u0082\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u06be",
    "\n\u0083\3\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085\3\u0086\3\u0086",
    "\3\u0086\3\u0087\3\u0087\3\u0088\3\u0088\3\u0089\3\u0089\3\u008a\3\u008a",
    "\3\u008b\3\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c",
    "\5\u008c\u06da\n\u008c\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\7\u008d",
    "\u06e1\n\u008d\f\u008d\16\u008d\u06e4\13\u008d\3\u008e\3\u008e\3\u008e",
    "\5\u008e\u06e9\n\u008e\3\u008f\3\u008f\3\u008f\5\u008f\u06ee\n\u008f",
    "\3\u0090\3\u0090\3\u0090\5\u0090\u06f3\n\u0090\3\u0090\3\u0090\3\u0091",
    "\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\7\u0091\u06fd\n\u0091\f\u0091",
    "\16\u0091\u0700\13\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0093\3\u0093",
    "\3\u0093\3\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\7\u0094",
    "\u0710\n\u0094\f\u0094\16\u0094\u0713\13\u0094\3\u0095\3\u0095\3\u0095",
    "\3\u0095\3\u0095\5\u0095\u071a\n\u0095\3\u0096\3\u0096\3\u0097\3\u0097",
    "\3\u0097\5\u0097\u0721\n\u0097\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098",
    "\7\u0098\u0728\n\u0098\f\u0098\16\u0098\u072b\13\u0098\3\u0099\3\u0099",
    "\3\u0099\3\u0099\5\u0099\u0731\n\u0099\3\u009a\3\u009a\3\u009a\3\u009a",
    "\3\u009a\3\u009a\5\u009a\u0739\n\u009a\3\u009b\3\u009b\3\u009b\5\u009b",
    "\u073e\n\u009b\3\u009b\3\u009b\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c",
    "\3\u009c\5\u009c\u0748\n\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d",
    "\3\u009d\7\u009d\u0750\n\u009d\f\u009d\16\u009d\u0753\13\u009d\3\u009e",
    "\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e",
    "\3\u009e\7\u009e\u0760\n\u009e\f\u009e\16\u009e\u0763\13\u009e\3\u009f",
    "\3\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0",
    "\7\u00a0\u076f\n\u00a0\f\u00a0\16\u00a0\u0772\13\u00a0\3\u00a1\3\u00a1",
    "\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0779\n\u00a1\3\u00a2\3\u00a2\3\u00a3",
    "\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0784\n\u00a3",
    "\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\7\u00a4\u078b\n\u00a4\f\u00a4",
    "\16\u00a4\u078e\13\u00a4\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0793\n\u00a5",
    "\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0798\n\u00a6\3\u00a7\3\u00a7\3\u00a7",
    "\5\u00a7\u079d\n\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8",
    "\3\u00a8\3\u00a8\7\u00a8\u07a7\n\u00a8\f\u00a8\16\u00a8\u07aa\13\u00a8",
    "\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00ab",
    "\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\7\u00ab\u07ba\n\u00ab\f\u00ab",
    "\16\u00ab\u07bd\13\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac",
    "\7\u00ac\u07c5\n\u00ac\f\u00ac\16\u00ac\u07c8\13\u00ac\3\u00ad\3\u00ad",
    "\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u07cf\n\u00ad\3\u00ae\3\u00ae\3\u00af",
    "\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u07da\n\u00af",
    "\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u07e1\n\u00b0\f\u00b0",
    "\16\u00b0\u07e4\13\u00b0\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u07e9\n\u00b1",
    "\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u07ee\n\u00b2\3\u00b3\3\u00b3\3\u00b3",
    "\5\u00b3\u07f3\n\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4",
    "\3\u00b4\3\u00b4\7\u00b4\u07fd\n\u00b4\f\u00b4\16\u00b4\u0800\13\u00b4",
    "\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b7",
    "\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\7\u00b7\u0810\n\u00b7\f\u00b7",
    "\16\u00b7\u0813\13\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8",
    "\u081a\n\u00b8\3\u00b9\3\u00b9\3\u00b9\2) BLNVj\u0080\u0088\u008a\u008c",
    "\u0094\u0098\u00a6\u00b2\u00be\u00c0\u00d0\u00d4\u00dc\u00de\u00e0\u00e6",
    "\u00f6\u00f8\u0100\u0118\u0120\u0126\u012e\u0138\u013a\u013e\u0146\u014e",
    "\u0154\u0156\u015e\u0166\u016c\u00ba\2\4\6\b\n\f\16\20\22\24\26\30\32",
    "\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098",
    "\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0",
    "\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8",
    "\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0",
    "\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8",
    "\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110",
    "\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128",
    "\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140",
    "\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158",
    "\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170",
    "\2\7\3\2\"#\4\2zz\177\177\4\2\'\'hh\6\2\64<uu\u0087\u0087\u008c\u008e",
    "\4\2\64<\u008c\u008e\u087b\2\u0172\3\2\2\2\4\u0187\3\2\2\2\6\u0194\3",
    "\2\2\2\b\u019a\3\2\2\2\n\u01a0\3\2\2\2\f\u01a9\3\2\2\2\16\u01c5\3\2",
    "\2\2\20\u01e3\3\2\2\2\22\u01e5\3\2\2\2\24\u01fa\3\2\2\2\26\u020d\3\2",
    "\2\2\30\u0216\3\2\2\2\32\u021f\3\2\2\2\34\u022e\3\2\2\2\36\u0240\3\2",
    "\2\2 \u0249\3\2\2\2\"\u0261\3\2\2\2$\u0263\3\2\2\2&\u0273\3\2\2\2(\u0288",
    "\3\2\2\2*\u029e\3\2\2\2,\u02a3\3\2\2\2.\u02bb\3\2\2\2\60\u02c2\3\2\2",
    "\2\62\u02c4\3\2\2\2\64\u02cd\3\2\2\2\66\u02d6\3\2\2\28\u02f6\3\2\2\2",
    ":\u02f8\3\2\2\2<\u0306\3\2\2\2>\u030f\3\2\2\2@\u0316\3\2\2\2B\u032a",
    "\3\2\2\2D\u0342\3\2\2\2F\u0345\3\2\2\2H\u037c\3\2\2\2J\u037e\3\2\2\2",
    "L\u039c\3\2\2\2N\u0401\3\2\2\2P\u040b\3\2\2\2R\u040f\3\2\2\2T\u0414",
    "\3\2\2\2V\u0416\3\2\2\2X\u042d\3\2\2\2Z\u042f\3\2\2\2\\\u0446\3\2\2",
    "\2^\u0448\3\2\2\2`\u044c\3\2\2\2b\u0451\3\2\2\2d\u0455\3\2\2\2f\u045d",
    "\3\2\2\2h\u0474\3\2\2\2j\u0476\3\2\2\2l\u0482\3\2\2\2n\u0486\3\2\2\2",
    "p\u0492\3\2\2\2r\u0494\3\2\2\2t\u049b\3\2\2\2v\u049f\3\2\2\2x\u04a4",
    "\3\2\2\2z\u04ad\3\2\2\2|\u04b2\3\2\2\2~\u04b5\3\2\2\2\u0080\u04ba\3",
    "\2\2\2\u0082\u04cb\3\2\2\2\u0084\u04cd\3\2\2\2\u0086\u04d1\3\2\2\2\u0088",
    "\u04d3\3\2\2\2\u008a\u04df\3\2\2\2\u008c\u04eb\3\2\2\2\u008e\u0500\3",
    "\2\2\2\u0090\u0502\3\2\2\2\u0092\u0508\3\2\2\2\u0094\u050e\3\2\2\2\u0096",
    "\u0519\3\2\2\2\u0098\u051f\3\2\2\2\u009a\u0531\3\2\2\2\u009c\u053d\3",
    "\2\2\2\u009e\u053f\3\2\2\2\u00a0\u0541\3\2\2\2\u00a2\u0543\3\2\2\2\u00a4",
    "\u0548\3\2\2\2\u00a6\u054a\3\2\2\2\u00a8\u0557\3\2\2\2\u00aa\u055c\3",
    "\2\2\2\u00ac\u055e\3\2\2\2\u00ae\u0560\3\2\2\2\u00b0\u0562\3\2\2\2\u00b2",
    "\u0564\3\2\2\2\u00b4\u0571\3\2\2\2\u00b6\u0575\3\2\2\2\u00b8\u0577\3",
    "\2\2\2\u00ba\u057c\3\2\2\2\u00bc\u0581\3\2\2\2\u00be\u0583\3\2\2\2\u00c0",
    "\u0591\3\2\2\2\u00c2\u05a1\3\2\2\2\u00c4\u05ad\3\2\2\2\u00c6\u05af\3",
    "\2\2\2\u00c8\u05b3\3\2\2\2\u00ca\u05be\3\2\2\2\u00cc\u05c1\3\2\2\2\u00ce",
    "\u05c5\3\2\2\2\u00d0\u05d7\3\2\2\2\u00d2\u05e5\3\2\2\2\u00d4\u05e7\3",
    "\2\2\2\u00d6\u05fd\3\2\2\2\u00d8\u05ff\3\2\2\2\u00da\u0606\3\2\2\2\u00dc",
    "\u060d\3\2\2\2\u00de\u0619\3\2\2\2\u00e0\u0625\3\2\2\2\u00e2\u063f\3",
    "\2\2\2\u00e4\u064e\3\2\2\2\u00e6\u0650\3\2\2\2\u00e8\u065f\3\2\2\2\u00ea",
    "\u0661\3\2\2\2\u00ec\u0663\3\2\2\2\u00ee\u0669\3\2\2\2\u00f0\u0670\3",
    "\2\2\2\u00f2\u0672\3\2\2\2\u00f4\u0678\3\2\2\2\u00f6\u067e\3\2\2\2\u00f8",
    "\u0689\3\2\2\2\u00fa\u0694\3\2\2\2\u00fc\u06a1\3\2\2\2\u00fe\u06a3\3",
    "\2\2\2\u0100\u06a7\3\2\2\2\u0102\u06b5\3\2\2\2\u0104\u06bd\3\2\2\2\u0106",
    "\u06bf\3\2\2\2\u0108\u06c2\3\2\2\2\u010a\u06c5\3\2\2\2\u010c\u06c8\3",
    "\2\2\2\u010e\u06ca\3\2\2\2\u0110\u06cc\3\2\2\2\u0112\u06ce\3\2\2\2\u0114",
    "\u06d0\3\2\2\2\u0116\u06d9\3\2\2\2\u0118\u06db\3\2\2\2\u011a\u06e8\3",
    "\2\2\2\u011c\u06ed\3\2\2\2\u011e\u06ef\3\2\2\2\u0120\u06f6\3\2\2\2\u0122",
    "\u0701\3\2\2\2\u0124\u0705\3\2\2\2\u0126\u0709\3\2\2\2\u0128\u0719\3",
    "\2\2\2\u012a\u071b\3\2\2\2\u012c\u0720\3\2\2\2\u012e\u0722\3\2\2\2\u0130",
    "\u0730\3\2\2\2\u0132\u0738\3\2\2\2\u0134\u073a\3\2\2\2\u0136\u0747\3",
    "\2\2\2\u0138\u0749\3\2\2\2\u013a\u0754\3\2\2\2\u013c\u0764\3\2\2\2\u013e",
    "\u0768\3\2\2\2\u0140\u0778\3\2\2\2\u0142\u077a\3\2\2\2\u0144\u0783\3",
    "\2\2\2\u0146\u0785\3\2\2\2\u0148\u0792\3\2\2\2\u014a\u0797\3\2\2\2\u014c",
    "\u0799\3\2\2\2\u014e\u07a0\3\2\2\2\u0150\u07ab\3\2\2\2\u0152\u07af\3",
    "\2\2\2\u0154\u07b3\3\2\2\2\u0156\u07be\3\2\2\2\u0158\u07ce\3\2\2\2\u015a",
    "\u07d0\3\2\2\2\u015c\u07d9\3\2\2\2\u015e\u07db\3\2\2\2\u0160\u07e8\3",
    "\2\2\2\u0162\u07ed\3\2\2\2\u0164\u07ef\3\2\2\2\u0166\u07f6\3\2\2\2\u0168",
    "\u0801\3\2\2\2\u016a\u0805\3\2\2\2\u016c\u0809\3\2\2\2\u016e\u0819\3",
    "\2\2\2\u0170\u081b\3\2\2\2\u0172\u0173\7Q\2\2\u0173\u0174\5\u00aeX\2",
    "\u0174\u0175\7E\2\2\u0175\u0176\7\20\2\2\u0176\u0179\7W\2\2\u0177\u017a",
    "\7K\2\2\u0178\u017a\5\u00aeX\2\u0179\u0177\3\2\2\2\u0179\u0178\3\2\2",
    "\2\u017a\u017e\3\2\2\2\u017b\u017c\5\"\22\2\u017c\u017d\7\22\2\2\u017d",
    "\u017f\3\2\2\2\u017e\u017b\3\2\2\2\u017e\u017f\3\2\2\2\u017f\u0180\3",
    "\2\2\2\u0180\u0181\7\u0083\2\2\u0181\u0182\5\u010a\u0086\2\u0182\u0183",
    "\7\20\2\2\u0183\u0184\5x=\2\u0184\u0185\5\u008aF\2\u0185\u0186\5z>\2",
    "\u0186\3\3\2\2\2\u0187\u0188\7Q\2\2\u0188\u0189\5\u00aeX\2\u0189\u018a",
    "\7E\2\2\u018a\u018b\7\20\2\2\u018b\u018c\7W\2\2\u018c\u018d\5\u009c",
    "O\2\u018d\u018e\7\u0083\2\2\u018e\u018f\5\u010a\u0086\2\u018f\u0190",
    "\7\20\2\2\u0190\u0191\5x=\2\u0191\u0192\5\u0088E\2\u0192\u0193\5z>\2",
    "\u0193\5\3\2\2\2\u0194\u0195\5\u00b0Y\2\u0195\u0196\7\u0083\2\2\u0196",
    "\u0197\5L\'\2\u0197\u0198\7E\2\2\u0198\u0199\5\u0108\u0085\2\u0199\7",
    "\3\2\2\2\u019a\u019b\5\u00b0Y\2\u019b\u019e\5j\66\2\u019c\u019d\7C\2",
    "\2\u019d\u019f\5l\67\2\u019e\u019c\3\2\2\2\u019e\u019f\3\2\2\2\u019f",
    "\t\3\2\2\2\u01a0\u01a1\7Q\2\2\u01a1\u01a2\5\u00acW\2\u01a2\u01a3\7E",
    "\2\2\u01a3\u01a4\7\20\2\2\u01a4\u01a5\5\u0098M\2\u01a5\u01a7\7G\2\2",
    "\u01a6\u01a8\5\u008eH\2\u01a7\u01a6\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8",
    "\13\3\2\2\2\u01a9\u01aa\7Q\2\2\u01aa\u01ab\5\u00aeX\2\u01ab\u01ac\7",
    "E\2\2\u01ac\u01af\7\20\2\2\u01ad\u01b0\7K\2\2\u01ae\u01b0\5\20\t\2\u01af",
    "\u01ad\3\2\2\2\u01af\u01ae\3\2\2\2\u01b0\u01c3\3\2\2\2\u01b1\u01ba\5",
    "\"\22\2\u01b2\u01b3\7\22\2\2\u01b3\u01b4\7C\2\2\u01b4\u01b5\7g\2\2\u01b5",
    "\u01b6\7\20\2\2\u01b6\u01b7\5x=\2\u01b7\u01b8\5\u00c0a\2\u01b8\u01b9",
    "\5z>\2\u01b9\u01bb\3\2\2\2\u01ba\u01b2\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb",
    "\u01c4\3\2\2\2\u01bc\u01bd\7\u0083\2\2\u01bd\u01be\7g\2\2\u01be\u01bf",
    "\7\20\2\2\u01bf\u01c0\5x=\2\u01c0\u01c1\5\u00c0a\2\u01c1\u01c2\5z>\2",
    "\u01c2\u01c4\3\2\2\2\u01c3\u01b1\3\2\2\2\u01c3\u01bc\3\2\2\2\u01c3\u01c4",
    "\3\2\2\2\u01c4\r\3\2\2\2\u01c5\u01c6\7Q\2\2\u01c6\u01c7\5\u00aeX\2\u01c7",
    "\u01c8\7E\2\2\u01c8\u01c9\7\20\2\2\u01c9\u01dc\7|\2\2\u01ca\u01d3\5",
    "\"\22\2\u01cb\u01cc\7\22\2\2\u01cc\u01cd\7C\2\2\u01cd\u01ce\7g\2\2\u01ce",
    "\u01cf\7\20\2\2\u01cf\u01d0\5x=\2\u01d0\u01d1\5\u00c0a\2\u01d1\u01d2",
    "\5z>\2\u01d2\u01d4\3\2\2\2\u01d3\u01cb\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4",
    "\u01dd\3\2\2\2\u01d5\u01d6\7\u0083\2\2\u01d6\u01d7\7g\2\2\u01d7\u01d8",
    "\7\20\2\2\u01d8\u01d9\5x=\2\u01d9\u01da\5\u00c0a\2\u01da\u01db\5z>\2",
    "\u01db\u01dd\3\2\2\2\u01dc\u01ca\3\2\2\2\u01dc\u01d5\3\2\2\2\u01dc\u01dd",
    "\3\2\2\2\u01dd\17\3\2\2\2\u01de\u01e4\5\u00a6T\2\u01df\u01e0\5\u00a6",
    "T\2\u01e0\u01e1\7C\2\2\u01e1\u01e2\5\u00aeX\2\u01e2\u01e4\3\2\2\2\u01e3",
    "\u01de\3\2\2\2\u01e3\u01df\3\2\2\2\u01e4\21\3\2\2\2\u01e5\u01e6\7Q\2",
    "\2\u01e6\u01e7\5\u00a8U\2\u01e7\u01e8\7E\2\2\u01e8\u01e9\7\20\2\2\u01e9",
    "\u01ed\7f\2\2\u01ea\u01eb\7v\2\2\u01eb\u01ec\7\20\2\2\u01ec\u01ee\5",
    "*\26\2\u01ed\u01ea\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee\u01f2\3\2\2\2\u01ef",
    "\u01f0\7y\2\2\u01f0\u01f1\7\20\2\2\u01f1\u01f3\5\u0098M\2\u01f2\u01ef",
    "\3\2\2\2\u01f2\u01f3\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4\u01f5\7S\2\2",
    "\u01f5\u01f6\7\20\2\2\u01f6\u01f7\5x=\2\u01f7\u01f8\5\u00dco\2\u01f8",
    "\u01f9\5z>\2\u01f9\23\3\2\2\2\u01fa\u01fb\7Q\2\2\u01fb\u01fc\5\u0104",
    "\u0083\2\u01fc\u01fd\7E\2\2\u01fd\u01fe\7\20\2\2\u01fe\u01ff\7p\2\2",
    "\u01ff\u0200\7v\2\2\u0200\u0201\7\20\2\2\u0201\u0205\5\u00b6\\\2\u0202",
    "\u0203\7y\2\2\u0203\u0204\7\20\2\2\u0204\u0206\5\u0098M\2\u0205\u0202",
    "\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u0207\3\2\2\2\u0207\u0208\7S\2\2",
    "\u0208\u0209\7\20\2\2\u0209\u020a\5x=\2\u020a\u020b\5\u00dco\2\u020b",
    "\u020c\5z>\2\u020c\25\3\2\2\2\u020d\u020e\7Q\2\2\u020e\u020f\5\u00ac",
    "W\2\u020f\u0210\7{\2\2\u0210\u0211\7S\2\2\u0211\u0212\7\20\2\2\u0212",
    "\u0213\5x=\2\u0213\u0214\5\u00dco\2\u0214\u0215\5z>\2\u0215\27\3\2\2",
    "\2\u0216\u0217\7Q\2\2\u0217\u0218\5\u00acW\2\u0218\u0219\7_\2\2\u0219",
    "\u021a\7S\2\2\u021a\u021b\7\20\2\2\u021b\u021c\5x=\2\u021c\u021d\5\u00dc",
    "o\2\u021d\u021e\5z>\2\u021e\31\3\2\2\2\u021f\u0220\7Q\2\2\u0220\u0221",
    "\5\u00aeX\2\u0221\u0222\7E\2\2\u0222\u0223\7\20\2\2\u0223\u0224\7i\2",
    "\2\u0224\u0225\7K\2\2\u0225\u0226\5\"\22\2\u0226\u0227\7\22\2\2\u0227",
    "\u0228\7C\2\2\u0228\u0229\7d\2\2\u0229\u022a\7\20\2\2\u022a\u022b\5",
    "x=\2\u022b\u022c\5\36\20\2\u022c\u022d\5z>\2\u022d\33\3\2\2\2\u022e",
    "\u022f\7Q\2\2\u022f\u0230\5\u00aeX\2\u0230\u0231\7E\2\2\u0231\u0232",
    "\7\20\2\2\u0232\u0233\7i\2\2\u0233\u0238\7w\2\2\u0234\u0235\5\"\22\2",
    "\u0235\u0236\7\22\2\2\u0236\u0237\7C\2\2\u0237\u0239\3\2\2\2\u0238\u0234",
    "\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u023a\3\2\2\2\u023a\u023b\7d\2\2",
    "\u023b\u023c\7\20\2\2\u023c\u023d\5x=\2\u023d\u023e\5\36\20\2\u023e",
    "\u023f\5z>\2\u023f\35\3\2\2\2\u0240\u0241\7Q\2\2\u0241\u0242\7K\2\2",
    "\u0242\u0243\7d\2\2\u0243\u0244\7E\2\2\u0244\u0245\7\20\2\2\u0245\u0246",
    "\5x=\2\u0246\u0247\5 \21\2\u0247\u0248\5z>\2\u0248\37\3\2\2\2\u0249",
    "\u024a\b\21\1\2\u024a\u024b\5\u00c4c\2\u024b\u0252\3\2\2\2\u024c\u024d",
    "\f\3\2\2\u024d\u024e\5v<\2\u024e\u024f\5\u00c4c\2\u024f\u0251\3\2\2",
    "\2\u0250\u024c\3\2\2\2\u0251\u0254\3\2\2\2\u0252\u0250\3\2\2\2\u0252",
    "\u0253\3\2\2\2\u0253!\3\2\2\2\u0254\u0252\3\2\2\2\u0255\u0256\7\u0083",
    "\2\2\u0256\u0257\7G\2\2\u0257\u0258\7\20\2\2\u0258\u0262\5\u00acW\2",
    "\u0259\u025a\7\u0083\2\2\u025a\u025b\7H\2\2\u025b\u025c\7\20\2\2\u025c",
    "\u025f\5\u00d0i\2\u025d\u025e\7C\2\2\u025e\u0260\5\u00acW\2\u025f\u025d",
    "\3\2\2\2\u025f\u0260\3\2\2\2\u0260\u0262\3\2\2\2\u0261\u0255\3\2\2\2",
    "\u0261\u0259\3\2\2\2\u0262#\3\2\2\2\u0263\u0264\7Q\2\2\u0264\u0265\5",
    "\u00a8U\2\u0265\u0266\7E\2\2\u0266\u0267\7\20\2\2\u0267\u0268\7@\2\2",
    "\u0268\u026c\7f\2\2\u0269\u026a\7v\2\2\u026a\u026b\7\20\2\2\u026b\u026d",
    "\5*\26\2\u026c\u0269\3\2\2\2\u026c\u026d\3\2\2\2\u026d\u0271\3\2\2\2",
    "\u026e\u026f\7y\2\2\u026f\u0270\7\20\2\2\u0270\u0272\5\u0098M\2\u0271",
    "\u026e\3\2\2\2\u0271\u0272\3\2\2\2\u0272%\3\2\2\2\u0273\u0274\7Q\2\2",
    "\u0274\u0275\5\u00a8U\2\u0275\u0276\7E\2\2\u0276\u0277\7\20\2\2\u0277",
    "\u027b\7f\2\2\u0278\u0279\7v\2\2\u0279\u027a\7\20\2\2\u027a\u027c\5",
    "*\26\2\u027b\u0278\3\2\2\2\u027b\u027c\3\2\2\2\u027c\u0280\3\2\2\2\u027d",
    "\u027e\7y\2\2\u027e\u027f\7\20\2\2\u027f\u0281\5\u0098M\2\u0280\u027d",
    "\3\2\2\2\u0280\u0281\3\2\2\2\u0281\u0282\3\2\2\2\u0282\u0283\7S\2\2",
    "\u0283\u0284\7\20\2\2\u0284\u0285\5x=\2\u0285\u0286\5\u00dco\2\u0286",
    "\u0287\5z>\2\u0287\'\3\2\2\2\u0288\u0289\7Q\2\2\u0289\u028a\5\u00a8",
    "U\2\u028a\u028b\7E\2\2\u028b\u028c\7\20\2\2\u028c\u028d\7i\2\2\u028d",
    "\u0291\7f\2\2\u028e\u028f\7v\2\2\u028f\u0290\7\20\2\2\u0290\u0292\5",
    "*\26\2\u0291\u028e\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0296\3\2\2\2\u0293",
    "\u0294\7y\2\2\u0294\u0295\7\20\2\2\u0295\u0297\5\u0098M\2\u0296\u0293",
    "\3\2\2\2\u0296\u0297\3\2\2\2\u0297\u0298\3\2\2\2\u0298\u0299\7S\2\2",
    "\u0299\u029a\7\20\2\2\u029a\u029b\5x=\2\u029b\u029c\5\u00d4k\2\u029c",
    "\u029d\5z>\2\u029d)\3\2\2\2\u029e\u02a1\5\u00b2Z\2\u029f\u02a0\7C\2",
    "\2\u02a0\u02a2\5\u00b4[\2\u02a1\u029f\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2",
    "+\3\2\2\2\u02a3\u02a4\5\u00bc_\2\u02a4\u02a6\5\u00acW\2\u02a5\u02a7",
    "\5\"\22\2\u02a6\u02a5\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02aa\3\2\2",
    "\2\u02a8\u02a9\7-\2\2\u02a9\u02ab\5\u00eex\2\u02aa\u02a8\3\2\2\2\u02aa",
    "\u02ab\3\2\2\2\u02ab-\3\2\2\2\u02ac\u02bc\5n8\2\u02ad\u02bc\5\60\31",
    "\2\u02ae\u02bc\5r:\2\u02af\u02bc\5J&\2\u02b0\u02bc\5@!\2\u02b1\u02bc",
    "\5\66\34\2\u02b2\u02bc\5:\36\2\u02b3\u02bc\5> \2\u02b4\u02bc\5<\37\2",
    "\u02b5\u02bc\5D#\2\u02b6\u02bc\5F$\2\u02b7\u02bc\5`\61\2\u02b8\u02bc",
    "\5\62\32\2\u02b9\u02bc\5\64\33\2\u02ba\u02bc\5&\24\2\u02bb\u02ac\3\2",
    "\2\2\u02bb\u02ad\3\2\2\2\u02bb\u02ae\3\2\2\2\u02bb\u02af\3\2\2\2\u02bb",
    "\u02b0\3\2\2\2\u02bb\u02b1\3\2\2\2\u02bb\u02b2\3\2\2\2\u02bb\u02b3\3",
    "\2\2\2\u02bb\u02b4\3\2\2\2\u02bb\u02b5\3\2\2\2\u02bb\u02b6\3\2\2\2\u02bb",
    "\u02b7\3\2\2\2\u02bb\u02b8\3\2\2\2\u02bb\u02b9\3\2\2\2\u02bb\u02ba\3",
    "\2\2\2\u02bc/\3\2\2\2\u02bd\u02bf\5N(\2\u02be\u02c0\5h\65\2\u02bf\u02be",
    "\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0\u02c3\3\2\2\2\u02c1\u02c3\5R*\2\u02c2",
    "\u02bd\3\2\2\2\u02c2\u02c1\3\2\2\2\u02c3\61\3\2\2\2\u02c4\u02c5\7\u0083",
    "\2\2\u02c5\u02c6\5\u00fe\u0080\2\u02c6\u02c7\7\22\2\2\u02c7\u02c8\7",
    "R\2\2\u02c8\u02c9\7\20\2\2\u02c9\u02ca\5x=\2\u02ca\u02cb\5\u00dco\2",
    "\u02cb\u02cc\5z>\2\u02cc\63\3\2\2\2\u02cd\u02ce\7\u0083\2\2\u02ce\u02cf",
    "\5\u00aeX\2\u02cf\u02d0\7\22\2\2\u02d0\u02d1\7R\2\2\u02d1\u02d2\7\20",
    "\2\2\u02d2\u02d3\5x=\2\u02d3\u02d4\5\u00dco\2\u02d4\u02d5\5z>\2\u02d5",
    "\65\3\2\2\2\u02d6\u02d7\7~\2\2\u02d7\u02d8\7n\2\2\u02d8\u02d9\5L\'\2",
    "\u02d9\u02da\7\20\2\2\u02da\u02db\5x=\2\u02db\u02e3\5\u00dep\2\u02dc",
    "\u02dd\5v<\2\u02dd\u02de\7r\2\2\u02de\u02df\7\20\2\2\u02df\u02e0\5x",
    "=\2\u02e0\u02e1\5\u00dco\2\u02e1\u02e2\5z>\2\u02e2\u02e4\3\2\2\2\u02e3",
    "\u02dc\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e6\5",
    "z>\2\u02e6\67\3\2\2\2\u02e7\u02e8\7\u0084\2\2\u02e8\u02e9\5\u00e4s\2",
    "\u02e9\u02ea\7\20\2\2\u02ea\u02eb\5x=\2\u02eb\u02ec\5\u00dco\2\u02ec",
    "\u02ed\5z>\2\u02ed\u02f7\3\2\2\2\u02ee\u02ef\7\u0084\2\2\u02ef\u02f0",
    "\7a\2\2\u02f0\u02f1\5\u00e2r\2\u02f1\u02f2\7\20\2\2\u02f2\u02f3\5x=",
    "\2\u02f3\u02f4\5\u00dco\2\u02f4\u02f5\5z>\2\u02f5\u02f7\3\2\2\2\u02f6",
    "\u02e7\3\2\2\2\u02f6\u02ee\3\2\2\2\u02f79\3\2\2\2\u02f8\u02f9\7]\2\2",
    "\u02f9\u02fa\7T\2\2\u02fa\u02fd\5\u00acW\2\u02fb\u02fc\7\22\2\2\u02fc",
    "\u02fe\5\u00acW\2\u02fd\u02fb\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\u02ff",
    "\3\2\2\2\u02ff\u0300\7a\2\2\u0300\u0301\5L\'\2\u0301\u0302\7\20\2\2",
    "\u0302\u0303\5x=\2\u0303\u0304\5\u00dco\2\u0304\u0305\5z>\2\u0305;\3",
    "\2\2\2\u0306\u0307\7R\2\2\u0307\u0308\7\20\2\2\u0308\u0309\5x=\2\u0309",
    "\u030a\5\u00dco\2\u030a\u030b\5z>\2\u030b\u030c\5v<\2\u030c\u030d\7",
    "\u0086\2\2\u030d\u030e\5L\'\2\u030e=\3\2\2\2\u030f\u0310\7\u0086\2\2",
    "\u0310\u0311\5L\'\2\u0311\u0312\7\20\2\2\u0312\u0313\5x=\2\u0313\u0314",
    "\5\u00dco\2\u0314\u0315\5z>\2\u0315?\3\2\2\2\u0316\u0317\7`\2\2\u0317",
    "\u0318\5L\'\2\u0318\u0319\7\20\2\2\u0319\u031a\5x=\2\u031a\u031b\5\u00dc",
    "o\2\u031b\u031f\5z>\2\u031c\u031d\5v<\2\u031d\u031e\5B\"\2\u031e\u0320",
    "\3\2\2\2\u031f\u031c\3\2\2\2\u031f\u0320\3\2\2\2\u0320\u0328\3\2\2\2",
    "\u0321\u0322\5v<\2\u0322\u0323\7U\2\2\u0323\u0324\7\20\2\2\u0324\u0325",
    "\5x=\2\u0325\u0326\5\u00dco\2\u0326\u0327\5z>\2\u0327\u0329\3\2\2\2",
    "\u0328\u0321\3\2\2\2\u0328\u0329\3\2\2\2\u0329A\3\2\2\2\u032a\u032b",
    "\b\"\1\2\u032b\u032c\7U\2\2\u032c\u032d\7`\2\2\u032d\u032e\5L\'\2\u032e",
    "\u032f\7\20\2\2\u032f\u0330\5x=\2\u0330\u0331\5\u00dco\2\u0331\u0332",
    "\5z>\2\u0332\u033f\3\2\2\2\u0333\u0334\f\3\2\2\u0334\u0335\5v<\2\u0335",
    "\u0336\7U\2\2\u0336\u0337\7`\2\2\u0337\u0338\5L\'\2\u0338\u0339\7\20",
    "\2\2\u0339\u033a\5x=\2\u033a\u033b\5\u00dco\2\u033b\u033c\5z>\2\u033c",
    "\u033e\3\2\2\2\u033d\u0333\3\2\2\2\u033e\u0341\3\2\2\2\u033f\u033d\3",
    "\2\2\2\u033f\u0340\3\2\2\2\u0340C\3\2\2\2\u0341\u033f\3\2\2\2\u0342",
    "\u0343\7t\2\2\u0343\u0344\5L\'\2\u0344E\3\2\2\2\u0345\u0346\7~\2\2\u0346",
    "\u0347\7n\2\2\u0347\u0348\5\u00acW\2\u0348\u0349\7S\2\2\u0349\u034a",
    "\7\20\2\2\u034a\u034b\5x=\2\u034b\u034c\5\u00dco\2\u034c\u034d\5z>\2",
    "\u034d\u034f\5t;\2\u034e\u0350\5\u00e0q\2\u034f\u034e\3\2\2\2\u034f",
    "\u0350\3\2\2\2\u0350\u035c\3\2\2\2\u0351\u0355\7r\2\2\u0352\u0353\7",
    "\u0084\2\2\u0353\u0355\7D\2\2\u0354\u0351\3\2\2\2\u0354\u0352\3\2\2",
    "\2\u0355\u0356\3\2\2\2\u0356\u0357\7\20\2\2\u0357\u0358\5x=\2\u0358",
    "\u0359\5\u00dco\2\u0359\u035a\5z>\2\u035a\u035b\5t;\2\u035b\u035d\3",
    "\2\2\2\u035c\u0354\3\2\2\2\u035c\u035d\3\2\2\2\u035d\u0365\3\2\2\2\u035e",
    "\u035f\7B\2\2\u035f\u0360\7\20\2\2\u0360\u0361\5x=\2\u0361\u0362\5\u00dc",
    "o\2\u0362\u0363\5z>\2\u0363\u0364\5t;\2\u0364\u0366\3\2\2\2\u0365\u035e",
    "\3\2\2\2\u0365\u0366\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0368\5t;\2\u0368",
    "G\3\2\2\2\u0369\u036a\7\u0084\2\2\u036a\u036b\5\u00b0Y\2\u036b\u036c",
    "\7\20\2\2\u036c\u036d\5x=\2\u036d\u036e\5\u00dco\2\u036e\u036f\5z>\2",
    "\u036f\u0370\5t;\2\u0370\u037d\3\2\2\2\u0371\u0372\7\u0084\2\2\u0372",
    "\u0373\7a\2\2\u0373\u0374\7\27\2\2\u0374\u0375\5\u008cG\2\u0375\u0376",
    "\7\30\2\2\u0376\u0377\7\20\2\2\u0377\u0378\5x=\2\u0378\u0379\5\u00dc",
    "o\2\u0379\u037a\5z>\2\u037a\u037b\5t;\2\u037b\u037d\3\2\2\2\u037c\u0369",
    "\3\2\2\2\u037c\u0371\3\2\2\2\u037dI\3\2\2\2\u037e\u0380\7x\2\2\u037f",
    "\u0381\5L\'\2\u0380\u037f\3\2\2\2\u0380\u0381\3\2\2\2\u0381K\3\2\2\2",
    "\u0382\u0383\b\'\1\2\u0383\u0384\7#\2\2\u0384\u039d\5L\'(\u0385\u0386",
    "\7k\2\2\u0386\u039d\5L\'\'\u0387\u0388\7>\2\2\u0388\u0389\7\20\2\2\u0389",
    "\u039d\5L\'\f\u038a\u039d\5V,\2\u038b\u039d\5N(\2\u038c\u038d\5N(\2",
    "\u038d\u038e\5h\65\2\u038e\u039d\3\2\2\2\u038f\u0390\7Y\2\2\u0390\u0391",
    "\7\20\2\2\u0391\u039d\5\u00acW\2\u0392\u0393\7=\2\2\u0393\u0394\7\20",
    "\2\2\u0394\u039d\5\u00a8U\2\u0395\u039d\5Z.\2\u0396\u039d\5\\/\2\u0397",
    "\u039d\5d\63\2\u0398\u039d\5^\60\2\u0399\u039d\5f\64\2\u039a\u039d\5",
    "b\62\2\u039b\u039d\5R*\2\u039c\u0382\3\2\2\2\u039c\u0385\3\2\2\2\u039c",
    "\u0387\3\2\2\2\u039c\u038a\3\2\2\2\u039c\u038b\3\2\2\2\u039c\u038c\3",
    "\2\2\2\u039c\u038f\3\2\2\2\u039c\u0392\3\2\2\2\u039c\u0395\3\2\2\2\u039c",
    "\u0396\3\2\2\2\u039c\u0397\3\2\2\2\u039c\u0398\3\2\2\2\u039c\u0399\3",
    "\2\2\2\u039c\u039a\3\2\2\2\u039c\u039b\3\2\2\2\u039d\u03fe\3\2\2\2\u039e",
    "\u039f\f&\2\2\u039f\u03a0\5\u010e\u0088\2\u03a0\u03a1\5L\'\'\u03a1\u03fd",
    "\3\2\2\2\u03a2\u03a3\f%\2\2\u03a3\u03a4\5\u0110\u0089\2\u03a4\u03a5",
    "\5L\'&\u03a5\u03fd\3\2\2\2\u03a6\u03a7\f$\2\2\u03a7\u03a8\5\u0114\u008b",
    "\2\u03a8\u03a9\5L\'%\u03a9\u03fd\3\2\2\2\u03aa\u03ab\f#\2\2\u03ab\u03ac",
    "\5\u0112\u008a\2\u03ac\u03ad\5L\'$\u03ad\u03fd\3\2\2\2\u03ae\u03af\f",
    "\"\2\2\u03af\u03b0\t\2\2\2\u03b0\u03fd\5L\'#\u03b1\u03b2\f!\2\2\u03b2",
    "\u03b3\7*\2\2\u03b3\u03fd\5L\'\"\u03b4\u03b5\f \2\2\u03b5\u03b6\7+\2",
    "\2\u03b6\u03fd\5L\'!\u03b7\u03b8\f\37\2\2\u03b8\u03b9\7(\2\2\u03b9\u03fd",
    "\5L\' \u03ba\u03bb\f\36\2\2\u03bb\u03bc\7)\2\2\u03bc\u03fd\5L\'\37\u03bd",
    "\u03be\f\33\2\2\u03be\u03bf\7-\2\2\u03bf\u03fd\5L\'\34\u03c0\u03c1\f",
    "\32\2\2\u03c1\u03c2\7,\2\2\u03c2\u03fd\5L\'\33\u03c3\u03c4\f\31\2\2",
    "\u03c4\u03c5\7\61\2\2\u03c5\u03fd\5L\'\32\u03c6\u03c7\f\30\2\2\u03c7",
    "\u03c8\7q\2\2\u03c8\u03fd\5L\'\31\u03c9\u03ca\f\27\2\2\u03ca\u03cb\7",
    "C\2\2\u03cb\u03fd\5L\'\30\u03cc\u03cd\f\26\2\2\u03cd\u03ce\7`\2\2\u03ce",
    "\u03cf\5L\'\2\u03cf\u03d0\7U\2\2\u03d0\u03d1\5L\'\27\u03d1\u03fd\3\2",
    "\2\2\u03d2\u03d3\f\24\2\2\u03d3\u03d4\7a\2\2\u03d4\u03fd\5L\'\25\u03d5",
    "\u03d6\f\23\2\2\u03d6\u03d7\7N\2\2\u03d7\u03fd\5L\'\24\u03d8\u03d9\f",
    "\22\2\2\u03d9\u03da\7N\2\2\u03da\u03db\7A\2\2\u03db\u03fd\5L\'\23\u03dc",
    "\u03dd\f\21\2\2\u03dd\u03de\7N\2\2\u03de\u03df\7D\2\2\u03df\u03fd\5",
    "L\'\22\u03e0\u03e1\f\20\2\2\u03e1\u03e2\7k\2\2\u03e2\u03e3\7a\2\2\u03e3",
    "\u03fd\5L\'\21\u03e4\u03e5\f\17\2\2\u03e5\u03e6\7k\2\2\u03e6\u03e7\7",
    "N\2\2\u03e7\u03fd\5L\'\20\u03e8\u03e9\f\16\2\2\u03e9\u03ea\7k\2\2\u03ea",
    "\u03eb\7N\2\2\u03eb\u03ec\7A\2\2\u03ec\u03fd\5L\'\17\u03ed\u03ee\f\r",
    "\2\2\u03ee\u03ef\7k\2\2\u03ef\u03f0\7N\2\2\u03f0\u03f1\7D\2\2\u03f1",
    "\u03fd\5L\'\16\u03f2\u03f3\f\35\2\2\u03f3\u03f4\7c\2\2\u03f4\u03f5\7",
    "k\2\2\u03f5\u03fd\5\u0102\u0082\2\u03f6\u03f7\f\34\2\2\u03f7\u03f8\7",
    "c\2\2\u03f8\u03fd\5\u0102\u0082\2\u03f9\u03fa\f\25\2\2\u03fa\u03fb\7",
    "E\2\2\u03fb\u03fd\5\u00bc_\2\u03fc\u039e\3\2\2\2\u03fc\u03a2\3\2\2\2",
    "\u03fc\u03a6\3\2\2\2\u03fc\u03aa\3\2\2\2\u03fc\u03ae\3\2\2\2\u03fc\u03b1",
    "\3\2\2\2\u03fc\u03b4\3\2\2\2\u03fc\u03b7\3\2\2\2\u03fc\u03ba\3\2\2\2",
    "\u03fc\u03bd\3\2\2\2\u03fc\u03c0\3\2\2\2\u03fc\u03c3\3\2\2\2\u03fc\u03c6",
    "\3\2\2\2\u03fc\u03c9\3\2\2\2\u03fc\u03cc\3\2\2\2\u03fc\u03d2\3\2\2\2",
    "\u03fc\u03d5\3\2\2\2\u03fc\u03d8\3\2\2\2\u03fc\u03dc\3\2\2\2\u03fc\u03e0",
    "\3\2\2\2\u03fc\u03e4\3\2\2\2\u03fc\u03e8\3\2\2\2\u03fc\u03ed\3\2\2\2",
    "\u03fc\u03f2\3\2\2\2\u03fc\u03f6\3\2\2\2\u03fc\u03f9\3\2\2\2\u03fd\u0400",
    "\3\2\2\2\u03fe\u03fc\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ffM\3\2\2\2\u0400",
    "\u03fe\3\2\2\2\u0401\u0402\b(\1\2\u0402\u0403\5\u00aaV\2\u0403\u0408",
    "\3\2\2\2\u0404\u0405\f\3\2\2\u0405\u0407\5P)\2\u0406\u0404\3\2\2\2\u0407",
    "\u040a\3\2\2\2\u0408\u0406\3\2\2\2\u0408\u0409\3\2\2\2\u0409O\3\2\2",
    "\2\u040a\u0408\3\2\2\2\u040b\u040c\6)\37\3\u040c\u040d\7\24\2\2\u040d",
    "\u040e\5\u00aaV\2\u040eQ\3\2\2\2\u040f\u0410\7b\2\2\u0410\u0411\7\20",
    "\2\2\u0411\u0412\5\u00acW\2\u0412\u0413\5T+\2\u0413S\3\2\2\2\u0414\u0415",
    "\6+ \3\u0415U\3\2\2\2\u0416\u0417\b,\1\2\u0417\u0418\5\u00e8u\2\u0418",
    "\u041d\3\2\2\2\u0419\u041a\f\3\2\2\u041a\u041c\5X-\2\u041b\u0419\3\2",
    "\2\2\u041c\u041f\3\2\2\2\u041d\u041b\3\2\2\2\u041d\u041e\3\2\2\2\u041e",
    "W\3\2\2\2\u041f\u041d\3\2\2\2\u0420\u0421\6-\"\3\u0421\u0422\7\24\2",
    "\2\u0422\u042e\5\u00acW\2\u0423\u0424\6-#\3\u0424\u0425\7\27\2\2\u0425",
    "\u0426\5\u00fc\177\2\u0426\u0427\7\30\2\2\u0427\u042e\3\2\2\2\u0428",
    "\u0429\6-$\3\u0429\u042a\7\27\2\2\u042a\u042b\5L\'\2\u042b\u042c\7\30",
    "\2\2\u042c\u042e\3\2\2\2\u042d\u0420\3\2\2\2\u042d\u0423\3\2\2\2\u042d",
    "\u0428\3\2\2\2\u042eY\3\2\2\2\u042f\u0430\5\u00a2R\2\u0430[\3\2\2\2",
    "\u0431\u0432\5\u009eP\2\u0432\u0433\7^\2\2\u0433\u043c\5L\'\2\u0434",
    "\u0436\7\22\2\2\u0435\u0434\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u0437",
    "\3\2\2\2\u0437\u043a\5j\66\2\u0438\u0439\7C\2\2\u0439\u043b\5l\67\2",
    "\u043a\u0438\3\2\2\2\u043a\u043b\3\2\2\2\u043b\u043d\3\2\2\2\u043c\u0435",
    "\3\2\2\2\u043c\u043d\3\2\2\2\u043d\u0447\3\2\2\2\u043e\u0444\5\u009e",
    "P\2\u043f\u0442\5j\66\2\u0440\u0441\7C\2\2\u0441\u0443\5l\67\2\u0442",
    "\u0440\3\2\2\2\u0442\u0443\3\2\2\2\u0443\u0445\3\2\2\2\u0444\u043f\3",
    "\2\2\2\u0444\u0445\3\2\2\2\u0445\u0447\3\2\2\2\u0446\u0431\3\2\2\2\u0446",
    "\u043e\3\2\2\2\u0447]\3\2\2\2\u0448\u0449\7u\2\2\u0449\u044a\7^\2\2",
    "\u044a\u044b\5L\'\2\u044b_\3\2\2\2\u044c\u044d\7\u0087\2\2\u044d\u044e",
    "\5L\'\2\u044e\u044f\7\u0081\2\2\u044f\u0450\5L\'\2\u0450a\3\2\2\2\u0451",
    "\u0452\5N(\2\u0452\u0453\7#\2\2\u0453\u0454\5L\'\2\u0454c\3\2\2\2\u0455",
    "\u0456\7[\2\2\u0456\u0457\7D\2\2\u0457\u0458\5\u00acW\2\u0458\u0459",
    "\7^\2\2\u0459\u045a\5L\'\2\u045a\u045b\7\u0085\2\2\u045b\u045c\5L\'",
    "\2\u045ce\3\2\2\2\u045d\u045e\7}\2\2\u045e\u0464\5V,\2\u045f\u0460\7",
    "\u0083\2\2\u0460\u0461\5V,\2\u0461\u0462\7E\2\2\u0462\u0463\5\u0106",
    "\u0084\2\u0463\u0465\3\2\2\2\u0464\u045f\3\2\2\2\u0464\u0465\3\2\2\2",
    "\u0465g\3\2\2\2\u0466\u0467\6\65%\3\u0467\u046d\5L\'\2\u0468\u046b\5",
    "j\66\2\u0469\u046a\7C\2\2\u046a\u046c\5l\67\2\u046b\u0469\3\2\2\2\u046b",
    "\u046c\3\2\2\2\u046c\u046e\3\2\2\2\u046d\u0468\3\2\2\2\u046d\u046e\3",
    "\2\2\2\u046e\u0475\3\2\2\2\u046f\u0472\5j\66\2\u0470\u0471\7C\2\2\u0471",
    "\u0473\5l\67\2\u0472\u0470\3\2\2\2\u0472\u0473\3\2\2\2\u0473\u0475\3",
    "\2\2\2\u0474\u0466\3\2\2\2\u0474\u046f\3\2\2\2\u0475i\3\2\2\2\u0476",
    "\u0477\b\66\1\2\u0477\u0478\7\u0083\2\2\u0478\u0479\5l\67\2\u0479\u047f",
    "\3\2\2\2\u047a\u047b\f\3\2\2\u047b\u047c\7\22\2\2\u047c\u047e\5l\67",
    "\2\u047d\u047a\3\2\2\2\u047e\u0481\3\2\2\2\u047f\u047d\3\2\2\2\u047f",
    "\u0480\3\2\2\2\u0480k\3\2\2\2\u0481\u047f\3\2\2\2\u0482\u0483\5L\'\2",
    "\u0483\u0484\7E\2\2\u0484\u0485\5\u00acW\2\u0485m\3\2\2\2\u0486\u0487",
    "\5\u0100\u0081\2\u0487\u0488\5\u010c\u0087\2\u0488\u0489\5L\'\2\u0489",
    "o\3\2\2\2\u048a\u048b\69\'\3\u048b\u048c\7\24\2\2\u048c\u0493\5\u00ac",
    "W\2\u048d\u048e\69(\3\u048e\u048f\7\27\2\2\u048f\u0490\5L\'\2\u0490",
    "\u0491\7\30\2\2\u0491\u0493\3\2\2\2\u0492\u048a\3\2\2\2\u0492\u048d",
    "\3\2\2\2\u0493q\3\2\2\2\u0494\u0495\5\u00d0i\2\u0495\u0496\5\u010c\u0087",
    "\2\u0496\u0497\5L\'\2\u0497s\3\2\2\2\u0498\u049a\7\7\2\2\u0499\u0498",
    "\3\2\2\2\u049a\u049d\3\2\2\2\u049b\u0499\3\2\2\2\u049b\u049c\3\2\2\2",
    "\u049cu\3\2\2\2\u049d\u049b\3\2\2\2\u049e\u04a0\7\7\2\2\u049f\u049e",
    "\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u049f\3\2\2\2\u04a1\u04a2\3\2\2\2",
    "\u04a2w\3\2\2\2\u04a3\u04a5\7\7\2\2\u04a4\u04a3\3\2\2\2\u04a5\u04a6",
    "\3\2\2\2\u04a6\u04a4\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u04a8\3\2\2\2",
    "\u04a8\u04a9\7\3\2\2\u04a9y\3\2\2\2\u04aa\u04ac\7\7\2\2\u04ab\u04aa",
    "\3\2\2\2\u04ac\u04af\3\2\2\2\u04ad\u04ab\3\2\2\2\u04ad\u04ae\3\2\2\2",
    "\u04ae\u04b0\3\2\2\2\u04af\u04ad\3\2\2\2\u04b0\u04b1\7\4\2\2\u04b1{",
    "\3\2\2\2\u04b2\u04b3\7l\2\2\u04b3}\3\2\2\2\u04b4\u04b6\5\u0080A\2\u04b5",
    "\u04b4\3\2\2\2\u04b5\u04b6\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7\u04b8\5",
    "t;\2\u04b8\u04b9\7\2\2\3\u04b9\177\3\2\2\2\u04ba\u04bb\bA\1\2\u04bb",
    "\u04bc\5\u0082B\2\u04bc\u04c3\3\2\2\2\u04bd\u04be\f\3\2\2\u04be\u04bf",
    "\5v<\2\u04bf\u04c0\5\u0082B\2\u04c0\u04c2\3\2\2\2\u04c1\u04bd\3\2\2",
    "\2\u04c2\u04c5\3\2\2\2\u04c3\u04c1\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4",
    "\u0081\3\2\2\2\u04c5\u04c3\3\2\2\2\u04c6\u04cc\5\n\6\2\u04c7\u04cc\5",
    "\u00a4S\2\u04c8\u04cc\5\u0084C\2\u04c9\u04cc\5\u0086D\2\u04ca\u04cc",
    "\5\u00d2j\2\u04cb\u04c6\3\2\2\2\u04cb\u04c7\3\2\2\2\u04cb\u04c8\3\2",
    "\2\2\u04cb\u04c9\3\2\2\2\u04cb\u04ca\3\2\2\2\u04cc\u0083\3\2\2\2\u04cd",
    "\u04ce\5\34\17\2\u04ce\u0085\3\2\2\2\u04cf\u04d2\5\2\2\2\u04d0\u04d2",
    "\5\4\3\2\u04d1\u04cf\3\2\2\2\u04d1\u04d0\3\2\2\2\u04d2\u0087\3\2\2\2",
    "\u04d3\u04d4\bE\1\2\u04d4\u04d5\5\6\4\2\u04d5\u04dc\3\2\2\2\u04d6\u04d7",
    "\f\3\2\2\u04d7\u04d8\5v<\2\u04d8\u04d9\5\6\4\2\u04d9\u04db\3\2\2\2\u04da",
    "\u04d6\3\2\2\2\u04db\u04de\3\2\2\2\u04dc\u04da\3\2\2\2\u04dc\u04dd\3",
    "\2\2\2\u04dd\u0089\3\2\2\2\u04de\u04dc\3\2\2\2\u04df\u04e0\bF\1\2\u04e0",
    "\u04e1\5\b\5\2\u04e1\u04e8\3\2\2\2\u04e2\u04e3\f\3\2\2\u04e3\u04e4\5",
    "v<\2\u04e4\u04e5\5\b\5\2\u04e5\u04e7\3\2\2\2\u04e6\u04e2\3\2\2\2\u04e7",
    "\u04ea\3\2\2\2\u04e8\u04e6\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9\u008b\3",
    "\2\2\2\u04ea\u04e8\3\2\2\2\u04eb\u04ec\bG\1\2\u04ec\u04ed\5\u00b0Y\2",
    "\u04ed\u04f3\3\2\2\2\u04ee\u04ef\f\3\2\2\u04ef\u04f0\7\22\2\2\u04f0",
    "\u04f2\5\u00b0Y\2\u04f1\u04ee\3\2\2\2\u04f2\u04f5\3\2\2\2\u04f3\u04f1",
    "\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u008d\3\2\2\2\u04f5\u04f3\3\2\2\2",
    "\u04f6\u04f7\7a\2\2\u04f7\u0501\5\u0090I\2\u04f8\u04f9\7a\2\2\u04f9",
    "\u0501\5\u0092J\2\u04fa\u04fb\7a\2\2\u04fb\u0501\5\u0096L\2\u04fc\u04fd",
    "\7e\2\2\u04fd\u0501\7\u008f\2\2\u04fe\u04ff\7e\2\2\u04ff\u0501\5L\'",
    "\2\u0500\u04f6\3\2\2\2\u0500\u04f8\3\2\2\2\u0500\u04fa\3\2\2\2\u0500",
    "\u04fc\3\2\2\2\u0500\u04fe\3\2\2\2\u0501\u008f\3\2\2\2\u0502\u0504\7",
    "\27\2\2\u0503\u0505\5\u0094K\2\u0504\u0503\3\2\2\2\u0504\u0505\3\2\2",
    "\2\u0505\u0506\3\2\2\2\u0506\u0507\7\30\2\2\u0507\u0091\3\2\2\2\u0508",
    "\u050a\7*\2\2\u0509\u050b\5\u0094K\2\u050a\u0509\3\2\2\2\u050a\u050b",
    "\3\2\2\2\u050b\u050c\3\2\2\2\u050c\u050d\7(\2\2\u050d\u0093\3\2\2\2",
    "\u050e\u050f\bK\1\2\u050f\u0510\5L\'\2\u0510\u0516\3\2\2\2\u0511\u0512",
    "\f\3\2\2\u0512\u0513\7\22\2\2\u0513\u0515\5L\'\2\u0514\u0511\3\2\2\2",
    "\u0515\u0518\3\2\2\2\u0516\u0514\3\2\2\2\u0516\u0517\3\2\2\2\u0517\u0095",
    "\3\2\2\2\u0518\u0516\3\2\2\2\u0519\u051a\7\27\2\2\u051a\u051b\5L\'\2",
    "\u051b\u051c\7\23\2\2\u051c\u051d\5L\'\2\u051d\u051e\7\30\2\2\u051e",
    "\u0097\3\2\2\2\u051f\u0520\bM\1\2\u0520\u0521\5\u009aN\2\u0521\u052c",
    "\3\2\2\2\u0522\u0523\f\5\2\2\u0523\u052b\7,\2\2\u0524\u0525\f\4\2\2",
    "\u0525\u0526\7\27\2\2\u0526\u052b\7\30\2\2\u0527\u0528\f\3\2\2\u0528",
    "\u0529\7\31\2\2\u0529\u052b\7\32\2\2\u052a\u0522\3\2\2\2\u052a\u0524",
    "\3\2\2\2\u052a\u0527\3\2\2\2\u052b\u052e\3\2\2\2\u052c\u052a\3\2\2\2",
    "\u052c\u052d\3\2\2\2\u052d\u0099\3\2\2\2\u052e\u052c\3\2\2\2\u052f\u0532",
    "\5\u009cO\2\u0530\u0532\5\u009eP\2\u0531\u052f\3\2\2\2\u0531\u0530\3",
    "\2\2\2\u0532\u009b\3\2\2\2\u0533\u053e\7\64\2\2\u0534\u053e\7\65\2\2",
    "\u0535\u053e\7\66\2\2\u0536\u053e\7\67\2\2\u0537\u053e\78\2\2\u0538",
    "\u053e\79\2\2\u0539\u053e\7;\2\2\u053a\u053e\7:\2\2\u053b\u053e\7<\2",
    "\2\u053c\u053e\7>\2\2\u053d\u0533\3\2\2\2\u053d\u0534\3\2\2\2\u053d",
    "\u0535\3\2\2\2\u053d\u0536\3\2\2\2\u053d\u0537\3\2\2\2\u053d\u0538\3",
    "\2\2\2\u053d\u0539\3\2\2\2\u053d\u053a\3\2\2\2\u053d\u053b\3\2\2\2\u053d",
    "\u053c\3\2\2\2\u053e\u009d\3\2\2\2\u053f\u0540\7\u008d\2\2\u0540\u009f",
    "\3\2\2\2\u0541\u0542\7>\2\2\u0542\u00a1\3\2\2\2\u0543\u0544\7?\2\2\u0544",
    "\u00a3\3\2\2\2\u0545\u0549\5\f\7\2\u0546\u0549\5\32\16\2\u0547\u0549",
    "\5\16\b\2\u0548\u0545\3\2\2\2\u0548\u0546\3\2\2\2\u0548\u0547\3\2\2",
    "\2\u0549\u00a5\3\2\2\2\u054a\u054b\bT\1\2\u054b\u054c\5\u00aeX\2\u054c",
    "\u0552\3\2\2\2\u054d\u054e\f\3\2\2\u054e\u054f\7\22\2\2\u054f\u0551",
    "\5\u00aeX\2\u0550\u054d\3\2\2\2\u0551\u0554\3\2\2\2\u0552\u0550\3\2",
    "\2\2\u0552\u0553\3\2\2\2\u0553\u00a7\3\2\2\2\u0554\u0552\3\2\2\2\u0555",
    "\u0558\5\u00acW\2\u0556\u0558\5\u00aeX\2\u0557\u0555\3\2\2\2\u0557\u0556",
    "\3\2\2\2\u0558\u00a9\3\2\2\2\u0559\u055d\5\u00acW\2\u055a\u055d\5\u00ae",
    "X\2\u055b\u055d\5\u00b0Y\2\u055c\u0559\3\2\2\2\u055c\u055a\3\2\2\2\u055c",
    "\u055b\3\2\2\2\u055d\u00ab\3\2\2\2\u055e\u055f\7\u008e\2\2\u055f\u00ad",
    "\3\2\2\2\u0560\u0561\7\u008d\2\2\u0561\u00af\3\2\2\2\u0562\u0563\7\u008c",
    "\2\2\u0563\u00b1\3\2\2\2\u0564\u0565\bZ\1\2\u0565\u0566\5\u00b4[\2\u0566",
    "\u056c\3\2\2\2\u0567\u0568\f\3\2\2\u0568\u0569\7\22\2\2\u0569\u056b",
    "\5\u00b4[\2\u056a\u0567\3\2\2\2\u056b\u056e\3\2\2\2\u056c\u056a\3\2",
    "\2\2\u056c\u056d\3\2\2\2\u056d\u00b3\3\2\2\2\u056e\u056c\3\2\2\2\u056f",
    "\u0572\5\u00ba^\2\u0570\u0572\5\u00b6\\\2\u0571\u056f\3\2\2\2\u0571",
    "\u0570\3\2\2\2\u0572\u00b5\3\2\2\2\u0573\u0576\5\u00b8]\2\u0574\u0576",
    "\5,\27\2\u0575\u0573\3\2\2\2\u0575\u0574\3\2\2\2\u0576\u00b7\3\2\2\2",
    "\u0577\u057a\5\u00acW\2\u0578\u0579\7-\2\2\u0579\u057b\5\u00eex\2\u057a",
    "\u0578\3\2\2\2\u057a\u057b\3\2\2\2\u057b\u00b9\3\2\2\2\u057c\u057d\5",
    "\u00a0Q\2\u057d\u057e\5\u00acW\2\u057e\u00bb\3\2\2\2\u057f\u0582\5\u0098",
    "M\2\u0580\u0582\5\u00be`\2\u0581\u057f\3\2\2\2\u0581\u0580\3\2\2\2\u0582",
    "\u00bd\3\2\2\2\u0583\u0584\b`\1\2\u0584\u0585\7D\2\2\u0585\u058e\3\2",
    "\2\2\u0586\u0587\f\4\2\2\u0587\u0588\7\27\2\2\u0588\u058d\7\30\2\2\u0589",
    "\u058a\f\3\2\2\u058a\u058b\7\31\2\2\u058b\u058d\7\32\2\2\u058c\u0586",
    "\3\2\2\2\u058c\u0589\3\2\2\2\u058d\u0590\3\2\2\2\u058e\u058c\3\2\2\2",
    "\u058e\u058f\3\2\2\2\u058f\u00bf\3\2\2\2\u0590\u058e\3\2\2\2\u0591\u0592",
    "\ba\1\2\u0592\u0593\5\u00c2b\2\u0593\u059a\3\2\2\2\u0594\u0595\f\3\2",
    "\2\u0595\u0596\5v<\2\u0596\u0597\5\u00c2b\2\u0597\u0599\3\2\2\2\u0598",
    "\u0594\3\2\2\2\u0599\u059c\3\2\2\2\u059a\u0598\3\2\2\2\u059a\u059b\3",
    "\2\2\2\u059b\u00c1\3\2\2\2\u059c\u059a\3\2\2\2\u059d\u05a2\5\26\f\2",
    "\u059e\u05a2\5\30\r\2\u059f\u05a2\5\22\n\2\u05a0\u05a2\5\24\13\2\u05a1",
    "\u059d\3\2\2\2\u05a1\u059e\3\2\2\2\u05a1\u059f\3\2\2\2\u05a1\u05a0\3",
    "\2\2\2\u05a2\u00c3\3\2\2\2\u05a3\u05a4\7\n\2\2\u05a4\u05ae\5\u0156\u00ac",
    "\2\u05a5\u05a6\7\13\2\2\u05a6\u05ae\5\u016c\u00b7\2\u05a7\u05a8\7\f",
    "\2\2\u05a8\u05ae\5\u00c6d\2\u05a9\u05aa\7\r\2\2\u05aa\u05ae\5\u00c6",
    "d\2\u05ab\u05ac\7\16\2\2\u05ac\u05ae\5\u00ccg\2\u05ad\u05a3\3\2\2\2",
    "\u05ad\u05a5\3\2\2\2\u05ad\u05a7\3\2\2\2\u05ad\u05a9\3\2\2\2\u05ad\u05ab",
    "\3\2\2\2\u05ae\u00c5\3\2\2\2\u05af\u05b1\5\u00aaV\2\u05b0\u05b2\5\u00c8",
    "e\2\u05b1\u05b0\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2\u00c7\3\2\2\2\u05b3",
    "\u05b4\7^\2\2\u05b4\u05b5\5\u00caf\2\u05b5\u05b6\7\20\2\2\u05b6\u05bb",
    "\5\u00aaV\2\u05b7\u05b8\7\24\2\2\u05b8\u05ba\5\u00aaV\2\u05b9\u05b7",
    "\3\2\2\2\u05ba\u05bd\3\2\2\2\u05bb\u05b9\3\2\2\2\u05bb\u05bc\3\2\2\2",
    "\u05bc\u00c9\3\2\2\2\u05bd\u05bb\3\2\2\2\u05be\u05bf\7\u008e\2\2\u05bf",
    "\u05c0\6f\66\3\u05c0\u00cb\3\2\2\2\u05c1\u05c3\5\u00aaV\2\u05c2\u05c4",
    "\5\u00ceh\2\u05c3\u05c2\3\2\2\2\u05c3\u05c4\3\2\2\2\u05c4\u00cd\3\2",
    "\2\2\u05c5\u05c6\7^\2\2\u05c6\u05c7\5\u00caf\2\u05c7\u05c9\7\20\2\2",
    "\u05c8\u05ca\7%\2\2\u05c9\u05c8\3\2\2\2\u05c9\u05ca\3\2\2\2\u05ca\u05cb",
    "\3\2\2\2\u05cb\u05d0\5\u00aaV\2\u05cc\u05cd\7%\2\2\u05cd\u05cf\5\u00aa",
    "V\2\u05ce\u05cc\3\2\2\2\u05cf\u05d2\3\2\2\2\u05d0\u05ce\3\2\2\2\u05d0",
    "\u05d1\3\2\2\2\u05d1\u05d5\3\2\2\2\u05d2\u05d0\3\2\2\2\u05d3\u05d4\7",
    "\24\2\2\u05d4\u05d6\5\u00aaV\2\u05d5\u05d3\3\2\2\2\u05d5\u05d6\3\2\2",
    "\2\u05d6\u00cf\3\2\2\2\u05d7\u05d8\bi\1\2\u05d8\u05d9\5\u00acW\2\u05d9",
    "\u05df\3\2\2\2\u05da\u05db\f\3\2\2\u05db\u05dc\7\22\2\2\u05dc\u05de",
    "\5\u00acW\2\u05dd\u05da\3\2\2\2\u05de\u05e1\3\2\2\2\u05df\u05dd\3\2",
    "\2\2\u05df\u05e0\3\2\2\2\u05e0\u00d1\3\2\2\2\u05e1\u05df\3\2\2\2\u05e2",
    "\u05e6\5$\23\2\u05e3\u05e6\5&\24\2\u05e4\u05e6\5(\25\2\u05e5\u05e2\3",
    "\2\2\2\u05e5\u05e3\3\2\2\2\u05e5\u05e4\3\2\2\2\u05e6\u00d3\3\2\2\2\u05e7",
    "\u05e8\bk\1\2\u05e8\u05e9\5\u00d6l\2\u05e9\u05f0\3\2\2\2\u05ea\u05eb",
    "\f\3\2\2\u05eb\u05ec\5v<\2\u05ec\u05ed\5\u00d6l\2\u05ed\u05ef\3\2\2",
    "\2\u05ee\u05ea\3\2\2\2\u05ef\u05f2\3\2\2\2\u05f0\u05ee\3\2\2\2\u05f0",
    "\u05f1\3\2\2\2\u05f1\u00d5\3\2\2\2\u05f2\u05f0\3\2\2\2\u05f3\u05f4\7",
    "\n\2\2\u05f4\u05fe\5\u0144\u00a3\2\u05f5\u05f6\7\13\2\2\u05f6\u05fe",
    "\5\u015c\u00af\2\u05f7\u05f8\7\f\2\2\u05f8\u05fe\5\u00d8m\2\u05f9\u05fa",
    "\7\r\2\2\u05fa\u05fe\5\u00d8m\2\u05fb\u05fc\7\16\2\2\u05fc\u05fe\5\u00da",
    "n\2\u05fd\u05f3\3\2\2\2\u05fd\u05f5\3\2\2\2\u05fd\u05f7\3\2\2\2\u05fd",
    "\u05f9\3\2\2\2\u05fd\u05fb\3\2\2\2\u05fe\u00d7\3\2\2\2\u05ff\u0601\5",
    "\u012c\u0097\2\u0600\u0602\7\21\2\2\u0601\u0600\3\2\2\2\u0601\u0602",
    "\3\2\2\2\u0602\u0604\3\2\2\2\u0603\u0605\5\u00c8e\2\u0604\u0603\3\2",
    "\2\2\u0604\u0605\3\2\2\2\u0605\u00d9\3\2\2\2\u0606\u0608\5\u0116\u008c",
    "\2\u0607\u0609\7\21\2\2\u0608\u0607\3\2\2\2\u0608\u0609\3\2\2\2\u0609",
    "\u060b\3\2\2\2\u060a\u060c\5\u00ceh\2\u060b\u060a\3\2\2\2\u060b\u060c",
    "\3\2\2\2\u060c\u00db\3\2\2\2\u060d\u060e\bo\1\2\u060e\u060f\5.\30\2",
    "\u060f\u0616\3\2\2\2\u0610\u0611\f\3\2\2\u0611\u0612\5v<\2\u0612\u0613",
    "\5.\30\2\u0613\u0615\3\2\2\2\u0614\u0610\3\2\2\2\u0615\u0618\3\2\2\2",
    "\u0616\u0614\3\2\2\2\u0616\u0617\3\2\2\2\u0617\u00dd\3\2\2\2\u0618\u0616",
    "\3\2\2\2\u0619\u061a\bp\1\2\u061a\u061b\58\35\2\u061b\u0622\3\2\2\2",
    "\u061c\u061d\f\3\2\2\u061d\u061e\5v<\2\u061e\u061f\58\35\2\u061f\u0621",
    "\3\2\2\2\u0620\u061c\3\2\2\2\u0621\u0624\3\2\2\2\u0622\u0620\3\2\2\2",
    "\u0622\u0623\3\2\2\2\u0623\u00df\3\2\2\2\u0624\u0622\3\2\2\2\u0625\u0626",
    "\bq\1\2\u0626\u0627\5H%\2\u0627\u062e\3\2\2\2\u0628\u0629\f\3\2\2\u0629",
    "\u062a\5v<\2\u062a\u062b\5H%\2\u062b\u062d\3\2\2\2\u062c\u0628\3\2\2",
    "\2\u062d\u0630\3\2\2\2\u062e\u062c\3\2\2\2\u062e\u062f\3\2\2\2\u062f",
    "\u00e1\3\2\2\2\u0630\u062e\3\2\2\2\u0631\u0632\7\27\2\2\u0632\u0633",
    "\5\u00e4s\2\u0633\u0634\7\23\2\2\u0634\u0635\5\u00e4s\2\u0635\u0636",
    "\7\30\2\2\u0636\u0640\3\2\2\2\u0637\u0638\7\27\2\2\u0638\u0639\5\u00e6",
    "t\2\u0639\u063a\7\30\2\2\u063a\u0640\3\2\2\2\u063b\u063c\7*\2\2\u063c",
    "\u063d\5\u00e6t\2\u063d\u063e\7(\2\2\u063e\u0640\3\2\2\2\u063f\u0631",
    "\3\2\2\2\u063f\u0637\3\2\2\2\u063f\u063b\3\2\2\2\u0640\u00e3\3\2\2\2",
    "\u0641\u064f\7\u008a\2\2\u0642\u064f\7\u008b\2\2\u0643\u064f\7\u0090",
    "\2\2\u0644\u064f\7\u0091\2\2\u0645\u064f\7\u0089\2\2\u0646\u064f\7\u0095",
    "\2\2\u0647\u064f\7\u0094\2\2\u0648\u064f\7\u008f\2\2\u0649\u064f\7\u0092",
    "\2\2\u064a\u064f\7\u0093\2\2\u064b\u064f\7\u0088\2\2\u064c\u064f\7\u0096",
    "\2\2\u064d\u064f\5|?\2\u064e\u0641\3\2\2\2\u064e\u0642\3\2\2\2\u064e",
    "\u0643\3\2\2\2\u064e\u0644\3\2\2\2\u064e\u0645\3\2\2\2\u064e\u0646\3",
    "\2\2\2\u064e\u0647\3\2\2\2\u064e\u0648\3\2\2\2\u064e\u0649\3\2\2\2\u064e",
    "\u064a\3\2\2\2\u064e\u064b\3\2\2\2\u064e\u064c\3\2\2\2\u064e\u064d\3",
    "\2\2\2\u064f\u00e5\3\2\2\2\u0650\u0651\bt\1\2\u0651\u0652\5\u00e4s\2",
    "\u0652\u0658\3\2\2\2\u0653\u0654\f\3\2\2\u0654\u0655\7\22\2\2\u0655",
    "\u0657\5\u00e4s\2\u0656\u0653\3\2\2\2\u0657\u065a\3\2\2\2\u0658\u0656",
    "\3\2\2\2\u0658\u0659\3\2\2\2\u0659\u00e7\3\2\2\2\u065a\u0658\3\2\2\2",
    "\u065b\u0660\5\u00ecw\2\u065c\u0660\5\u00eex\2\u065d\u0660\5\u00aaV",
    "\2\u065e\u0660\5\u00eav\2\u065f\u065b\3\2\2\2\u065f\u065c\3\2\2\2\u065f",
    "\u065d\3\2\2\2\u065f\u065e\3\2\2\2\u0660\u00e9\3\2\2\2\u0661\u0662\t",
    "\3\2\2\u0662\u00eb\3\2\2\2\u0663\u0664\7\25\2\2\u0664\u0665\5L\'\2\u0665",
    "\u0666\7\26\2\2\u0666\u00ed\3\2\2\2\u0667\u066a\5\u00e4s\2\u0668\u066a",
    "\5\u00f0y\2\u0669\u0667\3\2\2\2\u0669\u0668\3\2\2\2\u066a\u00ef\3\2",
    "\2\2\u066b\u0671\5\u0096L\2\u066c\u0671\5\u0090I\2\u066d\u0671\5\u0092",
    "J\2\u066e\u0671\5\u00f4{\2\u066f\u0671\5\u00f2z\2\u0670\u066b\3\2\2",
    "\2\u0670\u066c\3\2\2\2\u0670\u066d\3\2\2\2\u0670\u066e\3\2\2\2\u0670",
    "\u066f\3\2\2\2\u0671\u00f1\3\2\2\2\u0672\u0674\7\25\2\2\u0673\u0675",
    "\5\u00f6|\2\u0674\u0673\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u0676\3\2",
    "\2\2\u0676\u0677\7\26\2\2\u0677\u00f3\3\2\2\2\u0678\u067a\7\31\2\2\u0679",
    "\u067b\5\u00f8}\2\u067a\u0679\3\2\2\2\u067a\u067b\3\2\2\2\u067b\u067c",
    "\3\2\2\2\u067c\u067d\7\32\2\2\u067d\u00f5\3\2\2\2\u067e\u067f\b|\1\2",
    "\u067f\u0680\5L\'\2\u0680\u0686\3\2\2\2\u0681\u0682\f\3\2\2\u0682\u0683",
    "\7\22\2\2\u0683\u0685\5L\'\2\u0684\u0681\3\2\2\2\u0685\u0688\3\2\2\2",
    "\u0686\u0684\3\2\2\2\u0686\u0687\3\2\2\2\u0687\u00f7\3\2\2\2\u0688\u0686",
    "\3\2\2\2\u0689\u068a\b}\1\2\u068a\u068b\5\u00fa~\2\u068b\u0691\3\2\2",
    "\2\u068c\u068d\f\3\2\2\u068d\u068e\7\22\2\2\u068e\u0690\5\u00fa~\2\u068f",
    "\u068c\3\2\2\2\u0690\u0693\3\2\2\2\u0691\u068f\3\2\2\2\u0691\u0692\3",
    "\2\2\2\u0692\u00f9\3\2\2\2\u0693\u0691\3\2\2\2\u0694\u0695\5L\'\2\u0695",
    "\u0696\7\20\2\2\u0696\u0697\5L\'\2\u0697\u00fb\3\2\2\2\u0698\u0699\5",
    "L\'\2\u0699\u069a\7\20\2\2\u069a\u069b\5L\'\2\u069b\u06a2\3\2\2\2\u069c",
    "\u069d\5L\'\2\u069d\u069e\7\20\2\2\u069e\u06a2\3\2\2\2\u069f\u06a0\7",
    "\20\2\2\u06a0\u06a2\5L\'\2\u06a1\u0698\3\2\2\2\u06a1\u069c\3\2\2\2\u06a1",
    "\u069f\3\2\2\2\u06a2\u00fd\3\2\2\2\u06a3\u06a4\5\u00acW\2\u06a4\u06a5",
    "\5\u010c\u0087\2\u06a5\u06a6\5L\'\2\u06a6\u00ff\3\2\2\2\u06a7\u06a8",
    "\b\u0081\1\2\u06a8\u06a9\5\u00acW\2\u06a9\u06ae\3\2\2\2\u06aa\u06ab",
    "\f\3\2\2\u06ab\u06ad\5p9\2\u06ac\u06aa\3\2\2\2\u06ad\u06b0\3\2\2\2\u06ae",
    "\u06ac\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u0101\3\2\2\2\u06b0\u06ae\3",
    "\2\2\2\u06b1\u06b2\6\u0082@\3\u06b2\u06b3\7\u008e\2\2\u06b3\u06b6\5",
    "\u00bc_\2\u06b4\u06b6\5L\'\2\u06b5\u06b1\3\2\2\2\u06b5\u06b4\3\2\2\2",
    "\u06b6\u0103\3\2\2\2\u06b7\u06be\7\"\2\2\u06b8\u06be\7#\2\2\u06b9\u06be",
    "\5\u010e\u0088\2\u06ba\u06be\5\u0110\u0089\2\u06bb\u06be\5\u0112\u008a",
    "\2\u06bc\u06be\5\u0114\u008b\2\u06bd\u06b7\3\2\2\2\u06bd\u06b8\3\2\2",
    "\2\u06bd\u06b9\3\2\2\2\u06bd\u06ba\3\2\2\2\u06bd\u06bb\3\2\2\2\u06bd",
    "\u06bc\3\2\2\2\u06be\u0105\3\2\2\2\u06bf\u06c0\7\u008e\2\2\u06c0\u06c1",
    "\6\u0084A\3\u06c1\u0107\3\2\2\2\u06c2\u06c3\7\u008e\2\2\u06c3\u06c4",
    "\6\u0085B\3\u06c4\u0109\3\2\2\2\u06c5\u06c6\7\u008e\2\2\u06c6\u06c7",
    "\6\u0086C\3\u06c7\u010b\3\2\2\2\u06c8\u06c9\7-\2\2\u06c9\u010d\3\2\2",
    "\2\u06ca\u06cb\7$\2\2\u06cb\u010f\3\2\2\2\u06cc\u06cd\7%\2\2\u06cd\u0111",
    "\3\2\2\2\u06ce\u06cf\7&\2\2\u06cf\u0113\3\2\2\2\u06d0\u06d1\t\4\2\2",
    "\u06d1\u0115\3\2\2\2\u06d2\u06d3\7x\2\2\u06d3\u06d4\5\u0118\u008d\2",
    "\u06d4\u06d5\7\21\2\2\u06d5\u06da\3\2\2\2\u06d6\u06d7\5\u0118\u008d",
    "\2\u06d7\u06d8\7\21\2\2\u06d8\u06da\3\2\2\2\u06d9\u06d2\3\2\2\2\u06d9",
    "\u06d6\3\2\2\2\u06da\u0117\3\2\2\2\u06db\u06dc\b\u008d\1\2\u06dc\u06dd",
    "\5\u011a\u008e\2\u06dd\u06e2\3\2\2\2\u06de\u06df\f\3\2\2\u06df\u06e1",
    "\5\u011c\u008f\2\u06e0\u06de\3\2\2\2\u06e1\u06e4\3\2\2\2\u06e2\u06e0",
    "\3\2\2\2\u06e2\u06e3\3\2\2\2\u06e3\u0119\3\2\2\2\u06e4\u06e2\3\2\2\2",
    "\u06e5\u06e9\5\u0124\u0093\2\u06e6\u06e9\5\u0126\u0094\2\u06e7\u06e9",
    "\5\u0128\u0095\2\u06e8\u06e5\3\2\2\2\u06e8\u06e6\3\2\2\2\u06e8\u06e7",
    "\3\2\2\2\u06e9\u011b\3\2\2\2\u06ea\u06eb\7\24\2\2\u06eb\u06ee\5\u011e",
    "\u0090\2\u06ec\u06ee\5\u0122\u0092\2\u06ed\u06ea\3\2\2\2\u06ed\u06ec",
    "\3\2\2\2\u06ee\u011d\3\2\2\2\u06ef\u06f0\5\u012a\u0096\2\u06f0\u06f2",
    "\7\25\2\2\u06f1\u06f3\5\u0120\u0091\2\u06f2\u06f1\3\2\2\2\u06f2\u06f3",
    "\3\2\2\2\u06f3\u06f4\3\2\2\2\u06f4\u06f5\7\26\2\2\u06f5\u011f\3\2\2",
    "\2\u06f6\u06f7\b\u0091\1\2\u06f7\u06f8\5\u0118\u008d\2\u06f8\u06fe\3",
    "\2\2\2\u06f9\u06fa\f\3\2\2\u06fa\u06fb\7\22\2\2\u06fb\u06fd\5\u0118",
    "\u008d\2\u06fc\u06f9\3\2\2\2\u06fd\u0700\3\2\2\2\u06fe\u06fc\3\2\2\2",
    "\u06fe\u06ff\3\2\2\2\u06ff\u0121\3\2\2\2\u0700\u06fe\3\2\2\2\u0701\u0702",
    "\7\27\2\2\u0702\u0703\5\u0118\u008d\2\u0703\u0704\7\30\2\2\u0704\u0123",
    "\3\2\2\2\u0705\u0706\7\25\2\2\u0706\u0707\5\u0118\u008d\2\u0707\u0708",
    "\7\26\2\2\u0708\u0125\3\2\2\2\u0709\u070a\b\u0094\1\2\u070a\u070b\5",
    "\u012a\u0096\2\u070b\u0711\3\2\2\2\u070c\u070d\f\3\2\2\u070d\u070e\7",
    "\24\2\2\u070e\u0710\5\u012a\u0096\2\u070f\u070c\3\2\2\2\u0710\u0713",
    "\3\2\2\2\u0711\u070f\3\2\2\2\u0711\u0712\3\2\2\2\u0712\u0127\3\2\2\2",
    "\u0713\u0711\3\2\2\2\u0714\u071a\7\u0090\2\2\u0715\u071a\7\u0092\2\2",
    "\u0716\u071a\7\u008f\2\2\u0717\u071a\7\u0088\2\2\u0718\u071a\7\u0089",
    "\2\2\u0719\u0714\3\2\2\2\u0719\u0715\3\2\2\2\u0719\u0716\3\2\2\2\u0719",
    "\u0717\3\2\2\2\u0719\u0718\3\2\2\2\u071a\u0129\3\2\2\2\u071b\u071c\t",
    "\5\2\2\u071c\u012b\3\2\2\2\u071d\u071e\7x\2\2\u071e\u0721\5\u012e\u0098",
    "\2\u071f\u0721\5\u012e\u0098\2\u0720\u071d\3\2\2\2\u0720\u071f\3\2\2",
    "\2\u0721\u012d\3\2\2\2\u0722\u0723\b\u0098\1\2\u0723\u0724\5\u0130\u0099",
    "\2\u0724\u0729\3\2\2\2\u0725\u0726\f\3\2\2\u0726\u0728\5\u0132\u009a",
    "\2\u0727\u0725\3\2\2\2\u0728\u072b\3\2\2\2\u0729\u0727\3\2\2\2\u0729",
    "\u072a\3\2\2\2\u072a\u012f\3\2\2\2\u072b\u0729\3\2\2\2\u072c\u0731\5",
    "\u013c\u009f\2\u072d\u0731\5\u013e\u00a0\2\u072e\u0731\5\u0140\u00a1",
    "\2\u072f\u0731\5\u0134\u009b\2\u0730\u072c\3\2\2\2\u0730\u072d\3\2\2",
    "\2\u0730\u072e\3\2\2\2\u0730\u072f\3\2\2\2\u0731\u0131\3\2\2\2\u0732",
    "\u0733\7\24\2\2\u0733\u0739\5\u0134\u009b\2\u0734\u0735\7\27\2\2\u0735",
    "\u0736\5\u012e\u0098\2\u0736\u0737\7\30\2\2\u0737\u0739\3\2\2\2\u0738",
    "\u0732\3\2\2\2\u0738\u0734\3\2\2\2\u0739\u0133\3\2\2\2\u073a\u073b\5",
    "\u0142\u00a2\2\u073b\u073d\7\25\2\2\u073c\u073e\5\u0136\u009c\2\u073d",
    "\u073c\3\2\2\2\u073d\u073e\3\2\2\2\u073e\u073f\3\2\2\2\u073f\u0740\7",
    "\26\2\2\u0740\u0135\3\2\2\2\u0741\u0748\5\u0138\u009d\2\u0742\u0748",
    "\5\u013a\u009e\2\u0743\u0744\5\u0138\u009d\2\u0744\u0745\7\22\2\2\u0745",
    "\u0746\5\u013a\u009e\2\u0746\u0748\3\2\2\2\u0747\u0741\3\2\2\2\u0747",
    "\u0742\3\2\2\2\u0747\u0743\3\2\2\2\u0748\u0137\3\2\2\2\u0749\u074a\b",
    "\u009d\1\2\u074a\u074b\5\u012e\u0098\2\u074b\u0751\3\2\2\2\u074c\u074d",
    "\f\3\2\2\u074d\u074e\7\22\2\2\u074e\u0750\5\u012e\u0098\2\u074f\u074c",
    "\3\2\2\2\u0750\u0753\3\2\2\2\u0751\u074f\3\2\2\2\u0751\u0752\3\2\2\2",
    "\u0752\u0139\3\2\2\2\u0753\u0751\3\2\2\2\u0754\u0755\b\u009e\1\2\u0755",
    "\u0756\5\u0142\u00a2\2\u0756\u0757\7-\2\2\u0757\u0758\5\u012e\u0098",
    "\2\u0758\u0761\3\2\2\2\u0759\u075a\f\3\2\2\u075a\u075b\7\22\2\2\u075b",
    "\u075c\5\u0142\u00a2\2\u075c\u075d\7-\2\2\u075d\u075e\5\u012e\u0098",
    "\2\u075e\u0760\3\2\2\2\u075f\u0759\3\2\2\2\u0760\u0763\3\2\2\2\u0761",
    "\u075f\3\2\2\2\u0761\u0762\3\2\2\2\u0762\u013b\3\2\2\2\u0763\u0761\3",
    "\2\2\2\u0764\u0765\7\25\2\2\u0765\u0766\5\u012e\u0098\2\u0766\u0767",
    "\7\26\2\2\u0767\u013d\3\2\2\2\u0768\u0769\b\u00a0\1\2\u0769\u076a\5",
    "\u0142\u00a2\2\u076a\u0770\3\2\2\2\u076b\u076c\f\3\2\2\u076c\u076d\7",
    "\24\2\2\u076d\u076f\5\u0142\u00a2\2\u076e\u076b\3\2\2\2\u076f\u0772",
    "\3\2\2\2\u0770\u076e\3\2\2\2\u0770\u0771\3\2\2\2\u0771\u013f\3\2\2\2",
    "\u0772\u0770\3\2\2\2\u0773\u0779\7\u0090\2\2\u0774\u0779\7\u0092\2\2",
    "\u0775\u0779\7\u008f\2\2\u0776\u0779\7\u0088\2\2\u0777\u0779\7\u0089",
    "\2\2\u0778\u0773\3\2\2\2\u0778\u0774\3\2\2\2\u0778\u0775\3\2\2\2\u0778",
    "\u0776\3\2\2\2\u0778\u0777\3\2\2\2\u0779\u0141\3\2\2\2\u077a\u077b\t",
    "\6\2\2\u077b\u0143\3\2\2\2\u077c\u077d\7x\2\2\u077d\u077e\5\u0146\u00a4",
    "\2\u077e\u077f\7\21\2\2\u077f\u0784\3\2\2\2\u0780\u0781\5\u0146\u00a4",
    "\2\u0781\u0782\7\21\2\2\u0782\u0784\3\2\2\2\u0783\u077c\3\2\2\2\u0783",
    "\u0780\3\2\2\2\u0784\u0145\3\2\2\2\u0785\u0786\b\u00a4\1\2\u0786\u0787",
    "\5\u0148\u00a5\2\u0787\u078c\3\2\2\2\u0788\u0789\f\3\2\2\u0789\u078b",
    "\5\u014a\u00a6\2\u078a\u0788\3\2\2\2\u078b\u078e\3\2\2\2\u078c\u078a",
    "\3\2\2\2\u078c\u078d\3\2\2\2\u078d\u0147\3\2\2\2\u078e\u078c\3\2\2\2",
    "\u078f\u0793\5\u0152\u00aa\2\u0790\u0793\5\u0154\u00ab\2\u0791\u0793",
    "\5\u0158\u00ad\2\u0792\u078f\3\2\2\2\u0792\u0790\3\2\2\2\u0792\u0791",
    "\3\2\2\2\u0793\u0149\3\2\2\2\u0794\u0795\7\24\2\2\u0795\u0798\5\u014c",
    "\u00a7\2\u0796\u0798\5\u0150\u00a9\2\u0797\u0794\3\2\2\2\u0797\u0796",
    "\3\2\2\2\u0798\u014b\3\2\2\2\u0799\u079a\5\u015a\u00ae\2\u079a\u079c",
    "\7\25\2\2\u079b\u079d\5\u014e\u00a8\2\u079c\u079b\3\2\2\2\u079c\u079d",
    "\3\2\2\2\u079d\u079e\3\2\2\2\u079e\u079f\7\26\2\2\u079f\u014d\3\2\2",
    "\2\u07a0\u07a1\b\u00a8\1\2\u07a1\u07a2\5\u0146\u00a4\2\u07a2\u07a8\3",
    "\2\2\2\u07a3\u07a4\f\3\2\2\u07a4\u07a5\7\22\2\2\u07a5\u07a7\5\u0146",
    "\u00a4\2\u07a6\u07a3\3\2\2\2\u07a7\u07aa\3\2\2\2\u07a8\u07a6\3\2\2\2",
    "\u07a8\u07a9\3\2\2\2\u07a9\u014f\3\2\2\2\u07aa\u07a8\3\2\2\2\u07ab\u07ac",
    "\7\27\2\2\u07ac\u07ad\5\u0146\u00a4\2\u07ad\u07ae\7\30\2\2\u07ae\u0151",
    "\3\2\2\2\u07af\u07b0\7\25\2\2\u07b0\u07b1\5\u0146\u00a4\2\u07b1\u07b2",
    "\7\26\2\2\u07b2\u0153\3\2\2\2\u07b3\u07b4\b\u00ab\1\2\u07b4\u07b5\5",
    "\u015a\u00ae\2\u07b5\u07bb\3\2\2\2\u07b6\u07b7\f\3\2\2\u07b7\u07b8\7",
    "\24\2\2\u07b8\u07ba\5\u015a\u00ae\2\u07b9\u07b6\3\2\2\2\u07ba\u07bd",
    "\3\2\2\2\u07bb\u07b9\3\2\2\2\u07bb\u07bc\3\2\2\2\u07bc\u0155\3\2\2\2",
    "\u07bd\u07bb\3\2\2\2\u07be\u07bf\b\u00ac\1\2\u07bf\u07c0\5\u0154\u00ab",
    "\2\u07c0\u07c6\3\2\2\2\u07c1\u07c2\f\3\2\2\u07c2\u07c3\7\35\2\2\u07c3",
    "\u07c5\7\u008d\2\2\u07c4\u07c1\3\2\2\2\u07c5\u07c8\3\2\2\2\u07c6\u07c4",
    "\3\2\2\2\u07c6\u07c7\3\2\2\2\u07c7\u0157\3\2\2\2\u07c8\u07c6\3\2\2\2",
    "\u07c9\u07cf\7\u0090\2\2\u07ca\u07cf\7\u0092\2\2\u07cb\u07cf\7\u008f",
    "\2\2\u07cc\u07cf\7\u0088\2\2\u07cd\u07cf\7\u0089\2\2\u07ce\u07c9\3\2",
    "\2\2\u07ce\u07ca\3\2\2\2\u07ce\u07cb\3\2\2\2\u07ce\u07cc\3\2\2\2\u07ce",
    "\u07cd\3\2\2\2\u07cf\u0159\3\2\2\2\u07d0\u07d1\t\6\2\2\u07d1\u015b\3",
    "\2\2\2\u07d2\u07d3\7x\2\2\u07d3\u07d4\5\u015e\u00b0\2\u07d4\u07d5\7",
    "\21\2\2\u07d5\u07da\3\2\2\2\u07d6\u07d7\5\u015e\u00b0\2\u07d7\u07d8",
    "\7\21\2\2\u07d8\u07da\3\2\2\2\u07d9\u07d2\3\2\2\2\u07d9\u07d6\3\2\2",
    "\2\u07da\u015d\3\2\2\2\u07db\u07dc\b\u00b0\1\2\u07dc\u07dd\5\u0160\u00b1",
    "\2\u07dd\u07e2\3\2\2\2\u07de\u07df\f\3\2\2\u07df\u07e1\5\u0162\u00b2",
    "\2\u07e0\u07de\3\2\2\2\u07e1\u07e4\3\2\2\2\u07e2\u07e0\3\2\2\2\u07e2",
    "\u07e3\3\2\2\2\u07e3\u015f\3\2\2\2\u07e4\u07e2\3\2\2\2\u07e5\u07e9\5",
    "\u016a\u00b6\2\u07e6\u07e9\5\u016c\u00b7\2\u07e7\u07e9\5\u016e\u00b8",
    "\2\u07e8\u07e5\3\2\2\2\u07e8\u07e6\3\2\2\2\u07e8\u07e7\3\2\2\2\u07e9",
    "\u0161\3\2\2\2\u07ea\u07eb\7\24\2\2\u07eb\u07ee\5\u0164\u00b3\2\u07ec",
    "\u07ee\5\u0168\u00b5\2\u07ed\u07ea\3\2\2\2\u07ed\u07ec\3\2\2\2\u07ee",
    "\u0163\3\2\2\2\u07ef\u07f0\5\u0170\u00b9\2\u07f0\u07f2\7\25\2\2\u07f1",
    "\u07f3\5\u0166\u00b4\2\u07f2\u07f1\3\2\2\2\u07f2\u07f3\3\2\2\2\u07f3",
    "\u07f4\3\2\2\2\u07f4\u07f5\7\26\2\2\u07f5\u0165\3\2\2\2\u07f6\u07f7",
    "\b\u00b4\1\2\u07f7\u07f8\5\u015e\u00b0\2\u07f8\u07fe\3\2\2\2\u07f9\u07fa",
    "\f\3\2\2\u07fa\u07fb\7\22\2\2\u07fb\u07fd\5\u015e\u00b0\2\u07fc\u07f9",
    "\3\2\2\2\u07fd\u0800\3\2\2\2\u07fe\u07fc\3\2\2\2\u07fe\u07ff\3\2\2\2",
    "\u07ff\u0167\3\2\2\2\u0800\u07fe\3\2\2\2\u0801\u0802\7\27\2\2\u0802",
    "\u0803\5\u015e\u00b0\2\u0803\u0804\7\30\2\2\u0804\u0169\3\2\2\2\u0805",
    "\u0806\7\25\2\2\u0806\u0807\5\u015e\u00b0\2\u0807\u0808\7\26\2\2\u0808",
    "\u016b\3\2\2\2\u0809\u080a\b\u00b7\1\2\u080a\u080b\5\u0170\u00b9\2\u080b",
    "\u0811\3\2\2\2\u080c\u080d\f\3\2\2\u080d\u080e\7\24\2\2\u080e\u0810",
    "\5\u0170\u00b9\2\u080f\u080c\3\2\2\2\u0810\u0813\3\2\2\2\u0811\u080f",
    "\3\2\2\2\u0811\u0812\3\2\2\2\u0812\u016d\3\2\2\2\u0813\u0811\3\2\2\2",
    "\u0814\u081a\7\u0090\2\2\u0815\u081a\7\u0092\2\2\u0816\u081a\7\u008f",
    "\2\2\u0817\u081a\7\u0088\2\2\u0818\u081a\7\u0089\2\2\u0819\u0814\3\2",
    "\2\2\u0819\u0815\3\2\2\2\u0819\u0816\3\2\2\2\u0819\u0817\3\2\2\2\u0819",
    "\u0818\3\2\2\2\u081a\u016f\3\2\2\2\u081b\u081c\t\6\2\2\u081c\u0171\3",
    "\2\2\2\u00a1\u0179\u017e\u019e\u01a7\u01af\u01ba\u01c3\u01d3\u01dc\u01e3",
    "\u01ed\u01f2\u0205\u0238\u0252\u025f\u0261\u026c\u0271\u027b\u0280\u0291",
    "\u0296\u02a1\u02a6\u02aa\u02bb\u02bf\u02c2\u02e3\u02f6\u02fd\u031f\u0328",
    "\u033f\u034f\u0354\u035c\u0365\u037c\u0380\u039c\u03fc\u03fe\u0408\u041d",
    "\u042d\u0435\u043a\u043c\u0442\u0444\u0446\u0464\u046b\u046d\u0472\u0474",
    "\u047f\u0492\u049b\u04a1\u04a6\u04ad\u04b5\u04c3\u04cb\u04d1\u04dc\u04e8",
    "\u04f3\u0500\u0504\u050a\u0516\u052a\u052c\u0531\u053d\u0548\u0552\u0557",
    "\u055c\u056c\u0571\u0575\u057a\u0581\u058c\u058e\u059a\u05a1\u05ad\u05b1",
    "\u05bb\u05c3\u05c9\u05d0\u05d5\u05df\u05e5\u05f0\u05fd\u0601\u0604\u0608",
    "\u060b\u0616\u0622\u062e\u063f\u064e\u0658\u065f\u0669\u0670\u0674\u067a",
    "\u0686\u0691\u06a1\u06ae\u06b5\u06bd\u06d9\u06e2\u06e8\u06ed\u06f2\u06fe",
    "\u0711\u0719\u0720\u0729\u0730\u0738\u073d\u0747\u0751\u0761\u0770\u0778",
    "\u0783\u078c\u0792\u0797\u079c\u07a8\u07bb\u07c6\u07ce\u07d9\u07e2\u07e8",
    "\u07ed\u07f2\u07fe\u0811\u0819"].join("");
		

var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ 'null', 'null', 'null', 'null', 'null', 'null', "'\t'", 
                     "' '", "'Java:'", "'C#:'", "'Python2:'", "'Python3:'", 
                     "'JavaScript:'", "'Swift:'", "':'", "';'", "','", "'..'", 
                     "'.'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'?'", 
                     "'!'", "'$'", "'&'", "'&&'", "'|'", "'||'", "'+'", 
                     "'-'", "'*'", "'/'", "'\\'", "'%'", "'>'", "'>='", 
                     "'<'", "'<='", "'<>'", "'='", "'!='", "'=='", "'~='", 
                     "'~'", "'<-'", "'->'", "'Boolean'", "'Character'", 
                     "'Text'", "'Integer'", "'Decimal'", "'Date'", "'Time'", 
                     "'DateTime'", "'Period'", "'Method'", "'Code'", "'Document'", 
                     "'abstract'", "'all'", "'always'", "'and'", "'any'", 
                     "'as'", "'attr'", "'attribute'", "'attributes'", "'case'", 
                     "'catch'", "'category'", "'class'", "'close'", "'contains'", 
                     "'def'", "'default'", "'define'", "'do'", "'doing'", 
                     "'each'", "'else'", "'enum'", "'enumerated'", "'except'", 
                     "'execute'", "'extends'", "'fetch'", "'finally'", "'for'", 
                     "'from'", "'getter'", "'if'", "'in'", "'invoke'", "'is'", 
                     "'mappings'", "'matching'", "'method'", "'methods'", 
                     "'modulo'", "'native'", "'None'", "'not'", 'null', 
                     "'null'", "'on'", "'open'", "'operator'", "'or'", "'otherwise'", 
                     "'pass'", "'raise'", "'read'", "'receiving'", "'resource'", 
                     "'return'", "'returning'", "'self'", "'setter'", "'singleton'", 
                     "'sorted'", "'switch'", "'this'", "'throw'", "'to'", 
                     "'try'", "'with'", "'when'", "'where'", "'while'", 
                     "'write'", 'null', 'null', "'MIN_INTEGER'", "'MAX_INTEGER'" ];

var symbolicNames = [ 'null', "INDENT", "DEDENT", "LF_TAB", "LF_MORE", "LF", 
                      "TAB", "WS", "JAVA", "CSHARP", "PYTHON2", "PYTHON3", 
                      "JAVASCRIPT", "SWIFT", "COLON", "SEMI", "COMMA", "RANGE", 
                      "DOT", "LPAR", "RPAR", "LBRAK", "RBRAK", "LCURL", 
                      "RCURL", "QMARK", "XMARK", "DOLLAR", "AMP", "AMP2", 
                      "PIPE", "PIPE2", "PLUS", "MINUS", "STAR", "SLASH", 
                      "BSLASH", "PERCENT", "GT", "GTE", "LT", "LTE", "LTGT", 
                      "EQ", "XEQ", "EQ2", "TEQ", "TILDE", "LARROW", "RARROW", 
                      "BOOLEAN", "CHARACTER", "TEXT", "INTEGER", "DECIMAL", 
                      "DATE", "TIME", "DATETIME", "PERIOD", "METHOD_T", 
                      "CODE", "DOCUMENT", "ABSTRACT", "ALL", "ALWAYS", "AND", 
                      "ANY", "AS", "ATTR", "ATTRIBUTE", "ATTRIBUTES", "CASE", 
                      "CATCH", "CATEGORY", "CLASS", "CLOSE", "CONTAINS", 
                      "DEF", "DEFAULT", "DEFINE", "DO", "DOING", "EACH", 
                      "ELSE", "ENUM", "ENUMERATED", "EXCEPT", "EXECUTE", 
                      "EXTENDS", "FETCH", "FINALLY", "FOR", "FROM", "GETTER", 
                      "IF", "IN", "INVOKE", "IS", "MAPPINGS", "MATCHING", 
                      "METHOD", "METHODS", "MODULO", "NATIVE", "NONE", "NOT", 
                      "NOTHING", "NULL", "ON", "OPEN", "OPERATOR", "OR", 
                      "OTHERWISE", "PASS", "RAISE", "READ", "RECEIVING", 
                      "RESOURCE", "RETURN", "RETURNING", "SELF", "SETTER", 
                      "SINGLETON", "SORTED", "SWITCH", "THIS", "THROW", 
                      "TO", "TRY", "WITH", "WHEN", "WHERE", "WHILE", "WRITE", 
                      "BOOLEAN_LITERAL", "CHAR_LITERAL", "MIN_INTEGER", 
                      "MAX_INTEGER", "SYMBOL_IDENTIFIER", "TYPE_IDENTIFIER", 
                      "VARIABLE_IDENTIFIER", "TEXT_LITERAL", "INTEGER_LITERAL", 
                      "HEXA_LITERAL", "DECIMAL_LITERAL", "DATETIME_LITERAL", 
                      "TIME_LITERAL", "DATE_LITERAL", "PERIOD_LITERAL", 
                      "COMMENT" ];

var ruleNames =  [ "enum_category_declaration", "enum_native_declaration", 
                   "native_symbol", "category_symbol", "attribute_declaration", 
                   "concrete_category_declaration", "singleton_category_declaration", 
                   "derived_list", "member_method_declaration", "operator_method_declaration", 
                   "setter_method_declaration", "getter_method_declaration", 
                   "native_category_declaration", "native_resource_declaration", 
                   "native_category_mappings", "native_category_mapping_list", 
                   "attribute_list", "abstract_method_declaration", "concrete_method_declaration", 
                   "native_method_declaration", "full_argument_list", "typed_argument", 
                   "statement", "method_call_statement", "with_resource_statement", 
                   "with_singleton_statement", "switch_statement", "switch_case_statement", 
                   "for_each_statement", "do_while_statement", "while_statement", 
                   "if_statement", "else_if_statement_list", "raise_statement", 
                   "try_statement", "catch_statement", "return_statement", 
                   "expression", "unresolved_expression", "unresolved_selector", 
                   "invocation_expression", "invocation_trailer", "instance_expression", 
                   "instance_selector", "document_expression", "constructor_expression", 
                   "read_expression", "write_statement", "ambiguous_expression", 
                   "fetch_expression", "sorted_expression", "argument_assignment_list", 
                   "with_argument_assignment_list", "argument_assignment", 
                   "assign_instance_statement", "child_instance", "assign_tuple_statement", 
                   "lfs", "lfp", "indent", "dedent", "null_literal", "declaration_list", 
                   "declarations", "declaration", "resource_declaration", 
                   "enum_declaration", "native_symbol_list", "category_symbol_list", 
                   "symbol_list", "attribute_constraint", "list_literal", 
                   "set_literal", "expression_list", "range_literal", "typedef", 
                   "primary_type", "native_type", "category_type", "code_type", 
                   "document_type", "category_declaration", "type_identifier_list", 
                   "method_identifier", "identifier", "variable_identifier", 
                   "type_identifier", "symbol_identifier", "argument_list", 
                   "argument", "operator_argument", "named_argument", "code_argument", 
                   "category_or_any_type", "any_type", "category_method_declaration_list", 
                   "category_method_declaration", "native_category_mapping", 
                   "python_category_mapping", "python_module", "module_token", 
                   "javascript_category_mapping", "javascript_module", "variable_identifier_list", 
                   "method_declaration", "native_statement_list", "native_statement", 
                   "python_native_statement", "javascript_native_statement", 
                   "statement_list", "switch_case_statement_list", "catch_statement_list", 
                   "literal_collection", "atomic_literal", "literal_list_literal", 
                   "selectable_expression", "this_expression", "parenthesis_expression", 
                   "literal_expression", "collection_literal", "tuple_literal", 
                   "dict_literal", "expression_tuple", "dict_entry_list", 
                   "dict_entry", "slice_arguments", "assign_variable_statement", 
                   "assignable_instance", "is_expression", "operator", "key_token", 
                   "value_token", "symbols_token", "assign", "multiply", 
                   "divide", "idivide", "modulo", "javascript_statement", 
                   "javascript_expression", "javascript_primary_expression", 
                   "javascript_selector_expression", "javascript_method_expression", 
                   "javascript_arguments", "javascript_item_expression", 
                   "javascript_parenthesis_expression", "javascript_identifier_expression", 
                   "javascript_literal_expression", "javascript_identifier", 
                   "python_statement", "python_expression", "python_primary_expression", 
                   "python_selector_expression", "python_method_expression", 
                   "python_argument_list", "python_ordinal_argument_list", 
                   "python_named_argument_list", "python_parenthesis_expression", 
                   "python_identifier_expression", "python_literal_expression", 
                   "python_identifier", "java_statement", "java_expression", 
                   "java_primary_expression", "java_selector_expression", 
                   "java_method_expression", "java_arguments", "java_item_expression", 
                   "java_parenthesis_expression", "java_identifier_expression", 
                   "java_class_identifier_expression", "java_literal_expression", 
                   "java_identifier", "csharp_statement", "csharp_expression", 
                   "csharp_primary_expression", "csharp_selector_expression", 
                   "csharp_method_expression", "csharp_arguments", "csharp_item_expression", 
                   "csharp_parenthesis_expression", "csharp_identifier_expression", 
                   "csharp_literal_expression", "csharp_identifier" ];

function EParser (input) {
	AbstractParser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

EParser.prototype = Object.create(AbstractParser.prototype);
EParser.prototype.constructor = EParser;

Object.defineProperty(EParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

EParser.EOF = antlr4.Token.EOF;
EParser.INDENT = 1;
EParser.DEDENT = 2;
EParser.LF_TAB = 3;
EParser.LF_MORE = 4;
EParser.LF = 5;
EParser.TAB = 6;
EParser.WS = 7;
EParser.JAVA = 8;
EParser.CSHARP = 9;
EParser.PYTHON2 = 10;
EParser.PYTHON3 = 11;
EParser.JAVASCRIPT = 12;
EParser.SWIFT = 13;
EParser.COLON = 14;
EParser.SEMI = 15;
EParser.COMMA = 16;
EParser.RANGE = 17;
EParser.DOT = 18;
EParser.LPAR = 19;
EParser.RPAR = 20;
EParser.LBRAK = 21;
EParser.RBRAK = 22;
EParser.LCURL = 23;
EParser.RCURL = 24;
EParser.QMARK = 25;
EParser.XMARK = 26;
EParser.DOLLAR = 27;
EParser.AMP = 28;
EParser.AMP2 = 29;
EParser.PIPE = 30;
EParser.PIPE2 = 31;
EParser.PLUS = 32;
EParser.MINUS = 33;
EParser.STAR = 34;
EParser.SLASH = 35;
EParser.BSLASH = 36;
EParser.PERCENT = 37;
EParser.GT = 38;
EParser.GTE = 39;
EParser.LT = 40;
EParser.LTE = 41;
EParser.LTGT = 42;
EParser.EQ = 43;
EParser.XEQ = 44;
EParser.EQ2 = 45;
EParser.TEQ = 46;
EParser.TILDE = 47;
EParser.LARROW = 48;
EParser.RARROW = 49;
EParser.BOOLEAN = 50;
EParser.CHARACTER = 51;
EParser.TEXT = 52;
EParser.INTEGER = 53;
EParser.DECIMAL = 54;
EParser.DATE = 55;
EParser.TIME = 56;
EParser.DATETIME = 57;
EParser.PERIOD = 58;
EParser.METHOD_T = 59;
EParser.CODE = 60;
EParser.DOCUMENT = 61;
EParser.ABSTRACT = 62;
EParser.ALL = 63;
EParser.ALWAYS = 64;
EParser.AND = 65;
EParser.ANY = 66;
EParser.AS = 67;
EParser.ATTR = 68;
EParser.ATTRIBUTE = 69;
EParser.ATTRIBUTES = 70;
EParser.CASE = 71;
EParser.CATCH = 72;
EParser.CATEGORY = 73;
EParser.CLASS = 74;
EParser.CLOSE = 75;
EParser.CONTAINS = 76;
EParser.DEF = 77;
EParser.DEFAULT = 78;
EParser.DEFINE = 79;
EParser.DO = 80;
EParser.DOING = 81;
EParser.EACH = 82;
EParser.ELSE = 83;
EParser.ENUM = 84;
EParser.ENUMERATED = 85;
EParser.EXCEPT = 86;
EParser.EXECUTE = 87;
EParser.EXTENDS = 88;
EParser.FETCH = 89;
EParser.FINALLY = 90;
EParser.FOR = 91;
EParser.FROM = 92;
EParser.GETTER = 93;
EParser.IF = 94;
EParser.IN = 95;
EParser.INVOKE = 96;
EParser.IS = 97;
EParser.MAPPINGS = 98;
EParser.MATCHING = 99;
EParser.METHOD = 100;
EParser.METHODS = 101;
EParser.MODULO = 102;
EParser.NATIVE = 103;
EParser.NONE = 104;
EParser.NOT = 105;
EParser.NOTHING = 106;
EParser.NULL = 107;
EParser.ON = 108;
EParser.OPEN = 109;
EParser.OPERATOR = 110;
EParser.OR = 111;
EParser.OTHERWISE = 112;
EParser.PASS = 113;
EParser.RAISE = 114;
EParser.READ = 115;
EParser.RECEIVING = 116;
EParser.RESOURCE = 117;
EParser.RETURN = 118;
EParser.RETURNING = 119;
EParser.SELF = 120;
EParser.SETTER = 121;
EParser.SINGLETON = 122;
EParser.SORTED = 123;
EParser.SWITCH = 124;
EParser.THIS = 125;
EParser.THROW = 126;
EParser.TO = 127;
EParser.TRY = 128;
EParser.WITH = 129;
EParser.WHEN = 130;
EParser.WHERE = 131;
EParser.WHILE = 132;
EParser.WRITE = 133;
EParser.BOOLEAN_LITERAL = 134;
EParser.CHAR_LITERAL = 135;
EParser.MIN_INTEGER = 136;
EParser.MAX_INTEGER = 137;
EParser.SYMBOL_IDENTIFIER = 138;
EParser.TYPE_IDENTIFIER = 139;
EParser.VARIABLE_IDENTIFIER = 140;
EParser.TEXT_LITERAL = 141;
EParser.INTEGER_LITERAL = 142;
EParser.HEXA_LITERAL = 143;
EParser.DECIMAL_LITERAL = 144;
EParser.DATETIME_LITERAL = 145;
EParser.TIME_LITERAL = 146;
EParser.DATE_LITERAL = 147;
EParser.PERIOD_LITERAL = 148;
EParser.COMMENT = 149;

EParser.RULE_enum_category_declaration = 0;
EParser.RULE_enum_native_declaration = 1;
EParser.RULE_native_symbol = 2;
EParser.RULE_category_symbol = 3;
EParser.RULE_attribute_declaration = 4;
EParser.RULE_concrete_category_declaration = 5;
EParser.RULE_singleton_category_declaration = 6;
EParser.RULE_derived_list = 7;
EParser.RULE_member_method_declaration = 8;
EParser.RULE_operator_method_declaration = 9;
EParser.RULE_setter_method_declaration = 10;
EParser.RULE_getter_method_declaration = 11;
EParser.RULE_native_category_declaration = 12;
EParser.RULE_native_resource_declaration = 13;
EParser.RULE_native_category_mappings = 14;
EParser.RULE_native_category_mapping_list = 15;
EParser.RULE_attribute_list = 16;
EParser.RULE_abstract_method_declaration = 17;
EParser.RULE_concrete_method_declaration = 18;
EParser.RULE_native_method_declaration = 19;
EParser.RULE_full_argument_list = 20;
EParser.RULE_typed_argument = 21;
EParser.RULE_statement = 22;
EParser.RULE_method_call_statement = 23;
EParser.RULE_with_resource_statement = 24;
EParser.RULE_with_singleton_statement = 25;
EParser.RULE_switch_statement = 26;
EParser.RULE_switch_case_statement = 27;
EParser.RULE_for_each_statement = 28;
EParser.RULE_do_while_statement = 29;
EParser.RULE_while_statement = 30;
EParser.RULE_if_statement = 31;
EParser.RULE_else_if_statement_list = 32;
EParser.RULE_raise_statement = 33;
EParser.RULE_try_statement = 34;
EParser.RULE_catch_statement = 35;
EParser.RULE_return_statement = 36;
EParser.RULE_expression = 37;
EParser.RULE_unresolved_expression = 38;
EParser.RULE_unresolved_selector = 39;
EParser.RULE_invocation_expression = 40;
EParser.RULE_invocation_trailer = 41;
EParser.RULE_instance_expression = 42;
EParser.RULE_instance_selector = 43;
EParser.RULE_document_expression = 44;
EParser.RULE_constructor_expression = 45;
EParser.RULE_read_expression = 46;
EParser.RULE_write_statement = 47;
EParser.RULE_ambiguous_expression = 48;
EParser.RULE_fetch_expression = 49;
EParser.RULE_sorted_expression = 50;
EParser.RULE_argument_assignment_list = 51;
EParser.RULE_with_argument_assignment_list = 52;
EParser.RULE_argument_assignment = 53;
EParser.RULE_assign_instance_statement = 54;
EParser.RULE_child_instance = 55;
EParser.RULE_assign_tuple_statement = 56;
EParser.RULE_lfs = 57;
EParser.RULE_lfp = 58;
EParser.RULE_indent = 59;
EParser.RULE_dedent = 60;
EParser.RULE_null_literal = 61;
EParser.RULE_declaration_list = 62;
EParser.RULE_declarations = 63;
EParser.RULE_declaration = 64;
EParser.RULE_resource_declaration = 65;
EParser.RULE_enum_declaration = 66;
EParser.RULE_native_symbol_list = 67;
EParser.RULE_category_symbol_list = 68;
EParser.RULE_symbol_list = 69;
EParser.RULE_attribute_constraint = 70;
EParser.RULE_list_literal = 71;
EParser.RULE_set_literal = 72;
EParser.RULE_expression_list = 73;
EParser.RULE_range_literal = 74;
EParser.RULE_typedef = 75;
EParser.RULE_primary_type = 76;
EParser.RULE_native_type = 77;
EParser.RULE_category_type = 78;
EParser.RULE_code_type = 79;
EParser.RULE_document_type = 80;
EParser.RULE_category_declaration = 81;
EParser.RULE_type_identifier_list = 82;
EParser.RULE_method_identifier = 83;
EParser.RULE_identifier = 84;
EParser.RULE_variable_identifier = 85;
EParser.RULE_type_identifier = 86;
EParser.RULE_symbol_identifier = 87;
EParser.RULE_argument_list = 88;
EParser.RULE_argument = 89;
EParser.RULE_operator_argument = 90;
EParser.RULE_named_argument = 91;
EParser.RULE_code_argument = 92;
EParser.RULE_category_or_any_type = 93;
EParser.RULE_any_type = 94;
EParser.RULE_category_method_declaration_list = 95;
EParser.RULE_category_method_declaration = 96;
EParser.RULE_native_category_mapping = 97;
EParser.RULE_python_category_mapping = 98;
EParser.RULE_python_module = 99;
EParser.RULE_module_token = 100;
EParser.RULE_javascript_category_mapping = 101;
EParser.RULE_javascript_module = 102;
EParser.RULE_variable_identifier_list = 103;
EParser.RULE_method_declaration = 104;
EParser.RULE_native_statement_list = 105;
EParser.RULE_native_statement = 106;
EParser.RULE_python_native_statement = 107;
EParser.RULE_javascript_native_statement = 108;
EParser.RULE_statement_list = 109;
EParser.RULE_switch_case_statement_list = 110;
EParser.RULE_catch_statement_list = 111;
EParser.RULE_literal_collection = 112;
EParser.RULE_atomic_literal = 113;
EParser.RULE_literal_list_literal = 114;
EParser.RULE_selectable_expression = 115;
EParser.RULE_this_expression = 116;
EParser.RULE_parenthesis_expression = 117;
EParser.RULE_literal_expression = 118;
EParser.RULE_collection_literal = 119;
EParser.RULE_tuple_literal = 120;
EParser.RULE_dict_literal = 121;
EParser.RULE_expression_tuple = 122;
EParser.RULE_dict_entry_list = 123;
EParser.RULE_dict_entry = 124;
EParser.RULE_slice_arguments = 125;
EParser.RULE_assign_variable_statement = 126;
EParser.RULE_assignable_instance = 127;
EParser.RULE_is_expression = 128;
EParser.RULE_operator = 129;
EParser.RULE_key_token = 130;
EParser.RULE_value_token = 131;
EParser.RULE_symbols_token = 132;
EParser.RULE_assign = 133;
EParser.RULE_multiply = 134;
EParser.RULE_divide = 135;
EParser.RULE_idivide = 136;
EParser.RULE_modulo = 137;
EParser.RULE_javascript_statement = 138;
EParser.RULE_javascript_expression = 139;
EParser.RULE_javascript_primary_expression = 140;
EParser.RULE_javascript_selector_expression = 141;
EParser.RULE_javascript_method_expression = 142;
EParser.RULE_javascript_arguments = 143;
EParser.RULE_javascript_item_expression = 144;
EParser.RULE_javascript_parenthesis_expression = 145;
EParser.RULE_javascript_identifier_expression = 146;
EParser.RULE_javascript_literal_expression = 147;
EParser.RULE_javascript_identifier = 148;
EParser.RULE_python_statement = 149;
EParser.RULE_python_expression = 150;
EParser.RULE_python_primary_expression = 151;
EParser.RULE_python_selector_expression = 152;
EParser.RULE_python_method_expression = 153;
EParser.RULE_python_argument_list = 154;
EParser.RULE_python_ordinal_argument_list = 155;
EParser.RULE_python_named_argument_list = 156;
EParser.RULE_python_parenthesis_expression = 157;
EParser.RULE_python_identifier_expression = 158;
EParser.RULE_python_literal_expression = 159;
EParser.RULE_python_identifier = 160;
EParser.RULE_java_statement = 161;
EParser.RULE_java_expression = 162;
EParser.RULE_java_primary_expression = 163;
EParser.RULE_java_selector_expression = 164;
EParser.RULE_java_method_expression = 165;
EParser.RULE_java_arguments = 166;
EParser.RULE_java_item_expression = 167;
EParser.RULE_java_parenthesis_expression = 168;
EParser.RULE_java_identifier_expression = 169;
EParser.RULE_java_class_identifier_expression = 170;
EParser.RULE_java_literal_expression = 171;
EParser.RULE_java_identifier = 172;
EParser.RULE_csharp_statement = 173;
EParser.RULE_csharp_expression = 174;
EParser.RULE_csharp_primary_expression = 175;
EParser.RULE_csharp_selector_expression = 176;
EParser.RULE_csharp_method_expression = 177;
EParser.RULE_csharp_arguments = 178;
EParser.RULE_csharp_item_expression = 179;
EParser.RULE_csharp_parenthesis_expression = 180;
EParser.RULE_csharp_identifier_expression = 181;
EParser.RULE_csharp_literal_expression = 182;
EParser.RULE_csharp_identifier = 183;

function Enum_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_enum_category_declaration;
    this.name = null; // Type_identifierContext
    this.derived = null; // Type_identifierContext
    this.attrs = null; // Attribute_listContext
    this.symbols = null; // Category_symbol_listContext
    return this;
}

Enum_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_category_declarationContext.prototype.constructor = Enum_category_declarationContext;

Enum_category_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Enum_category_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Enum_category_declarationContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


Enum_category_declarationContext.prototype.ENUMERATED = function() {
    return this.getToken(EParser.ENUMERATED, 0);
};

Enum_category_declarationContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

Enum_category_declarationContext.prototype.symbols_token = function() {
    return this.getTypedRuleContext(Symbols_tokenContext,0);
};

Enum_category_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Enum_category_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Enum_category_declarationContext.prototype.type_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_identifierContext);
    } else {
        return this.getTypedRuleContext(Type_identifierContext,i);
    }
};

Enum_category_declarationContext.prototype.category_symbol_list = function() {
    return this.getTypedRuleContext(Category_symbol_listContext,0);
};

Enum_category_declarationContext.prototype.CATEGORY = function() {
    return this.getToken(EParser.CATEGORY, 0);
};

Enum_category_declarationContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

Enum_category_declarationContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Enum_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterEnum_category_declaration(this);
	}
};

Enum_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitEnum_category_declaration(this);
	}
};




EParser.prototype.enum_category_declaration = function() {

    var localctx = new Enum_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, EParser.RULE_enum_category_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 368;
        this.match(EParser.DEFINE);
        this.state = 369; 
        localctx.name = this.type_identifier();
        this.state = 370;
        this.match(EParser.AS);
        this.state = 371;
        this.match(EParser.COLON);
        this.state = 372;
        this.match(EParser.ENUMERATED);
        this.state = 375;
        switch(this._input.LA(1)) {
        case EParser.CATEGORY:
            this.state = 373;
            this.match(EParser.CATEGORY);
            break;
        case EParser.TYPE_IDENTIFIER:
            this.state = 374; 
            localctx.derived = this.type_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 380;
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        if(la_===1) {
            this.state = 377; 
            localctx.attrs = this.attribute_list();
            this.state = 378;
            this.match(EParser.COMMA);

        }
        this.state = 382;
        this.match(EParser.WITH);
        this.state = 383; 
        this.symbols_token();
        this.state = 384;
        this.match(EParser.COLON);
        this.state = 385; 
        this.indent();
        this.state = 386; 
        localctx.symbols = this.category_symbol_list(0);
        this.state = 387; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enum_native_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_enum_native_declaration;
    this.name = null; // Type_identifierContext
    this.typ = null; // Native_typeContext
    this.symbols = null; // Native_symbol_listContext
    return this;
}

Enum_native_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_native_declarationContext.prototype.constructor = Enum_native_declarationContext;

Enum_native_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Enum_native_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Enum_native_declarationContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


Enum_native_declarationContext.prototype.ENUMERATED = function() {
    return this.getToken(EParser.ENUMERATED, 0);
};

Enum_native_declarationContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

Enum_native_declarationContext.prototype.symbols_token = function() {
    return this.getTypedRuleContext(Symbols_tokenContext,0);
};

Enum_native_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Enum_native_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Enum_native_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Enum_native_declarationContext.prototype.native_type = function() {
    return this.getTypedRuleContext(Native_typeContext,0);
};

Enum_native_declarationContext.prototype.native_symbol_list = function() {
    return this.getTypedRuleContext(Native_symbol_listContext,0);
};

Enum_native_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterEnum_native_declaration(this);
	}
};

Enum_native_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitEnum_native_declaration(this);
	}
};




EParser.prototype.enum_native_declaration = function() {

    var localctx = new Enum_native_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, EParser.RULE_enum_native_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 389;
        this.match(EParser.DEFINE);
        this.state = 390; 
        localctx.name = this.type_identifier();
        this.state = 391;
        this.match(EParser.AS);
        this.state = 392;
        this.match(EParser.COLON);
        this.state = 393;
        this.match(EParser.ENUMERATED);
        this.state = 394; 
        localctx.typ = this.native_type();
        this.state = 395;
        this.match(EParser.WITH);
        this.state = 396; 
        this.symbols_token();
        this.state = 397;
        this.match(EParser.COLON);
        this.state = 398; 
        this.indent();
        this.state = 399; 
        localctx.symbols = this.native_symbol_list(0);
        this.state = 400; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_symbolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_symbol;
    this.name = null; // Symbol_identifierContext
    this.exp = null; // ExpressionContext
    return this;
}

Native_symbolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_symbolContext.prototype.constructor = Native_symbolContext;

Native_symbolContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

Native_symbolContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Native_symbolContext.prototype.value_token = function() {
    return this.getTypedRuleContext(Value_tokenContext,0);
};

Native_symbolContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};

Native_symbolContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Native_symbolContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNative_symbol(this);
	}
};

Native_symbolContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNative_symbol(this);
	}
};




EParser.prototype.native_symbol = function() {

    var localctx = new Native_symbolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, EParser.RULE_native_symbol);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 402; 
        localctx.name = this.symbol_identifier();
        this.state = 403;
        this.match(EParser.WITH);
        this.state = 404; 
        localctx.exp = this.expression(0);
        this.state = 405;
        this.match(EParser.AS);
        this.state = 406; 
        this.value_token();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_symbolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_category_symbol;
    this.name = null; // Symbol_identifierContext
    this.args = null; // With_argument_assignment_listContext
    this.arg = null; // Argument_assignmentContext
    return this;
}

Category_symbolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_symbolContext.prototype.constructor = Category_symbolContext;

Category_symbolContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};

Category_symbolContext.prototype.with_argument_assignment_list = function() {
    return this.getTypedRuleContext(With_argument_assignment_listContext,0);
};

Category_symbolContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

Category_symbolContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};

Category_symbolContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCategory_symbol(this);
	}
};

Category_symbolContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCategory_symbol(this);
	}
};




EParser.prototype.category_symbol = function() {

    var localctx = new Category_symbolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, EParser.RULE_category_symbol);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 408; 
        localctx.name = this.symbol_identifier();
        this.state = 409; 
        localctx.args = this.with_argument_assignment_list(0);
        this.state = 412;
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        if(la_===1) {
            this.state = 410;
            this.match(EParser.AND);
            this.state = 411; 
            localctx.arg = this.argument_assignment();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_attribute_declaration;
    this.name = null; // Variable_identifierContext
    this.typ = null; // TypedefContext
    this.match = null; // Attribute_constraintContext
    return this;
}

Attribute_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_declarationContext.prototype.constructor = Attribute_declarationContext;

Attribute_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Attribute_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Attribute_declarationContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Attribute_declarationContext.prototype.ATTRIBUTE = function() {
    return this.getToken(EParser.ATTRIBUTE, 0);
};

Attribute_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Attribute_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Attribute_declarationContext.prototype.attribute_constraint = function() {
    return this.getTypedRuleContext(Attribute_constraintContext,0);
};

Attribute_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAttribute_declaration(this);
	}
};

Attribute_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAttribute_declaration(this);
	}
};




EParser.prototype.attribute_declaration = function() {

    var localctx = new Attribute_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, EParser.RULE_attribute_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 414;
        this.match(EParser.DEFINE);
        this.state = 415; 
        localctx.name = this.variable_identifier();
        this.state = 416;
        this.match(EParser.AS);
        this.state = 417;
        this.match(EParser.COLON);
        this.state = 418; 
        localctx.typ = this.typedef(0);
        this.state = 419;
        this.match(EParser.ATTRIBUTE);
        this.state = 421;
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        if(la_===1) {
            this.state = 420; 
            localctx.match = this.attribute_constraint();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Concrete_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_concrete_category_declaration;
    this.name = null; // Type_identifierContext
    this.derived = null; // Derived_listContext
    this.attrs = null; // Attribute_listContext
    this.methods = null; // Category_method_declaration_listContext
    return this;
}

Concrete_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concrete_category_declarationContext.prototype.constructor = Concrete_category_declarationContext;

Concrete_category_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Concrete_category_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Concrete_category_declarationContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


Concrete_category_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Concrete_category_declarationContext.prototype.CATEGORY = function() {
    return this.getToken(EParser.CATEGORY, 0);
};

Concrete_category_declarationContext.prototype.derived_list = function() {
    return this.getTypedRuleContext(Derived_listContext,0);
};

Concrete_category_declarationContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

Concrete_category_declarationContext.prototype.METHODS = function() {
    return this.getToken(EParser.METHODS, 0);
};

Concrete_category_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Concrete_category_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Concrete_category_declarationContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Concrete_category_declarationContext.prototype.category_method_declaration_list = function() {
    return this.getTypedRuleContext(Category_method_declaration_listContext,0);
};

Concrete_category_declarationContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

Concrete_category_declarationContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

Concrete_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterConcrete_category_declaration(this);
	}
};

Concrete_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitConcrete_category_declaration(this);
	}
};




EParser.prototype.concrete_category_declaration = function() {

    var localctx = new Concrete_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, EParser.RULE_concrete_category_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 423;
        this.match(EParser.DEFINE);
        this.state = 424; 
        localctx.name = this.type_identifier();
        this.state = 425;
        this.match(EParser.AS);
        this.state = 426;
        this.match(EParser.COLON);
        this.state = 429;
        switch(this._input.LA(1)) {
        case EParser.CATEGORY:
            this.state = 427;
            this.match(EParser.CATEGORY);
            break;
        case EParser.TYPE_IDENTIFIER:
            this.state = 428; 
            localctx.derived = this.derived_list();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 449;
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        if(la_===1) {
            this.state = 431; 
            localctx.attrs = this.attribute_list();
            this.state = 440;
            var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
            if(la_===1) {
                this.state = 432;
                this.match(EParser.COMMA);
                this.state = 433;
                this.match(EParser.AND);
                this.state = 434;
                this.match(EParser.METHODS);
                this.state = 435;
                this.match(EParser.COLON);
                this.state = 436; 
                this.indent();
                this.state = 437; 
                localctx.methods = this.category_method_declaration_list(0);
                this.state = 438; 
                this.dedent();

            }

        } else if(la_===2) {
            this.state = 442;
            this.match(EParser.WITH);
            this.state = 443;
            this.match(EParser.METHODS);
            this.state = 444;
            this.match(EParser.COLON);
            this.state = 445; 
            this.indent();
            this.state = 446; 
            localctx.methods = this.category_method_declaration_list(0);
            this.state = 447; 
            this.dedent();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Singleton_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_singleton_category_declaration;
    this.name = null; // Type_identifierContext
    this.attrs = null; // Attribute_listContext
    this.methods = null; // Category_method_declaration_listContext
    return this;
}

Singleton_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Singleton_category_declarationContext.prototype.constructor = Singleton_category_declarationContext;

Singleton_category_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Singleton_category_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Singleton_category_declarationContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


Singleton_category_declarationContext.prototype.SINGLETON = function() {
    return this.getToken(EParser.SINGLETON, 0);
};

Singleton_category_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Singleton_category_declarationContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

Singleton_category_declarationContext.prototype.METHODS = function() {
    return this.getToken(EParser.METHODS, 0);
};

Singleton_category_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Singleton_category_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Singleton_category_declarationContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Singleton_category_declarationContext.prototype.category_method_declaration_list = function() {
    return this.getTypedRuleContext(Category_method_declaration_listContext,0);
};

Singleton_category_declarationContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

Singleton_category_declarationContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

Singleton_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSingleton_category_declaration(this);
	}
};

Singleton_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSingleton_category_declaration(this);
	}
};




EParser.prototype.singleton_category_declaration = function() {

    var localctx = new Singleton_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, EParser.RULE_singleton_category_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 451;
        this.match(EParser.DEFINE);
        this.state = 452; 
        localctx.name = this.type_identifier();
        this.state = 453;
        this.match(EParser.AS);
        this.state = 454;
        this.match(EParser.COLON);
        this.state = 455;
        this.match(EParser.SINGLETON);
        this.state = 474;
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        if(la_===1) {
            this.state = 456; 
            localctx.attrs = this.attribute_list();
            this.state = 465;
            var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
            if(la_===1) {
                this.state = 457;
                this.match(EParser.COMMA);
                this.state = 458;
                this.match(EParser.AND);
                this.state = 459;
                this.match(EParser.METHODS);
                this.state = 460;
                this.match(EParser.COLON);
                this.state = 461; 
                this.indent();
                this.state = 462; 
                localctx.methods = this.category_method_declaration_list(0);
                this.state = 463; 
                this.dedent();

            }

        } else if(la_===2) {
            this.state = 467;
            this.match(EParser.WITH);
            this.state = 468;
            this.match(EParser.METHODS);
            this.state = 469;
            this.match(EParser.COLON);
            this.state = 470; 
            this.indent();
            this.state = 471; 
            localctx.methods = this.category_method_declaration_list(0);
            this.state = 472; 
            this.dedent();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Derived_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_derived_list;
    return this;
}

Derived_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Derived_listContext.prototype.constructor = Derived_listContext;


 
Derived_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DerivedListContext(parser, ctx) {
	Derived_listContext.call(this, parser);
    this.items = null; // Type_identifier_listContext;
    Derived_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DerivedListContext.prototype = Object.create(Derived_listContext.prototype);
DerivedListContext.prototype.constructor = DerivedListContext;

DerivedListContext.prototype.type_identifier_list = function() {
    return this.getTypedRuleContext(Type_identifier_listContext,0);
};
DerivedListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDerivedList(this);
	}
};

DerivedListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDerivedList(this);
	}
};


function DerivedListItemContext(parser, ctx) {
	Derived_listContext.call(this, parser);
    this.items = null; // Type_identifier_listContext;
    this.item = null; // Type_identifierContext;
    Derived_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DerivedListItemContext.prototype = Object.create(Derived_listContext.prototype);
DerivedListItemContext.prototype.constructor = DerivedListItemContext;

DerivedListItemContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

DerivedListItemContext.prototype.type_identifier_list = function() {
    return this.getTypedRuleContext(Type_identifier_listContext,0);
};

DerivedListItemContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};
DerivedListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDerivedListItem(this);
	}
};

DerivedListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDerivedListItem(this);
	}
};



EParser.prototype.derived_list = function() {

    var localctx = new Derived_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, EParser.RULE_derived_list);
    try {
        this.state = 481;
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        switch(la_) {
        case 1:
            localctx = new DerivedListContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 476; 
            localctx.items = this.type_identifier_list(0);
            break;

        case 2:
            localctx = new DerivedListItemContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 477; 
            localctx.items = this.type_identifier_list(0);
            this.state = 478;
            this.match(EParser.AND);
            this.state = 479; 
            localctx.item = this.type_identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Member_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_member_method_declaration;
    this.name = null; // Method_identifierContext
    this.args = null; // Full_argument_listContext
    this.typ = null; // TypedefContext
    this.stmts = null; // Statement_listContext
    return this;
}

Member_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Member_method_declarationContext.prototype.constructor = Member_method_declarationContext;

Member_method_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Member_method_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Member_method_declarationContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


Member_method_declarationContext.prototype.METHOD = function() {
    return this.getToken(EParser.METHOD, 0);
};

Member_method_declarationContext.prototype.DOING = function() {
    return this.getToken(EParser.DOING, 0);
};

Member_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Member_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Member_method_declarationContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};

Member_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Member_method_declarationContext.prototype.RECEIVING = function() {
    return this.getToken(EParser.RECEIVING, 0);
};

Member_method_declarationContext.prototype.RETURNING = function() {
    return this.getToken(EParser.RETURNING, 0);
};

Member_method_declarationContext.prototype.full_argument_list = function() {
    return this.getTypedRuleContext(Full_argument_listContext,0);
};

Member_method_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Member_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMember_method_declaration(this);
	}
};

Member_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMember_method_declaration(this);
	}
};




EParser.prototype.member_method_declaration = function() {

    var localctx = new Member_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, EParser.RULE_member_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 483;
        this.match(EParser.DEFINE);
        this.state = 484; 
        localctx.name = this.method_identifier();
        this.state = 485;
        this.match(EParser.AS);
        this.state = 486;
        this.match(EParser.COLON);
        this.state = 487;
        this.match(EParser.METHOD);
        this.state = 491;
        _la = this._input.LA(1);
        if(_la===EParser.RECEIVING) {
            this.state = 488;
            this.match(EParser.RECEIVING);
            this.state = 489;
            this.match(EParser.COLON);
            this.state = 490; 
            localctx.args = this.full_argument_list();
        }

        this.state = 496;
        _la = this._input.LA(1);
        if(_la===EParser.RETURNING) {
            this.state = 493;
            this.match(EParser.RETURNING);
            this.state = 494;
            this.match(EParser.COLON);
            this.state = 495; 
            localctx.typ = this.typedef(0);
        }

        this.state = 498;
        this.match(EParser.DOING);
        this.state = 499;
        this.match(EParser.COLON);
        this.state = 500; 
        this.indent();
        this.state = 501; 
        localctx.stmts = this.statement_list(0);
        this.state = 502; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Operator_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_operator_method_declaration;
    this.op = null; // OperatorContext
    this.arg = null; // Operator_argumentContext
    this.typ = null; // TypedefContext
    this.stmts = null; // Statement_listContext
    return this;
}

Operator_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operator_method_declarationContext.prototype.constructor = Operator_method_declarationContext;

Operator_method_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Operator_method_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Operator_method_declarationContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


Operator_method_declarationContext.prototype.OPERATOR = function() {
    return this.getToken(EParser.OPERATOR, 0);
};

Operator_method_declarationContext.prototype.RECEIVING = function() {
    return this.getToken(EParser.RECEIVING, 0);
};

Operator_method_declarationContext.prototype.DOING = function() {
    return this.getToken(EParser.DOING, 0);
};

Operator_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Operator_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Operator_method_declarationContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Operator_method_declarationContext.prototype.operator_argument = function() {
    return this.getTypedRuleContext(Operator_argumentContext,0);
};

Operator_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Operator_method_declarationContext.prototype.RETURNING = function() {
    return this.getToken(EParser.RETURNING, 0);
};

Operator_method_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Operator_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOperator_method_declaration(this);
	}
};

Operator_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOperator_method_declaration(this);
	}
};




EParser.prototype.operator_method_declaration = function() {

    var localctx = new Operator_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, EParser.RULE_operator_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 504;
        this.match(EParser.DEFINE);
        this.state = 505; 
        localctx.op = this.operator();
        this.state = 506;
        this.match(EParser.AS);
        this.state = 507;
        this.match(EParser.COLON);
        this.state = 508;
        this.match(EParser.OPERATOR);
        this.state = 509;
        this.match(EParser.RECEIVING);
        this.state = 510;
        this.match(EParser.COLON);
        this.state = 511; 
        localctx.arg = this.operator_argument();
        this.state = 515;
        _la = this._input.LA(1);
        if(_la===EParser.RETURNING) {
            this.state = 512;
            this.match(EParser.RETURNING);
            this.state = 513;
            this.match(EParser.COLON);
            this.state = 514; 
            localctx.typ = this.typedef(0);
        }

        this.state = 517;
        this.match(EParser.DOING);
        this.state = 518;
        this.match(EParser.COLON);
        this.state = 519; 
        this.indent();
        this.state = 520; 
        localctx.stmts = this.statement_list(0);
        this.state = 521; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Setter_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_setter_method_declaration;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Statement_listContext
    return this;
}

Setter_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Setter_method_declarationContext.prototype.constructor = Setter_method_declarationContext;

Setter_method_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Setter_method_declarationContext.prototype.SETTER = function() {
    return this.getToken(EParser.SETTER, 0);
};

Setter_method_declarationContext.prototype.DOING = function() {
    return this.getToken(EParser.DOING, 0);
};

Setter_method_declarationContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Setter_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Setter_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Setter_method_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Setter_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Setter_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSetter_method_declaration(this);
	}
};

Setter_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSetter_method_declaration(this);
	}
};




EParser.prototype.setter_method_declaration = function() {

    var localctx = new Setter_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, EParser.RULE_setter_method_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 523;
        this.match(EParser.DEFINE);
        this.state = 524; 
        localctx.name = this.variable_identifier();
        this.state = 525;
        this.match(EParser.SETTER);
        this.state = 526;
        this.match(EParser.DOING);
        this.state = 527;
        this.match(EParser.COLON);
        this.state = 528; 
        this.indent();
        this.state = 529; 
        localctx.stmts = this.statement_list(0);
        this.state = 530; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Getter_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_getter_method_declaration;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Statement_listContext
    return this;
}

Getter_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Getter_method_declarationContext.prototype.constructor = Getter_method_declarationContext;

Getter_method_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Getter_method_declarationContext.prototype.GETTER = function() {
    return this.getToken(EParser.GETTER, 0);
};

Getter_method_declarationContext.prototype.DOING = function() {
    return this.getToken(EParser.DOING, 0);
};

Getter_method_declarationContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Getter_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Getter_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Getter_method_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Getter_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Getter_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterGetter_method_declaration(this);
	}
};

Getter_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitGetter_method_declaration(this);
	}
};




EParser.prototype.getter_method_declaration = function() {

    var localctx = new Getter_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, EParser.RULE_getter_method_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 532;
        this.match(EParser.DEFINE);
        this.state = 533; 
        localctx.name = this.variable_identifier();
        this.state = 534;
        this.match(EParser.GETTER);
        this.state = 535;
        this.match(EParser.DOING);
        this.state = 536;
        this.match(EParser.COLON);
        this.state = 537; 
        this.indent();
        this.state = 538; 
        localctx.stmts = this.statement_list(0);
        this.state = 539; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_category_declaration;
    this.name = null; // Type_identifierContext
    this.attrs = null; // Attribute_listContext
    this.mappings = null; // Native_category_mappingsContext
    return this;
}

Native_category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_declarationContext.prototype.constructor = Native_category_declarationContext;

Native_category_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Native_category_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Native_category_declarationContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


Native_category_declarationContext.prototype.NATIVE = function() {
    return this.getToken(EParser.NATIVE, 0);
};

Native_category_declarationContext.prototype.CATEGORY = function() {
    return this.getToken(EParser.CATEGORY, 0);
};

Native_category_declarationContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

Native_category_declarationContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

Native_category_declarationContext.prototype.MAPPINGS = function() {
    return this.getToken(EParser.MAPPINGS, 0);
};

Native_category_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Native_category_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Native_category_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Native_category_declarationContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Native_category_declarationContext.prototype.native_category_mappings = function() {
    return this.getTypedRuleContext(Native_category_mappingsContext,0);
};

Native_category_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNative_category_declaration(this);
	}
};

Native_category_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNative_category_declaration(this);
	}
};




EParser.prototype.native_category_declaration = function() {

    var localctx = new Native_category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, EParser.RULE_native_category_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 541;
        this.match(EParser.DEFINE);
        this.state = 542; 
        localctx.name = this.type_identifier();
        this.state = 543;
        this.match(EParser.AS);
        this.state = 544;
        this.match(EParser.COLON);
        this.state = 545;
        this.match(EParser.NATIVE);
        this.state = 546;
        this.match(EParser.CATEGORY);
        this.state = 547; 
        localctx.attrs = this.attribute_list();
        this.state = 548;
        this.match(EParser.COMMA);
        this.state = 549;
        this.match(EParser.AND);
        this.state = 550;
        this.match(EParser.MAPPINGS);
        this.state = 551;
        this.match(EParser.COLON);
        this.state = 552; 
        this.indent();
        this.state = 553; 
        localctx.mappings = this.native_category_mappings();
        this.state = 554; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_resource_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_resource_declaration;
    this.name = null; // Type_identifierContext
    this.attrs = null; // Attribute_listContext
    this.mappings = null; // Native_category_mappingsContext
    return this;
}

Native_resource_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_resource_declarationContext.prototype.constructor = Native_resource_declarationContext;

Native_resource_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Native_resource_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Native_resource_declarationContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


Native_resource_declarationContext.prototype.NATIVE = function() {
    return this.getToken(EParser.NATIVE, 0);
};

Native_resource_declarationContext.prototype.RESOURCE = function() {
    return this.getToken(EParser.RESOURCE, 0);
};

Native_resource_declarationContext.prototype.MAPPINGS = function() {
    return this.getToken(EParser.MAPPINGS, 0);
};

Native_resource_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Native_resource_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Native_resource_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Native_resource_declarationContext.prototype.native_category_mappings = function() {
    return this.getTypedRuleContext(Native_category_mappingsContext,0);
};

Native_resource_declarationContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

Native_resource_declarationContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

Native_resource_declarationContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Native_resource_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNative_resource_declaration(this);
	}
};

Native_resource_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNative_resource_declaration(this);
	}
};




EParser.prototype.native_resource_declaration = function() {

    var localctx = new Native_resource_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, EParser.RULE_native_resource_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 556;
        this.match(EParser.DEFINE);
        this.state = 557; 
        localctx.name = this.type_identifier();
        this.state = 558;
        this.match(EParser.AS);
        this.state = 559;
        this.match(EParser.COLON);
        this.state = 560;
        this.match(EParser.NATIVE);
        this.state = 561;
        this.match(EParser.RESOURCE);
        this.state = 566;
        _la = this._input.LA(1);
        if(_la===EParser.WITH) {
            this.state = 562; 
            localctx.attrs = this.attribute_list();
            this.state = 563;
            this.match(EParser.COMMA);
            this.state = 564;
            this.match(EParser.AND);
        }

        this.state = 568;
        this.match(EParser.MAPPINGS);
        this.state = 569;
        this.match(EParser.COLON);
        this.state = 570; 
        this.indent();
        this.state = 571; 
        localctx.mappings = this.native_category_mappings();
        this.state = 572; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_mappingsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_category_mappings;
    this.items = null; // Native_category_mapping_listContext
    return this;
}

Native_category_mappingsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_mappingsContext.prototype.constructor = Native_category_mappingsContext;

Native_category_mappingsContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Native_category_mappingsContext.prototype.CATEGORY = function() {
    return this.getToken(EParser.CATEGORY, 0);
};

Native_category_mappingsContext.prototype.MAPPINGS = function() {
    return this.getToken(EParser.MAPPINGS, 0);
};

Native_category_mappingsContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Native_category_mappingsContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Native_category_mappingsContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Native_category_mappingsContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Native_category_mappingsContext.prototype.native_category_mapping_list = function() {
    return this.getTypedRuleContext(Native_category_mapping_listContext,0);
};

Native_category_mappingsContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNative_category_mappings(this);
	}
};

Native_category_mappingsContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNative_category_mappings(this);
	}
};




EParser.prototype.native_category_mappings = function() {

    var localctx = new Native_category_mappingsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, EParser.RULE_native_category_mappings);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 574;
        this.match(EParser.DEFINE);
        this.state = 575;
        this.match(EParser.CATEGORY);
        this.state = 576;
        this.match(EParser.MAPPINGS);
        this.state = 577;
        this.match(EParser.AS);
        this.state = 578;
        this.match(EParser.COLON);
        this.state = 579; 
        this.indent();
        this.state = 580; 
        localctx.items = this.native_category_mapping_list(0);
        this.state = 581; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_mapping_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_category_mapping_list;
    return this;
}

Native_category_mapping_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_mapping_listContext.prototype.constructor = Native_category_mapping_listContext;


 
Native_category_mapping_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function NativeCategoryMappingListContext(parser, ctx) {
	Native_category_mapping_listContext.call(this, parser);
    this.item = null; // Native_category_mappingContext;
    Native_category_mapping_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeCategoryMappingListContext.prototype = Object.create(Native_category_mapping_listContext.prototype);
NativeCategoryMappingListContext.prototype.constructor = NativeCategoryMappingListContext;

NativeCategoryMappingListContext.prototype.native_category_mapping = function() {
    return this.getTypedRuleContext(Native_category_mappingContext,0);
};
NativeCategoryMappingListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNativeCategoryMappingList(this);
	}
};

NativeCategoryMappingListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNativeCategoryMappingList(this);
	}
};


function NativeCategoryMappingListItemContext(parser, ctx) {
	Native_category_mapping_listContext.call(this, parser);
    this.items = null; // Native_category_mapping_listContext;
    this.item = null; // Native_category_mappingContext;
    Native_category_mapping_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeCategoryMappingListItemContext.prototype = Object.create(Native_category_mapping_listContext.prototype);
NativeCategoryMappingListItemContext.prototype.constructor = NativeCategoryMappingListItemContext;

NativeCategoryMappingListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

NativeCategoryMappingListItemContext.prototype.native_category_mapping_list = function() {
    return this.getTypedRuleContext(Native_category_mapping_listContext,0);
};

NativeCategoryMappingListItemContext.prototype.native_category_mapping = function() {
    return this.getTypedRuleContext(Native_category_mappingContext,0);
};
NativeCategoryMappingListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNativeCategoryMappingListItem(this);
	}
};

NativeCategoryMappingListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNativeCategoryMappingListItem(this);
	}
};



EParser.prototype.native_category_mapping_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Native_category_mapping_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 30;
    this.enterRecursionRule(localctx, 30, EParser.RULE_native_category_mapping_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new NativeCategoryMappingListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 584; 
        localctx.item = this.native_category_mapping();
        this._ctx.stop = this._input.LT(-1);
        this.state = 592;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new NativeCategoryMappingListItemContext(this, new Native_category_mapping_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_native_category_mapping_list);
                this.state = 586;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 587; 
                this.lfp();
                this.state = 588; 
                localctx.item = this.native_category_mapping(); 
            }
            this.state = 594;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Attribute_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_attribute_list;
    return this;
}

Attribute_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_listContext.prototype.constructor = Attribute_listContext;


 
Attribute_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AttributeListItemContext(parser, ctx) {
	Attribute_listContext.call(this, parser);
    this.items = null; // Variable_identifier_listContext;
    this.item = null; // Variable_identifierContext;
    Attribute_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AttributeListItemContext.prototype = Object.create(Attribute_listContext.prototype);
AttributeListItemContext.prototype.constructor = AttributeListItemContext;

AttributeListItemContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

AttributeListItemContext.prototype.ATTRIBUTES = function() {
    return this.getToken(EParser.ATTRIBUTES, 0);
};

AttributeListItemContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

AttributeListItemContext.prototype.variable_identifier_list = function() {
    return this.getTypedRuleContext(Variable_identifier_listContext,0);
};

AttributeListItemContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

AttributeListItemContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
AttributeListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAttributeListItem(this);
	}
};

AttributeListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAttributeListItem(this);
	}
};


function AttributeListContext(parser, ctx) {
	Attribute_listContext.call(this, parser);
    this.item = null; // Variable_identifierContext;
    Attribute_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AttributeListContext.prototype = Object.create(Attribute_listContext.prototype);
AttributeListContext.prototype.constructor = AttributeListContext;

AttributeListContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

AttributeListContext.prototype.ATTRIBUTE = function() {
    return this.getToken(EParser.ATTRIBUTE, 0);
};

AttributeListContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

AttributeListContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
AttributeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAttributeList(this);
	}
};

AttributeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAttributeList(this);
	}
};



EParser.prototype.attribute_list = function() {

    var localctx = new Attribute_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, EParser.RULE_attribute_list);
    try {
        this.state = 607;
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AttributeListContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 595;
            this.match(EParser.WITH);
            this.state = 596;
            this.match(EParser.ATTRIBUTE);
            this.state = 597;
            this.match(EParser.COLON);
            this.state = 598; 
            localctx.item = this.variable_identifier();
            break;

        case 2:
            localctx = new AttributeListItemContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 599;
            this.match(EParser.WITH);
            this.state = 600;
            this.match(EParser.ATTRIBUTES);
            this.state = 601;
            this.match(EParser.COLON);
            this.state = 602; 
            localctx.items = this.variable_identifier_list(0);
            this.state = 605;
            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
            if(la_===1) {
                this.state = 603;
                this.match(EParser.AND);
                this.state = 604; 
                localctx.item = this.variable_identifier();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Abstract_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_abstract_method_declaration;
    this.name = null; // Method_identifierContext
    this.args = null; // Full_argument_listContext
    this.typ = null; // TypedefContext
    return this;
}

Abstract_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Abstract_method_declarationContext.prototype.constructor = Abstract_method_declarationContext;

Abstract_method_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Abstract_method_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Abstract_method_declarationContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


Abstract_method_declarationContext.prototype.ABSTRACT = function() {
    return this.getToken(EParser.ABSTRACT, 0);
};

Abstract_method_declarationContext.prototype.METHOD = function() {
    return this.getToken(EParser.METHOD, 0);
};

Abstract_method_declarationContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};

Abstract_method_declarationContext.prototype.RECEIVING = function() {
    return this.getToken(EParser.RECEIVING, 0);
};

Abstract_method_declarationContext.prototype.RETURNING = function() {
    return this.getToken(EParser.RETURNING, 0);
};

Abstract_method_declarationContext.prototype.full_argument_list = function() {
    return this.getTypedRuleContext(Full_argument_listContext,0);
};

Abstract_method_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Abstract_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAbstract_method_declaration(this);
	}
};

Abstract_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAbstract_method_declaration(this);
	}
};




EParser.prototype.abstract_method_declaration = function() {

    var localctx = new Abstract_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, EParser.RULE_abstract_method_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 609;
        this.match(EParser.DEFINE);
        this.state = 610; 
        localctx.name = this.method_identifier();
        this.state = 611;
        this.match(EParser.AS);
        this.state = 612;
        this.match(EParser.COLON);
        this.state = 613;
        this.match(EParser.ABSTRACT);
        this.state = 614;
        this.match(EParser.METHOD);
        this.state = 618;
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        if(la_===1) {
            this.state = 615;
            this.match(EParser.RECEIVING);
            this.state = 616;
            this.match(EParser.COLON);
            this.state = 617; 
            localctx.args = this.full_argument_list();

        }
        this.state = 623;
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        if(la_===1) {
            this.state = 620;
            this.match(EParser.RETURNING);
            this.state = 621;
            this.match(EParser.COLON);
            this.state = 622; 
            localctx.typ = this.typedef(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Concrete_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_concrete_method_declaration;
    this.name = null; // Method_identifierContext
    this.args = null; // Full_argument_listContext
    this.typ = null; // TypedefContext
    this.stmts = null; // Statement_listContext
    return this;
}

Concrete_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concrete_method_declarationContext.prototype.constructor = Concrete_method_declarationContext;

Concrete_method_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Concrete_method_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Concrete_method_declarationContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


Concrete_method_declarationContext.prototype.METHOD = function() {
    return this.getToken(EParser.METHOD, 0);
};

Concrete_method_declarationContext.prototype.DOING = function() {
    return this.getToken(EParser.DOING, 0);
};

Concrete_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Concrete_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Concrete_method_declarationContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};

Concrete_method_declarationContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Concrete_method_declarationContext.prototype.RECEIVING = function() {
    return this.getToken(EParser.RECEIVING, 0);
};

Concrete_method_declarationContext.prototype.RETURNING = function() {
    return this.getToken(EParser.RETURNING, 0);
};

Concrete_method_declarationContext.prototype.full_argument_list = function() {
    return this.getTypedRuleContext(Full_argument_listContext,0);
};

Concrete_method_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Concrete_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterConcrete_method_declaration(this);
	}
};

Concrete_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitConcrete_method_declaration(this);
	}
};




EParser.prototype.concrete_method_declaration = function() {

    var localctx = new Concrete_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, EParser.RULE_concrete_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 625;
        this.match(EParser.DEFINE);
        this.state = 626; 
        localctx.name = this.method_identifier();
        this.state = 627;
        this.match(EParser.AS);
        this.state = 628;
        this.match(EParser.COLON);
        this.state = 629;
        this.match(EParser.METHOD);
        this.state = 633;
        _la = this._input.LA(1);
        if(_la===EParser.RECEIVING) {
            this.state = 630;
            this.match(EParser.RECEIVING);
            this.state = 631;
            this.match(EParser.COLON);
            this.state = 632; 
            localctx.args = this.full_argument_list();
        }

        this.state = 638;
        _la = this._input.LA(1);
        if(_la===EParser.RETURNING) {
            this.state = 635;
            this.match(EParser.RETURNING);
            this.state = 636;
            this.match(EParser.COLON);
            this.state = 637; 
            localctx.typ = this.typedef(0);
        }

        this.state = 640;
        this.match(EParser.DOING);
        this.state = 641;
        this.match(EParser.COLON);
        this.state = 642; 
        this.indent();
        this.state = 643; 
        localctx.stmts = this.statement_list(0);
        this.state = 644; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_method_declaration;
    this.name = null; // Method_identifierContext
    this.args = null; // Full_argument_listContext
    this.typ = null; // TypedefContext
    this.stmts = null; // Native_statement_listContext
    return this;
}

Native_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_method_declarationContext.prototype.constructor = Native_method_declarationContext;

Native_method_declarationContext.prototype.DEFINE = function() {
    return this.getToken(EParser.DEFINE, 0);
};

Native_method_declarationContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Native_method_declarationContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


Native_method_declarationContext.prototype.NATIVE = function() {
    return this.getToken(EParser.NATIVE, 0);
};

Native_method_declarationContext.prototype.METHOD = function() {
    return this.getToken(EParser.METHOD, 0);
};

Native_method_declarationContext.prototype.DOING = function() {
    return this.getToken(EParser.DOING, 0);
};

Native_method_declarationContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Native_method_declarationContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Native_method_declarationContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};

Native_method_declarationContext.prototype.native_statement_list = function() {
    return this.getTypedRuleContext(Native_statement_listContext,0);
};

Native_method_declarationContext.prototype.RECEIVING = function() {
    return this.getToken(EParser.RECEIVING, 0);
};

Native_method_declarationContext.prototype.RETURNING = function() {
    return this.getToken(EParser.RETURNING, 0);
};

Native_method_declarationContext.prototype.full_argument_list = function() {
    return this.getTypedRuleContext(Full_argument_listContext,0);
};

Native_method_declarationContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};

Native_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNative_method_declaration(this);
	}
};

Native_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNative_method_declaration(this);
	}
};




EParser.prototype.native_method_declaration = function() {

    var localctx = new Native_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, EParser.RULE_native_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 646;
        this.match(EParser.DEFINE);
        this.state = 647; 
        localctx.name = this.method_identifier();
        this.state = 648;
        this.match(EParser.AS);
        this.state = 649;
        this.match(EParser.COLON);
        this.state = 650;
        this.match(EParser.NATIVE);
        this.state = 651;
        this.match(EParser.METHOD);
        this.state = 655;
        _la = this._input.LA(1);
        if(_la===EParser.RECEIVING) {
            this.state = 652;
            this.match(EParser.RECEIVING);
            this.state = 653;
            this.match(EParser.COLON);
            this.state = 654; 
            localctx.args = this.full_argument_list();
        }

        this.state = 660;
        _la = this._input.LA(1);
        if(_la===EParser.RETURNING) {
            this.state = 657;
            this.match(EParser.RETURNING);
            this.state = 658;
            this.match(EParser.COLON);
            this.state = 659; 
            localctx.typ = this.typedef(0);
        }

        this.state = 662;
        this.match(EParser.DOING);
        this.state = 663;
        this.match(EParser.COLON);
        this.state = 664; 
        this.indent();
        this.state = 665; 
        localctx.stmts = this.native_statement_list(0);
        this.state = 666; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Full_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_full_argument_list;
    this.items = null; // Argument_listContext
    this.item = null; // ArgumentContext
    return this;
}

Full_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Full_argument_listContext.prototype.constructor = Full_argument_listContext;

Full_argument_listContext.prototype.argument_list = function() {
    return this.getTypedRuleContext(Argument_listContext,0);
};

Full_argument_listContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

Full_argument_listContext.prototype.argument = function() {
    return this.getTypedRuleContext(ArgumentContext,0);
};

Full_argument_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterFull_argument_list(this);
	}
};

Full_argument_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitFull_argument_list(this);
	}
};




EParser.prototype.full_argument_list = function() {

    var localctx = new Full_argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, EParser.RULE_full_argument_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 668; 
        localctx.items = this.argument_list(0);
        this.state = 671;
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        if(la_===1) {
            this.state = 669;
            this.match(EParser.AND);
            this.state = 670; 
            localctx.item = this.argument();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Typed_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_typed_argument;
    this.typ = null; // Category_or_any_typeContext
    this.name = null; // Variable_identifierContext
    this.attrs = null; // Attribute_listContext
    this.value = null; // Literal_expressionContext
    return this;
}

Typed_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Typed_argumentContext.prototype.constructor = Typed_argumentContext;

Typed_argumentContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};

Typed_argumentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Typed_argumentContext.prototype.EQ = function() {
    return this.getToken(EParser.EQ, 0);
};

Typed_argumentContext.prototype.attribute_list = function() {
    return this.getTypedRuleContext(Attribute_listContext,0);
};

Typed_argumentContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};

Typed_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTyped_argument(this);
	}
};

Typed_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTyped_argument(this);
	}
};




EParser.prototype.typed_argument = function() {

    var localctx = new Typed_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, EParser.RULE_typed_argument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 673; 
        localctx.typ = this.category_or_any_type();
        this.state = 674; 
        localctx.name = this.variable_identifier();
        this.state = 676;
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        if(la_===1) {
            this.state = 675; 
            localctx.attrs = this.attribute_list();

        }
        this.state = 680;
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        if(la_===1) {
            this.state = 678;
            this.match(EParser.EQ);
            this.state = 679; 
            localctx.value = this.literal_expression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;


 
StatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AssignInstanceStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Assign_instance_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignInstanceStatementContext.prototype = Object.create(StatementContext.prototype);
AssignInstanceStatementContext.prototype.constructor = AssignInstanceStatementContext;

AssignInstanceStatementContext.prototype.assign_instance_statement = function() {
    return this.getTypedRuleContext(Assign_instance_statementContext,0);
};
AssignInstanceStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAssignInstanceStatement(this);
	}
};

AssignInstanceStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAssignInstanceStatement(this);
	}
};


function WithResourceStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // With_resource_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WithResourceStatementContext.prototype = Object.create(StatementContext.prototype);
WithResourceStatementContext.prototype.constructor = WithResourceStatementContext;

WithResourceStatementContext.prototype.with_resource_statement = function() {
    return this.getTypedRuleContext(With_resource_statementContext,0);
};
WithResourceStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterWithResourceStatement(this);
	}
};

WithResourceStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitWithResourceStatement(this);
	}
};


function AssignTupleStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Assign_tuple_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignTupleStatementContext.prototype = Object.create(StatementContext.prototype);
AssignTupleStatementContext.prototype.constructor = AssignTupleStatementContext;

AssignTupleStatementContext.prototype.assign_tuple_statement = function() {
    return this.getTypedRuleContext(Assign_tuple_statementContext,0);
};
AssignTupleStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAssignTupleStatement(this);
	}
};

AssignTupleStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAssignTupleStatement(this);
	}
};


function WriteStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Write_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WriteStatementContext.prototype = Object.create(StatementContext.prototype);
WriteStatementContext.prototype.constructor = WriteStatementContext;

WriteStatementContext.prototype.write_statement = function() {
    return this.getTypedRuleContext(Write_statementContext,0);
};
WriteStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterWriteStatement(this);
	}
};

WriteStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitWriteStatement(this);
	}
};


function WhileStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // While_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WhileStatementContext.prototype = Object.create(StatementContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

WhileStatementContext.prototype.while_statement = function() {
    return this.getTypedRuleContext(While_statementContext,0);
};
WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitWhileStatement(this);
	}
};


function ClosureStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.decl = null; // Concrete_method_declarationContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClosureStatementContext.prototype = Object.create(StatementContext.prototype);
ClosureStatementContext.prototype.constructor = ClosureStatementContext;

ClosureStatementContext.prototype.concrete_method_declaration = function() {
    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
};
ClosureStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterClosureStatement(this);
	}
};

ClosureStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitClosureStatement(this);
	}
};


function MethodCallStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Method_call_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodCallStatementContext.prototype = Object.create(StatementContext.prototype);
MethodCallStatementContext.prototype.constructor = MethodCallStatementContext;

MethodCallStatementContext.prototype.method_call_statement = function() {
    return this.getTypedRuleContext(Method_call_statementContext,0);
};
MethodCallStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMethodCallStatement(this);
	}
};

MethodCallStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMethodCallStatement(this);
	}
};


function WithSingletonStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // With_singleton_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WithSingletonStatementContext.prototype = Object.create(StatementContext.prototype);
WithSingletonStatementContext.prototype.constructor = WithSingletonStatementContext;

WithSingletonStatementContext.prototype.with_singleton_statement = function() {
    return this.getTypedRuleContext(With_singleton_statementContext,0);
};
WithSingletonStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterWithSingletonStatement(this);
	}
};

WithSingletonStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitWithSingletonStatement(this);
	}
};


function ReturnStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Return_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReturnStatementContext.prototype = Object.create(StatementContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.return_statement = function() {
    return this.getTypedRuleContext(Return_statementContext,0);
};
ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitReturnStatement(this);
	}
};


function DoWhileStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Do_while_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DoWhileStatementContext.prototype = Object.create(StatementContext.prototype);
DoWhileStatementContext.prototype.constructor = DoWhileStatementContext;

DoWhileStatementContext.prototype.do_while_statement = function() {
    return this.getTypedRuleContext(Do_while_statementContext,0);
};
DoWhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDoWhileStatement(this);
	}
};

DoWhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDoWhileStatement(this);
	}
};


function IfStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // If_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IfStatementContext.prototype = Object.create(StatementContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.if_statement = function() {
    return this.getTypedRuleContext(If_statementContext,0);
};
IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIfStatement(this);
	}
};


function SwitchStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Switch_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SwitchStatementContext.prototype = Object.create(StatementContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

SwitchStatementContext.prototype.switch_statement = function() {
    return this.getTypedRuleContext(Switch_statementContext,0);
};
SwitchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSwitchStatement(this);
	}
};

SwitchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSwitchStatement(this);
	}
};


function RaiseStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Raise_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RaiseStatementContext.prototype = Object.create(StatementContext.prototype);
RaiseStatementContext.prototype.constructor = RaiseStatementContext;

RaiseStatementContext.prototype.raise_statement = function() {
    return this.getTypedRuleContext(Raise_statementContext,0);
};
RaiseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterRaiseStatement(this);
	}
};

RaiseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitRaiseStatement(this);
	}
};


function ForEachStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // For_each_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForEachStatementContext.prototype = Object.create(StatementContext.prototype);
ForEachStatementContext.prototype.constructor = ForEachStatementContext;

ForEachStatementContext.prototype.for_each_statement = function() {
    return this.getTypedRuleContext(For_each_statementContext,0);
};
ForEachStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterForEachStatement(this);
	}
};

ForEachStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitForEachStatement(this);
	}
};


function TryStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.stmt = null; // Try_statementContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TryStatementContext.prototype = Object.create(StatementContext.prototype);
TryStatementContext.prototype.constructor = TryStatementContext;

TryStatementContext.prototype.try_statement = function() {
    return this.getTypedRuleContext(Try_statementContext,0);
};
TryStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTryStatement(this);
	}
};

TryStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTryStatement(this);
	}
};



EParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, EParser.RULE_statement);
    try {
        this.state = 697;
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AssignInstanceStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 682; 
            localctx.stmt = this.assign_instance_statement();
            break;

        case 2:
            localctx = new MethodCallStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 683; 
            localctx.stmt = this.method_call_statement();
            break;

        case 3:
            localctx = new AssignTupleStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 684; 
            localctx.stmt = this.assign_tuple_statement();
            break;

        case 4:
            localctx = new ReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 685; 
            localctx.stmt = this.return_statement();
            break;

        case 5:
            localctx = new IfStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 686; 
            localctx.stmt = this.if_statement();
            break;

        case 6:
            localctx = new SwitchStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 687; 
            localctx.stmt = this.switch_statement();
            break;

        case 7:
            localctx = new ForEachStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 688; 
            localctx.stmt = this.for_each_statement();
            break;

        case 8:
            localctx = new WhileStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 689; 
            localctx.stmt = this.while_statement();
            break;

        case 9:
            localctx = new DoWhileStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 690; 
            localctx.stmt = this.do_while_statement();
            break;

        case 10:
            localctx = new RaiseStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 691; 
            localctx.stmt = this.raise_statement();
            break;

        case 11:
            localctx = new TryStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 692; 
            localctx.stmt = this.try_statement();
            break;

        case 12:
            localctx = new WriteStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 693; 
            localctx.stmt = this.write_statement();
            break;

        case 13:
            localctx = new WithResourceStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 694; 
            localctx.stmt = this.with_resource_statement();
            break;

        case 14:
            localctx = new WithSingletonStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 695; 
            localctx.stmt = this.with_singleton_statement();
            break;

        case 15:
            localctx = new ClosureStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 696; 
            localctx.decl = this.concrete_method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_call_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_method_call_statement;
    return this;
}

Method_call_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_call_statementContext.prototype.constructor = Method_call_statementContext;


 
Method_call_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function UnresolvedWithArgsStatementContext(parser, ctx) {
	Method_call_statementContext.call(this, parser);
    this.exp = null; // Unresolved_expressionContext;
    this.args = null; // Argument_assignment_listContext;
    Method_call_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnresolvedWithArgsStatementContext.prototype = Object.create(Method_call_statementContext.prototype);
UnresolvedWithArgsStatementContext.prototype.constructor = UnresolvedWithArgsStatementContext;

UnresolvedWithArgsStatementContext.prototype.unresolved_expression = function() {
    return this.getTypedRuleContext(Unresolved_expressionContext,0);
};

UnresolvedWithArgsStatementContext.prototype.argument_assignment_list = function() {
    return this.getTypedRuleContext(Argument_assignment_listContext,0);
};
UnresolvedWithArgsStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterUnresolvedWithArgsStatement(this);
	}
};

UnresolvedWithArgsStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitUnresolvedWithArgsStatement(this);
	}
};


function InvokeStatementContext(parser, ctx) {
	Method_call_statementContext.call(this, parser);
    this.exp = null; // Invocation_expressionContext;
    Method_call_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InvokeStatementContext.prototype = Object.create(Method_call_statementContext.prototype);
InvokeStatementContext.prototype.constructor = InvokeStatementContext;

InvokeStatementContext.prototype.invocation_expression = function() {
    return this.getTypedRuleContext(Invocation_expressionContext,0);
};
InvokeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterInvokeStatement(this);
	}
};

InvokeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitInvokeStatement(this);
	}
};



EParser.prototype.method_call_statement = function() {

    var localctx = new Method_call_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, EParser.RULE_method_call_statement);
    try {
        this.state = 704;
        switch(this._input.LA(1)) {
        case EParser.SYMBOL_IDENTIFIER:
        case EParser.TYPE_IDENTIFIER:
        case EParser.VARIABLE_IDENTIFIER:
            localctx = new UnresolvedWithArgsStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 699; 
            localctx.exp = this.unresolved_expression(0);
            this.state = 701;
            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
            if(la_===1) {
                this.state = 700; 
                localctx.args = this.argument_assignment_list();

            }
            break;
        case EParser.INVOKE:
            localctx = new InvokeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 703; 
            localctx.exp = this.invocation_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_resource_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_with_resource_statement;
    this.stmt = null; // Assign_variable_statementContext
    this.stmts = null; // Statement_listContext
    return this;
}

With_resource_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_resource_statementContext.prototype.constructor = With_resource_statementContext;

With_resource_statementContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

With_resource_statementContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

With_resource_statementContext.prototype.DO = function() {
    return this.getToken(EParser.DO, 0);
};

With_resource_statementContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

With_resource_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

With_resource_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

With_resource_statementContext.prototype.assign_variable_statement = function() {
    return this.getTypedRuleContext(Assign_variable_statementContext,0);
};

With_resource_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

With_resource_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterWith_resource_statement(this);
	}
};

With_resource_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitWith_resource_statement(this);
	}
};




EParser.prototype.with_resource_statement = function() {

    var localctx = new With_resource_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, EParser.RULE_with_resource_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 706;
        this.match(EParser.WITH);
        this.state = 707; 
        localctx.stmt = this.assign_variable_statement();
        this.state = 708;
        this.match(EParser.COMMA);
        this.state = 709;
        this.match(EParser.DO);
        this.state = 710;
        this.match(EParser.COLON);
        this.state = 711; 
        this.indent();
        this.state = 712; 
        localctx.stmts = this.statement_list(0);
        this.state = 713; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_singleton_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_with_singleton_statement;
    this.typ = null; // Type_identifierContext
    this.stmts = null; // Statement_listContext
    return this;
}

With_singleton_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_singleton_statementContext.prototype.constructor = With_singleton_statementContext;

With_singleton_statementContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

With_singleton_statementContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

With_singleton_statementContext.prototype.DO = function() {
    return this.getToken(EParser.DO, 0);
};

With_singleton_statementContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

With_singleton_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

With_singleton_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

With_singleton_statementContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

With_singleton_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

With_singleton_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterWith_singleton_statement(this);
	}
};

With_singleton_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitWith_singleton_statement(this);
	}
};




EParser.prototype.with_singleton_statement = function() {

    var localctx = new With_singleton_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, EParser.RULE_with_singleton_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 715;
        this.match(EParser.WITH);
        this.state = 716; 
        localctx.typ = this.type_identifier();
        this.state = 717;
        this.match(EParser.COMMA);
        this.state = 718;
        this.match(EParser.DO);
        this.state = 719;
        this.match(EParser.COLON);
        this.state = 720; 
        this.indent();
        this.state = 721; 
        localctx.stmts = this.statement_list(0);
        this.state = 722; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_switch_statement;
    this.exp = null; // ExpressionContext
    this.cases = null; // Switch_case_statement_listContext
    this.stmts = null; // Statement_listContext
    return this;
}

Switch_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_statementContext.prototype.constructor = Switch_statementContext;

Switch_statementContext.prototype.SWITCH = function() {
    return this.getToken(EParser.SWITCH, 0);
};

Switch_statementContext.prototype.ON = function() {
    return this.getToken(EParser.ON, 0);
};

Switch_statementContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


Switch_statementContext.prototype.indent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndentContext);
    } else {
        return this.getTypedRuleContext(IndentContext,i);
    }
};

Switch_statementContext.prototype.dedent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DedentContext);
    } else {
        return this.getTypedRuleContext(DedentContext,i);
    }
};

Switch_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Switch_statementContext.prototype.switch_case_statement_list = function() {
    return this.getTypedRuleContext(Switch_case_statement_listContext,0);
};

Switch_statementContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

Switch_statementContext.prototype.OTHERWISE = function() {
    return this.getToken(EParser.OTHERWISE, 0);
};

Switch_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Switch_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSwitch_statement(this);
	}
};

Switch_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSwitch_statement(this);
	}
};




EParser.prototype.switch_statement = function() {

    var localctx = new Switch_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, EParser.RULE_switch_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 724;
        this.match(EParser.SWITCH);
        this.state = 725;
        this.match(EParser.ON);
        this.state = 726; 
        localctx.exp = this.expression(0);
        this.state = 727;
        this.match(EParser.COLON);
        this.state = 728; 
        this.indent();
        this.state = 729; 
        localctx.cases = this.switch_case_statement_list(0);
        this.state = 737;
        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
        if(la_===1) {
            this.state = 730; 
            this.lfp();
            this.state = 731;
            this.match(EParser.OTHERWISE);
            this.state = 732;
            this.match(EParser.COLON);
            this.state = 733; 
            this.indent();
            this.state = 734; 
            localctx.stmts = this.statement_list(0);
            this.state = 735; 
            this.dedent();

        }
        this.state = 739; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_case_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_switch_case_statement;
    return this;
}

Switch_case_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_case_statementContext.prototype.constructor = Switch_case_statementContext;


 
Switch_case_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AtomicSwitchCaseContext(parser, ctx) {
	Switch_case_statementContext.call(this, parser);
    this.exp = null; // Atomic_literalContext;
    this.stmts = null; // Statement_listContext;
    Switch_case_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtomicSwitchCaseContext.prototype = Object.create(Switch_case_statementContext.prototype);
AtomicSwitchCaseContext.prototype.constructor = AtomicSwitchCaseContext;

AtomicSwitchCaseContext.prototype.WHEN = function() {
    return this.getToken(EParser.WHEN, 0);
};

AtomicSwitchCaseContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

AtomicSwitchCaseContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

AtomicSwitchCaseContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

AtomicSwitchCaseContext.prototype.atomic_literal = function() {
    return this.getTypedRuleContext(Atomic_literalContext,0);
};

AtomicSwitchCaseContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
AtomicSwitchCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAtomicSwitchCase(this);
	}
};

AtomicSwitchCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAtomicSwitchCase(this);
	}
};


function CollectionSwitchCaseContext(parser, ctx) {
	Switch_case_statementContext.call(this, parser);
    this.exp = null; // Literal_collectionContext;
    this.stmts = null; // Statement_listContext;
    Switch_case_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CollectionSwitchCaseContext.prototype = Object.create(Switch_case_statementContext.prototype);
CollectionSwitchCaseContext.prototype.constructor = CollectionSwitchCaseContext;

CollectionSwitchCaseContext.prototype.WHEN = function() {
    return this.getToken(EParser.WHEN, 0);
};

CollectionSwitchCaseContext.prototype.IN = function() {
    return this.getToken(EParser.IN, 0);
};

CollectionSwitchCaseContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

CollectionSwitchCaseContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

CollectionSwitchCaseContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

CollectionSwitchCaseContext.prototype.literal_collection = function() {
    return this.getTypedRuleContext(Literal_collectionContext,0);
};

CollectionSwitchCaseContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
CollectionSwitchCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCollectionSwitchCase(this);
	}
};

CollectionSwitchCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCollectionSwitchCase(this);
	}
};



EParser.prototype.switch_case_statement = function() {

    var localctx = new Switch_case_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, EParser.RULE_switch_case_statement);
    try {
        this.state = 756;
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AtomicSwitchCaseContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 741;
            this.match(EParser.WHEN);
            this.state = 742; 
            localctx.exp = this.atomic_literal();
            this.state = 743;
            this.match(EParser.COLON);
            this.state = 744; 
            this.indent();
            this.state = 745; 
            localctx.stmts = this.statement_list(0);
            this.state = 746; 
            this.dedent();
            break;

        case 2:
            localctx = new CollectionSwitchCaseContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 748;
            this.match(EParser.WHEN);
            this.state = 749;
            this.match(EParser.IN);
            this.state = 750; 
            localctx.exp = this.literal_collection();
            this.state = 751;
            this.match(EParser.COLON);
            this.state = 752; 
            this.indent();
            this.state = 753; 
            localctx.stmts = this.statement_list(0);
            this.state = 754; 
            this.dedent();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_each_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_for_each_statement;
    this.name1 = null; // Variable_identifierContext
    this.name2 = null; // Variable_identifierContext
    this.source = null; // ExpressionContext
    this.stmts = null; // Statement_listContext
    return this;
}

For_each_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_each_statementContext.prototype.constructor = For_each_statementContext;

For_each_statementContext.prototype.FOR = function() {
    return this.getToken(EParser.FOR, 0);
};

For_each_statementContext.prototype.EACH = function() {
    return this.getToken(EParser.EACH, 0);
};

For_each_statementContext.prototype.IN = function() {
    return this.getToken(EParser.IN, 0);
};

For_each_statementContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

For_each_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

For_each_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

For_each_statementContext.prototype.variable_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_identifierContext);
    } else {
        return this.getTypedRuleContext(Variable_identifierContext,i);
    }
};

For_each_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

For_each_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

For_each_statementContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

For_each_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterFor_each_statement(this);
	}
};

For_each_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitFor_each_statement(this);
	}
};




EParser.prototype.for_each_statement = function() {

    var localctx = new For_each_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, EParser.RULE_for_each_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 758;
        this.match(EParser.FOR);
        this.state = 759;
        this.match(EParser.EACH);
        this.state = 760; 
        localctx.name1 = this.variable_identifier();
        this.state = 763;
        _la = this._input.LA(1);
        if(_la===EParser.COMMA) {
            this.state = 761;
            this.match(EParser.COMMA);
            this.state = 762; 
            localctx.name2 = this.variable_identifier();
        }

        this.state = 765;
        this.match(EParser.IN);
        this.state = 766; 
        localctx.source = this.expression(0);
        this.state = 767;
        this.match(EParser.COLON);
        this.state = 768; 
        this.indent();
        this.state = 769; 
        localctx.stmts = this.statement_list(0);
        this.state = 770; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Do_while_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_do_while_statement;
    this.stmts = null; // Statement_listContext
    this.exp = null; // ExpressionContext
    return this;
}

Do_while_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Do_while_statementContext.prototype.constructor = Do_while_statementContext;

Do_while_statementContext.prototype.DO = function() {
    return this.getToken(EParser.DO, 0);
};

Do_while_statementContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Do_while_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

Do_while_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

Do_while_statementContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

Do_while_statementContext.prototype.WHILE = function() {
    return this.getToken(EParser.WHILE, 0);
};

Do_while_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

Do_while_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Do_while_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDo_while_statement(this);
	}
};

Do_while_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDo_while_statement(this);
	}
};




EParser.prototype.do_while_statement = function() {

    var localctx = new Do_while_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, EParser.RULE_do_while_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 772;
        this.match(EParser.DO);
        this.state = 773;
        this.match(EParser.COLON);
        this.state = 774; 
        this.indent();
        this.state = 775; 
        localctx.stmts = this.statement_list(0);
        this.state = 776; 
        this.dedent();
        this.state = 777; 
        this.lfp();
        this.state = 778;
        this.match(EParser.WHILE);
        this.state = 779; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function While_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_while_statement;
    this.exp = null; // ExpressionContext
    this.stmts = null; // Statement_listContext
    return this;
}

While_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
While_statementContext.prototype.constructor = While_statementContext;

While_statementContext.prototype.WHILE = function() {
    return this.getToken(EParser.WHILE, 0);
};

While_statementContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

While_statementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

While_statementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

While_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

While_statementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

While_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterWhile_statement(this);
	}
};

While_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitWhile_statement(this);
	}
};




EParser.prototype.while_statement = function() {

    var localctx = new While_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, EParser.RULE_while_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 781;
        this.match(EParser.WHILE);
        this.state = 782; 
        localctx.exp = this.expression(0);
        this.state = 783;
        this.match(EParser.COLON);
        this.state = 784; 
        this.indent();
        this.state = 785; 
        localctx.stmts = this.statement_list(0);
        this.state = 786; 
        this.dedent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function If_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_if_statement;
    this.exp = null; // ExpressionContext
    this.stmts = null; // Statement_listContext
    this.elseIfs = null; // Else_if_statement_listContext
    this.elseStmts = null; // Statement_listContext
    return this;
}

If_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_statementContext.prototype.constructor = If_statementContext;

If_statementContext.prototype.IF = function() {
    return this.getToken(EParser.IF, 0);
};

If_statementContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


If_statementContext.prototype.indent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndentContext);
    } else {
        return this.getTypedRuleContext(IndentContext,i);
    }
};

If_statementContext.prototype.dedent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DedentContext);
    } else {
        return this.getTypedRuleContext(DedentContext,i);
    }
};

If_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

If_statementContext.prototype.statement_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Statement_listContext);
    } else {
        return this.getTypedRuleContext(Statement_listContext,i);
    }
};

If_statementContext.prototype.lfp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfpContext);
    } else {
        return this.getTypedRuleContext(LfpContext,i);
    }
};

If_statementContext.prototype.ELSE = function() {
    return this.getToken(EParser.ELSE, 0);
};

If_statementContext.prototype.else_if_statement_list = function() {
    return this.getTypedRuleContext(Else_if_statement_listContext,0);
};

If_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIf_statement(this);
	}
};

If_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIf_statement(this);
	}
};




EParser.prototype.if_statement = function() {

    var localctx = new If_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, EParser.RULE_if_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 788;
        this.match(EParser.IF);
        this.state = 789; 
        localctx.exp = this.expression(0);
        this.state = 790;
        this.match(EParser.COLON);
        this.state = 791; 
        this.indent();
        this.state = 792; 
        localctx.stmts = this.statement_list(0);
        this.state = 793; 
        this.dedent();
        this.state = 797;
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        if(la_===1) {
            this.state = 794; 
            this.lfp();
            this.state = 795; 
            localctx.elseIfs = this.else_if_statement_list(0);

        }
        this.state = 806;
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        if(la_===1) {
            this.state = 799; 
            this.lfp();
            this.state = 800;
            this.match(EParser.ELSE);
            this.state = 801;
            this.match(EParser.COLON);
            this.state = 802; 
            this.indent();
            this.state = 803; 
            localctx.elseStmts = this.statement_list(0);
            this.state = 804; 
            this.dedent();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Else_if_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_else_if_statement_list;
    return this;
}

Else_if_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Else_if_statement_listContext.prototype.constructor = Else_if_statement_listContext;


 
Else_if_statement_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ElseIfStatementListContext(parser, ctx) {
	Else_if_statement_listContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    this.stmts = null; // Statement_listContext;
    Else_if_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ElseIfStatementListContext.prototype = Object.create(Else_if_statement_listContext.prototype);
ElseIfStatementListContext.prototype.constructor = ElseIfStatementListContext;

ElseIfStatementListContext.prototype.ELSE = function() {
    return this.getToken(EParser.ELSE, 0);
};

ElseIfStatementListContext.prototype.IF = function() {
    return this.getToken(EParser.IF, 0);
};

ElseIfStatementListContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

ElseIfStatementListContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

ElseIfStatementListContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

ElseIfStatementListContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElseIfStatementListContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
ElseIfStatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterElseIfStatementList(this);
	}
};

ElseIfStatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitElseIfStatementList(this);
	}
};


function ElseIfStatementListItemContext(parser, ctx) {
	Else_if_statement_listContext.call(this, parser);
    this.items = null; // Else_if_statement_listContext;
    this.exp = null; // ExpressionContext;
    this.stmts = null; // Statement_listContext;
    Else_if_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ElseIfStatementListItemContext.prototype = Object.create(Else_if_statement_listContext.prototype);
ElseIfStatementListItemContext.prototype.constructor = ElseIfStatementListItemContext;

ElseIfStatementListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

ElseIfStatementListItemContext.prototype.ELSE = function() {
    return this.getToken(EParser.ELSE, 0);
};

ElseIfStatementListItemContext.prototype.IF = function() {
    return this.getToken(EParser.IF, 0);
};

ElseIfStatementListItemContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

ElseIfStatementListItemContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

ElseIfStatementListItemContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

ElseIfStatementListItemContext.prototype.else_if_statement_list = function() {
    return this.getTypedRuleContext(Else_if_statement_listContext,0);
};

ElseIfStatementListItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElseIfStatementListItemContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
ElseIfStatementListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterElseIfStatementListItem(this);
	}
};

ElseIfStatementListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitElseIfStatementListItem(this);
	}
};



EParser.prototype.else_if_statement_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Else_if_statement_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 64;
    this.enterRecursionRule(localctx, 64, EParser.RULE_else_if_statement_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new ElseIfStatementListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 809;
        this.match(EParser.ELSE);
        this.state = 810;
        this.match(EParser.IF);
        this.state = 811; 
        localctx.exp = this.expression(0);
        this.state = 812;
        this.match(EParser.COLON);
        this.state = 813; 
        this.indent();
        this.state = 814; 
        localctx.stmts = this.statement_list(0);
        this.state = 815; 
        this.dedent();
        this._ctx.stop = this._input.LT(-1);
        this.state = 829;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ElseIfStatementListItemContext(this, new Else_if_statement_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_else_if_statement_list);
                this.state = 817;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 818; 
                this.lfp();
                this.state = 819;
                this.match(EParser.ELSE);
                this.state = 820;
                this.match(EParser.IF);
                this.state = 821; 
                localctx.exp = this.expression(0);
                this.state = 822;
                this.match(EParser.COLON);
                this.state = 823; 
                this.indent();
                this.state = 824; 
                localctx.stmts = this.statement_list(0);
                this.state = 825; 
                this.dedent(); 
            }
            this.state = 831;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Raise_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_raise_statement;
    this.exp = null; // ExpressionContext
    return this;
}

Raise_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raise_statementContext.prototype.constructor = Raise_statementContext;

Raise_statementContext.prototype.RAISE = function() {
    return this.getToken(EParser.RAISE, 0);
};

Raise_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Raise_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterRaise_statement(this);
	}
};

Raise_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitRaise_statement(this);
	}
};




EParser.prototype.raise_statement = function() {

    var localctx = new Raise_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, EParser.RULE_raise_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 832;
        this.match(EParser.RAISE);
        this.state = 833; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Try_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_try_statement;
    this.name = null; // Variable_identifierContext
    this.stmts = null; // Statement_listContext
    this.handlers = null; // Catch_statement_listContext
    this.anyStmts = null; // Statement_listContext
    this.finalStmts = null; // Statement_listContext
    return this;
}

Try_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Try_statementContext.prototype.constructor = Try_statementContext;

Try_statementContext.prototype.SWITCH = function() {
    return this.getToken(EParser.SWITCH, 0);
};

Try_statementContext.prototype.ON = function() {
    return this.getToken(EParser.ON, 0);
};

Try_statementContext.prototype.DOING = function() {
    return this.getToken(EParser.DOING, 0);
};

Try_statementContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.COLON);
    } else {
        return this.getToken(EParser.COLON, i);
    }
};


Try_statementContext.prototype.indent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndentContext);
    } else {
        return this.getTypedRuleContext(IndentContext,i);
    }
};

Try_statementContext.prototype.dedent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DedentContext);
    } else {
        return this.getTypedRuleContext(DedentContext,i);
    }
};

Try_statementContext.prototype.lfs = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LfsContext);
    } else {
        return this.getTypedRuleContext(LfsContext,i);
    }
};

Try_statementContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Try_statementContext.prototype.statement_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Statement_listContext);
    } else {
        return this.getTypedRuleContext(Statement_listContext,i);
    }
};

Try_statementContext.prototype.ALWAYS = function() {
    return this.getToken(EParser.ALWAYS, 0);
};

Try_statementContext.prototype.catch_statement_list = function() {
    return this.getTypedRuleContext(Catch_statement_listContext,0);
};

Try_statementContext.prototype.OTHERWISE = function() {
    return this.getToken(EParser.OTHERWISE, 0);
};

Try_statementContext.prototype.WHEN = function() {
    return this.getToken(EParser.WHEN, 0);
};

Try_statementContext.prototype.ANY = function() {
    return this.getToken(EParser.ANY, 0);
};

Try_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTry_statement(this);
	}
};

Try_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTry_statement(this);
	}
};




EParser.prototype.try_statement = function() {

    var localctx = new Try_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, EParser.RULE_try_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 835;
        this.match(EParser.SWITCH);
        this.state = 836;
        this.match(EParser.ON);
        this.state = 837; 
        localctx.name = this.variable_identifier();
        this.state = 838;
        this.match(EParser.DOING);
        this.state = 839;
        this.match(EParser.COLON);
        this.state = 840; 
        this.indent();
        this.state = 841; 
        localctx.stmts = this.statement_list(0);
        this.state = 842; 
        this.dedent();
        this.state = 843; 
        this.lfs();
        this.state = 845;
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        if(la_===1) {
            this.state = 844; 
            localctx.handlers = this.catch_statement_list(0);

        }
        this.state = 858;
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        if(la_===1) {
            this.state = 850;
            switch(this._input.LA(1)) {
            case EParser.OTHERWISE:
                this.state = 847;
                this.match(EParser.OTHERWISE);
                break;
            case EParser.WHEN:
                this.state = 848;
                this.match(EParser.WHEN);
                this.state = 849;
                this.match(EParser.ANY);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 852;
            this.match(EParser.COLON);
            this.state = 853; 
            this.indent();
            this.state = 854; 
            localctx.anyStmts = this.statement_list(0);
            this.state = 855; 
            this.dedent();
            this.state = 856; 
            this.lfs();

        }
        this.state = 867;
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        if(la_===1) {
            this.state = 860;
            this.match(EParser.ALWAYS);
            this.state = 861;
            this.match(EParser.COLON);
            this.state = 862; 
            this.indent();
            this.state = 863; 
            localctx.finalStmts = this.statement_list(0);
            this.state = 864; 
            this.dedent();
            this.state = 865; 
            this.lfs();

        }
        this.state = 869; 
        this.lfs();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Catch_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_catch_statement;
    return this;
}

Catch_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Catch_statementContext.prototype.constructor = Catch_statementContext;


 
Catch_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CatchAtomicStatementContext(parser, ctx) {
	Catch_statementContext.call(this, parser);
    this.name = null; // Symbol_identifierContext;
    this.stmts = null; // Statement_listContext;
    Catch_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CatchAtomicStatementContext.prototype = Object.create(Catch_statementContext.prototype);
CatchAtomicStatementContext.prototype.constructor = CatchAtomicStatementContext;

CatchAtomicStatementContext.prototype.WHEN = function() {
    return this.getToken(EParser.WHEN, 0);
};

CatchAtomicStatementContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

CatchAtomicStatementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

CatchAtomicStatementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

CatchAtomicStatementContext.prototype.lfs = function() {
    return this.getTypedRuleContext(LfsContext,0);
};

CatchAtomicStatementContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};

CatchAtomicStatementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
CatchAtomicStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCatchAtomicStatement(this);
	}
};

CatchAtomicStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCatchAtomicStatement(this);
	}
};


function CatchCollectionStatementContext(parser, ctx) {
	Catch_statementContext.call(this, parser);
    this.exp = null; // Symbol_listContext;
    this.stmts = null; // Statement_listContext;
    Catch_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CatchCollectionStatementContext.prototype = Object.create(Catch_statementContext.prototype);
CatchCollectionStatementContext.prototype.constructor = CatchCollectionStatementContext;

CatchCollectionStatementContext.prototype.WHEN = function() {
    return this.getToken(EParser.WHEN, 0);
};

CatchCollectionStatementContext.prototype.IN = function() {
    return this.getToken(EParser.IN, 0);
};

CatchCollectionStatementContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

CatchCollectionStatementContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

CatchCollectionStatementContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

CatchCollectionStatementContext.prototype.indent = function() {
    return this.getTypedRuleContext(IndentContext,0);
};

CatchCollectionStatementContext.prototype.dedent = function() {
    return this.getTypedRuleContext(DedentContext,0);
};

CatchCollectionStatementContext.prototype.lfs = function() {
    return this.getTypedRuleContext(LfsContext,0);
};

CatchCollectionStatementContext.prototype.symbol_list = function() {
    return this.getTypedRuleContext(Symbol_listContext,0);
};

CatchCollectionStatementContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};
CatchCollectionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCatchCollectionStatement(this);
	}
};

CatchCollectionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCatchCollectionStatement(this);
	}
};



EParser.prototype.catch_statement = function() {

    var localctx = new Catch_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, EParser.RULE_catch_statement);
    try {
        this.state = 890;
        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
        switch(la_) {
        case 1:
            localctx = new CatchAtomicStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 871;
            this.match(EParser.WHEN);
            this.state = 872; 
            localctx.name = this.symbol_identifier();
            this.state = 873;
            this.match(EParser.COLON);
            this.state = 874; 
            this.indent();
            this.state = 875; 
            localctx.stmts = this.statement_list(0);
            this.state = 876; 
            this.dedent();
            this.state = 877; 
            this.lfs();
            break;

        case 2:
            localctx = new CatchCollectionStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 879;
            this.match(EParser.WHEN);
            this.state = 880;
            this.match(EParser.IN);
            this.state = 881;
            this.match(EParser.LBRAK);
            this.state = 882; 
            localctx.exp = this.symbol_list(0);
            this.state = 883;
            this.match(EParser.RBRAK);
            this.state = 884;
            this.match(EParser.COLON);
            this.state = 885; 
            this.indent();
            this.state = 886; 
            localctx.stmts = this.statement_list(0);
            this.state = 887; 
            this.dedent();
            this.state = 888; 
            this.lfs();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Return_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_return_statement;
    this.exp = null; // ExpressionContext
    return this;
}

Return_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_statementContext.prototype.constructor = Return_statementContext;

Return_statementContext.prototype.RETURN = function() {
    return this.getToken(EParser.RETURN, 0);
};

Return_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Return_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterReturn_statement(this);
	}
};

Return_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitReturn_statement(this);
	}
};




EParser.prototype.return_statement = function() {

    var localctx = new Return_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, EParser.RULE_return_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 892;
        this.match(EParser.RETURN);
        this.state = 894;
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        if(la_===1) {
            this.state = 893; 
            localctx.exp = this.expression(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ClosureExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.name = null; // Method_identifierContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClosureExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ClosureExpressionContext.prototype.constructor = ClosureExpressionContext;

ClosureExpressionContext.prototype.METHOD_T = function() {
    return this.getToken(EParser.METHOD_T, 0);
};

ClosureExpressionContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

ClosureExpressionContext.prototype.method_identifier = function() {
    return this.getTypedRuleContext(Method_identifierContext,0);
};
ClosureExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterClosureExpression(this);
	}
};

ClosureExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitClosureExpression(this);
	}
};


function TernaryExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.ifTrue = null; // ExpressionContext;
    this.test = null; // ExpressionContext;
    this.ifFalse = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TernaryExpressionContext.prototype = Object.create(ExpressionContext.prototype);
TernaryExpressionContext.prototype.constructor = TernaryExpressionContext;

TernaryExpressionContext.prototype.IF = function() {
    return this.getToken(EParser.IF, 0);
};

TernaryExpressionContext.prototype.ELSE = function() {
    return this.getToken(EParser.ELSE, 0);
};

TernaryExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
TernaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTernaryExpression(this);
	}
};

TernaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTernaryExpression(this);
	}
};


function IntDivideExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntDivideExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IntDivideExpressionContext.prototype.constructor = IntDivideExpressionContext;

IntDivideExpressionContext.prototype.idivide = function() {
    return this.getTypedRuleContext(IdivideContext,0);
};

IntDivideExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
IntDivideExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIntDivideExpression(this);
	}
};

IntDivideExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIntDivideExpression(this);
	}
};


function EqualsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
EqualsExpressionContext.prototype.constructor = EqualsExpressionContext;

EqualsExpressionContext.prototype.EQ = function() {
    return this.getToken(EParser.EQ, 0);
};

EqualsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
EqualsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterEqualsExpression(this);
	}
};

EqualsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitEqualsExpression(this);
	}
};


function OrExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OrExpressionContext.prototype = Object.create(ExpressionContext.prototype);
OrExpressionContext.prototype.constructor = OrExpressionContext;

OrExpressionContext.prototype.OR = function() {
    return this.getToken(EParser.OR, 0);
};

OrExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
OrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOrExpression(this);
	}
};

OrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOrExpression(this);
	}
};


function NotContainsAnyExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotContainsAnyExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotContainsAnyExpressionContext.prototype.constructor = NotContainsAnyExpressionContext;

NotContainsAnyExpressionContext.prototype.NOT = function() {
    return this.getToken(EParser.NOT, 0);
};

NotContainsAnyExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(EParser.CONTAINS, 0);
};

NotContainsAnyExpressionContext.prototype.ANY = function() {
    return this.getToken(EParser.ANY, 0);
};

NotContainsAnyExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotContainsAnyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNotContainsAnyExpression(this);
	}
};

NotContainsAnyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNotContainsAnyExpression(this);
	}
};


function RoughlyEqualsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RoughlyEqualsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
RoughlyEqualsExpressionContext.prototype.constructor = RoughlyEqualsExpressionContext;

RoughlyEqualsExpressionContext.prototype.TILDE = function() {
    return this.getToken(EParser.TILDE, 0);
};

RoughlyEqualsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
RoughlyEqualsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterRoughlyEqualsExpression(this);
	}
};

RoughlyEqualsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitRoughlyEqualsExpression(this);
	}
};


function SortedExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Sorted_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SortedExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SortedExpressionContext.prototype.constructor = SortedExpressionContext;

SortedExpressionContext.prototype.sorted_expression = function() {
    return this.getTypedRuleContext(Sorted_expressionContext,0);
};
SortedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSortedExpression(this);
	}
};

SortedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSortedExpression(this);
	}
};


function ContainsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ContainsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ContainsExpressionContext.prototype.constructor = ContainsExpressionContext;

ContainsExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(EParser.CONTAINS, 0);
};

ContainsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ContainsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterContainsExpression(this);
	}
};

ContainsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitContainsExpression(this);
	}
};


function CodeExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CodeExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CodeExpressionContext.prototype.constructor = CodeExpressionContext;

CodeExpressionContext.prototype.CODE = function() {
    return this.getToken(EParser.CODE, 0);
};

CodeExpressionContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

CodeExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
CodeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCodeExpression(this);
	}
};

CodeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCodeExpression(this);
	}
};


function AmbiguousExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Ambiguous_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AmbiguousExpressionContext.prototype = Object.create(ExpressionContext.prototype);
AmbiguousExpressionContext.prototype.constructor = AmbiguousExpressionContext;

AmbiguousExpressionContext.prototype.ambiguous_expression = function() {
    return this.getTypedRuleContext(Ambiguous_expressionContext,0);
};
AmbiguousExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAmbiguousExpression(this);
	}
};

AmbiguousExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAmbiguousExpression(this);
	}
};


function NotEqualsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotEqualsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotEqualsExpressionContext.prototype.constructor = NotEqualsExpressionContext;

NotEqualsExpressionContext.prototype.LTGT = function() {
    return this.getToken(EParser.LTGT, 0);
};

NotEqualsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotEqualsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNotEqualsExpression(this);
	}
};

NotEqualsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNotEqualsExpression(this);
	}
};


function InExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InExpressionContext.prototype = Object.create(ExpressionContext.prototype);
InExpressionContext.prototype.constructor = InExpressionContext;

InExpressionContext.prototype.IN = function() {
    return this.getToken(EParser.IN, 0);
};

InExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
InExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterInExpression(this);
	}
};

InExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitInExpression(this);
	}
};


function CastExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // Category_or_any_typeContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CastExpressionContext.prototype.constructor = CastExpressionContext;

CastExpressionContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

CastExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CastExpressionContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};
CastExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCastExpression(this);
	}
};

CastExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCastExpression(this);
	}
};


function InstanceExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Instance_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstanceExpressionContext.prototype = Object.create(ExpressionContext.prototype);
InstanceExpressionContext.prototype.constructor = InstanceExpressionContext;

InstanceExpressionContext.prototype.instance_expression = function() {
    return this.getTypedRuleContext(Instance_expressionContext,0);
};
InstanceExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterInstanceExpression(this);
	}
};

InstanceExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitInstanceExpression(this);
	}
};


function NotExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotExpressionContext.prototype.constructor = NotExpressionContext;

NotExpressionContext.prototype.NOT = function() {
    return this.getToken(EParser.NOT, 0);
};

NotExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
NotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNotExpression(this);
	}
};

NotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNotExpression(this);
	}
};


function GreaterThanExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GreaterThanExpressionContext.prototype = Object.create(ExpressionContext.prototype);
GreaterThanExpressionContext.prototype.constructor = GreaterThanExpressionContext;

GreaterThanExpressionContext.prototype.GT = function() {
    return this.getToken(EParser.GT, 0);
};

GreaterThanExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
GreaterThanExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterGreaterThanExpression(this);
	}
};

GreaterThanExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitGreaterThanExpression(this);
	}
};


function AddExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.op = null; // Token;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AddExpressionContext.prototype = Object.create(ExpressionContext.prototype);
AddExpressionContext.prototype.constructor = AddExpressionContext;

AddExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AddExpressionContext.prototype.PLUS = function() {
    return this.getToken(EParser.PLUS, 0);
};

AddExpressionContext.prototype.MINUS = function() {
    return this.getToken(EParser.MINUS, 0);
};
AddExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAddExpression(this);
	}
};

AddExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAddExpression(this);
	}
};


function ModuloExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ModuloExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ModuloExpressionContext.prototype.constructor = ModuloExpressionContext;

ModuloExpressionContext.prototype.modulo = function() {
    return this.getTypedRuleContext(ModuloContext,0);
};

ModuloExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ModuloExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterModuloExpression(this);
	}
};

ModuloExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitModuloExpression(this);
	}
};


function GreaterThanOrEqualExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GreaterThanOrEqualExpressionContext.prototype = Object.create(ExpressionContext.prototype);
GreaterThanOrEqualExpressionContext.prototype.constructor = GreaterThanOrEqualExpressionContext;

GreaterThanOrEqualExpressionContext.prototype.GTE = function() {
    return this.getToken(EParser.GTE, 0);
};

GreaterThanOrEqualExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
GreaterThanOrEqualExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterGreaterThanOrEqualExpression(this);
	}
};

GreaterThanOrEqualExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitGreaterThanOrEqualExpression(this);
	}
};


function NotContainsAllExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotContainsAllExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotContainsAllExpressionContext.prototype.constructor = NotContainsAllExpressionContext;

NotContainsAllExpressionContext.prototype.NOT = function() {
    return this.getToken(EParser.NOT, 0);
};

NotContainsAllExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(EParser.CONTAINS, 0);
};

NotContainsAllExpressionContext.prototype.ALL = function() {
    return this.getToken(EParser.ALL, 0);
};

NotContainsAllExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotContainsAllExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNotContainsAllExpression(this);
	}
};

NotContainsAllExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNotContainsAllExpression(this);
	}
};


function LessThanOrEqualExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LessThanOrEqualExpressionContext.prototype = Object.create(ExpressionContext.prototype);
LessThanOrEqualExpressionContext.prototype.constructor = LessThanOrEqualExpressionContext;

LessThanOrEqualExpressionContext.prototype.LTE = function() {
    return this.getToken(EParser.LTE, 0);
};

LessThanOrEqualExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
LessThanOrEqualExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLessThanOrEqualExpression(this);
	}
};

LessThanOrEqualExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLessThanOrEqualExpression(this);
	}
};


function MultiplyExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiplyExpressionContext.prototype = Object.create(ExpressionContext.prototype);
MultiplyExpressionContext.prototype.constructor = MultiplyExpressionContext;

MultiplyExpressionContext.prototype.multiply = function() {
    return this.getTypedRuleContext(MultiplyContext,0);
};

MultiplyExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
MultiplyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMultiplyExpression(this);
	}
};

MultiplyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMultiplyExpression(this);
	}
};


function MethodCallExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Unresolved_expressionContext;
    this.args = null; // Argument_assignment_listContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodCallExpressionContext.prototype = Object.create(ExpressionContext.prototype);
MethodCallExpressionContext.prototype.constructor = MethodCallExpressionContext;

MethodCallExpressionContext.prototype.unresolved_expression = function() {
    return this.getTypedRuleContext(Unresolved_expressionContext,0);
};

MethodCallExpressionContext.prototype.argument_assignment_list = function() {
    return this.getTypedRuleContext(Argument_assignment_listContext,0);
};
MethodCallExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMethodCallExpression(this);
	}
};

MethodCallExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMethodCallExpression(this);
	}
};


function AndExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AndExpressionContext.prototype = Object.create(ExpressionContext.prototype);
AndExpressionContext.prototype.constructor = AndExpressionContext;

AndExpressionContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

AndExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
AndExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAndExpression(this);
	}
};

AndExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAndExpression(this);
	}
};


function DivideExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DivideExpressionContext.prototype = Object.create(ExpressionContext.prototype);
DivideExpressionContext.prototype.constructor = DivideExpressionContext;

DivideExpressionContext.prototype.divide = function() {
    return this.getTypedRuleContext(DivideContext,0);
};

DivideExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
DivideExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDivideExpression(this);
	}
};

DivideExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDivideExpression(this);
	}
};


function UnresolvedExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Unresolved_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnresolvedExpressionContext.prototype = Object.create(ExpressionContext.prototype);
UnresolvedExpressionContext.prototype.constructor = UnresolvedExpressionContext;

UnresolvedExpressionContext.prototype.unresolved_expression = function() {
    return this.getTypedRuleContext(Unresolved_expressionContext,0);
};
UnresolvedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterUnresolvedExpression(this);
	}
};

UnresolvedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitUnresolvedExpression(this);
	}
};


function ConstructorExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Constructor_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstructorExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ConstructorExpressionContext.prototype.constructor = ConstructorExpressionContext;

ConstructorExpressionContext.prototype.constructor_expression = function() {
    return this.getTypedRuleContext(Constructor_expressionContext,0);
};
ConstructorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterConstructorExpression(this);
	}
};

ConstructorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitConstructorExpression(this);
	}
};


function ExecuteExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExecuteExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ExecuteExpressionContext.prototype.constructor = ExecuteExpressionContext;

ExecuteExpressionContext.prototype.EXECUTE = function() {
    return this.getToken(EParser.EXECUTE, 0);
};

ExecuteExpressionContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

ExecuteExpressionContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
ExecuteExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterExecuteExpression(this);
	}
};

ExecuteExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitExecuteExpression(this);
	}
};


function ContainsAllExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ContainsAllExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ContainsAllExpressionContext.prototype.constructor = ContainsAllExpressionContext;

ContainsAllExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(EParser.CONTAINS, 0);
};

ContainsAllExpressionContext.prototype.ALL = function() {
    return this.getToken(EParser.ALL, 0);
};

ContainsAllExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ContainsAllExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterContainsAllExpression(this);
	}
};

ContainsAllExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitContainsAllExpression(this);
	}
};


function LessThanExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LessThanExpressionContext.prototype = Object.create(ExpressionContext.prototype);
LessThanExpressionContext.prototype.constructor = LessThanExpressionContext;

LessThanExpressionContext.prototype.LT = function() {
    return this.getToken(EParser.LT, 0);
};

LessThanExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
LessThanExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLessThanExpression(this);
	}
};

LessThanExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLessThanExpression(this);
	}
};


function NotInExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotInExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotInExpressionContext.prototype.constructor = NotInExpressionContext;

NotInExpressionContext.prototype.NOT = function() {
    return this.getToken(EParser.NOT, 0);
};

NotInExpressionContext.prototype.IN = function() {
    return this.getToken(EParser.IN, 0);
};

NotInExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotInExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNotInExpression(this);
	}
};

NotInExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNotInExpression(this);
	}
};


function NotContainsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotContainsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotContainsExpressionContext.prototype.constructor = NotContainsExpressionContext;

NotContainsExpressionContext.prototype.NOT = function() {
    return this.getToken(EParser.NOT, 0);
};

NotContainsExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(EParser.CONTAINS, 0);
};

NotContainsExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NotContainsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNotContainsExpression(this);
	}
};

NotContainsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNotContainsExpression(this);
	}
};


function ContainsAnyExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ContainsAnyExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ContainsAnyExpressionContext.prototype.constructor = ContainsAnyExpressionContext;

ContainsAnyExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(EParser.CONTAINS, 0);
};

ContainsAnyExpressionContext.prototype.ANY = function() {
    return this.getToken(EParser.ANY, 0);
};

ContainsAnyExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ContainsAnyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterContainsAnyExpression(this);
	}
};

ContainsAnyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitContainsAnyExpression(this);
	}
};


function IsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // Is_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IsExpressionContext.prototype.constructor = IsExpressionContext;

IsExpressionContext.prototype.IS = function() {
    return this.getToken(EParser.IS, 0);
};

IsExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IsExpressionContext.prototype.is_expression = function() {
    return this.getTypedRuleContext(Is_expressionContext,0);
};
IsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIsExpression(this);
	}
};

IsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIsExpression(this);
	}
};


function InvocationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Invocation_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InvocationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
InvocationExpressionContext.prototype.constructor = InvocationExpressionContext;

InvocationExpressionContext.prototype.invocation_expression = function() {
    return this.getTypedRuleContext(Invocation_expressionContext,0);
};
InvocationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterInvocationExpression(this);
	}
};

InvocationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitInvocationExpression(this);
	}
};


function MinusExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MinusExpressionContext.prototype = Object.create(ExpressionContext.prototype);
MinusExpressionContext.prototype.constructor = MinusExpressionContext;

MinusExpressionContext.prototype.MINUS = function() {
    return this.getToken(EParser.MINUS, 0);
};

MinusExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
MinusExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMinusExpression(this);
	}
};

MinusExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMinusExpression(this);
	}
};


function ReadExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Read_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReadExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ReadExpressionContext.prototype.constructor = ReadExpressionContext;

ReadExpressionContext.prototype.read_expression = function() {
    return this.getTypedRuleContext(Read_expressionContext,0);
};
ReadExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterReadExpression(this);
	}
};

ReadExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitReadExpression(this);
	}
};


function FetchExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Fetch_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FetchExpressionContext.prototype = Object.create(ExpressionContext.prototype);
FetchExpressionContext.prototype.constructor = FetchExpressionContext;

FetchExpressionContext.prototype.fetch_expression = function() {
    return this.getTypedRuleContext(Fetch_expressionContext,0);
};
FetchExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterFetchExpression(this);
	}
};

FetchExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitFetchExpression(this);
	}
};


function IsNotExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.right = null; // Is_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsNotExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IsNotExpressionContext.prototype.constructor = IsNotExpressionContext;

IsNotExpressionContext.prototype.IS = function() {
    return this.getToken(EParser.IS, 0);
};

IsNotExpressionContext.prototype.NOT = function() {
    return this.getToken(EParser.NOT, 0);
};

IsNotExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IsNotExpressionContext.prototype.is_expression = function() {
    return this.getTypedRuleContext(Is_expressionContext,0);
};
IsNotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIsNotExpression(this);
	}
};

IsNotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIsNotExpression(this);
	}
};


function DocumentExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.exp = null; // Document_expressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DocumentExpressionContext.prototype = Object.create(ExpressionContext.prototype);
DocumentExpressionContext.prototype.constructor = DocumentExpressionContext;

DocumentExpressionContext.prototype.document_expression = function() {
    return this.getTypedRuleContext(Document_expressionContext,0);
};
DocumentExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDocumentExpression(this);
	}
};

DocumentExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDocumentExpression(this);
	}
};



EParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 74;
    this.enterRecursionRule(localctx, 74, EParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 922;
        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MinusExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 897;
            this.match(EParser.MINUS);
            this.state = 898; 
            localctx.exp = this.expression(38);
            break;

        case 2:
            localctx = new NotExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 899;
            this.match(EParser.NOT);
            this.state = 900; 
            localctx.exp = this.expression(37);
            break;

        case 3:
            localctx = new CodeExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 901;
            this.match(EParser.CODE);
            this.state = 902;
            this.match(EParser.COLON);
            this.state = 903; 
            localctx.exp = this.expression(10);
            break;

        case 4:
            localctx = new InstanceExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 904; 
            localctx.exp = this.instance_expression(0);
            break;

        case 5:
            localctx = new UnresolvedExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 905; 
            localctx.exp = this.unresolved_expression(0);
            break;

        case 6:
            localctx = new MethodCallExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 906; 
            localctx.exp = this.unresolved_expression(0);
            this.state = 907; 
            localctx.args = this.argument_assignment_list();
            break;

        case 7:
            localctx = new ExecuteExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 909;
            this.match(EParser.EXECUTE);
            this.state = 910;
            this.match(EParser.COLON);
            this.state = 911; 
            localctx.name = this.variable_identifier();
            break;

        case 8:
            localctx = new ClosureExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 912;
            this.match(EParser.METHOD_T);
            this.state = 913;
            this.match(EParser.COLON);
            this.state = 914; 
            localctx.name = this.method_identifier();
            break;

        case 9:
            localctx = new DocumentExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 915; 
            localctx.exp = this.document_expression();
            break;

        case 10:
            localctx = new ConstructorExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 916; 
            localctx.exp = this.constructor_expression();
            break;

        case 11:
            localctx = new FetchExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 917; 
            localctx.exp = this.fetch_expression();
            break;

        case 12:
            localctx = new ReadExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 918; 
            localctx.exp = this.read_expression();
            break;

        case 13:
            localctx = new SortedExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 919; 
            localctx.exp = this.sorted_expression();
            break;

        case 14:
            localctx = new AmbiguousExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 920; 
            localctx.exp = this.ambiguous_expression();
            break;

        case 15:
            localctx = new InvocationExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 921; 
            localctx.exp = this.invocation_expression();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1020;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,43,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1018;
                var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new MultiplyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 924;
                    if (!( this.precpred(this._ctx, 36))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 36)");
                    }
                    this.state = 925; 
                    this.multiply();
                    this.state = 926; 
                    localctx.right = this.expression(37);
                    break;

                case 2:
                    localctx = new DivideExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 928;
                    if (!( this.precpred(this._ctx, 35))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 35)");
                    }
                    this.state = 929; 
                    this.divide();
                    this.state = 930; 
                    localctx.right = this.expression(36);
                    break;

                case 3:
                    localctx = new ModuloExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 932;
                    if (!( this.precpred(this._ctx, 34))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 34)");
                    }
                    this.state = 933; 
                    this.modulo();
                    this.state = 934; 
                    localctx.right = this.expression(35);
                    break;

                case 4:
                    localctx = new IntDivideExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 936;
                    if (!( this.precpred(this._ctx, 33))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 33)");
                    }
                    this.state = 937; 
                    this.idivide();
                    this.state = 938; 
                    localctx.right = this.expression(34);
                    break;

                case 5:
                    localctx = new AddExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 940;
                    if (!( this.precpred(this._ctx, 32))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 32)");
                    }
                    this.state = 941;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===EParser.PLUS || _la===EParser.MINUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    this.consume();
                    this.state = 942; 
                    localctx.right = this.expression(33);
                    break;

                case 6:
                    localctx = new LessThanExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 943;
                    if (!( this.precpred(this._ctx, 31))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 31)");
                    }
                    this.state = 944;
                    this.match(EParser.LT);
                    this.state = 945; 
                    localctx.right = this.expression(32);
                    break;

                case 7:
                    localctx = new LessThanOrEqualExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 946;
                    if (!( this.precpred(this._ctx, 30))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 30)");
                    }
                    this.state = 947;
                    this.match(EParser.LTE);
                    this.state = 948; 
                    localctx.right = this.expression(31);
                    break;

                case 8:
                    localctx = new GreaterThanExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 949;
                    if (!( this.precpred(this._ctx, 29))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 29)");
                    }
                    this.state = 950;
                    this.match(EParser.GT);
                    this.state = 951; 
                    localctx.right = this.expression(30);
                    break;

                case 9:
                    localctx = new GreaterThanOrEqualExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 952;
                    if (!( this.precpred(this._ctx, 28))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
                    }
                    this.state = 953;
                    this.match(EParser.GTE);
                    this.state = 954; 
                    localctx.right = this.expression(29);
                    break;

                case 10:
                    localctx = new EqualsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 955;
                    if (!( this.precpred(this._ctx, 25))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                    }
                    this.state = 956;
                    this.match(EParser.EQ);
                    this.state = 957; 
                    localctx.right = this.expression(26);
                    break;

                case 11:
                    localctx = new NotEqualsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 958;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 959;
                    this.match(EParser.LTGT);
                    this.state = 960; 
                    localctx.right = this.expression(25);
                    break;

                case 12:
                    localctx = new RoughlyEqualsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 961;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 962;
                    this.match(EParser.TILDE);
                    this.state = 963; 
                    localctx.right = this.expression(24);
                    break;

                case 13:
                    localctx = new OrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 964;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 965;
                    this.match(EParser.OR);
                    this.state = 966; 
                    localctx.right = this.expression(23);
                    break;

                case 14:
                    localctx = new AndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 967;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 968;
                    this.match(EParser.AND);
                    this.state = 969; 
                    localctx.right = this.expression(22);
                    break;

                case 15:
                    localctx = new TernaryExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.ifTrue = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 970;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 971;
                    this.match(EParser.IF);
                    this.state = 972; 
                    localctx.test = this.expression(0);
                    this.state = 973;
                    this.match(EParser.ELSE);
                    this.state = 974; 
                    localctx.ifFalse = this.expression(21);
                    break;

                case 16:
                    localctx = new InExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 976;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 977;
                    this.match(EParser.IN);
                    this.state = 978; 
                    localctx.right = this.expression(19);
                    break;

                case 17:
                    localctx = new ContainsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 979;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 980;
                    this.match(EParser.CONTAINS);
                    this.state = 981; 
                    localctx.right = this.expression(18);
                    break;

                case 18:
                    localctx = new ContainsAllExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 982;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 983;
                    this.match(EParser.CONTAINS);
                    this.state = 984;
                    this.match(EParser.ALL);
                    this.state = 985; 
                    localctx.right = this.expression(17);
                    break;

                case 19:
                    localctx = new ContainsAnyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 986;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 987;
                    this.match(EParser.CONTAINS);
                    this.state = 988;
                    this.match(EParser.ANY);
                    this.state = 989; 
                    localctx.right = this.expression(16);
                    break;

                case 20:
                    localctx = new NotInExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 990;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 991;
                    this.match(EParser.NOT);
                    this.state = 992;
                    this.match(EParser.IN);
                    this.state = 993; 
                    localctx.right = this.expression(15);
                    break;

                case 21:
                    localctx = new NotContainsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 994;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 995;
                    this.match(EParser.NOT);
                    this.state = 996;
                    this.match(EParser.CONTAINS);
                    this.state = 997; 
                    localctx.right = this.expression(14);
                    break;

                case 22:
                    localctx = new NotContainsAllExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 998;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 999;
                    this.match(EParser.NOT);
                    this.state = 1000;
                    this.match(EParser.CONTAINS);
                    this.state = 1001;
                    this.match(EParser.ALL);
                    this.state = 1002; 
                    localctx.right = this.expression(13);
                    break;

                case 23:
                    localctx = new NotContainsAnyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1003;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 1004;
                    this.match(EParser.NOT);
                    this.state = 1005;
                    this.match(EParser.CONTAINS);
                    this.state = 1006;
                    this.match(EParser.ANY);
                    this.state = 1007; 
                    localctx.right = this.expression(12);
                    break;

                case 24:
                    localctx = new IsNotExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1008;
                    if (!( this.precpred(this._ctx, 27))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
                    }
                    this.state = 1009;
                    this.match(EParser.IS);
                    this.state = 1010;
                    this.match(EParser.NOT);
                    this.state = 1011; 
                    localctx.right = this.is_expression();
                    break;

                case 25:
                    localctx = new IsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1012;
                    if (!( this.precpred(this._ctx, 26))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
                    }
                    this.state = 1013;
                    this.match(EParser.IS);
                    this.state = 1014; 
                    localctx.right = this.is_expression();
                    break;

                case 26:
                    localctx = new CastExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression);
                    this.state = 1015;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 1016;
                    this.match(EParser.AS);
                    this.state = 1017; 
                    localctx.right = this.category_or_any_type();
                    break;

                } 
            }
            this.state = 1022;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,43,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Unresolved_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_unresolved_expression;
    return this;
}

Unresolved_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unresolved_expressionContext.prototype.constructor = Unresolved_expressionContext;


 
Unresolved_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function UnresolvedSelectorContext(parser, ctx) {
	Unresolved_expressionContext.call(this, parser);
    this.parent = null; // Unresolved_expressionContext;
    this.selector = null; // Unresolved_selectorContext;
    Unresolved_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnresolvedSelectorContext.prototype = Object.create(Unresolved_expressionContext.prototype);
UnresolvedSelectorContext.prototype.constructor = UnresolvedSelectorContext;

UnresolvedSelectorContext.prototype.unresolved_expression = function() {
    return this.getTypedRuleContext(Unresolved_expressionContext,0);
};

UnresolvedSelectorContext.prototype.unresolved_selector = function() {
    return this.getTypedRuleContext(Unresolved_selectorContext,0);
};
UnresolvedSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterUnresolvedSelector(this);
	}
};

UnresolvedSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitUnresolvedSelector(this);
	}
};


function UnresolvedIdentifierContext(parser, ctx) {
	Unresolved_expressionContext.call(this, parser);
    this.name = null; // IdentifierContext;
    Unresolved_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnresolvedIdentifierContext.prototype = Object.create(Unresolved_expressionContext.prototype);
UnresolvedIdentifierContext.prototype.constructor = UnresolvedIdentifierContext;

UnresolvedIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
UnresolvedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterUnresolvedIdentifier(this);
	}
};

UnresolvedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitUnresolvedIdentifier(this);
	}
};



EParser.prototype.unresolved_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Unresolved_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 76;
    this.enterRecursionRule(localctx, 76, EParser.RULE_unresolved_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new UnresolvedIdentifierContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1024; 
        localctx.name = this.identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1030;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,44,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new UnresolvedSelectorContext(this, new Unresolved_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_unresolved_expression);
                this.state = 1026;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1027; 
                localctx.selector = this.unresolved_selector(); 
            }
            this.state = 1032;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,44,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Unresolved_selectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_unresolved_selector;
    this.name = null; // IdentifierContext
    return this;
}

Unresolved_selectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unresolved_selectorContext.prototype.constructor = Unresolved_selectorContext;

Unresolved_selectorContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

Unresolved_selectorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Unresolved_selectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterUnresolved_selector(this);
	}
};

Unresolved_selectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitUnresolved_selector(this);
	}
};




EParser.prototype.unresolved_selector = function() {

    var localctx = new Unresolved_selectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, EParser.RULE_unresolved_selector);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1033;
        if (!( this.wasNot(EParser.WS))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
        }
        this.state = 1034;
        this.match(EParser.DOT);
        this.state = 1035; 
        localctx.name = this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Invocation_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_invocation_expression;
    this.name = null; // Variable_identifierContext
    return this;
}

Invocation_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Invocation_expressionContext.prototype.constructor = Invocation_expressionContext;

Invocation_expressionContext.prototype.INVOKE = function() {
    return this.getToken(EParser.INVOKE, 0);
};

Invocation_expressionContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Invocation_expressionContext.prototype.invocation_trailer = function() {
    return this.getTypedRuleContext(Invocation_trailerContext,0);
};

Invocation_expressionContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Invocation_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterInvocation_expression(this);
	}
};

Invocation_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitInvocation_expression(this);
	}
};




EParser.prototype.invocation_expression = function() {

    var localctx = new Invocation_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, EParser.RULE_invocation_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1037;
        this.match(EParser.INVOKE);
        this.state = 1038;
        this.match(EParser.COLON);
        this.state = 1039; 
        localctx.name = this.variable_identifier();
        this.state = 1040; 
        this.invocation_trailer();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Invocation_trailerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_invocation_trailer;
    return this;
}

Invocation_trailerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Invocation_trailerContext.prototype.constructor = Invocation_trailerContext;


Invocation_trailerContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterInvocation_trailer(this);
	}
};

Invocation_trailerContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitInvocation_trailer(this);
	}
};




EParser.prototype.invocation_trailer = function() {

    var localctx = new Invocation_trailerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, EParser.RULE_invocation_trailer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1042;
        if (!( this.willBe(EParser.LF))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.willBe(EParser.LF)");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Instance_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_instance_expression;
    return this;
}

Instance_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Instance_expressionContext.prototype.constructor = Instance_expressionContext;


 
Instance_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function SelectableExpressionContext(parser, ctx) {
	Instance_expressionContext.call(this, parser);
    this.parent = null; // Selectable_expressionContext;
    Instance_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectableExpressionContext.prototype = Object.create(Instance_expressionContext.prototype);
SelectableExpressionContext.prototype.constructor = SelectableExpressionContext;

SelectableExpressionContext.prototype.selectable_expression = function() {
    return this.getTypedRuleContext(Selectable_expressionContext,0);
};
SelectableExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSelectableExpression(this);
	}
};

SelectableExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSelectableExpression(this);
	}
};


function SelectorExpressionContext(parser, ctx) {
	Instance_expressionContext.call(this, parser);
    this.parent = null; // Instance_expressionContext;
    this.selector = null; // Instance_selectorContext;
    Instance_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectorExpressionContext.prototype = Object.create(Instance_expressionContext.prototype);
SelectorExpressionContext.prototype.constructor = SelectorExpressionContext;

SelectorExpressionContext.prototype.instance_expression = function() {
    return this.getTypedRuleContext(Instance_expressionContext,0);
};

SelectorExpressionContext.prototype.instance_selector = function() {
    return this.getTypedRuleContext(Instance_selectorContext,0);
};
SelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSelectorExpression(this);
	}
};

SelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSelectorExpression(this);
	}
};



EParser.prototype.instance_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Instance_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 84;
    this.enterRecursionRule(localctx, 84, EParser.RULE_instance_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new SelectableExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1045; 
        localctx.parent = this.selectable_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1051;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new SelectorExpressionContext(this, new Instance_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_instance_expression);
                this.state = 1047;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1048; 
                localctx.selector = this.instance_selector(); 
            }
            this.state = 1053;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Instance_selectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_instance_selector;
    return this;
}

Instance_selectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Instance_selectorContext.prototype.constructor = Instance_selectorContext;


 
Instance_selectorContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SliceSelectorContext(parser, ctx) {
	Instance_selectorContext.call(this, parser);
    this.xslice = null; // Slice_argumentsContext;
    Instance_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceSelectorContext.prototype = Object.create(Instance_selectorContext.prototype);
SliceSelectorContext.prototype.constructor = SliceSelectorContext;

SliceSelectorContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

SliceSelectorContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

SliceSelectorContext.prototype.slice_arguments = function() {
    return this.getTypedRuleContext(Slice_argumentsContext,0);
};
SliceSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSliceSelector(this);
	}
};

SliceSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSliceSelector(this);
	}
};


function MemberSelectorContext(parser, ctx) {
	Instance_selectorContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    Instance_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberSelectorContext.prototype = Object.create(Instance_selectorContext.prototype);
MemberSelectorContext.prototype.constructor = MemberSelectorContext;

MemberSelectorContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

MemberSelectorContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
MemberSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMemberSelector(this);
	}
};

MemberSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMemberSelector(this);
	}
};


function ItemSelectorContext(parser, ctx) {
	Instance_selectorContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Instance_selectorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ItemSelectorContext.prototype = Object.create(Instance_selectorContext.prototype);
ItemSelectorContext.prototype.constructor = ItemSelectorContext;

ItemSelectorContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

ItemSelectorContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

ItemSelectorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ItemSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterItemSelector(this);
	}
};

ItemSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitItemSelector(this);
	}
};



EParser.prototype.instance_selector = function() {

    var localctx = new Instance_selectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, EParser.RULE_instance_selector);
    try {
        this.state = 1067;
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MemberSelectorContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1054;
            if (!( this.wasNot(EParser.WS))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
            }
            this.state = 1055;
            this.match(EParser.DOT);
            this.state = 1056; 
            localctx.name = this.variable_identifier();
            break;

        case 2:
            localctx = new SliceSelectorContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1057;
            if (!( this.wasNot(EParser.WS))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
            }
            this.state = 1058;
            this.match(EParser.LBRAK);
            this.state = 1059; 
            localctx.xslice = this.slice_arguments();
            this.state = 1060;
            this.match(EParser.RBRAK);
            break;

        case 3:
            localctx = new ItemSelectorContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1062;
            if (!( this.wasNot(EParser.WS))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
            }
            this.state = 1063;
            this.match(EParser.LBRAK);
            this.state = 1064; 
            localctx.exp = this.expression(0);
            this.state = 1065;
            this.match(EParser.RBRAK);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Document_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_document_expression;
    return this;
}

Document_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Document_expressionContext.prototype.constructor = Document_expressionContext;

Document_expressionContext.prototype.document_type = function() {
    return this.getTypedRuleContext(Document_typeContext,0);
};

Document_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDocument_expression(this);
	}
};

Document_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDocument_expression(this);
	}
};




EParser.prototype.document_expression = function() {

    var localctx = new Document_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, EParser.RULE_document_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1069; 
        this.document_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constructor_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_constructor_expression;
    return this;
}

Constructor_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constructor_expressionContext.prototype.constructor = Constructor_expressionContext;


 
Constructor_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ConstructorNoFromContext(parser, ctx) {
	Constructor_expressionContext.call(this, parser);
    this.typ = null; // Category_typeContext;
    this.args = null; // With_argument_assignment_listContext;
    this.arg = null; // Argument_assignmentContext;
    Constructor_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstructorNoFromContext.prototype = Object.create(Constructor_expressionContext.prototype);
ConstructorNoFromContext.prototype.constructor = ConstructorNoFromContext;

ConstructorNoFromContext.prototype.category_type = function() {
    return this.getTypedRuleContext(Category_typeContext,0);
};

ConstructorNoFromContext.prototype.with_argument_assignment_list = function() {
    return this.getTypedRuleContext(With_argument_assignment_listContext,0);
};

ConstructorNoFromContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

ConstructorNoFromContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};
ConstructorNoFromContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterConstructorNoFrom(this);
	}
};

ConstructorNoFromContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitConstructorNoFrom(this);
	}
};


function ConstructorFromContext(parser, ctx) {
	Constructor_expressionContext.call(this, parser);
    this.typ = null; // Category_typeContext;
    this.firstArg = null; // ExpressionContext;
    this.args = null; // With_argument_assignment_listContext;
    this.arg = null; // Argument_assignmentContext;
    Constructor_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstructorFromContext.prototype = Object.create(Constructor_expressionContext.prototype);
ConstructorFromContext.prototype.constructor = ConstructorFromContext;

ConstructorFromContext.prototype.FROM = function() {
    return this.getToken(EParser.FROM, 0);
};

ConstructorFromContext.prototype.category_type = function() {
    return this.getTypedRuleContext(Category_typeContext,0);
};

ConstructorFromContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConstructorFromContext.prototype.with_argument_assignment_list = function() {
    return this.getTypedRuleContext(With_argument_assignment_listContext,0);
};

ConstructorFromContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

ConstructorFromContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

ConstructorFromContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};
ConstructorFromContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterConstructorFrom(this);
	}
};

ConstructorFromContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitConstructorFrom(this);
	}
};



EParser.prototype.constructor_expression = function() {

    var localctx = new Constructor_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, EParser.RULE_constructor_expression);
    var _la = 0; // Token type
    try {
        this.state = 1092;
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ConstructorFromContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1071; 
            localctx.typ = this.category_type();
            this.state = 1072;
            this.match(EParser.FROM);
            this.state = 1073; 
            localctx.firstArg = this.expression(0);
            this.state = 1082;
            var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
            if(la_===1) {
                this.state = 1075;
                _la = this._input.LA(1);
                if(_la===EParser.COMMA) {
                    this.state = 1074;
                    this.match(EParser.COMMA);
                }

                this.state = 1077; 
                localctx.args = this.with_argument_assignment_list(0);
                this.state = 1080;
                var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
                if(la_===1) {
                    this.state = 1078;
                    this.match(EParser.AND);
                    this.state = 1079; 
                    localctx.arg = this.argument_assignment();

                }

            }
            break;

        case 2:
            localctx = new ConstructorNoFromContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1084; 
            localctx.typ = this.category_type();
            this.state = 1090;
            var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
            if(la_===1) {
                this.state = 1085; 
                localctx.args = this.with_argument_assignment_list(0);
                this.state = 1088;
                var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
                if(la_===1) {
                    this.state = 1086;
                    this.match(EParser.AND);
                    this.state = 1087; 
                    localctx.arg = this.argument_assignment();

                }

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Read_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_read_expression;
    this.source = null; // ExpressionContext
    return this;
}

Read_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Read_expressionContext.prototype.constructor = Read_expressionContext;

Read_expressionContext.prototype.READ = function() {
    return this.getToken(EParser.READ, 0);
};

Read_expressionContext.prototype.FROM = function() {
    return this.getToken(EParser.FROM, 0);
};

Read_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Read_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterRead_expression(this);
	}
};

Read_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitRead_expression(this);
	}
};




EParser.prototype.read_expression = function() {

    var localctx = new Read_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, EParser.RULE_read_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1094;
        this.match(EParser.READ);
        this.state = 1095;
        this.match(EParser.FROM);
        this.state = 1096; 
        localctx.source = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Write_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_write_statement;
    this.what = null; // ExpressionContext
    this.target = null; // ExpressionContext
    return this;
}

Write_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Write_statementContext.prototype.constructor = Write_statementContext;

Write_statementContext.prototype.WRITE = function() {
    return this.getToken(EParser.WRITE, 0);
};

Write_statementContext.prototype.TO = function() {
    return this.getToken(EParser.TO, 0);
};

Write_statementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Write_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterWrite_statement(this);
	}
};

Write_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitWrite_statement(this);
	}
};




EParser.prototype.write_statement = function() {

    var localctx = new Write_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, EParser.RULE_write_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1098;
        this.match(EParser.WRITE);
        this.state = 1099; 
        localctx.what = this.expression(0);
        this.state = 1100;
        this.match(EParser.TO);
        this.state = 1101; 
        localctx.target = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ambiguous_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_ambiguous_expression;
    this.method = null; // Unresolved_expressionContext
    this.exp = null; // ExpressionContext
    return this;
}

Ambiguous_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ambiguous_expressionContext.prototype.constructor = Ambiguous_expressionContext;

Ambiguous_expressionContext.prototype.MINUS = function() {
    return this.getToken(EParser.MINUS, 0);
};

Ambiguous_expressionContext.prototype.unresolved_expression = function() {
    return this.getTypedRuleContext(Unresolved_expressionContext,0);
};

Ambiguous_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Ambiguous_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAmbiguous_expression(this);
	}
};

Ambiguous_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAmbiguous_expression(this);
	}
};




EParser.prototype.ambiguous_expression = function() {

    var localctx = new Ambiguous_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, EParser.RULE_ambiguous_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1103; 
        localctx.method = this.unresolved_expression(0);
        this.state = 1104;
        this.match(EParser.MINUS);
        this.state = 1105; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fetch_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_fetch_expression;
    this.name = null; // Variable_identifierContext
    this.source = null; // ExpressionContext
    this.xfilter = null; // ExpressionContext
    return this;
}

Fetch_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fetch_expressionContext.prototype.constructor = Fetch_expressionContext;

Fetch_expressionContext.prototype.FETCH = function() {
    return this.getToken(EParser.FETCH, 0);
};

Fetch_expressionContext.prototype.ANY = function() {
    return this.getToken(EParser.ANY, 0);
};

Fetch_expressionContext.prototype.FROM = function() {
    return this.getToken(EParser.FROM, 0);
};

Fetch_expressionContext.prototype.WHERE = function() {
    return this.getToken(EParser.WHERE, 0);
};

Fetch_expressionContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Fetch_expressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Fetch_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterFetch_expression(this);
	}
};

Fetch_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitFetch_expression(this);
	}
};




EParser.prototype.fetch_expression = function() {

    var localctx = new Fetch_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, EParser.RULE_fetch_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1107;
        this.match(EParser.FETCH);
        this.state = 1108;
        this.match(EParser.ANY);
        this.state = 1109; 
        localctx.name = this.variable_identifier();
        this.state = 1110;
        this.match(EParser.FROM);
        this.state = 1111; 
        localctx.source = this.expression(0);
        this.state = 1112;
        this.match(EParser.WHERE);
        this.state = 1113; 
        localctx.xfilter = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sorted_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_sorted_expression;
    this.source = null; // Instance_expressionContext
    this.key = null; // Instance_expressionContext
    return this;
}

Sorted_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sorted_expressionContext.prototype.constructor = Sorted_expressionContext;

Sorted_expressionContext.prototype.SORTED = function() {
    return this.getToken(EParser.SORTED, 0);
};

Sorted_expressionContext.prototype.instance_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Instance_expressionContext);
    } else {
        return this.getTypedRuleContext(Instance_expressionContext,i);
    }
};

Sorted_expressionContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

Sorted_expressionContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Sorted_expressionContext.prototype.key_token = function() {
    return this.getTypedRuleContext(Key_tokenContext,0);
};

Sorted_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSorted_expression(this);
	}
};

Sorted_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSorted_expression(this);
	}
};




EParser.prototype.sorted_expression = function() {

    var localctx = new Sorted_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, EParser.RULE_sorted_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1115;
        this.match(EParser.SORTED);
        this.state = 1116; 
        localctx.source = this.instance_expression(0);
        this.state = 1122;
        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
        if(la_===1) {
            this.state = 1117;
            this.match(EParser.WITH);
            this.state = 1118; 
            localctx.key = this.instance_expression(0);
            this.state = 1119;
            this.match(EParser.AS);
            this.state = 1120; 
            this.key_token();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Argument_assignment_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_argument_assignment_list;
    return this;
}

Argument_assignment_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_assignment_listContext.prototype.constructor = Argument_assignment_listContext;


 
Argument_assignment_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ArgumentAssignmentListExpressionContext(parser, ctx) {
	Argument_assignment_listContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    this.items = null; // With_argument_assignment_listContext;
    this.item = null; // Argument_assignmentContext;
    Argument_assignment_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentAssignmentListExpressionContext.prototype = Object.create(Argument_assignment_listContext.prototype);
ArgumentAssignmentListExpressionContext.prototype.constructor = ArgumentAssignmentListExpressionContext;

ArgumentAssignmentListExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ArgumentAssignmentListExpressionContext.prototype.with_argument_assignment_list = function() {
    return this.getTypedRuleContext(With_argument_assignment_listContext,0);
};

ArgumentAssignmentListExpressionContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

ArgumentAssignmentListExpressionContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};
ArgumentAssignmentListExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterArgumentAssignmentListExpression(this);
	}
};

ArgumentAssignmentListExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitArgumentAssignmentListExpression(this);
	}
};


function ArgumentAssignmentListNoExpressionContext(parser, ctx) {
	Argument_assignment_listContext.call(this, parser);
    this.items = null; // With_argument_assignment_listContext;
    this.item = null; // Argument_assignmentContext;
    Argument_assignment_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentAssignmentListNoExpressionContext.prototype = Object.create(Argument_assignment_listContext.prototype);
ArgumentAssignmentListNoExpressionContext.prototype.constructor = ArgumentAssignmentListNoExpressionContext;

ArgumentAssignmentListNoExpressionContext.prototype.with_argument_assignment_list = function() {
    return this.getTypedRuleContext(With_argument_assignment_listContext,0);
};

ArgumentAssignmentListNoExpressionContext.prototype.AND = function() {
    return this.getToken(EParser.AND, 0);
};

ArgumentAssignmentListNoExpressionContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};
ArgumentAssignmentListNoExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterArgumentAssignmentListNoExpression(this);
	}
};

ArgumentAssignmentListNoExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitArgumentAssignmentListNoExpression(this);
	}
};



EParser.prototype.argument_assignment_list = function() {

    var localctx = new Argument_assignment_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, EParser.RULE_argument_assignment_list);
    try {
        this.state = 1138;
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ArgumentAssignmentListExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1124;
            if (!( this.was(EParser.WS))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.was(EParser.WS)");
            }
            this.state = 1125; 
            localctx.exp = this.expression(0);
            this.state = 1131;
            var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
            if(la_===1) {
                this.state = 1126; 
                localctx.items = this.with_argument_assignment_list(0);
                this.state = 1129;
                var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
                if(la_===1) {
                    this.state = 1127;
                    this.match(EParser.AND);
                    this.state = 1128; 
                    localctx.item = this.argument_assignment();

                }

            }
            break;

        case 2:
            localctx = new ArgumentAssignmentListNoExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1133; 
            localctx.items = this.with_argument_assignment_list(0);
            this.state = 1136;
            var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
            if(la_===1) {
                this.state = 1134;
                this.match(EParser.AND);
                this.state = 1135; 
                localctx.item = this.argument_assignment();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_argument_assignment_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_with_argument_assignment_list;
    return this;
}

With_argument_assignment_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_argument_assignment_listContext.prototype.constructor = With_argument_assignment_listContext;


 
With_argument_assignment_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ArgumentAssignmentListContext(parser, ctx) {
	With_argument_assignment_listContext.call(this, parser);
    this.item = null; // Argument_assignmentContext;
    With_argument_assignment_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentAssignmentListContext.prototype = Object.create(With_argument_assignment_listContext.prototype);
ArgumentAssignmentListContext.prototype.constructor = ArgumentAssignmentListContext;

ArgumentAssignmentListContext.prototype.WITH = function() {
    return this.getToken(EParser.WITH, 0);
};

ArgumentAssignmentListContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};
ArgumentAssignmentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterArgumentAssignmentList(this);
	}
};

ArgumentAssignmentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitArgumentAssignmentList(this);
	}
};


function ArgumentAssignmentListItemContext(parser, ctx) {
	With_argument_assignment_listContext.call(this, parser);
    this.items = null; // With_argument_assignment_listContext;
    this.item = null; // Argument_assignmentContext;
    With_argument_assignment_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentAssignmentListItemContext.prototype = Object.create(With_argument_assignment_listContext.prototype);
ArgumentAssignmentListItemContext.prototype.constructor = ArgumentAssignmentListItemContext;

ArgumentAssignmentListItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

ArgumentAssignmentListItemContext.prototype.with_argument_assignment_list = function() {
    return this.getTypedRuleContext(With_argument_assignment_listContext,0);
};

ArgumentAssignmentListItemContext.prototype.argument_assignment = function() {
    return this.getTypedRuleContext(Argument_assignmentContext,0);
};
ArgumentAssignmentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterArgumentAssignmentListItem(this);
	}
};

ArgumentAssignmentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitArgumentAssignmentListItem(this);
	}
};



EParser.prototype.with_argument_assignment_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new With_argument_assignment_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 104;
    this.enterRecursionRule(localctx, 104, EParser.RULE_with_argument_assignment_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new ArgumentAssignmentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1141;
        this.match(EParser.WITH);
        this.state = 1142; 
        localctx.item = this.argument_assignment();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1149;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ArgumentAssignmentListItemContext(this, new With_argument_assignment_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_with_argument_assignment_list);
                this.state = 1144;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1145;
                this.match(EParser.COMMA);
                this.state = 1146; 
                localctx.item = this.argument_assignment(); 
            }
            this.state = 1151;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Argument_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_argument_assignment;
    this.exp = null; // ExpressionContext
    this.name = null; // Variable_identifierContext
    return this;
}

Argument_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_assignmentContext.prototype.constructor = Argument_assignmentContext;

Argument_assignmentContext.prototype.AS = function() {
    return this.getToken(EParser.AS, 0);
};

Argument_assignmentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Argument_assignmentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Argument_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterArgument_assignment(this);
	}
};

Argument_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitArgument_assignment(this);
	}
};




EParser.prototype.argument_assignment = function() {

    var localctx = new Argument_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, EParser.RULE_argument_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1152; 
        localctx.exp = this.expression(0);
        this.state = 1153;
        this.match(EParser.AS);
        this.state = 1154; 
        localctx.name = this.variable_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assign_instance_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_assign_instance_statement;
    this.inst = null; // Assignable_instanceContext
    this.exp = null; // ExpressionContext
    return this;
}

Assign_instance_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assign_instance_statementContext.prototype.constructor = Assign_instance_statementContext;

Assign_instance_statementContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Assign_instance_statementContext.prototype.assignable_instance = function() {
    return this.getTypedRuleContext(Assignable_instanceContext,0);
};

Assign_instance_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Assign_instance_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAssign_instance_statement(this);
	}
};

Assign_instance_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAssign_instance_statement(this);
	}
};




EParser.prototype.assign_instance_statement = function() {

    var localctx = new Assign_instance_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, EParser.RULE_assign_instance_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1156; 
        localctx.inst = this.assignable_instance(0);
        this.state = 1157; 
        this.assign();
        this.state = 1158; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Child_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_child_instance;
    return this;
}

Child_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Child_instanceContext.prototype.constructor = Child_instanceContext;


 
Child_instanceContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MemberInstanceContext(parser, ctx) {
	Child_instanceContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    Child_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberInstanceContext.prototype = Object.create(Child_instanceContext.prototype);
MemberInstanceContext.prototype.constructor = MemberInstanceContext;

MemberInstanceContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

MemberInstanceContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
MemberInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMemberInstance(this);
	}
};

MemberInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMemberInstance(this);
	}
};


function ItemInstanceContext(parser, ctx) {
	Child_instanceContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Child_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ItemInstanceContext.prototype = Object.create(Child_instanceContext.prototype);
ItemInstanceContext.prototype.constructor = ItemInstanceContext;

ItemInstanceContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

ItemInstanceContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

ItemInstanceContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ItemInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterItemInstance(this);
	}
};

ItemInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitItemInstance(this);
	}
};



EParser.prototype.child_instance = function() {

    var localctx = new Child_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, EParser.RULE_child_instance);
    try {
        this.state = 1168;
        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MemberInstanceContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1160;
            if (!( this.wasNot(EParser.WS))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
            }
            this.state = 1161;
            this.match(EParser.DOT);
            this.state = 1162; 
            localctx.name = this.variable_identifier();
            break;

        case 2:
            localctx = new ItemInstanceContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1163;
            if (!( this.wasNot(EParser.WS))) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.wasNot(EParser.WS)");
            }
            this.state = 1164;
            this.match(EParser.LBRAK);
            this.state = 1165; 
            localctx.exp = this.expression(0);
            this.state = 1166;
            this.match(EParser.RBRAK);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assign_tuple_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_assign_tuple_statement;
    this.items = null; // Variable_identifier_listContext
    this.exp = null; // ExpressionContext
    return this;
}

Assign_tuple_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assign_tuple_statementContext.prototype.constructor = Assign_tuple_statementContext;

Assign_tuple_statementContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Assign_tuple_statementContext.prototype.variable_identifier_list = function() {
    return this.getTypedRuleContext(Variable_identifier_listContext,0);
};

Assign_tuple_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Assign_tuple_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAssign_tuple_statement(this);
	}
};

Assign_tuple_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAssign_tuple_statement(this);
	}
};




EParser.prototype.assign_tuple_statement = function() {

    var localctx = new Assign_tuple_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, EParser.RULE_assign_tuple_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1170; 
        localctx.items = this.variable_identifier_list(0);
        this.state = 1171; 
        this.assign();
        this.state = 1172; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LfsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_lfs;
    return this;
}

LfsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LfsContext.prototype.constructor = LfsContext;

LfsContext.prototype.LF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.LF);
    } else {
        return this.getToken(EParser.LF, i);
    }
};


LfsContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLfs(this);
	}
};

LfsContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLfs(this);
	}
};




EParser.prototype.lfs = function() {

    var localctx = new LfsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, EParser.RULE_lfs);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1177;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1174;
                this.match(EParser.LF); 
            }
            this.state = 1179;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LfpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_lfp;
    return this;
}

LfpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LfpContext.prototype.constructor = LfpContext;

LfpContext.prototype.LF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.LF);
    } else {
        return this.getToken(EParser.LF, i);
    }
};


LfpContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLfp(this);
	}
};

LfpContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLfp(this);
	}
};




EParser.prototype.lfp = function() {

    var localctx = new LfpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, EParser.RULE_lfp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1181; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1180;
            this.match(EParser.LF);
            this.state = 1183; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===EParser.LF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_indent;
    return this;
}

IndentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndentContext.prototype.constructor = IndentContext;

IndentContext.prototype.INDENT = function() {
    return this.getToken(EParser.INDENT, 0);
};

IndentContext.prototype.LF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.LF);
    } else {
        return this.getToken(EParser.LF, i);
    }
};


IndentContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIndent(this);
	}
};

IndentContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIndent(this);
	}
};




EParser.prototype.indent = function() {

    var localctx = new IndentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, EParser.RULE_indent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1186; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1185;
            this.match(EParser.LF);
            this.state = 1188; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===EParser.LF);
        this.state = 1190;
        this.match(EParser.INDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DedentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_dedent;
    return this;
}

DedentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DedentContext.prototype.constructor = DedentContext;

DedentContext.prototype.DEDENT = function() {
    return this.getToken(EParser.DEDENT, 0);
};

DedentContext.prototype.LF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.LF);
    } else {
        return this.getToken(EParser.LF, i);
    }
};


DedentContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDedent(this);
	}
};

DedentContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDedent(this);
	}
};




EParser.prototype.dedent = function() {

    var localctx = new DedentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, EParser.RULE_dedent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1195;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===EParser.LF) {
            this.state = 1192;
            this.match(EParser.LF);
            this.state = 1197;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1198;
        this.match(EParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Null_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_null_literal;
    return this;
}

Null_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Null_literalContext.prototype.constructor = Null_literalContext;

Null_literalContext.prototype.NOTHING = function() {
    return this.getToken(EParser.NOTHING, 0);
};

Null_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNull_literal(this);
	}
};

Null_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNull_literal(this);
	}
};




EParser.prototype.null_literal = function() {

    var localctx = new Null_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, EParser.RULE_null_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1200;
        this.match(EParser.NOTHING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declaration_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_declaration_list;
    return this;
}

Declaration_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declaration_listContext.prototype.constructor = Declaration_listContext;


 
Declaration_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FullDeclarationListContext(parser, ctx) {
	Declaration_listContext.call(this, parser);
    this.items = null; // DeclarationsContext;
    Declaration_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FullDeclarationListContext.prototype = Object.create(Declaration_listContext.prototype);
FullDeclarationListContext.prototype.constructor = FullDeclarationListContext;

FullDeclarationListContext.prototype.lfs = function() {
    return this.getTypedRuleContext(LfsContext,0);
};

FullDeclarationListContext.prototype.EOF = function() {
    return this.getToken(EParser.EOF, 0);
};

FullDeclarationListContext.prototype.declarations = function() {
    return this.getTypedRuleContext(DeclarationsContext,0);
};
FullDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterFullDeclarationList(this);
	}
};

FullDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitFullDeclarationList(this);
	}
};



EParser.prototype.declaration_list = function() {

    var localctx = new Declaration_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, EParser.RULE_declaration_list);
    var _la = 0; // Token type
    try {
        localctx = new FullDeclarationListContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1203;
        _la = this._input.LA(1);
        if(_la===EParser.DEFINE) {
            this.state = 1202; 
            localctx.items = this.declarations(0);
        }

        this.state = 1205; 
        this.lfs();
        this.state = 1206;
        this.match(EParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_declarations;
    return this;
}

DeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationsContext.prototype.constructor = DeclarationsContext;


 
DeclarationsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function DeclarationListContext(parser, ctx) {
	DeclarationsContext.call(this, parser);
    this.item = null; // DeclarationContext;
    DeclarationsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DeclarationListContext.prototype = Object.create(DeclarationsContext.prototype);
DeclarationListContext.prototype.constructor = DeclarationListContext;

DeclarationListContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};
DeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDeclarationList(this);
	}
};

DeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDeclarationList(this);
	}
};


function DeclarationListItemContext(parser, ctx) {
	DeclarationsContext.call(this, parser);
    this.items = null; // DeclarationsContext;
    this.item = null; // DeclarationContext;
    DeclarationsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DeclarationListItemContext.prototype = Object.create(DeclarationsContext.prototype);
DeclarationListItemContext.prototype.constructor = DeclarationListItemContext;

DeclarationListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

DeclarationListItemContext.prototype.declarations = function() {
    return this.getTypedRuleContext(DeclarationsContext,0);
};

DeclarationListItemContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};
DeclarationListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDeclarationListItem(this);
	}
};

DeclarationListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDeclarationListItem(this);
	}
};



EParser.prototype.declarations = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new DeclarationsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 126;
    this.enterRecursionRule(localctx, 126, EParser.RULE_declarations, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new DeclarationListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1209; 
        localctx.item = this.declaration();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1217;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new DeclarationListItemContext(this, new DeclarationsContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_declarations);
                this.state = 1211;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1212; 
                this.lfp();
                this.state = 1213; 
                localctx.item = this.declaration(); 
            }
            this.state = 1219;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;


 
DeclarationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CategoryDeclarationContext(parser, ctx) {
	DeclarationContext.call(this, parser);
    this.decl = null; // Category_declarationContext;
    DeclarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CategoryDeclarationContext.prototype = Object.create(DeclarationContext.prototype);
CategoryDeclarationContext.prototype.constructor = CategoryDeclarationContext;

CategoryDeclarationContext.prototype.category_declaration = function() {
    return this.getTypedRuleContext(Category_declarationContext,0);
};
CategoryDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCategoryDeclaration(this);
	}
};

CategoryDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCategoryDeclaration(this);
	}
};


function ResourceDeclarationContext(parser, ctx) {
	DeclarationContext.call(this, parser);
    this.decl = null; // Resource_declarationContext;
    DeclarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ResourceDeclarationContext.prototype = Object.create(DeclarationContext.prototype);
ResourceDeclarationContext.prototype.constructor = ResourceDeclarationContext;

ResourceDeclarationContext.prototype.resource_declaration = function() {
    return this.getTypedRuleContext(Resource_declarationContext,0);
};
ResourceDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterResourceDeclaration(this);
	}
};

ResourceDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitResourceDeclaration(this);
	}
};


function AttributeDeclarationContext(parser, ctx) {
	DeclarationContext.call(this, parser);
    this.decl = null; // Attribute_declarationContext;
    DeclarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AttributeDeclarationContext.prototype = Object.create(DeclarationContext.prototype);
AttributeDeclarationContext.prototype.constructor = AttributeDeclarationContext;

AttributeDeclarationContext.prototype.attribute_declaration = function() {
    return this.getTypedRuleContext(Attribute_declarationContext,0);
};
AttributeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAttributeDeclaration(this);
	}
};

AttributeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAttributeDeclaration(this);
	}
};


function MethodDeclarationContext(parser, ctx) {
	DeclarationContext.call(this, parser);
    this.decl = null; // Method_declarationContext;
    DeclarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodDeclarationContext.prototype = Object.create(DeclarationContext.prototype);
MethodDeclarationContext.prototype.constructor = MethodDeclarationContext;

MethodDeclarationContext.prototype.method_declaration = function() {
    return this.getTypedRuleContext(Method_declarationContext,0);
};
MethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMethodDeclaration(this);
	}
};

MethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMethodDeclaration(this);
	}
};


function EnumDeclarationContext(parser, ctx) {
	DeclarationContext.call(this, parser);
    this.decl = null; // Enum_declarationContext;
    DeclarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EnumDeclarationContext.prototype = Object.create(DeclarationContext.prototype);
EnumDeclarationContext.prototype.constructor = EnumDeclarationContext;

EnumDeclarationContext.prototype.enum_declaration = function() {
    return this.getTypedRuleContext(Enum_declarationContext,0);
};
EnumDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterEnumDeclaration(this);
	}
};

EnumDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitEnumDeclaration(this);
	}
};



EParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, EParser.RULE_declaration);
    try {
        this.state = 1225;
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AttributeDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1220; 
            localctx.decl = this.attribute_declaration();
            break;

        case 2:
            localctx = new CategoryDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1221; 
            localctx.decl = this.category_declaration();
            break;

        case 3:
            localctx = new ResourceDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1222; 
            localctx.decl = this.resource_declaration();
            break;

        case 4:
            localctx = new EnumDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1223; 
            localctx.decl = this.enum_declaration();
            break;

        case 5:
            localctx = new MethodDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1224; 
            localctx.decl = this.method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Resource_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_resource_declaration;
    this.decl = null; // Native_resource_declarationContext
    return this;
}

Resource_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Resource_declarationContext.prototype.constructor = Resource_declarationContext;

Resource_declarationContext.prototype.native_resource_declaration = function() {
    return this.getTypedRuleContext(Native_resource_declarationContext,0);
};

Resource_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterResource_declaration(this);
	}
};

Resource_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitResource_declaration(this);
	}
};




EParser.prototype.resource_declaration = function() {

    var localctx = new Resource_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, EParser.RULE_resource_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1227; 
        localctx.decl = this.native_resource_declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enum_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_enum_declaration;
    return this;
}

Enum_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_declarationContext.prototype.constructor = Enum_declarationContext;


 
Enum_declarationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function EnumNativeDeclarationContext(parser, ctx) {
	Enum_declarationContext.call(this, parser);
    this.decl = null; // Enum_native_declarationContext;
    Enum_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EnumNativeDeclarationContext.prototype = Object.create(Enum_declarationContext.prototype);
EnumNativeDeclarationContext.prototype.constructor = EnumNativeDeclarationContext;

EnumNativeDeclarationContext.prototype.enum_native_declaration = function() {
    return this.getTypedRuleContext(Enum_native_declarationContext,0);
};
EnumNativeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterEnumNativeDeclaration(this);
	}
};

EnumNativeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitEnumNativeDeclaration(this);
	}
};


function EnumCategoryDeclarationContext(parser, ctx) {
	Enum_declarationContext.call(this, parser);
    this.decl = null; // Enum_category_declarationContext;
    Enum_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EnumCategoryDeclarationContext.prototype = Object.create(Enum_declarationContext.prototype);
EnumCategoryDeclarationContext.prototype.constructor = EnumCategoryDeclarationContext;

EnumCategoryDeclarationContext.prototype.enum_category_declaration = function() {
    return this.getTypedRuleContext(Enum_category_declarationContext,0);
};
EnumCategoryDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterEnumCategoryDeclaration(this);
	}
};

EnumCategoryDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitEnumCategoryDeclaration(this);
	}
};



EParser.prototype.enum_declaration = function() {

    var localctx = new Enum_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, EParser.RULE_enum_declaration);
    try {
        this.state = 1231;
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        switch(la_) {
        case 1:
            localctx = new EnumCategoryDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1229; 
            localctx.decl = this.enum_category_declaration();
            break;

        case 2:
            localctx = new EnumNativeDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1230; 
            localctx.decl = this.enum_native_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_symbol_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_symbol_list;
    return this;
}

Native_symbol_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_symbol_listContext.prototype.constructor = Native_symbol_listContext;


 
Native_symbol_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function NativeSymbolListContext(parser, ctx) {
	Native_symbol_listContext.call(this, parser);
    this.item = null; // Native_symbolContext;
    Native_symbol_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeSymbolListContext.prototype = Object.create(Native_symbol_listContext.prototype);
NativeSymbolListContext.prototype.constructor = NativeSymbolListContext;

NativeSymbolListContext.prototype.native_symbol = function() {
    return this.getTypedRuleContext(Native_symbolContext,0);
};
NativeSymbolListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNativeSymbolList(this);
	}
};

NativeSymbolListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNativeSymbolList(this);
	}
};


function NativeSymbolListItemContext(parser, ctx) {
	Native_symbol_listContext.call(this, parser);
    this.items = null; // Native_symbol_listContext;
    this.item = null; // Native_symbolContext;
    Native_symbol_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeSymbolListItemContext.prototype = Object.create(Native_symbol_listContext.prototype);
NativeSymbolListItemContext.prototype.constructor = NativeSymbolListItemContext;

NativeSymbolListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

NativeSymbolListItemContext.prototype.native_symbol_list = function() {
    return this.getTypedRuleContext(Native_symbol_listContext,0);
};

NativeSymbolListItemContext.prototype.native_symbol = function() {
    return this.getTypedRuleContext(Native_symbolContext,0);
};
NativeSymbolListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNativeSymbolListItem(this);
	}
};

NativeSymbolListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNativeSymbolListItem(this);
	}
};



EParser.prototype.native_symbol_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Native_symbol_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 134;
    this.enterRecursionRule(localctx, 134, EParser.RULE_native_symbol_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new NativeSymbolListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1234; 
        localctx.item = this.native_symbol();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1242;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,68,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new NativeSymbolListItemContext(this, new Native_symbol_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_native_symbol_list);
                this.state = 1236;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1237; 
                this.lfp();
                this.state = 1238; 
                localctx.item = this.native_symbol(); 
            }
            this.state = 1244;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,68,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Category_symbol_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_category_symbol_list;
    return this;
}

Category_symbol_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_symbol_listContext.prototype.constructor = Category_symbol_listContext;


 
Category_symbol_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CategorySymbolListItemContext(parser, ctx) {
	Category_symbol_listContext.call(this, parser);
    this.items = null; // Category_symbol_listContext;
    this.item = null; // Category_symbolContext;
    Category_symbol_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CategorySymbolListItemContext.prototype = Object.create(Category_symbol_listContext.prototype);
CategorySymbolListItemContext.prototype.constructor = CategorySymbolListItemContext;

CategorySymbolListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

CategorySymbolListItemContext.prototype.category_symbol_list = function() {
    return this.getTypedRuleContext(Category_symbol_listContext,0);
};

CategorySymbolListItemContext.prototype.category_symbol = function() {
    return this.getTypedRuleContext(Category_symbolContext,0);
};
CategorySymbolListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCategorySymbolListItem(this);
	}
};

CategorySymbolListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCategorySymbolListItem(this);
	}
};


function CategorySymbolListContext(parser, ctx) {
	Category_symbol_listContext.call(this, parser);
    this.item = null; // Category_symbolContext;
    Category_symbol_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CategorySymbolListContext.prototype = Object.create(Category_symbol_listContext.prototype);
CategorySymbolListContext.prototype.constructor = CategorySymbolListContext;

CategorySymbolListContext.prototype.category_symbol = function() {
    return this.getTypedRuleContext(Category_symbolContext,0);
};
CategorySymbolListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCategorySymbolList(this);
	}
};

CategorySymbolListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCategorySymbolList(this);
	}
};



EParser.prototype.category_symbol_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Category_symbol_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 136;
    this.enterRecursionRule(localctx, 136, EParser.RULE_category_symbol_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new CategorySymbolListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1246; 
        localctx.item = this.category_symbol();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1254;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CategorySymbolListItemContext(this, new Category_symbol_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_category_symbol_list);
                this.state = 1248;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1249; 
                this.lfp();
                this.state = 1250; 
                localctx.item = this.category_symbol(); 
            }
            this.state = 1256;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Symbol_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_symbol_list;
    return this;
}

Symbol_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Symbol_listContext.prototype.constructor = Symbol_listContext;


 
Symbol_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function SymbolListContext(parser, ctx) {
	Symbol_listContext.call(this, parser);
    this.item = null; // Symbol_identifierContext;
    Symbol_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SymbolListContext.prototype = Object.create(Symbol_listContext.prototype);
SymbolListContext.prototype.constructor = SymbolListContext;

SymbolListContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};
SymbolListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSymbolList(this);
	}
};

SymbolListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSymbolList(this);
	}
};


function SymbolListItemContext(parser, ctx) {
	Symbol_listContext.call(this, parser);
    this.items = null; // Symbol_listContext;
    this.item = null; // Symbol_identifierContext;
    Symbol_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SymbolListItemContext.prototype = Object.create(Symbol_listContext.prototype);
SymbolListItemContext.prototype.constructor = SymbolListItemContext;

SymbolListItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

SymbolListItemContext.prototype.symbol_list = function() {
    return this.getTypedRuleContext(Symbol_listContext,0);
};

SymbolListItemContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};
SymbolListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSymbolListItem(this);
	}
};

SymbolListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSymbolListItem(this);
	}
};



EParser.prototype.symbol_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Symbol_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 138;
    this.enterRecursionRule(localctx, 138, EParser.RULE_symbol_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new SymbolListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1258; 
        localctx.item = this.symbol_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1265;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,70,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new SymbolListItemContext(this, new Symbol_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_symbol_list);
                this.state = 1260;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1261;
                this.match(EParser.COMMA);
                this.state = 1262; 
                localctx.item = this.symbol_identifier(); 
            }
            this.state = 1267;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,70,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Attribute_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_attribute_constraint;
    return this;
}

Attribute_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_constraintContext.prototype.constructor = Attribute_constraintContext;


 
Attribute_constraintContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MatchingExpressionContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingExpressionContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingExpressionContext.prototype.constructor = MatchingExpressionContext;

MatchingExpressionContext.prototype.MATCHING = function() {
    return this.getToken(EParser.MATCHING, 0);
};

MatchingExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
MatchingExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMatchingExpression(this);
	}
};

MatchingExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMatchingExpression(this);
	}
};


function MatchingListContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.source = null; // List_literalContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingListContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingListContext.prototype.constructor = MatchingListContext;

MatchingListContext.prototype.IN = function() {
    return this.getToken(EParser.IN, 0);
};

MatchingListContext.prototype.list_literal = function() {
    return this.getTypedRuleContext(List_literalContext,0);
};
MatchingListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMatchingList(this);
	}
};

MatchingListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMatchingList(this);
	}
};


function MatchingRangeContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.source = null; // Range_literalContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingRangeContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingRangeContext.prototype.constructor = MatchingRangeContext;

MatchingRangeContext.prototype.IN = function() {
    return this.getToken(EParser.IN, 0);
};

MatchingRangeContext.prototype.range_literal = function() {
    return this.getTypedRuleContext(Range_literalContext,0);
};
MatchingRangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMatchingRange(this);
	}
};

MatchingRangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMatchingRange(this);
	}
};


function MatchingSetContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.source = null; // Set_literalContext;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingSetContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingSetContext.prototype.constructor = MatchingSetContext;

MatchingSetContext.prototype.IN = function() {
    return this.getToken(EParser.IN, 0);
};

MatchingSetContext.prototype.set_literal = function() {
    return this.getTypedRuleContext(Set_literalContext,0);
};
MatchingSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMatchingSet(this);
	}
};

MatchingSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMatchingSet(this);
	}
};


function MatchingPatternContext(parser, ctx) {
	Attribute_constraintContext.call(this, parser);
    this.text = null; // Token;
    Attribute_constraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MatchingPatternContext.prototype = Object.create(Attribute_constraintContext.prototype);
MatchingPatternContext.prototype.constructor = MatchingPatternContext;

MatchingPatternContext.prototype.MATCHING = function() {
    return this.getToken(EParser.MATCHING, 0);
};

MatchingPatternContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(EParser.TEXT_LITERAL, 0);
};
MatchingPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMatchingPattern(this);
	}
};

MatchingPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMatchingPattern(this);
	}
};



EParser.prototype.attribute_constraint = function() {

    var localctx = new Attribute_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, EParser.RULE_attribute_constraint);
    try {
        this.state = 1278;
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MatchingListContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1268;
            this.match(EParser.IN);
            this.state = 1269; 
            localctx.source = this.list_literal();
            break;

        case 2:
            localctx = new MatchingSetContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1270;
            this.match(EParser.IN);
            this.state = 1271; 
            localctx.source = this.set_literal();
            break;

        case 3:
            localctx = new MatchingRangeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1272;
            this.match(EParser.IN);
            this.state = 1273; 
            localctx.source = this.range_literal();
            break;

        case 4:
            localctx = new MatchingPatternContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1274;
            this.match(EParser.MATCHING);
            this.state = 1275;
            localctx.text = this.match(EParser.TEXT_LITERAL);
            break;

        case 5:
            localctx = new MatchingExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1276;
            this.match(EParser.MATCHING);
            this.state = 1277; 
            localctx.exp = this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function List_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_list_literal;
    this.items = null; // Expression_listContext
    return this;
}

List_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_literalContext.prototype.constructor = List_literalContext;

List_literalContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

List_literalContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

List_literalContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

List_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterList_literal(this);
	}
};

List_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitList_literal(this);
	}
};




EParser.prototype.list_literal = function() {

    var localctx = new List_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, EParser.RULE_list_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1280;
        this.match(EParser.LBRAK);
        this.state = 1282;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << EParser.LPAR) | (1 << EParser.LBRAK) | (1 << EParser.LCURL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (EParser.MINUS - 33)) | (1 << (EParser.LT - 33)) | (1 << (EParser.METHOD_T - 33)) | (1 << (EParser.CODE - 33)) | (1 << (EParser.DOCUMENT - 33)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (EParser.EXECUTE - 87)) | (1 << (EParser.FETCH - 87)) | (1 << (EParser.INVOKE - 87)) | (1 << (EParser.NOT - 87)) | (1 << (EParser.NOTHING - 87)) | (1 << (EParser.READ - 87)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (EParser.SELF - 120)) | (1 << (EParser.SORTED - 120)) | (1 << (EParser.THIS - 120)) | (1 << (EParser.BOOLEAN_LITERAL - 120)) | (1 << (EParser.CHAR_LITERAL - 120)) | (1 << (EParser.MIN_INTEGER - 120)) | (1 << (EParser.MAX_INTEGER - 120)) | (1 << (EParser.SYMBOL_IDENTIFIER - 120)) | (1 << (EParser.TYPE_IDENTIFIER - 120)) | (1 << (EParser.VARIABLE_IDENTIFIER - 120)) | (1 << (EParser.TEXT_LITERAL - 120)) | (1 << (EParser.INTEGER_LITERAL - 120)) | (1 << (EParser.HEXA_LITERAL - 120)) | (1 << (EParser.DECIMAL_LITERAL - 120)) | (1 << (EParser.DATETIME_LITERAL - 120)) | (1 << (EParser.TIME_LITERAL - 120)) | (1 << (EParser.DATE_LITERAL - 120)) | (1 << (EParser.PERIOD_LITERAL - 120)))) !== 0)) {
            this.state = 1281; 
            localctx.items = this.expression_list(0);
        }

        this.state = 1284;
        this.match(EParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_set_literal;
    this.items = null; // Expression_listContext
    return this;
}

Set_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_literalContext.prototype.constructor = Set_literalContext;

Set_literalContext.prototype.LT = function() {
    return this.getToken(EParser.LT, 0);
};

Set_literalContext.prototype.GT = function() {
    return this.getToken(EParser.GT, 0);
};

Set_literalContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Set_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSet_literal(this);
	}
};

Set_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSet_literal(this);
	}
};




EParser.prototype.set_literal = function() {

    var localctx = new Set_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, EParser.RULE_set_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1286;
        this.match(EParser.LT);
        this.state = 1288;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << EParser.LPAR) | (1 << EParser.LBRAK) | (1 << EParser.LCURL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (EParser.MINUS - 33)) | (1 << (EParser.LT - 33)) | (1 << (EParser.METHOD_T - 33)) | (1 << (EParser.CODE - 33)) | (1 << (EParser.DOCUMENT - 33)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (EParser.EXECUTE - 87)) | (1 << (EParser.FETCH - 87)) | (1 << (EParser.INVOKE - 87)) | (1 << (EParser.NOT - 87)) | (1 << (EParser.NOTHING - 87)) | (1 << (EParser.READ - 87)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (EParser.SELF - 120)) | (1 << (EParser.SORTED - 120)) | (1 << (EParser.THIS - 120)) | (1 << (EParser.BOOLEAN_LITERAL - 120)) | (1 << (EParser.CHAR_LITERAL - 120)) | (1 << (EParser.MIN_INTEGER - 120)) | (1 << (EParser.MAX_INTEGER - 120)) | (1 << (EParser.SYMBOL_IDENTIFIER - 120)) | (1 << (EParser.TYPE_IDENTIFIER - 120)) | (1 << (EParser.VARIABLE_IDENTIFIER - 120)) | (1 << (EParser.TEXT_LITERAL - 120)) | (1 << (EParser.INTEGER_LITERAL - 120)) | (1 << (EParser.HEXA_LITERAL - 120)) | (1 << (EParser.DECIMAL_LITERAL - 120)) | (1 << (EParser.DATETIME_LITERAL - 120)) | (1 << (EParser.TIME_LITERAL - 120)) | (1 << (EParser.DATE_LITERAL - 120)) | (1 << (EParser.PERIOD_LITERAL - 120)))) !== 0)) {
            this.state = 1287; 
            localctx.items = this.expression_list(0);
        }

        this.state = 1290;
        this.match(EParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_expression_list;
    return this;
}

Expression_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_listContext.prototype.constructor = Expression_listContext;


 
Expression_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ValueListItemContext(parser, ctx) {
	Expression_listContext.call(this, parser);
    this.items = null; // Expression_listContext;
    this.item = null; // ExpressionContext;
    Expression_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValueListItemContext.prototype = Object.create(Expression_listContext.prototype);
ValueListItemContext.prototype.constructor = ValueListItemContext;

ValueListItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

ValueListItemContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

ValueListItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ValueListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterValueListItem(this);
	}
};

ValueListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitValueListItem(this);
	}
};


function ValueListContext(parser, ctx) {
	Expression_listContext.call(this, parser);
    this.item = null; // ExpressionContext;
    Expression_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValueListContext.prototype = Object.create(Expression_listContext.prototype);
ValueListContext.prototype.constructor = ValueListContext;

ValueListContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ValueListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterValueList(this);
	}
};

ValueListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitValueList(this);
	}
};



EParser.prototype.expression_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Expression_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 146;
    this.enterRecursionRule(localctx, 146, EParser.RULE_expression_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new ValueListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1293; 
        localctx.item = this.expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1300;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,74,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ValueListItemContext(this, new Expression_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression_list);
                this.state = 1295;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1296;
                this.match(EParser.COMMA);
                this.state = 1297; 
                localctx.item = this.expression(0); 
            }
            this.state = 1302;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,74,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Range_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_range_literal;
    this.low = null; // ExpressionContext
    this.high = null; // ExpressionContext
    return this;
}

Range_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Range_literalContext.prototype.constructor = Range_literalContext;

Range_literalContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

Range_literalContext.prototype.RANGE = function() {
    return this.getToken(EParser.RANGE, 0);
};

Range_literalContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

Range_literalContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Range_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterRange_literal(this);
	}
};

Range_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitRange_literal(this);
	}
};




EParser.prototype.range_literal = function() {

    var localctx = new Range_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, EParser.RULE_range_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1303;
        this.match(EParser.LBRAK);
        this.state = 1304; 
        localctx.low = this.expression(0);
        this.state = 1305;
        this.match(EParser.RANGE);
        this.state = 1306; 
        localctx.high = this.expression(0);
        this.state = 1307;
        this.match(EParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypedefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_typedef;
    return this;
}

TypedefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedefContext.prototype.constructor = TypedefContext;


 
TypedefContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ListTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.l = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListTypeContext.prototype = Object.create(TypedefContext.prototype);
ListTypeContext.prototype.constructor = ListTypeContext;

ListTypeContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

ListTypeContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

ListTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
ListTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterListType(this);
	}
};

ListTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitListType(this);
	}
};


function PrimaryTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.p = null; // Primary_typeContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrimaryTypeContext.prototype = Object.create(TypedefContext.prototype);
PrimaryTypeContext.prototype.constructor = PrimaryTypeContext;

PrimaryTypeContext.prototype.primary_type = function() {
    return this.getTypedRuleContext(Primary_typeContext,0);
};
PrimaryTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPrimaryType(this);
	}
};

PrimaryTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPrimaryType(this);
	}
};


function DictTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.d = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DictTypeContext.prototype = Object.create(TypedefContext.prototype);
DictTypeContext.prototype.constructor = DictTypeContext;

DictTypeContext.prototype.LCURL = function() {
    return this.getToken(EParser.LCURL, 0);
};

DictTypeContext.prototype.RCURL = function() {
    return this.getToken(EParser.RCURL, 0);
};

DictTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
DictTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDictType(this);
	}
};

DictTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDictType(this);
	}
};


function SetTypeContext(parser, ctx) {
	TypedefContext.call(this, parser);
    this.s = null; // TypedefContext;
    TypedefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetTypeContext.prototype = Object.create(TypedefContext.prototype);
SetTypeContext.prototype.constructor = SetTypeContext;

SetTypeContext.prototype.LTGT = function() {
    return this.getToken(EParser.LTGT, 0);
};

SetTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
SetTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSetType(this);
	}
};

SetTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSetType(this);
	}
};



EParser.prototype.typedef = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypedefContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 150;
    this.enterRecursionRule(localctx, 150, EParser.RULE_typedef, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new PrimaryTypeContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1310; 
        localctx.p = this.primary_type();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1322;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,76,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1320;
                var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new SetTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
                    localctx.s = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_typedef);
                    this.state = 1312;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1313;
                    this.match(EParser.LTGT);
                    break;

                case 2:
                    localctx = new ListTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
                    localctx.l = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_typedef);
                    this.state = 1314;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1315;
                    this.match(EParser.LBRAK);
                    this.state = 1316;
                    this.match(EParser.RBRAK);
                    break;

                case 3:
                    localctx = new DictTypeContext(this, new TypedefContext(this, _parentctx, _parentState));
                    localctx.d = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_typedef);
                    this.state = 1317;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1318;
                    this.match(EParser.LCURL);
                    this.state = 1319;
                    this.match(EParser.RCURL);
                    break;

                } 
            }
            this.state = 1324;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,76,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Primary_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_primary_type;
    return this;
}

Primary_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Primary_typeContext.prototype.constructor = Primary_typeContext;


 
Primary_typeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CategoryTypeContext(parser, ctx) {
	Primary_typeContext.call(this, parser);
    this.c = null; // Category_typeContext;
    Primary_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CategoryTypeContext.prototype = Object.create(Primary_typeContext.prototype);
CategoryTypeContext.prototype.constructor = CategoryTypeContext;

CategoryTypeContext.prototype.category_type = function() {
    return this.getTypedRuleContext(Category_typeContext,0);
};
CategoryTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCategoryType(this);
	}
};

CategoryTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCategoryType(this);
	}
};


function NativeTypeContext(parser, ctx) {
	Primary_typeContext.call(this, parser);
    this.n = null; // Native_typeContext;
    Primary_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeTypeContext.prototype = Object.create(Primary_typeContext.prototype);
NativeTypeContext.prototype.constructor = NativeTypeContext;

NativeTypeContext.prototype.native_type = function() {
    return this.getTypedRuleContext(Native_typeContext,0);
};
NativeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNativeType(this);
	}
};

NativeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNativeType(this);
	}
};



EParser.prototype.primary_type = function() {

    var localctx = new Primary_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, EParser.RULE_primary_type);
    try {
        this.state = 1327;
        switch(this._input.LA(1)) {
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.CODE:
            localctx = new NativeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1325; 
            localctx.n = this.native_type();
            break;
        case EParser.TYPE_IDENTIFIER:
            localctx = new CategoryTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1326; 
            localctx.c = this.category_type();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_type;
    return this;
}

Native_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_typeContext.prototype.constructor = Native_typeContext;


 
Native_typeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DateTimeTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateTimeTypeContext.prototype = Object.create(Native_typeContext.prototype);
DateTimeTypeContext.prototype.constructor = DateTimeTypeContext;

DateTimeTypeContext.prototype.DATETIME = function() {
    return this.getToken(EParser.DATETIME, 0);
};
DateTimeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDateTimeType(this);
	}
};

DateTimeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDateTimeType(this);
	}
};


function TimeTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeTypeContext.prototype = Object.create(Native_typeContext.prototype);
TimeTypeContext.prototype.constructor = TimeTypeContext;

TimeTypeContext.prototype.TIME = function() {
    return this.getToken(EParser.TIME, 0);
};
TimeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTimeType(this);
	}
};

TimeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTimeType(this);
	}
};


function TextTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TextTypeContext.prototype = Object.create(Native_typeContext.prototype);
TextTypeContext.prototype.constructor = TextTypeContext;

TextTypeContext.prototype.TEXT = function() {
    return this.getToken(EParser.TEXT, 0);
};
TextTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTextType(this);
	}
};

TextTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTextType(this);
	}
};


function CodeTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CodeTypeContext.prototype = Object.create(Native_typeContext.prototype);
CodeTypeContext.prototype.constructor = CodeTypeContext;

CodeTypeContext.prototype.CODE = function() {
    return this.getToken(EParser.CODE, 0);
};
CodeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCodeType(this);
	}
};

CodeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCodeType(this);
	}
};


function IntegerTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntegerTypeContext.prototype = Object.create(Native_typeContext.prototype);
IntegerTypeContext.prototype.constructor = IntegerTypeContext;

IntegerTypeContext.prototype.INTEGER = function() {
    return this.getToken(EParser.INTEGER, 0);
};
IntegerTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIntegerType(this);
	}
};

IntegerTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIntegerType(this);
	}
};


function DecimalTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DecimalTypeContext.prototype = Object.create(Native_typeContext.prototype);
DecimalTypeContext.prototype.constructor = DecimalTypeContext;

DecimalTypeContext.prototype.DECIMAL = function() {
    return this.getToken(EParser.DECIMAL, 0);
};
DecimalTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDecimalType(this);
	}
};

DecimalTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDecimalType(this);
	}
};


function PeriodTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PeriodTypeContext.prototype = Object.create(Native_typeContext.prototype);
PeriodTypeContext.prototype.constructor = PeriodTypeContext;

PeriodTypeContext.prototype.PERIOD = function() {
    return this.getToken(EParser.PERIOD, 0);
};
PeriodTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPeriodType(this);
	}
};

PeriodTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPeriodType(this);
	}
};


function DateTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateTypeContext.prototype = Object.create(Native_typeContext.prototype);
DateTypeContext.prototype.constructor = DateTypeContext;

DateTypeContext.prototype.DATE = function() {
    return this.getToken(EParser.DATE, 0);
};
DateTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDateType(this);
	}
};

DateTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDateType(this);
	}
};


function CharacterTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CharacterTypeContext.prototype = Object.create(Native_typeContext.prototype);
CharacterTypeContext.prototype.constructor = CharacterTypeContext;

CharacterTypeContext.prototype.CHARACTER = function() {
    return this.getToken(EParser.CHARACTER, 0);
};
CharacterTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCharacterType(this);
	}
};

CharacterTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCharacterType(this);
	}
};


function BooleanTypeContext(parser, ctx) {
	Native_typeContext.call(this, parser);
    this.t1 = null; // Token;
    Native_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanTypeContext.prototype = Object.create(Native_typeContext.prototype);
BooleanTypeContext.prototype.constructor = BooleanTypeContext;

BooleanTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(EParser.BOOLEAN, 0);
};
BooleanTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterBooleanType(this);
	}
};

BooleanTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitBooleanType(this);
	}
};



EParser.prototype.native_type = function() {

    var localctx = new Native_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, EParser.RULE_native_type);
    try {
        this.state = 1339;
        switch(this._input.LA(1)) {
        case EParser.BOOLEAN:
            localctx = new BooleanTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1329;
            localctx.t1 = this.match(EParser.BOOLEAN);
            break;
        case EParser.CHARACTER:
            localctx = new CharacterTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1330;
            localctx.t1 = this.match(EParser.CHARACTER);
            break;
        case EParser.TEXT:
            localctx = new TextTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1331;
            localctx.t1 = this.match(EParser.TEXT);
            break;
        case EParser.INTEGER:
            localctx = new IntegerTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1332;
            localctx.t1 = this.match(EParser.INTEGER);
            break;
        case EParser.DECIMAL:
            localctx = new DecimalTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1333;
            localctx.t1 = this.match(EParser.DECIMAL);
            break;
        case EParser.DATE:
            localctx = new DateTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1334;
            localctx.t1 = this.match(EParser.DATE);
            break;
        case EParser.DATETIME:
            localctx = new DateTimeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1335;
            localctx.t1 = this.match(EParser.DATETIME);
            break;
        case EParser.TIME:
            localctx = new TimeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 1336;
            localctx.t1 = this.match(EParser.TIME);
            break;
        case EParser.PERIOD:
            localctx = new PeriodTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 1337;
            localctx.t1 = this.match(EParser.PERIOD);
            break;
        case EParser.CODE:
            localctx = new CodeTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 1338;
            localctx.t1 = this.match(EParser.CODE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_category_type;
    this.t1 = null; // Token
    return this;
}

Category_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_typeContext.prototype.constructor = Category_typeContext;

Category_typeContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(EParser.TYPE_IDENTIFIER, 0);
};

Category_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCategory_type(this);
	}
};

Category_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCategory_type(this);
	}
};




EParser.prototype.category_type = function() {

    var localctx = new Category_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, EParser.RULE_category_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1341;
        localctx.t1 = this.match(EParser.TYPE_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Code_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_code_type;
    this.t1 = null; // Token
    return this;
}

Code_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Code_typeContext.prototype.constructor = Code_typeContext;

Code_typeContext.prototype.CODE = function() {
    return this.getToken(EParser.CODE, 0);
};

Code_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCode_type(this);
	}
};

Code_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCode_type(this);
	}
};




EParser.prototype.code_type = function() {

    var localctx = new Code_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, EParser.RULE_code_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1343;
        localctx.t1 = this.match(EParser.CODE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Document_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_document_type;
    this.t1 = null; // Token
    return this;
}

Document_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Document_typeContext.prototype.constructor = Document_typeContext;

Document_typeContext.prototype.DOCUMENT = function() {
    return this.getToken(EParser.DOCUMENT, 0);
};

Document_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDocument_type(this);
	}
};

Document_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDocument_type(this);
	}
};




EParser.prototype.document_type = function() {

    var localctx = new Document_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, EParser.RULE_document_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1345;
        localctx.t1 = this.match(EParser.DOCUMENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_category_declaration;
    return this;
}

Category_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_declarationContext.prototype.constructor = Category_declarationContext;


 
Category_declarationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ConcreteCategoryDeclarationContext(parser, ctx) {
	Category_declarationContext.call(this, parser);
    this.decl = null; // Concrete_category_declarationContext;
    Category_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConcreteCategoryDeclarationContext.prototype = Object.create(Category_declarationContext.prototype);
ConcreteCategoryDeclarationContext.prototype.constructor = ConcreteCategoryDeclarationContext;

ConcreteCategoryDeclarationContext.prototype.concrete_category_declaration = function() {
    return this.getTypedRuleContext(Concrete_category_declarationContext,0);
};
ConcreteCategoryDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterConcreteCategoryDeclaration(this);
	}
};

ConcreteCategoryDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitConcreteCategoryDeclaration(this);
	}
};


function NativeCategoryDeclarationContext(parser, ctx) {
	Category_declarationContext.call(this, parser);
    this.decl = null; // Native_category_declarationContext;
    Category_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeCategoryDeclarationContext.prototype = Object.create(Category_declarationContext.prototype);
NativeCategoryDeclarationContext.prototype.constructor = NativeCategoryDeclarationContext;

NativeCategoryDeclarationContext.prototype.native_category_declaration = function() {
    return this.getTypedRuleContext(Native_category_declarationContext,0);
};
NativeCategoryDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNativeCategoryDeclaration(this);
	}
};

NativeCategoryDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNativeCategoryDeclaration(this);
	}
};


function SingletonCategoryDeclarationContext(parser, ctx) {
	Category_declarationContext.call(this, parser);
    this.decl = null; // Singleton_category_declarationContext;
    Category_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SingletonCategoryDeclarationContext.prototype = Object.create(Category_declarationContext.prototype);
SingletonCategoryDeclarationContext.prototype.constructor = SingletonCategoryDeclarationContext;

SingletonCategoryDeclarationContext.prototype.singleton_category_declaration = function() {
    return this.getTypedRuleContext(Singleton_category_declarationContext,0);
};
SingletonCategoryDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSingletonCategoryDeclaration(this);
	}
};

SingletonCategoryDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSingletonCategoryDeclaration(this);
	}
};



EParser.prototype.category_declaration = function() {

    var localctx = new Category_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, EParser.RULE_category_declaration);
    try {
        this.state = 1350;
        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ConcreteCategoryDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1347; 
            localctx.decl = this.concrete_category_declaration();
            break;

        case 2:
            localctx = new NativeCategoryDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1348; 
            localctx.decl = this.native_category_declaration();
            break;

        case 3:
            localctx = new SingletonCategoryDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1349; 
            localctx.decl = this.singleton_category_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_identifier_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_type_identifier_list;
    return this;
}

Type_identifier_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_identifier_listContext.prototype.constructor = Type_identifier_listContext;


 
Type_identifier_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function TypeIdentifierListItemContext(parser, ctx) {
	Type_identifier_listContext.call(this, parser);
    this.items = null; // Type_identifier_listContext;
    this.item = null; // Type_identifierContext;
    Type_identifier_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeIdentifierListItemContext.prototype = Object.create(Type_identifier_listContext.prototype);
TypeIdentifierListItemContext.prototype.constructor = TypeIdentifierListItemContext;

TypeIdentifierListItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

TypeIdentifierListItemContext.prototype.type_identifier_list = function() {
    return this.getTypedRuleContext(Type_identifier_listContext,0);
};

TypeIdentifierListItemContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};
TypeIdentifierListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTypeIdentifierListItem(this);
	}
};

TypeIdentifierListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTypeIdentifierListItem(this);
	}
};


function TypeIdentifierListContext(parser, ctx) {
	Type_identifier_listContext.call(this, parser);
    this.item = null; // Type_identifierContext;
    Type_identifier_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeIdentifierListContext.prototype = Object.create(Type_identifier_listContext.prototype);
TypeIdentifierListContext.prototype.constructor = TypeIdentifierListContext;

TypeIdentifierListContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};
TypeIdentifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTypeIdentifierList(this);
	}
};

TypeIdentifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTypeIdentifierList(this);
	}
};



EParser.prototype.type_identifier_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Type_identifier_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 164;
    this.enterRecursionRule(localctx, 164, EParser.RULE_type_identifier_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new TypeIdentifierListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1353; 
        localctx.item = this.type_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1360;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeIdentifierListItemContext(this, new Type_identifier_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_type_identifier_list);
                this.state = 1355;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1356;
                this.match(EParser.COMMA);
                this.state = 1357; 
                localctx.item = this.type_identifier(); 
            }
            this.state = 1362;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Method_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_method_identifier;
    return this;
}

Method_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_identifierContext.prototype.constructor = Method_identifierContext;


 
Method_identifierContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MethodVariableIdentifierContext(parser, ctx) {
	Method_identifierContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    Method_identifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodVariableIdentifierContext.prototype = Object.create(Method_identifierContext.prototype);
MethodVariableIdentifierContext.prototype.constructor = MethodVariableIdentifierContext;

MethodVariableIdentifierContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
MethodVariableIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMethodVariableIdentifier(this);
	}
};

MethodVariableIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMethodVariableIdentifier(this);
	}
};


function MethodTypeIdentifierContext(parser, ctx) {
	Method_identifierContext.call(this, parser);
    this.name = null; // Type_identifierContext;
    Method_identifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodTypeIdentifierContext.prototype = Object.create(Method_identifierContext.prototype);
MethodTypeIdentifierContext.prototype.constructor = MethodTypeIdentifierContext;

MethodTypeIdentifierContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};
MethodTypeIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMethodTypeIdentifier(this);
	}
};

MethodTypeIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMethodTypeIdentifier(this);
	}
};



EParser.prototype.method_identifier = function() {

    var localctx = new Method_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, EParser.RULE_method_identifier);
    try {
        this.state = 1365;
        switch(this._input.LA(1)) {
        case EParser.VARIABLE_IDENTIFIER:
            localctx = new MethodVariableIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1363; 
            localctx.name = this.variable_identifier();
            break;
        case EParser.TYPE_IDENTIFIER:
            localctx = new MethodTypeIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1364; 
            localctx.name = this.type_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;


 
IdentifierContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SymbolIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    this.name = null; // Symbol_identifierContext;
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SymbolIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
SymbolIdentifierContext.prototype.constructor = SymbolIdentifierContext;

SymbolIdentifierContext.prototype.symbol_identifier = function() {
    return this.getTypedRuleContext(Symbol_identifierContext,0);
};
SymbolIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSymbolIdentifier(this);
	}
};

SymbolIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSymbolIdentifier(this);
	}
};


function VariableIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VariableIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
VariableIdentifierContext.prototype.constructor = VariableIdentifierContext;

VariableIdentifierContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
VariableIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterVariableIdentifier(this);
	}
};

VariableIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitVariableIdentifier(this);
	}
};


function TypeIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    this.name = null; // Type_identifierContext;
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
TypeIdentifierContext.prototype.constructor = TypeIdentifierContext;

TypeIdentifierContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};
TypeIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTypeIdentifier(this);
	}
};

TypeIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTypeIdentifier(this);
	}
};



EParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, EParser.RULE_identifier);
    try {
        this.state = 1370;
        switch(this._input.LA(1)) {
        case EParser.VARIABLE_IDENTIFIER:
            localctx = new VariableIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1367; 
            localctx.name = this.variable_identifier();
            break;
        case EParser.TYPE_IDENTIFIER:
            localctx = new TypeIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1368; 
            localctx.name = this.type_identifier();
            break;
        case EParser.SYMBOL_IDENTIFIER:
            localctx = new SymbolIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1369; 
            localctx.name = this.symbol_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_variable_identifier;
    return this;
}

Variable_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_identifierContext.prototype.constructor = Variable_identifierContext;

Variable_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

Variable_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterVariable_identifier(this);
	}
};

Variable_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitVariable_identifier(this);
	}
};




EParser.prototype.variable_identifier = function() {

    var localctx = new Variable_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, EParser.RULE_variable_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1372;
        this.match(EParser.VARIABLE_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_type_identifier;
    return this;
}

Type_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_identifierContext.prototype.constructor = Type_identifierContext;

Type_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(EParser.TYPE_IDENTIFIER, 0);
};

Type_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterType_identifier(this);
	}
};

Type_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitType_identifier(this);
	}
};




EParser.prototype.type_identifier = function() {

    var localctx = new Type_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, EParser.RULE_type_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1374;
        this.match(EParser.TYPE_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Symbol_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_symbol_identifier;
    return this;
}

Symbol_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Symbol_identifierContext.prototype.constructor = Symbol_identifierContext;

Symbol_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
};

Symbol_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSymbol_identifier(this);
	}
};

Symbol_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSymbol_identifier(this);
	}
};




EParser.prototype.symbol_identifier = function() {

    var localctx = new Symbol_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, EParser.RULE_symbol_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1376;
        this.match(EParser.SYMBOL_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_argument_list;
    return this;
}

Argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_listContext.prototype.constructor = Argument_listContext;


 
Argument_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ArgumentListItemContext(parser, ctx) {
	Argument_listContext.call(this, parser);
    this.items = null; // Argument_listContext;
    this.item = null; // ArgumentContext;
    Argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentListItemContext.prototype = Object.create(Argument_listContext.prototype);
ArgumentListItemContext.prototype.constructor = ArgumentListItemContext;

ArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

ArgumentListItemContext.prototype.argument_list = function() {
    return this.getTypedRuleContext(Argument_listContext,0);
};

ArgumentListItemContext.prototype.argument = function() {
    return this.getTypedRuleContext(ArgumentContext,0);
};
ArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterArgumentListItem(this);
	}
};

ArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitArgumentListItem(this);
	}
};


function ArgumentListContext(parser, ctx) {
	Argument_listContext.call(this, parser);
    this.item = null; // ArgumentContext;
    Argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentListContext.prototype = Object.create(Argument_listContext.prototype);
ArgumentListContext.prototype.constructor = ArgumentListContext;

ArgumentListContext.prototype.argument = function() {
    return this.getTypedRuleContext(ArgumentContext,0);
};
ArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterArgumentList(this);
	}
};

ArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitArgumentList(this);
	}
};



EParser.prototype.argument_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Argument_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 176;
    this.enterRecursionRule(localctx, 176, EParser.RULE_argument_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new ArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1379; 
        localctx.item = this.argument();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1386;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ArgumentListItemContext(this, new Argument_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_argument_list);
                this.state = 1381;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1382;
                this.match(EParser.COMMA);
                this.state = 1383; 
                localctx.item = this.argument(); 
            }
            this.state = 1388;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_argument;
    return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;


 
ArgumentContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function OperatorArgumentContext(parser, ctx) {
	ArgumentContext.call(this, parser);
    this.arg = null; // Operator_argumentContext;
    ArgumentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorArgumentContext.prototype = Object.create(ArgumentContext.prototype);
OperatorArgumentContext.prototype.constructor = OperatorArgumentContext;

OperatorArgumentContext.prototype.operator_argument = function() {
    return this.getTypedRuleContext(Operator_argumentContext,0);
};
OperatorArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOperatorArgument(this);
	}
};

OperatorArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOperatorArgument(this);
	}
};


function CodeArgumentContext(parser, ctx) {
	ArgumentContext.call(this, parser);
    this.arg = null; // Code_argumentContext;
    ArgumentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CodeArgumentContext.prototype = Object.create(ArgumentContext.prototype);
CodeArgumentContext.prototype.constructor = CodeArgumentContext;

CodeArgumentContext.prototype.code_argument = function() {
    return this.getTypedRuleContext(Code_argumentContext,0);
};
CodeArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCodeArgument(this);
	}
};

CodeArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCodeArgument(this);
	}
};



EParser.prototype.argument = function() {

    var localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, EParser.RULE_argument);
    try {
        this.state = 1391;
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        switch(la_) {
        case 1:
            localctx = new CodeArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1389; 
            localctx.arg = this.code_argument();
            break;

        case 2:
            localctx = new OperatorArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1390; 
            localctx.arg = this.operator_argument();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Operator_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_operator_argument;
    return this;
}

Operator_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operator_argumentContext.prototype.constructor = Operator_argumentContext;


 
Operator_argumentContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function NamedArgumentContext(parser, ctx) {
	Operator_argumentContext.call(this, parser);
    this.arg = null; // Named_argumentContext;
    Operator_argumentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NamedArgumentContext.prototype = Object.create(Operator_argumentContext.prototype);
NamedArgumentContext.prototype.constructor = NamedArgumentContext;

NamedArgumentContext.prototype.named_argument = function() {
    return this.getTypedRuleContext(Named_argumentContext,0);
};
NamedArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNamedArgument(this);
	}
};

NamedArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNamedArgument(this);
	}
};


function TypedArgumentContext(parser, ctx) {
	Operator_argumentContext.call(this, parser);
    this.arg = null; // Typed_argumentContext;
    Operator_argumentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypedArgumentContext.prototype = Object.create(Operator_argumentContext.prototype);
TypedArgumentContext.prototype.constructor = TypedArgumentContext;

TypedArgumentContext.prototype.typed_argument = function() {
    return this.getTypedRuleContext(Typed_argumentContext,0);
};
TypedArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTypedArgument(this);
	}
};

TypedArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTypedArgument(this);
	}
};



EParser.prototype.operator_argument = function() {

    var localctx = new Operator_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, EParser.RULE_operator_argument);
    try {
        this.state = 1395;
        switch(this._input.LA(1)) {
        case EParser.VARIABLE_IDENTIFIER:
            localctx = new NamedArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1393; 
            localctx.arg = this.named_argument();
            break;
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.CODE:
        case EParser.ANY:
        case EParser.TYPE_IDENTIFIER:
            localctx = new TypedArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1394; 
            localctx.arg = this.typed_argument();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Named_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_named_argument;
    this.name = null; // Variable_identifierContext
    this.value = null; // Literal_expressionContext
    return this;
}

Named_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Named_argumentContext.prototype.constructor = Named_argumentContext;

Named_argumentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Named_argumentContext.prototype.EQ = function() {
    return this.getToken(EParser.EQ, 0);
};

Named_argumentContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};

Named_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNamed_argument(this);
	}
};

Named_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNamed_argument(this);
	}
};




EParser.prototype.named_argument = function() {

    var localctx = new Named_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, EParser.RULE_named_argument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1397; 
        localctx.name = this.variable_identifier();
        this.state = 1400;
        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
        if(la_===1) {
            this.state = 1398;
            this.match(EParser.EQ);
            this.state = 1399; 
            localctx.value = this.literal_expression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Code_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_code_argument;
    this.name = null; // Variable_identifierContext
    return this;
}

Code_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Code_argumentContext.prototype.constructor = Code_argumentContext;

Code_argumentContext.prototype.code_type = function() {
    return this.getTypedRuleContext(Code_typeContext,0);
};

Code_argumentContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Code_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCode_argument(this);
	}
};

Code_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCode_argument(this);
	}
};




EParser.prototype.code_argument = function() {

    var localctx = new Code_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, EParser.RULE_code_argument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1402; 
        this.code_type();
        this.state = 1403; 
        localctx.name = this.variable_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Category_or_any_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_category_or_any_type;
    return this;
}

Category_or_any_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_or_any_typeContext.prototype.constructor = Category_or_any_typeContext;


 
Category_or_any_typeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AnyArgumentTypeContext(parser, ctx) {
	Category_or_any_typeContext.call(this, parser);
    this.typ = null; // Any_typeContext;
    Category_or_any_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnyArgumentTypeContext.prototype = Object.create(Category_or_any_typeContext.prototype);
AnyArgumentTypeContext.prototype.constructor = AnyArgumentTypeContext;

AnyArgumentTypeContext.prototype.any_type = function() {
    return this.getTypedRuleContext(Any_typeContext,0);
};
AnyArgumentTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAnyArgumentType(this);
	}
};

AnyArgumentTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAnyArgumentType(this);
	}
};


function CategoryArgumentTypeContext(parser, ctx) {
	Category_or_any_typeContext.call(this, parser);
    this.typ = null; // TypedefContext;
    Category_or_any_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CategoryArgumentTypeContext.prototype = Object.create(Category_or_any_typeContext.prototype);
CategoryArgumentTypeContext.prototype.constructor = CategoryArgumentTypeContext;

CategoryArgumentTypeContext.prototype.typedef = function() {
    return this.getTypedRuleContext(TypedefContext,0);
};
CategoryArgumentTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCategoryArgumentType(this);
	}
};

CategoryArgumentTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCategoryArgumentType(this);
	}
};



EParser.prototype.category_or_any_type = function() {

    var localctx = new Category_or_any_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, EParser.RULE_category_or_any_type);
    try {
        this.state = 1407;
        switch(this._input.LA(1)) {
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.CODE:
        case EParser.TYPE_IDENTIFIER:
            localctx = new CategoryArgumentTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1405; 
            localctx.typ = this.typedef(0);
            break;
        case EParser.ANY:
            localctx = new AnyArgumentTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1406; 
            localctx.typ = this.any_type(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Any_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_any_type;
    return this;
}

Any_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Any_typeContext.prototype.constructor = Any_typeContext;


 
Any_typeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function AnyTypeContext(parser, ctx) {
	Any_typeContext.call(this, parser);
    Any_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnyTypeContext.prototype = Object.create(Any_typeContext.prototype);
AnyTypeContext.prototype.constructor = AnyTypeContext;

AnyTypeContext.prototype.ANY = function() {
    return this.getToken(EParser.ANY, 0);
};
AnyTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAnyType(this);
	}
};

AnyTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAnyType(this);
	}
};


function AnyListTypeContext(parser, ctx) {
	Any_typeContext.call(this, parser);
    this.typ = null; // Any_typeContext;
    Any_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnyListTypeContext.prototype = Object.create(Any_typeContext.prototype);
AnyListTypeContext.prototype.constructor = AnyListTypeContext;

AnyListTypeContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

AnyListTypeContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

AnyListTypeContext.prototype.any_type = function() {
    return this.getTypedRuleContext(Any_typeContext,0);
};
AnyListTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAnyListType(this);
	}
};

AnyListTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAnyListType(this);
	}
};


function AnyDictTypeContext(parser, ctx) {
	Any_typeContext.call(this, parser);
    this.typ = null; // Any_typeContext;
    Any_typeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnyDictTypeContext.prototype = Object.create(Any_typeContext.prototype);
AnyDictTypeContext.prototype.constructor = AnyDictTypeContext;

AnyDictTypeContext.prototype.LCURL = function() {
    return this.getToken(EParser.LCURL, 0);
};

AnyDictTypeContext.prototype.RCURL = function() {
    return this.getToken(EParser.RCURL, 0);
};

AnyDictTypeContext.prototype.any_type = function() {
    return this.getTypedRuleContext(Any_typeContext,0);
};
AnyDictTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAnyDictType(this);
	}
};

AnyDictTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAnyDictType(this);
	}
};



EParser.prototype.any_type = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Any_typeContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 188;
    this.enterRecursionRule(localctx, 188, EParser.RULE_any_type, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new AnyTypeContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1410;
        this.match(EParser.ANY);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1420;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1418;
                var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AnyListTypeContext(this, new Any_typeContext(this, _parentctx, _parentState));
                    localctx.typ = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_any_type);
                    this.state = 1412;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1413;
                    this.match(EParser.LBRAK);
                    this.state = 1414;
                    this.match(EParser.RBRAK);
                    break;

                case 2:
                    localctx = new AnyDictTypeContext(this, new Any_typeContext(this, _parentctx, _parentState));
                    localctx.typ = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, EParser.RULE_any_type);
                    this.state = 1415;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1416;
                    this.match(EParser.LCURL);
                    this.state = 1417;
                    this.match(EParser.RCURL);
                    break;

                } 
            }
            this.state = 1422;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Category_method_declaration_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_category_method_declaration_list;
    return this;
}

Category_method_declaration_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_method_declaration_listContext.prototype.constructor = Category_method_declaration_listContext;


 
Category_method_declaration_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CategoryMethodListContext(parser, ctx) {
	Category_method_declaration_listContext.call(this, parser);
    this.item = null; // Category_method_declarationContext;
    Category_method_declaration_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CategoryMethodListContext.prototype = Object.create(Category_method_declaration_listContext.prototype);
CategoryMethodListContext.prototype.constructor = CategoryMethodListContext;

CategoryMethodListContext.prototype.category_method_declaration = function() {
    return this.getTypedRuleContext(Category_method_declarationContext,0);
};
CategoryMethodListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCategoryMethodList(this);
	}
};

CategoryMethodListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCategoryMethodList(this);
	}
};


function CategoryMethodListItemContext(parser, ctx) {
	Category_method_declaration_listContext.call(this, parser);
    this.items = null; // Category_method_declaration_listContext;
    this.item = null; // Category_method_declarationContext;
    Category_method_declaration_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CategoryMethodListItemContext.prototype = Object.create(Category_method_declaration_listContext.prototype);
CategoryMethodListItemContext.prototype.constructor = CategoryMethodListItemContext;

CategoryMethodListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

CategoryMethodListItemContext.prototype.category_method_declaration_list = function() {
    return this.getTypedRuleContext(Category_method_declaration_listContext,0);
};

CategoryMethodListItemContext.prototype.category_method_declaration = function() {
    return this.getTypedRuleContext(Category_method_declarationContext,0);
};
CategoryMethodListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCategoryMethodListItem(this);
	}
};

CategoryMethodListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCategoryMethodListItem(this);
	}
};



EParser.prototype.category_method_declaration_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Category_method_declaration_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 190;
    this.enterRecursionRule(localctx, 190, EParser.RULE_category_method_declaration_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new CategoryMethodListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1424; 
        localctx.item = this.category_method_declaration();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1432;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CategoryMethodListItemContext(this, new Category_method_declaration_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_category_method_declaration_list);
                this.state = 1426;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1427; 
                this.lfp();
                this.state = 1428; 
                localctx.item = this.category_method_declaration(); 
            }
            this.state = 1434;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Category_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_category_method_declaration;
    return this;
}

Category_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Category_method_declarationContext.prototype.constructor = Category_method_declarationContext;


 
Category_method_declarationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function GetterMethodContext(parser, ctx) {
	Category_method_declarationContext.call(this, parser);
    this.decl = null; // Getter_method_declarationContext;
    Category_method_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GetterMethodContext.prototype = Object.create(Category_method_declarationContext.prototype);
GetterMethodContext.prototype.constructor = GetterMethodContext;

GetterMethodContext.prototype.getter_method_declaration = function() {
    return this.getTypedRuleContext(Getter_method_declarationContext,0);
};
GetterMethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterGetterMethod(this);
	}
};

GetterMethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitGetterMethod(this);
	}
};


function MemberMethodContext(parser, ctx) {
	Category_method_declarationContext.call(this, parser);
    this.decl = null; // Member_method_declarationContext;
    Category_method_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberMethodContext.prototype = Object.create(Category_method_declarationContext.prototype);
MemberMethodContext.prototype.constructor = MemberMethodContext;

MemberMethodContext.prototype.member_method_declaration = function() {
    return this.getTypedRuleContext(Member_method_declarationContext,0);
};
MemberMethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMemberMethod(this);
	}
};

MemberMethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMemberMethod(this);
	}
};


function SetterMethodContext(parser, ctx) {
	Category_method_declarationContext.call(this, parser);
    this.decl = null; // Setter_method_declarationContext;
    Category_method_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetterMethodContext.prototype = Object.create(Category_method_declarationContext.prototype);
SetterMethodContext.prototype.constructor = SetterMethodContext;

SetterMethodContext.prototype.setter_method_declaration = function() {
    return this.getTypedRuleContext(Setter_method_declarationContext,0);
};
SetterMethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSetterMethod(this);
	}
};

SetterMethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSetterMethod(this);
	}
};


function OperatorMethodContext(parser, ctx) {
	Category_method_declarationContext.call(this, parser);
    this.decl = null; // Operator_method_declarationContext;
    Category_method_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorMethodContext.prototype = Object.create(Category_method_declarationContext.prototype);
OperatorMethodContext.prototype.constructor = OperatorMethodContext;

OperatorMethodContext.prototype.operator_method_declaration = function() {
    return this.getTypedRuleContext(Operator_method_declarationContext,0);
};
OperatorMethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOperatorMethod(this);
	}
};

OperatorMethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOperatorMethod(this);
	}
};



EParser.prototype.category_method_declaration = function() {

    var localctx = new Category_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, EParser.RULE_category_method_declaration);
    try {
        this.state = 1439;
        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SetterMethodContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1435; 
            localctx.decl = this.setter_method_declaration();
            break;

        case 2:
            localctx = new GetterMethodContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1436; 
            localctx.decl = this.getter_method_declaration();
            break;

        case 3:
            localctx = new MemberMethodContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1437; 
            localctx.decl = this.member_method_declaration();
            break;

        case 4:
            localctx = new OperatorMethodContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1438; 
            localctx.decl = this.operator_method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_category_mappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_category_mapping;
    return this;
}

Native_category_mappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_category_mappingContext.prototype.constructor = Native_category_mappingContext;


 
Native_category_mappingContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpCategoryMappingContext(parser, ctx) {
	Native_category_mappingContext.call(this, parser);
    this.mapping = null; // Csharp_identifier_expressionContext;
    Native_category_mappingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpCategoryMappingContext.prototype = Object.create(Native_category_mappingContext.prototype);
CSharpCategoryMappingContext.prototype.constructor = CSharpCategoryMappingContext;

CSharpCategoryMappingContext.prototype.CSHARP = function() {
    return this.getToken(EParser.CSHARP, 0);
};

CSharpCategoryMappingContext.prototype.csharp_identifier_expression = function() {
    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
};
CSharpCategoryMappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpCategoryMapping(this);
	}
};

CSharpCategoryMappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpCategoryMapping(this);
	}
};


function JavaCategoryMappingContext(parser, ctx) {
	Native_category_mappingContext.call(this, parser);
    this.mapping = null; // Java_class_identifier_expressionContext;
    Native_category_mappingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaCategoryMappingContext.prototype = Object.create(Native_category_mappingContext.prototype);
JavaCategoryMappingContext.prototype.constructor = JavaCategoryMappingContext;

JavaCategoryMappingContext.prototype.JAVA = function() {
    return this.getToken(EParser.JAVA, 0);
};

JavaCategoryMappingContext.prototype.java_class_identifier_expression = function() {
    return this.getTypedRuleContext(Java_class_identifier_expressionContext,0);
};
JavaCategoryMappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaCategoryMapping(this);
	}
};

JavaCategoryMappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaCategoryMapping(this);
	}
};


function JavaScriptCategoryMappingContext(parser, ctx) {
	Native_category_mappingContext.call(this, parser);
    this.mapping = null; // Javascript_category_mappingContext;
    Native_category_mappingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptCategoryMappingContext.prototype = Object.create(Native_category_mappingContext.prototype);
JavaScriptCategoryMappingContext.prototype.constructor = JavaScriptCategoryMappingContext;

JavaScriptCategoryMappingContext.prototype.JAVASCRIPT = function() {
    return this.getToken(EParser.JAVASCRIPT, 0);
};

JavaScriptCategoryMappingContext.prototype.javascript_category_mapping = function() {
    return this.getTypedRuleContext(Javascript_category_mappingContext,0);
};
JavaScriptCategoryMappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaScriptCategoryMapping(this);
	}
};

JavaScriptCategoryMappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaScriptCategoryMapping(this);
	}
};


function Python3CategoryMappingContext(parser, ctx) {
	Native_category_mappingContext.call(this, parser);
    this.mapping = null; // Python_category_mappingContext;
    Native_category_mappingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python3CategoryMappingContext.prototype = Object.create(Native_category_mappingContext.prototype);
Python3CategoryMappingContext.prototype.constructor = Python3CategoryMappingContext;

Python3CategoryMappingContext.prototype.PYTHON3 = function() {
    return this.getToken(EParser.PYTHON3, 0);
};

Python3CategoryMappingContext.prototype.python_category_mapping = function() {
    return this.getTypedRuleContext(Python_category_mappingContext,0);
};
Python3CategoryMappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython3CategoryMapping(this);
	}
};

Python3CategoryMappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython3CategoryMapping(this);
	}
};


function Python2CategoryMappingContext(parser, ctx) {
	Native_category_mappingContext.call(this, parser);
    this.mapping = null; // Python_category_mappingContext;
    Native_category_mappingContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python2CategoryMappingContext.prototype = Object.create(Native_category_mappingContext.prototype);
Python2CategoryMappingContext.prototype.constructor = Python2CategoryMappingContext;

Python2CategoryMappingContext.prototype.PYTHON2 = function() {
    return this.getToken(EParser.PYTHON2, 0);
};

Python2CategoryMappingContext.prototype.python_category_mapping = function() {
    return this.getTypedRuleContext(Python_category_mappingContext,0);
};
Python2CategoryMappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython2CategoryMapping(this);
	}
};

Python2CategoryMappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython2CategoryMapping(this);
	}
};



EParser.prototype.native_category_mapping = function() {

    var localctx = new Native_category_mappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, EParser.RULE_native_category_mapping);
    try {
        this.state = 1451;
        switch(this._input.LA(1)) {
        case EParser.JAVA:
            localctx = new JavaCategoryMappingContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1441;
            this.match(EParser.JAVA);
            this.state = 1442; 
            localctx.mapping = this.java_class_identifier_expression(0);
            break;
        case EParser.CSHARP:
            localctx = new CSharpCategoryMappingContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1443;
            this.match(EParser.CSHARP);
            this.state = 1444; 
            localctx.mapping = this.csharp_identifier_expression(0);
            break;
        case EParser.PYTHON2:
            localctx = new Python2CategoryMappingContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1445;
            this.match(EParser.PYTHON2);
            this.state = 1446; 
            localctx.mapping = this.python_category_mapping();
            break;
        case EParser.PYTHON3:
            localctx = new Python3CategoryMappingContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1447;
            this.match(EParser.PYTHON3);
            this.state = 1448; 
            localctx.mapping = this.python_category_mapping();
            break;
        case EParser.JAVASCRIPT:
            localctx = new JavaScriptCategoryMappingContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1449;
            this.match(EParser.JAVASCRIPT);
            this.state = 1450; 
            localctx.mapping = this.javascript_category_mapping();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_category_mappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_category_mapping;
    this.id_ = null; // IdentifierContext
    this.module = null; // Python_moduleContext
    return this;
}

Python_category_mappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_category_mappingContext.prototype.constructor = Python_category_mappingContext;

Python_category_mappingContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Python_category_mappingContext.prototype.python_module = function() {
    return this.getTypedRuleContext(Python_moduleContext,0);
};

Python_category_mappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython_category_mapping(this);
	}
};

Python_category_mappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython_category_mapping(this);
	}
};




EParser.prototype.python_category_mapping = function() {

    var localctx = new Python_category_mappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, EParser.RULE_python_category_mapping);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1453; 
        localctx.id_ = this.identifier();
        this.state = 1455;
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        if(la_===1) {
            this.state = 1454; 
            localctx.module = this.python_module();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_moduleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_module;
    return this;
}

Python_moduleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_moduleContext.prototype.constructor = Python_moduleContext;

Python_moduleContext.prototype.FROM = function() {
    return this.getToken(EParser.FROM, 0);
};

Python_moduleContext.prototype.module_token = function() {
    return this.getTypedRuleContext(Module_tokenContext,0);
};

Python_moduleContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Python_moduleContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Python_moduleContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.DOT);
    } else {
        return this.getToken(EParser.DOT, i);
    }
};


Python_moduleContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython_module(this);
	}
};

Python_moduleContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython_module(this);
	}
};




EParser.prototype.python_module = function() {

    var localctx = new Python_moduleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, EParser.RULE_python_module);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1457;
        this.match(EParser.FROM);
        this.state = 1458; 
        this.module_token();
        this.state = 1459;
        this.match(EParser.COLON);
        this.state = 1460; 
        this.identifier();
        this.state = 1465;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,94,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1461;
                this.match(EParser.DOT);
                this.state = 1462; 
                this.identifier(); 
            }
            this.state = 1467;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,94,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Module_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_module_token;
    this.i1 = null; // Token
    return this;
}

Module_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_tokenContext.prototype.constructor = Module_tokenContext;

Module_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

Module_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterModule_token(this);
	}
};

Module_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitModule_token(this);
	}
};




EParser.prototype.module_token = function() {

    var localctx = new Module_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, EParser.RULE_module_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1468;
        localctx.i1 = this.match(EParser.VARIABLE_IDENTIFIER);
        this.state = 1469;
        if (!( this.isText(localctx.i1,"module"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"module\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_category_mappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_category_mapping;
    this.id_ = null; // IdentifierContext
    this.module = null; // Javascript_moduleContext
    return this;
}

Javascript_category_mappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_category_mappingContext.prototype.constructor = Javascript_category_mappingContext;

Javascript_category_mappingContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Javascript_category_mappingContext.prototype.javascript_module = function() {
    return this.getTypedRuleContext(Javascript_moduleContext,0);
};

Javascript_category_mappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascript_category_mapping(this);
	}
};

Javascript_category_mappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascript_category_mapping(this);
	}
};




EParser.prototype.javascript_category_mapping = function() {

    var localctx = new Javascript_category_mappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, EParser.RULE_javascript_category_mapping);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1471; 
        localctx.id_ = this.identifier();
        this.state = 1473;
        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
        if(la_===1) {
            this.state = 1472; 
            localctx.module = this.javascript_module();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_moduleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_module;
    return this;
}

Javascript_moduleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_moduleContext.prototype.constructor = Javascript_moduleContext;

Javascript_moduleContext.prototype.FROM = function() {
    return this.getToken(EParser.FROM, 0);
};

Javascript_moduleContext.prototype.module_token = function() {
    return this.getTypedRuleContext(Module_tokenContext,0);
};

Javascript_moduleContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Javascript_moduleContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Javascript_moduleContext.prototype.SLASH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(EParser.SLASH);
    } else {
        return this.getToken(EParser.SLASH, i);
    }
};


Javascript_moduleContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

Javascript_moduleContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascript_module(this);
	}
};

Javascript_moduleContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascript_module(this);
	}
};




EParser.prototype.javascript_module = function() {

    var localctx = new Javascript_moduleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, EParser.RULE_javascript_module);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1475;
        this.match(EParser.FROM);
        this.state = 1476; 
        this.module_token();
        this.state = 1477;
        this.match(EParser.COLON);
        this.state = 1479;
        _la = this._input.LA(1);
        if(_la===EParser.SLASH) {
            this.state = 1478;
            this.match(EParser.SLASH);
        }

        this.state = 1481; 
        this.identifier();
        this.state = 1486;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,97,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1482;
                this.match(EParser.SLASH);
                this.state = 1483; 
                this.identifier(); 
            }
            this.state = 1488;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,97,this._ctx);
        }

        this.state = 1491;
        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
        if(la_===1) {
            this.state = 1489;
            this.match(EParser.DOT);
            this.state = 1490; 
            this.identifier();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_identifier_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_variable_identifier_list;
    return this;
}

Variable_identifier_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_identifier_listContext.prototype.constructor = Variable_identifier_listContext;


 
Variable_identifier_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function VariableListContext(parser, ctx) {
	Variable_identifier_listContext.call(this, parser);
    this.item = null; // Variable_identifierContext;
    Variable_identifier_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VariableListContext.prototype = Object.create(Variable_identifier_listContext.prototype);
VariableListContext.prototype.constructor = VariableListContext;

VariableListContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
VariableListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterVariableList(this);
	}
};

VariableListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitVariableList(this);
	}
};


function VariableListItemContext(parser, ctx) {
	Variable_identifier_listContext.call(this, parser);
    this.items = null; // Variable_identifier_listContext;
    this.item = null; // Variable_identifierContext;
    Variable_identifier_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VariableListItemContext.prototype = Object.create(Variable_identifier_listContext.prototype);
VariableListItemContext.prototype.constructor = VariableListItemContext;

VariableListItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

VariableListItemContext.prototype.variable_identifier_list = function() {
    return this.getTypedRuleContext(Variable_identifier_listContext,0);
};

VariableListItemContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
VariableListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterVariableListItem(this);
	}
};

VariableListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitVariableListItem(this);
	}
};



EParser.prototype.variable_identifier_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Variable_identifier_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 206;
    this.enterRecursionRule(localctx, 206, EParser.RULE_variable_identifier_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new VariableListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1494; 
        localctx.item = this.variable_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1501;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,99,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new VariableListItemContext(this, new Variable_identifier_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_variable_identifier_list);
                this.state = 1496;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1497;
                this.match(EParser.COMMA);
                this.state = 1498; 
                localctx.item = this.variable_identifier(); 
            }
            this.state = 1503;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,99,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_method_declaration;
    return this;
}

Method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_declarationContext.prototype.constructor = Method_declarationContext;


 
Method_declarationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ConcreteMethodContext(parser, ctx) {
	Method_declarationContext.call(this, parser);
    this.decl = null; // Concrete_method_declarationContext;
    Method_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConcreteMethodContext.prototype = Object.create(Method_declarationContext.prototype);
ConcreteMethodContext.prototype.constructor = ConcreteMethodContext;

ConcreteMethodContext.prototype.concrete_method_declaration = function() {
    return this.getTypedRuleContext(Concrete_method_declarationContext,0);
};
ConcreteMethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterConcreteMethod(this);
	}
};

ConcreteMethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitConcreteMethod(this);
	}
};


function AbstractMethodContext(parser, ctx) {
	Method_declarationContext.call(this, parser);
    this.decl = null; // Abstract_method_declarationContext;
    Method_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AbstractMethodContext.prototype = Object.create(Method_declarationContext.prototype);
AbstractMethodContext.prototype.constructor = AbstractMethodContext;

AbstractMethodContext.prototype.abstract_method_declaration = function() {
    return this.getTypedRuleContext(Abstract_method_declarationContext,0);
};
AbstractMethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAbstractMethod(this);
	}
};

AbstractMethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAbstractMethod(this);
	}
};


function NativeMethodContext(parser, ctx) {
	Method_declarationContext.call(this, parser);
    this.decl = null; // Native_method_declarationContext;
    Method_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeMethodContext.prototype = Object.create(Method_declarationContext.prototype);
NativeMethodContext.prototype.constructor = NativeMethodContext;

NativeMethodContext.prototype.native_method_declaration = function() {
    return this.getTypedRuleContext(Native_method_declarationContext,0);
};
NativeMethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNativeMethod(this);
	}
};

NativeMethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNativeMethod(this);
	}
};



EParser.prototype.method_declaration = function() {

    var localctx = new Method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, EParser.RULE_method_declaration);
    try {
        this.state = 1507;
        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AbstractMethodContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1504; 
            localctx.decl = this.abstract_method_declaration();
            break;

        case 2:
            localctx = new ConcreteMethodContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1505; 
            localctx.decl = this.concrete_method_declaration();
            break;

        case 3:
            localctx = new NativeMethodContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1506; 
            localctx.decl = this.native_method_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_statement_list;
    return this;
}

Native_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_statement_listContext.prototype.constructor = Native_statement_listContext;


 
Native_statement_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function NativeStatementListContext(parser, ctx) {
	Native_statement_listContext.call(this, parser);
    this.item = null; // Native_statementContext;
    Native_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeStatementListContext.prototype = Object.create(Native_statement_listContext.prototype);
NativeStatementListContext.prototype.constructor = NativeStatementListContext;

NativeStatementListContext.prototype.native_statement = function() {
    return this.getTypedRuleContext(Native_statementContext,0);
};
NativeStatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNativeStatementList(this);
	}
};

NativeStatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNativeStatementList(this);
	}
};


function NativeStatementListItemContext(parser, ctx) {
	Native_statement_listContext.call(this, parser);
    this.items = null; // Native_statement_listContext;
    this.item = null; // Native_statementContext;
    Native_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NativeStatementListItemContext.prototype = Object.create(Native_statement_listContext.prototype);
NativeStatementListItemContext.prototype.constructor = NativeStatementListItemContext;

NativeStatementListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

NativeStatementListItemContext.prototype.native_statement_list = function() {
    return this.getTypedRuleContext(Native_statement_listContext,0);
};

NativeStatementListItemContext.prototype.native_statement = function() {
    return this.getTypedRuleContext(Native_statementContext,0);
};
NativeStatementListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNativeStatementListItem(this);
	}
};

NativeStatementListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNativeStatementListItem(this);
	}
};



EParser.prototype.native_statement_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Native_statement_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 210;
    this.enterRecursionRule(localctx, 210, EParser.RULE_native_statement_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new NativeStatementListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1510; 
        localctx.item = this.native_statement();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1518;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,101,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new NativeStatementListItemContext(this, new Native_statement_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_native_statement_list);
                this.state = 1512;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1513; 
                this.lfp();
                this.state = 1514; 
                localctx.item = this.native_statement(); 
            }
            this.state = 1520;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,101,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Native_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_native_statement;
    return this;
}

Native_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_statementContext.prototype.constructor = Native_statementContext;


 
Native_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function Python2NativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    this.stmt = null; // Python_native_statementContext;
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python2NativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
Python2NativeStatementContext.prototype.constructor = Python2NativeStatementContext;

Python2NativeStatementContext.prototype.PYTHON2 = function() {
    return this.getToken(EParser.PYTHON2, 0);
};

Python2NativeStatementContext.prototype.python_native_statement = function() {
    return this.getTypedRuleContext(Python_native_statementContext,0);
};
Python2NativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython2NativeStatement(this);
	}
};

Python2NativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython2NativeStatement(this);
	}
};


function CSharpNativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    this.stmt = null; // Csharp_statementContext;
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpNativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
CSharpNativeStatementContext.prototype.constructor = CSharpNativeStatementContext;

CSharpNativeStatementContext.prototype.CSHARP = function() {
    return this.getToken(EParser.CSHARP, 0);
};

CSharpNativeStatementContext.prototype.csharp_statement = function() {
    return this.getTypedRuleContext(Csharp_statementContext,0);
};
CSharpNativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpNativeStatement(this);
	}
};

CSharpNativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpNativeStatement(this);
	}
};


function JavaNativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    this.stmt = null; // Java_statementContext;
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaNativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
JavaNativeStatementContext.prototype.constructor = JavaNativeStatementContext;

JavaNativeStatementContext.prototype.JAVA = function() {
    return this.getToken(EParser.JAVA, 0);
};

JavaNativeStatementContext.prototype.java_statement = function() {
    return this.getTypedRuleContext(Java_statementContext,0);
};
JavaNativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaNativeStatement(this);
	}
};

JavaNativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaNativeStatement(this);
	}
};


function JavaScriptNativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    this.stmt = null; // Javascript_native_statementContext;
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaScriptNativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
JavaScriptNativeStatementContext.prototype.constructor = JavaScriptNativeStatementContext;

JavaScriptNativeStatementContext.prototype.JAVASCRIPT = function() {
    return this.getToken(EParser.JAVASCRIPT, 0);
};

JavaScriptNativeStatementContext.prototype.javascript_native_statement = function() {
    return this.getTypedRuleContext(Javascript_native_statementContext,0);
};
JavaScriptNativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaScriptNativeStatement(this);
	}
};

JavaScriptNativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaScriptNativeStatement(this);
	}
};


function Python3NativeStatementContext(parser, ctx) {
	Native_statementContext.call(this, parser);
    this.stmt = null; // Python_native_statementContext;
    Native_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Python3NativeStatementContext.prototype = Object.create(Native_statementContext.prototype);
Python3NativeStatementContext.prototype.constructor = Python3NativeStatementContext;

Python3NativeStatementContext.prototype.PYTHON3 = function() {
    return this.getToken(EParser.PYTHON3, 0);
};

Python3NativeStatementContext.prototype.python_native_statement = function() {
    return this.getTypedRuleContext(Python_native_statementContext,0);
};
Python3NativeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython3NativeStatement(this);
	}
};

Python3NativeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython3NativeStatement(this);
	}
};



EParser.prototype.native_statement = function() {

    var localctx = new Native_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, EParser.RULE_native_statement);
    try {
        this.state = 1531;
        switch(this._input.LA(1)) {
        case EParser.JAVA:
            localctx = new JavaNativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1521;
            this.match(EParser.JAVA);
            this.state = 1522; 
            localctx.stmt = this.java_statement();
            break;
        case EParser.CSHARP:
            localctx = new CSharpNativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1523;
            this.match(EParser.CSHARP);
            this.state = 1524; 
            localctx.stmt = this.csharp_statement();
            break;
        case EParser.PYTHON2:
            localctx = new Python2NativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1525;
            this.match(EParser.PYTHON2);
            this.state = 1526; 
            localctx.stmt = this.python_native_statement();
            break;
        case EParser.PYTHON3:
            localctx = new Python3NativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1527;
            this.match(EParser.PYTHON3);
            this.state = 1528; 
            localctx.stmt = this.python_native_statement();
            break;
        case EParser.JAVASCRIPT:
            localctx = new JavaScriptNativeStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1529;
            this.match(EParser.JAVASCRIPT);
            this.state = 1530; 
            localctx.stmt = this.javascript_native_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_native_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_native_statement;
    this.stmt = null; // Python_statementContext
    this.module = null; // Python_moduleContext
    return this;
}

Python_native_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_native_statementContext.prototype.constructor = Python_native_statementContext;

Python_native_statementContext.prototype.python_statement = function() {
    return this.getTypedRuleContext(Python_statementContext,0);
};

Python_native_statementContext.prototype.SEMI = function() {
    return this.getToken(EParser.SEMI, 0);
};

Python_native_statementContext.prototype.python_module = function() {
    return this.getTypedRuleContext(Python_moduleContext,0);
};

Python_native_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython_native_statement(this);
	}
};

Python_native_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython_native_statement(this);
	}
};




EParser.prototype.python_native_statement = function() {

    var localctx = new Python_native_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, EParser.RULE_python_native_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1533; 
        localctx.stmt = this.python_statement();
        this.state = 1535;
        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
        if(la_===1) {
            this.state = 1534;
            this.match(EParser.SEMI);

        }
        this.state = 1538;
        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
        if(la_===1) {
            this.state = 1537; 
            localctx.module = this.python_module();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_native_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_native_statement;
    this.stmt = null; // Javascript_statementContext
    this.module = null; // Javascript_moduleContext
    return this;
}

Javascript_native_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_native_statementContext.prototype.constructor = Javascript_native_statementContext;

Javascript_native_statementContext.prototype.javascript_statement = function() {
    return this.getTypedRuleContext(Javascript_statementContext,0);
};

Javascript_native_statementContext.prototype.SEMI = function() {
    return this.getToken(EParser.SEMI, 0);
};

Javascript_native_statementContext.prototype.javascript_module = function() {
    return this.getTypedRuleContext(Javascript_moduleContext,0);
};

Javascript_native_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascript_native_statement(this);
	}
};

Javascript_native_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascript_native_statement(this);
	}
};




EParser.prototype.javascript_native_statement = function() {

    var localctx = new Javascript_native_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, EParser.RULE_javascript_native_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1540; 
        localctx.stmt = this.javascript_statement();
        this.state = 1542;
        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
        if(la_===1) {
            this.state = 1541;
            this.match(EParser.SEMI);

        }
        this.state = 1545;
        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
        if(la_===1) {
            this.state = 1544; 
            localctx.module = this.javascript_module();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_statement_list;
    return this;
}

Statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_listContext.prototype.constructor = Statement_listContext;


 
Statement_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function StatementListItemContext(parser, ctx) {
	Statement_listContext.call(this, parser);
    this.items = null; // Statement_listContext;
    this.item = null; // StatementContext;
    Statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StatementListItemContext.prototype = Object.create(Statement_listContext.prototype);
StatementListItemContext.prototype.constructor = StatementListItemContext;

StatementListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

StatementListItemContext.prototype.statement_list = function() {
    return this.getTypedRuleContext(Statement_listContext,0);
};

StatementListItemContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};
StatementListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterStatementListItem(this);
	}
};

StatementListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitStatementListItem(this);
	}
};


function StatementListContext(parser, ctx) {
	Statement_listContext.call(this, parser);
    this.item = null; // StatementContext;
    Statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StatementListContext.prototype = Object.create(Statement_listContext.prototype);
StatementListContext.prototype.constructor = StatementListContext;

StatementListContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};
StatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterStatementList(this);
	}
};

StatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitStatementList(this);
	}
};



EParser.prototype.statement_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Statement_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 218;
    this.enterRecursionRule(localctx, 218, EParser.RULE_statement_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new StatementListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1548; 
        localctx.item = this.statement();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1556;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,107,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new StatementListItemContext(this, new Statement_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_statement_list);
                this.state = 1550;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1551; 
                this.lfp();
                this.state = 1552; 
                localctx.item = this.statement(); 
            }
            this.state = 1558;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,107,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Switch_case_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_switch_case_statement_list;
    return this;
}

Switch_case_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_case_statement_listContext.prototype.constructor = Switch_case_statement_listContext;


 
Switch_case_statement_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function SwitchCaseStatementListItemContext(parser, ctx) {
	Switch_case_statement_listContext.call(this, parser);
    this.items = null; // Switch_case_statement_listContext;
    this.item = null; // Switch_case_statementContext;
    Switch_case_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SwitchCaseStatementListItemContext.prototype = Object.create(Switch_case_statement_listContext.prototype);
SwitchCaseStatementListItemContext.prototype.constructor = SwitchCaseStatementListItemContext;

SwitchCaseStatementListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

SwitchCaseStatementListItemContext.prototype.switch_case_statement_list = function() {
    return this.getTypedRuleContext(Switch_case_statement_listContext,0);
};

SwitchCaseStatementListItemContext.prototype.switch_case_statement = function() {
    return this.getTypedRuleContext(Switch_case_statementContext,0);
};
SwitchCaseStatementListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSwitchCaseStatementListItem(this);
	}
};

SwitchCaseStatementListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSwitchCaseStatementListItem(this);
	}
};


function SwitchCaseStatementListContext(parser, ctx) {
	Switch_case_statement_listContext.call(this, parser);
    this.item = null; // Switch_case_statementContext;
    Switch_case_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SwitchCaseStatementListContext.prototype = Object.create(Switch_case_statement_listContext.prototype);
SwitchCaseStatementListContext.prototype.constructor = SwitchCaseStatementListContext;

SwitchCaseStatementListContext.prototype.switch_case_statement = function() {
    return this.getTypedRuleContext(Switch_case_statementContext,0);
};
SwitchCaseStatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSwitchCaseStatementList(this);
	}
};

SwitchCaseStatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSwitchCaseStatementList(this);
	}
};



EParser.prototype.switch_case_statement_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Switch_case_statement_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 220;
    this.enterRecursionRule(localctx, 220, EParser.RULE_switch_case_statement_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new SwitchCaseStatementListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1560; 
        localctx.item = this.switch_case_statement();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1568;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,108,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new SwitchCaseStatementListItemContext(this, new Switch_case_statement_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_switch_case_statement_list);
                this.state = 1562;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1563; 
                this.lfp();
                this.state = 1564; 
                localctx.item = this.switch_case_statement(); 
            }
            this.state = 1570;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,108,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Catch_statement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_catch_statement_list;
    return this;
}

Catch_statement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Catch_statement_listContext.prototype.constructor = Catch_statement_listContext;


 
Catch_statement_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CatchStatementListContext(parser, ctx) {
	Catch_statement_listContext.call(this, parser);
    this.item = null; // Catch_statementContext;
    Catch_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CatchStatementListContext.prototype = Object.create(Catch_statement_listContext.prototype);
CatchStatementListContext.prototype.constructor = CatchStatementListContext;

CatchStatementListContext.prototype.catch_statement = function() {
    return this.getTypedRuleContext(Catch_statementContext,0);
};
CatchStatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCatchStatementList(this);
	}
};

CatchStatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCatchStatementList(this);
	}
};


function CatchStatementListItemContext(parser, ctx) {
	Catch_statement_listContext.call(this, parser);
    this.items = null; // Catch_statement_listContext;
    this.item = null; // Catch_statementContext;
    Catch_statement_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CatchStatementListItemContext.prototype = Object.create(Catch_statement_listContext.prototype);
CatchStatementListItemContext.prototype.constructor = CatchStatementListItemContext;

CatchStatementListItemContext.prototype.lfp = function() {
    return this.getTypedRuleContext(LfpContext,0);
};

CatchStatementListItemContext.prototype.catch_statement_list = function() {
    return this.getTypedRuleContext(Catch_statement_listContext,0);
};

CatchStatementListItemContext.prototype.catch_statement = function() {
    return this.getTypedRuleContext(Catch_statementContext,0);
};
CatchStatementListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCatchStatementListItem(this);
	}
};

CatchStatementListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCatchStatementListItem(this);
	}
};



EParser.prototype.catch_statement_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Catch_statement_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 222;
    this.enterRecursionRule(localctx, 222, EParser.RULE_catch_statement_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new CatchStatementListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1572; 
        localctx.item = this.catch_statement();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1580;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,109,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CatchStatementListItemContext(this, new Catch_statement_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_catch_statement_list);
                this.state = 1574;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1575; 
                this.lfp();
                this.state = 1576; 
                localctx.item = this.catch_statement(); 
            }
            this.state = 1582;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,109,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Literal_collectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_literal_collection;
    return this;
}

Literal_collectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_collectionContext.prototype.constructor = Literal_collectionContext;


 
Literal_collectionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function LiteralSetLiteralContext(parser, ctx) {
	Literal_collectionContext.call(this, parser);
    this.exp = null; // Literal_list_literalContext;
    Literal_collectionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralSetLiteralContext.prototype = Object.create(Literal_collectionContext.prototype);
LiteralSetLiteralContext.prototype.constructor = LiteralSetLiteralContext;

LiteralSetLiteralContext.prototype.LT = function() {
    return this.getToken(EParser.LT, 0);
};

LiteralSetLiteralContext.prototype.GT = function() {
    return this.getToken(EParser.GT, 0);
};

LiteralSetLiteralContext.prototype.literal_list_literal = function() {
    return this.getTypedRuleContext(Literal_list_literalContext,0);
};
LiteralSetLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLiteralSetLiteral(this);
	}
};

LiteralSetLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLiteralSetLiteral(this);
	}
};


function LiteralListLiteralContext(parser, ctx) {
	Literal_collectionContext.call(this, parser);
    this.exp = null; // Literal_list_literalContext;
    Literal_collectionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralListLiteralContext.prototype = Object.create(Literal_collectionContext.prototype);
LiteralListLiteralContext.prototype.constructor = LiteralListLiteralContext;

LiteralListLiteralContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

LiteralListLiteralContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

LiteralListLiteralContext.prototype.literal_list_literal = function() {
    return this.getTypedRuleContext(Literal_list_literalContext,0);
};
LiteralListLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLiteralListLiteral(this);
	}
};

LiteralListLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLiteralListLiteral(this);
	}
};


function LiteralRangeLiteralContext(parser, ctx) {
	Literal_collectionContext.call(this, parser);
    this.low = null; // Atomic_literalContext;
    this.high = null; // Atomic_literalContext;
    Literal_collectionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralRangeLiteralContext.prototype = Object.create(Literal_collectionContext.prototype);
LiteralRangeLiteralContext.prototype.constructor = LiteralRangeLiteralContext;

LiteralRangeLiteralContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

LiteralRangeLiteralContext.prototype.RANGE = function() {
    return this.getToken(EParser.RANGE, 0);
};

LiteralRangeLiteralContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

LiteralRangeLiteralContext.prototype.atomic_literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Atomic_literalContext);
    } else {
        return this.getTypedRuleContext(Atomic_literalContext,i);
    }
};
LiteralRangeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLiteralRangeLiteral(this);
	}
};

LiteralRangeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLiteralRangeLiteral(this);
	}
};



EParser.prototype.literal_collection = function() {

    var localctx = new Literal_collectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, EParser.RULE_literal_collection);
    try {
        this.state = 1597;
        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LiteralRangeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1583;
            this.match(EParser.LBRAK);
            this.state = 1584; 
            localctx.low = this.atomic_literal();
            this.state = 1585;
            this.match(EParser.RANGE);
            this.state = 1586; 
            localctx.high = this.atomic_literal();
            this.state = 1587;
            this.match(EParser.RBRAK);
            break;

        case 2:
            localctx = new LiteralListLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1589;
            this.match(EParser.LBRAK);
            this.state = 1590; 
            localctx.exp = this.literal_list_literal(0);
            this.state = 1591;
            this.match(EParser.RBRAK);
            break;

        case 3:
            localctx = new LiteralSetLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1593;
            this.match(EParser.LT);
            this.state = 1594; 
            localctx.exp = this.literal_list_literal(0);
            this.state = 1595;
            this.match(EParser.GT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Atomic_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_atomic_literal;
    return this;
}

Atomic_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Atomic_literalContext.prototype.constructor = Atomic_literalContext;


 
Atomic_literalContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PeriodLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PeriodLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
PeriodLiteralContext.prototype.constructor = PeriodLiteralContext;

PeriodLiteralContext.prototype.PERIOD_LITERAL = function() {
    return this.getToken(EParser.PERIOD_LITERAL, 0);
};
PeriodLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPeriodLiteral(this);
	}
};

PeriodLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPeriodLiteral(this);
	}
};


function NullLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.n = null; // Null_literalContext;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
NullLiteralContext.prototype.constructor = NullLiteralContext;

NullLiteralContext.prototype.null_literal = function() {
    return this.getTypedRuleContext(Null_literalContext,0);
};
NullLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterNullLiteral(this);
	}
};

NullLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitNullLiteral(this);
	}
};


function TextLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TextLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
TextLiteralContext.prototype.constructor = TextLiteralContext;

TextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(EParser.TEXT_LITERAL, 0);
};
TextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTextLiteral(this);
	}
};

TextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTextLiteral(this);
	}
};


function HexadecimalLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HexadecimalLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
HexadecimalLiteralContext.prototype.constructor = HexadecimalLiteralContext;

HexadecimalLiteralContext.prototype.HEXA_LITERAL = function() {
    return this.getToken(EParser.HEXA_LITERAL, 0);
};
HexadecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterHexadecimalLiteral(this);
	}
};

HexadecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitHexadecimalLiteral(this);
	}
};


function CharacterLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CharacterLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
CharacterLiteralContext.prototype.constructor = CharacterLiteralContext;

CharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(EParser.CHAR_LITERAL, 0);
};
CharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCharacterLiteral(this);
	}
};

CharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCharacterLiteral(this);
	}
};


function DateLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
DateLiteralContext.prototype.constructor = DateLiteralContext;

DateLiteralContext.prototype.DATE_LITERAL = function() {
    return this.getToken(EParser.DATE_LITERAL, 0);
};
DateLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDateLiteral(this);
	}
};

DateLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDateLiteral(this);
	}
};


function TimeLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
TimeLiteralContext.prototype.constructor = TimeLiteralContext;

TimeLiteralContext.prototype.TIME_LITERAL = function() {
    return this.getToken(EParser.TIME_LITERAL, 0);
};
TimeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTimeLiteral(this);
	}
};

TimeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTimeLiteral(this);
	}
};


function MaxIntegerLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MaxIntegerLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
MaxIntegerLiteralContext.prototype.constructor = MaxIntegerLiteralContext;

MaxIntegerLiteralContext.prototype.MAX_INTEGER = function() {
    return this.getToken(EParser.MAX_INTEGER, 0);
};
MaxIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMaxIntegerLiteral(this);
	}
};

MaxIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMaxIntegerLiteral(this);
	}
};


function IntegerLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntegerLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
IntegerLiteralContext.prototype.constructor = IntegerLiteralContext;

IntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(EParser.INTEGER_LITERAL, 0);
};
IntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIntegerLiteral(this);
	}
};

IntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIntegerLiteral(this);
	}
};


function DecimalLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DecimalLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
DecimalLiteralContext.prototype.constructor = DecimalLiteralContext;

DecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(EParser.DECIMAL_LITERAL, 0);
};
DecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDecimalLiteral(this);
	}
};


function MinIntegerLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MinIntegerLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
MinIntegerLiteralContext.prototype.constructor = MinIntegerLiteralContext;

MinIntegerLiteralContext.prototype.MIN_INTEGER = function() {
    return this.getToken(EParser.MIN_INTEGER, 0);
};
MinIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMinIntegerLiteral(this);
	}
};

MinIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMinIntegerLiteral(this);
	}
};


function DateTimeLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateTimeLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
DateTimeLiteralContext.prototype.constructor = DateTimeLiteralContext;

DateTimeLiteralContext.prototype.DATETIME_LITERAL = function() {
    return this.getToken(EParser.DATETIME_LITERAL, 0);
};
DateTimeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDateTimeLiteral(this);
	}
};

DateTimeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDateTimeLiteral(this);
	}
};


function BooleanLiteralContext(parser, ctx) {
	Atomic_literalContext.call(this, parser);
    this.t = null; // Token;
    Atomic_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanLiteralContext.prototype = Object.create(Atomic_literalContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

BooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(EParser.BOOLEAN_LITERAL, 0);
};
BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitBooleanLiteral(this);
	}
};



EParser.prototype.atomic_literal = function() {

    var localctx = new Atomic_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, EParser.RULE_atomic_literal);
    try {
        this.state = 1612;
        switch(this._input.LA(1)) {
        case EParser.MIN_INTEGER:
            localctx = new MinIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1599;
            localctx.t = this.match(EParser.MIN_INTEGER);
            break;
        case EParser.MAX_INTEGER:
            localctx = new MaxIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1600;
            localctx.t = this.match(EParser.MAX_INTEGER);
            break;
        case EParser.INTEGER_LITERAL:
            localctx = new IntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1601;
            localctx.t = this.match(EParser.INTEGER_LITERAL);
            break;
        case EParser.HEXA_LITERAL:
            localctx = new HexadecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1602;
            localctx.t = this.match(EParser.HEXA_LITERAL);
            break;
        case EParser.CHAR_LITERAL:
            localctx = new CharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1603;
            localctx.t = this.match(EParser.CHAR_LITERAL);
            break;
        case EParser.DATE_LITERAL:
            localctx = new DateLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1604;
            localctx.t = this.match(EParser.DATE_LITERAL);
            break;
        case EParser.TIME_LITERAL:
            localctx = new TimeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1605;
            localctx.t = this.match(EParser.TIME_LITERAL);
            break;
        case EParser.TEXT_LITERAL:
            localctx = new TextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 1606;
            localctx.t = this.match(EParser.TEXT_LITERAL);
            break;
        case EParser.DECIMAL_LITERAL:
            localctx = new DecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 1607;
            localctx.t = this.match(EParser.DECIMAL_LITERAL);
            break;
        case EParser.DATETIME_LITERAL:
            localctx = new DateTimeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 1608;
            localctx.t = this.match(EParser.DATETIME_LITERAL);
            break;
        case EParser.BOOLEAN_LITERAL:
            localctx = new BooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 1609;
            localctx.t = this.match(EParser.BOOLEAN_LITERAL);
            break;
        case EParser.PERIOD_LITERAL:
            localctx = new PeriodLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 1610;
            localctx.t = this.match(EParser.PERIOD_LITERAL);
            break;
        case EParser.NOTHING:
            localctx = new NullLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 1611; 
            localctx.n = this.null_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Literal_list_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_literal_list_literal;
    return this;
}

Literal_list_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_list_literalContext.prototype.constructor = Literal_list_literalContext;


 
Literal_list_literalContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LiteralListContext(parser, ctx) {
	Literal_list_literalContext.call(this, parser);
    this.item = null; // Atomic_literalContext;
    Literal_list_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralListContext.prototype = Object.create(Literal_list_literalContext.prototype);
LiteralListContext.prototype.constructor = LiteralListContext;

LiteralListContext.prototype.atomic_literal = function() {
    return this.getTypedRuleContext(Atomic_literalContext,0);
};
LiteralListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLiteralList(this);
	}
};

LiteralListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLiteralList(this);
	}
};


function LiteralListItemContext(parser, ctx) {
	Literal_list_literalContext.call(this, parser);
    this.items = null; // Literal_list_literalContext;
    this.item = null; // Atomic_literalContext;
    Literal_list_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralListItemContext.prototype = Object.create(Literal_list_literalContext.prototype);
LiteralListItemContext.prototype.constructor = LiteralListItemContext;

LiteralListItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

LiteralListItemContext.prototype.literal_list_literal = function() {
    return this.getTypedRuleContext(Literal_list_literalContext,0);
};

LiteralListItemContext.prototype.atomic_literal = function() {
    return this.getTypedRuleContext(Atomic_literalContext,0);
};
LiteralListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLiteralListItem(this);
	}
};

LiteralListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLiteralListItem(this);
	}
};



EParser.prototype.literal_list_literal = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Literal_list_literalContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 228;
    this.enterRecursionRule(localctx, 228, EParser.RULE_literal_list_literal, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new LiteralListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1615; 
        localctx.item = this.atomic_literal();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1622;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,112,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new LiteralListItemContext(this, new Literal_list_literalContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_literal_list_literal);
                this.state = 1617;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1618;
                this.match(EParser.COMMA);
                this.state = 1619; 
                localctx.item = this.atomic_literal(); 
            }
            this.state = 1624;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,112,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Selectable_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_selectable_expression;
    return this;
}

Selectable_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Selectable_expressionContext.prototype.constructor = Selectable_expressionContext;


 
Selectable_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function IdentifierExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // IdentifierContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdentifierExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
IdentifierExpressionContext.prototype.constructor = IdentifierExpressionContext;

IdentifierExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
IdentifierExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIdentifierExpression(this);
	}
};

IdentifierExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIdentifierExpression(this);
	}
};


function ParenthesisExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // Parenthesis_expressionContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesisExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
ParenthesisExpressionContext.prototype.constructor = ParenthesisExpressionContext;

ParenthesisExpressionContext.prototype.parenthesis_expression = function() {
    return this.getTypedRuleContext(Parenthesis_expressionContext,0);
};
ParenthesisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterParenthesisExpression(this);
	}
};

ParenthesisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitParenthesisExpression(this);
	}
};


function LiteralExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // Literal_expressionContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
LiteralExpressionContext.prototype.constructor = LiteralExpressionContext;

LiteralExpressionContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};
LiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterLiteralExpression(this);
	}
};

LiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitLiteralExpression(this);
	}
};


function ThisExpressionContext(parser, ctx) {
	Selectable_expressionContext.call(this, parser);
    this.exp = null; // This_expressionContext;
    Selectable_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ThisExpressionContext.prototype = Object.create(Selectable_expressionContext.prototype);
ThisExpressionContext.prototype.constructor = ThisExpressionContext;

ThisExpressionContext.prototype.this_expression = function() {
    return this.getTypedRuleContext(This_expressionContext,0);
};
ThisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterThisExpression(this);
	}
};

ThisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitThisExpression(this);
	}
};



EParser.prototype.selectable_expression = function() {

    var localctx = new Selectable_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, EParser.RULE_selectable_expression);
    try {
        this.state = 1629;
        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ParenthesisExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1625; 
            localctx.exp = this.parenthesis_expression();
            break;

        case 2:
            localctx = new LiteralExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1626; 
            localctx.exp = this.literal_expression();
            break;

        case 3:
            localctx = new IdentifierExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1627; 
            localctx.exp = this.identifier();
            break;

        case 4:
            localctx = new ThisExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1628; 
            localctx.exp = this.this_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function This_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_this_expression;
    return this;
}

This_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
This_expressionContext.prototype.constructor = This_expressionContext;

This_expressionContext.prototype.SELF = function() {
    return this.getToken(EParser.SELF, 0);
};

This_expressionContext.prototype.THIS = function() {
    return this.getToken(EParser.THIS, 0);
};

This_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterThis_expression(this);
	}
};

This_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitThis_expression(this);
	}
};




EParser.prototype.this_expression = function() {

    var localctx = new This_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, EParser.RULE_this_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1631;
        _la = this._input.LA(1);
        if(!(_la===EParser.SELF || _la===EParser.THIS)) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_parenthesis_expression;
    this.exp = null; // ExpressionContext
    return this;
}

Parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parenthesis_expressionContext.prototype.constructor = Parenthesis_expressionContext;

Parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Parenthesis_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterParenthesis_expression(this);
	}
};

Parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitParenthesis_expression(this);
	}
};




EParser.prototype.parenthesis_expression = function() {

    var localctx = new Parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, EParser.RULE_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1633;
        this.match(EParser.LPAR);
        this.state = 1634; 
        localctx.exp = this.expression(0);
        this.state = 1635;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_literal_expression;
    return this;
}

Literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_expressionContext.prototype.constructor = Literal_expressionContext;


 
Literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CollectionLiteralContext(parser, ctx) {
	Literal_expressionContext.call(this, parser);
    this.exp = null; // Collection_literalContext;
    Literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CollectionLiteralContext.prototype = Object.create(Literal_expressionContext.prototype);
CollectionLiteralContext.prototype.constructor = CollectionLiteralContext;

CollectionLiteralContext.prototype.collection_literal = function() {
    return this.getTypedRuleContext(Collection_literalContext,0);
};
CollectionLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCollectionLiteral(this);
	}
};

CollectionLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCollectionLiteral(this);
	}
};


function AtomicLiteralContext(parser, ctx) {
	Literal_expressionContext.call(this, parser);
    this.exp = null; // Atomic_literalContext;
    Literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtomicLiteralContext.prototype = Object.create(Literal_expressionContext.prototype);
AtomicLiteralContext.prototype.constructor = AtomicLiteralContext;

AtomicLiteralContext.prototype.atomic_literal = function() {
    return this.getTypedRuleContext(Atomic_literalContext,0);
};
AtomicLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAtomicLiteral(this);
	}
};

AtomicLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAtomicLiteral(this);
	}
};



EParser.prototype.literal_expression = function() {

    var localctx = new Literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, EParser.RULE_literal_expression);
    try {
        this.state = 1639;
        switch(this._input.LA(1)) {
        case EParser.NOTHING:
        case EParser.BOOLEAN_LITERAL:
        case EParser.CHAR_LITERAL:
        case EParser.MIN_INTEGER:
        case EParser.MAX_INTEGER:
        case EParser.TEXT_LITERAL:
        case EParser.INTEGER_LITERAL:
        case EParser.HEXA_LITERAL:
        case EParser.DECIMAL_LITERAL:
        case EParser.DATETIME_LITERAL:
        case EParser.TIME_LITERAL:
        case EParser.DATE_LITERAL:
        case EParser.PERIOD_LITERAL:
            localctx = new AtomicLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1637; 
            localctx.exp = this.atomic_literal();
            break;
        case EParser.LPAR:
        case EParser.LBRAK:
        case EParser.LCURL:
        case EParser.LT:
            localctx = new CollectionLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1638; 
            localctx.exp = this.collection_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collection_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_collection_literal;
    return this;
}

Collection_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collection_literalContext.prototype.constructor = Collection_literalContext;


 
Collection_literalContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TupleLiteralContext(parser, ctx) {
	Collection_literalContext.call(this, parser);
    this.exp = null; // Tuple_literalContext;
    Collection_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TupleLiteralContext.prototype = Object.create(Collection_literalContext.prototype);
TupleLiteralContext.prototype.constructor = TupleLiteralContext;

TupleLiteralContext.prototype.tuple_literal = function() {
    return this.getTypedRuleContext(Tuple_literalContext,0);
};
TupleLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTupleLiteral(this);
	}
};

TupleLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTupleLiteral(this);
	}
};


function ListLiteralContext(parser, ctx) {
	Collection_literalContext.call(this, parser);
    this.exp = null; // List_literalContext;
    Collection_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListLiteralContext.prototype = Object.create(Collection_literalContext.prototype);
ListLiteralContext.prototype.constructor = ListLiteralContext;

ListLiteralContext.prototype.list_literal = function() {
    return this.getTypedRuleContext(List_literalContext,0);
};
ListLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterListLiteral(this);
	}
};

ListLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitListLiteral(this);
	}
};


function DictLiteralContext(parser, ctx) {
	Collection_literalContext.call(this, parser);
    this.exp = null; // Dict_literalContext;
    Collection_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DictLiteralContext.prototype = Object.create(Collection_literalContext.prototype);
DictLiteralContext.prototype.constructor = DictLiteralContext;

DictLiteralContext.prototype.dict_literal = function() {
    return this.getTypedRuleContext(Dict_literalContext,0);
};
DictLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDictLiteral(this);
	}
};

DictLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDictLiteral(this);
	}
};


function RangeLiteralContext(parser, ctx) {
	Collection_literalContext.call(this, parser);
    this.exp = null; // Range_literalContext;
    Collection_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RangeLiteralContext.prototype = Object.create(Collection_literalContext.prototype);
RangeLiteralContext.prototype.constructor = RangeLiteralContext;

RangeLiteralContext.prototype.range_literal = function() {
    return this.getTypedRuleContext(Range_literalContext,0);
};
RangeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterRangeLiteral(this);
	}
};

RangeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitRangeLiteral(this);
	}
};


function SetLiteralContext(parser, ctx) {
	Collection_literalContext.call(this, parser);
    this.exp = null; // Set_literalContext;
    Collection_literalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetLiteralContext.prototype = Object.create(Collection_literalContext.prototype);
SetLiteralContext.prototype.constructor = SetLiteralContext;

SetLiteralContext.prototype.set_literal = function() {
    return this.getTypedRuleContext(Set_literalContext,0);
};
SetLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSetLiteral(this);
	}
};

SetLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSetLiteral(this);
	}
};



EParser.prototype.collection_literal = function() {

    var localctx = new Collection_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, EParser.RULE_collection_literal);
    try {
        this.state = 1646;
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        switch(la_) {
        case 1:
            localctx = new RangeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1641; 
            localctx.exp = this.range_literal();
            break;

        case 2:
            localctx = new ListLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1642; 
            localctx.exp = this.list_literal();
            break;

        case 3:
            localctx = new SetLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1643; 
            localctx.exp = this.set_literal();
            break;

        case 4:
            localctx = new DictLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1644; 
            localctx.exp = this.dict_literal();
            break;

        case 5:
            localctx = new TupleLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1645; 
            localctx.exp = this.tuple_literal();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Tuple_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_tuple_literal;
    this.items = null; // Expression_tupleContext
    return this;
}

Tuple_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tuple_literalContext.prototype.constructor = Tuple_literalContext;

Tuple_literalContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Tuple_literalContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Tuple_literalContext.prototype.expression_tuple = function() {
    return this.getTypedRuleContext(Expression_tupleContext,0);
};

Tuple_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterTuple_literal(this);
	}
};

Tuple_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitTuple_literal(this);
	}
};




EParser.prototype.tuple_literal = function() {

    var localctx = new Tuple_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, EParser.RULE_tuple_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1648;
        this.match(EParser.LPAR);
        this.state = 1650;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << EParser.LPAR) | (1 << EParser.LBRAK) | (1 << EParser.LCURL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (EParser.MINUS - 33)) | (1 << (EParser.LT - 33)) | (1 << (EParser.METHOD_T - 33)) | (1 << (EParser.CODE - 33)) | (1 << (EParser.DOCUMENT - 33)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (EParser.EXECUTE - 87)) | (1 << (EParser.FETCH - 87)) | (1 << (EParser.INVOKE - 87)) | (1 << (EParser.NOT - 87)) | (1 << (EParser.NOTHING - 87)) | (1 << (EParser.READ - 87)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (EParser.SELF - 120)) | (1 << (EParser.SORTED - 120)) | (1 << (EParser.THIS - 120)) | (1 << (EParser.BOOLEAN_LITERAL - 120)) | (1 << (EParser.CHAR_LITERAL - 120)) | (1 << (EParser.MIN_INTEGER - 120)) | (1 << (EParser.MAX_INTEGER - 120)) | (1 << (EParser.SYMBOL_IDENTIFIER - 120)) | (1 << (EParser.TYPE_IDENTIFIER - 120)) | (1 << (EParser.VARIABLE_IDENTIFIER - 120)) | (1 << (EParser.TEXT_LITERAL - 120)) | (1 << (EParser.INTEGER_LITERAL - 120)) | (1 << (EParser.HEXA_LITERAL - 120)) | (1 << (EParser.DECIMAL_LITERAL - 120)) | (1 << (EParser.DATETIME_LITERAL - 120)) | (1 << (EParser.TIME_LITERAL - 120)) | (1 << (EParser.DATE_LITERAL - 120)) | (1 << (EParser.PERIOD_LITERAL - 120)))) !== 0)) {
            this.state = 1649; 
            localctx.items = this.expression_tuple(0);
        }

        this.state = 1652;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dict_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_dict_literal;
    this.items = null; // Dict_entry_listContext
    return this;
}

Dict_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dict_literalContext.prototype.constructor = Dict_literalContext;

Dict_literalContext.prototype.LCURL = function() {
    return this.getToken(EParser.LCURL, 0);
};

Dict_literalContext.prototype.RCURL = function() {
    return this.getToken(EParser.RCURL, 0);
};

Dict_literalContext.prototype.dict_entry_list = function() {
    return this.getTypedRuleContext(Dict_entry_listContext,0);
};

Dict_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDict_literal(this);
	}
};

Dict_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDict_literal(this);
	}
};




EParser.prototype.dict_literal = function() {

    var localctx = new Dict_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, EParser.RULE_dict_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1654;
        this.match(EParser.LCURL);
        this.state = 1656;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << EParser.LPAR) | (1 << EParser.LBRAK) | (1 << EParser.LCURL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (EParser.MINUS - 33)) | (1 << (EParser.LT - 33)) | (1 << (EParser.METHOD_T - 33)) | (1 << (EParser.CODE - 33)) | (1 << (EParser.DOCUMENT - 33)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (EParser.EXECUTE - 87)) | (1 << (EParser.FETCH - 87)) | (1 << (EParser.INVOKE - 87)) | (1 << (EParser.NOT - 87)) | (1 << (EParser.NOTHING - 87)) | (1 << (EParser.READ - 87)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (EParser.SELF - 120)) | (1 << (EParser.SORTED - 120)) | (1 << (EParser.THIS - 120)) | (1 << (EParser.BOOLEAN_LITERAL - 120)) | (1 << (EParser.CHAR_LITERAL - 120)) | (1 << (EParser.MIN_INTEGER - 120)) | (1 << (EParser.MAX_INTEGER - 120)) | (1 << (EParser.SYMBOL_IDENTIFIER - 120)) | (1 << (EParser.TYPE_IDENTIFIER - 120)) | (1 << (EParser.VARIABLE_IDENTIFIER - 120)) | (1 << (EParser.TEXT_LITERAL - 120)) | (1 << (EParser.INTEGER_LITERAL - 120)) | (1 << (EParser.HEXA_LITERAL - 120)) | (1 << (EParser.DECIMAL_LITERAL - 120)) | (1 << (EParser.DATETIME_LITERAL - 120)) | (1 << (EParser.TIME_LITERAL - 120)) | (1 << (EParser.DATE_LITERAL - 120)) | (1 << (EParser.PERIOD_LITERAL - 120)))) !== 0)) {
            this.state = 1655; 
            localctx.items = this.dict_entry_list(0);
        }

        this.state = 1658;
        this.match(EParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_tupleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_expression_tuple;
    return this;
}

Expression_tupleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_tupleContext.prototype.constructor = Expression_tupleContext;


 
Expression_tupleContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ValueTupleItemContext(parser, ctx) {
	Expression_tupleContext.call(this, parser);
    this.items = null; // Expression_tupleContext;
    this.item = null; // ExpressionContext;
    Expression_tupleContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValueTupleItemContext.prototype = Object.create(Expression_tupleContext.prototype);
ValueTupleItemContext.prototype.constructor = ValueTupleItemContext;

ValueTupleItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

ValueTupleItemContext.prototype.expression_tuple = function() {
    return this.getTypedRuleContext(Expression_tupleContext,0);
};

ValueTupleItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ValueTupleItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterValueTupleItem(this);
	}
};

ValueTupleItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitValueTupleItem(this);
	}
};


function ValueTupleContext(parser, ctx) {
	Expression_tupleContext.call(this, parser);
    this.item = null; // ExpressionContext;
    Expression_tupleContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValueTupleContext.prototype = Object.create(Expression_tupleContext.prototype);
ValueTupleContext.prototype.constructor = ValueTupleContext;

ValueTupleContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ValueTupleContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterValueTuple(this);
	}
};

ValueTupleContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitValueTuple(this);
	}
};



EParser.prototype.expression_tuple = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Expression_tupleContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 244;
    this.enterRecursionRule(localctx, 244, EParser.RULE_expression_tuple, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new ValueTupleContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1661; 
        localctx.item = this.expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1668;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,118,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ValueTupleItemContext(this, new Expression_tupleContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_expression_tuple);
                this.state = 1663;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1664;
                this.match(EParser.COMMA);
                this.state = 1665; 
                localctx.item = this.expression(0); 
            }
            this.state = 1670;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,118,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Dict_entry_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_dict_entry_list;
    return this;
}

Dict_entry_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dict_entry_listContext.prototype.constructor = Dict_entry_listContext;


 
Dict_entry_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function DictEntryListContext(parser, ctx) {
	Dict_entry_listContext.call(this, parser);
    this.item = null; // Dict_entryContext;
    Dict_entry_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DictEntryListContext.prototype = Object.create(Dict_entry_listContext.prototype);
DictEntryListContext.prototype.constructor = DictEntryListContext;

DictEntryListContext.prototype.dict_entry = function() {
    return this.getTypedRuleContext(Dict_entryContext,0);
};
DictEntryListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDictEntryList(this);
	}
};

DictEntryListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDictEntryList(this);
	}
};


function DictEntryListItemContext(parser, ctx) {
	Dict_entry_listContext.call(this, parser);
    this.items = null; // Dict_entry_listContext;
    this.item = null; // Dict_entryContext;
    Dict_entry_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DictEntryListItemContext.prototype = Object.create(Dict_entry_listContext.prototype);
DictEntryListItemContext.prototype.constructor = DictEntryListItemContext;

DictEntryListItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

DictEntryListItemContext.prototype.dict_entry_list = function() {
    return this.getTypedRuleContext(Dict_entry_listContext,0);
};

DictEntryListItemContext.prototype.dict_entry = function() {
    return this.getTypedRuleContext(Dict_entryContext,0);
};
DictEntryListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDictEntryListItem(this);
	}
};

DictEntryListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDictEntryListItem(this);
	}
};



EParser.prototype.dict_entry_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Dict_entry_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 246;
    this.enterRecursionRule(localctx, 246, EParser.RULE_dict_entry_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new DictEntryListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1672; 
        localctx.item = this.dict_entry();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1679;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,119,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new DictEntryListItemContext(this, new Dict_entry_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_dict_entry_list);
                this.state = 1674;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1675;
                this.match(EParser.COMMA);
                this.state = 1676; 
                localctx.item = this.dict_entry(); 
            }
            this.state = 1681;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,119,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Dict_entryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_dict_entry;
    this.key = null; // ExpressionContext
    this.value = null; // ExpressionContext
    return this;
}

Dict_entryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dict_entryContext.prototype.constructor = Dict_entryContext;

Dict_entryContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

Dict_entryContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Dict_entryContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDict_entry(this);
	}
};

Dict_entryContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDict_entry(this);
	}
};




EParser.prototype.dict_entry = function() {

    var localctx = new Dict_entryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, EParser.RULE_dict_entry);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1682; 
        localctx.key = this.expression(0);
        this.state = 1683;
        this.match(EParser.COLON);
        this.state = 1684; 
        localctx.value = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Slice_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_slice_arguments;
    return this;
}

Slice_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Slice_argumentsContext.prototype.constructor = Slice_argumentsContext;


 
Slice_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SliceFirstAndLastContext(parser, ctx) {
	Slice_argumentsContext.call(this, parser);
    this.first = null; // ExpressionContext;
    this.last = null; // ExpressionContext;
    Slice_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceFirstAndLastContext.prototype = Object.create(Slice_argumentsContext.prototype);
SliceFirstAndLastContext.prototype.constructor = SliceFirstAndLastContext;

SliceFirstAndLastContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

SliceFirstAndLastContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
SliceFirstAndLastContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSliceFirstAndLast(this);
	}
};

SliceFirstAndLastContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSliceFirstAndLast(this);
	}
};


function SliceFirstOnlyContext(parser, ctx) {
	Slice_argumentsContext.call(this, parser);
    this.first = null; // ExpressionContext;
    Slice_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceFirstOnlyContext.prototype = Object.create(Slice_argumentsContext.prototype);
SliceFirstOnlyContext.prototype.constructor = SliceFirstOnlyContext;

SliceFirstOnlyContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

SliceFirstOnlyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SliceFirstOnlyContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSliceFirstOnly(this);
	}
};

SliceFirstOnlyContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSliceFirstOnly(this);
	}
};


function SliceLastOnlyContext(parser, ctx) {
	Slice_argumentsContext.call(this, parser);
    this.last = null; // ExpressionContext;
    Slice_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceLastOnlyContext.prototype = Object.create(Slice_argumentsContext.prototype);
SliceLastOnlyContext.prototype.constructor = SliceLastOnlyContext;

SliceLastOnlyContext.prototype.COLON = function() {
    return this.getToken(EParser.COLON, 0);
};

SliceLastOnlyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SliceLastOnlyContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSliceLastOnly(this);
	}
};

SliceLastOnlyContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSliceLastOnly(this);
	}
};



EParser.prototype.slice_arguments = function() {

    var localctx = new Slice_argumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, EParser.RULE_slice_arguments);
    try {
        this.state = 1695;
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SliceFirstAndLastContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1686; 
            localctx.first = this.expression(0);
            this.state = 1687;
            this.match(EParser.COLON);
            this.state = 1688; 
            localctx.last = this.expression(0);
            break;

        case 2:
            localctx = new SliceFirstOnlyContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1690; 
            localctx.first = this.expression(0);
            this.state = 1691;
            this.match(EParser.COLON);
            break;

        case 3:
            localctx = new SliceLastOnlyContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1693;
            this.match(EParser.COLON);
            this.state = 1694; 
            localctx.last = this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assign_variable_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_assign_variable_statement;
    this.name = null; // Variable_identifierContext
    this.exp = null; // ExpressionContext
    return this;
}

Assign_variable_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assign_variable_statementContext.prototype.constructor = Assign_variable_statementContext;

Assign_variable_statementContext.prototype.assign = function() {
    return this.getTypedRuleContext(AssignContext,0);
};

Assign_variable_statementContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Assign_variable_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Assign_variable_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAssign_variable_statement(this);
	}
};

Assign_variable_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAssign_variable_statement(this);
	}
};




EParser.prototype.assign_variable_statement = function() {

    var localctx = new Assign_variable_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, EParser.RULE_assign_variable_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1697; 
        localctx.name = this.variable_identifier();
        this.state = 1698; 
        this.assign();
        this.state = 1699; 
        localctx.exp = this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assignable_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_assignable_instance;
    return this;
}

Assignable_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assignable_instanceContext.prototype.constructor = Assignable_instanceContext;


 
Assignable_instanceContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function RootInstanceContext(parser, ctx) {
	Assignable_instanceContext.call(this, parser);
    this.name = null; // Variable_identifierContext;
    Assignable_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RootInstanceContext.prototype = Object.create(Assignable_instanceContext.prototype);
RootInstanceContext.prototype.constructor = RootInstanceContext;

RootInstanceContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};
RootInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterRootInstance(this);
	}
};

RootInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitRootInstance(this);
	}
};


function ChildInstanceContext(parser, ctx) {
	Assignable_instanceContext.call(this, parser);
    this.parent = null; // Assignable_instanceContext;
    this.child = null; // Child_instanceContext;
    Assignable_instanceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ChildInstanceContext.prototype = Object.create(Assignable_instanceContext.prototype);
ChildInstanceContext.prototype.constructor = ChildInstanceContext;

ChildInstanceContext.prototype.assignable_instance = function() {
    return this.getTypedRuleContext(Assignable_instanceContext,0);
};

ChildInstanceContext.prototype.child_instance = function() {
    return this.getTypedRuleContext(Child_instanceContext,0);
};
ChildInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterChildInstance(this);
	}
};

ChildInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitChildInstance(this);
	}
};



EParser.prototype.assignable_instance = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Assignable_instanceContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 254;
    this.enterRecursionRule(localctx, 254, EParser.RULE_assignable_instance, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new RootInstanceContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1702; 
        localctx.name = this.variable_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1708;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,121,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ChildInstanceContext(this, new Assignable_instanceContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_assignable_instance);
                this.state = 1704;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1705; 
                localctx.child = this.child_instance(); 
            }
            this.state = 1710;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,121,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Is_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_is_expression;
    return this;
}

Is_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Is_expressionContext.prototype.constructor = Is_expressionContext;


 
Is_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function IsATypeExpressionContext(parser, ctx) {
	Is_expressionContext.call(this, parser);
    this.typ = null; // Category_or_any_typeContext;
    Is_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsATypeExpressionContext.prototype = Object.create(Is_expressionContext.prototype);
IsATypeExpressionContext.prototype.constructor = IsATypeExpressionContext;

IsATypeExpressionContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

IsATypeExpressionContext.prototype.category_or_any_type = function() {
    return this.getTypedRuleContext(Category_or_any_typeContext,0);
};
IsATypeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIsATypeExpression(this);
	}
};

IsATypeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIsATypeExpression(this);
	}
};


function IsOtherExpressionContext(parser, ctx) {
	Is_expressionContext.call(this, parser);
    this.exp = null; // ExpressionContext;
    Is_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsOtherExpressionContext.prototype = Object.create(Is_expressionContext.prototype);
IsOtherExpressionContext.prototype.constructor = IsOtherExpressionContext;

IsOtherExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
IsOtherExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIsOtherExpression(this);
	}
};

IsOtherExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIsOtherExpression(this);
	}
};



EParser.prototype.is_expression = function() {

    var localctx = new Is_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, EParser.RULE_is_expression);
    try {
        this.state = 1715;
        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
        switch(la_) {
        case 1:
            localctx = new IsATypeExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1711;
            if (!( this.willBeAOrAn())) {
                throw new antlr4.error.FailedPredicateException(this, "$parser.willBeAOrAn()");
            }
            this.state = 1712;
            this.match(EParser.VARIABLE_IDENTIFIER);
            this.state = 1713; 
            localctx.typ = this.category_or_any_type();
            break;

        case 2:
            localctx = new IsOtherExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1714; 
            localctx.exp = this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_operator;
    return this;
}

OperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorContext.prototype.constructor = OperatorContext;


 
OperatorContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function OperatorPlusContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorPlusContext.prototype = Object.create(OperatorContext.prototype);
OperatorPlusContext.prototype.constructor = OperatorPlusContext;

OperatorPlusContext.prototype.PLUS = function() {
    return this.getToken(EParser.PLUS, 0);
};
OperatorPlusContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOperatorPlus(this);
	}
};

OperatorPlusContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOperatorPlus(this);
	}
};


function OperatorModuloContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorModuloContext.prototype = Object.create(OperatorContext.prototype);
OperatorModuloContext.prototype.constructor = OperatorModuloContext;

OperatorModuloContext.prototype.modulo = function() {
    return this.getTypedRuleContext(ModuloContext,0);
};
OperatorModuloContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOperatorModulo(this);
	}
};

OperatorModuloContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOperatorModulo(this);
	}
};


function OperatorIDivideContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorIDivideContext.prototype = Object.create(OperatorContext.prototype);
OperatorIDivideContext.prototype.constructor = OperatorIDivideContext;

OperatorIDivideContext.prototype.idivide = function() {
    return this.getTypedRuleContext(IdivideContext,0);
};
OperatorIDivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOperatorIDivide(this);
	}
};

OperatorIDivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOperatorIDivide(this);
	}
};


function OperatorMultiplyContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorMultiplyContext.prototype = Object.create(OperatorContext.prototype);
OperatorMultiplyContext.prototype.constructor = OperatorMultiplyContext;

OperatorMultiplyContext.prototype.multiply = function() {
    return this.getTypedRuleContext(MultiplyContext,0);
};
OperatorMultiplyContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOperatorMultiply(this);
	}
};

OperatorMultiplyContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOperatorMultiply(this);
	}
};


function OperatorDivideContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorDivideContext.prototype = Object.create(OperatorContext.prototype);
OperatorDivideContext.prototype.constructor = OperatorDivideContext;

OperatorDivideContext.prototype.divide = function() {
    return this.getTypedRuleContext(DivideContext,0);
};
OperatorDivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOperatorDivide(this);
	}
};

OperatorDivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOperatorDivide(this);
	}
};


function OperatorMinusContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorMinusContext.prototype = Object.create(OperatorContext.prototype);
OperatorMinusContext.prototype.constructor = OperatorMinusContext;

OperatorMinusContext.prototype.MINUS = function() {
    return this.getToken(EParser.MINUS, 0);
};
OperatorMinusContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterOperatorMinus(this);
	}
};

OperatorMinusContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitOperatorMinus(this);
	}
};



EParser.prototype.operator = function() {

    var localctx = new OperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, EParser.RULE_operator);
    try {
        this.state = 1723;
        switch(this._input.LA(1)) {
        case EParser.PLUS:
            localctx = new OperatorPlusContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1717;
            this.match(EParser.PLUS);
            break;
        case EParser.MINUS:
            localctx = new OperatorMinusContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1718;
            this.match(EParser.MINUS);
            break;
        case EParser.STAR:
            localctx = new OperatorMultiplyContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1719; 
            this.multiply();
            break;
        case EParser.SLASH:
            localctx = new OperatorDivideContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1720; 
            this.divide();
            break;
        case EParser.BSLASH:
            localctx = new OperatorIDivideContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1721; 
            this.idivide();
            break;
        case EParser.PERCENT:
        case EParser.MODULO:
            localctx = new OperatorModuloContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1722; 
            this.modulo();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Key_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_key_token;
    this.i1 = null; // Token
    return this;
}

Key_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Key_tokenContext.prototype.constructor = Key_tokenContext;

Key_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

Key_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterKey_token(this);
	}
};

Key_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitKey_token(this);
	}
};




EParser.prototype.key_token = function() {

    var localctx = new Key_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, EParser.RULE_key_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1725;
        localctx.i1 = this.match(EParser.VARIABLE_IDENTIFIER);
        this.state = 1726;
        if (!( this.isText(localctx.i1,"key"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"key\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Value_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_value_token;
    this.i1 = null; // Token
    return this;
}

Value_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Value_tokenContext.prototype.constructor = Value_tokenContext;

Value_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

Value_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterValue_token(this);
	}
};

Value_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitValue_token(this);
	}
};




EParser.prototype.value_token = function() {

    var localctx = new Value_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, EParser.RULE_value_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1728;
        localctx.i1 = this.match(EParser.VARIABLE_IDENTIFIER);
        this.state = 1729;
        if (!( this.isText(localctx.i1,"value"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"value\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Symbols_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_symbols_token;
    this.i1 = null; // Token
    return this;
}

Symbols_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Symbols_tokenContext.prototype.constructor = Symbols_tokenContext;

Symbols_tokenContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

Symbols_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterSymbols_token(this);
	}
};

Symbols_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitSymbols_token(this);
	}
};




EParser.prototype.symbols_token = function() {

    var localctx = new Symbols_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, EParser.RULE_symbols_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1731;
        localctx.i1 = this.match(EParser.VARIABLE_IDENTIFIER);
        this.state = 1732;
        if (!( this.isText(localctx.i1,"symbols"))) {
            throw new antlr4.error.FailedPredicateException(this, "$parser.isText($i1,\"symbols\")");
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_assign;
    return this;
}

AssignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignContext.prototype.constructor = AssignContext;

AssignContext.prototype.EQ = function() {
    return this.getToken(EParser.EQ, 0);
};

AssignContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterAssign(this);
	}
};

AssignContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitAssign(this);
	}
};




EParser.prototype.assign = function() {

    var localctx = new AssignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, EParser.RULE_assign);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1734;
        this.match(EParser.EQ);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiplyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_multiply;
    return this;
}

MultiplyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplyContext.prototype.constructor = MultiplyContext;

MultiplyContext.prototype.STAR = function() {
    return this.getToken(EParser.STAR, 0);
};

MultiplyContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterMultiply(this);
	}
};

MultiplyContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitMultiply(this);
	}
};




EParser.prototype.multiply = function() {

    var localctx = new MultiplyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, EParser.RULE_multiply);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1736;
        this.match(EParser.STAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DivideContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_divide;
    return this;
}

DivideContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DivideContext.prototype.constructor = DivideContext;

DivideContext.prototype.SLASH = function() {
    return this.getToken(EParser.SLASH, 0);
};

DivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterDivide(this);
	}
};

DivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitDivide(this);
	}
};




EParser.prototype.divide = function() {

    var localctx = new DivideContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, EParser.RULE_divide);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1738;
        this.match(EParser.SLASH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdivideContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_idivide;
    return this;
}

IdivideContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdivideContext.prototype.constructor = IdivideContext;

IdivideContext.prototype.BSLASH = function() {
    return this.getToken(EParser.BSLASH, 0);
};

IdivideContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterIdivide(this);
	}
};

IdivideContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitIdivide(this);
	}
};




EParser.prototype.idivide = function() {

    var localctx = new IdivideContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, EParser.RULE_idivide);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1740;
        this.match(EParser.BSLASH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuloContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_modulo;
    return this;
}

ModuloContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuloContext.prototype.constructor = ModuloContext;

ModuloContext.prototype.PERCENT = function() {
    return this.getToken(EParser.PERCENT, 0);
};

ModuloContext.prototype.MODULO = function() {
    return this.getToken(EParser.MODULO, 0);
};

ModuloContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterModulo(this);
	}
};

ModuloContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitModulo(this);
	}
};




EParser.prototype.modulo = function() {

    var localctx = new ModuloContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, EParser.RULE_modulo);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1742;
        _la = this._input.LA(1);
        if(!(_la===EParser.PERCENT || _la===EParser.MODULO)) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_statement;
    return this;
}

Javascript_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_statementContext.prototype.constructor = Javascript_statementContext;


 
Javascript_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavascriptReturnStatementContext(parser, ctx) {
	Javascript_statementContext.call(this, parser);
    this.exp = null; // Javascript_expressionContext;
    Javascript_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptReturnStatementContext.prototype = Object.create(Javascript_statementContext.prototype);
JavascriptReturnStatementContext.prototype.constructor = JavascriptReturnStatementContext;

JavascriptReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(EParser.RETURN, 0);
};

JavascriptReturnStatementContext.prototype.SEMI = function() {
    return this.getToken(EParser.SEMI, 0);
};

JavascriptReturnStatementContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptReturnStatement(this);
	}
};

JavascriptReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptReturnStatement(this);
	}
};


function JavascriptStatementContext(parser, ctx) {
	Javascript_statementContext.call(this, parser);
    this.exp = null; // Javascript_expressionContext;
    Javascript_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptStatementContext.prototype = Object.create(Javascript_statementContext.prototype);
JavascriptStatementContext.prototype.constructor = JavascriptStatementContext;

JavascriptStatementContext.prototype.SEMI = function() {
    return this.getToken(EParser.SEMI, 0);
};

JavascriptStatementContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptStatement(this);
	}
};

JavascriptStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptStatement(this);
	}
};



EParser.prototype.javascript_statement = function() {

    var localctx = new Javascript_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, EParser.RULE_javascript_statement);
    try {
        this.state = 1751;
        switch(this._input.LA(1)) {
        case EParser.RETURN:
            localctx = new JavascriptReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1744;
            this.match(EParser.RETURN);
            this.state = 1745; 
            localctx.exp = this.javascript_expression(0);
            this.state = 1746;
            this.match(EParser.SEMI);
            break;
        case EParser.LPAR:
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.READ:
        case EParser.WRITE:
        case EParser.BOOLEAN_LITERAL:
        case EParser.CHAR_LITERAL:
        case EParser.SYMBOL_IDENTIFIER:
        case EParser.TYPE_IDENTIFIER:
        case EParser.VARIABLE_IDENTIFIER:
        case EParser.TEXT_LITERAL:
        case EParser.INTEGER_LITERAL:
        case EParser.DECIMAL_LITERAL:
            localctx = new JavascriptStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1748; 
            localctx.exp = this.javascript_expression(0);
            this.state = 1749;
            this.match(EParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_expression;
    return this;
}

Javascript_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_expressionContext.prototype.constructor = Javascript_expressionContext;


 
Javascript_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavascriptPrimaryExpressionContext(parser, ctx) {
	Javascript_expressionContext.call(this, parser);
    this.exp = null; // Javascript_primary_expressionContext;
    Javascript_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptPrimaryExpressionContext.prototype = Object.create(Javascript_expressionContext.prototype);
JavascriptPrimaryExpressionContext.prototype.constructor = JavascriptPrimaryExpressionContext;

JavascriptPrimaryExpressionContext.prototype.javascript_primary_expression = function() {
    return this.getTypedRuleContext(Javascript_primary_expressionContext,0);
};
JavascriptPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptPrimaryExpression(this);
	}
};

JavascriptPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptPrimaryExpression(this);
	}
};


function JavascriptSelectorExpressionContext(parser, ctx) {
	Javascript_expressionContext.call(this, parser);
    this.parent = null; // Javascript_expressionContext;
    this.child = null; // Javascript_selector_expressionContext;
    Javascript_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptSelectorExpressionContext.prototype = Object.create(Javascript_expressionContext.prototype);
JavascriptSelectorExpressionContext.prototype.constructor = JavascriptSelectorExpressionContext;

JavascriptSelectorExpressionContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};

JavascriptSelectorExpressionContext.prototype.javascript_selector_expression = function() {
    return this.getTypedRuleContext(Javascript_selector_expressionContext,0);
};
JavascriptSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptSelectorExpression(this);
	}
};

JavascriptSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptSelectorExpression(this);
	}
};



EParser.prototype.javascript_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Javascript_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 278;
    this.enterRecursionRule(localctx, 278, EParser.RULE_javascript_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavascriptPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1754; 
        localctx.exp = this.javascript_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1760;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,125,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavascriptSelectorExpressionContext(this, new Javascript_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_javascript_expression);
                this.state = 1756;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1757; 
                localctx.child = this.javascript_selector_expression(); 
            }
            this.state = 1762;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,125,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Javascript_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_primary_expression;
    return this;
}

Javascript_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_primary_expressionContext.prototype.constructor = Javascript_primary_expressionContext;


 
Javascript_primary_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavascriptParenthesisExpressionContext(parser, ctx) {
	Javascript_primary_expressionContext.call(this, parser);
    this.exp = null; // Javascript_parenthesis_expressionContext;
    Javascript_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptParenthesisExpressionContext.prototype = Object.create(Javascript_primary_expressionContext.prototype);
JavascriptParenthesisExpressionContext.prototype.constructor = JavascriptParenthesisExpressionContext;

JavascriptParenthesisExpressionContext.prototype.javascript_parenthesis_expression = function() {
    return this.getTypedRuleContext(Javascript_parenthesis_expressionContext,0);
};
JavascriptParenthesisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptParenthesisExpression(this);
	}
};

JavascriptParenthesisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptParenthesisExpression(this);
	}
};


function JavascriptLiteralExpressionContext(parser, ctx) {
	Javascript_primary_expressionContext.call(this, parser);
    this.exp = null; // Javascript_literal_expressionContext;
    Javascript_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptLiteralExpressionContext.prototype = Object.create(Javascript_primary_expressionContext.prototype);
JavascriptLiteralExpressionContext.prototype.constructor = JavascriptLiteralExpressionContext;

JavascriptLiteralExpressionContext.prototype.javascript_literal_expression = function() {
    return this.getTypedRuleContext(Javascript_literal_expressionContext,0);
};
JavascriptLiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptLiteralExpression(this);
	}
};

JavascriptLiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptLiteralExpression(this);
	}
};


function JavascriptIdentifierExpressionContext(parser, ctx) {
	Javascript_primary_expressionContext.call(this, parser);
    this.exp = null; // Javascript_identifier_expressionContext;
    Javascript_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptIdentifierExpressionContext.prototype = Object.create(Javascript_primary_expressionContext.prototype);
JavascriptIdentifierExpressionContext.prototype.constructor = JavascriptIdentifierExpressionContext;

JavascriptIdentifierExpressionContext.prototype.javascript_identifier_expression = function() {
    return this.getTypedRuleContext(Javascript_identifier_expressionContext,0);
};
JavascriptIdentifierExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptIdentifierExpression(this);
	}
};

JavascriptIdentifierExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptIdentifierExpression(this);
	}
};



EParser.prototype.javascript_primary_expression = function() {

    var localctx = new Javascript_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, EParser.RULE_javascript_primary_expression);
    try {
        this.state = 1766;
        switch(this._input.LA(1)) {
        case EParser.LPAR:
            localctx = new JavascriptParenthesisExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1763; 
            localctx.exp = this.javascript_parenthesis_expression();
            break;
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.READ:
        case EParser.WRITE:
        case EParser.SYMBOL_IDENTIFIER:
        case EParser.TYPE_IDENTIFIER:
        case EParser.VARIABLE_IDENTIFIER:
            localctx = new JavascriptIdentifierExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1764; 
            localctx.exp = this.javascript_identifier_expression(0);
            break;
        case EParser.BOOLEAN_LITERAL:
        case EParser.CHAR_LITERAL:
        case EParser.TEXT_LITERAL:
        case EParser.INTEGER_LITERAL:
        case EParser.DECIMAL_LITERAL:
            localctx = new JavascriptLiteralExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1765; 
            localctx.exp = this.javascript_literal_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_selector_expression;
    return this;
}

Javascript_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_selector_expressionContext.prototype.constructor = Javascript_selector_expressionContext;


 
Javascript_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavascriptMethodExpressionContext(parser, ctx) {
	Javascript_selector_expressionContext.call(this, parser);
    this.exp = null; // Javascript_method_expressionContext;
    Javascript_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptMethodExpressionContext.prototype = Object.create(Javascript_selector_expressionContext.prototype);
JavascriptMethodExpressionContext.prototype.constructor = JavascriptMethodExpressionContext;

JavascriptMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

JavascriptMethodExpressionContext.prototype.javascript_method_expression = function() {
    return this.getTypedRuleContext(Javascript_method_expressionContext,0);
};
JavascriptMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptMethodExpression(this);
	}
};

JavascriptMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptMethodExpression(this);
	}
};


function JavascriptItemExpressionContext(parser, ctx) {
	Javascript_selector_expressionContext.call(this, parser);
    this.exp = null; // Javascript_item_expressionContext;
    Javascript_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptItemExpressionContext.prototype = Object.create(Javascript_selector_expressionContext.prototype);
JavascriptItemExpressionContext.prototype.constructor = JavascriptItemExpressionContext;

JavascriptItemExpressionContext.prototype.javascript_item_expression = function() {
    return this.getTypedRuleContext(Javascript_item_expressionContext,0);
};
JavascriptItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptItemExpression(this);
	}
};

JavascriptItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptItemExpression(this);
	}
};



EParser.prototype.javascript_selector_expression = function() {

    var localctx = new Javascript_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, EParser.RULE_javascript_selector_expression);
    try {
        this.state = 1771;
        switch(this._input.LA(1)) {
        case EParser.DOT:
            localctx = new JavascriptMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1768;
            this.match(EParser.DOT);
            this.state = 1769; 
            localctx.exp = this.javascript_method_expression();
            break;
        case EParser.LBRAK:
            localctx = new JavascriptItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1770; 
            localctx.exp = this.javascript_item_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_method_expression;
    this.name = null; // Javascript_identifierContext
    this.args = null; // Javascript_argumentsContext
    return this;
}

Javascript_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_method_expressionContext.prototype.constructor = Javascript_method_expressionContext;

Javascript_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Javascript_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Javascript_method_expressionContext.prototype.javascript_identifier = function() {
    return this.getTypedRuleContext(Javascript_identifierContext,0);
};

Javascript_method_expressionContext.prototype.javascript_arguments = function() {
    return this.getTypedRuleContext(Javascript_argumentsContext,0);
};

Javascript_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascript_method_expression(this);
	}
};

Javascript_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascript_method_expression(this);
	}
};




EParser.prototype.javascript_method_expression = function() {

    var localctx = new Javascript_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, EParser.RULE_javascript_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1773; 
        localctx.name = this.javascript_identifier();
        this.state = 1774;
        this.match(EParser.LPAR);
        this.state = 1776;
        _la = this._input.LA(1);
        if(_la===EParser.LPAR || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (EParser.BOOLEAN - 50)) | (1 << (EParser.CHARACTER - 50)) | (1 << (EParser.TEXT - 50)) | (1 << (EParser.INTEGER - 50)) | (1 << (EParser.DECIMAL - 50)) | (1 << (EParser.DATE - 50)) | (1 << (EParser.TIME - 50)) | (1 << (EParser.DATETIME - 50)) | (1 << (EParser.PERIOD - 50)))) !== 0) || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (EParser.READ - 115)) | (1 << (EParser.WRITE - 115)) | (1 << (EParser.BOOLEAN_LITERAL - 115)) | (1 << (EParser.CHAR_LITERAL - 115)) | (1 << (EParser.SYMBOL_IDENTIFIER - 115)) | (1 << (EParser.TYPE_IDENTIFIER - 115)) | (1 << (EParser.VARIABLE_IDENTIFIER - 115)) | (1 << (EParser.TEXT_LITERAL - 115)) | (1 << (EParser.INTEGER_LITERAL - 115)) | (1 << (EParser.DECIMAL_LITERAL - 115)))) !== 0)) {
            this.state = 1775; 
            localctx.args = this.javascript_arguments(0);
        }

        this.state = 1778;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_arguments;
    return this;
}

Javascript_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_argumentsContext.prototype.constructor = Javascript_argumentsContext;


 
Javascript_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavascriptArgumentListItemContext(parser, ctx) {
	Javascript_argumentsContext.call(this, parser);
    this.items = null; // Javascript_argumentsContext;
    this.item = null; // Javascript_expressionContext;
    Javascript_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptArgumentListItemContext.prototype = Object.create(Javascript_argumentsContext.prototype);
JavascriptArgumentListItemContext.prototype.constructor = JavascriptArgumentListItemContext;

JavascriptArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

JavascriptArgumentListItemContext.prototype.javascript_arguments = function() {
    return this.getTypedRuleContext(Javascript_argumentsContext,0);
};

JavascriptArgumentListItemContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptArgumentListItem(this);
	}
};

JavascriptArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptArgumentListItem(this);
	}
};


function JavascriptArgumentListContext(parser, ctx) {
	Javascript_argumentsContext.call(this, parser);
    this.item = null; // Javascript_expressionContext;
    Javascript_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptArgumentListContext.prototype = Object.create(Javascript_argumentsContext.prototype);
JavascriptArgumentListContext.prototype.constructor = JavascriptArgumentListContext;

JavascriptArgumentListContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};
JavascriptArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptArgumentList(this);
	}
};

JavascriptArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptArgumentList(this);
	}
};



EParser.prototype.javascript_arguments = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Javascript_argumentsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 286;
    this.enterRecursionRule(localctx, 286, EParser.RULE_javascript_arguments, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavascriptArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1781; 
        localctx.item = this.javascript_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1788;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,129,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavascriptArgumentListItemContext(this, new Javascript_argumentsContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_javascript_arguments);
                this.state = 1783;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1784;
                this.match(EParser.COMMA);
                this.state = 1785; 
                localctx.item = this.javascript_expression(0); 
            }
            this.state = 1790;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,129,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Javascript_item_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_item_expression;
    this.exp = null; // Javascript_expressionContext
    return this;
}

Javascript_item_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_item_expressionContext.prototype.constructor = Javascript_item_expressionContext;

Javascript_item_expressionContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

Javascript_item_expressionContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

Javascript_item_expressionContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};

Javascript_item_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascript_item_expression(this);
	}
};

Javascript_item_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascript_item_expression(this);
	}
};




EParser.prototype.javascript_item_expression = function() {

    var localctx = new Javascript_item_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, EParser.RULE_javascript_item_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1791;
        this.match(EParser.LBRAK);
        this.state = 1792; 
        localctx.exp = this.javascript_expression(0);
        this.state = 1793;
        this.match(EParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_parenthesis_expression;
    this.exp = null; // Javascript_expressionContext
    return this;
}

Javascript_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_parenthesis_expressionContext.prototype.constructor = Javascript_parenthesis_expressionContext;

Javascript_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Javascript_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Javascript_parenthesis_expressionContext.prototype.javascript_expression = function() {
    return this.getTypedRuleContext(Javascript_expressionContext,0);
};

Javascript_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascript_parenthesis_expression(this);
	}
};

Javascript_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascript_parenthesis_expression(this);
	}
};




EParser.prototype.javascript_parenthesis_expression = function() {

    var localctx = new Javascript_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, EParser.RULE_javascript_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1795;
        this.match(EParser.LPAR);
        this.state = 1796; 
        localctx.exp = this.javascript_expression(0);
        this.state = 1797;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_identifier_expression;
    return this;
}

Javascript_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_identifier_expressionContext.prototype.constructor = Javascript_identifier_expressionContext;


 
Javascript_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavascriptIdentifierContext(parser, ctx) {
	Javascript_identifier_expressionContext.call(this, parser);
    this.name = null; // Javascript_identifierContext;
    Javascript_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptIdentifierContext.prototype = Object.create(Javascript_identifier_expressionContext.prototype);
JavascriptIdentifierContext.prototype.constructor = JavascriptIdentifierContext;

JavascriptIdentifierContext.prototype.javascript_identifier = function() {
    return this.getTypedRuleContext(Javascript_identifierContext,0);
};
JavascriptIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptIdentifier(this);
	}
};

JavascriptIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptIdentifier(this);
	}
};


function JavascriptChildIdentifierContext(parser, ctx) {
	Javascript_identifier_expressionContext.call(this, parser);
    this.parent = null; // Javascript_identifier_expressionContext;
    this.name = null; // Javascript_identifierContext;
    Javascript_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptChildIdentifierContext.prototype = Object.create(Javascript_identifier_expressionContext.prototype);
JavascriptChildIdentifierContext.prototype.constructor = JavascriptChildIdentifierContext;

JavascriptChildIdentifierContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

JavascriptChildIdentifierContext.prototype.javascript_identifier_expression = function() {
    return this.getTypedRuleContext(Javascript_identifier_expressionContext,0);
};

JavascriptChildIdentifierContext.prototype.javascript_identifier = function() {
    return this.getTypedRuleContext(Javascript_identifierContext,0);
};
JavascriptChildIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptChildIdentifier(this);
	}
};

JavascriptChildIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptChildIdentifier(this);
	}
};



EParser.prototype.javascript_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Javascript_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 292;
    this.enterRecursionRule(localctx, 292, EParser.RULE_javascript_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavascriptIdentifierContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1800; 
        localctx.name = this.javascript_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1807;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,130,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavascriptChildIdentifierContext(this, new Javascript_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_javascript_identifier_expression);
                this.state = 1802;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1803;
                this.match(EParser.DOT);
                this.state = 1804; 
                localctx.name = this.javascript_identifier(); 
            }
            this.state = 1809;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,130,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Javascript_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_literal_expression;
    return this;
}

Javascript_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_literal_expressionContext.prototype.constructor = Javascript_literal_expressionContext;


 
Javascript_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavascriptDecimalLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptDecimalLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptDecimalLiteralContext.prototype.constructor = JavascriptDecimalLiteralContext;

JavascriptDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(EParser.DECIMAL_LITERAL, 0);
};
JavascriptDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptDecimalLiteral(this);
	}
};

JavascriptDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptDecimalLiteral(this);
	}
};


function JavascriptCharacterLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptCharacterLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptCharacterLiteralContext.prototype.constructor = JavascriptCharacterLiteralContext;

JavascriptCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(EParser.CHAR_LITERAL, 0);
};
JavascriptCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptCharacterLiteral(this);
	}
};

JavascriptCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptCharacterLiteral(this);
	}
};


function JavascriptBooleanLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptBooleanLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptBooleanLiteralContext.prototype.constructor = JavascriptBooleanLiteralContext;

JavascriptBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(EParser.BOOLEAN_LITERAL, 0);
};
JavascriptBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptBooleanLiteral(this);
	}
};

JavascriptBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptBooleanLiteral(this);
	}
};


function JavascriptIntegerLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptIntegerLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptIntegerLiteralContext.prototype.constructor = JavascriptIntegerLiteralContext;

JavascriptIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(EParser.INTEGER_LITERAL, 0);
};
JavascriptIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptIntegerLiteral(this);
	}
};

JavascriptIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptIntegerLiteral(this);
	}
};


function JavascriptTextLiteralContext(parser, ctx) {
	Javascript_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Javascript_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavascriptTextLiteralContext.prototype = Object.create(Javascript_literal_expressionContext.prototype);
JavascriptTextLiteralContext.prototype.constructor = JavascriptTextLiteralContext;

JavascriptTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(EParser.TEXT_LITERAL, 0);
};
JavascriptTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascriptTextLiteral(this);
	}
};

JavascriptTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascriptTextLiteral(this);
	}
};



EParser.prototype.javascript_literal_expression = function() {

    var localctx = new Javascript_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, EParser.RULE_javascript_literal_expression);
    try {
        this.state = 1815;
        switch(this._input.LA(1)) {
        case EParser.INTEGER_LITERAL:
            localctx = new JavascriptIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1810;
            localctx.t = this.match(EParser.INTEGER_LITERAL);
            break;
        case EParser.DECIMAL_LITERAL:
            localctx = new JavascriptDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1811;
            localctx.t = this.match(EParser.DECIMAL_LITERAL);
            break;
        case EParser.TEXT_LITERAL:
            localctx = new JavascriptTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1812;
            localctx.t = this.match(EParser.TEXT_LITERAL);
            break;
        case EParser.BOOLEAN_LITERAL:
            localctx = new JavascriptBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1813;
            localctx.t = this.match(EParser.BOOLEAN_LITERAL);
            break;
        case EParser.CHAR_LITERAL:
            localctx = new JavascriptCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1814;
            localctx.t = this.match(EParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Javascript_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_javascript_identifier;
    return this;
}

Javascript_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Javascript_identifierContext.prototype.constructor = Javascript_identifierContext;

Javascript_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

Javascript_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
};

Javascript_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(EParser.TYPE_IDENTIFIER, 0);
};

Javascript_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(EParser.BOOLEAN, 0);
};

Javascript_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(EParser.CHARACTER, 0);
};

Javascript_identifierContext.prototype.TEXT = function() {
    return this.getToken(EParser.TEXT, 0);
};

Javascript_identifierContext.prototype.INTEGER = function() {
    return this.getToken(EParser.INTEGER, 0);
};

Javascript_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(EParser.DECIMAL, 0);
};

Javascript_identifierContext.prototype.DATE = function() {
    return this.getToken(EParser.DATE, 0);
};

Javascript_identifierContext.prototype.TIME = function() {
    return this.getToken(EParser.TIME, 0);
};

Javascript_identifierContext.prototype.DATETIME = function() {
    return this.getToken(EParser.DATETIME, 0);
};

Javascript_identifierContext.prototype.PERIOD = function() {
    return this.getToken(EParser.PERIOD, 0);
};

Javascript_identifierContext.prototype.READ = function() {
    return this.getToken(EParser.READ, 0);
};

Javascript_identifierContext.prototype.WRITE = function() {
    return this.getToken(EParser.WRITE, 0);
};

Javascript_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavascript_identifier(this);
	}
};

Javascript_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavascript_identifier(this);
	}
};




EParser.prototype.javascript_identifier = function() {

    var localctx = new Javascript_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, EParser.RULE_javascript_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1817;
        _la = this._input.LA(1);
        if(!(((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (EParser.BOOLEAN - 50)) | (1 << (EParser.CHARACTER - 50)) | (1 << (EParser.TEXT - 50)) | (1 << (EParser.INTEGER - 50)) | (1 << (EParser.DECIMAL - 50)) | (1 << (EParser.DATE - 50)) | (1 << (EParser.TIME - 50)) | (1 << (EParser.DATETIME - 50)) | (1 << (EParser.PERIOD - 50)))) !== 0) || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (EParser.READ - 115)) | (1 << (EParser.WRITE - 115)) | (1 << (EParser.SYMBOL_IDENTIFIER - 115)) | (1 << (EParser.TYPE_IDENTIFIER - 115)) | (1 << (EParser.VARIABLE_IDENTIFIER - 115)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_statement;
    return this;
}

Python_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_statementContext.prototype.constructor = Python_statementContext;


 
Python_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonReturnStatementContext(parser, ctx) {
	Python_statementContext.call(this, parser);
    this.exp = null; // Python_expressionContext;
    Python_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonReturnStatementContext.prototype = Object.create(Python_statementContext.prototype);
PythonReturnStatementContext.prototype.constructor = PythonReturnStatementContext;

PythonReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(EParser.RETURN, 0);
};

PythonReturnStatementContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonReturnStatement(this);
	}
};

PythonReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonReturnStatement(this);
	}
};


function PythonStatementContext(parser, ctx) {
	Python_statementContext.call(this, parser);
    this.exp = null; // Python_expressionContext;
    Python_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonStatementContext.prototype = Object.create(Python_statementContext.prototype);
PythonStatementContext.prototype.constructor = PythonStatementContext;

PythonStatementContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonStatement(this);
	}
};

PythonStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonStatement(this);
	}
};



EParser.prototype.python_statement = function() {

    var localctx = new Python_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, EParser.RULE_python_statement);
    try {
        this.state = 1822;
        switch(this._input.LA(1)) {
        case EParser.RETURN:
            localctx = new PythonReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1819;
            this.match(EParser.RETURN);
            this.state = 1820; 
            localctx.exp = this.python_expression(0);
            break;
        case EParser.LPAR:
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.BOOLEAN_LITERAL:
        case EParser.CHAR_LITERAL:
        case EParser.SYMBOL_IDENTIFIER:
        case EParser.TYPE_IDENTIFIER:
        case EParser.VARIABLE_IDENTIFIER:
        case EParser.TEXT_LITERAL:
        case EParser.INTEGER_LITERAL:
        case EParser.DECIMAL_LITERAL:
            localctx = new PythonStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1821; 
            localctx.exp = this.python_expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_expression;
    return this;
}

Python_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_expressionContext.prototype.constructor = Python_expressionContext;


 
Python_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonPrimaryExpressionContext(parser, ctx) {
	Python_expressionContext.call(this, parser);
    this.exp = null; // Python_primary_expressionContext;
    Python_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonPrimaryExpressionContext.prototype = Object.create(Python_expressionContext.prototype);
PythonPrimaryExpressionContext.prototype.constructor = PythonPrimaryExpressionContext;

PythonPrimaryExpressionContext.prototype.python_primary_expression = function() {
    return this.getTypedRuleContext(Python_primary_expressionContext,0);
};
PythonPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonPrimaryExpression(this);
	}
};

PythonPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonPrimaryExpression(this);
	}
};


function PythonSelectorExpressionContext(parser, ctx) {
	Python_expressionContext.call(this, parser);
    this.parent = null; // Python_expressionContext;
    this.child = null; // Python_selector_expressionContext;
    Python_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonSelectorExpressionContext.prototype = Object.create(Python_expressionContext.prototype);
PythonSelectorExpressionContext.prototype.constructor = PythonSelectorExpressionContext;

PythonSelectorExpressionContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};

PythonSelectorExpressionContext.prototype.python_selector_expression = function() {
    return this.getTypedRuleContext(Python_selector_expressionContext,0);
};
PythonSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonSelectorExpression(this);
	}
};

PythonSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonSelectorExpression(this);
	}
};



EParser.prototype.python_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 300;
    this.enterRecursionRule(localctx, 300, EParser.RULE_python_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new PythonPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1825; 
        localctx.exp = this.python_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1831;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,133,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonSelectorExpressionContext(this, new Python_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_python_expression);
                this.state = 1827;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1828; 
                localctx.child = this.python_selector_expression(); 
            }
            this.state = 1833;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,133,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_primary_expression;
    return this;
}

Python_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_primary_expressionContext.prototype.constructor = Python_primary_expressionContext;


 
Python_primary_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonIdentifierExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_identifier_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonIdentifierExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonIdentifierExpressionContext.prototype.constructor = PythonIdentifierExpressionContext;

PythonIdentifierExpressionContext.prototype.python_identifier_expression = function() {
    return this.getTypedRuleContext(Python_identifier_expressionContext,0);
};
PythonIdentifierExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonIdentifierExpression(this);
	}
};

PythonIdentifierExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonIdentifierExpression(this);
	}
};


function PythonGlobalMethodExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_method_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonGlobalMethodExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonGlobalMethodExpressionContext.prototype.constructor = PythonGlobalMethodExpressionContext;

PythonGlobalMethodExpressionContext.prototype.python_method_expression = function() {
    return this.getTypedRuleContext(Python_method_expressionContext,0);
};
PythonGlobalMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonGlobalMethodExpression(this);
	}
};

PythonGlobalMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonGlobalMethodExpression(this);
	}
};


function PythonParenthesisExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_parenthesis_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonParenthesisExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonParenthesisExpressionContext.prototype.constructor = PythonParenthesisExpressionContext;

PythonParenthesisExpressionContext.prototype.python_parenthesis_expression = function() {
    return this.getTypedRuleContext(Python_parenthesis_expressionContext,0);
};
PythonParenthesisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonParenthesisExpression(this);
	}
};

PythonParenthesisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonParenthesisExpression(this);
	}
};


function PythonLiteralExpressionContext(parser, ctx) {
	Python_primary_expressionContext.call(this, parser);
    this.exp = null; // Python_literal_expressionContext;
    Python_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonLiteralExpressionContext.prototype = Object.create(Python_primary_expressionContext.prototype);
PythonLiteralExpressionContext.prototype.constructor = PythonLiteralExpressionContext;

PythonLiteralExpressionContext.prototype.python_literal_expression = function() {
    return this.getTypedRuleContext(Python_literal_expressionContext,0);
};
PythonLiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonLiteralExpression(this);
	}
};

PythonLiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonLiteralExpression(this);
	}
};



EParser.prototype.python_primary_expression = function() {

    var localctx = new Python_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, EParser.RULE_python_primary_expression);
    try {
        this.state = 1838;
        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PythonParenthesisExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1834; 
            localctx.exp = this.python_parenthesis_expression();
            break;

        case 2:
            localctx = new PythonIdentifierExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1835; 
            localctx.exp = this.python_identifier_expression(0);
            break;

        case 3:
            localctx = new PythonLiteralExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1836; 
            localctx.exp = this.python_literal_expression();
            break;

        case 4:
            localctx = new PythonGlobalMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1837; 
            localctx.exp = this.python_method_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_selector_expression;
    return this;
}

Python_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_selector_expressionContext.prototype.constructor = Python_selector_expressionContext;


 
Python_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonItemExpressionContext(parser, ctx) {
	Python_selector_expressionContext.call(this, parser);
    this.exp = null; // Python_expressionContext;
    Python_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonItemExpressionContext.prototype = Object.create(Python_selector_expressionContext.prototype);
PythonItemExpressionContext.prototype.constructor = PythonItemExpressionContext;

PythonItemExpressionContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

PythonItemExpressionContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

PythonItemExpressionContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonItemExpression(this);
	}
};

PythonItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonItemExpression(this);
	}
};


function PythonMethodExpressionContext(parser, ctx) {
	Python_selector_expressionContext.call(this, parser);
    this.exp = null; // Python_method_expressionContext;
    Python_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonMethodExpressionContext.prototype = Object.create(Python_selector_expressionContext.prototype);
PythonMethodExpressionContext.prototype.constructor = PythonMethodExpressionContext;

PythonMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

PythonMethodExpressionContext.prototype.python_method_expression = function() {
    return this.getTypedRuleContext(Python_method_expressionContext,0);
};
PythonMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonMethodExpression(this);
	}
};

PythonMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonMethodExpression(this);
	}
};



EParser.prototype.python_selector_expression = function() {

    var localctx = new Python_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, EParser.RULE_python_selector_expression);
    try {
        this.state = 1846;
        switch(this._input.LA(1)) {
        case EParser.DOT:
            localctx = new PythonMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1840;
            this.match(EParser.DOT);
            this.state = 1841; 
            localctx.exp = this.python_method_expression();
            break;
        case EParser.LBRAK:
            localctx = new PythonItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1842;
            this.match(EParser.LBRAK);
            this.state = 1843; 
            localctx.exp = this.python_expression(0);
            this.state = 1844;
            this.match(EParser.RBRAK);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_method_expression;
    this.name = null; // Python_identifierContext
    this.args = null; // Python_argument_listContext
    return this;
}

Python_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_method_expressionContext.prototype.constructor = Python_method_expressionContext;

Python_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Python_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Python_method_expressionContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};

Python_method_expressionContext.prototype.python_argument_list = function() {
    return this.getTypedRuleContext(Python_argument_listContext,0);
};

Python_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython_method_expression(this);
	}
};

Python_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython_method_expression(this);
	}
};




EParser.prototype.python_method_expression = function() {

    var localctx = new Python_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, EParser.RULE_python_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1848; 
        localctx.name = this.python_identifier();
        this.state = 1849;
        this.match(EParser.LPAR);
        this.state = 1851;
        _la = this._input.LA(1);
        if(_la===EParser.LPAR || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (EParser.BOOLEAN - 50)) | (1 << (EParser.CHARACTER - 50)) | (1 << (EParser.TEXT - 50)) | (1 << (EParser.INTEGER - 50)) | (1 << (EParser.DECIMAL - 50)) | (1 << (EParser.DATE - 50)) | (1 << (EParser.TIME - 50)) | (1 << (EParser.DATETIME - 50)) | (1 << (EParser.PERIOD - 50)))) !== 0) || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (EParser.BOOLEAN_LITERAL - 134)) | (1 << (EParser.CHAR_LITERAL - 134)) | (1 << (EParser.SYMBOL_IDENTIFIER - 134)) | (1 << (EParser.TYPE_IDENTIFIER - 134)) | (1 << (EParser.VARIABLE_IDENTIFIER - 134)) | (1 << (EParser.TEXT_LITERAL - 134)) | (1 << (EParser.INTEGER_LITERAL - 134)) | (1 << (EParser.DECIMAL_LITERAL - 134)))) !== 0)) {
            this.state = 1850; 
            localctx.args = this.python_argument_list();
        }

        this.state = 1853;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_argument_list;
    return this;
}

Python_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_argument_listContext.prototype.constructor = Python_argument_listContext;


 
Python_argument_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonNamedOnlyArgumentListContext(parser, ctx) {
	Python_argument_listContext.call(this, parser);
    this.named = null; // Python_named_argument_listContext;
    Python_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonNamedOnlyArgumentListContext.prototype = Object.create(Python_argument_listContext.prototype);
PythonNamedOnlyArgumentListContext.prototype.constructor = PythonNamedOnlyArgumentListContext;

PythonNamedOnlyArgumentListContext.prototype.python_named_argument_list = function() {
    return this.getTypedRuleContext(Python_named_argument_listContext,0);
};
PythonNamedOnlyArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonNamedOnlyArgumentList(this);
	}
};

PythonNamedOnlyArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonNamedOnlyArgumentList(this);
	}
};


function PythonArgumentListContext(parser, ctx) {
	Python_argument_listContext.call(this, parser);
    this.ordinal = null; // Python_ordinal_argument_listContext;
    this.named = null; // Python_named_argument_listContext;
    Python_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonArgumentListContext.prototype = Object.create(Python_argument_listContext.prototype);
PythonArgumentListContext.prototype.constructor = PythonArgumentListContext;

PythonArgumentListContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

PythonArgumentListContext.prototype.python_ordinal_argument_list = function() {
    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
};

PythonArgumentListContext.prototype.python_named_argument_list = function() {
    return this.getTypedRuleContext(Python_named_argument_listContext,0);
};
PythonArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonArgumentList(this);
	}
};

PythonArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonArgumentList(this);
	}
};


function PythonOrdinalOnlyArgumentListContext(parser, ctx) {
	Python_argument_listContext.call(this, parser);
    this.ordinal = null; // Python_ordinal_argument_listContext;
    Python_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonOrdinalOnlyArgumentListContext.prototype = Object.create(Python_argument_listContext.prototype);
PythonOrdinalOnlyArgumentListContext.prototype.constructor = PythonOrdinalOnlyArgumentListContext;

PythonOrdinalOnlyArgumentListContext.prototype.python_ordinal_argument_list = function() {
    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
};
PythonOrdinalOnlyArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonOrdinalOnlyArgumentList(this);
	}
};

PythonOrdinalOnlyArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonOrdinalOnlyArgumentList(this);
	}
};



EParser.prototype.python_argument_list = function() {

    var localctx = new Python_argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, EParser.RULE_python_argument_list);
    try {
        this.state = 1861;
        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PythonOrdinalOnlyArgumentListContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1855; 
            localctx.ordinal = this.python_ordinal_argument_list(0);
            break;

        case 2:
            localctx = new PythonNamedOnlyArgumentListContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1856; 
            localctx.named = this.python_named_argument_list(0);
            break;

        case 3:
            localctx = new PythonArgumentListContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1857; 
            localctx.ordinal = this.python_ordinal_argument_list(0);
            this.state = 1858;
            this.match(EParser.COMMA);
            this.state = 1859; 
            localctx.named = this.python_named_argument_list(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_ordinal_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_ordinal_argument_list;
    return this;
}

Python_ordinal_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_ordinal_argument_listContext.prototype.constructor = Python_ordinal_argument_listContext;


 
Python_ordinal_argument_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonOrdinalArgumentListItemContext(parser, ctx) {
	Python_ordinal_argument_listContext.call(this, parser);
    this.items = null; // Python_ordinal_argument_listContext;
    this.item = null; // Python_expressionContext;
    Python_ordinal_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonOrdinalArgumentListItemContext.prototype = Object.create(Python_ordinal_argument_listContext.prototype);
PythonOrdinalArgumentListItemContext.prototype.constructor = PythonOrdinalArgumentListItemContext;

PythonOrdinalArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

PythonOrdinalArgumentListItemContext.prototype.python_ordinal_argument_list = function() {
    return this.getTypedRuleContext(Python_ordinal_argument_listContext,0);
};

PythonOrdinalArgumentListItemContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonOrdinalArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonOrdinalArgumentListItem(this);
	}
};

PythonOrdinalArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonOrdinalArgumentListItem(this);
	}
};


function PythonOrdinalArgumentListContext(parser, ctx) {
	Python_ordinal_argument_listContext.call(this, parser);
    this.item = null; // Python_expressionContext;
    Python_ordinal_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonOrdinalArgumentListContext.prototype = Object.create(Python_ordinal_argument_listContext.prototype);
PythonOrdinalArgumentListContext.prototype.constructor = PythonOrdinalArgumentListContext;

PythonOrdinalArgumentListContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonOrdinalArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonOrdinalArgumentList(this);
	}
};

PythonOrdinalArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonOrdinalArgumentList(this);
	}
};



EParser.prototype.python_ordinal_argument_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_ordinal_argument_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 310;
    this.enterRecursionRule(localctx, 310, EParser.RULE_python_ordinal_argument_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new PythonOrdinalArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1864; 
        localctx.item = this.python_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1871;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,138,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonOrdinalArgumentListItemContext(this, new Python_ordinal_argument_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_python_ordinal_argument_list);
                this.state = 1866;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1867;
                this.match(EParser.COMMA);
                this.state = 1868; 
                localctx.item = this.python_expression(0); 
            }
            this.state = 1873;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,138,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_named_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_named_argument_list;
    return this;
}

Python_named_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_named_argument_listContext.prototype.constructor = Python_named_argument_listContext;


 
Python_named_argument_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonNamedArgumentListItemContext(parser, ctx) {
	Python_named_argument_listContext.call(this, parser);
    this.items = null; // Python_named_argument_listContext;
    this.name = null; // Python_identifierContext;
    this.exp = null; // Python_expressionContext;
    Python_named_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonNamedArgumentListItemContext.prototype = Object.create(Python_named_argument_listContext.prototype);
PythonNamedArgumentListItemContext.prototype.constructor = PythonNamedArgumentListItemContext;

PythonNamedArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

PythonNamedArgumentListItemContext.prototype.EQ = function() {
    return this.getToken(EParser.EQ, 0);
};

PythonNamedArgumentListItemContext.prototype.python_named_argument_list = function() {
    return this.getTypedRuleContext(Python_named_argument_listContext,0);
};

PythonNamedArgumentListItemContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};

PythonNamedArgumentListItemContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonNamedArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonNamedArgumentListItem(this);
	}
};

PythonNamedArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonNamedArgumentListItem(this);
	}
};


function PythonNamedArgumentListContext(parser, ctx) {
	Python_named_argument_listContext.call(this, parser);
    this.name = null; // Python_identifierContext;
    this.exp = null; // Python_expressionContext;
    Python_named_argument_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonNamedArgumentListContext.prototype = Object.create(Python_named_argument_listContext.prototype);
PythonNamedArgumentListContext.prototype.constructor = PythonNamedArgumentListContext;

PythonNamedArgumentListContext.prototype.EQ = function() {
    return this.getToken(EParser.EQ, 0);
};

PythonNamedArgumentListContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};

PythonNamedArgumentListContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};
PythonNamedArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonNamedArgumentList(this);
	}
};

PythonNamedArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonNamedArgumentList(this);
	}
};



EParser.prototype.python_named_argument_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_named_argument_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 312;
    this.enterRecursionRule(localctx, 312, EParser.RULE_python_named_argument_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new PythonNamedArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1875; 
        localctx.name = this.python_identifier();
        this.state = 1876;
        this.match(EParser.EQ);
        this.state = 1877; 
        localctx.exp = this.python_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1887;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,139,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonNamedArgumentListItemContext(this, new Python_named_argument_listContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_python_named_argument_list);
                this.state = 1879;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1880;
                this.match(EParser.COMMA);
                this.state = 1881; 
                localctx.name = this.python_identifier();
                this.state = 1882;
                this.match(EParser.EQ);
                this.state = 1883; 
                localctx.exp = this.python_expression(0); 
            }
            this.state = 1889;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,139,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_parenthesis_expression;
    this.exp = null; // Python_expressionContext
    return this;
}

Python_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_parenthesis_expressionContext.prototype.constructor = Python_parenthesis_expressionContext;

Python_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Python_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Python_parenthesis_expressionContext.prototype.python_expression = function() {
    return this.getTypedRuleContext(Python_expressionContext,0);
};

Python_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython_parenthesis_expression(this);
	}
};

Python_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython_parenthesis_expression(this);
	}
};




EParser.prototype.python_parenthesis_expression = function() {

    var localctx = new Python_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, EParser.RULE_python_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1890;
        this.match(EParser.LPAR);
        this.state = 1891; 
        localctx.exp = this.python_expression(0);
        this.state = 1892;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_identifier_expression;
    return this;
}

Python_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_identifier_expressionContext.prototype.constructor = Python_identifier_expressionContext;


 
Python_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function PythonChildIdentifierContext(parser, ctx) {
	Python_identifier_expressionContext.call(this, parser);
    this.parent = null; // Python_identifier_expressionContext;
    this.name = null; // Python_identifierContext;
    Python_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonChildIdentifierContext.prototype = Object.create(Python_identifier_expressionContext.prototype);
PythonChildIdentifierContext.prototype.constructor = PythonChildIdentifierContext;

PythonChildIdentifierContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

PythonChildIdentifierContext.prototype.python_identifier_expression = function() {
    return this.getTypedRuleContext(Python_identifier_expressionContext,0);
};

PythonChildIdentifierContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};
PythonChildIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonChildIdentifier(this);
	}
};

PythonChildIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonChildIdentifier(this);
	}
};


function PythonIdentifierContext(parser, ctx) {
	Python_identifier_expressionContext.call(this, parser);
    this.name = null; // Python_identifierContext;
    Python_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonIdentifierContext.prototype = Object.create(Python_identifier_expressionContext.prototype);
PythonIdentifierContext.prototype.constructor = PythonIdentifierContext;

PythonIdentifierContext.prototype.python_identifier = function() {
    return this.getTypedRuleContext(Python_identifierContext,0);
};
PythonIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonIdentifier(this);
	}
};

PythonIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonIdentifier(this);
	}
};



EParser.prototype.python_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Python_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 316;
    this.enterRecursionRule(localctx, 316, EParser.RULE_python_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new PythonIdentifierContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1895; 
        localctx.name = this.python_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1902;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,140,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PythonChildIdentifierContext(this, new Python_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_python_identifier_expression);
                this.state = 1897;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1898;
                this.match(EParser.DOT);
                this.state = 1899; 
                localctx.name = this.python_identifier(); 
            }
            this.state = 1904;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,140,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Python_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_literal_expression;
    return this;
}

Python_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_literal_expressionContext.prototype.constructor = Python_literal_expressionContext;


 
Python_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PythonCharacterLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonCharacterLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonCharacterLiteralContext.prototype.constructor = PythonCharacterLiteralContext;

PythonCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(EParser.CHAR_LITERAL, 0);
};
PythonCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonCharacterLiteral(this);
	}
};

PythonCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonCharacterLiteral(this);
	}
};


function PythonTextLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonTextLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonTextLiteralContext.prototype.constructor = PythonTextLiteralContext;

PythonTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(EParser.TEXT_LITERAL, 0);
};
PythonTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonTextLiteral(this);
	}
};

PythonTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonTextLiteral(this);
	}
};


function PythonIntegerLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonIntegerLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonIntegerLiteralContext.prototype.constructor = PythonIntegerLiteralContext;

PythonIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(EParser.INTEGER_LITERAL, 0);
};
PythonIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonIntegerLiteral(this);
	}
};

PythonIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonIntegerLiteral(this);
	}
};


function PythonDecimalLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonDecimalLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonDecimalLiteralContext.prototype.constructor = PythonDecimalLiteralContext;

PythonDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(EParser.DECIMAL_LITERAL, 0);
};
PythonDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonDecimalLiteral(this);
	}
};

PythonDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonDecimalLiteral(this);
	}
};


function PythonBooleanLiteralContext(parser, ctx) {
	Python_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Python_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PythonBooleanLiteralContext.prototype = Object.create(Python_literal_expressionContext.prototype);
PythonBooleanLiteralContext.prototype.constructor = PythonBooleanLiteralContext;

PythonBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(EParser.BOOLEAN_LITERAL, 0);
};
PythonBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPythonBooleanLiteral(this);
	}
};

PythonBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPythonBooleanLiteral(this);
	}
};



EParser.prototype.python_literal_expression = function() {

    var localctx = new Python_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, EParser.RULE_python_literal_expression);
    try {
        this.state = 1910;
        switch(this._input.LA(1)) {
        case EParser.INTEGER_LITERAL:
            localctx = new PythonIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1905;
            localctx.t = this.match(EParser.INTEGER_LITERAL);
            break;
        case EParser.DECIMAL_LITERAL:
            localctx = new PythonDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1906;
            localctx.t = this.match(EParser.DECIMAL_LITERAL);
            break;
        case EParser.TEXT_LITERAL:
            localctx = new PythonTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1907;
            localctx.t = this.match(EParser.TEXT_LITERAL);
            break;
        case EParser.BOOLEAN_LITERAL:
            localctx = new PythonBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1908;
            localctx.t = this.match(EParser.BOOLEAN_LITERAL);
            break;
        case EParser.CHAR_LITERAL:
            localctx = new PythonCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1909;
            localctx.t = this.match(EParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Python_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_python_identifier;
    return this;
}

Python_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Python_identifierContext.prototype.constructor = Python_identifierContext;

Python_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

Python_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
};

Python_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(EParser.TYPE_IDENTIFIER, 0);
};

Python_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(EParser.BOOLEAN, 0);
};

Python_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(EParser.CHARACTER, 0);
};

Python_identifierContext.prototype.TEXT = function() {
    return this.getToken(EParser.TEXT, 0);
};

Python_identifierContext.prototype.INTEGER = function() {
    return this.getToken(EParser.INTEGER, 0);
};

Python_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(EParser.DECIMAL, 0);
};

Python_identifierContext.prototype.DATE = function() {
    return this.getToken(EParser.DATE, 0);
};

Python_identifierContext.prototype.TIME = function() {
    return this.getToken(EParser.TIME, 0);
};

Python_identifierContext.prototype.DATETIME = function() {
    return this.getToken(EParser.DATETIME, 0);
};

Python_identifierContext.prototype.PERIOD = function() {
    return this.getToken(EParser.PERIOD, 0);
};

Python_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterPython_identifier(this);
	}
};

Python_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitPython_identifier(this);
	}
};




EParser.prototype.python_identifier = function() {

    var localctx = new Python_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, EParser.RULE_python_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1912;
        _la = this._input.LA(1);
        if(!(((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (EParser.BOOLEAN - 50)) | (1 << (EParser.CHARACTER - 50)) | (1 << (EParser.TEXT - 50)) | (1 << (EParser.INTEGER - 50)) | (1 << (EParser.DECIMAL - 50)) | (1 << (EParser.DATE - 50)) | (1 << (EParser.TIME - 50)) | (1 << (EParser.DATETIME - 50)) | (1 << (EParser.PERIOD - 50)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (EParser.SYMBOL_IDENTIFIER - 138)) | (1 << (EParser.TYPE_IDENTIFIER - 138)) | (1 << (EParser.VARIABLE_IDENTIFIER - 138)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_statement;
    return this;
}

Java_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_statementContext.prototype.constructor = Java_statementContext;


 
Java_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaStatementContext(parser, ctx) {
	Java_statementContext.call(this, parser);
    this.exp = null; // Java_expressionContext;
    Java_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaStatementContext.prototype = Object.create(Java_statementContext.prototype);
JavaStatementContext.prototype.constructor = JavaStatementContext;

JavaStatementContext.prototype.SEMI = function() {
    return this.getToken(EParser.SEMI, 0);
};

JavaStatementContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaStatement(this);
	}
};

JavaStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaStatement(this);
	}
};


function JavaReturnStatementContext(parser, ctx) {
	Java_statementContext.call(this, parser);
    this.exp = null; // Java_expressionContext;
    Java_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaReturnStatementContext.prototype = Object.create(Java_statementContext.prototype);
JavaReturnStatementContext.prototype.constructor = JavaReturnStatementContext;

JavaReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(EParser.RETURN, 0);
};

JavaReturnStatementContext.prototype.SEMI = function() {
    return this.getToken(EParser.SEMI, 0);
};

JavaReturnStatementContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaReturnStatement(this);
	}
};

JavaReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaReturnStatement(this);
	}
};



EParser.prototype.java_statement = function() {

    var localctx = new Java_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, EParser.RULE_java_statement);
    try {
        this.state = 1921;
        switch(this._input.LA(1)) {
        case EParser.RETURN:
            localctx = new JavaReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1914;
            this.match(EParser.RETURN);
            this.state = 1915; 
            localctx.exp = this.java_expression(0);
            this.state = 1916;
            this.match(EParser.SEMI);
            break;
        case EParser.LPAR:
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.BOOLEAN_LITERAL:
        case EParser.CHAR_LITERAL:
        case EParser.SYMBOL_IDENTIFIER:
        case EParser.TYPE_IDENTIFIER:
        case EParser.VARIABLE_IDENTIFIER:
        case EParser.TEXT_LITERAL:
        case EParser.INTEGER_LITERAL:
        case EParser.DECIMAL_LITERAL:
            localctx = new JavaStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1918; 
            localctx.exp = this.java_expression(0);
            this.state = 1919;
            this.match(EParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_expression;
    return this;
}

Java_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_expressionContext.prototype.constructor = Java_expressionContext;


 
Java_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaPrimaryExpressionContext(parser, ctx) {
	Java_expressionContext.call(this, parser);
    this.exp = null; // Java_primary_expressionContext;
    Java_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaPrimaryExpressionContext.prototype = Object.create(Java_expressionContext.prototype);
JavaPrimaryExpressionContext.prototype.constructor = JavaPrimaryExpressionContext;

JavaPrimaryExpressionContext.prototype.java_primary_expression = function() {
    return this.getTypedRuleContext(Java_primary_expressionContext,0);
};
JavaPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaPrimaryExpression(this);
	}
};

JavaPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaPrimaryExpression(this);
	}
};


function JavaSelectorExpressionContext(parser, ctx) {
	Java_expressionContext.call(this, parser);
    this.parent = null; // Java_expressionContext;
    this.child = null; // Java_selector_expressionContext;
    Java_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaSelectorExpressionContext.prototype = Object.create(Java_expressionContext.prototype);
JavaSelectorExpressionContext.prototype.constructor = JavaSelectorExpressionContext;

JavaSelectorExpressionContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};

JavaSelectorExpressionContext.prototype.java_selector_expression = function() {
    return this.getTypedRuleContext(Java_selector_expressionContext,0);
};
JavaSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaSelectorExpression(this);
	}
};

JavaSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaSelectorExpression(this);
	}
};



EParser.prototype.java_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 324;
    this.enterRecursionRule(localctx, 324, EParser.RULE_java_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1924; 
        localctx.exp = this.java_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1930;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,143,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaSelectorExpressionContext(this, new Java_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_java_expression);
                this.state = 1926;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1927; 
                localctx.child = this.java_selector_expression(); 
            }
            this.state = 1932;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,143,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_primary_expression;
    return this;
}

Java_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_primary_expressionContext.prototype.constructor = Java_primary_expressionContext;


 
Java_primary_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaIdentifierExpressionContext(parser, ctx) {
	Java_primary_expressionContext.call(this, parser);
    this.exp = null; // Java_identifier_expressionContext;
    Java_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaIdentifierExpressionContext.prototype = Object.create(Java_primary_expressionContext.prototype);
JavaIdentifierExpressionContext.prototype.constructor = JavaIdentifierExpressionContext;

JavaIdentifierExpressionContext.prototype.java_identifier_expression = function() {
    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
};
JavaIdentifierExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaIdentifierExpression(this);
	}
};

JavaIdentifierExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaIdentifierExpression(this);
	}
};


function JavaLiteralExpressionContext(parser, ctx) {
	Java_primary_expressionContext.call(this, parser);
    this.exp = null; // Java_literal_expressionContext;
    Java_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaLiteralExpressionContext.prototype = Object.create(Java_primary_expressionContext.prototype);
JavaLiteralExpressionContext.prototype.constructor = JavaLiteralExpressionContext;

JavaLiteralExpressionContext.prototype.java_literal_expression = function() {
    return this.getTypedRuleContext(Java_literal_expressionContext,0);
};
JavaLiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaLiteralExpression(this);
	}
};

JavaLiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaLiteralExpression(this);
	}
};


function JavaParenthesisExpressionContext(parser, ctx) {
	Java_primary_expressionContext.call(this, parser);
    this.exp = null; // Java_parenthesis_expressionContext;
    Java_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaParenthesisExpressionContext.prototype = Object.create(Java_primary_expressionContext.prototype);
JavaParenthesisExpressionContext.prototype.constructor = JavaParenthesisExpressionContext;

JavaParenthesisExpressionContext.prototype.java_parenthesis_expression = function() {
    return this.getTypedRuleContext(Java_parenthesis_expressionContext,0);
};
JavaParenthesisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaParenthesisExpression(this);
	}
};

JavaParenthesisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaParenthesisExpression(this);
	}
};



EParser.prototype.java_primary_expression = function() {

    var localctx = new Java_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, EParser.RULE_java_primary_expression);
    try {
        this.state = 1936;
        switch(this._input.LA(1)) {
        case EParser.LPAR:
            localctx = new JavaParenthesisExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1933; 
            localctx.exp = this.java_parenthesis_expression();
            break;
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.SYMBOL_IDENTIFIER:
        case EParser.TYPE_IDENTIFIER:
        case EParser.VARIABLE_IDENTIFIER:
            localctx = new JavaIdentifierExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1934; 
            localctx.exp = this.java_identifier_expression(0);
            break;
        case EParser.BOOLEAN_LITERAL:
        case EParser.CHAR_LITERAL:
        case EParser.TEXT_LITERAL:
        case EParser.INTEGER_LITERAL:
        case EParser.DECIMAL_LITERAL:
            localctx = new JavaLiteralExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1935; 
            localctx.exp = this.java_literal_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_selector_expression;
    return this;
}

Java_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_selector_expressionContext.prototype.constructor = Java_selector_expressionContext;


 
Java_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaItemExpressionContext(parser, ctx) {
	Java_selector_expressionContext.call(this, parser);
    this.exp = null; // Java_item_expressionContext;
    Java_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaItemExpressionContext.prototype = Object.create(Java_selector_expressionContext.prototype);
JavaItemExpressionContext.prototype.constructor = JavaItemExpressionContext;

JavaItemExpressionContext.prototype.java_item_expression = function() {
    return this.getTypedRuleContext(Java_item_expressionContext,0);
};
JavaItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaItemExpression(this);
	}
};

JavaItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaItemExpression(this);
	}
};


function JavaMethodExpressionContext(parser, ctx) {
	Java_selector_expressionContext.call(this, parser);
    this.exp = null; // Java_method_expressionContext;
    Java_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaMethodExpressionContext.prototype = Object.create(Java_selector_expressionContext.prototype);
JavaMethodExpressionContext.prototype.constructor = JavaMethodExpressionContext;

JavaMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

JavaMethodExpressionContext.prototype.java_method_expression = function() {
    return this.getTypedRuleContext(Java_method_expressionContext,0);
};
JavaMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaMethodExpression(this);
	}
};

JavaMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaMethodExpression(this);
	}
};



EParser.prototype.java_selector_expression = function() {

    var localctx = new Java_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, EParser.RULE_java_selector_expression);
    try {
        this.state = 1941;
        switch(this._input.LA(1)) {
        case EParser.DOT:
            localctx = new JavaMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1938;
            this.match(EParser.DOT);
            this.state = 1939; 
            localctx.exp = this.java_method_expression();
            break;
        case EParser.LBRAK:
            localctx = new JavaItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1940; 
            localctx.exp = this.java_item_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_method_expression;
    this.name = null; // Java_identifierContext
    this.args = null; // Java_argumentsContext
    return this;
}

Java_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_method_expressionContext.prototype.constructor = Java_method_expressionContext;

Java_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Java_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Java_method_expressionContext.prototype.java_identifier = function() {
    return this.getTypedRuleContext(Java_identifierContext,0);
};

Java_method_expressionContext.prototype.java_arguments = function() {
    return this.getTypedRuleContext(Java_argumentsContext,0);
};

Java_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJava_method_expression(this);
	}
};

Java_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJava_method_expression(this);
	}
};




EParser.prototype.java_method_expression = function() {

    var localctx = new Java_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, EParser.RULE_java_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1943; 
        localctx.name = this.java_identifier();
        this.state = 1944;
        this.match(EParser.LPAR);
        this.state = 1946;
        _la = this._input.LA(1);
        if(_la===EParser.LPAR || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (EParser.BOOLEAN - 50)) | (1 << (EParser.CHARACTER - 50)) | (1 << (EParser.TEXT - 50)) | (1 << (EParser.INTEGER - 50)) | (1 << (EParser.DECIMAL - 50)) | (1 << (EParser.DATE - 50)) | (1 << (EParser.TIME - 50)) | (1 << (EParser.DATETIME - 50)) | (1 << (EParser.PERIOD - 50)))) !== 0) || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (EParser.BOOLEAN_LITERAL - 134)) | (1 << (EParser.CHAR_LITERAL - 134)) | (1 << (EParser.SYMBOL_IDENTIFIER - 134)) | (1 << (EParser.TYPE_IDENTIFIER - 134)) | (1 << (EParser.VARIABLE_IDENTIFIER - 134)) | (1 << (EParser.TEXT_LITERAL - 134)) | (1 << (EParser.INTEGER_LITERAL - 134)) | (1 << (EParser.DECIMAL_LITERAL - 134)))) !== 0)) {
            this.state = 1945; 
            localctx.args = this.java_arguments(0);
        }

        this.state = 1948;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_arguments;
    return this;
}

Java_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_argumentsContext.prototype.constructor = Java_argumentsContext;


 
Java_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaArgumentListContext(parser, ctx) {
	Java_argumentsContext.call(this, parser);
    this.item = null; // Java_expressionContext;
    Java_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaArgumentListContext.prototype = Object.create(Java_argumentsContext.prototype);
JavaArgumentListContext.prototype.constructor = JavaArgumentListContext;

JavaArgumentListContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaArgumentList(this);
	}
};

JavaArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaArgumentList(this);
	}
};


function JavaArgumentListItemContext(parser, ctx) {
	Java_argumentsContext.call(this, parser);
    this.items = null; // Java_argumentsContext;
    this.item = null; // Java_expressionContext;
    Java_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaArgumentListItemContext.prototype = Object.create(Java_argumentsContext.prototype);
JavaArgumentListItemContext.prototype.constructor = JavaArgumentListItemContext;

JavaArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

JavaArgumentListItemContext.prototype.java_arguments = function() {
    return this.getTypedRuleContext(Java_argumentsContext,0);
};

JavaArgumentListItemContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};
JavaArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaArgumentListItem(this);
	}
};

JavaArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaArgumentListItem(this);
	}
};



EParser.prototype.java_arguments = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_argumentsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 332;
    this.enterRecursionRule(localctx, 332, EParser.RULE_java_arguments, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1951; 
        localctx.item = this.java_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1958;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,147,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaArgumentListItemContext(this, new Java_argumentsContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_java_arguments);
                this.state = 1953;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1954;
                this.match(EParser.COMMA);
                this.state = 1955; 
                localctx.item = this.java_expression(0); 
            }
            this.state = 1960;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,147,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_item_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_item_expression;
    this.exp = null; // Java_expressionContext
    return this;
}

Java_item_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_item_expressionContext.prototype.constructor = Java_item_expressionContext;

Java_item_expressionContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

Java_item_expressionContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

Java_item_expressionContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};

Java_item_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJava_item_expression(this);
	}
};

Java_item_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJava_item_expression(this);
	}
};




EParser.prototype.java_item_expression = function() {

    var localctx = new Java_item_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, EParser.RULE_java_item_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1961;
        this.match(EParser.LBRAK);
        this.state = 1962; 
        localctx.exp = this.java_expression(0);
        this.state = 1963;
        this.match(EParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_parenthesis_expression;
    this.exp = null; // Java_expressionContext
    return this;
}

Java_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_parenthesis_expressionContext.prototype.constructor = Java_parenthesis_expressionContext;

Java_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Java_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Java_parenthesis_expressionContext.prototype.java_expression = function() {
    return this.getTypedRuleContext(Java_expressionContext,0);
};

Java_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJava_parenthesis_expression(this);
	}
};

Java_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJava_parenthesis_expression(this);
	}
};




EParser.prototype.java_parenthesis_expression = function() {

    var localctx = new Java_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, EParser.RULE_java_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1965;
        this.match(EParser.LPAR);
        this.state = 1966; 
        localctx.exp = this.java_expression(0);
        this.state = 1967;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_identifier_expression;
    return this;
}

Java_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_identifier_expressionContext.prototype.constructor = Java_identifier_expressionContext;


 
Java_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaIdentifierContext(parser, ctx) {
	Java_identifier_expressionContext.call(this, parser);
    this.name = null; // Java_identifierContext;
    Java_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaIdentifierContext.prototype = Object.create(Java_identifier_expressionContext.prototype);
JavaIdentifierContext.prototype.constructor = JavaIdentifierContext;

JavaIdentifierContext.prototype.java_identifier = function() {
    return this.getTypedRuleContext(Java_identifierContext,0);
};
JavaIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaIdentifier(this);
	}
};

JavaIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaIdentifier(this);
	}
};


function JavaChildIdentifierContext(parser, ctx) {
	Java_identifier_expressionContext.call(this, parser);
    this.parent = null; // Java_identifier_expressionContext;
    this.name = null; // Java_identifierContext;
    Java_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaChildIdentifierContext.prototype = Object.create(Java_identifier_expressionContext.prototype);
JavaChildIdentifierContext.prototype.constructor = JavaChildIdentifierContext;

JavaChildIdentifierContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

JavaChildIdentifierContext.prototype.java_identifier_expression = function() {
    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
};

JavaChildIdentifierContext.prototype.java_identifier = function() {
    return this.getTypedRuleContext(Java_identifierContext,0);
};
JavaChildIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaChildIdentifier(this);
	}
};

JavaChildIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaChildIdentifier(this);
	}
};



EParser.prototype.java_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 338;
    this.enterRecursionRule(localctx, 338, EParser.RULE_java_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaIdentifierContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1970; 
        localctx.name = this.java_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1977;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,148,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaChildIdentifierContext(this, new Java_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_java_identifier_expression);
                this.state = 1972;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1973;
                this.match(EParser.DOT);
                this.state = 1974; 
                localctx.name = this.java_identifier(); 
            }
            this.state = 1979;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,148,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_class_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_class_identifier_expression;
    return this;
}

Java_class_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_class_identifier_expressionContext.prototype.constructor = Java_class_identifier_expressionContext;


 
Java_class_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JavaChildClassIdentifierContext(parser, ctx) {
	Java_class_identifier_expressionContext.call(this, parser);
    this.parent = null; // Java_class_identifier_expressionContext;
    this.name = null; // Token;
    Java_class_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaChildClassIdentifierContext.prototype = Object.create(Java_class_identifier_expressionContext.prototype);
JavaChildClassIdentifierContext.prototype.constructor = JavaChildClassIdentifierContext;

JavaChildClassIdentifierContext.prototype.DOLLAR = function() {
    return this.getToken(EParser.DOLLAR, 0);
};

JavaChildClassIdentifierContext.prototype.java_class_identifier_expression = function() {
    return this.getTypedRuleContext(Java_class_identifier_expressionContext,0);
};

JavaChildClassIdentifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(EParser.TYPE_IDENTIFIER, 0);
};
JavaChildClassIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaChildClassIdentifier(this);
	}
};

JavaChildClassIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaChildClassIdentifier(this);
	}
};


function JavaClassIdentifierContext(parser, ctx) {
	Java_class_identifier_expressionContext.call(this, parser);
    this.klass = null; // Java_identifier_expressionContext;
    Java_class_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaClassIdentifierContext.prototype = Object.create(Java_class_identifier_expressionContext.prototype);
JavaClassIdentifierContext.prototype.constructor = JavaClassIdentifierContext;

JavaClassIdentifierContext.prototype.java_identifier_expression = function() {
    return this.getTypedRuleContext(Java_identifier_expressionContext,0);
};
JavaClassIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaClassIdentifier(this);
	}
};

JavaClassIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaClassIdentifier(this);
	}
};



EParser.prototype.java_class_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Java_class_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 340;
    this.enterRecursionRule(localctx, 340, EParser.RULE_java_class_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new JavaClassIdentifierContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 1981; 
        localctx.klass = this.java_identifier_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1988;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,149,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JavaChildClassIdentifierContext(this, new Java_class_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_java_class_identifier_expression);
                this.state = 1983;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1984;
                this.match(EParser.DOLLAR);
                this.state = 1985;
                localctx.name = this.match(EParser.TYPE_IDENTIFIER); 
            }
            this.state = 1990;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,149,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Java_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_literal_expression;
    return this;
}

Java_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_literal_expressionContext.prototype.constructor = Java_literal_expressionContext;


 
Java_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JavaCharacterLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaCharacterLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaCharacterLiteralContext.prototype.constructor = JavaCharacterLiteralContext;

JavaCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(EParser.CHAR_LITERAL, 0);
};
JavaCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaCharacterLiteral(this);
	}
};

JavaCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaCharacterLiteral(this);
	}
};


function JavaIntegerLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaIntegerLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaIntegerLiteralContext.prototype.constructor = JavaIntegerLiteralContext;

JavaIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(EParser.INTEGER_LITERAL, 0);
};
JavaIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaIntegerLiteral(this);
	}
};

JavaIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaIntegerLiteral(this);
	}
};


function JavaBooleanLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaBooleanLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaBooleanLiteralContext.prototype.constructor = JavaBooleanLiteralContext;

JavaBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(EParser.BOOLEAN_LITERAL, 0);
};
JavaBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaBooleanLiteral(this);
	}
};

JavaBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaBooleanLiteral(this);
	}
};


function JavaDecimalLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaDecimalLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaDecimalLiteralContext.prototype.constructor = JavaDecimalLiteralContext;

JavaDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(EParser.DECIMAL_LITERAL, 0);
};
JavaDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaDecimalLiteral(this);
	}
};

JavaDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaDecimalLiteral(this);
	}
};


function JavaTextLiteralContext(parser, ctx) {
	Java_literal_expressionContext.call(this, parser);
    this.t = null; // Token;
    Java_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JavaTextLiteralContext.prototype = Object.create(Java_literal_expressionContext.prototype);
JavaTextLiteralContext.prototype.constructor = JavaTextLiteralContext;

JavaTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(EParser.TEXT_LITERAL, 0);
};
JavaTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJavaTextLiteral(this);
	}
};

JavaTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJavaTextLiteral(this);
	}
};



EParser.prototype.java_literal_expression = function() {

    var localctx = new Java_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, EParser.RULE_java_literal_expression);
    try {
        this.state = 1996;
        switch(this._input.LA(1)) {
        case EParser.INTEGER_LITERAL:
            localctx = new JavaIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1991;
            localctx.t = this.match(EParser.INTEGER_LITERAL);
            break;
        case EParser.DECIMAL_LITERAL:
            localctx = new JavaDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1992;
            localctx.t = this.match(EParser.DECIMAL_LITERAL);
            break;
        case EParser.TEXT_LITERAL:
            localctx = new JavaTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1993;
            localctx.t = this.match(EParser.TEXT_LITERAL);
            break;
        case EParser.BOOLEAN_LITERAL:
            localctx = new JavaBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1994;
            localctx.t = this.match(EParser.BOOLEAN_LITERAL);
            break;
        case EParser.CHAR_LITERAL:
            localctx = new JavaCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1995;
            localctx.t = this.match(EParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_java_identifier;
    return this;
}

Java_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_identifierContext.prototype.constructor = Java_identifierContext;

Java_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

Java_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
};

Java_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(EParser.TYPE_IDENTIFIER, 0);
};

Java_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(EParser.BOOLEAN, 0);
};

Java_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(EParser.CHARACTER, 0);
};

Java_identifierContext.prototype.TEXT = function() {
    return this.getToken(EParser.TEXT, 0);
};

Java_identifierContext.prototype.INTEGER = function() {
    return this.getToken(EParser.INTEGER, 0);
};

Java_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(EParser.DECIMAL, 0);
};

Java_identifierContext.prototype.DATE = function() {
    return this.getToken(EParser.DATE, 0);
};

Java_identifierContext.prototype.TIME = function() {
    return this.getToken(EParser.TIME, 0);
};

Java_identifierContext.prototype.DATETIME = function() {
    return this.getToken(EParser.DATETIME, 0);
};

Java_identifierContext.prototype.PERIOD = function() {
    return this.getToken(EParser.PERIOD, 0);
};

Java_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterJava_identifier(this);
	}
};

Java_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitJava_identifier(this);
	}
};




EParser.prototype.java_identifier = function() {

    var localctx = new Java_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, EParser.RULE_java_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1998;
        _la = this._input.LA(1);
        if(!(((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (EParser.BOOLEAN - 50)) | (1 << (EParser.CHARACTER - 50)) | (1 << (EParser.TEXT - 50)) | (1 << (EParser.INTEGER - 50)) | (1 << (EParser.DECIMAL - 50)) | (1 << (EParser.DATE - 50)) | (1 << (EParser.TIME - 50)) | (1 << (EParser.DATETIME - 50)) | (1 << (EParser.PERIOD - 50)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (EParser.SYMBOL_IDENTIFIER - 138)) | (1 << (EParser.TYPE_IDENTIFIER - 138)) | (1 << (EParser.VARIABLE_IDENTIFIER - 138)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_statement;
    return this;
}

Csharp_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_statementContext.prototype.constructor = Csharp_statementContext;


 
Csharp_statementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpStatementContext(parser, ctx) {
	Csharp_statementContext.call(this, parser);
    this.exp = null; // Csharp_expressionContext;
    Csharp_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpStatementContext.prototype = Object.create(Csharp_statementContext.prototype);
CSharpStatementContext.prototype.constructor = CSharpStatementContext;

CSharpStatementContext.prototype.SEMI = function() {
    return this.getToken(EParser.SEMI, 0);
};

CSharpStatementContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpStatement(this);
	}
};

CSharpStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpStatement(this);
	}
};


function CSharpReturnStatementContext(parser, ctx) {
	Csharp_statementContext.call(this, parser);
    this.exp = null; // Csharp_expressionContext;
    Csharp_statementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpReturnStatementContext.prototype = Object.create(Csharp_statementContext.prototype);
CSharpReturnStatementContext.prototype.constructor = CSharpReturnStatementContext;

CSharpReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(EParser.RETURN, 0);
};

CSharpReturnStatementContext.prototype.SEMI = function() {
    return this.getToken(EParser.SEMI, 0);
};

CSharpReturnStatementContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpReturnStatement(this);
	}
};

CSharpReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpReturnStatement(this);
	}
};



EParser.prototype.csharp_statement = function() {

    var localctx = new Csharp_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, EParser.RULE_csharp_statement);
    try {
        this.state = 2007;
        switch(this._input.LA(1)) {
        case EParser.RETURN:
            localctx = new CSharpReturnStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2000;
            this.match(EParser.RETURN);
            this.state = 2001; 
            localctx.exp = this.csharp_expression(0);
            this.state = 2002;
            this.match(EParser.SEMI);
            break;
        case EParser.LPAR:
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.BOOLEAN_LITERAL:
        case EParser.CHAR_LITERAL:
        case EParser.SYMBOL_IDENTIFIER:
        case EParser.TYPE_IDENTIFIER:
        case EParser.VARIABLE_IDENTIFIER:
        case EParser.TEXT_LITERAL:
        case EParser.INTEGER_LITERAL:
        case EParser.DECIMAL_LITERAL:
            localctx = new CSharpStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2004; 
            localctx.exp = this.csharp_expression(0);
            this.state = 2005;
            this.match(EParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_expression;
    return this;
}

Csharp_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_expressionContext.prototype.constructor = Csharp_expressionContext;


 
Csharp_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CSharpPrimaryExpressionContext(parser, ctx) {
	Csharp_expressionContext.call(this, parser);
    this.exp = null; // Csharp_primary_expressionContext;
    Csharp_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpPrimaryExpressionContext.prototype = Object.create(Csharp_expressionContext.prototype);
CSharpPrimaryExpressionContext.prototype.constructor = CSharpPrimaryExpressionContext;

CSharpPrimaryExpressionContext.prototype.csharp_primary_expression = function() {
    return this.getTypedRuleContext(Csharp_primary_expressionContext,0);
};
CSharpPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpPrimaryExpression(this);
	}
};

CSharpPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpPrimaryExpression(this);
	}
};


function CSharpSelectorExpressionContext(parser, ctx) {
	Csharp_expressionContext.call(this, parser);
    this.parent = null; // Csharp_expressionContext;
    this.child = null; // Csharp_selector_expressionContext;
    Csharp_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpSelectorExpressionContext.prototype = Object.create(Csharp_expressionContext.prototype);
CSharpSelectorExpressionContext.prototype.constructor = CSharpSelectorExpressionContext;

CSharpSelectorExpressionContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};

CSharpSelectorExpressionContext.prototype.csharp_selector_expression = function() {
    return this.getTypedRuleContext(Csharp_selector_expressionContext,0);
};
CSharpSelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpSelectorExpression(this);
	}
};

CSharpSelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpSelectorExpression(this);
	}
};



EParser.prototype.csharp_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Csharp_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 348;
    this.enterRecursionRule(localctx, 348, EParser.RULE_csharp_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new CSharpPrimaryExpressionContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2010; 
        localctx.exp = this.csharp_primary_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2016;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,152,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CSharpSelectorExpressionContext(this, new Csharp_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_csharp_expression);
                this.state = 2012;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2013; 
                localctx.child = this.csharp_selector_expression(); 
            }
            this.state = 2018;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,152,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Csharp_primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_primary_expression;
    return this;
}

Csharp_primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_primary_expressionContext.prototype.constructor = Csharp_primary_expressionContext;


 
Csharp_primary_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpLiteralExpressionContext(parser, ctx) {
	Csharp_primary_expressionContext.call(this, parser);
    this.exp = null; // Csharp_literal_expressionContext;
    Csharp_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpLiteralExpressionContext.prototype = Object.create(Csharp_primary_expressionContext.prototype);
CSharpLiteralExpressionContext.prototype.constructor = CSharpLiteralExpressionContext;

CSharpLiteralExpressionContext.prototype.csharp_literal_expression = function() {
    return this.getTypedRuleContext(Csharp_literal_expressionContext,0);
};
CSharpLiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpLiteralExpression(this);
	}
};

CSharpLiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpLiteralExpression(this);
	}
};


function CSharpParenthesisExpressionContext(parser, ctx) {
	Csharp_primary_expressionContext.call(this, parser);
    this.exp = null; // Csharp_parenthesis_expressionContext;
    Csharp_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpParenthesisExpressionContext.prototype = Object.create(Csharp_primary_expressionContext.prototype);
CSharpParenthesisExpressionContext.prototype.constructor = CSharpParenthesisExpressionContext;

CSharpParenthesisExpressionContext.prototype.csharp_parenthesis_expression = function() {
    return this.getTypedRuleContext(Csharp_parenthesis_expressionContext,0);
};
CSharpParenthesisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpParenthesisExpression(this);
	}
};

CSharpParenthesisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpParenthesisExpression(this);
	}
};


function CSharpIdentifierExpressionContext(parser, ctx) {
	Csharp_primary_expressionContext.call(this, parser);
    this.exp = null; // Csharp_identifier_expressionContext;
    Csharp_primary_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpIdentifierExpressionContext.prototype = Object.create(Csharp_primary_expressionContext.prototype);
CSharpIdentifierExpressionContext.prototype.constructor = CSharpIdentifierExpressionContext;

CSharpIdentifierExpressionContext.prototype.csharp_identifier_expression = function() {
    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
};
CSharpIdentifierExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpIdentifierExpression(this);
	}
};

CSharpIdentifierExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpIdentifierExpression(this);
	}
};



EParser.prototype.csharp_primary_expression = function() {

    var localctx = new Csharp_primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, EParser.RULE_csharp_primary_expression);
    try {
        this.state = 2022;
        switch(this._input.LA(1)) {
        case EParser.LPAR:
            localctx = new CSharpParenthesisExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2019; 
            localctx.exp = this.csharp_parenthesis_expression();
            break;
        case EParser.BOOLEAN:
        case EParser.CHARACTER:
        case EParser.TEXT:
        case EParser.INTEGER:
        case EParser.DECIMAL:
        case EParser.DATE:
        case EParser.TIME:
        case EParser.DATETIME:
        case EParser.PERIOD:
        case EParser.SYMBOL_IDENTIFIER:
        case EParser.TYPE_IDENTIFIER:
        case EParser.VARIABLE_IDENTIFIER:
            localctx = new CSharpIdentifierExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2020; 
            localctx.exp = this.csharp_identifier_expression(0);
            break;
        case EParser.BOOLEAN_LITERAL:
        case EParser.CHAR_LITERAL:
        case EParser.TEXT_LITERAL:
        case EParser.INTEGER_LITERAL:
        case EParser.DECIMAL_LITERAL:
            localctx = new CSharpLiteralExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2021; 
            localctx.exp = this.csharp_literal_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_selector_expression;
    return this;
}

Csharp_selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_selector_expressionContext.prototype.constructor = Csharp_selector_expressionContext;


 
Csharp_selector_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpItemExpressionContext(parser, ctx) {
	Csharp_selector_expressionContext.call(this, parser);
    this.exp = null; // Csharp_item_expressionContext;
    Csharp_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpItemExpressionContext.prototype = Object.create(Csharp_selector_expressionContext.prototype);
CSharpItemExpressionContext.prototype.constructor = CSharpItemExpressionContext;

CSharpItemExpressionContext.prototype.csharp_item_expression = function() {
    return this.getTypedRuleContext(Csharp_item_expressionContext,0);
};
CSharpItemExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpItemExpression(this);
	}
};

CSharpItemExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpItemExpression(this);
	}
};


function CSharpMethodExpressionContext(parser, ctx) {
	Csharp_selector_expressionContext.call(this, parser);
    this.exp = null; // Csharp_method_expressionContext;
    Csharp_selector_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpMethodExpressionContext.prototype = Object.create(Csharp_selector_expressionContext.prototype);
CSharpMethodExpressionContext.prototype.constructor = CSharpMethodExpressionContext;

CSharpMethodExpressionContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

CSharpMethodExpressionContext.prototype.csharp_method_expression = function() {
    return this.getTypedRuleContext(Csharp_method_expressionContext,0);
};
CSharpMethodExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpMethodExpression(this);
	}
};

CSharpMethodExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpMethodExpression(this);
	}
};



EParser.prototype.csharp_selector_expression = function() {

    var localctx = new Csharp_selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, EParser.RULE_csharp_selector_expression);
    try {
        this.state = 2027;
        switch(this._input.LA(1)) {
        case EParser.DOT:
            localctx = new CSharpMethodExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2024;
            this.match(EParser.DOT);
            this.state = 2025; 
            localctx.exp = this.csharp_method_expression();
            break;
        case EParser.LBRAK:
            localctx = new CSharpItemExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2026; 
            localctx.exp = this.csharp_item_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_method_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_method_expression;
    this.name = null; // Csharp_identifierContext
    this.args = null; // Csharp_argumentsContext
    return this;
}

Csharp_method_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_method_expressionContext.prototype.constructor = Csharp_method_expressionContext;

Csharp_method_expressionContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Csharp_method_expressionContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Csharp_method_expressionContext.prototype.csharp_identifier = function() {
    return this.getTypedRuleContext(Csharp_identifierContext,0);
};

Csharp_method_expressionContext.prototype.csharp_arguments = function() {
    return this.getTypedRuleContext(Csharp_argumentsContext,0);
};

Csharp_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCsharp_method_expression(this);
	}
};

Csharp_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCsharp_method_expression(this);
	}
};




EParser.prototype.csharp_method_expression = function() {

    var localctx = new Csharp_method_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, EParser.RULE_csharp_method_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2029; 
        localctx.name = this.csharp_identifier();
        this.state = 2030;
        this.match(EParser.LPAR);
        this.state = 2032;
        _la = this._input.LA(1);
        if(_la===EParser.LPAR || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (EParser.BOOLEAN - 50)) | (1 << (EParser.CHARACTER - 50)) | (1 << (EParser.TEXT - 50)) | (1 << (EParser.INTEGER - 50)) | (1 << (EParser.DECIMAL - 50)) | (1 << (EParser.DATE - 50)) | (1 << (EParser.TIME - 50)) | (1 << (EParser.DATETIME - 50)) | (1 << (EParser.PERIOD - 50)))) !== 0) || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (EParser.BOOLEAN_LITERAL - 134)) | (1 << (EParser.CHAR_LITERAL - 134)) | (1 << (EParser.SYMBOL_IDENTIFIER - 134)) | (1 << (EParser.TYPE_IDENTIFIER - 134)) | (1 << (EParser.VARIABLE_IDENTIFIER - 134)) | (1 << (EParser.TEXT_LITERAL - 134)) | (1 << (EParser.INTEGER_LITERAL - 134)) | (1 << (EParser.DECIMAL_LITERAL - 134)))) !== 0)) {
            this.state = 2031; 
            localctx.args = this.csharp_arguments(0);
        }

        this.state = 2034;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_arguments;
    return this;
}

Csharp_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_argumentsContext.prototype.constructor = Csharp_argumentsContext;


 
Csharp_argumentsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CSharpArgumentListContext(parser, ctx) {
	Csharp_argumentsContext.call(this, parser);
    this.item = null; // Csharp_expressionContext;
    Csharp_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpArgumentListContext.prototype = Object.create(Csharp_argumentsContext.prototype);
CSharpArgumentListContext.prototype.constructor = CSharpArgumentListContext;

CSharpArgumentListContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpArgumentList(this);
	}
};

CSharpArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpArgumentList(this);
	}
};


function CSharpArgumentListItemContext(parser, ctx) {
	Csharp_argumentsContext.call(this, parser);
    this.items = null; // Csharp_argumentsContext;
    this.item = null; // Csharp_expressionContext;
    Csharp_argumentsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpArgumentListItemContext.prototype = Object.create(Csharp_argumentsContext.prototype);
CSharpArgumentListItemContext.prototype.constructor = CSharpArgumentListItemContext;

CSharpArgumentListItemContext.prototype.COMMA = function() {
    return this.getToken(EParser.COMMA, 0);
};

CSharpArgumentListItemContext.prototype.csharp_arguments = function() {
    return this.getTypedRuleContext(Csharp_argumentsContext,0);
};

CSharpArgumentListItemContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};
CSharpArgumentListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpArgumentListItem(this);
	}
};

CSharpArgumentListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpArgumentListItem(this);
	}
};



EParser.prototype.csharp_arguments = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Csharp_argumentsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 356;
    this.enterRecursionRule(localctx, 356, EParser.RULE_csharp_arguments, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new CSharpArgumentListContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2037; 
        localctx.item = this.csharp_expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2044;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,156,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CSharpArgumentListItemContext(this, new Csharp_argumentsContext(this, _parentctx, _parentState));
                localctx.items = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_csharp_arguments);
                this.state = 2039;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2040;
                this.match(EParser.COMMA);
                this.state = 2041; 
                localctx.item = this.csharp_expression(0); 
            }
            this.state = 2046;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,156,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Csharp_item_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_item_expression;
    this.exp = null; // Csharp_expressionContext
    return this;
}

Csharp_item_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_item_expressionContext.prototype.constructor = Csharp_item_expressionContext;

Csharp_item_expressionContext.prototype.LBRAK = function() {
    return this.getToken(EParser.LBRAK, 0);
};

Csharp_item_expressionContext.prototype.RBRAK = function() {
    return this.getToken(EParser.RBRAK, 0);
};

Csharp_item_expressionContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};

Csharp_item_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCsharp_item_expression(this);
	}
};

Csharp_item_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCsharp_item_expression(this);
	}
};




EParser.prototype.csharp_item_expression = function() {

    var localctx = new Csharp_item_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, EParser.RULE_csharp_item_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2047;
        this.match(EParser.LBRAK);
        this.state = 2048; 
        localctx.exp = this.csharp_expression(0);
        this.state = 2049;
        this.match(EParser.RBRAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_parenthesis_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_parenthesis_expression;
    this.exp = null; // Csharp_expressionContext
    return this;
}

Csharp_parenthesis_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_parenthesis_expressionContext.prototype.constructor = Csharp_parenthesis_expressionContext;

Csharp_parenthesis_expressionContext.prototype.LPAR = function() {
    return this.getToken(EParser.LPAR, 0);
};

Csharp_parenthesis_expressionContext.prototype.RPAR = function() {
    return this.getToken(EParser.RPAR, 0);
};

Csharp_parenthesis_expressionContext.prototype.csharp_expression = function() {
    return this.getTypedRuleContext(Csharp_expressionContext,0);
};

Csharp_parenthesis_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCsharp_parenthesis_expression(this);
	}
};

Csharp_parenthesis_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCsharp_parenthesis_expression(this);
	}
};




EParser.prototype.csharp_parenthesis_expression = function() {

    var localctx = new Csharp_parenthesis_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, EParser.RULE_csharp_parenthesis_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2051;
        this.match(EParser.LPAR);
        this.state = 2052; 
        localctx.exp = this.csharp_expression(0);
        this.state = 2053;
        this.match(EParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_identifier_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_identifier_expression;
    return this;
}

Csharp_identifier_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_identifier_expressionContext.prototype.constructor = Csharp_identifier_expressionContext;


 
Csharp_identifier_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CSharpIdentifierContext(parser, ctx) {
	Csharp_identifier_expressionContext.call(this, parser);
    this.name = null; // Csharp_identifierContext;
    Csharp_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpIdentifierContext.prototype = Object.create(Csharp_identifier_expressionContext.prototype);
CSharpIdentifierContext.prototype.constructor = CSharpIdentifierContext;

CSharpIdentifierContext.prototype.csharp_identifier = function() {
    return this.getTypedRuleContext(Csharp_identifierContext,0);
};
CSharpIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpIdentifier(this);
	}
};

CSharpIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpIdentifier(this);
	}
};


function CSharpChildIdentifierContext(parser, ctx) {
	Csharp_identifier_expressionContext.call(this, parser);
    this.parent = null; // Csharp_identifier_expressionContext;
    this.name = null; // Csharp_identifierContext;
    Csharp_identifier_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpChildIdentifierContext.prototype = Object.create(Csharp_identifier_expressionContext.prototype);
CSharpChildIdentifierContext.prototype.constructor = CSharpChildIdentifierContext;

CSharpChildIdentifierContext.prototype.DOT = function() {
    return this.getToken(EParser.DOT, 0);
};

CSharpChildIdentifierContext.prototype.csharp_identifier_expression = function() {
    return this.getTypedRuleContext(Csharp_identifier_expressionContext,0);
};

CSharpChildIdentifierContext.prototype.csharp_identifier = function() {
    return this.getTypedRuleContext(Csharp_identifierContext,0);
};
CSharpChildIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpChildIdentifier(this);
	}
};

CSharpChildIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpChildIdentifier(this);
	}
};



EParser.prototype.csharp_identifier_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Csharp_identifier_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 362;
    this.enterRecursionRule(localctx, 362, EParser.RULE_csharp_identifier_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new CSharpIdentifierContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 2056; 
        localctx.name = this.csharp_identifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2063;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,157,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CSharpChildIdentifierContext(this, new Csharp_identifier_expressionContext(this, _parentctx, _parentState));
                localctx.parent = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, EParser.RULE_csharp_identifier_expression);
                this.state = 2058;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2059;
                this.match(EParser.DOT);
                this.state = 2060; 
                localctx.name = this.csharp_identifier(); 
            }
            this.state = 2065;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,157,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Csharp_literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_literal_expression;
    return this;
}

Csharp_literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_literal_expressionContext.prototype.constructor = Csharp_literal_expressionContext;


 
Csharp_literal_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CSharpCharacterLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpCharacterLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpCharacterLiteralContext.prototype.constructor = CSharpCharacterLiteralContext;

CSharpCharacterLiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(EParser.CHAR_LITERAL, 0);
};
CSharpCharacterLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpCharacterLiteral(this);
	}
};

CSharpCharacterLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpCharacterLiteral(this);
	}
};


function CSharpDecimalLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpDecimalLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpDecimalLiteralContext.prototype.constructor = CSharpDecimalLiteralContext;

CSharpDecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(EParser.DECIMAL_LITERAL, 0);
};
CSharpDecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpDecimalLiteral(this);
	}
};

CSharpDecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpDecimalLiteral(this);
	}
};


function CSharpBooleanLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpBooleanLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpBooleanLiteralContext.prototype.constructor = CSharpBooleanLiteralContext;

CSharpBooleanLiteralContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(EParser.BOOLEAN_LITERAL, 0);
};
CSharpBooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpBooleanLiteral(this);
	}
};

CSharpBooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpBooleanLiteral(this);
	}
};


function CSharpIntegerLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpIntegerLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpIntegerLiteralContext.prototype.constructor = CSharpIntegerLiteralContext;

CSharpIntegerLiteralContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(EParser.INTEGER_LITERAL, 0);
};
CSharpIntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpIntegerLiteral(this);
	}
};

CSharpIntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpIntegerLiteral(this);
	}
};


function CSharpTextLiteralContext(parser, ctx) {
	Csharp_literal_expressionContext.call(this, parser);
    Csharp_literal_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CSharpTextLiteralContext.prototype = Object.create(Csharp_literal_expressionContext.prototype);
CSharpTextLiteralContext.prototype.constructor = CSharpTextLiteralContext;

CSharpTextLiteralContext.prototype.TEXT_LITERAL = function() {
    return this.getToken(EParser.TEXT_LITERAL, 0);
};
CSharpTextLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCSharpTextLiteral(this);
	}
};

CSharpTextLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCSharpTextLiteral(this);
	}
};



EParser.prototype.csharp_literal_expression = function() {

    var localctx = new Csharp_literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, EParser.RULE_csharp_literal_expression);
    try {
        this.state = 2071;
        switch(this._input.LA(1)) {
        case EParser.INTEGER_LITERAL:
            localctx = new CSharpIntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2066;
            this.match(EParser.INTEGER_LITERAL);
            break;
        case EParser.DECIMAL_LITERAL:
            localctx = new CSharpDecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2067;
            this.match(EParser.DECIMAL_LITERAL);
            break;
        case EParser.TEXT_LITERAL:
            localctx = new CSharpTextLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2068;
            this.match(EParser.TEXT_LITERAL);
            break;
        case EParser.BOOLEAN_LITERAL:
            localctx = new CSharpBooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2069;
            this.match(EParser.BOOLEAN_LITERAL);
            break;
        case EParser.CHAR_LITERAL:
            localctx = new CSharpCharacterLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2070;
            this.match(EParser.CHAR_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csharp_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = EParser.RULE_csharp_identifier;
    return this;
}

Csharp_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csharp_identifierContext.prototype.constructor = Csharp_identifierContext;

Csharp_identifierContext.prototype.VARIABLE_IDENTIFIER = function() {
    return this.getToken(EParser.VARIABLE_IDENTIFIER, 0);
};

Csharp_identifierContext.prototype.SYMBOL_IDENTIFIER = function() {
    return this.getToken(EParser.SYMBOL_IDENTIFIER, 0);
};

Csharp_identifierContext.prototype.TYPE_IDENTIFIER = function() {
    return this.getToken(EParser.TYPE_IDENTIFIER, 0);
};

Csharp_identifierContext.prototype.BOOLEAN = function() {
    return this.getToken(EParser.BOOLEAN, 0);
};

Csharp_identifierContext.prototype.CHARACTER = function() {
    return this.getToken(EParser.CHARACTER, 0);
};

Csharp_identifierContext.prototype.TEXT = function() {
    return this.getToken(EParser.TEXT, 0);
};

Csharp_identifierContext.prototype.INTEGER = function() {
    return this.getToken(EParser.INTEGER, 0);
};

Csharp_identifierContext.prototype.DECIMAL = function() {
    return this.getToken(EParser.DECIMAL, 0);
};

Csharp_identifierContext.prototype.DATE = function() {
    return this.getToken(EParser.DATE, 0);
};

Csharp_identifierContext.prototype.TIME = function() {
    return this.getToken(EParser.TIME, 0);
};

Csharp_identifierContext.prototype.DATETIME = function() {
    return this.getToken(EParser.DATETIME, 0);
};

Csharp_identifierContext.prototype.PERIOD = function() {
    return this.getToken(EParser.PERIOD, 0);
};

Csharp_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.enterCsharp_identifier(this);
	}
};

Csharp_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof EParserListener ) {
        listener.exitCsharp_identifier(this);
	}
};




EParser.prototype.csharp_identifier = function() {

    var localctx = new Csharp_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, EParser.RULE_csharp_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2073;
        _la = this._input.LA(1);
        if(!(((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (EParser.BOOLEAN - 50)) | (1 << (EParser.CHARACTER - 50)) | (1 << (EParser.TEXT - 50)) | (1 << (EParser.INTEGER - 50)) | (1 << (EParser.DECIMAL - 50)) | (1 << (EParser.DATE - 50)) | (1 << (EParser.TIME - 50)) | (1 << (EParser.DATETIME - 50)) | (1 << (EParser.PERIOD - 50)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (EParser.SYMBOL_IDENTIFIER - 138)) | (1 << (EParser.TYPE_IDENTIFIER - 138)) | (1 << (EParser.VARIABLE_IDENTIFIER - 138)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        this.consume();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


EParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 15:
			return this.native_category_mapping_list_sempred(localctx, predIndex);
	case 32:
			return this.else_if_statement_list_sempred(localctx, predIndex);
	case 37:
			return this.expression_sempred(localctx, predIndex);
	case 38:
			return this.unresolved_expression_sempred(localctx, predIndex);
	case 39:
			return this.unresolved_selector_sempred(localctx, predIndex);
	case 41:
			return this.invocation_trailer_sempred(localctx, predIndex);
	case 42:
			return this.instance_expression_sempred(localctx, predIndex);
	case 43:
			return this.instance_selector_sempred(localctx, predIndex);
	case 51:
			return this.argument_assignment_list_sempred(localctx, predIndex);
	case 52:
			return this.with_argument_assignment_list_sempred(localctx, predIndex);
	case 55:
			return this.child_instance_sempred(localctx, predIndex);
	case 63:
			return this.declarations_sempred(localctx, predIndex);
	case 67:
			return this.native_symbol_list_sempred(localctx, predIndex);
	case 68:
			return this.category_symbol_list_sempred(localctx, predIndex);
	case 69:
			return this.symbol_list_sempred(localctx, predIndex);
	case 73:
			return this.expression_list_sempred(localctx, predIndex);
	case 75:
			return this.typedef_sempred(localctx, predIndex);
	case 82:
			return this.type_identifier_list_sempred(localctx, predIndex);
	case 88:
			return this.argument_list_sempred(localctx, predIndex);
	case 94:
			return this.any_type_sempred(localctx, predIndex);
	case 95:
			return this.category_method_declaration_list_sempred(localctx, predIndex);
	case 100:
			return this.module_token_sempred(localctx, predIndex);
	case 103:
			return this.variable_identifier_list_sempred(localctx, predIndex);
	case 105:
			return this.native_statement_list_sempred(localctx, predIndex);
	case 109:
			return this.statement_list_sempred(localctx, predIndex);
	case 110:
			return this.switch_case_statement_list_sempred(localctx, predIndex);
	case 111:
			return this.catch_statement_list_sempred(localctx, predIndex);
	case 114:
			return this.literal_list_literal_sempred(localctx, predIndex);
	case 122:
			return this.expression_tuple_sempred(localctx, predIndex);
	case 123:
			return this.dict_entry_list_sempred(localctx, predIndex);
	case 127:
			return this.assignable_instance_sempred(localctx, predIndex);
	case 128:
			return this.is_expression_sempred(localctx, predIndex);
	case 130:
			return this.key_token_sempred(localctx, predIndex);
	case 131:
			return this.value_token_sempred(localctx, predIndex);
	case 132:
			return this.symbols_token_sempred(localctx, predIndex);
	case 139:
			return this.javascript_expression_sempred(localctx, predIndex);
	case 143:
			return this.javascript_arguments_sempred(localctx, predIndex);
	case 146:
			return this.javascript_identifier_expression_sempred(localctx, predIndex);
	case 150:
			return this.python_expression_sempred(localctx, predIndex);
	case 155:
			return this.python_ordinal_argument_list_sempred(localctx, predIndex);
	case 156:
			return this.python_named_argument_list_sempred(localctx, predIndex);
	case 158:
			return this.python_identifier_expression_sempred(localctx, predIndex);
	case 162:
			return this.java_expression_sempred(localctx, predIndex);
	case 166:
			return this.java_arguments_sempred(localctx, predIndex);
	case 169:
			return this.java_identifier_expression_sempred(localctx, predIndex);
	case 170:
			return this.java_class_identifier_expression_sempred(localctx, predIndex);
	case 174:
			return this.csharp_expression_sempred(localctx, predIndex);
	case 178:
			return this.csharp_arguments_sempred(localctx, predIndex);
	case 181:
			return this.csharp_identifier_expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

EParser.prototype.native_category_mapping_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.else_if_statement_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 36);
		case 3:
			return this.precpred(this._ctx, 35);
		case 4:
			return this.precpred(this._ctx, 34);
		case 5:
			return this.precpred(this._ctx, 33);
		case 6:
			return this.precpred(this._ctx, 32);
		case 7:
			return this.precpred(this._ctx, 31);
		case 8:
			return this.precpred(this._ctx, 30);
		case 9:
			return this.precpred(this._ctx, 29);
		case 10:
			return this.precpred(this._ctx, 28);
		case 11:
			return this.precpred(this._ctx, 25);
		case 12:
			return this.precpred(this._ctx, 24);
		case 13:
			return this.precpred(this._ctx, 23);
		case 14:
			return this.precpred(this._ctx, 22);
		case 15:
			return this.precpred(this._ctx, 21);
		case 16:
			return this.precpred(this._ctx, 20);
		case 17:
			return this.precpred(this._ctx, 18);
		case 18:
			return this.precpred(this._ctx, 17);
		case 19:
			return this.precpred(this._ctx, 16);
		case 20:
			return this.precpred(this._ctx, 15);
		case 21:
			return this.precpred(this._ctx, 14);
		case 22:
			return this.precpred(this._ctx, 13);
		case 23:
			return this.precpred(this._ctx, 12);
		case 24:
			return this.precpred(this._ctx, 11);
		case 25:
			return this.precpred(this._ctx, 27);
		case 26:
			return this.precpred(this._ctx, 26);
		case 27:
			return this.precpred(this._ctx, 19);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.unresolved_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 28:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.unresolved_selector_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 29:
			return this.wasNot(EParser.WS);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.invocation_trailer_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 30:
			return this.willBe(EParser.LF);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.instance_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 31:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.instance_selector_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 32:
			return this.wasNot(EParser.WS);
		case 33:
			return this.wasNot(EParser.WS);
		case 34:
			return this.wasNot(EParser.WS);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.argument_assignment_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 35:
			return this.was(EParser.WS);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.with_argument_assignment_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 36:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.child_instance_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 37:
			return this.wasNot(EParser.WS);
		case 38:
			return this.wasNot(EParser.WS);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.declarations_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 39:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.native_symbol_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 40:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.category_symbol_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 41:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.symbol_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 42:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.expression_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 43:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.typedef_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 44:
			return this.precpred(this._ctx, 3);
		case 45:
			return this.precpred(this._ctx, 2);
		case 46:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.type_identifier_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 47:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.argument_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 48:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.any_type_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 49:
			return this.precpred(this._ctx, 2);
		case 50:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.category_method_declaration_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 51:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.module_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 52:
			return this.isText(localctx.i1,"module");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.variable_identifier_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 53:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.native_statement_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 54:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.statement_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 55:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.switch_case_statement_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 56:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.catch_statement_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 57:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.literal_list_literal_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 58:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.expression_tuple_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 59:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.dict_entry_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 60:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.assignable_instance_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 61:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.is_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 62:
			return this.willBeAOrAn();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.key_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 63:
			return this.isText(localctx.i1,"key");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.value_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 64:
			return this.isText(localctx.i1,"value");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.symbols_token_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 65:
			return this.isText(localctx.i1,"symbols");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.javascript_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 66:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.javascript_arguments_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 67:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.javascript_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 68:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.python_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 69:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.python_ordinal_argument_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 70:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.python_named_argument_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 71:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.python_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 72:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.java_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 73:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.java_arguments_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 74:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.java_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 75:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.java_class_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 76:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.csharp_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 77:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.csharp_arguments_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 78:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

EParser.prototype.csharp_identifier_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 79:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.EParser = EParser;
